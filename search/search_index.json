{"config":{"lang":["en","zh"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u5173\u4e8e\u200b\u6211","text":"<p>Good Luck!</p> <p>It\u2019s what you do right now that makes a difference\uff01</p>"},{"location":"#\u5173\u4e8e\u6211","title":"\u5173\u4e8e\u200b\u6211","text":"<p>\u200b\u6211\u200b\u662f\u200bKenForever1\uff0c\u200b\u70ed\u7231\u200b\u9605\u8bfb\u200b\u3001\u200b\u559c\u6b22\u200b\u63a2\u7a76\u200b\u6e90\u7801\u200b\u548c\u200b\u65b0\u200b\u7684\u200b\u7f16\u7a0b\u6280\u672f\u200b\u3002\u200b\u770b\u5230\u200b\u6709\u8da3\u200b\u7684\u200b\u4e1c\u897f\u200b\u4f1a\u200b\u8bb0\u5f55\u4e0b\u6765\u200b\uff0c\u200b\u5206\u4eab\u200b\u7684\u200b\u597d\u5904\u200b\u591a\u591a\u76ca\u5584\u200b\uff1b\u200b\u7f16\u7a0b\u200b\u9664\u4e86\u200b\u521b\u9020\u529b\u200b\uff0c\u200b\u4e5f\u200b\u9700\u8981\u200b\u8d81\u624b\u200b\u9ad8\u6548\u200b\u7684\u200b\u5de5\u5177\u200b\u3002\u200b\u56e0\u6b64\u200b\u4e5f\u200b\u4f1a\u200b\u5c1d\u8bd5\u200b\u4e00\u4e9b\u200b\u9ad8\u6548\u200b\u7684\u200b\u5de5\u5177\u200b\uff0c\u200b\u6253\u9020\u200b\u81ea\u5df1\u200b\u7684\u200b\u5de5\u4f5c\u200b\u6d41\u200b\u3002</p> <p>\u200b\u5bf9\u200b\u7f16\u7a0b\u8bed\u8a00\u200b\u4e0d\u200b\u8bb2\u7a76\u200b\uff0c\u200b\u5e38\u7528\u200bC++\u3001Rust\u3001Python, \u200b\u4e0d\u540c\u200b\u7684\u200b\u8bed\u8a00\u200b\u6709\u200b\u4e0d\u540c\u200b\u7684\u200b\u8bed\u6cd5\u200b\u7cd6\u200b\uff0c\u200b\u5728\u200b\u4e0d\u540c\u200b\u7684\u200b\u573a\u666f\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u4e00\u5b9a\u200b\u7a0b\u5ea6\u200b\u63d0\u9ad8\u6548\u7387\u200b\uff0cGolang\u3001C#\u3001Typescript\u3001lua\u200b\u7b49\u200b\u4e5f\u200b\u4f7f\u7528\u200b\u8fc7\u200b\u4e00\u4e9b\u200b\u3002\u200b\u6709\u4e9b\u200b\u95ee\u9898\u200b\u8bed\u8a00\u200b\u4e0d\u662f\u200b\u5173\u952e\u6027\u200b\u95ee\u9898\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u826f\u597d\u200b\u7684\u200b\u6570\u636e\u7ed3\u6784\u200b\u548c\u200b\u9ad8\u6548\u200b\u7684\u200b\u7cfb\u7edf\u200b\u8c03\u7528\u200b\uff0c\u200b\u9002\u5408\u200b\u67d0\u4e2a\u200b\u9886\u57df\u200b\u7684\u200b\u7cfb\u7edf\u200b\u8bbe\u8ba1\u200b\u7b49\u7b49\u200b\u89e3\u51b3\u200b\u3002</p> <p>\u200b\u5e73\u65f6\u200b\u7684\u8bdd\u200b\uff0c\u200b\u953b\u70bc\u8eab\u4f53\u200b\u5f88\u200b\u91cd\u8981\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u4f7f\u200b\u60a8\u200b\u7684\u200b\u5934\u8111\u200b\u66f4\u52a0\u200b\u6d3b\u8dc3\u200b\u3001\u200b\u601d\u8003\u200b\u901f\u5ea6\u200b\u66f4\u200b\u5feb\u200b\uff0c\u200b\u4fdd\u6301\u200b\u5f00\u5fc3\u200b\u548c\u200b\u6fc0\u60c5\u200b\u3002\u200b\u5e73\u65f6\u200b\u4f1a\u200b\u53bb\u200b\u6e38\u6cf3\u200b\u3001\u200b\u6253\u6253\u200b\u53f0\u7403\u200b\uff0c\u200b\u6237\u5916\u6d3b\u52a8\u200b\u3002</p>"},{"location":"#\u627e\u5230\u6211","title":"\u627e\u5230\u200b\u6211","text":"<p>\u200b\u5728\u200b\u77e5\u4e4e\u200b\uff0c\u200b\u516c\u4f17\u200b\u53f7\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u627e\u5230\u200b\u6211\u200b\uff01</p> <p>\u200b\u77e5\u4e4e\u200b\uff1aSteveForver,\u200b\u4e92\u8054\u7f51\u200b\u5927\u5382\u200b\u7a0b\u5e8f\u5458\u200b\uff0c\u200b\u70ed\u7231\u200b\u7f16\u7a0b\u200b\u548c\u200b\u9605\u8bfb\u200b\uff0c\u200b\u5b66\u65e0\u6b62\u5883\u200b</p> <p>\u200b\u516c\u4f17\u200b\u53f7\u200b\uff1a\u200b\u9646\u543e\u7a77\u200b\u5947\u7bc7\u200b, \u200b\u80fd\u200b\u540c\u9014\u200b\u5076\u9047\u200b\u5728\u200b\u8fd9\u200b\u661f\u7403\u200b\u4e0a\u200b\uff0c\u200b\u63a2\u7d22\u200b\u3001\u200b\u8bb0\u5f55\u200b\u3001\u200b\u4eab\u53d7\u200b\u2026</p> <p>Github\uff1aKenForever\u2019s github</p> <p>LLM Cool Docs: LLM\u200b\u5927\u200b\u6a21\u578b\u200b\u63a8\u7406\u200b</p> <p>!!! Tip: Remember to follow me for more exciting content.</p> <p></p>"},{"location":"#\u4e00\u4e9b\u5f00\u6e90\u9879\u76ee","title":"\u4e00\u4e9b\u200b\u5f00\u6e90\u200b\u9879\u76ee","text":"<p>\u200b\u5305\u62ec\u200b\u4e00\u4e9b\u200b\u5e38\u7528\u200b\u7684\u200b\u6548\u7387\u200b\u5de5\u5177\u200b\u548c\u200bnvim\u200b\u63d2\u4ef6\u200b\u7b49\u7b49\u200b\uff0c\u200b\u5f00\u6e90\u200b\u9879\u76ee\u200b</p>"},{"location":"#\u4e00\u4e9b\u6587\u7ae0","title":"\u4e00\u4e9b\u200b\u6587\u7ae0","text":"<ul> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>llama\u200b\u4e2d\u200b\u7684\u200bGGUF\u200b\u683c\u5f0f\u200b\u5982\u4f55\u200b\u5feb\u901f\u200b\u52a0\u8f7d\u200b\u6a21\u578b\u200b\u6587\u4ef6\u200b\uff1f</li> <li>rust\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bTcp\u200b\u96a7\u9053\u200b\u5de5\u5177\u200b</li> <li>\u200b\u66f4\u200b\u591a\u200b\u2026</li> </ul>"},{"location":"#\u53cb\u94fe","title":"\u53cb\u94fe","text":"<p>\u200b\u524d\u8fdb\u200b\u8def\u4e0a\u200b\u9047\u5230\u200b\u7684\u200b\u4e00\u4e9b\u200b\u4f18\u79c0\u200bblog\u200b\u548c\u200b\u8d44\u6e90\u200b\u94fe\u63a5\u200b\uff0c\u200b\u53cb\u94fe\u200b.</p> <p>\u200b\u4e00\u4e9b\u200b\u53d7\u76ca\u200b\u3001\u200b\u6709\u7528\u200b\u7684\u200b\u8d44\u6e90\u200b\u94fe\u63a5\u200b\u3002</p>"},{"location":"#thanks","title":"Thanks","text":"<p>this blog theme is inspired by Knowledge-Garden\u3002</p> <p></p>"},{"location":"blog/","title":"\u535a\u5ba2\u200b\u6587\u7ae0","text":""},{"location":"blog/#\u535a\u5ba2\u6587\u7ae0","title":"\u535a\u5ba2\u200b\u6587\u7ae0","text":"\u60a8\u597d\u200b\uff0c\u200b\u5f88\u200b\u9ad8\u5174\u200b\u8ba4\u8bc6\u200b\u4f60\u200b \ud83d\udc4b\u200b\u6211\u200b\u662f\u200b KenForever1 \u200b\u80fd\u200b\u540c\u9014\u200b\u5076\u9047\u200b\u5728\u200b\u8fd9\u200b\u661f\u7403\u200b\u4e0a\u200b\uff0c\u200b\u63a2\u7d22\u200b\u3001\u200b\u8bb0\u5f55\u200b\u3001\u200b\u4eab\u53d7\u200b\u2026\ud83c\udfb6\ud83d\udc27\ud83d\ude06"},{"location":"blog/300%E8%A1%8C%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAboundedspscqueue/","title":"300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue","text":"<p>\u200b\u6211\u200b\u6bcf\u5929\u200b\u65e9\u4e0a\u200b\u90fd\u200b\u4f1a\u200b\u6253\u5f00\u200bGithub\u200b\u7684\u200bTrendings\u200b\u677f\u5757\u200b\uff0c\u200b\u4e86\u89e3\u200b\u6700\u65b0\u200b\u7684\u200b\u52a8\u6001\u200b\uff0c\u200b\u6211\u200b\u76f8\u4fe1\u200b\u8fd9\u200b\u662f\u200b\u4e2a\u200b\u8fd8\u200b\u4e0d\u9519\u200b\u7684\u200b\u4e60\u60ef\u200b\u3002\u200b\u9047\u5230\u200b\u611f\u5174\u8da3\u200b\u7684\u200b\u9879\u76ee\u200b\u6211\u4f1a\u200b\u6253\u5f00\u200b\u770b\u770b\u200b\u6e90\u7801\u200b\uff0c\u200b\u5b66\u4e60\u200b\u4e00\u4e0b\u200b\u5927\u4f6c\u200b\u4eec\u200b\u7684\u200b\u5199\u6cd5\u200b\u548c\u200b\u5b9e\u73b0\u200b\u3002</p> \u200b\u5feb\u901f\u200b\u67e5\u770b\u200bgithub\u200b\u9879\u76ee\u200b\u6e90\u7801\u200b <p>\u200b\u4fee\u6539\u200bgithub.com/xxx/yyy\u200b\u94fe\u63a5\u200b\u4e3a\u200bgithub1s.com/xxx/yyy\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u5728\u200b\u6d4f\u89c8\u5668\u200b\u6253\u5f00\u200bvscode\u200b\u7c7b\u4f3c\u200b\u754c\u9762\u200b\u9605\u8bfb\u200b\u4ee3\u7801\u200b\u4e86\u200b\u3002</p> <p>\u200b\u4eca\u5929\u200b\u5206\u4eab\u200b\u7684\u200b\u662f\u200bquill\uff0c\u200b\u4e00\u4e2a\u200b\u5f02\u6b65\u200b\u4f4e\u200b\u5ef6\u8fdf\u200b\u7684\u200b\u9ad8\u6548\u200b\u65e5\u5fd7\u200b\u5e93\u200b\u5b9e\u73b0\u200b\u3002</p> <ul> <li>\u200b\u5206\u4e3a\u200bFrontend hot\u200b\u7ebf\u7a0b\u200b\uff08\u200b\u652f\u6301\u200b\u591a\u7ebf\u7a0b\u200b\uff09\u200b\u548c\u200bBackend\u200b\u7ebf\u7a0b\u200b\u3002hot\u200b\u7ebf\u7a0b\u200b\u5c06\u200b\u65e5\u5fd7\u200b\u4fe1\u606f\u200b\u63d0\u4ea4\u200b\u7ed9\u200bBounded/Unbounded SPSC Queue\uff0c\u200b\u7531\u200b\u7edf\u4e00\u200b\u7684\u200bBackend\u200b\u7ebf\u7a0b\u200b\u53bb\u200b\u5904\u7406\u200b\u3002Backend pop SPSC\u200b\u961f\u5217\u200b,\u200b\u683c\u5f0f\u5316\u200b\u65e5\u5fd7\u200b\u6d88\u606f\u200b\u4fdd\u5b58\u200b\u5230\u200b\u4e00\u4e2a\u200bbuffer\u200b\u4e2d\u200b\uff1b\u200b\u4e3a\u4e86\u200b\u4fdd\u6301\u200b\u65e5\u5fd7\u200b\u987a\u5e8f\u200b\uff0c\u200b\u7b49\u200bSPSC\u200b\u4e3a\u7a7a\u200b\u6216\u8005\u200bbuffer\u200b\u6700\u5927\u200bsize\u200b\u624d\u200b\u8f93\u51fa\u200b\u4e00\u6b21\u200b\u65e5\u5fd7\u200b\u3002\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u7c7b\u4f3c\u200bspdlog\u200b\u5e93\u200b\u4e00\u6837\u200b\u7684\u200b\u53ef\u200b\u6269\u5c55\u200b\u7684\u200bSinks\uff0c\u200b\u6bd4\u5982\u200b\u8f93\u51fa\u200b\u5230\u200b\u6587\u4ef6\u200b\u3001stdout\u200b\u7b49\u200b\u3002</li> <li>\u200b\u5b9e\u73b0\u200b\u4e86\u200bLinux huge page\u200b\u5927\u9875\u200b\u652f\u6301\u200b\u3002</li> <li>\u200b\u91c7\u7528\u200b\u4e86\u200b\u7f16\u8bd1\u200b\u65f6\u200b\u4f18\u5316\u200b\uff0c\u200b\u4f7f\u7528\u200b\u4e86\u200b\u5f88\u591a\u200bgnu attribute\u200b\u6807\u8bb0\u200b\u4f18\u5316\u200b\u4ee3\u7801\u200b\uff0c\u200b\u6bd4\u5982\u200b__attribute__((hot))\u3001attribute((cold))\u3001likely\u200b\u548c\u200bunlikely\u200b\u7b49\u200b\u3002</li> <li>\u200b\u9488\u5bf9\u200bx86\u200b\u67b6\u6784\u200b\u5728\u200bSPSC\u200b\u4e2d\u200b\u8fdb\u884c\u200b\u4e86\u200b\u5237\u65b0\u200bcache\u3001\u200b\u9884\u53d6\u200b\u7b49\u200b\u4f18\u5316\u200b\uff0c\u200b\u6bd4\u5982\u200b_flush_cachelines\u3001_mm_prefetch\u3002</li> </ul>"},{"location":"blog/300%E8%A1%8C%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAboundedspscqueue/#\u67b6\u6784","title":"\u67b6\u6784","text":""},{"location":"blog/300%E8%A1%8C%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAboundedspscqueue/#boundedspsc\u961f\u5217\u5b9e\u73b0","title":"BoundedSPSC\u200b\u961f\u5217\u200b\u5b9e\u73b0","text":""},{"location":"blog/300%E8%A1%8C%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAboundedspscqueue/#\u7c7b\u4ee5\u53ca\u6210\u5458\u53d8\u91cf\u58f0\u660e","title":"\u7c7b\u200b\u4ee5\u53ca\u200b\u6210\u5458\u200b\u53d8\u91cf\u200b\u58f0\u660e","text":"<p>SPSC\u200b\u8868\u793a\u200b\u5355\u200b\u751f\u4ea7\u8005\u200b\u5355\u200b\u6d88\u8d39\u8005\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u4e0a\u200b\u91c7\u7528\u200b\u4e86\u200bmmap\u200b\u7533\u8bf7\u200b\u4e00\u4e2a\u200b2 * capacity\u200b\u7684\u200b\u5185\u5b58\u200b\u533a\u57df\u200b\uff0c\u200b\u5148\u200b\u7b80\u5355\u200b\u770b\u770b\u200bClass\u200b\u58f0\u660e\u200b\uff1a </p>C++<pre><code>template &lt;typename T&gt;\nclass BoundedSPSCQueueImpl\n{\npublic:\n  using integer_type = T;\n\nprivate:\n  static constexpr integer_type CACHELINE_MASK{CACHE_LINE_SIZE - 1};\n\n  // queue\u200b\u7684\u200b\u5185\u5b58\u5bb9\u91cf\u200b\uff0c\u200b\u4e00\u822c\u200b\u4e3a\u200b2\u200b\u7684\u200bn\u200b\u6b21\u65b9\u200b\n  integer_type const _capacity;\n  // \u200b\u5927\u5c0f\u200b\u4e3a\u200b_capacity - 1\uff0c\u200b\u7528\u4e8e\u200b\u51fd\u6570\u200b\u5b9e\u73b0\u200b\u4e2d\u200b\u7684\u200b\u4e00\u4e9b\u200b\u8ba1\u7b97\u200b\n  integer_type const _mask;\n  integer_type const _bytes_per_batch;\n  // mmap\u200b\u6620\u5c04\u200b\u7684\u200b\u5185\u5b58\u200b\u533a\u57df\u200b\u6307\u9488\u200b\uff0cwriter_pos\u200b\u548c\u200breader_pos\u200b\u5c31\u662f\u200b\u57fa\u4e8e\u200b\u8fd9\u4e2a\u200b\u4f4d\u7f6e\u200b\u64cd\u4f5c\u200b\n  std::byte* const _storage{nullptr};\n  // linux\u200b\u5e73\u53f0\u200bhuge page\u200b\u652f\u6301\u200b\uff0c\u200b\u5728\u200bmmap\u200b\u51fd\u6570\u200b\u7684\u200b\u65f6\u5019\u200b\u6307\u5b9a\u200bflags MAP_HUGETLB\u200b\u5f00\u542f\u200b\n  bool const _huge_pages_enabled;\n  // \u200b\u8bb0\u5f55\u200bwrite\u200b\u6307\u9488\u200b\u7684\u200b\u4f4d\u7f6e\u200b\uff08\u200b\u5bf9\u9f50\u200bcacheline\u200b\u907f\u514d\u200bcpu\u200b\u4f2a\u200b\u5171\u4eab\u200b\uff09\n  alignas(CACHE_LINE_ALIGNED) std::atomic&lt;integer_type&gt; _atomic_writer_pos{0};\n  alignas(CACHE_LINE_ALIGNED) integer_type _writer_pos{0};\n  integer_type _reader_pos_cache{0}; // cache\u200b\u4f18\u5316\u200b\uff0cwriter\u200b\u5224\u65ad\u200b\u7a7a\u95f4\u200b\u662f\u5426\u200b\u5145\u8db3\u200b\u65f6\u200b\uff0c\u200b\u51cf\u5c11\u200b\u5bf9\u200b_atomic_reader_pos\u200b\u7684\u200bload\n  integer_type _last_flushed_writer_pos{0};\n  // \u200b\u8bb0\u5f55\u200bread\u200b\u6307\u9488\u200b\u7684\u200b\u4f4d\u7f6e\u200b\n  alignas(CACHE_LINE_ALIGNED) std::atomic&lt;integer_type&gt; _atomic_reader_pos{0};\n  alignas(CACHE_LINE_ALIGNED) integer_type _reader_pos{0};\n  mutable integer_type _writer_pos_cache{0};  // \u200b\u8fd9\u4e2a\u200bcache\u200b\u4e5f\u200b\u662f\u200b\u4e00\u4e2a\u200b\u4f18\u5316\u200b\u70b9\u200b\uff0c\u200b\u901a\u8fc7\u200bread/write\u200b\u52a0\u200bcommit\u200b\u4e24\u6b65\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u5728\u200bread\u200b\u5224\u65ad\u200bempty\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u51cf\u5c11\u200b\u5bf9\u200b_atomic_writer_pos\u200b\u7684\u200bload\uff0c\u200b\u5148\u200b\u4f7f\u7528\u200bcache\u200b\u5224\u65ad\u200b\u76f8\u7b49\u200b\uff0c\u200b\u7136\u540e\u200b\u518d\u200b\u786e\u8ba4\u200b\u662f\u5426\u200b\u548c\u200b_atomic_writer_pos\u200b\u76f8\u7b49\u200b\n  integer_type _last_flushed_reader_pos{0};\n}\n</code></pre> alignas(CACHE_LINE_ALIGNED) \u200b\u6807\u8bb0\u200b\u7684\u200b\u4f5c\u7528\u200b\u662f\u200b\u5c06\u200b\u8bfb\u5199\u200b\u4f4d\u7f6e\u200b\u6807\u8bb0\u200b\u8fdb\u884c\u200bcacheline\u200b\u5bf9\u9f50\u200b\uff08\u200b\u4e00\u822c\u200b\u662f\u200b64\u200b\u5b57\u8282\u200b\uff09\uff0c\u200b\u907f\u514d\u200b\u4e86\u200b\u4f2a\u200b\u5171\u4eab\u200b\u95ee\u9898\u200b\u3002<p></p>"},{"location":"blog/300%E8%A1%8C%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAboundedspscqueue/#\u5185\u5b58\u533a\u57df\u7533\u8bf7","title":"\u5185\u5b58\u200b\u533a\u57df\u200b\u7533\u8bf7","text":"<p>\u200b\u7533\u8bf7\u200b\u4e00\u4e2a\u200b\u5185\u5b58\u200b\uff0c</p> C++<pre><code>QUILL_NODISCARD static void* _alloc_aligned(size_t size, size_t alignment, QUILL_MAYBE_UNUSED bool huges_pages_enabled)\n  {\n    // Calculate the total size including the metadata and alignment\n    // metadata\u200b\u4fdd\u5b58\u200b\u4e86\u200btotal_size\u200b\u548c\u200boffset\n    // |  total_size | offs  | xxxx         | storage area |\n    // |          \u200b\u5143\u200b\u6570\u636e\u200b      |\u200b\u672a\u200b\u5bf9\u9f50\u200b\u533a\u57df\u200b    | \u200b\u5bf9\u9f50\u200b\u7684\u200b\u5b58\u50a8\u200b\u533a\u57df\u200b |\n    // |                  \u200b\u5206\u914d\u200b\u7684\u200b\u5168\u90e8\u200b\u533a\u57df\u200b                     |\n\n    constexpr size_t metadata_size{2u * sizeof(size_t)};\n    size_t const total_size{size + metadata_size + alignment};\n\n    // Allocate the memory\uff0c\u200b\u533f\u540d\u200b \u200b\u79c1\u6709\u200b\u5185\u5b58\u200b\u533a\u57df\u200b\uff0c\u200b\u79c1\u6709\u200b\u7528\u5230\u200b\u4e86\u200b\u5199\u200b\u65f6\u200b\u62f7\u8d1d\u200b\u673a\u5236\u200b\uff0c\u200b\u4fee\u6539\u200b\u7684\u200b\u5185\u5bb9\u200b\u5176\u5b83\u200b\u8fdb\u7a0b\u200b\u770b\u4e0d\u5230\u200b\u3002\n    int flags = MAP_PRIVATE | MAP_ANONYMOUS;\n\n  // \u200b\u5b8f\u200b\u5b9a\u4e49\u200b\u5f00\u542f\u200bhuge page\n  #if defined(__linux__)\n    if (huges_pages_enabled)\n    {\n      flags |= MAP_HUGETLB;\n    }\n  #endif\n\n    void* mem = ::mmap(nullptr, total_size, PROT_READ | PROT_WRITE, flags, -1, 0);\n\n    if (mem == MAP_FAILED)\n    {\n      QUILL_THROW(QuillError{std::string{\"mmap failed. errno: \"} + std::to_string(errno) +\n                             \" error: \" + strerror(errno)});\n    }\n\n    // Calculate the aligned address after the metadata\n    std::byte* aligned_address = _align_pointer(static_cast&lt;std::byte*&gt;(mem) + metadata_size, alignment);\n\n    // Calculate the offset from the original memory location\n    auto const offset = static_cast&lt;size_t&gt;(aligned_address - static_cast&lt;std::byte*&gt;(mem));\n\n    // Store the size and offset information in the metadata\n    std::memcpy(aligned_address - sizeof(size_t), &amp;total_size, sizeof(total_size));\n    std::memcpy(aligned_address - (2u * sizeof(size_t)), &amp;offset, sizeof(offset));\n\n    return aligned_address;\n  }\n</code></pre> <p>\u200b\u5206\u914d\u200b\u7684\u200b\u5185\u5b58\u200b\u533a\u57df\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\uff0c\u200b\u603b\u200b\u5206\u914d\u200b\u7684\u200b\u533a\u57df\u200b\u5927\u5c0f\u200b\u4e3a\u200b2 * cap\uff1b\u200b\u5143\u200b\u6570\u636e\u200b\u533a\u57df\u200b\u5927\u5c0f\u200b 2 * sizeof(size_t), \u200b\u5206\u522b\u200b\u4fdd\u5b58\u200b\u4e86\u200btotal_size\u200b\u548c\u200boffset\u200b\u504f\u79fb\u91cf\u200b\uff1b\u200b\u5b58\u50a8\u200b\u533a\u57df\u200b\uff08storage\u200b\u6307\u9488\u200b\u6307\u5411\u200b\u7684\u200b\u533a\u57df\u200b\uff09\u200b\u6309\u7167\u200balignment\u200b\u53c2\u6570\u200b\u5bf9\u9f50\u200b\uff0c\u200b\u6240\u4ee5\u200b\u6709\u200b\u4e00\u6bb5\u200b\u672a\u200b\u5bf9\u9f50\u200b\u533a\u57df\u200b\u7a7a\u95f2\u200b\uff0coffset = storage - start_pos\u3002 </p>Bash<pre><code>|  total_size | offset  | xxxx         | storage area |\n|          \u200b\u5143\u200b\u6570\u636e\u200b        |\u200b\u672a\u200b\u5bf9\u9f50\u200b\u533a\u57df\u200b    | \u200b\u5bf9\u9f50\u200b\u7684\u200b\u5b58\u50a8\u200b\u533a\u57df\u200b |\n|                     \u200b\u5206\u914d\u200b\u7684\u200b\u5168\u90e8\u200b\u533a\u57df\u200b                    |\n</code></pre><p></p> \u200b\u5b8f\u200b\u5b9a\u4e49\u200b\u7684\u200b\u7528\u6cd5\u200b <p>QUILL_NODISCARD\u200b\u5b9e\u9645\u4e0a\u200b\u662f\u200bgnu attribute\u200b\u6807\u6ce8\u200b[[nodiscard]]\uff0c\u200b\u8981\u6c42\u200b\u8981\u200b\u51fd\u6570\u8c03\u7528\u200b\u8005\u200b\u5904\u7406\u200b\u8fd4\u56de\u503c\u200b\u3002</p> <p>_align_pointer\u200b\u4e5f\u200b\u662f\u200b\u5e38\u7528\u200b\u7684\u200b\u5b9e\u73b0\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u6bd4\u5982\u200b\u4e00\u4e2a\u200b\u6570\u200b\uff0c\u200b\u8981\u200b\u5b9e\u73b0\u200b16\u200b\u5bf9\u9f50\u200b\uff0c\u200b\u6309\u7167\u200b\u4f4d\u200b\u8fd0\u7b97\u200b\u5c31\u662f\u200b\uff1a(num + 16 - 1) &amp; ~15 \u3002 </p>Bash<pre><code>  QUILL_NODISCARD static std::byte* _align_pointer(void* pointer, size_t alignment) noexcept\n  {\n    assert(is_power_of_two(alignment) &amp;&amp; \"alignment must be a power of two\");\n    return reinterpret_cast&lt;std::byte*&gt;((reinterpret_cast&lt;uintptr_t&gt;(pointer) + (alignment - 1ul)) &amp;\n                                        ~(alignment - 1ul));\n  }\n</code></pre><p></p> \u200b\u5224\u65ad\u200b\u4e00\u4e2a\u200b\u6570\u200b\u662f\u4e0d\u662f\u200b2\u200b\u7684\u200bn\u200b\u6b21\u65b9\u200b <p>num &amp; (num - 1) == 0</p> <p>\u200b\u770b\u770b\u200b\u6784\u9020\u51fd\u6570\u200b\u4e2d\u200b\u600e\u4e48\u200b\u5206\u914d\u5185\u5b58\u200b\u7684\u200b\uff0c_storage\u200b\u53d8\u91cf\u200b\u8d4b\u503c\u200b\u8c03\u7528\u200b\u4e86\u200b_alloc_aligned\u200b\u51fd\u6570\u200b\u3002\u200b\u5206\u914d\u200b\u7684\u200bsize\u200b\u662f\u200b2 * cap, \u200b\u5bf9\u9f50\u200b 2 * cacheline_size, 128\u200b\u5b57\u8282\u200b\u3002 </p>C++<pre><code>  QUILL_ATTRIBUTE_HOT explicit BoundedSPSCQueueImpl(integer_type capacity, bool huges_pages_enabled = false,\n                                                    integer_type reader_store_percent = 5)\n    : _capacity(next_power_of_two(capacity)),\n      _mask(_capacity - 1),\n      _bytes_per_batch(static_cast&lt;integer_type&gt;(_capacity * static_cast&lt;double&gt;(reader_store_percent) / 100.0)),\n      _storage(static_cast&lt;std::byte*&gt;(_alloc_aligned(2ull * static_cast&lt;uint64_t&gt;(_capacity),\n                                                      CACHE_LINE_ALIGNED, huges_pages_enabled))),\n      _huge_pages_enabled(huges_pages_enabled)\n  {\n    std::memset(_storage, 0, 2ull * static_cast&lt;uint64_t&gt;(_capacity));\n\n    _atomic_writer_pos.store(0);\n    _atomic_reader_pos.store(0);\n\n  }\n\n  ~BoundedSPSCQueueImpl() { _free_aligned(_storage); }\n</code></pre><p></p> <p>\u200b\u6790\u6784\u200b\u51fd\u6570\u200b\u91ca\u653e\u200b\u5185\u5b58\u200b\u533a\u57df\u200b\uff0c\u200b\u8c03\u7528\u200bunmap\u200b\u51fd\u6570\u200b, \u200b\u6839\u636e\u200b\u5143\u200b\u6570\u636e\u200b\u83b7\u53d6\u200b\u5230\u200b\u504f\u79fb\u91cf\u200b\uff0c\u200b\u7136\u540e\u200b\u5b9a\u4f4d\u200b\u5230\u200bmmap\u200b\u8fd4\u56de\u200b\u7684\u200b\u6307\u9488\u200b\u3002 </p>C++<pre><code>  void static _free_aligned(void* ptr) noexcept\n  {\n    // Retrieve the size and offset information from the metadata\n    size_t offset;\n    std::memcpy(&amp;offset, static_cast&lt;std::byte*&gt;(ptr) - (2u * sizeof(size_t)), sizeof(offset));\n\n    size_t total_size;\n    std::memcpy(&amp;total_size, static_cast&lt;std::byte*&gt;(ptr) - sizeof(size_t), sizeof(total_size));\n\n    // Calculate the original memory block address\n    void* mem = static_cast&lt;std::byte*&gt;(ptr) - offset;\n\n    ::munmap(mem, total_size);\n  }\n</code></pre><p></p>"},{"location":"blog/300%E8%A1%8C%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAboundedspscqueue/#\u961f\u5217\u7684\u5e38\u7528\u51fd\u6570\u5b9e\u73b0","title":"\u961f\u5217\u200b\u7684\u200b\u5e38\u7528\u200b\u51fd\u6570\u200b\u5b9e\u73b0","text":""},{"location":"blog/300%E8%A1%8C%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAboundedspscqueue/#empty","title":"empty","text":"<p>\u200b\u5982\u679c\u200b\u8bfb\u5199\u200b\u4f4d\u7f6e\u200b\u76f8\u7b49\u200b\uff0c\u200b\u5c31\u200b\u8868\u793a\u200b\u961f\u200b\u5217\u4e3a\u200b\u7a7a\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u4f7f\u7528\u200b\u4e86\u200b\u4e24\u6b21\u200b\u5224\u65ad\u200b\uff0c\u200b\u5148\u200b\u6bd4\u8f83\u200b_writer_pos_cache == _reader_pos\uff0c\u200b\u5982\u679c\u200b\u76f8\u7b49\u200b\uff0cload atomic\u200b\u53d8\u91cf\u200b\u4e8c\u6b21\u200b\u786e\u8ba4\u200b\u3002 \u200b\u8be5\u200bempty\u200b\u51fd\u6570\u200b\u53ea\u200breader\u200b\u8c03\u7528\u200b\u6709\u6548\u200b, \u200b\u5199\u8005\u200b\u4e0d\u7528\u200b\u5173\u5fc3\u200b\u961f\u5217\u200b\u662f\u5426\u200b\u4e3a\u7a7a\u200b\u3002 </p>C++<pre><code>  QUILL_NODISCARD QUILL_ATTRIBUTE_HOT bool empty() const noexcept\n  {\n    // reader\u200b\u4f1a\u200b\u4e00\u76f4\u200b\u7b49\u200bwriter commit\u200b\u63d0\u4ea4\u200b\u4e86\u200b\u4ee5\u540e\u200b\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200b\u6539\u53d8\u200b\u4e86\u200b_atomic_writer_pos\uff0cempty\u200b\u8fd4\u56de\u200bfalse\uff0c\u200b\u624d\u80fd\u200b\u8bfb\u53d6\u200b\u5185\u5bb9\u200b\n    if (_writer_pos_cache == _reader_pos)\n    {\n      // if we think the queue is empty we also load the atomic variable to check further\n      _writer_pos_cache = _atomic_writer_pos.load(std::memory_order_acquire);\n\n      if (_writer_pos_cache == _reader_pos)\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n</code></pre><p></p> <p>\u200b\u8bfb\u8005\u200b\u5728\u8bfb\u200b\u4e4b\u524d\u200b\u4f1a\u200b\u8c03\u7528\u200bprepare_read\u200b\u51fd\u6570\u200b\uff0c\u200b\u5b9e\u9645\u4e0a\u200b\u662f\u200b\u8c03\u7528\u200bempty\u200b\u51fd\u6570\u200b\u5224\u65ad\u200b\u662f\u5426\u200b\u53ef\u200b\u8bfb\u200b\u3002 </p>C++<pre><code>  QUILL_NODISCARD QUILL_ATTRIBUTE_HOT std::byte* prepare_read() noexcept\n  {\n    if (empty())\n    {\n      return nullptr;\n    }\n\n    return _storage + (_reader_pos &amp; _mask);\n  }\n</code></pre><p></p>"},{"location":"blog/300%E8%A1%8C%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAboundedspscqueue/#read\u64cd\u4f5c","title":"read\u200b\u64cd\u4f5c","text":"<p>read\u200b\u64cd\u4f5c\u200b\u5206\u4e3a\u200b\u4e24\u4e2a\u200b\u51fd\u6570\u200b, \u200b\u6bcf\u6b21\u200b\u8bfb\u53d6\u200b\u8c03\u7528\u200bfinish_read\u200b\u4fee\u6539\u200b\u8bfb\u200b\u6307\u9488\u200b\u4f4d\u7f6e\u200b\uff0ccommit_read\u200b\u4fee\u6539\u200b_atomic_reader_pos\uff0c\u200b\u8ba9\u200bwriter\u200b\u7ebf\u7a0b\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u4fee\u6539\u200b\u3002 </p>C++<pre><code>  // \u200b\u4fee\u6539\u200b_reader_pos\u200b\u6307\u5411\u200b\u5185\u5b58\u200b\u533a\u57df\u200b\u7684\u200b\u4f4d\u7f6e\u200b\n  QUILL_ATTRIBUTE_HOT void finish_read(integer_type n) noexcept { _reader_pos += n; }\n\n  QUILL_ATTRIBUTE_HOT void commit_read() noexcept\n  {\n    // \u200b\u5224\u65ad\u200b\u662f\u5426\u200b\u8bfb\u53d6\u200b\u5185\u5bb9\u200b\u8d85\u8fc7\u200b_bytes_per_batch\uff0c\u200b\u8d85\u8fc7\u200b\u5c31\u200b\u4fee\u6539\u200b_atomic_reader_pos\n    if (static_cast&lt;integer_type&gt;(_reader_pos - _atomic_reader_pos.load(std::memory_order_relaxed)) &gt;= _bytes_per_batch)\n    {\n      _atomic_reader_pos.store(_reader_pos, std::memory_order_release);\n\n#if defined(QUILL_X86ARCH) // \u200b\u9488\u5bf9\u200bx86\u200b\u67b6\u6784\u200bflush_cacheline\u200b\u7684\u200b\u4f18\u5316\u200b\n      _flush_cachelines(_last_flushed_reader_pos, _reader_pos);\n#endif\n    }\n  }\n</code></pre><p></p> <p>\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b\u7684\u200b\u5462\u200b\uff1f\u200b\u8fd9\u91cc\u200b\u901a\u8fc7\u200b\u591a\u6b21\u200b\u8bfb\u53d6\u200b\u4fee\u6539\u200bread_pos\uff0c\u200b\u4e00\u6b21\u200b\u63d0\u4ea4\u200b\u4fee\u6539\u200bshared atomic_read_pos\uff0c\u200b\u589e\u5f3a\u200b\u7f13\u5b58\u200b\u4e00\u81f4\u6027\u200b\u3002 </p>C++<pre><code>do {\n  // \u200b\u66f4\u65b0\u200bread_pos\n  frontend_queue.finish_read(bytes_read);\n}while(xxx);\n// If we read something from the queue, we commit all the reads together at the end.\n// This strategy enhances cache coherence performance by updating the shared atomic flag\n// only once.\n// \u200b\u591a\u6b21\u200b\u8bfb\u53d6\u200b\u4fee\u6539\u200bread_pos\uff0c\u200b\u4e00\u6b21\u200b\u63d0\u4ea4\u200b\u4fee\u6539\u200bshared atomic_read_pos\uff0c\u200b\u589e\u5f3a\u200b\u7f13\u5b58\u200b\u4e00\u81f4\u6027\u200b\nfrontend_queue.commit_read();\n</code></pre><p></p>"},{"location":"blog/300%E8%A1%8C%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAboundedspscqueue/#write\u64cd\u4f5c","title":"write\u200b\u64cd\u4f5c","text":"C++<pre><code>QUILL_NODISCARD QUILL_ATTRIBUTE_HOT std::byte* prepare_write(integer_type n) noexcept\n  {\n    // \u200b\u5224\u65ad\u200b\u5269\u4f59\u200b\u5185\u5b58\u5bb9\u91cf\u200b\u662f\u5426\u200b\u5c0f\u4e8e\u200bn\n    if ((_capacity - static_cast&lt;integer_type&gt;(_writer_pos - _reader_pos_cache)) &lt; n)\n    {\n      // not enough space, we need to load reader and re-check\n      // \u200b\u83b7\u53d6\u200b_atomic_reader_pos\uff0c\u200b\u4e8c\u6b21\u200b\u786e\u8ba4\u200breader\u200b\u662f\u5426\u200b\u8bfb\u200b\u4e86\u200b\u5e76\u4e14\u200bcommit\u200b\u4e86\u200b\n      _reader_pos_cache = _atomic_reader_pos.load(std::memory_order_acquire);\n\n      if ((_capacity - static_cast&lt;integer_type&gt;(_writer_pos - _reader_pos_cache)) &lt; n)\n      {\n        return nullptr;\n      }\n    }\n\n    // \u200b\u5982\u679c\u200b\u5185\u5b58\u5bb9\u91cf\u200b\u5145\u88d5\u200b\uff0c\u200b\u8fd4\u56de\u200bwriter_pos\u200b\u5bf9\u5e94\u200b\u7684\u200b\u6307\u9488\u200b\n\n    return _storage + (_writer_pos &amp; _mask);\n  }\n</code></pre> <p>read\u200b\u64cd\u4f5c\u200b\u5206\u4e3a\u200b\u4e24\u4e2a\u200b\u51fd\u6570\u200b, \u200b\u6bcf\u6b21\u200b\u8bfb\u53d6\u200b\u8c03\u7528\u200bfinish_write\u200b\u4fee\u6539\u200b\u5199\u200b\u6307\u9488\u200b\u4f4d\u7f6e\u200b\u3002commit_write\u200b\u4fee\u6539\u200b_atomic_write_pos\uff0c\u200b\u8ba9\u200breader\u200b\u7ebf\u7a0b\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u4fee\u6539\u200b, reader\u200b\u8c03\u7528\u200bempty\u200b\u51fd\u6570\u200b\u5c31\u200b\u4f1a\u200b\u8fd4\u56de\u200bfalse\uff0c\u200b\u4e0d\u4e3a\u200b\u7a7a\u200b\u3002 </p>C++<pre><code>  QUILL_ATTRIBUTE_HOT void finish_write(integer_type n) noexcept { _writer_pos += n; }\n\n  QUILL_ATTRIBUTE_HOT void commit_write() noexcept\n  {\n    // set the atomic flag so the reader can see write\n    _atomic_writer_pos.store(_writer_pos, std::memory_order_release);\n\n#if defined(QUILL_X86ARCH)\n    // flush writen cache lines\n    _flush_cachelines(_last_flushed_writer_pos, _writer_pos);\n\n    // prefetch a future cache line\n    _mm_prefetch(reinterpret_cast&lt;char const*&gt;(_storage + (_writer_pos &amp; _mask) + (CACHE_LINE_SIZE * 10)),\n                 _MM_HINT_T0);\n#endif\n  }\n</code></pre><p></p>"},{"location":"blog/300%E8%A1%8C%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAboundedspscqueue/#flush-\u7f13\u5b58\u4f18\u5316","title":"flush \u200b\u7f13\u5b58\u200b\u4f18\u5316\u200b\ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350","text":"<p>flush\u200b\u7f13\u5b58\u200b\u4f18\u5316\u200b\u53ea\u200b\u9488\u5bf9\u200b\u4e86\u200bx86 arch\u3002</p> Bash<pre><code>#if defined(QUILL_X86ARCH)\n    // flush writen cache lines\n    _flush_cachelines(_last_flushed_writer_pos, _writer_pos);\n\n    // prefetch a future cache line\n    // \u200b\u9884\u53d6\u200b(CACHE_LINE_SIZE * 10)\u200b\u7684\u200b\u5185\u5b58\u200b\u52a0\u5165\u200b\u7f13\u5b58\u200b\uff0c\u200b\u7528\u4e8e\u200b\u52a0\u901f\u200bwriter\u200b\u5199\u200b\u64cd\u4f5c\u200b\n    _mm_prefetch(reinterpret_cast&lt;char const*&gt;(_storage + (_writer_pos &amp; _mask) + (CACHE_LINE_SIZE * 10)),\n                 _MM_HINT_T0);\n#endif\n</code></pre> <p>_flush_cachelines\u200b\u51fd\u6570\u200b\u5b9e\u73b0\u200b\u5982\u4e0b\u200b\uff0c\u200b\u6bd4\u5982\u200breader\u200b\u5bf9\u200b\u67d0\u4e2a\u200b\u533a\u57df\u200b\u8fdb\u884c\u200b\u4e86\u200b\u8bfb\u53d6\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u7406\u89e3\u200b\u4e3a\u200b\u4e00\u4e2a\u200bringbuffer\uff0c\u200b\u8fd9\u4e2a\u200b\u533a\u57df\u200b\u4e34\u8fd1\u200b\u7684\u200b\u4e0b\u6b21\u200b\u4e0b\u200b\u4e0b\u6b21\u200b\u5c31\u200b\u4e0d\u4f1a\u200b\u8bbf\u95ee\u200b\u4e86\u200b\uff1b\u200b\u53c8\u200b\u6216\u8005\u200bwriter\u200b\u5bf9\u200b\u67d0\u4e2a\u200b\u533a\u57df\u200b\u8fdb\u884c\u200b\u4e86\u200b\u5199\u200bcommit\uff0c\u200b\u90a3\u200b\u8fd9\u4e2a\u200b\u533a\u57df\u200b\u4e5f\u200b\u53ef\u4ee5\u200bflush\u200b\u7f13\u5b58\u200b\u884c\u5237\u200b\u56de\u200b\u3002\uff08\u200b\u628a\u200b\u6307\u5b9a\u200b\u7f13\u5b58\u200b\u884c\u200b\uff08Cache Line\uff09\u200b\u4ece\u200b\u6240\u6709\u200b\u7ea7\u200b\u7f13\u5b58\u200b\u4e2d\u200b\u6dd8\u6c70\u200b\uff0c\u200b\u82e5\u8be5\u200b\u7f13\u5b58\u200b\u884c\u4e2d\u200b\u7684\u200b\u6570\u636e\u200b\u88ab\u200b\u4fee\u6539\u200b\u8fc7\u200b\uff0c\u200b\u5219\u200b\u5c06\u200b\u8be5\u200b\u6570\u636e\u200b\u5199\u5165\u200b\u4e3b\u5b58\u200b\uff09 </p>C++<pre><code>#if defined(QUILL_X86ARCH)\n  QUILL_ATTRIBUTE_HOT void _flush_cachelines(integer_type&amp; last, integer_type offset)\n  {\n    // \u200b\u5bf9\u200blast\u200b\u6307\u9488\u200b\u8fdb\u884c\u200bCACHELINE_size\u200b\u5bf9\u9f50\u200b\n    integer_type last_diff = last - (last &amp; CACHELINE_MASK);\n    // \u200b\u5bf9\u200boffset\u200b\u6307\u9488\u200b\u8fdb\u884c\u200bCACHELINE_size\u200b\u5bf9\u9f50\u200b\n    integer_type const cur_diff = offset - (offset &amp; CACHELINE_MASK);\n\n    // \u200b\u8c03\u7528\u200b_mm_clflushopt\u200b\u5bf9\u200b[last, offset]\u200b\u7f13\u5b58\u200b\u884c\u5237\u200b\u56de\u200b\n    while (cur_diff &gt; last_diff)\n    {\n      _mm_clflushopt(_storage + (last_diff &amp; _mask));\n      last_diff += CACHE_LINE_SIZE;\n      last = last_diff;\n    }\n  }\n#endif\n</code></pre><p></p> <p>\u200b\u9605\u8bfb\u200b\u6e90\u7801\u200b\u8bf7\u200b\u524d\u5f80\u200b\uff0cBoundedSPSC\u200b\u961f\u5217\u200b\u5b9e\u73b0\u200b\u3002</p> <ul> <li>cpp\u200b\u5f00\u53d1\u200b\u4e2d\u200b\u4e00\u4e9b\u200b\u7f16\u8bd1\u200b\u9009\u9879\u200b\u7684\u200b\u7528\u5904\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u7528\u200bcmake\u200b\u8bbe\u7f6e\u200b</li> <li>C++20\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u57fa\u4e8e\u200b\u5c5e\u6027\u200b\u6d4b\u8bd5\u200b\u7684\u200bquickcheck-cpp\u200b\u5e93\u200b</li> <li>\u200b\u4ece\u200bDeepseek\u200b\u5f00\u6e90\u200b\u5e93\u200b3FS\u200b\u4e2d\u200b\u5b66\u4e60\u200bfuse\u200b\u7684\u200b\u4f7f\u7528\u200b-\u200b\u5982\u4f55\u200b\u5f00\u53d1\u200b\u4e00\u4e2a\u200b\u6587\u4ef6\u7cfb\u7edf\u200b\uff08\u200b\u4e00\u200b\uff09</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> </ul>"},{"location":"blog/c20%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8E%E5%B1%9E%E6%80%A7%E6%B5%8B%E8%AF%95%E7%9A%84quickcheck-cpp%E5%BA%93/","title":"C++20\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u57fa\u4e8e\u200b\u5c5e\u6027\u200b\u6d4b\u8bd5\u200b\u7684\u200bquickcheck-cpp\u200b\u5e93","text":"<p><code>quickcheck</code> \u200b\u662f\u200b\u4e00\u4e2a\u200b\u975e\u5e38\u200b\u5f3a\u5927\u200b\u7684\u200b\u5de5\u5177\u200b\uff01<code>quickcheck</code> \u200b\u662f\u200b\u4e00\u4e2a\u200b\u57fa\u4e8e\u200b\u5c5e\u6027\u200b\u6d4b\u8bd5\u200b\uff08Property-based Testing\uff09\u200b\u7684\u200b Rust \u200b\u5e93\u200b\uff0c\u200b\u7075\u611f\u200b\u6765\u81ea\u200b\u4e8e\u200b Haskell \u200b\u7684\u200b QuickCheck \u200b\u5e93\u200b\u3002\u200b\u5b83\u200b\u7684\u200b\u6838\u5fc3\u601d\u60f3\u200b\u662f\u200b\u901a\u8fc7\u200b\u81ea\u52a8\u200b\u751f\u6210\u200b\u5927\u91cf\u200b\u968f\u673a\u200b\u8f93\u5165\u200b\u6765\u200b\u6d4b\u8bd5\u4ee3\u7801\u200b\u7684\u200b\u5c5e\u6027\u200b\uff0c\u200b\u800c\u200b\u4e0d\u662f\u200b\u624b\u52a8\u200b\u7f16\u5199\u200b\u5177\u4f53\u200b\u7684\u200b\u6d4b\u8bd5\u7528\u4f8b\u200b\u3002</p>"},{"location":"blog/c20%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8E%E5%B1%9E%E6%80%A7%E6%B5%8B%E8%AF%95%E7%9A%84quickcheck-cpp%E5%BA%93/#property-based-testing\u65b9\u6cd5","title":"Property-based Testing\u200b\u65b9\u6cd5","text":""},{"location":"blog/c20%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8E%E5%B1%9E%E6%80%A7%E6%B5%8B%E8%AF%95%E7%9A%84quickcheck-cpp%E5%BA%93/#property-based-testing\u6838\u5fc3\u6982\u5ff5","title":"Property-based Testing\u200b\u6838\u5fc3\u200b\u6982\u5ff5","text":"<ol> <li>\u200b\u5c5e\u6027\u200b\u6d4b\u8bd5\u200b\uff1a</li> <li>\u200b\u5c5e\u6027\u200b\u6d4b\u8bd5\u200b\u662f\u200b\u4e00\u79cd\u200b\u6d4b\u8bd5\u65b9\u6cd5\u200b\uff0c\u200b\u5b83\u200b\u5173\u6ce8\u200b\u4ee3\u7801\u200b\u7684\u200b\u201c\u200b\u5c5e\u6027\u200b\u201d\u200b\u6216\u200b\u201c\u200b\u884c\u4e3a\u200b\u201d\uff0c\u200b\u800c\u200b\u4e0d\u662f\u200b\u5177\u4f53\u200b\u7684\u200b\u8f93\u5165\u8f93\u51fa\u200b\u3002</li> <li> <p>\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5bf9\u4e8e\u200b\u4e00\u4e2a\u200b\u6392\u5e8f\u200b\u51fd\u6570\u200b\uff0c\u200b\u5c5e\u6027\u200b\u53ef\u4ee5\u200b\u662f\u200b\u201c\u200b\u6392\u5e8f\u200b\u540e\u200b\u7684\u200b\u6570\u7ec4\u200b\u5e94\u8be5\u200b\u662f\u975e\u200b\u9012\u51cf\u200b\u7684\u200b\u201d\u3002</p> </li> <li> <p>\u200b\u968f\u673a\u200b\u8f93\u5165\u200b\u751f\u6210\u200b\uff1a</p> </li> <li><code>quickcheck</code> \u200b\u4f1a\u200b\u81ea\u52a8\u200b\u751f\u6210\u200b\u5927\u91cf\u200b\u968f\u673a\u200b\u8f93\u5165\u200b\u6765\u200b\u6d4b\u8bd5\u4ee3\u7801\u200b\u3002</li> <li> <p>\u200b\u5b83\u200b\u652f\u6301\u200b\u751f\u6210\u200b\u5404\u79cd\u7c7b\u578b\u200b\u7684\u200b\u968f\u673a\u200b\u6570\u636e\u200b\uff0c\u200b\u5305\u62ec\u200b\u57fa\u672c\u200b\u7c7b\u578b\u200b\uff08\u200b\u5982\u200b\u6574\u6570\u200b\u3001\u200b\u5b57\u7b26\u4e32\u200b\uff09\u200b\u548c\u200b\u590d\u6742\u200b\u7c7b\u578b\u200b\uff08\u200b\u5982\u200b\u7ed3\u6784\u200b\u4f53\u200b\u3001\u200b\u679a\u4e3e\u200b\uff09\u3002</p> </li> <li> <p>\u200b\u7f29\u5c0f\u200b\u5931\u8d25\u200b\u7528\u4f8b\u200b\uff1a</p> </li> <li>\u200b\u5982\u679c\u200b\u6d4b\u8bd5\u200b\u5931\u8d25\u200b\uff0c<code>quickcheck</code> \u200b\u4f1a\u200b\u5c1d\u8bd5\u200b\u7f29\u5c0f\u200b\u5931\u8d25\u200b\u7684\u200b\u8f93\u5165\u200b\uff0c\u200b\u627e\u5230\u200b\u4e00\u4e2a\u200b\u6700\u5c0f\u200b\u7684\u200b\u3001\u200b\u4ecd\u7136\u200b\u80fd\u200b\u89e6\u53d1\u200b\u9519\u8bef\u200b\u7684\u200b\u8f93\u5165\u200b\uff0c\u200b\u65b9\u4fbf\u200b\u8c03\u8bd5\u200b\u3002</li> </ol>"},{"location":"blog/c20%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8E%E5%B1%9E%E6%80%A7%E6%B5%8B%E8%AF%95%E7%9A%84quickcheck-cpp%E5%BA%93/#\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50","title":"\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b\u4f8b\u5b50","text":"<p>\u200b\u7528\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b\u6765\u200b\u5c55\u793a\u200b\u4e00\u4e0b\u200b\u4f7f\u7528\u200b <code>quickcheck</code> \u200b\u6d4b\u8bd5\u200b\u4e00\u4e2a\u200b\u51fd\u6570\u200b\u7684\u200b\u5c5e\u6027\u200b\u7684\u200b\u65b9\u5f0f\u200b\u3002<code>reverse</code> \u200b\u51fd\u6570\u200b\u662f\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b\u51fd\u6570\u200b\uff0c\u200b\u7528\u4e8e\u200b\u53cd\u8f6c\u200b\u4e00\u4e2a\u200b\u6570\u7ec4\u200b\u3002\u200b\u6211\u4eec\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u5c5e\u6027\u200b\uff1a<code>reverse(reverse(xs)) == xs</code>\uff0c\u200b\u5373\u200b\u5bf9\u200b\u4e00\u4e2a\u200b\u6570\u7ec4\u200b\u53cd\u8f6c\u200b\u4e24\u6b21\u200b\u5e94\u8be5\u200b\u5f97\u5230\u200b\u539f\u200b\u6570\u7ec4\u200b\u3002\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b <code>QuickCheck</code> \u200b\u5b9e\u4f8b\u200b\u3002\u200b\u8fd0\u884c\u200b\u5c5e\u6027\u200b\u6d4b\u8bd5\u200b\u3002<code>quickcheck</code> \u200b\u4f1a\u200b\u81ea\u52a8\u200b\u751f\u6210\u200b\u968f\u673a\u200b <code>Vec&lt;i32&gt;</code> \u200b\u8f93\u5165\u200b\uff0c\u200b\u5e76\u200b\u9a8c\u8bc1\u200b\u5c5e\u6027\u200b\u662f\u5426\u200b\u6210\u7acb\u200b\u3002</p> Rust<pre><code>use quickcheck::QuickCheck;\nuse quickcheck::TestResult;\n\nfn reverse&lt;T: Clone&gt;(xs: &amp;[T]) -&gt; Vec&lt;T&gt; {\n    let mut rev = xs.to_vec();\n    rev.reverse();\n    rev\n}\n\nfn main() {\n    QuickCheck::new()\n        .quickcheck(\n            // \u200b\u6d4b\u8bd5\u200b\u5c5e\u6027\u200b\uff1a\u200b\u53cd\u8f6c\u200b\u4e24\u6b21\u200b\u5e94\u8be5\u200b\u5f97\u5230\u200b\u539f\u200b\u6570\u7ec4\u200b\n            \"reverse(reverse(xs)) == xs\",\n            |xs: Vec&lt;i32&gt;| -&gt; bool {\n                let rev = reverse(&amp;xs);\n                let rev_rev = reverse(&amp;rev);\n                rev_rev == xs\n            }\n        );\n}\n</code></pre>"},{"location":"blog/c20%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8E%E5%B1%9E%E6%80%A7%E6%B5%8B%E8%AF%95%E7%9A%84quickcheck-cpp%E5%BA%93/#property-based-testing\u4f18\u70b9","title":"Property-based Testing\u200b\u4f18\u70b9","text":"<ul> <li>\u200b\u8986\u76d6\u200b\u66f4\u200b\u591a\u200b\u8fb9\u754c\u200b\u60c5\u51b5\u200b\uff1a\u200b\u968f\u673a\u200b\u751f\u6210\u200b\u8f93\u5165\u200b\u53ef\u4ee5\u200b\u8986\u76d6\u200b\u624b\u52a8\u200b\u6d4b\u8bd5\u200b\u96be\u4ee5\u200b\u60f3\u5230\u200b\u7684\u200b\u8fb9\u754c\u200b\u60c5\u51b5\u200b\u3002</li> <li>\u200b\u51cf\u5c11\u200b\u6d4b\u8bd5\u4ee3\u7801\u200b\u91cf\u200b\uff1a\u200b\u4e0d\u200b\u9700\u8981\u200b\u624b\u52a8\u200b\u7f16\u5199\u200b\u5927\u91cf\u200b\u5177\u4f53\u200b\u7684\u200b\u6d4b\u8bd5\u7528\u4f8b\u200b\u3002</li> <li>\u200b\u81ea\u52a8\u200b\u7f29\u5c0f\u200b\u5931\u8d25\u200b\u7528\u4f8b\u200b\uff1a\u200b\u65b9\u4fbf\u200b\u8c03\u8bd5\u200b\u548c\u200b\u5b9a\u4f4d\u95ee\u9898\u200b\u3002</li> </ul> <p>\u200b\u5f53\u200b\u4f60\u200b\u9700\u8981\u200b\u6d4b\u8bd5\u51fd\u6570\u200b\u7684\u200b\u901a\u7528\u200b\u5c5e\u6027\u200b\u65f6\u200b,\u200b\u5e0c\u671b\u200b\u8986\u76d6\u200b\u66f4\u200b\u591a\u200b\u7684\u200b\u8f93\u5165\u200b\u53ef\u80fd\u6027\u200b,\u200b\u81ea\u52a8\u5316\u200b\u751f\u6210\u200b\u6d4b\u8bd5\u7528\u4f8b\u200b\u65f6\u5019\u200b\uff0c\u200b\u4f60\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u91c7\u7528\u200b\u8fd9\u79cd\u200b\u65b9\u6cd5\u200b\u3002</p>"},{"location":"blog/c20%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8E%E5%B1%9E%E6%80%A7%E6%B5%8B%E8%AF%95%E7%9A%84quickcheck-cpp%E5%BA%93/#\u7528c20\u5b9e\u73b0\u4e00\u4e2aquickcheck-cpp\u5e93","title":"\u7528\u200bC++20\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bquickcheck-cpp\u200b\u5e93","text":"<p>quickcheck-cpp\u200b\u57fa\u4e8e\u200b C++20 \u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u7b80\u5316\u7248\u200b\u7684\u200b quickcheck \u200b\u4e00\u4e2a\u200b\u57fa\u672c\u200b\u7684\u200b\u5c5e\u6027\u200b\u6d4b\u8bd5\u200b\u6846\u67b6\u200b\u3002\u200b\u4f7f\u7528\u200b\u5230\u200b\u4e86\u200bfmt\u200b\u5e93\u200b\u7528\u4e8e\u200bprint\u200b\u5bb9\u5668\u200b\u7c7b\u200b\uff0c\u200b\u6bd4\u5982\u200bvector\u3002\u200b\u5305\u62ec\u200b\u5982\u4e0b\u200b\u529f\u80fd\u200b\uff1a</p> <p>\uff081\uff09\u200b\u968f\u673a\u200b\u8f93\u5165\u200b\u751f\u6210\u200b\uff1a \u200b\u4f7f\u7528\u200b C++ \u200b\u7684\u200brandom\u200b\u751f\u6210\u200b\u968f\u673a\u200b\u6570\u636e\u200b\u3002\u200b\u652f\u6301\u200b\u57fa\u672c\u200b\u7c7b\u578b\u200b\uff08\u200b\u5982\u200b int\u3001double\u3001std::string\uff09\u200b\u548c\u200b\u81ea\u5b9a\u4e49\u200b\u7c7b\u578b\u200b\u3002</p> <p>\uff082\uff09\u200b\u5c5e\u6027\u200b\u6d4b\u8bd5\u200b\uff1a \u200b\u7528\u6237\u200b\u63d0\u4f9b\u200b\u4e00\u4e2a\u200b Lambda \u200b\u51fd\u6570\u200b\u4f5c\u4e3a\u200b\u5c5e\u6027\u200b\u6d4b\u8bd5\u51fd\u6570\u200b\u3002\u200b\u4f1a\u200b\u751f\u6210\u200b\u968f\u673a\u200b\u8f93\u5165\u200b\u5e76\u200b\u9a8c\u8bc1\u200b\u5c5e\u6027\u200b\u662f\u5426\u200b\u6210\u7acb\u200b\u3002</p> <p>\uff083\uff09\u200b\u6536\u7f29\u200b\u5931\u8d25\u200b\u7528\u4f8b\u200b\uff1a \u200b\u5982\u679c\u200b\u6d4b\u8bd5\u200b\u5931\u8d25\u200b\uff0c\u200b\u5c1d\u8bd5\u200b\u6536\u7f29\u200b\u8f93\u5165\u200b\uff0c\u200b\u627e\u5230\u200b\u6700\u5c0f\u200b\u7684\u200b\u5931\u8d25\u200b\u7528\u4f8b\u200b\u3002</p> <p>\u200b\u4f7f\u7528\u200b\u793a\u4f8b\u200b\uff1a</p> C++<pre><code>#include \"quickcheck.hpp\"\n\n// \u200b\u793a\u4f8b\u200b\uff1a\u200b\u6d4b\u8bd5\u200b reverse \u200b\u51fd\u6570\u200b\u7684\u200b\u5c5e\u6027\u200b\nbool testReverseProperty(const std::vector&lt;int&gt; &amp;xs)\n{\n    std::vector&lt;int&gt; rev = xs;\n    std::reverse(rev.begin(), rev.end());\n    std::vector&lt;int&gt; revRev = rev;\n    std::reverse(revRev.begin(), revRev.end());\n    return revRev == xs;\n}\n\nint main()\n{\n    // \u200b\u6d4b\u8bd5\u200b reverse \u200b\u51fd\u6570\u200b\u7684\u200b\u5c5e\u6027\u200b\n    QuickCheck::check&lt;std::vector&lt;int&gt;&gt;(\n        \"reverse(reverse(xs)) == xs\",\n        testReverseProperty);\n\n    return 0;\n}\n</code></pre>"},{"location":"blog/c20%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8E%E5%B1%9E%E6%80%A7%E6%B5%8B%E8%AF%95%E7%9A%84quickcheck-cpp%E5%BA%93/#\u5305\u62ec\u54ea\u4e9b\u529f\u80fd\u7279\u6027","title":"\u5305\u62ec\u200b\u54ea\u4e9b\u200b\u529f\u80fd\u200b\u7279\u6027","text":""},{"location":"blog/c20%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8E%E5%B1%9E%E6%80%A7%E6%B5%8B%E8%AF%95%E7%9A%84quickcheck-cpp%E5%BA%93/#\u751f\u6210\u4efb\u610f\u503c","title":"\u751f\u6210\u200b\u4efb\u610f\u200b\u503c","text":"<p>\u200b\u901a\u8fc7\u200bRandomGenerator \u200b\u6a21\u677f\u200b\uff0c\u200b\u7528\u4e8e\u200b\u751f\u6210\u200b\u968f\u673a\u200b\u6570\u636e\u200b\u3002\u200b\u901a\u8fc7\u200b\u7279\u5316\u200b\u652f\u6301\u200b\u5982\u4e0b\u200b\u7c7b\u578b\u200b\uff1a</p> <ul> <li>\u200b\u57fa\u672c\u200b\u7c7b\u578b\u200b\uff1a</li> </ul> <p>char\u3001int\u3001long long\u3001float\u3001double \u200b\u7b49\u200b\u57fa\u672c\u200b\u7c7b\u578b\u200b\u5747\u200b\u652f\u6301\u200b\u968f\u673a\u200b\u751f\u6210\u200b\u3002</p> <ul> <li>\u200b\u5b57\u7b26\u4e32\u200b\uff1a</li> </ul> <p>std::string \u200b\u751f\u6210\u200b\u957f\u5ea6\u200b\u4e3a\u200b 1 \u200b\u5230\u200b 10 \u200b\u7684\u200b\u968f\u673a\u200b\u5b57\u7b26\u4e32\u200b\u3002</p> <ul> <li>\u200b\u5bb9\u5668\u200b\uff1a</li> </ul> <p>std::vector\uff1a\u200b\u751f\u6210\u200b\u968f\u673a\u200b\u957f\u5ea6\u200b\u7684\u200b\u5411\u91cf\u200b\uff0c\u200b\u5143\u7d20\u200b\u7c7b\u578b\u200b T \u200b\u53ef\u4ee5\u200b\u662f\u200b\u4efb\u610f\u200b\u652f\u6301\u200b\u7684\u200b\u7c7b\u578b\u200b\u3002</p> <p>std::map\uff1a\u200b\u751f\u6210\u200b\u968f\u673a\u200b\u957f\u5ea6\u200b\u7684\u200b\u6620\u5c04\u200b\uff0c\u200b\u952e\u503c\u200b\u5bf9\u200b\u7531\u200b RandomGenerator&gt; \u200b\u751f\u6210\u200b\u3002</p> <p>std::set\uff1a\u200b\u751f\u6210\u200b\u968f\u673a\u200b\u957f\u5ea6\u200b\u7684\u200b\u96c6\u5408\u200b\uff0c\u200b\u5143\u7d20\u200b\u7c7b\u578b\u200b T \u200b\u53ef\u4ee5\u200b\u662f\u200b\u4efb\u610f\u200b\u652f\u6301\u200b\u7684\u200b\u7c7b\u578b\u200b\u3002</p> <p>std::unordered_map\uff1a\u200b\u751f\u6210\u200b\u968f\u673a\u200b\u957f\u5ea6\u200b\u7684\u200b\u65e0\u5e8f\u200b\u6620\u5c04\u200b\u3002</p> <ul> <li>\u200b\u5143\u7ec4\u200b\u548c\u200b\u952e\u503c\u200b\u5bf9\u200b\uff1a</li> </ul> <p>std::tuple\uff1a\u200b\u751f\u6210\u200b\u968f\u673a\u200b\u5143\u7ec4\u200b\uff0c\u200b\u5143\u7d20\u200b\u7c7b\u578b\u200b\u7531\u200b RandomGenerator \u200b\u751f\u6210\u200b\u3002</p> <p>std::pair\uff1a\u200b\u751f\u6210\u200b\u968f\u673a\u200b\u952e\u503c\u200b\u5bf9\u200b\uff0c\u200b\u952e\u548c\u503c\u200b\u5206\u522b\u200b\u7531\u200b RandomGenerator \u200b\u548c\u200b RandomGenerator \u200b\u751f\u6210\u200b\u3002</p>"},{"location":"blog/c20%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8E%E5%B1%9E%E6%80%A7%E6%B5%8B%E8%AF%95%E7%9A%84quickcheck-cpp%E5%BA%93/#\u6536\u7f29\u5931\u8d25\u7528\u4f8bshrink","title":"\u6536\u7f29\u200b\u5931\u8d25\u200b\u7528\u4f8b\u200b(shrink)","text":"<p>\u200b\u5b9e\u73b0\u200b\u6536\u7f29\u200b\u5931\u8d25\u200b\u7528\u4f8b\u200b\u7684\u200b\u529f\u80fd\u200b\u662f\u200b quickcheck \u200b\u7684\u200b\u6838\u5fc3\u200b\u7279\u6027\u200b\u4e4b\u4e00\u200b\u3002\u200b\u5f53\u200b\u6d4b\u8bd5\u200b\u5931\u8d25\u200b\u65f6\u200b\uff0c\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u9010\u6b65\u200b\u6536\u7f29\u200b\u8f93\u5165\u200b\uff0c\u200b\u627e\u5230\u200b\u6700\u5c0f\u200b\u7684\u200b\u3001\u200b\u4ecd\u7136\u200b\u80fd\u200b\u89e6\u53d1\u200b\u5931\u8d25\u200b\u7684\u200b\u7528\u4f8b\u200b\u3002</p> <ul> <li>\u200b\u6536\u7f29\u200b\u7b56\u7565\u200b\uff1a</li> </ul> <p>\u200b\u5bf9\u4e8e\u200b\u6570\u503c\u200b\u7c7b\u578b\u200b\uff08\u200b\u5982\u200b int\u3001double\uff09\uff0c\u200b\u9010\u6b65\u200b\u5c06\u503c\u200b\u51cf\u534a\u200b\u3002</p> <p>\u200b\u5bf9\u4e8e\u200b\u5bb9\u5668\u200b\u7c7b\u578b\u200b\uff08\u200b\u5982\u200b std::vector\u3001std::map\uff09\uff0c\u200b\u9010\u6b65\u200b\u5220\u9664\u200b\u5143\u7d20\u200b\u3002</p> <p>\u200b\u5bf9\u4e8e\u200b\u590d\u5408\u200b\u7c7b\u578b\u200b\uff08\u200b\u5982\u200b std::tuple\uff09\uff0c\u200b\u9010\u6b65\u200b\u6536\u7f29\u200b\u5176\u200b\u7ec4\u6210\u90e8\u5206\u200b\u3002</p> <ul> <li>\u200b\u9012\u5f52\u200b\u6536\u7f29\u200b\uff1a</li> </ul> <p>\u200b\u5bf9\u4e8e\u200b\u590d\u6742\u200b\u7c7b\u578b\u200b\uff0c\u200b\u9012\u5f52\u200b\u5730\u200b\u6536\u7f29\u200b\u5176\u5b50\u200b\u5143\u7d20\u200b\u3002</p> <ul> <li>\u200b\u505c\u6b62\u200b\u6761\u4ef6\u200b\uff1a</li> </ul> <p>\u200b\u5f53\u200b\u8f93\u5165\u200b\u65e0\u6cd5\u200b\u8fdb\u4e00\u6b65\u200b\u6536\u7f29\u200b\uff0c\u200b\u6216\u200b\u6536\u7f29\u200b\u540e\u200b\u7684\u200b\u8f93\u5165\u200b\u4e0d\u518d\u200b\u89e6\u53d1\u200b\u5931\u8d25\u200b\u65f6\u200b\uff0c\u200b\u505c\u6b62\u200b\u6536\u7f29\u200b\u3002</p> <p>\u200b\u4f8b\u5982\u200b\uff0c\u200b\u6d4b\u8bd5\u51fd\u6570\u200b\u9519\u8bef\u200b\uff0c\u200b\u8f93\u51fa\u200b\uff1a</p> Bash<pre><code>Testing property: reverse(reverse(xs)) == xs\nTest failed for input: [-80, 62, 40, -98, -50, 95, -21]\nShrinking input...Minimal failing input: [-80, 62, 40, -98, -50, 95, -21]\n</code></pre>"},{"location":"blog/c20%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8E%E5%B1%9E%E6%80%A7%E6%B5%8B%E8%AF%95%E7%9A%84quickcheck-cpp%E5%BA%93/#\u7edf\u8ba1\u6d4b\u8bd5\u8986\u76d6\u7387","title":"\u7edf\u8ba1\u200b\u6d4b\u8bd5\u200b\u8986\u76d6\u7387","text":"<p>CoverageTracker \u200b\u7c7b\u200b\u7528\u4e8e\u200b\u7edf\u8ba1\u200b\u6d4b\u8bd5\u200b\u8986\u76d6\u7387\u200b\uff0c\u200b\u8bb0\u5f55\u200b\u8f93\u5165\u200b\u7684\u200b\u6700\u5c0f\u503c\u200b\u3001\u200b\u6700\u5927\u503c\u200b\u548c\u200b\u6d4b\u8bd5\u200b\u6b21\u6570\u200b\u3002\u200b\u652f\u6301\u200b\u57fa\u672c\u200b\u7c7b\u578b\u200b\uff08\u200b\u5982\u200b int\uff09\u200b\u548c\u200b\u5bb9\u5668\u200b\u7c7b\u578b\u200b\uff08\u200b\u5982\u200b std::vector\uff09\u200b\u7b49\u200b\u3002</p>"},{"location":"blog/c20%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8E%E5%B1%9E%E6%80%A7%E6%B5%8B%E8%AF%95%E7%9A%84quickcheck-cpp%E5%BA%93/#\u6838\u5fc3\u51fd\u6570","title":"\u6838\u5fc3\u200b\u51fd\u6570","text":"<ul> <li>update \u200b\u65b9\u6cd5\u200b\uff1a</li> </ul> <p>\u200b\u66f4\u65b0\u200b\u7edf\u8ba1\u200b\u4fe1\u606f\u200b\uff0c\u200b\u8bb0\u5f55\u200b\u8f93\u5165\u200b\u7684\u200b\u8303\u56f4\u200b\u548c\u200b\u5206\u5e03\u200b\u3002</p> <ul> <li>print \u200b\u65b9\u6cd5\u200b\uff1a</li> </ul> <p>\u200b\u8f93\u51fa\u200b\u7edf\u8ba1\u200b\u7ed3\u679c\u200b\uff0c\u200b\u663e\u793a\u200b\u6d4b\u8bd5\u200b\u8986\u76d6\u200b\u7684\u200b\u8f93\u5165\u200b\u8303\u56f4\u200b\u3002</p>"},{"location":"blog/c20%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8E%E5%B1%9E%E6%80%A7%E6%B5%8B%E8%AF%95%E7%9A%84quickcheck-cpp%E5%BA%93/#\u5728-quickcheck-\u4e2d\u4f7f\u7528-coveragetracker","title":"\u5728\u200b QuickCheck \u200b\u4e2d\u200b\u4f7f\u7528\u200b CoverageTracker","text":"<p>\u200b\u5728\u200b\u6bcf\u6b21\u200b\u751f\u6210\u200b\u8f93\u5165\u200b\u540e\u200b\uff0c\u200b\u8c03\u7528\u200b update \u200b\u65b9\u6cd5\u200b\u66f4\u65b0\u200b\u7edf\u8ba1\u200b\u4fe1\u606f\u200b\u3002\u200b\u5728\u200b\u6d4b\u8bd5\u200b\u7ed3\u675f\u200b\u540e\u200b\uff0c\u200b\u8c03\u7528\u200b print \u200b\u65b9\u6cd5\u200b\u8f93\u51fa\u200b\u8986\u76d6\u7387\u200b\u7edf\u8ba1\u200b\u3002</p> Bash<pre><code>Testing property: reverse(reverse(xs)) == xs\nAll tests passed!\nVector Coverage: minSize = 0, maxSize = 9, sizeCount = 100 \nElement Coverage: Coverage: min = -100, max = 100, count = 202\n</code></pre>"},{"location":"blog/c20%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8E%E5%B1%9E%E6%80%A7%E6%B5%8B%E8%AF%95%E7%9A%84quickcheck-cpp%E5%BA%93/#c20-concept\u7ea6\u675f","title":"C++20 Concept\u200b\u7ea6\u675f","text":"<ul> <li>RandomGeneratable Concept</li> </ul> <p>\u200b\u8981\u6c42\u200b\u7c7b\u578b\u200b T \u200b\u5fc5\u987b\u200b\u5b9e\u73b0\u200b RandomGenerator::generate() \u200b\u548c\u200b RandomGenerator::shrink() \u200b\u65b9\u6cd5\u200b\u3002\u200b\u7528\u4e8e\u200b\u7ea6\u675f\u200b RandomGenerator \u200b\u7684\u200b\u6a21\u677f\u200b\u53c2\u6570\u200b\u3002</p> <ul> <li>PropertyTestable Concept</li> </ul> <p>\u200b\u8981\u6c42\u200b\u7c7b\u578b\u200b Func \u200b\u5fc5\u987b\u200b\u662f\u200b\u4e00\u4e2a\u200b\u53ef\u200b\u8c03\u7528\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u63a5\u53d7\u200b T \u200b\u7c7b\u578b\u200b\u53c2\u6570\u200b\u5e76\u200b\u8fd4\u56de\u200b bool\u3002\u200b\u7528\u4e8e\u200b\u7ea6\u675f\u200b\u5c5e\u6027\u200b\u6d4b\u8bd5\u51fd\u6570\u200b\u7684\u200b\u6a21\u677f\u200b\u53c2\u6570\u200b\u3002</p> <p>\u200b\u4f7f\u7528\u200b\u6982\u5ff5\u200b\u7684\u200b\u597d\u5904\u200b\uff0c\u200b\u4e00\u65b9\u9762\u200b\uff0c\u200b\u589e\u5f3a\u200b\u4ee3\u7801\u200b\u5b89\u5168\u6027\u200b\uff0c\u200b\u5728\u200b\u7f16\u8bd1\u200b\u65f6\u200b\u68c0\u67e5\u200b\u6a21\u677f\u200b\u53c2\u6570\u200b\u662f\u5426\u200b\u6ee1\u8db3\u8981\u6c42\u200b\uff0c\u200b\u907f\u514d\u200b\u8fd0\u884c\u200b\u65f6\u200b\u9519\u8bef\u200b\u3002\u200b\u5176\u4e8c\u200b\uff0c\u200b\u63d0\u9ad8\u200b\u4ee3\u7801\u200b\u53ef\u8bfb\u6027\u200b\uff0c\u200b\u660e\u786e\u200b\u6a21\u677f\u200b\u53c2\u6570\u200b\u7684\u200b\u8981\u6c42\u200b\uff0c\u200b\u4f7f\u200b\u4ee3\u7801\u200b\u66f4\u200b\u6613\u4e8e\u200b\u7406\u89e3\u200b\u3002\u200b\u800c\u4e14\u200b\uff0c\u200b\u66f4\u597d\u200b\u7684\u200b\u9519\u8bef\u200b\u63d0\u793a\u200b\uff0c\u200b\u5982\u679c\u200b\u6a21\u677f\u200b\u53c2\u6570\u200b\u4e0d\u200b\u6ee1\u8db3\u200b\u6982\u5ff5\u200b\u7ea6\u675f\u200b\uff0c\u200b\u7f16\u8bd1\u5668\u200b\u4f1a\u200b\u7ed9\u51fa\u200b\u6e05\u6670\u200b\u7684\u200b\u9519\u8bef\u4fe1\u606f\u200b\u3002</p>"},{"location":"blog/c20%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%9F%BA%E4%BA%8E%E5%B1%9E%E6%80%A7%E6%B5%8B%E8%AF%95%E7%9A%84quickcheck-cpp%E5%BA%93/#inspired","title":"inspired","text":"<p>\u200b\u9664\u4e86\u200b\u672c\u6587\u200b\u5b9e\u73b0\u200b\u7684\u200bquickcheck-cpp\uff0c\u200b\u611f\u5174\u8da3\u200b\u7684\u200b\u670b\u53cb\u200b\u53ef\u4ee5\u200b\u770b\u200b\u4e00\u4e0b\u200b\u4e0b\u9762\u200b\u7684\u200b\u9879\u76ee\u200b\u3002\u200b\u4ed6\u4eec\u200b\u5206\u522b\u200b\u662f\u200brust\u200b\u5b9e\u73b0\u200b\u548c\u200bcpp\u200b\u7684\u200b\u5b9e\u73b0\u200b\u3002cpp\u200b\u7684\u200b\u5b9e\u73b0\u200b\u76f8\u6bd4\u200b\u672c\u6587\u200b\u4ecb\u7ecd\u200b\u7684\u200b\u5b9e\u73b0\u200b\u66f4\u52a0\u200b\u590d\u6742\u200b\uff0c\u200b\u529f\u80fd\u200b\u66f4\u200b\u4e30\u5bcc\u200b\uff0c\u200b\u6bd4\u5982\u200b\u96c6\u6210\u200b\u4e86\u200bCatch\u3001GoogleTest\u3001Boost Test\u200b\u7b49\u200b\u3002</p> <p>BurntSushi/quickcheck: Automated property based testing for Rust (with shrinking).</p> <p>emil-e/rapidcheck: QuickCheck clone for C++ with the goal of being simple to use with as little boilerplate as possible.</p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>C++\u200b\u5e38\u89c1\u200b\u9519\u8bef\u200b\uff1a\u200b\u7aa5\u63a2\u200bstd::Sort\u200b\u7684\u200bcmp\u200b\u51fd\u6570\u200b\u7528\u9519\u200b\uff0c\u200b\u5bfc\u81f4\u200b\u7684\u200b\u7a0b\u5e8f\u200babort\u200b\u5206\u6790\u200b</li> <li>Fast PIMPL \u200b\u53c8\u200b\u662f\u200b\u4ec0\u4e48\u200b\u6280\u6cd5\u200b\uff1f</li> <li>C++\u200b\u7684\u200b\u201cBase-from-Member\u201d\u200b\u6280\u6cd5\u200b\u89e3\u51b3\u200b\u4e86\u200b\u4ec0\u4e48\u200b\u95ee\u9898\u200b\uff1f</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> </ul>"},{"location":"blog/c%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E7%AA%A5%E6%8E%A2stdsort%E7%9A%84cmp%E5%87%BD%E6%95%B0%E7%94%A8%E9%94%99%E5%AF%BC%E8%87%B4%E7%9A%84%E7%A8%8B%E5%BA%8Fabort%E5%88%86%E6%9E%90/","title":"C++\u200b\u5e38\u89c1\u200b\u9519\u8bef\u200b\uff1a\u200b\u7aa5\u63a2\u200bstd::Sort\u200b\u7684\u200bcmp\u200b\u51fd\u6570\u200b\u7528\u9519\u200b\uff0c\u200b\u5bfc\u81f4\u200b\u7684\u200b\u7a0b\u5e8f\u200babort\u200b\u5206\u6790","text":""},{"location":"blog/c%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E7%AA%A5%E6%8E%A2stdsort%E7%9A%84cmp%E5%87%BD%E6%95%B0%E7%94%A8%E9%94%99%E5%AF%BC%E8%87%B4%E7%9A%84%E7%A8%8B%E5%BA%8Fabort%E5%88%86%E6%9E%90/#stdsort-\u51fd\u6570\u7684compare\u51fd\u6570","title":"std::sort \u200b\u51fd\u6570\u200b\u7684\u200bCompare\u200b\u51fd\u6570","text":"<p>c++ std::sort\u200b\u51fd\u6570\u200b\u662f\u200b\u7ecf\u5e38\u200b\u88ab\u200b\u4f7f\u7528\u200b\u5230\u200b\u7684\u200b\uff0c\u200b\u4f46\u662f\u200b\u4e0d\u200b\u77e5\u9053\u200b\u5927\u5bb6\u200b\u6ce8\u610f\u200b\u6ca1\u6709\u200b\uff0c\u200b\u5b9a\u4e49\u200b\u7684\u200bCompare\u200b\u51fd\u6570\u200b\u662f\u200b\u9700\u8981\u200b\u6ee1\u8db3\u200b\u4e00\u5b9a\u200b\u6761\u4ef6\u200b\u7684\u200b\u3002\u200b\u8fd9\u4e2a\u200b\u6761\u4ef6\u200b\u5c31\u662f\u200b\uff1astrict weak ordering\u3002</p> <p>cppreference \u200b\u7684\u200b\u82f1\u6587\u200b\u539f\u6587\u200b\uff1a</p> <p>comparison function object (i.e. an object that satisfies the requirements of Compare) which returns \u200btrue if the first argument is less than (i.e. is ordered before) the second.</p> <p>strict weak ordering\u200b\u63cf\u8ff0\u200b\u4e86\u200b\u4ee5\u4e0b\u200b\u4e09\u6761\u200b\uff1a\u200b\u7b2c\u4e00\u6761\u200b\u63cf\u8ff0\u200b\u7684\u200b\u662f\u200b\uff0c\u200b\u5982\u679c\u200ba\uff0cb\u200b\u4f5c\u4e3a\u200bcmp\u200b\u7684\u200b\u8f93\u5165\u200b\uff0c\u200b\u5f53\u200ba\u200b\u548c\u200bb\u200b\u76f8\u7b49\u200b\u65f6\u200b\uff0creturn\u200b\u7684\u200b\u503c\u200b\u5fc5\u987b\u200b\u662f\u200bfalse\u3002</p> <p></p>"},{"location":"blog/c%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E7%AA%A5%E6%8E%A2stdsort%E7%9A%84cmp%E5%87%BD%E6%95%B0%E7%94%A8%E9%94%99%E5%AF%BC%E8%87%B4%E7%9A%84%E7%A8%8B%E5%BA%8Fabort%E5%88%86%E6%9E%90/#\u4e00\u4e2a\u5bb9\u6613\u53d1\u751f\u4e14\u9519\u8bef\u4f7f\u7528stdsort\u7684\u4f8b\u5b50","title":"\u4e00\u4e2a\u200b\u5bb9\u6613\u200b\u53d1\u751f\u200b\u4e14\u200b\u9519\u8bef\u200b\u4f7f\u7528\u200bstd::sort\u200b\u7684\u200b\u4f8b\u5b50","text":"<p>\u200b\u5728\u200b\u4e00\u6bb5\u200b\u4e1a\u52a1\u200b\u4ee3\u7801\u200b\u4e2d\u200b\uff0c\u200b\u53d1\u73b0\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u4e0d\u200b\u6ee1\u8db3\u200bcmp\u200b\u51fd\u6570\u200bstrict weak ordering\u200b\u7684\u200b\u4f8b\u5b50\u200b\uff0c\u200b\u5f15\u8d77\u200b\u4e86\u200b\u5185\u5b58\u200b\u76f8\u5173\u200b\u7684\u200b\u95ee\u9898\u200b\u3002\u200b\u4ee5\u200b\u4e0b\u9762\u200b\u7684\u200b\u4ee3\u7801\u200b\u4e3a\u4f8b\u200b\uff1a</p> C++<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nvoid func()\n{\n    std::vector&lt;int&gt; v1;\n\n    for (auto i = 0; i &lt; 18; i++)\n    {\n        v1.push_back(1);\n    }\n    std::cout &lt;&lt; \"v1 addr : \" &lt;&lt; &amp;v1[0] &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"befor sort\" &lt;&lt; std::endl;\n    std::sort(v1.begin(), v1.end(), [](int a, int b) { return a &gt;= b; });\n    std::cout &lt;&lt; \"after sort\" &lt;&lt; std::endl;\n}\n\nint main(int, char **)\n{\n    func();\n}\n</code></pre> Bash<pre><code>v1 addr : 0x55e0ab6d1f30\nbefor sort\nafter sort\ndouble free or corruption (out)\nfish: Job 1, './hello/\u2026' terminated by signal SIGABRT (Abort)\n</code></pre>"},{"location":"blog/c%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E7%AA%A5%E6%8E%A2stdsort%E7%9A%84cmp%E5%87%BD%E6%95%B0%E7%94%A8%E9%94%99%E5%AF%BC%E8%87%B4%E7%9A%84%E7%A8%8B%E5%BA%8Fabort%E5%88%86%E6%9E%90/#\u5d29\u6e83\u539f\u56e0\u5206\u6790","title":"\u5d29\u6e83\u200b\u539f\u56e0\u200b\u5206\u6790","text":"<p>\u200b\u6267\u884c\u200b\u4e0a\u9762\u200b\u7684\u200b\u7a0b\u5e8f\u200bAbort\u200b\u4e86\u200b\uff0c\u200b\u539f\u56e0\u200b\u5c31\u662f\u200bcmp\u200b\u51fd\u6570\u200b\u4e2d\u200b\u7684\u200b=\u200b\u7b49\u200b\u53f7\u200b\u3002\u200b\u4e3a\u4ec0\u4e48\u200b\u4f1a\u200b\u5f15\u8d77\u200b\u8fd9\u4e2a\u200b\u95ee\u9898\u200b\u5462\u200b\uff0c\u200b\u901a\u8fc7\u200bgdb\u200b\u67e5\u770b\u200bvector\u200b\u53d8\u91cf\u200b\u9644\u8fd1\u200b\u7684\u200b\u5185\u5b58\u200b\u3002</p> Bash<pre><code>(gdb) b 14\n(gdb) b 16\n(gdb) r\n(gdb) x/26wd 0x55555576df20\n0x55555576df20: 0       0       145     0\n0x55555576df30: 1       1       1       1\n0x55555576df40: 1       1       1       1\n0x55555576df50: 1       1       1       1\n0x55555576df60: 1       1       1       1\n0x55555576df70: 1       1       0       0\n0x55555576df80: 0       0\n(gdb) until 2\n(gdb) x/26wd 0x55555576df20\n0x55555576df20: 0       0       145     1\n0x55555576df30: 1       0       1       1\n0x55555576df40: 1       1       1       1\n0x55555576df50: 1       1       1       1\n0x55555576df60: 1       1       1       1\n0x55555576df70: 1       1       0       0\n0x55555576df80: 0       0\n</code></pre> <p>\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u5185\u5b58\u200b\u6570\u636e\u200b\u88ab\u200b\u6539\u200b\u4e86\u200b\uff0c \u200b\u6bd4\u5982\u200b0x55555576df20\u200b\u4e00\u884c\u200b\u5730\u5740\u200b\u7684\u200b145\uff0c0\u200b\u88ab\u200b\u6539\u6210\u200b\u4e86\u200b145\uff0c1\u3002\u200b\u6bd4\u5982\u200b0x55555576df30\u200b\u4e00\u884c\u200b\u5730\u5740\u200b\u7684\u200b1\uff0c1\uff0c1\uff0c1\u200b\u88ab\u200b\u6539\u6210\u200b\u4e86\u200b1\uff0c0\uff0c1\uff0c1\u3002</p> <p>\u200b\u5f53\u200b\u628a\u200bset *(0x55555576df2c)=0\uff0c\u200b\u5c31\u200b\u4e0d\u4f1a\u200b\u62a5\u9519\u200b\u4e86\u200b\u3002\u200b\u8fd9\u91cc\u200b\u4e0e\u200bvector\u200b\u7684\u200b\u6790\u6784\u200b\u51fd\u6570\u8c03\u7528\u200b\u6709\u5173\u200b\u3002</p> <p>\u200b\u5728\u200b\u9879\u76ee\u200b\u4ee3\u7801\u200b\u4e2d\u200b\uff0c\u200b\u5982\u679c\u200bvector\u200b\u4e2d\u662f\u200b\u4e00\u4e2a\u200bclass\u200b\u6216\u8005\u200bstd::string\uff0c\u200b\u90a3\u4e48\u200b\u62a5\u9519\u200b\u73b0\u8c61\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u662f\u200bstd::bad_alloc\uff0c\u200b\u6790\u6784\u200bstd::string\u200b\u51fa\u9519\u200b\uff0c\u200b\u6216\u8005\u200b\u6790\u6784\u200bclass\u200b\u51fa\u9519\u200b\uff0c\u200b\u5bfc\u81f4\u200b\u95ee\u9898\u200b\u4e0d\u6613\u200b\u5bdf\u89c9\u200b\u3002\u200b\u4f46\u200b\u672c\u8d28\u200b\u662f\u56e0\u4e3a\u200bstd::sort\u200b\u7684\u200bcmp\u200b\u51fd\u6570\u200b\u5b9a\u4e49\u200b\u4e0d\u200b\u6b63\u786e\u200b\uff0c\u200b\u5bfc\u81f4\u200b\u5185\u5b58\u200b\u6570\u636e\u200b\u88ab\u200b\u66f4\u6539\u200b\uff0c\u200b\u6240\u4ee5\u200b\u4ee3\u7801\u6267\u884c\u200b\u51fa\u9519\u200b\u4e86\u200b\u3002</p> <p>\u200b\u8fd9\u91cc\u200b\u627e\u5230\u200b\u4e86\u200b\u4e00\u7bc7\u200b\u53e4\u8001\u200b\u7684\u200b\u6587\u7ae0\u200b\uff0c\u200b\u4ece\u200b\u6e90\u7801\u200b\u4e0a\u200b\u8fdb\u884c\u200b\u4e86\u200b\u5206\u6790\u200b\uff1a\u200b\u4e00\u6b21\u200bstl sort\u200b\u8c03\u7528\u200b\u5bfc\u81f4\u200b\u7684\u200b\u8fdb\u7a0b\u200b\u5d29\u6e83\u200b\uff0c\u200b\u8bb2\u89e3\u200b\u5f97\u200b\u5f88\u200b\u7ec6\u81f4\u200b\u6e05\u695a\u200b\u3002</p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>C++20\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u57fa\u4e8e\u200b\u5c5e\u6027\u200b\u6d4b\u8bd5\u200b\u7684\u200bquickcheck-cpp\u200b\u5e93\u200b</li> <li>Fast PIMPL \u200b\u53c8\u200b\u662f\u200b\u4ec0\u4e48\u200b\u6280\u6cd5\u200b\uff1f</li> <li>C++\u200b\u5f00\u53d1\u200b\u5e38\u89c1\u95ee\u9898\u200b\u4e4b\u200bABI\u200b\u517c\u5bb9\u6027\u95ee\u9898\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/c%E5%B8%B8%E8%A7%81%E9%99%B7%E9%98%B1%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90%E4%BA%86%E8%A7%A3const%E4%BD%BF%E7%94%A8/","title":"C++\u200b\u5e38\u89c1\u200b\u9677\u9631\u200b\uff1a\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b\u4e86\u89e3\u200bconst\u200b\u4f7f\u7528","text":""},{"location":"blog/c%E5%B8%B8%E8%A7%81%E9%99%B7%E9%98%B1%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90%E4%BA%86%E8%A7%A3const%E4%BD%BF%E7%94%A8/#\u4e00\u4e2a\u4f8b\u5b50\u4e86\u89e3cpp-\u5e38\u91cf\u5e38\u89c1\u9677\u9631","title":"\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b\u4e86\u89e3\u200b\uff1acpp \u200b\u5e38\u91cf\u200b\u5e38\u89c1\u200b\u9677\u9631","text":"<p>\u200b\u4e0b\u9762\u200b\u901a\u8fc7\u200b\u8fd9\u4e2a\u200b\u4f8b\u5b50\u200b\uff0c\u200b\u4e00\u8d77\u200b\u4e86\u89e3\u200b\u4e00\u4e0b\u200b cpp \u200b\u5e38\u91cf\u200b\u4f7f\u7528\u200b\u7684\u200b\u5e38\u89c1\u200b\u9677\u9631\u200b\u3002</p> C++<pre><code>// do_s.h\n#pragma once\nconstexpr char kSpecial[] = \"special\";\n\n// \u200b\u6bd4\u8f83\u200b\u5b57\u7b26\u4e32\u200b\u51fd\u6570\u200b\nvoid DoSomething(const char* value);\n</code></pre> C++<pre><code>// do_s.cpp\n#include \"do_s.h\"\n#include &lt;iostream&gt;\n\nvoid DoSomething(const char* value) {\n    std::cout &lt;&lt; \"addr in func: \" &lt;&lt; &amp;kSpecial &lt;&lt; std::endl;\n\n  // \u200b\u6bd4\u8f83\u200b\u5b57\u7b26\u4e32\u200b\uff0c\ud83d\udc47\ud83d\udc47\ud83d\udc47\ud83d\udc47\u200b\u6ce8\u610f\u200b\u4e0b\u9762\u200b\u8fd9\u200b\u884c\u200b\u4ee3\u7801\u200b\ud83d\udc47\ud83d\udc47\ud83d\udc47\ud83d\udc47\n  if (value == kSpecial) {\n    // do something special\n    std::cout &lt;&lt; \"it's special!\" &lt;&lt; std::endl;\n  } else {\n    // do something boring\n    std::cout &lt;&lt; \"it's boring!\" &lt;&lt; std::endl;\n  }\n}\n</code></pre> C++<pre><code>// main.cpp\n#include \"do_s.h\"\n#include &lt;iostream&gt;\n\nint main(){\n    std::cout &lt;&lt; \"addr in main: \" &lt;&lt; &amp;kSpecial &lt;&lt; std::endl;\n    DoSomething(kSpecial);\n    return 0;\n}\n</code></pre> <p>\u200b\u731c\u200b\u4e00\u4e0b\u200b\u8fd0\u884c\u200b\u7ed3\u679c\u200b\u4f1a\u200b\u662f\u200b\u4ec0\u4e48\u200b\u5462\u200b\uff1f\u200b\u4f1a\u200b\u6253\u5370\u200b\u201dit\u2019s special!\u201d\u200b\u5417\u200b\uff1f</p> Bash<pre><code>$ g++ do_s.cpp main.cpp\n$ ./a.out\naddr in main: 0x562e0650d040\naddr in func: 0x562e0650d008\nit's boring!\n</code></pre>"},{"location":"blog/c%E5%B8%B8%E8%A7%81%E9%99%B7%E9%98%B1%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90%E4%BA%86%E8%A7%A3const%E4%BD%BF%E7%94%A8/#\u539f\u56e0\u5206\u6790","title":"\u539f\u56e0\u200b\u5206\u6790","text":"<p>\u200b\u548c\u200b\u9884\u671f\u200b\u7684\u200b\u6267\u884c\u200b\u7ed3\u679c\u200b\u4e00\u81f4\u200b\u600e\u4e48\u200b\u4e0d\u200b\u4e00\u81f4\u200b\u5462\u200b\uff1f\u200b\u5f53\u200b\u6211\u4eec\u200b\u8c03\u7528\u200b DoSomething(kSpecial)\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u6267\u884c\u200b do_s.cpp \u200b\u4e2d\u200b\u201dif (value == kSpecial)\u201d\u200b\u4ee3\u7801\u200b\u54ea\u4e2a\u200b\u5206\u652f\u200b\u7684\u200b\u884c\u4e3a\u200b\u662f\u200b\u4e0d\u200b\u786e\u5b9a\u200b\u7684\u200b\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200b\u7ed3\u679c\u200b\u662f\u200b\u672a\u5b9a\u4e49\u200b\u7684\u200b\uff08undefined behavior\uff09!</p> <p>kSpecial \u200b\u5bf9\u8c61\u200b\u5728\u200b\u7f16\u8bd1\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u4f1a\u200b\u4ea7\u751f\u200b\u4e00\u7ec4\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u8fd9\u662f\u200b C++\u200b\u6807\u51c6\u200b\u5b9a\u4e49\u200b\u7684\u200b\uff1a\u200b\u7f16\u8bd1\u200b\u65f6\u200b\u6bcf\u4e2a\u200b\u5f15\u7528\u200b\u4e86\u200b do_s.h \u200b\u6587\u4ef6\u200b\u7684\u200b\u6e90\u4ee3\u7801\u200b\u6587\u4ef6\u200b\u4f1a\u200b\u6709\u200b\u4e00\u4e2a\u200b\u72ec\u7acb\u200b\u7684\u200b\u7f16\u8bd1\u200b\u5355\u5143\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u7f16\u8bd1\u200b\u5355\u5143\u200b\u6709\u200b\u4e00\u4e2a\u200b\u72ec\u7acb\u200b\u7684\u200b kSpecial \u200b\u5bf9\u8c61\u200b\u526f\u672c\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u5bf9\u8c61\u200b\u7684\u200b\u5730\u5740\u200b\u90fd\u200b\u4e0d\u540c\u200b\u3002</p> <p>\u200b\u6240\u4ee5\u200b\u5728\u200b do_s.cpp \u200b\u4ee3\u7801\u200b\uff0c\u200b\u4f1a\u200b\u51fa\u73b0\u200b\u672a\u5b9a\u4e49\u200b\u73b0\u8c61\u200b\uff0c\u200b\u5373\u200b\u5728\u200b\u4e0d\u540c\u200b\u7684\u200b\u8c03\u7528\u200b\u4f4d\u7f6e\u200b\uff0ckSpecial \u200b\u7684\u200b\u5730\u5740\u200b\u4e0d\u540c\u200b\uff0c\u200b\u5bfc\u81f4\u200b\u540c\u6837\u200b\u7684\u200b DoSomething(kSpecial)\u200b\u4ee3\u7801\u200b\u53ef\u80fd\u200b\u7ed3\u679c\u200b\u4e0d\u540c\u200b\u3002</p> <p>main.cpp \u200b\u548c\u200b do_s.cpp \u200b\u662f\u200b\u4e24\u4e2a\u200b\u72ec\u7acb\u200b\u7684\u200b\u7f16\u8bd1\u200b\u6a21\u5757\u200b\uff0c\u200b\u5bfc\u81f4\u200b\u4e86\u200b kSpecial \u200b\u5bf9\u8c61\u200b\u5728\u200b\u7f16\u8bd1\u200b\u9636\u6bb5\u200b\u4ea7\u751f\u200b\u4e86\u200b\u4e24\u4e2a\u200b\u72ec\u7acb\u200b\u7684\u200b\u5b9e\u4f8b\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u5b9e\u4f8b\u200b\u7684\u200b\u5730\u5740\u200b\u90fd\u200b\u4e0d\u540c\u200b\uff0c\u200b\u6240\u4ee5\u200b\u5f53\u200b\u8c03\u7528\u200b DoSomething(kSpecial)\u200b\u65f6\u200b\uff0c\u200b\u5c31\u200b\u4f1a\u200b\u5bfc\u81f4\u200b\u672a\u5b9a\u4e49\u200b\u884c\u4e3a\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u5c06\u200b do_s.cpp \u200b\u4e2d\u200b\u7684\u200b\u5185\u5bb9\u200b\u79fb\u52a8\u200b\u5230\u200b main.cpp \u200b\u4e2d\u200b\uff0c\u200b\u5220\u9664\u200b do_s.cpp\uff0c\u200b\u7f16\u8bd1\u200b\u548c\u200b\u8fd0\u884c\u200b\u7ed3\u679c\u200b\u5c31\u662f\u200b\u9884\u671f\u200b\u7684\u200b\u7ed3\u679c\u200b\u201dit\u2019s special!\u201d\u200b\u4e86\u200b\u3002\u200b\u56e0\u4e3a\u200b\u53ea\u6709\u200b\u4e00\u4e2a\u200b\u7f16\u8bd1\u200b\u5355\u5143\u200b\u4e86\u200b\u3002</p> <p>\u200b\u4f46\u662f\u200b\uff0c\u200b\u8fd9\u200b\u4e0d\u80fd\u200b\u89e3\u51b3\u200b\u6839\u672c\u200b\u95ee\u9898\u200b\u5440\u200b\uff01\uff01\uff01</p>"},{"location":"blog/c%E5%B8%B8%E8%A7%81%E9%99%B7%E9%98%B1%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90%E4%BA%86%E8%A7%A3const%E4%BD%BF%E7%94%A8/#\u5c0f\u63d2\u66f2const-\u4ecb\u7ecd","title":"\u5c0f\u200b\u63d2\u66f2\u200b\uff1aconst \u200b\u4ecb\u7ecd","text":""},{"location":"blog/c%E5%B8%B8%E8%A7%81%E9%99%B7%E9%98%B1%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90%E4%BA%86%E8%A7%A3const%E4%BD%BF%E7%94%A8/#const-\u4ee3\u8868\u4e86\u53ea\u8bfb\u4e0d\u4ee3\u8868\u4e0d\u53ef\u4ee5\u4fee\u6539","title":"const \u200b\u4ee3\u8868\u200b\u4e86\u200b\u53ea\u8bfb\u200b\uff0c\u200b\u4e0d\u200b\u4ee3\u8868\u200b\u4e0d\u200b\u53ef\u4ee5\u200b\u4fee\u6539","text":"<p>\u200b\u5728\u200b c++\u200b\u4e2d\u200b\u63d0\u4f9b\u200b\u4e86\u200b mutable \u200b\u548c\u200b const_cast \u200b\u7b49\u200b\u624b\u6bb5\u200b\u4fee\u6539\u200b\u3002\u200b\u770b\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b\uff1a</p> C++<pre><code>void f(const std::string&amp; s) {\n  const int size = s.size();\n  std::cout &lt;&lt; size &lt;&lt; '\\n';\n}\n\nf(\"\");  // Prints 0\nf(\"foo\");  // Prints 3\n</code></pre> <p>\u200b\u5728\u200b\u4e0a\u8ff0\u200b\u4ee3\u7801\u200b\u4e2d\u200b\uff0csize \u200b\u662f\u200b\u4e00\u4e2a\u200b const \u200b\u53d8\u91cf\u200b\uff0c\u200b\u4f46\u200b\u5728\u200b\u7a0b\u5e8f\u8fd0\u884c\u200b\u65f6\u200b\u5b83\u200b\u6301\u6709\u200b\u591a\u4e2a\u200b\u503c\u200b\u3002\u200b\u5b83\u200b\u5e76\u975e\u200b\u5e38\u91cf\u200b\u3002</p>"},{"location":"blog/c%E5%B8%B8%E8%A7%81%E9%99%B7%E9%98%B1%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90%E4%BA%86%E8%A7%A3const%E4%BD%BF%E7%94%A8/#\u975e\u6052\u5b9a\u7684\u5e38\u91cf","title":"\u975e\u200b\u6052\u5b9a\u200b\u7684\u200b\u5e38\u91cf","text":"<p>const \u200b\u7ecf\u5e38\u200b\u548c\u200b\u6307\u9488\u200b\u4e00\u8d77\u200b\u4f7f\u7528\u200b\uff1a</p> C++<pre><code>const char* kStr = \"foo\";\nconst Thing* kFoo = ...;\n</code></pre> <p>\u200b\u4e0a\u8ff0\u200b kFoo \u200b\u662f\u200b\u4e00\u4e2a\u200b\u6307\u5411\u200b\u5e38\u91cf\u200b\u7684\u200b\u6307\u9488\u200b\uff0c\u200b\u4f46\u200b\u6307\u9488\u200b\u672c\u8eab\u200b\u4e0d\u662f\u200b\u5e38\u91cf\u200b\u3002\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5bf9\u200b\u5176\u200b\u8d4b\u503c\u200b\u3001\u200b\u8bbe\u200b\u4e3a\u200b null \u200b\u7b49\u200b\u3002</p> C++<pre><code>kStr = \"bar\";   // kStr\u200b\u5176\u5b9e\u200b\u662f\u200b\u53ef\u4ee5\u200b\u4fee\u6539\u200b\u7684\u200b\nkFoo = nullptr;     // kFoo\u200b\u540c\u6837\u200b\u4e5f\u200b\u662f\u200b\u53ef\u4ee5\u200b\u4fee\u6539\u200b\n</code></pre> <p>\u200b\u5982\u679c\u200b\u6211\u4eec\u200b\u60f3\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u201c\u200b\u4e0d\u80fd\u200b\u4fee\u6539\u200b\u201d\u200b\u7684\u200b\u5e38\u91cf\u200b\uff0c\u200b\u5e94\u8be5\u200b\u5982\u4e0b\u200b\u5b9e\u73b0\u200b</p> C++<pre><code>const char* const kStr = ...;\nconst Thing* const kFoo = ...;\n// C++17\u200b\u4e4b\u540e\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u8fd9\u6837\u200b\nconstexpr const Thing* kFoo = ...;\n</code></pre>"},{"location":"blog/c%E5%B8%B8%E8%A7%81%E9%99%B7%E9%98%B1%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90%E4%BA%86%E8%A7%A3const%E4%BD%BF%E7%94%A8/#\u5982\u4f55\u89e3\u51b3\u4e0a\u9762\u7684\u95ee\u9898\u5462","title":"\u5982\u4f55\u200b\u89e3\u51b3\u200b\u4e0a\u9762\u200b\u7684\u200b\u95ee\u9898\u200b\u5462","text":""},{"location":"blog/c%E5%B8%B8%E8%A7%81%E9%99%B7%E9%98%B1%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90%E4%BA%86%E8%A7%A3const%E4%BD%BF%E7%94%A8/#\u5934\u6587\u4ef6\u548c\u6e90\u6587\u4ef6\u5206\u79bb\u5b9a\u4e49\u5e38\u91cf","title":"\u5934\u6587\u4ef6\u200b\u548c\u200b\u6e90\u6587\u4ef6\u200b\u5206\u79bb\u200b\u5b9a\u4e49\u200b\u5e38\u91cf","text":"<p>\u200b\u4e86\u89e3\u200b\u94fe\u63a5\u200b\uff0c\u200b\u94fe\u63a5\u200b\u4e0e\u200b\u7a0b\u5e8f\u200b\u4e2d\u200b\u4e00\u4e2a\u200b\u547d\u540d\u200b\u5bf9\u8c61\u200b\u6709\u200b\u591a\u5c11\u200b\u5b9e\u4f8b\u200b\uff08\u200b\u6216\u200b \u201c\u200b\u526f\u672c\u200b\u201d\uff09\u200b\u6709\u5173\u200b\u3002\u200b\u901a\u5e38\u200b\uff0c\u200b\u5728\u200b\u7a0b\u5e8f\u200b\u4e2d\u200b\uff0c\u200b\u5177\u6709\u200b\u4e00\u4e2a\u200b\u540d\u79f0\u200b\u7684\u200b\u5e38\u91cf\u200b\u6700\u597d\u200b\u5f15\u7528\u200b\u5355\u4e2a\u200b\u5bf9\u8c61\u200b\u3002\u200b\u5bf9\u4e8e\u200b\u5168\u5c40\u200b\u6216\u200b\u547d\u540d\u200b\u7a7a\u95f4\u200b\u4f5c\u7528\u57df\u200b\u7684\u200b\u53d8\u91cf\u200b\uff0c\u200b\u8fd9\u200b\u9700\u8981\u200b\u4e00\u79cd\u200b\u79f0\u4e3a\u200b\u5916\u90e8\u200b\u94fe\u63a5\u200b\u7684\u200b\u4e1c\u897f\u200b\u3002</p> C++<pre><code>// do_s.h\nextern const int kMyNumber;\nextern const char kSpecial[];\nextern const std::string_view kMyStringView;\n\n// \u200b\u5373\u200b\u4e0a\u9762\u200b\u7684\u200b\u4ee3\u7801\u200b\u4fee\u6539\u200b\u4e3a\u200b\n// extern const char kSpecial[];\n</code></pre> C++<pre><code>// do_s.cpp\nconstexpr int kMyNumber = 42;\nconstexpr char kSpecial[] = \"special\";\nconstexpr std::string_view kMyStringView = \"Hello\";\n\n// \u200b\u5e38\u91cf\u200b\u5b9a\u4e49\u200b\n// constexpr char kSpecial[] = \"special\";\n</code></pre>"},{"location":"blog/c%E5%B8%B8%E8%A7%81%E9%99%B7%E9%98%B1%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90%E4%BA%86%E8%A7%A3const%E4%BD%BF%E7%94%A8/#\u4ec5\u5728\u5934\u6587\u4ef6\u6216\u8005\u6e90\u6587\u4ef6\u5b9a\u4e49\u5e38\u91cf","title":"\u4ec5\u200b\u5728\u200b\u5934\u6587\u4ef6\u200b\u6216\u8005\u200b\u6e90\u6587\u4ef6\u200b\u5b9a\u4e49\u200b\u5e38\u91cf\u200b\ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350","text":"<p>\u200b\u5728\u200b\u5934\u6587\u4ef6\u200b\u4e2d\u200b\u901a\u8fc7\u200b\u51fd\u6570\u200b\u8fd4\u56de\u200b\u5e38\u91cf\u200b\uff1a</p> C++<pre><code>// constexpr\u200b\u51fd\u6570\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u8c03\u7528\u200bMyNumber\u200b\u51fd\u6570\u200b\u6765\u200b\u83b7\u53d6\u200b\u5e38\u91cf\u200b\nconstexpr int MyNumber() { return 42; }\n\n// \u200b\u4e00\u4e2a\u200b\u666e\u901a\u200b\u51fd\u6570\u200b\u5b9a\u4e49\u200b\uff0c\u200b\u6ce8\u610f\u200b\u8fd9\u91cc\u200b\u7684\u200bkHello\u200b\u662f\u200b\u4e00\u4e2a\u200b\u771f\u6b63\u200b\u7684\u200b\u5e38\u91cf\u200b\uff0c\u200b\u5730\u5740\u200b\u4e0d\u53d8\u200b\n// \u200b\u53ef\u4ee5\u200b\u8c03\u7528\u200bMyString()\u200b\u6765\u200b\u83b7\u53d6\u200b\u5e38\u91cf\u200b\u5bf9\u8c61\u200b\ninline std::string_view MyString() {\n  // \u200b\u6ce8\u610f\u200b\u4e00\u5b9a\u200b\u8981\u200bstatic constexpr\u200b\u4fee\u9970\u200b\uff0c\u200b\u5426\u5219\u200b\u4f1a\u200b\u6709\u200b\u672a\u5b9a\u4e49\u200b\u884c\u4e3a\u200b\u53d1\u751f\u200b\n  static constexpr char kHello[] = \"Hello\";\n  return kHello;\n}\n</code></pre> <p>\u200b\u6216\u8005\u200b\uff0c\u200b\u5982\u679c\u200b\u53ea\u200b\u9700\u8981\u200b\u5728\u200b cpp \u200b\u6587\u4ef6\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u7684\u8bdd\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5b9a\u4e49\u200b\u5728\u200b\u6e90\u6587\u4ef6\u200b\u4e2d\u200b\uff0c\u200b\u4e0d\u8981\u200b\u653e\u5728\u200b\u5934\u6587\u4ef6\u200b\u4e2d\u200b\u3002</p> C++<pre><code>// \u200b\u53ea\u200b\u5728\u200bcpp\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u7684\u8bdd\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5982\u4e0b\u200b\u5b9a\u4e49\u200b\u5e38\u91cf\u200b\nconstexpr int kBufferSize = 42;\nconstexpr char kBufferName[] = \"example\";\nconstexpr std::string_view kOtherBufferName = \"example\";\n</code></pre> <p>\u200b\u8be6\u7ec6\u200b\u5185\u5bb9\u200b\u53ef\u4ee5\u200b\u9605\u8bfb\u200babseil tips 140\u3002</p> <ul> <li>c++\u200b\u4ece\u200b\u4e00\u6b21\u200b\u9759\u6001\u200b\u5e93\u200b\u94fe\u63a5\u200b\u5f15\u53d1\u200b\u7684\u200bdouble free\u200b\u804a\u8d77\u200b</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/c%E6%8A%80%E6%B3%95iguana%E5%BA%8F%E5%88%97%E5%8C%96%E5%BA%93%E4%B8%AD%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0enum-reflection%E5%8F%8D%E5%B0%84/","title":"C++\u200b\u6280\u6cd5\u200b\uff1aiguana\u200b\u5e8f\u5217\u5316\u200b\u5e93\u4e2d\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200benum reflection\u200b\u53cd\u5c04","text":"<p>\u200b\u6211\u4eec\u200b\u77e5\u9053\u200b\u901a\u8fc7\u200b\u53cd\u5c04\u200b\u53ef\u4ee5\u200b\u5728\u200b\u8fd0\u884c\u200b\u65f6\u200b\u83b7\u53d6\u200b\u7c7b\u540d\u200b\u3001\u200b\u7c7b\u578b\u200b\u7b49\u200b\u4e00\u4e9b\u200b\u4fe1\u606f\u200b\uff0c\u200b\u7136\u800c\u200bc++\u200b\u8bed\u8a00\u200b\u672c\u8eab\u200b\u6ca1\u6709\u200b\u63d0\u4f9b\u200b\u7c7b\u4f3c\u200bjava\u200b\u8fd9\u79cd\u200b\u53cd\u5c04\u200b\u673a\u5236\u200b\u3002\u200b\u5728\u200b\u9605\u8bfb\u200biguana\u200b\u5f00\u6e90\u200b\u5e93\u65f6\u200b\uff0c\u200b\u770b\u5230\u200b\u4e86\u200b\u4e00\u79cd\u200bEnumRefection\u200b\u7684\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u5206\u4eab\u200b\u7ed9\u200b\u5927\u5bb6\u200b\u3002</p> <p>iguana \u200b\u662f\u200bC++17 \u200b\u5b9e\u73b0\u200b\u7684\u200bheader only\u3001\u200b\u8de8\u5e73\u53f0\u200b\u3001\u200b\u9ad8\u6027\u80fd\u200b\u6613\u7528\u200b\u7684\u200b\u5e8f\u5217\u5316\u200b\u5e93\u200b\uff0c\u200b\u5305\u62ec\u200bxml/json/yaml \u200b\u7684\u200b\u5e8f\u5217\u5316\u200b\u548c\u200b\u53cd\u200b\u5e8f\u5217\u5316\u200b\u3002</p> <p>iguana \u200b\u7684\u200b\u76ee\u6807\u200b\u662f\u200b\u901a\u8fc7\u200b\u7f16\u8bd1\u200b\u671f\u95f4\u200b\u53cd\u5c04\u200b\u5c06\u200b\u5bf9\u8c61\u200b\u5e8f\u5217\u5316\u200b\u5230\u200b\u4efb\u610f\u200b\u6570\u636e\u683c\u5f0f\u200b\u5e76\u200b\u5927\u5e45\u200b\u63d0\u5347\u200b\u5bf9\u8c61\u200b\u7684\u200b\u5e8f\u5217\u5316\u200b\u548c\u200b\u53cd\u200b\u5e8f\u5217\u5316\u200b\u7684\u200b\u6613\u7528\u6027\u200b\u3002</p> <p>\u200b\u901a\u8fc7\u200b\u6a21\u677f\u200b\u4f20\u5165\u200b\u7c7b\u578b\u200bT\uff0c\u200b\u7136\u540e\u200b\u83b7\u53d6\u200b__PRETTY_FUNCTION__\u200b\u5b57\u7b26\u4e32\u200b\uff0c\u200b\u901a\u8fc7\u200bint\u200b\u9ed8\u8ba4\u200b\u7c7b\u578b\u200b\u627e\u5230\u200bT\u200b\u7c7b\u578b\u200b\u6240\u5728\u200b\u7684\u200b\u5f00\u59cb\u200b\u7ed3\u675f\u200b\u4f4d\u7f6e\u200b\uff0c\u200b\u7136\u540e\u200b\u901a\u8fc7\u200b\u5b57\u7b26\u4e32\u200b\u622a\u53d6\u200b\uff0c\u200b\u628a\u200bstring\u200b\u4fe1\u606f\u200b\u62ff\u200b\u51fa\u6765\u200b\uff0c\u200b\u4ee5\u200b\u5b9e\u73b0\u200b\u53cd\u5c04\u200b\u3002</p> <p>\u200b\u5b9a\u4e49\u200b\u7684\u200b\u51fd\u6570\u200bget_raw_name\uff0c\u200b\u901a\u8fc7\u200bint\u200b\u8fdb\u884c\u200b\u6a21\u677f\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u4ee5\u540e\u200b\u8fd4\u56de\u200b\u7684\u200b\u5b57\u7b26\u4e32\u200b\u662f\u200b\uff1a </p>C++<pre><code>std::string_view get_raw_name() [T = int]\n</code></pre> \u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u8fd9\u4e2a\u200b\u5b57\u7b26\u4e32\u200b\u4e2d\u200b\u5c31\u200b\u4fdd\u5b58\u200b\u4e86\u200bint\u200b\u7684\u200b\u7c7b\u578b\u4fe1\u606f\u200b\u3002<p></p>"},{"location":"blog/c%E6%8A%80%E6%B3%95iguana%E5%BA%8F%E5%88%97%E5%8C%96%E5%BA%93%E4%B8%AD%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0enum-reflection%E5%8F%8D%E5%B0%84/#iguana\u5e93\u5b9e\u73b0\u53cd\u5c04","title":"iguana\u200b\u5e93\u200b\u5b9e\u73b0\u200b\u53cd\u5c04","text":"<p>\u200b\u4e0b\u9762\u200b\u770b\u200b\u4e00\u4e0b\u200biguana\u200b\u5e93\u200b\u6e90\u7801\u200b\u4e2d\u200b\u7684\u200b\u5b9e\u73b0\u200b\uff0ciguana\u200b\u662f\u200b\u4e00\u4e2a\u200bc++\u200b\u5b9e\u73b0\u200b\u7684\u200b\u5e8f\u5217\u5316\u200b\u5e93\u200b, \u200b\u6e90\u7801\u200b\u5730\u5740\u200b\uff1aiguana\u200b\u5b9e\u73b0\u200b\u7684\u200bfield_reflection</p> <p>\uff08\u200b\u6ce8\u200b\uff1a\u200b\u901a\u8fc7\u200b\u5728\u200bgithub.com\u200b\u4e2d\u200b\u52a0\u5165\u200b1s\uff0cgithub1s.com\uff0c\u200b\u5982\u200b\u4e0a\u9762\u200b\u7684\u200b\u94fe\u63a5\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u8fd9\u4e2a\u200b\u5de5\u5177\u200b\u6253\u5f00\u200b\u7f51\u9875\u200b\u7248\u200b\u7684\u200bvscode\u200b\u8fdb\u884c\u200b\u6e90\u7801\u200b\u9605\u8bfb\u200b\uff09</p> C++<pre><code>#include &lt;iostream&gt;\n\ntemplate &lt;typename T&gt;\nconstexpr std::string_view get_raw_name() {\n    #ifdef _MSC_VER\n    return __FUNCSIG__;\n    #else\n    return __PRETTY_FUNCTION__;\n    #endif\n}\n\ntemplate &lt;auto T&gt;\nconstexpr std::string_view get_raw_name() {\n    #ifdef _MSC_VER\n    return __FUNCSIG__;\n    #else\n    return __PRETTY_FUNCTION__;\n    #endif\n}\n\ntemplate &lt;typename T&gt; // \u200b\u7528\u4e8e\u200b\u7c7b\u578b\u200b\ninline constexpr std::string_view type_string() {\n    constexpr std::string_view sample = get_raw_name&lt;int&gt;();\n    constexpr size_t pos = sample.find(\"int\"); // \u200b\u627e\u5230\u200b\u7c7b\u578b\u200b\u540d\u200b\u5f00\u59cb\u200b\u4f4d\u7f6e\u200b\n    constexpr std::string_view str = get_raw_name&lt;T&gt;();\n    constexpr auto next1 = str.rfind(sample[pos + 3]); // \u200b\u4ece\u53f3\u200b\u5f80\u524d\u200b\u627e\u200b\u7c7b\u578b\u200b\u7ed3\u675f\u200b\u540e\u200b\u7684\u200b\u5b57\u7b26\u200b\uff0c\u200b\u627e\u5230\u200b\u7c7b\u578b\u200b\u540d\u200b\u7ed3\u675f\u200b\u7684\u200b\u4f4d\u7f6e\u200b\n    #if defined(_MSC_VER)\n    constexpr auto s1 = str.substr(pos + 6, next1 - pos - 6);\n    #else\n    constexpr auto s1 = str.substr(pos, next1 - pos);\n    #endif\n    return s1;\n}\n\ntemplate &lt;auto T&gt; // \u200b\u7528\u4e8e\u200b\u503c\u200b\ninline constexpr std::string_view enum_string() {\n    constexpr std::string_view sample = get_raw_name&lt;int&gt;();\n    constexpr size_t pos = sample.find(\"int\");\n    constexpr std::string_view str = get_raw_name&lt;T&gt;();\n    constexpr auto next1 = str.rfind(sample[pos + 3]);\n    #if defined(__clang__) || defined(_MSC_VER)\n    constexpr auto s1 = str.substr(pos, next1 - pos);\n    #else\n    constexpr auto s1 = str.substr(pos + 5, next1 - pos - 5);\n    #endif\n    return s1;\n}\n</code></pre>"},{"location":"blog/c%E6%8A%80%E6%B3%95iguana%E5%BA%8F%E5%88%97%E5%8C%96%E5%BA%93%E4%B8%AD%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0enum-reflection%E5%8F%8D%E5%B0%84/#\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u5b66\u4f1a\u4f7f\u7528","title":"\u901a\u8fc7\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b\u5b66\u4f1a\u200b\u4f7f\u7528","text":"<p>\u200b\u4e0b\u9762\u200b\u901a\u8fc7\u200b\u4e00\u4e2a\u200bPerson\u200b\u7ed3\u6784\u200b\u4f53\u200b\uff0c\u200b\u4ee5\u53ca\u200benum Status\u200b\u8fdb\u884c\u200b\u7b80\u5355\u200b\u6d4b\u8bd5\u200b\uff1a </p>C++<pre><code>struct Person{\n    std::string name;    \n    int age;\n};\n\nenum class Status{\n    Good,\n    Bad\n};\nint main(){\n\n    constexpr std::string_view sample = get_raw_name&lt;int&gt;();\n    std::cout &lt;&lt; sample &lt;&lt; std::endl;\n\n    constexpr std::string_view sample1 = get_raw_name&lt;Status::Good&gt;();\n    std::cout &lt;&lt; sample1 &lt;&lt; std::endl;\n\n    std::cout &lt;&lt; type_string&lt;float&gt;() &lt;&lt; std::endl;\n    std::cout &lt;&lt; enum_string&lt;12&gt;() &lt;&lt; std::endl;\n\n    std::cout &lt;&lt; type_string&lt;Person&gt;() &lt;&lt; std::endl;\n    std::cout &lt;&lt; enum_string&lt;Status::Good&gt;() &lt;&lt; std::endl;\n}\n</code></pre> \u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u503c\u200b\u548c\u200b\u7c7b\u578b\u200b\u7684\u200b\u53cd\u5c04\u200b\uff1a C++<pre><code>std::string_view get_raw_name() [T = int]\nstd::string_view get_raw_name() [T = Status::Good]\nfloat\n12\nPerson\nStatus::Good\n</code></pre><p></p> <p>\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u5728\u7ebf\u200b\u7f51\u7ad9\u200b\uff0c\u200b\u8fd0\u884c\u200b\u5de5\u5177\u200b\u6d4b\u8bd5\u200b\u9a8c\u8bc1\u200b\uff1ahttps://cpp.sh/\u3002</p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>C++20\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u57fa\u4e8e\u200b\u5c5e\u6027\u200b\u6d4b\u8bd5\u200b\u7684\u200bquickcheck-cpp\u200b\u5e93\u200b</li> <li>C++\u200b\u6280\u6cd5\u200b\uff1a\u200b\u5982\u4f55\u200b\u4e3a\u200b\u4e00\u4e2a\u200b\u7c7b\u200b\u52a8\u6001\u200b\u9644\u52a0\u200b\u4efb\u610f\u200b\u7c7b\u578b\u200b\u6570\u636e\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/c%E4%BD%BF%E7%94%A8abseil-cpp%E9%81%87%E5%88%B0%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/","title":"C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898","text":""},{"location":"blog/c%E4%BD%BF%E7%94%A8abseil-cpp%E9%81%87%E5%88%B0%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/#\u5982\u4f55\u4f7f\u7528abseil-cpp","title":"\u5982\u4f55\u200b\u4f7f\u7528\u200babseil-cpp","text":""},{"location":"blog/c%E4%BD%BF%E7%94%A8abseil-cpp%E9%81%87%E5%88%B0%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/#\u7f16\u8bd1abseil-cpp","title":"\u7f16\u8bd1\u200babseil-cpp","text":"<p>\u200b\u4e0d\u200b\u63a8\u8350\u200b\u4f7f\u7528\u200b\u9884\u200b\u7f16\u8bd1\u200b\u7248\u672c\u200b\uff0c\u200b\u548c\u200bABI\u200b\u51b2\u7a81\u200b\u6709\u5173\u200b\u3002\u200b\u53c2\u8003\u200b\uff1a what-is-abi-and-why-dont-you-recommend-using-a-pre-compiled-version-of-abseil</p> Bash<pre><code>cmake -B build -S . -DABSL_BUILD_TESTING=OFF -DCMAKE_INSTALL_PREFIX=./output/ -DCMAKE_CXX_STANDARD=17  -DCMAKE_POSITION_INDEPENDENT_CODE=ON\ncmake --build build -- -j8\ncd build\nmake install\n</code></pre>"},{"location":"blog/c%E4%BD%BF%E7%94%A8abseil-cpp%E9%81%87%E5%88%B0%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/#\u95ee\u9898\u89e3\u51b3\u76f8\u5173","title":"\u95ee\u9898\u200b\u89e3\u51b3\u200b\u76f8\u5173","text":""},{"location":"blog/c%E4%BD%BF%E7%94%A8abseil-cpp%E9%81%87%E5%88%B0%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/#\u62a5\u95191","title":"\u62a5\u9519\u200b1","text":"<p>\u200b\u5982\u679c\u200b\u4f60\u200b\u7684\u200blibtarget.so\u200b\u4f7f\u7528\u200b\u4e86\u200blibabsl_xxx.a, \u200b\u5982\u679c\u200b\u7f16\u8bd1\u200blibtarget.so\u200b\u4e8b\u200b\uff0c\u200b\u63d0\u793a\u200b\u7f16\u8bd1\u200babsl\u200b\u5e93\u200b\u9700\u8981\u200b\u6307\u5b9a\u200b-FPIC\uff0c\u200b\u6307\u5b9a\u200b\u5373\u53ef\u200b\u3002</p>"},{"location":"blog/c%E4%BD%BF%E7%94%A8abseil-cpp%E9%81%87%E5%88%B0%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/#\u62a5\u95192","title":"\u62a5\u9519\u200b2\ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350","text":"<p>\u200b\u5982\u679c\u200b\u62a5\u9519\u200blibabsl\u200b\u4e2d\u200b\u7684\u200b\u7b26\u53f7\u200b\u548c\u200bgcc\u200b\u4e2d\u200b\u7684\u200bmulti definition\u3002</p> <ul> <li> <p>\u200b\u68c0\u67e5\u200b\u7f16\u8bd1\u200b\u9009\u9879\u200b\uff0c\u200b\u786e\u4fdd\u200bABI\u200b\u76f8\u540c\u200b\uff0c\u200b\u6bd4\u5982\u200b-std17\uff0c\u200b\u53c2\u8003\u200b\uff1awhat-is-abi-and-why-dont-you-recommend-using-a-pre-compiled-version-of-abseil</p> </li> <li> <p>\u200b\u5728\u200bcmake\u200b\u4f7f\u7528\u200babseil\u200b\u4f8b\u5b50\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200b\uff1a CMakeLists.txt </p>Bash<pre><code>file(GLOB ABSEIL_LIBS $ENV{THIRD_PARTY}/lib*/libabsl*.a)\n# find_package(absl REQUIRED)\nadd_library(target SHARED\n    ${target_SRCS}\n)\n\ntarget_link_libraries(target PRIVATE\n    -Wl,--whole-archive\n    ${ABSEIL_LIBS}\n    -Wl,--no-whole-archive\n    -ldl\n    -lpthread\n)\n</code></pre><p></p> </li> </ul> <ul> <li>C++\u200b\u6280\u6cd5\u200b\uff1a\u200b\u5982\u4f55\u200b\u4e3a\u200b\u4e00\u4e2a\u200b\u7c7b\u200b\u52a8\u6001\u200b\u9644\u52a0\u200b\u4efb\u610f\u200b\u7c7b\u578b\u200b\u6570\u636e\u200b</li> <li>C++\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bFP16\uff08IEEE754-2008\uff09\u200b\u7c7b\u578b\u200b\uff1f</li> <li>C++\u200b\u5e38\u89c1\u200b\u9677\u9631\u200b\uff1a\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b\u4e86\u89e3\u200bconst\u200b\u4f7f\u7528\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/c%E6%8A%80%E6%B3%95%E5%A6%82%E4%BD%95%E4%B8%BA%E4%B8%80%E4%B8%AA%E7%B1%BB%E5%8A%A8%E6%80%81%E9%99%84%E5%8A%A0%E4%BB%BB%E6%84%8F%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE/","title":"C++\u200b\u6280\u6cd5\u200b\uff1a\u200b\u5982\u4f55\u200b\u4e3a\u200b\u4e00\u4e2a\u200b\u7c7b\u200b\u52a8\u6001\u200b\u9644\u52a0\u200b\u4efb\u610f\u200b\u7c7b\u578b\u200b\u6570\u636e","text":""},{"location":"blog/c%E6%8A%80%E6%B3%95%E5%A6%82%E4%BD%95%E4%B8%BA%E4%B8%80%E4%B8%AA%E7%B1%BB%E5%8A%A8%E6%80%81%E9%99%84%E5%8A%A0%E4%BB%BB%E6%84%8F%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE/#c\u6280\u6cd5\u5982\u4f55\u4e3a\u4e00\u4e2a\u7c7b\u52a8\u6001\u9644\u52a0\u4efb\u610f\u7c7b\u578b\u6570\u636e","title":"C++\u200b\u6280\u6cd5\u200b\uff1a\u200b\u5982\u4f55\u200b\u4e3a\u200b\u4e00\u4e2a\u200b\u7c7b\u200b\u52a8\u6001\u200b\u9644\u52a0\u200b\u4efb\u610f\u200b\u7c7b\u578b\u200b\u6570\u636e","text":"<p>\u200b\u5728\u200b\u8bbe\u8ba1\u200b\u4e00\u4e2a\u200b\u7c7b\u65f6\u200b\uff0c\u200b\u7c7b\u200b\u7684\u200b\u6210\u5458\u200b\u5c31\u200b\u56fa\u5b9a\u200b\u4e0b\u6765\u200b\u4e86\u200b\u3002\u200b\u4f46\u662f\u200b\u67d0\u4e9b\u200b\u573a\u666f\u200b\u4e0b\u200b\uff0c\u200b\u9700\u8981\u200b\u6269\u5c55\u200b\u7c7b\u200b\u7684\u200b\u6210\u5458\u200b\uff0c\u200b\u4f46\u662f\u200b\u53c8\u200b\u4e0d\u60f3\u200b\u6539\u53d8\u200b\u7c7b\u200b\u7684\u200b\u5b9a\u4e49\u200b\u3002\u200b\u8fd9\u79cd\u200b\u60c5\u51b5\u200b\u600e\u4e48\u529e\u200b\u5462\u200b\uff1f</p> <p>\u200b\u6709\u200b\u4e00\u4e9b\u200b\u65b9\u6cd5\u200b\uff1a + \u200b\u5728\u200b\u8bbe\u8ba1\u200b\u7c7b\u65f6\u200b\uff0c\u200b\u589e\u52a0\u200b\u4e00\u4e9b\u200b\u4fdd\u7559\u5b57\u200b\u6bb5\u200b\uff0c\u200b\u7559\u5f85\u200b\u540e\u9762\u200b\u4f7f\u7528\u200b\u3002 + \u200b\u5728\u200b\u7c7b\u200b\u4e2d\u200b\u53ef\u4ee5\u200b\u5b58\u50a8\u200bstd::string\uff0c\u200b\u5b58\u50a8\u200bjson\u200b\u6570\u636e\u200b\u4e4b\u7c7b\u200b\u7684\u200b\uff0c\u200b\u5982\u679c\u200b\u8981\u200b\u589e\u52a0\u200b\u6570\u636e\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5b58\u50a8\u200b\u5230\u200bstring\u200b\u4e2d\u200b\u3002 + \u200b\u53e6\u5916\u200b\u5c31\u662f\u200b\u672c\u6587\u200b\u4ecb\u7ecd\u200b\u7684\u200b\uff0c\u200b\u5229\u7528\u200b\u7c7b\u578b\u200b\u64e6\u9664\u200b\u6280\u672f\u200b\uff0c\u200b\u901a\u8fc7\u200bstd::shared_ptr&lt;void&gt;\u200b\u5b58\u50a8\u200b\u6570\u636e\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5b58\u50a8\u200b\u4efb\u610f\u200b\u7c7b\u578b\u200b\u7684\u200b\u6570\u636e\u200b\u3002</p> <p>C++\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200bstd::shared_ptr&lt;void&gt;\u200b\u5b9e\u73b0\u200b\u4e3a\u200b\u4e00\u4e2a\u200b\u7c7b\u200b\u52a8\u6001\u200b\u9644\u52a0\u200b\u4efb\u610f\u200b\u7c7b\u578b\u200b\u6570\u636e\u200b\u3002\u200b\u53ef\u4ee5\u200b\u7528\u4e8e\u200b\u9700\u8981\u200b\u5b58\u50a8\u200b\u4e0d\u540c\u200b\u7c7b\u578b\u200b\u6570\u636e\u200b\u4f46\u200b\u5e0c\u671b\u200b\u7edf\u4e00\u200b\u7ba1\u7406\u200b\u7684\u200b\u573a\u666f\u200b\u3002 std::shared_ptr&lt;void&gt;\u200b\u901a\u8fc7\u200b\u7c7b\u578b\u200b\u64e6\u9664\u200b\u673a\u5236\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u6301\u6709\u200b\u4efb\u610f\u200b\u7c7b\u578b\u200b\u7684\u200b\u6307\u9488\u200b\uff0c\u200b\u540c\u65f6\u200b\u5229\u7528\u200b\u5f15\u7528\u200b\u8ba1\u6570\u200b\u81ea\u52a8\u200b\u7ba1\u7406\u200b\u5185\u5b58\u200b\u751f\u547d\u5468\u671f\u200b\u3002</p> <p></p>C++<pre><code>std::shared_ptr&lt;void&gt; data = std::make_shared&lt;int&gt;(42); // \u200b\u5b58\u50a8\u200bint\u200b\u7c7b\u578b\u200b\ndata = std::make_shared&lt;std::string&gt;(\"Hello\"); // \u200b\u52a8\u6001\u200b\u66ff\u6362\u200b\u4e3a\u200bstring\u200b\u7c7b\u578b\u200b\n</code></pre> \u200b\u4f7f\u7528\u200b\u65f6\u9700\u200b\u901a\u8fc7\u200bstd::dynamic_pointer_cast\u200b\u6216\u200bstd::static_pointer_cast\u200b\u5c06\u200bvoid\u200b\u6307\u9488\u200b\u8f6c\u6362\u200b\u56de\u200b\u5177\u4f53\u200b\u7c7b\u578b\u200b\uff0c\u200b\u786e\u4fdd\u200b\u7c7b\u578b\u200b\u5b89\u5168\u200b\u3002<p></p> C++<pre><code>auto strPtr = std::static_pointer_cast&lt;std::string&gt;(data);\nif (strPtr) { /* \u200b\u5b89\u5168\u200b\u4f7f\u7528\u200b */ }\n</code></pre>"},{"location":"blog/c%E6%8A%80%E6%B3%95%E5%A6%82%E4%BD%95%E4%B8%BA%E4%B8%80%E4%B8%AA%E7%B1%BB%E5%8A%A8%E6%80%81%E9%99%84%E5%8A%A0%E4%BB%BB%E6%84%8F%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE/#\u4e00\u4e2a\u4f8b\u5b50\u770b\u8d85\u5b9e\u7528\u7684\u4f7f\u7528\u65b9\u6cd5","title":"\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b\u770b\u8d85\u200b\u5b9e\u7528\u200b\u7684\u200b\u4f7f\u7528\u200b\u65b9\u6cd5","text":"<p>\u200b\u8be6\u7ec6\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u53c2\u8003\u200b\u5f00\u6e90\u200b\u5730\u5740\u200bKenForever1/attachment_set, \u200b\u53ea\u200b\u9700\u8981\u200b100\u200b\u884c\u5934\u200b\u6587\u4ef6\u200b\u5b9e\u73b0\u200b\u3002</p> C++<pre><code>// \u200b\u5b9a\u4e49\u200b\u5bb9\u5668\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u662f\u200b\u4f60\u200b\u9700\u8981\u200b\u6269\u5c55\u200b\u7684\u200b\u7c7b\u200b\u7684\u200b\u6210\u5458\u200b\u53d8\u91cf\u200b\nAttachmentSet attachments;\n\n// \u200b\u5b58\u50a8\u200b\u9644\u4ef6\u200b\nattachments.set&lt;MyClass&gt;(\"obj\", std::make_shared&lt;MyClass&gt;());\nattachments.set&lt;int&gt;(\"value\", std::make_shared&lt;int&gt;(42));\n\n// \u200b\u83b7\u53d6\u200b\u9644\u4ef6\u200b\nif (auto ptr = attachments.get&lt;MyClass&gt;(\"obj\")) {\n    ptr-&gt;doSomething();\n}\n\n// \u200b\u7c7b\u578b\u200b\u68c0\u67e5\u200b\nif (attachments.is&lt;int&gt;(\"value\")) {\n    // \u200b\u5b89\u5168\u200b\u64cd\u4f5c\u200b...\n}\n\n// \u200b\u904d\u5386\u200b\u9644\u4ef6\u200b\nfor (auto it = attachments.begin(); it != attachments.end(); ++it) {\n    if (it.is&lt;MyClass&gt;()) {\n        auto obj = it.get&lt;MyClass&gt;();\n    }\n}\n</code></pre>"},{"location":"blog/c%E6%8A%80%E6%B3%95%E5%A6%82%E4%BD%95%E4%B8%BA%E4%B8%80%E4%B8%AA%E7%B1%BB%E5%8A%A8%E6%80%81%E9%99%84%E5%8A%A0%E4%BB%BB%E6%84%8F%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE/#\u6838\u5fc3\u65b9\u6cd5\u5b9e\u73b0","title":"\u6838\u5fc3\u200b\u65b9\u6cd5\u200b\u5b9e\u73b0","text":""},{"location":"blog/c%E6%8A%80%E6%B3%95%E5%A6%82%E4%BD%95%E4%B8%BA%E4%B8%80%E4%B8%AA%E7%B1%BB%E5%8A%A8%E6%80%81%E9%99%84%E5%8A%A0%E4%BB%BB%E6%84%8F%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE/#attachmentset\u7c7b\u5b9e\u73b0","title":"AttachmentSet\u200b\u7c7b\u200b\u5b9e\u73b0","text":"<p>\u200b\u5982\u679c\u200b\u628a\u200b\u6269\u5c55\u200b\u5b58\u50a8\u200b\u7684\u200b\u6570\u636e\u200b\u79f0\u4e3a\u200b\u9644\u4ef6\u200b\uff0c\u200b\u5982\u679c\u200b\u8981\u200b\u5b58\u50a8\u200b\u591a\u4e2a\u200b\u9644\u4ef6\u200b\uff0c\u200b\u80af\u5b9a\u200b\u8981\u200b\u7528\u200b\u5bb9\u5668\u200b\u53bb\u200b\u88c5\u200b\u3002\u200b\u8fd9\u91cc\u200b\u53ef\u4ee5\u200b\u7528\u200bvector\u200b\u5b58\u50a8\u200b\uff0c\u200b\u8fd8\u200b\u80fd\u200b\u5229\u7528\u200b\u4e0a\u200biterator\u200b\u8fed\u4ee3\u200b\u5668\u200b\u3002</p> <p>\u200b\u6700\u200b\u7b80\u5355\u200b\u7684\u200b\u5c31\u662f\u200bstd::vector&lt;std::shared_ptr&lt;void&gt;&gt;\u200b\u6210\u5458\u200b\u53d8\u91cf\u200b\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u5b58\u50a8\u200b\u4e3a\u200bany\uff0c\u200b\u901a\u8fc7\u200bany_cast\u200b\u8fdb\u884c\u200b\u8f6c\u6362\u200b\uff0c\u200b\u7528\u4e8e\u200b\u5b58\u50a8\u200b\u9644\u4ef6\u200b\u3002</p> <p>\u200b\u9664\u4e86\u200b\u5b58\u50a8\u200b\u6570\u636e\u200b\uff0c\u200b\u8fd8\u8981\u200b\u5b58\u50a8\u200b\u67e5\u627e\u200b\u7684\u200b\u7d22\u5f15\u200bKey\uff0c\u200b\u4ee5\u53ca\u200b\u7528\u4e8e\u200b\u5bf9\u6bd4\u200b\u7c7b\u578b\u200b\u7684\u200btypeid, \u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u662f\u200btypeid(T).hash_code()\u3002</p> C++<pre><code>class AttachmentSet {\n    struct TypeInfo {\n        // \u200b\u901a\u8fc7\u200btypeid(T).hash_code()\u200b\u5339\u914d\u200b\u548c\u6821\u9a8c\u200b\u7c7b\u578b\u200b\u662f\u5426\u200b\u6b63\u5e38\u200b\n        size_t type;\n        // \u200b\u7c7b\u578b\u8f6c\u6362\u200b\uff0c\u200b\u5728\u200b\u5b58\u50a8\u200b\u9644\u4ef6\u200b\u65f6\u200b\u7ed1\u5b9a\u200b\u8be5\u200b\u51fd\u6570\u200b\n        std::function&lt;std::shared_ptr&lt;void&gt;(const std::any&amp;)&gt; caster;\n    };\n\n    struct Attachment {\n        // \u200b\u9644\u4ef6\u200b\u540d\u79f0\u200b\n        std::string name;\n        // \u200b\u9644\u4ef6\u200b\u6570\u636e\u200b\n        std::any data;\n        // \u200b\u9644\u4ef6\u200b\u7c7b\u578b\u4fe1\u606f\u200b\n        TypeInfo type_info;\n    };\n\n    // \u200b\u5b58\u50a8\u200b\u9644\u4ef6\u200b\u5bb9\u5668\u200b\n    using Storage = std::vector&lt;Attachment&gt;;\n}\n</code></pre>"},{"location":"blog/c%E6%8A%80%E6%B3%95%E5%A6%82%E4%BD%95%E4%B8%BA%E4%B8%80%E4%B8%AA%E7%B1%BB%E5%8A%A8%E6%80%81%E9%99%84%E5%8A%A0%E4%BB%BB%E6%84%8F%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE/#set\u65b9\u6cd5\u5b9e\u73b0","title":"set\u200b\u65b9\u6cd5\u200b\u5b9e\u73b0","text":"C++<pre><code>template&lt;typename T&gt;\nvoid set(const std::string&amp; name, std::shared_ptr&lt;T&gt; data) {\n    TypeInfo type_info{\n        // \u200b\u7c7b\u578b\u4fe1\u606f\u200b\n        typeid(T).hash_code(),\n        // \u200b\u7c7b\u578b\u8f6c\u6362\u200b\u51fd\u6570\u200b\uff0c\u200b\u675c\u7edd\u200b\u9519\u8bef\u200b\u7c7b\u578b\u8f6c\u6362\u200b\uff0c\u200b\u907f\u514d\u200bstd::bad_any_cast\u200b\u5f02\u5e38\u200b\n        [](const std::any&amp; a) { return std::any_cast&lt;std::shared_ptr&lt;T&gt;&gt;(a); }\n    };\n\n    auto it = find(name);\n    if (it != storage_.end()) {\n        it-&gt;data = data;\n        it-&gt;type_info = type_info;\n    } else {\n        storage_.push_back({name, data, type_info});\n    }\n}\n</code></pre>"},{"location":"blog/c%E6%8A%80%E6%B3%95%E5%A6%82%E4%BD%95%E4%B8%BA%E4%B8%80%E4%B8%AA%E7%B1%BB%E5%8A%A8%E6%80%81%E9%99%84%E5%8A%A0%E4%BB%BB%E6%84%8F%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE/#get\u65b9\u6cd5\u5b9e\u73b0","title":"get\u200b\u65b9\u6cd5\u200b\u5b9e\u73b0","text":"C++<pre><code>// \u200b\u901a\u8fc7\u200bname \u200b\u67e5\u627e\u200b\nStorage::const_iterator find(const std::string&amp; name) const {\n    return std::find_if(storage_.begin(), storage_.end(),\n        [&amp;name](const auto&amp; a) { return a.name == name; });\n}\n\ntemplate&lt;typename T&gt;\nstd::shared_ptr&lt;T&gt; get(const std::string&amp; name) const {\n    auto it = find(name);\n    // \u200b\u627e\u200b\u4e0d\u5230\u200b\u6216\u8005\u200b\u7c7b\u578b\u200b\u4e0d\u200b\u5339\u914d\u200b\uff0c\u200b\u8fd4\u56de\u200bnullptr\n    if (it == storage_.end() || it-&gt;type_info.type != typeid(T).hash_code()) {\n        return nullptr;\n    }\n    // \u200b\u83b7\u53d6\u6570\u636e\u200b\n    return std::static_pointer_cast&lt;T&gt;(it-&gt;type_info.caster(it-&gt;data));\n}\n</code></pre>"},{"location":"blog/c%E6%8A%80%E6%B3%95%E5%A6%82%E4%BD%95%E4%B8%BA%E4%B8%80%E4%B8%AA%E7%B1%BB%E5%8A%A8%E6%80%81%E9%99%84%E5%8A%A0%E4%BB%BB%E6%84%8F%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE/#\u8fed\u4ee3\u5668\u5b9e\u73b0","title":"\u8fed\u4ee3\u200b\u5668\u200b\u5b9e\u73b0\u200b\ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350","text":"<p>\u200b\u501f\u52a9\u200bvector\uff0c\u200b\u5f88\u200b\u5bb9\u5668\u200b\u5b9e\u73b0\u200b\u8fed\u4ee3\u200b\u5668\u200b\uff0c\u200b\u5e76\u4e14\u200b\u5b9e\u73b0\u200b\u4e86\u200bname()\u3001is()\u3001get()\u200b\u65b9\u6cd5\u200b\u3002 </p>C++<pre><code>class Iterator {\n    Storage::const_iterator it_;\npublic:\n    explicit Iterator(Storage::const_iterator it) : it_(it) {}\n\n    const std::string&amp; name() const { return it_-&gt;name; }\n\n    template&lt;typename T&gt;\n    bool is() const { return it_-&gt;type_info.type == typeid(T).hash_code(); }\n\n    template&lt;typename T&gt;\n    std::shared_ptr&lt;T&gt; get() const {\n        if (!is&lt;T&gt;()) return nullptr;\n        // \u200b\u83b7\u53d6\u6570\u636e\u200b, \u200b\u4ece\u200bstd::any\u200b\u8f6c\u6362\u6210\u200bstd::shared_ptr&lt;T&gt;\n        return std::static_pointer_cast&lt;T&gt;(it_-&gt;type_info.caster(it_-&gt;data));\n    }\n\n    Iterator&amp; operator++() { ++it_; return *this; }\n    bool operator!=(const Iterator&amp; other) const { return it_ != other.it_; }\n};\n</code></pre><p></p> <ul> <li>C++\u200b\u6280\u6cd5\u200b:\u200b\u6a21\u677f\u200b\u5143\u200b\u7f16\u7a0b\u200b\u7f16\u8bd1\u200b\u671f\u200b\u83b7\u53d6\u200b\u7c7b\u200b\u6210\u5458\u200b\u6570\u91cf\u200b</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>C++\u200b\u6280\u6cd5\u200b\uff1aiguana\u200b\u5e8f\u5217\u5316\u200b\u5e93\u4e2d\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200benum reflection\u200b\u53cd\u5c04\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/c%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0fp16ieee754-2008%E7%B1%BB%E5%9E%8B/","title":"C++\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bFP16\uff08IEEE754-2008\uff09\u200b\u7c7b\u578b\u200b\uff1f","text":"<p>\u200b\u8ba1\u7b97\u673a\u200b\u5728\u200b\u8fdb\u884c\u200b\u6570\u503c\u200b\u8ba1\u7b97\u200b\u65f6\u200b\uff0c\u200b\u9996\u5148\u200b\u9700\u8981\u200b\u5bf9\u200b\u6570\u636e\u200b\u8fdb\u884c\u200b\u8868\u793a\u200b\uff0c\u200b\u6bd4\u5982\u200bF32\u3001F16\u3001F64\u3001int32\u3001int16\u3001int8\u200b\u7b49\u7b49\u200b\u3002\u200b\u7279\u522b\u200b\u5728\u200b\u6df1\u5ea6\u200b\u5b66\u4e60\u200b\u4e2d\u200b\uff0c\u200b\u5982\u679c\u200b\u6a21\u578b\u200b\u7684\u200b\u53c2\u6570\u200b\u662f\u200bF32\u200b\u7c7b\u578b\u200b\uff0c\u200b\u90a3\u4e48\u200b\u8ba1\u7b97\u200b\u8017\u65f6\u200b\u4e14\u200b\u4fdd\u5b58\u200b\u7684\u200b\u53c2\u6570\u200b\u5360\u7528\u200b\u5185\u5b58\u200b\u5927\u200b\u3002</p> <p>\u200b\u4e3a\u4e86\u200b\u51c6\u786e\u7387\u200b\u540c\u65f6\u200b\u4fdd\u8bc1\u200b\u8ba1\u7b97\u200b\u7684\u200b\u901f\u5ea6\u200b\uff0c\u200b\u4e00\u822c\u200b\u9700\u8981\u200b\u628a\u200b\u6a21\u578b\u200b\u8f6c\u6362\u6210\u200bF16\u200b\u7c7b\u578b\u200b\u3002F16\u200b\u5373\u200b\u662f\u200b\u901a\u8fc7\u200b16\u200b\u4e2a\u200bbit\uff08\u200b\u4f4d\u200b\uff09\u200b\u8868\u793a\u200b\u6d6e\u70b9\u6570\u200b\u7c7b\u578b\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u4e00\u8d77\u200b\u770b\u200b\u4e00\u4e0b\u200b\uff1a</p> <ul> <li>IEEE754-2008\u200b\u5982\u4f55\u200b\u5b9a\u4e49\u200bFloat32\u200b\u548c\u200bFloat16\u200b\u7684\u200b\uff1f</li> <li>float32\u200b\u548c\u200bfloat16\u200b\u5982\u4f55\u200b\u8f6c\u6362\u200b\uff1f\u200b\u5728\u200bC++23\u200b\u7248\u672c\u200b\u4ee5\u4e0b\u200b\u6807\u51c6\u200b\u5e93\u662f\u200b\u6ca1\u6709\u200bf16\u200b\u7c7b\u578b\u200b\u7684\u200b\u3002</li> <li>Float16\u200b\u4e0d\u7528\u200b\u8f6c\u6362\u6210\u200bfloat32\u200b\u6bd4\u8f83\u200b\uff0c\u200b\u5982\u4f55\u200b\u76f4\u63a5\u200b\u6bd4\u8f83\u200b\u5927\u5c0f\u200b\uff1f</li> </ul>"},{"location":"blog/c%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0fp16ieee754-2008%E7%B1%BB%E5%9E%8B/#f16\u662f\u5982\u4f55\u8868\u793a\u7684","title":"F16\u200b\u662f\u200b\u5982\u4f55\u200b\u8868\u793a\u200b\u7684\u200b\uff1f","text":""},{"location":"blog/c%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0fp16ieee754-2008%E7%B1%BB%E5%9E%8B/#f32\u7c7b\u578b\u548cf16\u7c7b\u578b\u5bf9\u6bd4","title":"F32\u200b\u7c7b\u578b\u200b\u548c\u200bF16\u200b\u7c7b\u578b\u200b\u5bf9\u6bd4","text":"<p>float16\u200b\u662f\u200b\u6307\u200b\u91c7\u7528\u200b2\u200b\u5b57\u8282\u200b(16\u200b\u4f4d\u200b)\u200b\u8fdb\u884c\u200b\u7f16\u7801\u200b\u5b58\u50a8\u200b\u7684\u200b\u4e00\u79cd\u200b\u6570\u636e\u7c7b\u578b\u200b\uff1b\u200b\u540c\u7406\u200bfloat32\u200b\u662f\u200b\u6307\u200b\u91c7\u7528\u200b4\u200b\u5b57\u8282\u200b(32\u200b\u4f4d\u200b)\u200b\u5b58\u50a8\u200b\u7684\u200b\u6570\u636e\u7c7b\u578b\u200b\u3002FP16\uff08float16\uff09\u200b\u6309\u7167\u200bIEEE754-2008\u200b\u7684\u200b\u6807\u51c6\u200b\u8868\u793a\u200b\u3002</p> <p></p> <p></p> <p>\u200b\u4f7f\u7528\u200bfloat16\u200b\u4ee3\u66ff\u200bfloat32\u200b\u6709\u200b\u5982\u4e0b\u200b\u4f18\u70b9\u200b\uff1a\u200b\u5185\u5b58\u200b\u5360\u7528\u200b\u51cf\u5c11\u200b\uff0c\u200b\u5e94\u7528\u200bfloat16\u200b\u5185\u5b58\u200b\u5360\u7528\u200b\u6bd4\u200bfloat32\u200b\u66f4\u200b\u5c0f\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u8bbe\u7f6e\u200b\u66f4\u5927\u200b\u7684\u200bbatch_size\u3002 \u200b\u540c\u65f6\u200b\uff0c\u200b\u52a0\u901f\u200b\u8ba1\u7b97\u200b\u200b\u3002</p> <p>\u200b\u4e3a\u4e86\u200b\u5b9e\u73b0\u200b\u66f4\u200b\u9ad8\u200b\u7684\u200b\u7cbe\u5ea6\u200b\uff0c\u200b\u5c3e\u6570\u200b\u4f4d\u200b\u53ea\u6709\u200b23\u200b\u4f4d\u200b\uff0c\u200b\u4f46\u662f\u200b\u6709\u4e2a\u200b\u9690\u5f0f\u200b\u7684\u200b1\uff08\u200b\u5f53\u200bExponent\u200b\u4e0d\u200b\u5168\u90e8\u200b\u4e3a\u200b0\u200b\u65f6\u200b\uff09\uff0c\u200b\u591a\u200b\u4e86\u200b\u4e00\u4f4d\u200b\u8868\u793a\u200b\uff0c\u200b\u6240\u4ee5\u200b\u6709\u200b24\u200b\u4f4d\u200b\u8868\u793a\u200b\u3002\u200b\u5728\u200b\u8ba1\u7b97\u200b\u65f6\u200b\u5c31\u662f\u200b1.fraction\u3002\u200b\u5373\u200b1 + fraction\u200b\u8868\u793a\u200b\u7684\u200b\u5c3e\u6570\u200b\u3002</p> <ul> <li>Significand precision: 24 bits (23 explicitly stored)\u3002</li> </ul> <p>\u200b\u5f53\u7136\u200b\uff0c\u200b\u5728\u200bF16\u200b\u4e2d\u200b\u540c\u6837\u200b\uff1a</p> <ul> <li>Significand precision: 11 bits (10 explicitly stored)\u3002</li> </ul>"},{"location":"blog/c%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0fp16ieee754-2008%E7%B1%BB%E5%9E%8B/#\u8fd8\u6709\u4e00\u4e2a\u662fbf16\u7c7b\u578b","title":"\u8fd8\u6709\u200b\u4e00\u4e2a\u200b\u662f\u200bBF16\u200b\u7c7b\u578b","text":"<p>\u200b\u4ece\u200b\u8868\u793a\u200b\u4e0a\u200b\u770b\u200b, BF16\u200b\u7c7b\u578b\u200b\u5c31\u662f\u200b\u628a\u200bF32\u200b\u7c7b\u578b\u200b\u7684\u200b\u5c0f\u6570\u200b\u90e8\u5206\u200b(Fraction)\u200b\u4ece\u200b23bit\u200b\u4f4d\u200b\u622a\u53d6\u200b\u6210\u200b\u4e86\u200b7bit\u200b\u4f4d\u200b\u3002</p> <ul> <li> <p>bfloat16 \u200b\u7684\u200b\u6307\u6570\u200b\u4f4d\u6bd4\u200b float16 \u200b\u591a\u200b\uff0c\u200b\u8fd9\u200b\u4f7f\u5f97\u200b\u5b83\u200b\u5728\u200b\u52a8\u6001\u200b\u8303\u56f4\u200b\u4e0a\u200b\u4e0e\u200b\u5355\u7cbe\u5ea6\u200b\u6d6e\u70b9\u6570\u200b\uff08float32\uff09\u200b\u66f4\u4e3a\u200b\u63a5\u8fd1\u200b\u3002\u200b\u7531\u4e8e\u200b\u5c3e\u6570\u200b\u4f4d\u8f83\u200b\u5c11\u200b\uff0cbfloat16 \u200b\u7684\u200b\u7cbe\u5ea6\u200b\u76f8\u5bf9\u200b\u8f83\u200b\u4f4e\u200b\u3002</p> </li> <li> <p>bfloat16 \u200b\u66f4\u200b\u9002\u5408\u200b\u8bad\u7ec3\u200b\u8fc7\u7a0b\u200b\uff0c\u200b\u5c24\u5176\u200b\u662f\u200b\u5728\u200b\u9700\u8981\u200b\u8f83\u5927\u200b\u7684\u200b\u52a8\u6001\u200b\u8303\u56f4\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u3002float16 \u200b\u66f4\u200b\u9002\u5408\u200b\u63a8\u7406\u200b\u8fc7\u7a0b\u200b\uff0c\u200b\u5c24\u5176\u200b\u662f\u200b\u5728\u200b\u9700\u8981\u200b\u8f83\u200b\u9ad8\u7cbe\u5ea6\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u3002</p> </li> <li> <p>\u200b\u901a\u8fc7\u200bnumpy\u200b\u5f97\u5230\u200b\u7684\u200b16\u200b\u4f4d\u200b\u6d6e\u70b9\u6570\u200b\uff0c\u200b\u662f\u200bFP16\uff0c\u200b\u4e0d\u662f\u200bBF16\u3002</p> </li> </ul>"},{"location":"blog/c%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0fp16ieee754-2008%E7%B1%BB%E5%9E%8B/#c\u5982\u4f55\u5b9e\u73b0f16\u7c7b\u578b","title":"C++\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bF16\u200b\u7c7b\u578b\u200b\uff1f","text":""},{"location":"blog/c%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0fp16ieee754-2008%E7%B1%BB%E5%9E%8B/#f16\u548cf32\u4e92\u76f8\u8f6c\u6362","title":"F16\u200b\u548c\u200bF32\u200b\u4e92\u76f8\u200b\u8f6c\u6362","text":"<p>F16\u200b\u662f\u200b\u7528\u200b16bit\u200b\u53bb\u200b\u8868\u793a\u200b\u4e86\u200b\u7b26\u53f7\u200b\u4f4d\u200b\u3001\u200b\u6307\u6570\u200b\u3001\u200b\u5c3e\u6570\u200b\u3002F32\u200b\u662f\u200b\u7528\u200b\u7684\u200b32bit\uff0c\u200b\u540c\u6837\u200b\u8868\u793a\u200b\u7684\u200b\u7b26\u53f7\u200b\u4f4d\u200b\u3001\u200b\u6307\u6570\u200b\u3001\u200b\u5c3e\u6570\u200b\u3002</p> <p>\u200b\u90a3\u4e48\u200b\u8981\u200b\u5b9e\u73b0\u200bF16\u200b\u5230\u200bF32\u200b\u7684\u200b\u8f6c\u6362\u200b\uff0c\u200b\u53ea\u8981\u200b\u5efa\u7acb\u200b\u4e86\u200b\u5bf9\u5e94\u200b\u7684\u200b\u6620\u5c04\u200b\u5173\u7cfb\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u4e86\u200b\u3002\u200b\u6bd4\u5982\u200b\u628a\u200bF16\u200b\u7684\u200b\u7b26\u53f7\u200b\u4f4d\u200b\u8f6c\u6362\u200b\u5230\u200bF32\uff0c\u200b\u90a3\u4e48\u200b\u5c31\u662f\u200b\u5411\u200b\u5de6\u200b\u79fb\u52a8\u200b16\u200b\u4f4d\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u4e86\u200b\u3002</p> <p>\u200b\u7136\u540e\u200b\u6307\u6570\u200b\u548c\u200b\u5c3e\u6570\u200b\uff0c\u200b\u8fd8\u8981\u200b\u591a\u200b\u8003\u8651\u200b\u4e00\u200b\u4e22\u200b\u4e22\u513f\u200b\uff01</p> <p>\u200b\u5c31\u662f\u200b\u4e0b\u9762\u200b\u8fd9\u200b\u4e24\u5f20\u200b\u8868\u200b\uff0cF16\u200b\u4ec0\u4e48\u200b\u6761\u4ef6\u200b\u4e0b\u200b\u8868\u793a\u200bNaN\uff0c\u200b\u4ec0\u4e48\u200b\u6761\u4ef6\u200b\u4e0b\u200b\u8868\u793a\u200b\u65e0\u7a77\u5927\u200b\u3002\u200b\u5efa\u7acb\u200b\u8d77\u200b\u548c\u200bF32\u200b\u7684\u200b\u6620\u5c04\u200b\u5173\u7cfb\u200b\u3002\u200b\u5b8c\u6210\u200b\u8f6c\u6362\u200b\u4ee3\u7801\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u4e86\u200b\u3002</p> <p>F16\u200b\u7684\u200b\u683c\u5f0f\u200b\u548c\u200b\u5bf9\u5e94\u200b\u503c\u200b\u7684\u200b\u5173\u7cfb\u200b\uff1a</p> <p></p> <p>F32\u200b\u7684\u200b\u683c\u5f0f\u200b\u548c\u200b\u5bf9\u5e94\u200b\u503c\u200b\u7684\u200b\u5173\u7cfb\u200b\uff1a</p> <p> \u200b\u53c2\u8003\u200b\uff1a</p> <ul> <li> <p>f16\u200b\u7684\u200b\u683c\u5f0f\u200b\u5b9a\u4e49\u200b\uff1awiki/Half-precision_floating-point_format</p> </li> <li> <p>f32\u200b\u7684\u200b\u683c\u5f0f\u200b\u5b9a\u4e49\u200b\uff1awiki/Single-precision_floating-point_format</p> </li> </ul>"},{"location":"blog/c%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0fp16ieee754-2008%E7%B1%BB%E5%9E%8B/#fallback\u7684\u5b9e\u73b0","title":"Fallback\u200b\u7684\u200b\u5b9e\u73b0","text":"<p>F16\u200b\u548c\u200bF32\u200b\u8f6c\u6362\u200b\u5b58\u5728\u200b\u9ad8\u6548\u200b\u7684\u200b\u786c\u4ef6\u200b\u6307\u4ee4\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u4ecb\u7ecd\u200bFallback\u200b\u7684\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u5f53\u200b\u786c\u4ef6\u200b\u4e0d\u200b\u652f\u6301\u200b\u65f6\u200b\uff0c\u200b\u91c7\u7528\u200b\u8fd9\u79cd\u200b\u6700\u200b\u901a\u7528\u200b\u7684\u200b\u5f62\u5f0f\u200b\u8fdb\u884c\u200b\u8f6c\u6362\u200b\u3002\u200b\u5728\u200bc++\u200b\u4e2d\u200b\uff0c\u200b\u91c7\u7528\u200buint16_t\u200b\u7c7b\u578b\u200b\u53bb\u200b\u4fdd\u5b58\u200bfloat16\u200b\u7684\u200b\u4e8c\u8fdb\u5236\u200b\u5185\u5bb9\u200b\u3002 \u200b\u5728\u200bc++\u200b\u4e2d\u200b\uff0c\u200b\u91c7\u7528\u200buint16_t\u200b\u7c7b\u578b\u200b\u53bb\u200b\u4fdd\u5b58\u200bfloat16\u200b\u7684\u200b\u4e8c\u8fdb\u5236\u200b\u5185\u5bb9\u200b\u3002</p> <p>F16\u200b\u8f6c\u6362\u6210\u200bF32\uff0c\u200b\u8ddf\u7740\u200b\u4ee3\u7801\u200b\u4e2d\u200b\u7684\u200b\u6bcf\u200b\u4e00\u884c\u200b\u89e3\u91ca\u200b\u7ed3\u5408\u200b\u4e0a\u9762\u200b\u7684\u200b\u683c\u5f0f\u200b\u5b9a\u4e49\u200b\u56fe\u793a\u200b\uff0c\u200b\u662f\u4e0d\u662f\u200b\u5f88\u200b\u6e05\u695a\u200b\u4e86\u200b\u3002 </p>C++<pre><code>// f16\u200b\u7684\u200b\u683c\u5f0f\u200b\u5b9a\u4e49\u200b\uff1ahttps://en.wikipedia.org/wiki/Half-precision_floating-point_format\n// f32\u200b\u7684\u200b\u683c\u5f0f\u200b\u5b9a\u4e49\u200b\uff1ahttps://en.wikipedia.org/wiki/Single-precision_floating-point_format\n// Fraction\u200b\u548c\u200bman\u3001Significand\u3001mantissa \u200b\u6307\u200b\u7684\u200b\u540c\u4e00\u4e2a\u200b\u4e1c\u897f\u200b\uff0c\u200b\u90fd\u200b\u662f\u200b\u5c3e\u6570\u200b\u4f4d\u200b\uff0cF16\u200b\u7684\u200b\u6700\u540e\u200b10\u200b\u4f4d\u200b\uff0cF32\u200b\u7684\u200b\u6700\u540e\u200b23\u200b\u4f4d\u200b\u3002\nstatic float f16_to_f32_fallback(uint16_t i)\n{\n    // Check for signed zero, \u200b\u6839\u636e\u200bF16\u200b\u7684\u200b\u8868\u793a\u200b\u89c4\u5219\u200b\uff0c\u200b\u5982\u679c\u200bExponent(5\u200b\u4f4d\u200b)\u200b\u548c\u200bSignificand(10\u200b\u4f4d\u200b)\u200b\u90fd\u200b\u4e3a\u200b0\uff0c\u200b\u90a3\u4e48\u200b\u8868\u793a\u200b\u6d6e\u70b9\u6570\u200bzero, -0\n    // \u200b\u8f6c\u6362\u6210\u200bf32\u200b\u53ea\u200b\u9700\u8981\u200b\u5411\u200b\u53f3\u79fb\u200b16\u200b\u4f4d\u200b\u6784\u6210\u200b32\u200b\u4f4d\u200b\u8868\u793a\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u4e86\u200b\uff0c\u200b\u5373\u200b\u7b26\u53f7\u200b\u4f4d\u200b+31\u200b\u4f4d\u200b0\n    if ((i &amp; 0x7FFF) == 0)\n    {\n        uint32_t result = (static_cast&lt;uint32_t&gt;(i) &lt;&lt; 16);\n        float f = 0.0;\n        std::memset(&amp;f, 0, sizeof(f));\n        std::memcpy(&amp;f, &amp;result, sizeof(result));\n        return f;\n    }\n\n    // \u200b\u6839\u636e\u200bf16\u200b\u7684\u200bIEEE754-2008\u200b\u6807\u51c6\u200b\uff0c\u200b\u83b7\u53d6\u200bsign\uff0cExponent\uff0cSignificand\u200b\u7684\u200b\u503c\u200b\n    uint32_t half_sign = (i &amp; 0x8000);\n    uint32_t half_exp = (i &amp; 0x7C00);\n    uint32_t half_man = (i &amp; 0x03FF);\n\n    // Check for an infinity or NaN when all exponent bits set\n    // \u200b\u5982\u679c\u200bExponent\uff085\u200b\u4f4d\u200b\uff09\u200b\u5bf9\u5e94\u200b\u7684\u200bbit\u200b\u4f4d\u5168\u200b\u662f\u200b1\uff0c\u200b\u5373\u200b11111\uff0c\u200b\u90a3\u4e48\u200b\u53ef\u80fd\u200b\u662f\u200binfinity or NaN \n    if (half_exp == 0x7C00)\n    {\n        // \u200b\u5982\u679c\u200bSignificand\uff0810\u200b\u4f4d\u200b\uff09\u200b\u662f\u200b0\uff0c\u200b\u5c31\u200b\u8868\u793a\u200b+-infinity\uff08\u200b\u65e0\u7a77\u200b\uff09\n        // Check for signed infinity if mantissa is zero\n        if (half_man == 0)\n        {\n            // \u200b\u8f6c\u6362\u200b\u4f4d\u200bfloat32\u200b\u5c31\u662f\u200b\uff0c\u200b\u7b26\u53f7\u200b\u4f4d\u200b + float32\u200b\u7684\u200b+-infinity\u200b\u8868\u793a\u200b\n            // \u200b\u5373\u200b\u7b26\u53f7\u200b\u4f4d\u200b\uff1a\uff08half_sign &lt;&lt; 16\uff09\n            // float32\u200b\u7684\u200b+-infinity\u200b\u8868\u793a\u200b\uff1a Exponent\uff08\u200b\u5360\u7528\u200b8bit\uff09\u200b\u5168\u4e3a\u200b1\uff0cfraction\uff0823bit\uff09\u200b\u5168\u4e3a\u200b0\uff0c\u200b\u5373\u200b0x7F800000\n            uint32_t result = (half_sign &lt;&lt; 16) | 0x7F800000;\n            float f = 0.0;\n            std::memset(&amp;f, 0, sizeof(f));\n            std::memcpy(&amp;f, &amp;result, sizeof(result));\n            return f;\n        }\n        else\n        {\n            // \u200b\u5982\u679c\u200bSignificand\uff0810\u200b\u4f4d\u200b\uff09\u200b\u4e0d\u662f\u200b0\uff0c \u200b\u5c31\u200b\u8868\u793a\u200bNaN\n            // \u200b\u8f6c\u6362\u200b\u4e3a\u200b\u5bf9\u5e94\u200bFloat32\u200b\u7684\u200bNaN\uff0c\u200b\u5373\u200bExponent\uff08\u200b\u5360\u7528\u200b8bit\uff09\u200b\u5168\u4e3a\u200b1\uff1bfraction\uff0823bit\uff09\u200b\u4e3a\u200bhalf_man\u200b\u53f3\u200b\u79fb\u52a8\u200b13\u200b\u4f4d\u200b\uff08f32\u200b\u7684\u200bfraction\u200b\u8868\u793a\u200b\u4f4d\u6570\u200b\u51cf\u53bb\u200bf16\u200b\u7684\u200bfraction\u200b\u8868\u793a\u200b\u7684\u200b\u4f4d\u6570\u200b\uff0c\u200b\u5373\u200b23 - 10\u200b\u7b49\u4e8e\u200b13\uff09\n            // NaN, keep current mantissa but also set most significiant mantissa bit\n            // \u200b\u4e3a\u5565\u200b\u4e0d\u662f\u200b 0x7F800000??? \n            uint32_t result = (half_sign &lt;&lt; 16) | 0x7FC00000 | (half_man &lt;&lt; 13);\n            float f = 0.0;\n            std::memset(&amp;f, 0, sizeof(f));\n            std::memcpy(&amp;f, &amp;result, sizeof(result));\n            return f;\n        }\n    }\n\n    // Calculate single-precision components with adjusted exponent\n    // \u200b\u8f6c\u6362\u200b\u4e3a\u200bf32\u200b\u7684\u200b\u7b26\u53f7\u200b\u4f4d\u200b\uff0c\u200b\u53f3\u200b\u79fb\u52a8\u200b16\u200b\u4f4d\u200b\n    uint32_t sign = half_sign &lt;&lt; 16;\n    // Unbias exponent\n    // \u200b\u56e0\u4e3a\u200bF16\u200b\u7684\u200bExponent\u200b\u7684\u200b\u8868\u793a\u200b\u7684\u200b\u4e0d\u662f\u200be\u200b\u4e3a\u5e95\u200b\uff0cExponent\u200b\u4e3a\u200b\u6307\u6570\u200b\u7684\u200b\u6307\u6570\u51fd\u6570\u200b\uff0c\u200b\u800c\u662f\u200b\u6307\u6570\u200b\u4e3a\u200bExponent-15\uff0c\u200b\u504f\u79fb\u91cf\u200b\u4e3a\u200b15\n    // \u200b\u5bf9\u5e94\u200bF32\u200b\u7684\u200b\u504f\u79fb\u91cf\u200b\u4e3a\u200b127\uff0c\u200b\u6240\u4ee5\u200b\u6362\u6210\u200bF32\u200b\u7684\u200bExponent\u200b\u5c31\u8981\u200bE - 15 + 127\u200b\u8868\u793a\u200b\n    int32_t unbiased_exp = (static_cast&lt;int32_t&gt;(half_exp) &gt;&gt; 10) - 15;\n\n    // \u200b\u901a\u8fc7\u200b\u524d\u9762\u200b\u7684\u200b\u6761\u4ef6\u200b\u8fc7\u6ee4\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u8868\u793a\u200bExponent\u200b\u5168\u4e3a\u200b0\uff0cSignificand\u200b\u4e0d\u5168\u200b\u4e3a\u200b0\uff0c\u200b\u8868\u793a\u200bsubnormal number\n    // Check for subnormals, which will be normalized by adjusting exponent\n    if (half_exp == 0)\n    {\n        // Calculate how much to adjust the exponent by\n        int e = countl_zero(half_man) - 6;\n\n        // Rebias and adjust exponent\n        uint32_t exp = (127 - 15 - e) &lt;&lt; 23;\n        uint32_t man = (half_man &lt;&lt; (14 + e)) &amp; 0x7FFFFF;\n        uint32_t result = sign | exp | man;\n        float f = 0.0;\n        std::memset(&amp;f, 0, sizeof(f));\n        std::memcpy(&amp;f, &amp;result, sizeof(result));\n        return f;\n    }\n\n    // Rebias exponent for a normalized normal\n    // \u200b\u8fd9\u91cc\u200b\u7684\u200b\u52a0\u200b127\uff0c\u200b\u5bf9\u5e94\u200b\u4e0a\u9762\u200b\u8bf4\u200b\u7684\u200bF16\u200b\u8f6c\u200bF32\u200b\u65f6\u200bExponent\u200b\u8981\u200b\u52a0\u4e0a\u200bF32\u200b\u7684\u200bExponent\u200b\u504f\u79fb\u91cf\u200b127\uff1b\u200b\u5411\u200b\u53f3\u200b\u79fb\u52a8\u200b23\u200b\u4f4d\u200b\u5230\u8fbe\u200b\u8868\u793a\u200bExponent\u200b\u5bf9\u5e94\u200b\u7684\u200bbit\u200b\u4f4d\u7f6e\u200b\n    uint32_t exp = (static_cast&lt;uint32_t&gt;(unbiased_exp + 127)) &lt;&lt; 23;\n    // \u200b\u5411\u200b\u53f3\u200b\u79fb\u52a8\u200b13\u200b\u4f4d\u200b\uff0cSignificand\u200b\u503c\u200b\u7531\u200bF16\u200b\u7684\u200b10\u200b\u4f4d\u200b\u8868\u793a\u200b\u8f6c\u6362\u6210\u200b23\u200b\u4f4d\u200b\u8868\u793a\u200b\n    uint32_t man = (half_man &amp; 0x03FF) &lt;&lt; 13;\n    uint32_t result = sign | exp | man;\n    float f = 0.0;\n    std::memset(&amp;f, 0, sizeof(f));\n    std::memcpy(&amp;f, &amp;result, sizeof(result));\n    return f;\n}\n</code></pre> F32\u200b\u5982\u4f55\u200b\u8f6c\u6362\u6210\u200bF16\u200b\u5462\u200b\uff1f\u200b\u5b9e\u73b0\u200b\u5982\u4e0b\u200b<p></p> C++<pre><code>// Fraction\u200b\u548c\u200bman\u3001Significand\u3001mantissa \u200b\u6307\u200b\u7684\u200b\u540c\u4e00\u4e2a\u200b\u4e1c\u897f\u200b\uff0c\u200b\u90fd\u200b\u662f\u200b\u5c3e\u6570\u200b\u4f4d\u200b\uff0cF16\u200b\u7684\u200b\u6700\u540e\u200b10\u200b\u4f4d\u200b\uff0cF32\u200b\u7684\u200b\u6700\u540e\u200b23\u200b\u4f4d\u200b\u3002\n// In the below functions, round to nearest, with ties to even.\n// Let us call the most significant bit that will be shifted out the round_bit.\n//\n// Round up if either\n//  a) Removed part &gt; tie.\n//     (mantissa &amp; round_bit) != 0 &amp;&amp; (mantissa &amp; (round_bit - 1)) != 0\n//  b) Removed part == tie, and retained part is odd. F32\u200b\u7684\u200bFraction\u200b\u53f3\u200b\u79fb\u52a8\u200b13\u200b\u4f4d\u540e\u200b\uff0c\u200b\u5269\u4e0b\u200b\u90e8\u5206\u200b\u662f\u200b\u5947\u6570\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u8fdb\u4f4d\u200b\n//     (mantissa &amp; round_bit) != 0 &amp;&amp; (mantissa &amp; (2 * round_bit)) != 0\n// F32\u200b\u7684\u200bFraction\u200b\u53f3\u200b\u79fb\u52a8\u200b13\u200b\u4f4d\u540e\u200b\uff0c\u200b\u5269\u4e0b\u200b\u90e8\u5206\u200b\u662f\u200b\u5947\u6570\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u8fdb\u4f4d\u200b\n// (If removed part == tie and retained part is even, do not round up.)\n// These two conditions can be combined into one:\n//     (mantissa &amp; round_bit) != 0 &amp;&amp; (mantissa &amp; ((round_bit - 1) | (2 * round_bit))) != 0\n// which can be simplified into\n//     (mantissa &amp; round_bit) != 0 &amp;&amp; (mantissa &amp; (3 * round_bit - 1)) != 0\nstatic uint16_t f32_to_f16_fallback(float value)\n{\n    // Convert to raw bytes\n    uint32_t x;\n    std::memset(&amp;x, 0, sizeof(uint32_t));\n    std::memcpy(&amp;x, &amp;value, sizeof x);\n\n    // Extract IEEE754 components\n    uint32_t sign = x &amp; 0x80000000u;\n    uint32_t exp = x &amp; 0x7F800000u;\n    uint32_t man = x &amp; 0x007FFFFFu;\n\n    // Check for all exponent bits being set, which is Infinity or NaN\n    // Exponent\u200b\u5168\u4e3a\u200b1\uff0c\u200b\u8868\u793a\u200bInfinity or NaN\n    if (exp == 0x7F800000u)\n    {\n        uint32_t nan_bit = (man == 0) ? 0 : 0x0200u;\n        // 0x7C00u \u200b\u8868\u793a\u200bF16\u200b\u7684\u200bExponent\u200b\u5168\u4e3a\u200b1\n        // nan_bit\uff1a\u200b\u5982\u679c\u200bman==0\uff0c\u200b\u8868\u793a\u200b+-infinity\uff0c\u200b\u6240\u4ee5\u200b\u76f4\u63a5\u200b\u628a\u200b(man &gt;&gt; 13)\u200b\u5c31\u200b\u53d8\u6210\u200b\u4e86\u200bF16\u200b\u7684\u200bman\n        // \u200b\u5982\u679c\u200bman != 0, \u200b\u628a\u200b\uff08man &gt;&gt; 13\uff09\u200b\u53ef\u80fd\u200b\u53d8\u6210\u200b\u4e86\u200b0\uff0c\u200b\u6240\u4ee5\u200b\u52a0\u4e0a\u200b\u4e00\u4e2a\u200bnan_bit\uff0c\u200b\u786e\u4fdd\u200b\u8f6c\u6362\u6210\u200b\u7684\u200bF16\uff01=0\n        return (sign &gt;&gt; 16) | 0x7C00u | nan_bit | (man &gt;&gt; 13);\n    }\n\n    // \u200b\u53f3\u79fb\u200b16bit\u200b\u8f6c\u6362\u6210\u200bF16\u200b\u7684\u200bsign\n    uint32_t half_sign = sign &gt;&gt; 16;\n    // 127\u200b\u662f\u200bF32\u200b\u7684\u200bExponent\u200b\u7684\u200b\u504f\u79fb\u200b\n    // \u200b\u4ece\u200bF32\u200b\u7684\u200bExponent\u200b\u8f6c\u6362\u6210\u200bF16\uff0c\u200b\u5c31\u200b\u9700\u8981\u200bexp\u200b\u7684\u200b\u503c\u200b - 127 + 15, 15\u200b\u662f\u200bF16\u200b\u7684\u200b\u504f\u79fb\u200b\n    int32_t unbiased_exp = ((exp &gt;&gt; 23) - 127);\n    int32_t half_exp = unbiased_exp + 15;\n\n    // \u200b\u8868\u793a\u200bhalf_exp\u200b\u8d85\u8fc7\u200bF16\u200b\u7684\u200bExponent\u200b\u6700\u5927\u200b\u8868\u793a\u200b\uff0c11111\n    // Check for exponent overflow, return +infinity\n    // \u200b\u8868\u793a\u200binfinity\n    if (half_exp &gt;= 0x1F)\n    {\n        // 0x7C00u\u200b\u8868\u793a\u200b\uff0cF16\u200b\u8868\u793a\u200b\u7684\u200bbit\u200b\u4f4d\u200b\uff0cFraction\u200b\u5168\u90e8\u200b\u4e3a\u200b0, Exponent\u200b\u5168\u90e8\u200b\u4e3a\u200b1\n        return half_sign | 0x7C00u;\n    }\n\n    // Check for underflow\n    if (half_exp &lt;= 0)\n    {\n        // Check mantissa for what we can do\n        if ((14 - half_exp) &gt; 24)\n        {\n            // No rounding possibility, so this is a full underflow, return signed zero\n            return half_sign;\n        }\n        man = man | 0x00800000u;\n        uint32_t half_man = man &gt;&gt; (14 - half_exp);\n        uint32_t round_bit = 1 &lt;&lt; (13 - half_exp);\n        if ((man &amp; round_bit) != 0 &amp;&amp; (man &amp; (3 * round_bit - 1)) != 0)\n        {\n            half_man++;\n        }\n        return half_sign | half_man;\n    }\n    // Rebias the exponent, \u200b\u5de6\u79fb\u200b10\u200b\u4f4d\u5230\u200bF16\u200b\u7684\u200bExponent\u200b\u8868\u793a\u200b\u4f4d\u7f6e\u200b\n    half_exp = (half_exp &lt;&lt; 10);\n    // \u200b\u53f3\u200b\u79fb\u52a8\u200b13\u200b\u4f4d\u200b\uff0c\u200b\u5230\u200bF16\u200b\u7684\u200bSignificand\u200b\u8868\u793a\u200b\u4f4d\u7f6e\u200b\n    uint32_t half_man = man &gt;&gt; 13;\n    // round_bit\u200b\u8868\u793a\u200bF32\u200b\u7684\u200bFraction\u200b\u4e2d\u200b\u7684\u200b\u4ece\u200b\u53f3\u200b\u5f80\u200b\u5de6\u200b\u7684\u200b\u7b2c\u200b13\u200b\u4f4d\u200b\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200b\u8f6c\u6362\u6210\u200bF16\uff0810\u200b\u4f4d\u200b\uff09\u200b\u65f6\u8981\u200b\u79fb\u9664\u200b\u7684\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u4f4d\u7f6e\u200b\u3002\n    uint32_t round_bit = 0x00001000u;\n    // Check for rounding (see comment above functions)\n    if ((man &amp; round_bit) != 0 &amp;&amp; (man &amp; (3 * round_bit - 1)) != 0)\n    {\n        // Round it\n        return (half_sign | half_exp | half_man) + (uint32_t)1;\n    }\n    else\n    {\n        return half_sign | half_exp | half_man;\n    }\n}\n</code></pre>"},{"location":"blog/c%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0fp16ieee754-2008%E7%B1%BB%E5%9E%8B/#f16\u9ad8\u6548\u7684\u6bd4\u8f83\u5927\u5c0f","title":"F16\u200b\u9ad8\u6548\u200b\u7684\u200b\u6bd4\u8f83\u200b\u5927\u5c0f\u200b\ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350","text":"<p>\u200b\u5982\u679c\u200b\u5c06\u200bF16\u200b\u8f6c\u6362\u6210\u200bF32\uff0c\u200b\u7136\u540e\u200b\u518d\u200b\u6bd4\u8f83\u200bF16\u200b\u7684\u200b\u5927\u5c0f\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5c31\u200b\u4f1a\u200b\u591a\u200b\u4e86\u200b\u8f6c\u6362\u200b\u7684\u200b\u5f00\u9500\u200b\u3002\u200b\u4e3a\u4e86\u200b\u51cf\u5c11\u200b\u7a0b\u5e8f\u200b\u8017\u65f6\u200b\uff0c\u200b\u63d0\u9ad8\u200b\u6027\u80fd\u200b\u3002\u200b\u90a3\u4e48\u200b\u662f\u5426\u200b\u53ef\u4ee5\u200b\u76f4\u63a5\u200b\u6bd4\u8f83\u200bF16\u200b\u7c7b\u578b\u200b\u5462\u200b\uff1f</p> <p>\u200b\u6709\u200b\u670b\u53cb\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u8bf4\u200b\uff0cF16\u200b\u4e0d\u662f\u200b\u7528\u200buint16_t\u200b\u7c7b\u578b\u200b\u8868\u793a\u200b\u7684\u200b\u5417\u200b\uff1f\u200b\u76f4\u63a5\u200b\u6bd4\u8f83\u200buint16_t\u200b\u7c7b\u578b\u200b\u53ef\u4ee5\u200b\u5417\u200b\uff1f \u200b\u7b54\u6848\u200b\u662f\u200b\u4e0d\u884c\u200b\u7684\u200b\u3002</p> <p>\u200b\u76f4\u63a5\u200b\u6bd4\u8f83\u200buint16\u200b\u5c31\u662f\u200bbit\u200b\u4f4d\u200b\u4e4b\u95f4\u200b\u7684\u200b\u76f8\u4e92\u200b\u6bd4\u8f83\u200b\uff0c\u200b\u800c\u4e14\u200bF16\u200b\u8fd8\u200b\u5b58\u5728\u200b\u6b63\u6570\u200b\u548c\u200b\u8d1f\u6570\u200b\uff0c\u200b\u663e\u7136\u200b\u4e0d\u80fd\u200b\u76f4\u63a5\u200b\u6bd4\u8f83\u200b\u3002</p> <p>\u200b\u5728\u200bc++\u200b\u4e2d\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u5b9a\u4e49\u200b\u4e86\u200bF16 class\uff0c\u200b\u53ea\u200b\u9700\u8981\u200b\u91cd\u8f7d\u200b\u7528\u4e8e\u200b\u6bd4\u8f83\u200b\u7684\u200boperate\u200b\u51fd\u6570\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u5b9e\u73b0\u200b\u6bd4\u8f83\u200b\u5927\u5c0f\u200b\u4e86\u200b\u3002</p> C++<pre><code>class F16{\n    bool is_nan() const\n    {\n        // \u200b\u901a\u8fc7\u200b\u4e0a\u9762\u200b\u7684\u200b\u5b9a\u4e49\u200b\u5224\u65ad\u200b\u662f\u5426\u200b\u4e3a\u200bNaN\n        return (value &amp; 0x7FFF) &gt; 0x7C00;\n    }\n\n    bool operator==(const F16 &amp;other) const\n    {\n        if (is_nan() || other.is_nan())\n        {\n            return false;\n        }\n        else\n        {\n            // \u200b\u76f4\u63a5\u5224\u65ad\u200b\u4e8c\u8fdb\u5236\u200b\u5185\u5bb9\u200b\u662f\u5426\u200b\u76f8\u7b49\u200b\uff0c\u200b\u6216\u8005\u200bexponent\u200b\u548c\u200bfraction\u200b\u5168\u4e3a\u200b0\uff0c\u200b\u6b64\u65f6\u200b\u8868\u793a\u200b\u6b63\u8d1f\u200b0\u200b\u76f8\u7b49\u200b\n            return (value == other.value) || ((value | other.value) &amp; 0x7FFF) == 0;\n        }\n    }\n\n     bool operator&lt;(const F16 &amp;other) const\n    {\n        if (is_nan() || other.is_nan())\n        {\n            return false;\n        }\n        else\n        {\n            // \u200b\u5224\u65ad\u200b\u6b63\u8d1f\u200b\u7b26\u53f7\u200b\u4f4d\u200b\n            bool neg = (value &amp; 0x8000) != 0;\n            bool other_neg = (other.value &amp; 0x8000) != 0;\n            // \u200b\u90fd\u200b\u4e3a\u200b\u6b63\u6570\u200b\uff0c\u200b\u76f4\u63a5\u200b\u6bd4\u8f83\u200bvalue\n            if (!neg &amp;&amp; !other_neg)\n            {\n                return value &lt; other.value;\n            }\n            // neg\u200b\u4e3a\u200b\u6b63\u200b\uff0cother_neg\u200b\u8d1f\u200b\uff0c\u200b\u8fd4\u56de\u200bfalse\n            else if (!neg &amp;&amp; other_neg)\n            {\n                return false;\n            }\n            // neg\u200b\u4e3a\u200b\u8d1f\u200b\uff0cother_neg\u200b\u6b63\u200b\n            // \u200b\u8fdb\u4e00\u6b65\u200b\u5224\u65ad\u200bthis\u200b\u548c\u200bother\u200b\u662f\u5426\u200b\u90fd\u200b\u4e3a\u200b0\uff0c\u200b\u4e0d\u200b\u90fd\u200b\u4e3a\u200b0\uff0c\u200b\u8d1f\u6570\u200b\u80af\u5b9a\u200b\u5c0f\u4e8e\u200b\u6b63\u6570\u200b\n            else if (neg &amp;&amp; !other_neg)\n            {\n                return ((value | other.value) &amp; 0x7FFF) != 0;\n            }\n            // \u200b\u90fd\u200b\u4e3a\u200b\u8d1f\u6570\u200b\uff0c\u200b\u76f4\u63a5\u200b\u6bd4\u8f83\u200bvalue\n            else\n            {\n                return value &gt; other.value;\n            }\n        }\n    }\n\n    bool operator&lt;=(const F16 &amp;other) const\n    {\n        if (is_nan() || other.is_nan())\n        {\n            return false;\n        }\n        else\n        {\n            bool neg = (value &amp; 0x8000) != 0;\n            bool other_neg = (other.value &amp; 0x8000) != 0;\n            if (!neg &amp;&amp; !other_neg)\n            {\n                return value &lt;= other.value;\n            }\n            else if (!neg &amp;&amp; other_neg)\n            {\n                return ((value | other.value) &amp; 0x7FFF) == 0;\n            }\n            else if (neg &amp;&amp; !other_neg)\n            {\n                return true;\n            }\n            else\n            {\n                return value &gt;= other.value;\n            }\n        }\n    }\n  private:\n  uint16_t value;\n}\n</code></pre> <p>\u200b\u5b8c\u6574\u200b\u7684\u200b\u4ee3\u7801\u200b\u5b9e\u73b0\u200b\u548c\u200bdemo\uff0c\u200b\u5728\u200b\u8fd9\u91cc\u200bKenForever1/F16cpp\u3002</p> <p>bye\uff01\u200b\u611f\u8c22\u60a8\u200b\u7684\u200b\u9605\u8bfb\u200b\uff01</p> <ul> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>C++\u200b\u6280\u6cd5\u200b\uff1a\u200b\u5982\u4f55\u200b\u4e3a\u200b\u4e00\u4e2a\u200b\u7c7b\u200b\u52a8\u6001\u200b\u9644\u52a0\u200b\u4efb\u610f\u200b\u7c7b\u578b\u200b\u6570\u636e\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/c%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%94%AF%E6%8C%81%E5%8A%A8%E6%80%81%E9%9D%99%E6%80%81%E6%8F%92%E4%BB%B6%E7%9A%84%E7%B3%BB%E7%BB%9F/","title":"C++\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u652f\u6301\u200b\u52a8\u6001\u200b\u3001\u200b\u9759\u6001\u200b\u63d2\u4ef6\u200b\u7684\u200b\u7cfb\u7edf","text":""},{"location":"blog/c%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%94%AF%E6%8C%81%E5%8A%A8%E6%80%81%E9%9D%99%E6%80%81%E6%8F%92%E4%BB%B6%E7%9A%84%E7%B3%BB%E7%BB%9F/#\u5f15\u8a00","title":"\u5f15\u8a00","text":"<p>\u200b\u901a\u8fc7\u200b\u82f1\u200b\u4f1f\u8fbe\u200b\u63a8\u7406\u200b\u4f20\u8f93\u200b\u5e93\u200b\uff08NIXL\uff09\u200b\u5b66\u4e60\u200bC++\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u652f\u6301\u200b\u52a8\u6001\u200b\u3001\u200b\u9759\u6001\u200b\u63d2\u4ef6\u200b\u6ce8\u518c\u200b\u548c\u200b\u7ba1\u7406\u200b\uff01</p> <p>NIXL\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5f00\u6e90\u200b\u9879\u76ee\u200b\uff0c\u200b\u82f1\u200b\u4f1f\u8fbe\u200b\u63a8\u7406\u200b\u4f20\u8f93\u200b\u5e93\u200b\uff08NIXL\uff09\u200b\u65e8\u5728\u200b\u52a0\u901f\u200b\u8bf8\u5982\u200b\u82f1\u200b\u4f1f\u8fbe\u200bDynamo\u200b\u7b49\u200b\u4eba\u5de5\u667a\u80fd\u200b\u63a8\u7406\u200b\u6846\u67b6\u200b\u4e2d\u200b\u7684\u200b\u70b9\u5bf9\u70b9\u200b\u901a\u4fe1\u200b\uff0c\u200b\u540c\u65f6\u200b\u901a\u8fc7\u200b\u6a21\u5757\u5316\u200b\u63d2\u4ef6\u200b\u67b6\u6784\u200b\uff0c\u200b\u4e3a\u200b\u5404\u79cd\u7c7b\u578b\u200b\u7684\u200b\u5185\u5b58\u200b\uff08\u200b\u5982\u200bCPU\u200b\u548c\u200bGPU\uff09\u200b\u548c\u200b\u5b58\u50a8\u200b\uff08\u200b\u5982\u200b\u6587\u4ef6\u200b\u3001\u200b\u5757\u200b\u5b58\u50a8\u200b\u548c\u200b\u5bf9\u8c61\u200b\u5b58\u50a8\u200b\uff09\u200b\u63d0\u4f9b\u200b\u62bd\u8c61\u200b\u3002</p> <ul> <li>\u200b\u652f\u6301\u200bPython\u3001Rust\u200b\u8bed\u8a00\u200b\u7ed1\u5b9a\u200b\u3002python\u200b\u91c7\u7528\u200bpybind11\u200b\u5b9e\u73b0\u200b\uff0cRust\u200b\u91c7\u7528\u200bbindgen\u200b\u5b9e\u73b0\u200b\u3002</li> <li>\u200b\u91c7\u7528\u200bmeson\u200b\u6784\u5efa\u200b\u7cfb\u7edf\u200b\u8fdb\u884c\u200b\u6784\u5efa\u200b\u3002</li> <li>\u200b\u91c7\u7528\u200b\u63d2\u4ef6\u200b\u673a\u5236\u200b\uff0c\u200b\u533a\u5206\u200b\u4e86\u200b\u52a8\u6001\u200b\u63d2\u4ef6\u200b\uff08dlsym\u200b\u52a8\u6001\u200b\u5e93\u200b\u52a0\u8f7d\u200b\uff09\u200b\u548c\u200b\u9759\u6001\u200b\u63d2\u4ef6\u200b\uff08\u200b\u7f16\u8bd1\u200b\u65f6\u200b\u94fe\u63a5\u200b\uff09\u3002</li> <li>\u200b\u63a5\u53e3\u200bapi\u200b\u5b9e\u73b0\u200b\u6e05\u6670\u200b\uff0c\u200b\u63a5\u53e3\u200b\u548c\u200b\u5b9e\u73b0\u200b\u5206\u79bb\u200b\uff0c\u200b\u65b9\u4fbf\u200b\u8fdb\u884c\u200b\u8de8\u200b\u8bed\u8a00\u200bFFI\u200b\u7ed1\u5b9a\u200b\u3002</li> </ul>"},{"location":"blog/c%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%94%AF%E6%8C%81%E5%8A%A8%E6%80%81%E9%9D%99%E6%80%81%E6%8F%92%E4%BB%B6%E7%9A%84%E7%B3%BB%E7%BB%9F/#c\u63d2\u4ef6\u7cfb\u7edf\u63a5\u53e3\u548c\u7ba1\u7406","title":"C++\u200b\u63d2\u4ef6\u200b\u7cfb\u7edf\u200b\u63a5\u53e3\u200b\u548c\u200b\u7ba1\u7406","text":"<p>\u200b\u4e00\u4e2a\u200b\u63d2\u4ef6\u200b\u7cfb\u7edf\u200b\u9700\u8981\u200b\u5982\u4f55\u200b\u8003\u8651\u200b\u63a5\u53e3\u200b\u5b9e\u73b0\u200b\u5462\u200b\uff1f\u200b\u9700\u8981\u200b\u5305\u62ec\u200b\u54ea\u4e9b\u200b\u4fe1\u606f\u200b\uff1f</p> <ul> <li> <p>\u200b\u63d2\u4ef6\u200b\u7248\u672c\u200b\u5b9a\u4e49\u200b\uff0c\u200b\u5728\u200b\u63d2\u4ef6\u200b\u52a0\u8f7d\u200b\u65f6\u200b\u53ef\u4ee5\u200b\u5bf9\u200b\u63d2\u4ef6\u200b\u7248\u672c\u200b\u8fdb\u884c\u200b\u6821\u9a8c\u200b\uff0c\u200b\u786e\u4fdd\u200b\u63d2\u4ef6\u200b\u548c\u200b\u4e3b\u7a0b\u5e8f\u200b\u517c\u5bb9\u200b\u3002</p> </li> <li> <p>\u200b\u901a\u8fc7\u200b attribute((visibility(\u201cdefault\u201d))) \u200b\u5bfc\u51fa\u200b\u63a5\u53e3\u51fd\u6570\u200b\uff0c\u200b\u4f7f\u5f97\u200b\u52a8\u6001\u200b\u5e93\u200b\u52a0\u8f7d\u200b\u65f6\u200b\u53ef\u4ee5\u200b\u627e\u5230\u200b\u8fd9\u4e9b\u200b\u51fd\u6570\u200b\u3002\u200b\u663e\u5f0f\u200b\u58f0\u660e\u200b\u9700\u8981\u200b\u5bf9\u5916\u200b\u66b4\u9732\u200b\u7684\u200b\u63a5\u53e3\u200b\uff0c\u200b\u907f\u514d\u200b\u9ed8\u8ba4\u200b\u5bfc\u51fa\u200b\u6240\u6709\u200b\u7b26\u53f7\u200b\uff0c\u200b\u786e\u4fdd\u200b\u5173\u952e\u200b\u51fd\u6570\u200b\u6216\u200b\u53d8\u91cf\u200b\u53ef\u200b\u88ab\u200b\u5916\u90e8\u200b\u94fe\u63a5\u200b\u3002</p> </li> </ul>"},{"location":"blog/c%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%94%AF%E6%8C%81%E5%8A%A8%E6%80%81%E9%9D%99%E6%80%81%E6%8F%92%E4%BB%B6%E7%9A%84%E7%B3%BB%E7%BB%9F/#\u63d2\u4ef6\u63a5\u53e3\u5b9a\u4e49","title":"\u63d2\u4ef6\u63a5\u53e3\u200b\u5b9a\u4e49","text":"<p>\u200b\u5728\u200b\u4e00\u4e2a\u200bapi\u200b\u63a5\u53e3\u200b\u5934\u6587\u4ef6\u200b\u4e2d\u200b\u5b9a\u4e49\u200b\u63d2\u4ef6\u63a5\u53e3\u200b\uff0c\u200b\u5305\u62ec\u200b\u63d2\u4ef6\u200b\u7248\u672c\u200b\u3001\u200b\u63d2\u4ef6\u200b\u540d\u79f0\u200b\u3001\u200b\u63d2\u4ef6\u200b\u521d\u59cb\u5316\u200b\u3001\u200b\u63d2\u4ef6\u200b\u9500\u6bc1\u200b\u7b49\u200b\u51fd\u6570\u200b\u3002\u200b\u5728\u200b\u9879\u76ee\u200b\u7684\u200b\u7ec4\u7ec7\u200b\u7ed3\u6784\u200b\u4e2d\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u4e13\u95e8\u200b\u653e\u5230\u200b\u4e00\u4e2a\u200bapi\u200b\u76ee\u5f55\u200b\u4e0b\u200b\u3002 </p>C++<pre><code>#include \"backend/backend_engine.h\"\n\n// Define the plugin API version\n#define NIXL_PLUGIN_API_VERSION 1\n\n// Define the plugin interface class\nclass nixlBackendPlugin {\npublic:\n    int api_version;\n\n    // Function pointer for creating a new backend engine instance\n    nixlBackendEngine* (*create_engine)(const nixlBackendInitParams* init_params);\n\n    // Function pointer for destroying a backend engine instance\n    void (*destroy_engine)(nixlBackendEngine* engine);\n\n    // Function to get the plugin name\n    const char* (*get_plugin_name)();\n\n    // Function to get the plugin version\n    const char* (*get_plugin_version)();\n\n    // Function to get backend options\n    nixl_b_params_t (*get_backend_options)();\n\n    // Function to get supported backend mem types\n    nixl_mem_list_t (*get_backend_mems)();\n};\n\n// Macro to define exported C functions for the plugin\n#define NIXL_PLUGIN_EXPORT __attribute__((visibility(\"default\")))\n\n// Creator Function type for static plugins\ntypedef nixlBackendPlugin* (*nixlStaticPluginCreatorFunc)();\n\n// Plugin must implement these functions for dynamic loading\nextern \"C\" {\n    // Initialize the plugin\n    NIXL_PLUGIN_EXPORT nixlBackendPlugin* nixl_plugin_init();\n\n    // Cleanup the plugin\n    NIXL_PLUGIN_EXPORT void nixl_plugin_fini();\n}\n</code></pre><p></p>"},{"location":"blog/c%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%94%AF%E6%8C%81%E5%8A%A8%E6%80%81%E9%9D%99%E6%80%81%E6%8F%92%E4%BB%B6%E7%9A%84%E7%B3%BB%E7%BB%9F/#\u63d2\u4ef6\u7ba1\u7406\u5668","title":"\u63d2\u4ef6\u200b\u7ba1\u7406\u5668","text":"<p>\u200b\u901a\u8fc7\u200b\u4e00\u4e2a\u200b\u5355\u4f8b\u200b\uff0c\u200b\u8fdb\u884c\u200b\u63d2\u4ef6\u200b\u7ba1\u7406\u200b\u3002 </p>C++<pre><code>nixlPluginManager&amp; nixlPluginManager::getInstance() {\n    // Meyers singleton initialization is safe in multi-threaded environment.\n    // Consult standard [stmt.dcl] chapter for details.\n    static nixlPluginManager instance;\n    return instance;\n}\n</code></pre> \u200b\u770b\u200b\u4e00\u4e0b\u200bnixlPluginManager\u200b\u7684\u200b\u6210\u5458\u200b\u53d8\u91cf\u200b\u5b9a\u4e49\u200b\uff1a C++<pre><code>using nixl_backend_t = std::string;\n\nclass nixlPluginManager {\nprivate:\n    std::map&lt;nixl_backend_t, std::shared_ptr&lt;const nixlPluginHandle&gt;&gt; loaded_plugins_; // \u200b\u540c\u65f6\u200b\u4fdd\u5b58\u200b\u4e86\u200b\u6ce8\u518c\u200b\u7684\u200b\u52a8\u6001\u200b\u63d2\u4ef6\u200b\u548c\u200b\u9759\u6001\u200b\u63d2\u4ef6\u200b\u4fe1\u606f\u200b\n    std::vector&lt;std::string&gt; plugin_dirs_; // \u200b\u4fdd\u5b58\u200b\u63d2\u4ef6\u200b\u641c\u7d22\u200b\u8def\u5f84\u200b\n    std::vector&lt;nixlStaticPluginInfo&gt; static_plugins_; // \u200b\u4fdd\u5b58\u200b\u6709\u200b\u9759\u6001\u200b\u63d2\u4ef6\u200b\u7684\u200b\u4fe1\u606f\u200b\uff0c\u200b\u65b9\u4fbf\u200b\u5728\u200bunload\u200b\u65f6\u200b\u8fdb\u884c\u200b\u8fc7\u6ee4\u200b\u9759\u6001\u200b\u63d2\u4ef6\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u9759\u6001\u200b\u63d2\u4ef6\u200b\u4e0d\u200b\u9700\u8981\u200bdlclose\u3002\n    // ......\n}\n</code></pre><p></p>"},{"location":"blog/c%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%94%AF%E6%8C%81%E5%8A%A8%E6%80%81%E9%9D%99%E6%80%81%E6%8F%92%E4%BB%B6%E7%9A%84%E7%B3%BB%E7%BB%9F/#\u7ef4\u62a4\u63d2\u4ef6\u4fe1\u606f","title":"\u7ef4\u62a4\u200b\u63d2\u4ef6\u200b\u4fe1\u606f","text":"<p>nixlPluginHandle\u200b\u540c\u65f6\u200b\u652f\u6301\u200b\u4fdd\u5b58\u200b\u52a8\u6001\u200b\u63d2\u4ef6\u200b\u548c\u200b\u9759\u6001\u200b\u63d2\u4ef6\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002nixlPluginHandle\u200b\u7ed3\u6784\u200b\u53ea\u200b\u5728\u200b\u6784\u9020\u200b\u548c\u6790\u200b\u6784\u65f6\u200b\u4fee\u6539\u200b\uff0c\u200b\u5728\u200b\u67e5\u8be2\u200b\u548c\u200b\u63d2\u4ef6\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u65f6\u200b\u53ea\u8bfb\u200b\u3002\u200b\u56e0\u6b64\u200b\u53ef\u4ee5\u200b\u5728\u200b\u591a\u7ebf\u7a0b\u200b\u4e2d\u200b\u5b89\u5168\u200b\u4f7f\u7528\u200b\uff0c\u200b\u4e0d\u200b\u9700\u8981\u200b\u52a0\u9501\u200b\u3002</p> C++<pre><code>class nixlPluginHandle {\nprivate:\n    void* handle_;         // Handle to the dynamically loaded library\n    nixlBackendPlugin* plugin_;  // Plugin interface\n\npublic:\n    nixlPluginHandle(void* handle, nixlBackendPlugin* plugin);\n    ~nixlPluginHandle();\n\n    nixlBackendEngine* createEngine(const nixlBackendInitParams* init_params) const;\n    void destroyEngine(nixlBackendEngine* engine) const;\n    const char* getName() const;\n    const char* getVersion() const;\n    nixl_b_params_t getBackendOptions() const;\n    nixl_mem_list_t getBackendMems() const;\n};\n</code></pre>"},{"location":"blog/c%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%94%AF%E6%8C%81%E5%8A%A8%E6%80%81%E9%9D%99%E6%80%81%E6%8F%92%E4%BB%B6%E7%9A%84%E7%B3%BB%E7%BB%9F/#\u9759\u6001\u63d2\u4ef6\u548c\u52a8\u6001\u63d2\u4ef6\u6ce8\u518c","title":"\u9759\u6001\u200b\u63d2\u4ef6\u200b\u548c\u200b\u52a8\u6001\u200b\u63d2\u4ef6\u200b\u6ce8\u518c","text":""},{"location":"blog/c%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%94%AF%E6%8C%81%E5%8A%A8%E6%80%81%E9%9D%99%E6%80%81%E6%8F%92%E4%BB%B6%E7%9A%84%E7%B3%BB%E7%BB%9F/#\u9759\u6001\u63d2\u4ef6","title":"\u9759\u6001\u200b\u63d2\u4ef6","text":"C++<pre><code>// Creator Function for static plugins\ntypedef nixlBackendPlugin* (*nixlStaticPluginCreatorFunc)();\n\n\n// Structure to hold static plugin info\nstruct nixlStaticPluginInfo {\n    const char* name;\n    nixlStaticPluginCreatorFunc createFunc;\n};\n</code></pre> <p>\u200b\u6ce8\u518c\u200b\u9759\u6001\u200b\u63d2\u4ef6\u200b: \u200b\u9759\u6001\u200b\u63d2\u4ef6\u200b\u53ea\u200b\u9700\u8981\u200b\u4fdd\u5b58\u200b\u4e00\u4e2a\u200bname\u200b\u548c\u200bcreateFunc\uff0c\u200b\u5e76\u4e14\u200b\u5728\u200b\u6ce8\u518c\u200b\u65f6\u200b\uff0c\u200b\u6267\u884c\u200bcreateFunc\u200b\u8fdb\u884c\u200b\u5b9e\u4f8b\u200b\u5316\u200b\uff08\u200b\u4e00\u4e2a\u200b\u9759\u6001\u200b\u5168\u5c40\u200b\u5b9e\u4f8b\u200b\uff09\u3002\u200b\u7136\u540e\u200b\u5c06\u200bnixlBackendPlugin*\u200b\u4fe1\u606f\u200b\u4fdd\u5b58\u200b\u5230\u200bloaded_plugins_\u200b\u7684\u200bmap\u200b\u4e2d\u200b\u3002 </p>C++<pre><code>void nixlPluginManager::registerStaticPlugin(const char* name, nixlStaticPluginCreatorFunc creator) {\n    lock_guard lg(lock);\n\n    nixlStaticPluginInfo info;\n    info.name = name;\n    info.createFunc = creator;\n    static_plugins_.push_back(info);\n\n    //Static Plugins are considered pre-loaded\n    nixlBackendPlugin* plugin = info.createFunc();\n    NIXL_INFO &lt;&lt; \"Loading static plugin: \" &lt;&lt; name;\n    if (plugin) {\n        // Register the loaded plugin\n        auto plugin_handle = std::make_shared&lt;const nixlPluginHandle&gt;(nullptr, plugin);\n        loaded_plugins_[name] = plugin_handle;\n    }\n}\n</code></pre><p></p> <p>\u200b\u9759\u6001\u200b\u63d2\u4ef6\u200b\u4e0d\u200b\u9700\u8981\u200bunload, \u200b\u76f8\u6bd4\u200b\u52a8\u6001\u200b\u63d2\u4ef6\u200b\u9700\u8981\u200bdlclose\u3002</p> <p>\u200b\u5728\u200b\u7f16\u8bd1\u200b\u65f6\u200b\uff0c\u200b\u51b3\u5b9a\u200b\u662f\u5426\u200b\u6ce8\u518c\u200b\u9759\u6001\u200b\u63d2\u4ef6\u200b\u3002createStaticPosixPlugin\u200b\u51fd\u6570\u200b\u5728\u200b\u63d2\u4ef6\u200b\u6a21\u5757\u200b\u4e2d\u200b\u5b9e\u73b0\u200b\uff08\u200b\u540e\u9762\u200b\u5b9e\u73b0\u200b\u73af\u8282\u200b\u6709\u200b\u4ecb\u7ecd\u200b\uff09\uff0c\u200b\u8fd9\u91cc\u200b\u901a\u8fc7\u200b\u5b8f\u200b\u63a7\u5236\u200b\u662f\u5426\u200b\u6ce8\u518c\u200b\u9759\u6001\u200b\u63d2\u4ef6\u200b\u3002 </p>C++<pre><code>#ifdef STATIC_PLUGIN_POSIX\n        extern nixlBackendPlugin* createStaticPosixPlugin();\n        registerStaticPlugin(\"POSIX\", createStaticPosixPlugin);\n#endif // STATIC_PLUGIN_POSIX\n\n#ifdef STATIC_PLUGIN_GDS\n#ifndef DISABLE_GDS_BACKEND\n        extern nixlBackendPlugin* createStaticGdsPlugin();\n        registerStaticPlugin(\"GDS\", createStaticGdsPlugin);\n#endif // DISABLE_GDS_BACKEND\n#endif // STATIC_PLUGIN_GDS\n</code></pre><p></p>"},{"location":"blog/c%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%94%AF%E6%8C%81%E5%8A%A8%E6%80%81%E9%9D%99%E6%80%81%E6%8F%92%E4%BB%B6%E7%9A%84%E7%B3%BB%E7%BB%9F/#\u52a8\u6001\u63d2\u4ef6\u52a0\u8f7d","title":"\u52a8\u6001\u200b\u63d2\u4ef6\u200b\u52a0\u8f7d","text":"<p>\u200b\u901a\u8fc7\u200b\u4e00\u4e2a\u200bvoid *handle\uff0c\u200b\u4fdd\u5b58\u200b\u52a8\u6001\u200b\u5e93\u200b\u7684\u200b\u53e5\u67c4\u200b\u3002</p> <p>\u200b\u652f\u6301\u200b\u8bbe\u7f6e\u200b\u63d2\u4ef6\u200b\u641c\u7d22\u200b\u8def\u5f84\u200b\uff0c\u200b\u5e76\u200b\u52a0\u8f7d\u200b\u63d2\u4ef6\u200b\u3002\u200b\u5728\u200b\u52a0\u8f7d\u200b\u63d2\u4ef6\u200b\u65f6\u200b\uff0c\u200b\u5148\u200b\u6839\u636e\u200b\u63d2\u4ef6\u200b\u540d\u79f0\u200b\u6821\u9a8c\u200b\u662f\u5426\u200b\u5df2\u7ecf\u200b\u4e3a\u200b\u9759\u6001\u200b\u63d2\u4ef6\u200b\uff0c\u200b\u5373\u200b\u5df2\u7ecf\u200bpreload\uff0c\u200b\u53ef\u4ee5\u200b\u76f4\u63a5\u200b\u8fd4\u56de\u200b\u9759\u6001\u200b\u63d2\u4ef6\u200b\u7684\u200bhandle\u3002</p> <p>\u200b\u5728\u200b\u63d2\u4ef6\u200b\u52a0\u8f7d\u200b\u65f6\u200b\uff0c\u200b\u4f1a\u200b\u8fdb\u884c\u200b\u63d2\u4ef6\u200b\u7248\u672c\u200b\u6821\u9a8c\u200b\u3002</p> C++<pre><code>std::shared_ptr&lt;const nixlPluginHandle&gt; nixlPluginManager::loadPluginFromPath(const std::string&amp; plugin_path) {\n    // Open the plugin file\n    void* handle = dlopen(plugin_path.c_str(), RTLD_NOW | RTLD_LOCAL);\n    if (!handle) {\n        NIXL_ERROR &lt;&lt; \"Failed to load plugin from \" &lt;&lt; plugin_path &lt;&lt; \": \" &lt;&lt; dlerror();\n        return nullptr;\n    }\n\n    // Get the initialization function\n    typedef nixlBackendPlugin* (*init_func_t)();\n    init_func_t init = (init_func_t) dlsym(handle, \"nixl_plugin_init\");\n    if (!init) {\n        NIXL_ERROR &lt;&lt; \"Failed to find nixl_plugin_init in \" &lt;&lt; plugin_path &lt;&lt; \": \" &lt;&lt; dlerror();\n        dlclose(handle);\n        return nullptr;\n    }\n\n    // Call the initialization function\n    nixlBackendPlugin* plugin = init();\n    if (!plugin) {\n        NIXL_ERROR &lt;&lt; \"Plugin initialization failed for \" &lt;&lt; plugin_path;\n        dlclose(handle);\n        return nullptr;\n    }\n\n    // Check API version\n    if (plugin-&gt;api_version != NIXL_PLUGIN_API_VERSION) {\n        NIXL_ERROR &lt;&lt; \"Plugin API version mismatch for \" &lt;&lt; plugin_path\n                   &lt;&lt; \": expected \" &lt;&lt; NIXL_PLUGIN_API_VERSION\n                   &lt;&lt; \", got \" &lt;&lt; plugin-&gt;api_version;\n        dlclose(handle);\n        return nullptr;\n    }\n\n    // Create and store the plugin handle\n    auto plugin_handle = std::make_shared&lt;const nixlPluginHandle&gt;(handle, plugin);\n\n    return plugin_handle;\n}\n</code></pre> <p>\u200b\u4ecb\u7ecd\u200b\u5230\u200b\u73b0\u5728\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u63d2\u4ef6\u200b\u7684\u200b\u6846\u67b6\u200b\u5df2\u7ecf\u200b\u642d\u5efa\u200b\u597d\u200b\u4e86\u200b\u3002\u200b\u652f\u6301\u200b\u63d2\u4ef6\u200b\u7ba1\u7406\u200b\u3001\u200b\u63d2\u4ef6\u63a5\u53e3\u200b\u5b9a\u4e49\u200b\u3001\u200b\u52a8\u6001\u200b\u548c\u200b\u9759\u6001\u200b\u63d2\u4ef6\u200b\u52a0\u8f7d\u200b\u3002 \u200b\u63a5\u4e0b\u6765\u200b\uff0c\u200b\u5c31\u662f\u200b\u6839\u636e\u200b\u63d2\u4ef6\u63a5\u53e3\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u5177\u4f53\u200b\u7684\u200b\u63d2\u4ef6\u200b\u3002\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u652f\u6301\u200b\u52a8\u6001\u200b\u52a0\u8f7d\u200b\u7684\u200b\u63d2\u4ef6\u200b\u548c\u200b\u9759\u6001\u200b\u63d2\u4ef6\u200b\u3002</p>"},{"location":"blog/c%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%94%AF%E6%8C%81%E5%8A%A8%E6%80%81%E9%9D%99%E6%80%81%E6%8F%92%E4%BB%B6%E7%9A%84%E7%B3%BB%E7%BB%9F/#\u5982\u4f55\u5b9e\u73b0\u63d2\u4ef6plugin","title":"\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u63d2\u4ef6\u200bPlugin","text":"<p>\u200b\u5b9e\u73b0\u200b\u63d2\u4ef6\u200b\u53ea\u200b\u9700\u8981\u200b\u5bfc\u5165\u200b\u5934\u6587\u4ef6\u200b\uff0c\u200b\u5e76\u200b\u5b9e\u73b0\u200b\u63d2\u4ef6\u63a5\u53e3\u200b\u3002\u200b\u4fdd\u8bc1\u200b\u4e86\u200b\u63d2\u4ef6\u63a5\u53e3\u200b\u7684\u200b\u7edf\u4e00\u6027\u200b\uff0c\u200b\u7ed3\u6784\u200b\u7ec4\u7ec7\u200b\u7684\u200b\u6e05\u6670\u200b\u3002 </p>C++<pre><code>#include \"backend/backend_plugin.h\"\n</code></pre> \u200b\u8fd9\u4e2a\u200bPosix\u200b\u662f\u200b\u82f1\u200b\u4f1f\u8fbe\u200b\u63a8\u7406\u200b\u4f20\u8f93\u200b\u5e93\u200b\uff08NIXL\uff09\u200b\u4e2d\u200b\u5176\u4e2d\u200b\u4e00\u4e2a\u200b\u63d2\u4ef6\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u5176\u4ed6\u200b\u63d2\u4ef6\u200b\u8fd8\u200b\u5305\u62ec\u200b\u4e86\u200bhf3fs\u3001mooncake\u3001cuda_gds\u200b\u7b49\u200b\u3002\u200b\u770b\u200b\u4e00\u4e0b\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bPosix\u200b\u63d2\u4ef6\u200b\uff0c\u200b\u4e0b\u9762\u200b\u662f\u200b\u5bf9\u200b\u63d2\u4ef6\u63a5\u53e3\u200b\u51fd\u6570\u200b\u7684\u200b\u5b9e\u73b0\u200b\uff1a C++<pre><code>// Function to create a new POSIX backend engine instance\nstatic nixlBackendEngine* create_posix_engine(const nixlBackendInitParams* init_params) {\n    return new nixlPosixEngine(init_params);\n}\n\n// \u200b\u8d44\u6e90\u200b\u7684\u200b\u6b63\u786e\u200b\u91ca\u653e\u200b\nstatic void destroy_posix_engine(nixlBackendEngine *engine) {\n    delete engine;\n}\n\n// Function to get the plugin name\uff0c\u200b\u63d2\u4ef6\u200b\u540d\u79f0\u200b\nstatic const char* get_plugin_name() {\n    return \"POSIX\";\n}\n\n// Function to get the plugin version\uff0c\u200b\u63d2\u4ef6\u200b\u7248\u672c\u200b\nstatic const char* get_plugin_version() {\n    return \"0.1.0\";\n}\n\n// Function to get backend options\nstatic nixl_b_params_t get_backend_options() {\n    nixl_b_params_t params;\n    return params;\n}\n\n// Function to get supported backend mem types\nstatic nixl_mem_list_t get_backend_mems() {\n    return {DRAM_SEG, FILE_SEG};\n}\n</code></pre><p></p> <p>\u200b\u9759\u6001\u200b\u63d2\u4ef6\u200b\u548c\u200b\u52a8\u6001\u200b\u63d2\u4ef6\u200b\u5b9e\u73b0\u200b\u7684\u200b\u533a\u522b\u200b\uff1a</p> <ul> <li> <p>\u200b\u9759\u6001\u200b\u63d2\u4ef6\u200b\u5728\u200b\u7f16\u8bd1\u200b\u65f6\u200b\uff0c\u200b\u901a\u8fc7\u200b\u5b8f\u200b\u63a7\u5236\u200b\u662f\u5426\u200b\u6ce8\u518c\u200b\u9759\u6001\u200b\u63d2\u4ef6\u200b\uff0c\u200b\u5728\u200b\u7a0b\u5e8f\u200b\u7f16\u8bd1\u200b\u65f6\u200b\uff0c\u200b\u6839\u636e\u200b\u5b8f\u200b\u5b9a\u4e49\u200b\uff0c\u200b\u51b3\u5b9a\u200b\u662f\u5426\u200b\u8c03\u7528\u200bcreateStaticPosixPlugin\u200b\u51fd\u6570\u200b\u3002\u200b\u5c06\u200b\u9759\u6001\u200b\u5168\u5c40\u53d8\u91cf\u200bnixlBackendPlugin*\u200b\u4fe1\u606f\u200b\u4fdd\u5b58\u200b\u5230\u200bloaded_plugins_\u200b\u7684\u200bmap\u200b\u4e2d\u200b\u3002</p> </li> <li> <p>\u200b\u52a8\u6001\u200b\u63d2\u4ef6\u200b\u5728\u200b\u8fd0\u884c\u200b\u65f6\u200b\uff0c\u200b\u901a\u8fc7\u200bdlopen\u200b\u52a0\u8f7d\u200b\u52a8\u6001\u200b\u5e93\u200b\uff0c\u200b\u5e76\u200b\u8c03\u7528\u200bnixl_plugin_init\u200b\u51fd\u6570\u200b\uff0c\u200b\u521d\u59cb\u5316\u200b\u63d2\u4ef6\u200b\u3002</p> </li> </ul> C++<pre><code>#ifdef STATIC_PLUGIN_POSIX\n\n// \u200b\u901a\u8fc7\u200b\u9759\u6001\u200b\u5168\u5c40\u53d8\u91cf\u200b\uff0c\u200b\u6ce8\u518c\u200b\u9759\u6001\u200b\u63d2\u4ef6\u200b\u5b9e\u4f8b\u200b\uff0c\u200b\u5728\u200b\u7a0b\u5e8f\u200b\u7f16\u8bd1\u200b\u65f6\u200b\uff0c\u200b\u6839\u636e\u200b\u5b8f\u200b\u5b9a\u4e49\u200b\uff0c\u200b\u51b3\u5b9a\u200b\u662f\u5426\u200b\u8c03\u7528\u200bcreateStaticPosixPlugin\u200b\u51fd\u6570\u200b\n// \u200b\u51b3\u5b9a\u200b\u662f\u5426\u200b\u6ce8\u518c\u200b\u9759\u6001\u200b\u63d2\u4ef6\u200b\n// Static plugin structure\nstatic nixlBackendPlugin plugin = {\n    NIXL_PLUGIN_API_VERSION,\n    create_posix_engine,\n    destroy_posix_engine,\n    get_plugin_name,\n    get_plugin_version,\n    get_backend_options,\n    get_backend_mems\n};\n\nnixlBackendPlugin* createStaticPosixPlugin() {\n    return &amp;plugin; // Return the static plugin instance\n}\n\n#else\n\n// Plugin initialization function\nextern \"C\" NIXL_PLUGIN_EXPORT nixlBackendPlugin* nixl_plugin_init() {\n    try {\n        std::unique_ptr&lt;nixlBackendPlugin&gt; plugin = std::make_unique&lt;nixlBackendPlugin&gt;();\n        plugin-&gt;create_engine = create_posix_engine;\n        plugin-&gt;destroy_engine = destroy_posix_engine;\n        plugin-&gt;get_plugin_name = get_plugin_name;\n        plugin-&gt;get_plugin_version = get_plugin_version;\n        plugin-&gt;get_backend_options = get_backend_options;\n        plugin-&gt;get_backend_mems = get_backend_mems;\n        plugin-&gt;api_version = NIXL_PLUGIN_API_VERSION;  // Set the API version\n        return plugin.release();\n    } catch (const std::exception&amp; e) {\n        return nullptr;\n    }\n}\n\n// Plugin cleanup function\nextern \"C\" NIXL_PLUGIN_EXPORT void nixl_plugin_fini() {\n}\n</code></pre> <p>\u200b\u611f\u8c22\u60a8\u200b\u7684\u200b\u9605\u8bfb\u200b\uff0c\u200b\u4eca\u5929\u200b\u7684\u200b\u5185\u5bb9\u200b\u5c31\u200b\u5230\u200b\u8fd9\u91cc\u200b\u4e86\u200b\u3002\u200b\u901a\u8fc7\u200b\u672c\u6587\u200b\u6211\u4eec\u200b\u4e86\u89e3\u200b\u4e86\u200bc++\u200b\u9879\u76ee\u200bNIXL\u200b\u63d2\u4ef6\u200b\u6846\u67b6\u200b\u7684\u200b\u8bbe\u8ba1\u200b\u548c\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u63d2\u4ef6\u200b\u3002</p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>C++\u200b\u6280\u6cd5\u200b\uff1a\u200b\u5982\u4f55\u200b\u4e3a\u200b\u4e00\u4e2a\u200b\u7c7b\u200b\u52a8\u6001\u200b\u9644\u52a0\u200b\u4efb\u610f\u200b\u7c7b\u578b\u200b\u6570\u636e\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/c%E5%BC%80%E5%8F%91%E5%A6%82%E4%BD%95%E6%8E%92%E6%9F%A5%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E5%A2%9E%E9%95%BF/","title":"C++\u200b\u5f00\u53d1\u200b\u5982\u4f55\u200b\u6392\u67e5\u200b\u5185\u5b58\u200b\u6cc4\u9732\u200b\uff08\u200b\u589e\u957f\u200b\uff09","text":"<p>\u200b\u4e0d\u200b\u4e00\u5b9a\u200b\u662f\u200b\u5185\u5b58\u200b\u6cc4\u9732\u200b\uff0c\u200b\u4e5f\u200b\u53ef\u80fd\u200b\u662f\u200b\u5185\u5b58\u200b\u6301\u7eed\u200b\u5206\u914d\u200b\uff0c\u200b\u4e00\u76f4\u200b\u4e0a\u6da8\u200b\uff0c\u200b\u76f4\u5230\u200b\u6700\u540e\u200bOOM\u3002</p>"},{"location":"blog/c%E5%BC%80%E5%8F%91%E5%A6%82%E4%BD%95%E6%8E%92%E6%9F%A5%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E5%A2%9E%E9%95%BF/#\u5de5\u5177\u7684\u4f7f\u7528","title":"\u5de5\u5177\u200b\u7684\u200b\u4f7f\u7528","text":""},{"location":"blog/c%E5%BC%80%E5%8F%91%E5%A6%82%E4%BD%95%E6%8E%92%E6%9F%A5%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E5%A2%9E%E9%95%BF/#top","title":"top","text":"<p>\u200b\u89c2\u5bdf\u200bRES\u200b\u53d8\u5316\u200b\u3002</p>"},{"location":"blog/c%E5%BC%80%E5%8F%91%E5%A6%82%E4%BD%95%E6%8E%92%E6%9F%A5%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E5%A2%9E%E9%95%BF/#pmap","title":"pmap","text":"Bash<pre><code>pmap -x [pid] &gt; tmp_time1.txt\n# -k3,3n \u200b\u6392\u5e8f\u200b\u4f9d\u636e\u200b\u7b2c\u4e09\u5217\u200b\uff0c\u200b\u5373\u200b\u5185\u5b58\u5927\u5c0f\u200b, \u200b\u7b2c\u4e09\u5217\u200b\u662f\u200bRES\u200b\u5217\u200b\nawk '{print $0}' tmp_time1.txt | sort -k3,3n | tail -n 10\n</code></pre> \u200b\u5bf9\u6bd4\u200b\u4e0d\u540c\u200b\u65f6\u95f4\u200b\u70b9\u200b\u7684\u200bpmap\u200b\u8f93\u51fa\u200b\uff0c\u200b\u627e\u5230\u200b\u5185\u5b58\u200b\u5206\u914d\u200b\u6301\u7eed\u200b\u4e0a\u6da8\u200b\u7684\u200b\u6a21\u5757\u200b\u3002 Text Only<pre><code># \u200b\u63d0\u53d6\u200b server_0418_2011.txt \u200b\u4e2d\u200b\u7684\u200b\u5730\u5740\u200b\u5217\u200b\nawk '{print $1}' server_0418_2011.txt &gt; addresses_0418.txt\n\n# \u200b\u4f7f\u7528\u200b awk \u200b\u5904\u7406\u200b server_0419_2011.txt\uff0c\u200b\u6253\u5370\u200b\u4e0d\u200b\u5728\u200b addresses_0418.txt \u200b\u4e2d\u200b\u7684\u200b\u5730\u5740\u200b\u548c\u200b\u5bf9\u5e94\u200b\u7684\u200b\u7b2c\u4e09\u5217\u200b\nawk 'NR==FNR {addr[$1]; next} !($1 in addr) {print $1, $3}' addresses_0418.txt server_0419_2011.txt\n</code></pre> Text Only<pre><code>awk '{print $1, $3}' server_0418_2011.txt &gt; data1.txt\nawk '{print $1, $3}' server_0419_2011.txt &gt; data2.txt\n\njoin -o 1.1 1.2 2.2 data1.txt data2.txt | \\\nawk '{print $1, $3-$2, $2, $3}' | \\\nsort -k2,2nr | head -n 100\n</code></pre>"},{"location":"blog/c%E5%BC%80%E5%8F%91%E5%A6%82%E4%BD%95%E6%8E%92%E6%9F%A5%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E5%A2%9E%E9%95%BF/#\u7406\u5ff5","title":"\u7406\u5ff5","text":"<p>\u200b\u7f29\u5c0f\u200b\u8303\u56f4\u200b\uff0c\u200b\u51cf\u5c11\u200b\u6a21\u5757\u200b\uff0c\u200b\u6700\u5c0f\u200b\u5355\u5143\u200b\u590d\u73b0\u200b\u3002</p> <ul> <li>new\u3001malloc\u200b\u6ca1\u6709\u200b\u91ca\u653e\u200b</li> <li>vector\u200b\u6216\u8005\u200bmap\u200b\u4e00\u76f4\u200b\u589e\u957f\u200b</li> </ul>"},{"location":"blog/c%E5%BC%80%E5%8F%91%E5%A6%82%E4%BD%95%E6%8E%92%E6%9F%A5%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E5%A2%9E%E9%95%BF/#ptmalloc\u6362\u6210jemalloc\u6216\u8005tcmalloc","title":"ptmalloc\u200b\u6362\u6210\u200bjemalloc\u200b\u6216\u8005\u200btcmalloc","text":"<p>\u200b\u5185\u5b58\u200b\u4e0d\u200b\u56de\u6536\u200b\uff0c\u200b\u788e\u7247\u200b\u4e00\u76f4\u200b\u589e\u52a0\u200b\uff0c\u200b\u5bfc\u81f4\u200boom\u3002</p> <p>\u200b\u5b9a\u4f4d\u200b\u5de5\u5177\u200b\u3002 </p>Text Only<pre><code>malloc_trim(); \u200b\u624b\u52a8\u200b\u91ca\u653e\u200b\u5185\u5b58\u200b\u3002\n\n\n// https://zhuanlan.zhihu.com/p/682033366\nvalgrind --tool=massif \n</code></pre><p></p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>C++\u200b\u6280\u6cd5\u200b\uff1a\u200b\u5982\u4f55\u200b\u4e3a\u200b\u4e00\u4e2a\u200b\u7c7b\u200b\u52a8\u6001\u200b\u9644\u52a0\u200b\u4efb\u610f\u200b\u7c7b\u578b\u200b\u6570\u636e\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/c%E5%BC%80%E5%8F%91%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%B9%8Babi%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/","title":"C++\u200b\u5f00\u53d1\u200b\u5e38\u89c1\u95ee\u9898\u200b\u4e4b\u200bABI\u200b\u517c\u5bb9\u6027\u95ee\u9898","text":""},{"location":"blog/c%E5%BC%80%E5%8F%91%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%B9%8Babi%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/#\u80cc\u666f\u77e5\u8bc6","title":"\u80cc\u666f\u200b\u77e5\u8bc6","text":"<p>\u200b\u4f60\u200b\u5728\u200bC++\u200b\u5f00\u53d1\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u9047\u5230\u200b\u8fc7\u200b\u4e0b\u9762\u200b\u7684\u200b\u95ee\u9898\u200b\u5417\u200b\uff1f</p> Bash<pre><code>/usr/bin/ld: libshared_lib_b.so: undefined reference to `A::get_message[abi:cxx11]()'\ncollect2: error: ld returned 1 exit status\n</code></pre> <p>\u200b\u8fd9\u4e2a\u200b\u95ee\u9898\u200b\u4e3b\u8981\u200b\u662f\u56e0\u4e3a\u200bABI\u200b\u4e0d\u200b\u4e00\u81f4\u200b\u9020\u6210\u200b\u7684\u200b\u3002ABI\uff08Application Binary Interface \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e8c\u8fdb\u5236\u200b\u63a5\u53e3\u200b\uff09\u200c\uff0c\u200b\u786e\u4fdd\u200b\u4e0d\u540c\u200b\u7f16\u8bd1\u5668\u200b\u3001\u200b\u5e93\u200b\u6216\u200b\u7cfb\u7edf\u200b\u7f16\u8bd1\u200b\u7684\u200b\u4e8c\u8fdb\u5236\u200b\u6a21\u5757\u200b\u80fd\u200b\u6b63\u786e\u200b\u534f\u540c\u5de5\u4f5c\u200b\u200c\u3002</p> <p>\u200b\u5728\u200bGCC 5.1\u200b\u7248\u672c\u200b\u4e2d\u200b\uff0clibstdc++\u200b\u5f15\u5165\u200b\u4e86\u200b\u4e00\u79cd\u200b\u65b0\u200b\u7684\u200b\u5e93\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e8c\u8fdb\u5236\u200b\u63a5\u53e3\u200b\uff08ABI\uff09\uff0c\u200b\u5176\u4e2d\u200b\u5305\u542b\u200bstd::string\u200b\u548c\u200bstd::list\u200b\u7684\u200b\u65b0\u200b\u5b9e\u73b0\u200b\u3002\u200b\u8fd9\u4e9b\u200b\u66f4\u6539\u200b\u662f\u200b\u4e3a\u4e86\u200b\u7b26\u5408\u200b2011\u200b\u5e74\u200bC++\u200b\u6807\u51c6\u200b\uff0c\u200b\u8be5\u200b\u6807\u51c6\u200b\u7981\u6b62\u200b\u4f7f\u7528\u200b\u5199\u65f6\u200b\u590d\u5236\u200b\uff08Copy-On-Write\uff09\u200b\u5b57\u7b26\u4e32\u200b\uff0c\u200b\u5e76\u200b\u8981\u6c42\u200blist\u200b\u8ddf\u8e2a\u200b\u5176\u200b\u5927\u5c0f\u200b\u3002</p> <p>\u200b\u4e3a\u4e86\u200b\u5bf9\u200b\u94fe\u63a5\u200b\u5230\u200blibstdc++\u200b\u7684\u200b\u73b0\u6709\u200b\u4ee3\u7801\u200b\u4fdd\u6301\u200b\u5411\u200b\u540e\u200b\u517c\u5bb9\u6027\u200b\uff0c\u200b\u8be5\u5e93\u200b\u7684\u200bsoname\u200b\u6ca1\u6709\u200b\u6539\u53d8\u200b\uff0c\u200b\u5e76\u4e14\u200b\u65e7\u200b\u7684\u200b\u5b9e\u73b0\u200b\u4ecd\u7136\u200b\u4e0e\u200b\u65b0\u200b\u7684\u200b\u5b9e\u73b0\u200b\u5e76\u884c\u200b\u652f\u6301\u200b\u3002\u200b\u8fd9\u662f\u200b\u901a\u8fc7\u200b\u5728\u200b\u5185\u8054\u200b\u547d\u540d\u200b\u7a7a\u95f4\u200b\u4e2d\u200b\u5b9a\u4e49\u65b0\u200b\u7684\u200b\u5b9e\u73b0\u200b\u6765\u200b\u5b9e\u73b0\u200b\u7684\u200b\uff0c\u200b\u8fd9\u6837\u200b\u5b83\u4eec\u200b\u5728\u200b\u94fe\u63a5\u200b\u65f6\u6709\u200b\u4e0d\u540c\u200b\u7684\u200b\u540d\u79f0\u200b\uff0c\u200b\u4f8b\u5982\u200b\uff0c\u200b\u65b0\u200b\u7248\u672c\u200b\u7684\u200bstd::list\u200b\u5b9e\u9645\u4e0a\u200b\u88ab\u200b\u5b9a\u4e49\u200b\u4e3a\u200bstd::__cxx11::list\u3002\u200b\u7531\u4e8e\u200b\u65b0\u200b\u5b9e\u73b0\u200b\u7684\u200b\u7b26\u53f7\u200b\u5177\u6709\u200b\u4e0d\u540c\u200b\u7684\u200b\u540d\u79f0\u200b\uff0c\u200b\u56e0\u6b64\u200b\u4e24\u4e2a\u200b\u7248\u672c\u200b\u7684\u200b\u5b9a\u4e49\u200b\u53ef\u4ee5\u200b\u540c\u65f6\u200b\u5b58\u5728\u200b\u4e8e\u200b\u540c\u4e00\u4e2a\u200b\u5e93\u4e2d\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u5b8f\u200b_GLIBCXX_USE_CXX11_ABI\u200b\u8fdb\u884c\u200b\u63a7\u5236\u200b\uff0c\u200b\u4f7f\u7528\u200b\u65b0\u200b\u7684\u200bABI\u200b\u8fd8\u662f\u200b\u65e7\u200b\u7684\u200bABI\u3002\u200b\u8fd8\u8981\u200b\u6ce8\u610f\u200b\u7684\u200b\u662f\u200b\u64cd\u4f5c\u7cfb\u7edf\u200b\u7684\u200b\u4e0d\u540c\u200b\u53d1\u73b0\u200b\u7248\u672c\u200b\uff0c\u200b\u5b8f\u200b_GLIBCXX_USE_CXX11_ABI\u200b\u7684\u200b\u9ed8\u8ba4\u503c\u200b\u4e0d\u200b\u4e00\u6837\u200b\uff0c\u200b\u6bd4\u5982\u200bUbuntu\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b1\uff08\u200b\u91c7\u7528\u200b\u65b0\u200bABI\uff09\uff0c\u200b\u800c\u200bCentOS\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b0\uff08\u200b\u91c7\u7528\u200b\u65e7\u200bABI\uff09\u3002</p> <p>\u200b\u53ef\u4ee5\u200b\u8bfb\u200b\u4e00\u4e0b\u200bgcc\u200b\u5173\u4e8e\u200blibstdc++ using_dual_abi\u200b\u7684\u200b\u4ecb\u7ecd\u200b\u3002</p>"},{"location":"blog/c%E5%BC%80%E5%8F%91%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%B9%8Babi%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/#\u5982\u4f55\u5224\u65ad\u4e00\u4e2a\u5e93\u91c7\u7528\u7684abi\u7248\u672c","title":"\u5982\u4f55\u200b\u5224\u65ad\u200b\u4e00\u4e2a\u200b\u5e93\u200b\u91c7\u7528\u200b\u7684\u200bABI\u200b\u7248\u672c","text":"Bash<pre><code>nm -C libxxx.so | grep string\n\n# \u200b\u91c7\u7528\u200b\u7684\u200bABI=1\uff0c\u200b\u65b0\u200b\u7248\u672c\u200b\nstd::__cxx11::basic_string\n\n# \u200b\u91c7\u7528\u200b\u7684\u200bABI=0\uff0c\u200b\u8001\u200b\u7248\u672c\u200b\nstd::string\n</code></pre> Bash<pre><code>nm -C ./build_new/libstatic_lib_a.a  | grep get_message\n0000000000000000 T A::get_message[abi:cxx11]()\n\nnm -C ./build_old/libstatic_lib_a.a  | grep get_message\n0000000000000000 T A::get_message()\n</code></pre> Bash<pre><code>nm -C ./build_new/libstatic_lib_a.so  | grep get_message\n000000000000249a T A::get_message[abi:cxx11]()\n\nnm -C ./build_old/libstatic_lib_a.so | grep get_message\n00000000000013fa T A::get_message()\n</code></pre>"},{"location":"blog/c%E5%BC%80%E5%8F%91%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%B9%8Babi%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/#\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u6765\u7406\u89e3abi\u4e0d\u517c\u5bb9","title":"\u901a\u8fc7\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b\u6765\u200b\u7406\u89e3\u200bABI\u200b\u4e0d\u200b\u517c\u5bb9","text":"<p>\u200b\u4e0d\u7ba1\u200b\u4f60\u200b\u662f\u200b\u91c7\u7528\u200b\u9759\u6001\u200b\u5e93\u200b\u3001\u200b\u6216\u8005\u200b\u52a8\u6001\u200b\u5e93\u200b\u94fe\u63a5\u200b\uff0c\u200b\u53ea\u8981\u200bABI\u200b\u4e0d\u200b\u4e00\u81f4\u200b\uff0c\u200b\u90fd\u200b\u4f1a\u200b\u5b58\u5728\u200b\u8fd9\u4e2a\u200b\u95ee\u9898\u200b\u3002\u200b\u4e0b\u9762\u200b\u6211\u4eec\u200b\u901a\u8fc7\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b\u6765\u770b\u200b\u4e00\u4e0b\u200b\u3002 \u200b\u4e0b\u9762\u200b\u7684\u200b\u4ee3\u7801\u200b\u521b\u5efa\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u53ef\u6267\u884c\u6587\u4ef6\u200bMain\uff0c\u200b\u94fe\u63a5\u200b\u52a8\u6001\u200b\u5e93\u200bB\uff0c\u200b\u52a8\u6001\u200b\u5e93\u200bB\u200b\u94fe\u63a5\u200b\u9759\u6001\u200b\u5e93\u200bA\uff0c\u200b\u9759\u6001\u200b\u5e93\u200bA\u200b\u91c7\u7528\u200b\u4e0d\u540c\u200b\u7684\u200bABI\u3002 \u200b\u6216\u8005\u200b\u52a8\u6001\u200b\u5e93\u200b\u94fe\u63a5\u200b\u52a8\u6001\u200b\u5e93\u200bA\uff0c\u200b\u4f46\u662f\u200bA\u200b\u91c7\u7528\u200b\u4e0d\u540c\u200b\u7684\u200bABI\u200b\u8fdb\u884c\u200b\u7f16\u8bd1\u200b\u3002 </p>C++<pre><code>// static_lib_a/a.cpp\n#include \"a.h\"\n\nstd::string A::get_message() {\n    return \"Hello from static lib (ABI=\" \n    #if _GLIBCXX_USE_CXX11_ABI\n           \"1)\";\n    #else\n           \"0)\";\n    #endif\n}\n\n// static_lib_a/a.h\n#pragma once\n#include &lt;string&gt;\n\nclass A {\npublic:\n    static std::string get_message();\n};\n\n// shared_lib_b/b.cpp\n#include \"a.h\"\n#include &lt;string&gt;\n\nextern \"C\" {\n    const char* get_message_wrapper() {\n        static std::string msg = A::get_message();\n        return msg.c_str();\n    }\n}\n\n// main.cpp\n#include &lt;iostream&gt;\n\nextern \"C\" const char* get_message_wrapper();\n\nint main() {\n    std::cout &lt;&lt; get_message_wrapper() &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre> \u200b\u7f16\u8bd1\u200b\u91c7\u7528\u200b\u7684\u200bCMakeLists.txt\u200b\u5982\u4e0b\u200b\uff1a Bash<pre><code># CMakeLists.txt\ncmake_minimum_required(VERSION 3.12)\nproject(ABIDemo)\n\noption(USE_NEW_ABI \"Use C++11 ABI for static library\" ON)\n\n# \u200b\u8bbe\u7f6e\u200bABI\u200b\u5b8f\u200b\u5b9a\u4e49\u200b\nif(USE_NEW_ABI)\n    set(STATICLIB_ABI_FLAG \"-D_GLIBCXX_USE_CXX11_ABI=1\")\n    message(STATUS \"Using C++11 ABI for static library\")\nelse()\n    set(STATICLIB_ABI_FLAG \"-D_GLIBCXX_USE_CXX11_ABI=0\")\n    message(STATUS \"Using old pre-C++11 ABI for static library\")\nendif()\n\n# \u200b\u5728\u200b\u7f16\u8bd1\u200b\u65f6\u200b\u53ef\u4ee5\u200b\u5148\u200b\u89e3\u5f00\u200b\u8fd9\u90e8\u5206\u200b\u6ce8\u91ca\u200b\uff0c\u200b\u7f16\u8bd1\u200b\u9759\u6001\u200b\u5e93\u200ba\u200b\u6216\u8005\u200b\u52a8\u6001\u200b\u5e93\u200ba\n# \u200b\u7f16\u8bd1\u200b\u53ef\u6267\u884c\u6587\u4ef6\u200b\u548c\u200b\u52a8\u6001\u200b\u5e93\u200bB\u200b\u65f6\u200b\uff0c\u200b\u6ce8\u91ca\u200b\u8fd9\u90e8\u5206\u200b\n# add_library(static_lib_a STATIC a.cpp a.h)\n# target_include_directories(static_lib_a PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})\n# target_compile_definitions(static_lib_a PUBLIC ${STATICLIB_ABI_FLAG})\n\nset(LIBA ${CMAKE_SOURCE_DIR}/build_new/libstatic_lib_a.a)\n# set(LIBA ${CMAKE_SOURCE_DIR}/build_old/libstatic_lib_a.a)\n\nadd_library(shared_lib_b SHARED b.cpp)\ntarget_include_directories(shared_lib_b PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})\ntarget_link_libraries(shared_lib_b PRIVATE ${LIBA})\n\nadd_executable(main main.cpp)\ntarget_link_libraries(main PRIVATE shared_lib_b)\n</code></pre><p></p> Bash<pre><code># # \u200b\u6d4b\u8bd5\u200b\u65b0\u200bABI\u200b\u6a21\u5f0f\u200b\n# rm -rf build_new\n# mkdir build_new &amp;&amp; cd build_new\n# cmake .. -DUSE_NEW_ABI=ON\n# make\n# ./main \n\n# # \u200b\u6d4b\u8bd5\u200b\u65e7\u200bABI\u200b\u6a21\u5f0f\u200b\nrm -rf build_old\nmkdir build_old &amp;&amp; cd build_old\ncmake .. -DUSE_NEW_ABI=OFF\nmake\n./main \n</code></pre>"},{"location":"blog/c%E5%BC%80%E5%8F%91%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%B9%8Babi%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/#\u5982\u4f55\u89e3\u51b3abi\u4e0d\u517c\u5bb9","title":"\u5982\u4f55\u200b\u89e3\u51b3\u200bABI\u200b\u4e0d\u200b\u517c\u5bb9","text":"<p>\u200b\u5982\u679c\u200b\u60a8\u200b\u9047\u5230\u200b\u94fe\u63a5\u200b\u5668\u200b\u9519\u8bef\u200b\uff0c\u200b\u63d0\u793a\u200b\u5bf9\u200b\u6d89\u53ca\u200b std::__cxx11 \u200b\u547d\u540d\u200b\u7a7a\u95f4\u200b\u4e2d\u200b\u7c7b\u578b\u200b\u6216\u200b [abi:cxx11] \u200b\u6807\u7b7e\u200b\u7684\u200b\u7b26\u53f7\u200b\u7684\u200b\u672a\u5b9a\u4e49\u200b\u5f15\u7528\u200b\uff0c\u200b\u90a3\u4e48\u200b\u8fd9\u200b\u53ef\u80fd\u200b\u8868\u660e\u200b\u60a8\u200b\u6b63\u5728\u200b\u5c1d\u8bd5\u200b\u94fe\u63a5\u200b\u4f7f\u7528\u200b\u4e0d\u540c\u200b\u7684\u200b _GLIBCXX_USE_CXX11_ABI \u200b\u5b8f\u503c\u200b\u7f16\u8bd1\u200b\u7684\u200b\u76ee\u6807\u200b\u6587\u4ef6\u200b\u3002\u200b\u8fd9\u79cd\u200b\u60c5\u51b5\u200b\u901a\u5e38\u200b\u53d1\u751f\u200b\u5728\u200b\u94fe\u63a5\u200b\u5230\u200b\u4f7f\u7528\u200b\u8f83\u200b\u65e7\u7248\u672c\u200b\u7684\u200b GCC \u200b\u7f16\u8bd1\u200b\u7684\u200b\u7b2c\u4e09\u65b9\u200b\u5e93\u65f6\u200b\u3002\u200b\u5982\u679c\u200b\u65e0\u6cd5\u200b\u4f7f\u7528\u200b\u65b0\u200b\u7684\u200b ABI \u200b\u91cd\u65b0\u200b\u6784\u5efa\u200b\u7b2c\u4e09\u65b9\u200b\u5e93\u200b\uff0c\u200b\u90a3\u4e48\u200b\u60a8\u200b\u5c06\u200b\u9700\u8981\u200b\u4f7f\u7528\u200b\u65e7\u200b\u7684\u200b ABI \u200b\u91cd\u65b0\u200b\u7f16\u8bd1\u200b\u60a8\u200b\u7684\u200b\u4ee3\u7801\u200b\u3002</p> <p>\u200b\u5e76\u975e\u200b\u6240\u6709\u200b\u65b0\u200b\u5e94\u7528\u200b\u4e8c\u8fdb\u5236\u200b\u63a5\u53e3\u200b\uff08ABI\uff09\u200b\u7684\u200b\u4f7f\u7528\u200b\u90fd\u200b\u4f1a\u200b\u5bfc\u81f4\u200b\u7b26\u53f7\u200b\u540d\u79f0\u200b\u53d1\u751f\u53d8\u5316\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u5305\u542b\u200b<code>std::string</code>\u200b\u6210\u5458\u200b\u53d8\u91cf\u200b\u7684\u200b\u7c7b\u200b\uff0c\u200b\u65e0\u8bba\u200b\u4f7f\u7528\u200b\u65e7\u7248\u200b\u8fd8\u662f\u200b\u65b0\u7248\u200bABI\u200b\u8fdb\u884c\u200b\u7f16\u8bd1\u200b\uff0c\u200b\u5176\u200b\u4fee\u9970\u200b\u540e\u200b\u7684\u200b\u540d\u79f0\u200b\u90fd\u200b\u76f8\u540c\u200b\u3002\u200b\u4e3a\u4e86\u200b\u68c0\u6d4b\u200b\u6b64\u7c7b\u200b\u95ee\u9898\u200b\uff0c\u200b\u65b0\u200b\u7684\u200b\u7c7b\u578b\u200b\u548c\u200b\u51fd\u6570\u200b\u4f1a\u200b\u4f7f\u7528\u200b<code>abi_tag</code>\u200b\u5c5e\u6027\u200b\u8fdb\u884c\u200b\u6807\u6ce8\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u7f16\u8bd1\u5668\u200b\u5bf9\u200b\u4f7f\u7528\u200b\u5b83\u4eec\u200b\u7684\u200b\u4ee3\u7801\u200b\u4e2d\u200b\u6f5c\u5728\u200b\u7684\u200bABI\u200b\u4e0d\u200b\u517c\u5bb9\u6027\u200b\u53d1\u51fa\u200b\u8b66\u544a\u200b\u3002\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b<code>-Wabi-tag</code>\u200b\u9009\u9879\u200b\u542f\u7528\u200b\u8fd9\u4e9b\u200b\u8b66\u544a\u200b\u3002</p> <p>\u200b\u89e3\u51b3\u529e\u6cd5\u200b\u4e00\u822c\u200b\u6709\u200b\u4e24\u79cd\u200b\uff1a</p> <ul> <li>\u200b\u91c7\u7528\u200b\u76f8\u540c\u200b\u7684\u200bABI\u3002</li> </ul> <p>\u200b\u5982\u679c\u200b\u4f60\u200b\u7684\u200b\u6240\u6709\u200bso\u200b\u548c\u200b\u53ef\u6267\u884c\u6587\u4ef6\u200b\u90fd\u200b\u662f\u200b\u53ef\u4ee5\u200b\u4ece\u200b\u6e90\u7801\u200b\u81ea\u5df1\u200b\u7f16\u8bd1\u200b\u7684\u200b\uff0c\u200b\u4f60\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u786e\u4fdd\u200b\u5b83\u4eec\u200b\u4f7f\u7528\u200b\u76f8\u540c\u200b\u7684\u200bABI\u3002</p> <ul> <li>\u200b\u5c06\u200b\u4f9d\u8d56\u200b\u5e93\u200b\u901a\u8fc7\u200bc\u200b\u8bed\u8a00\u200b\u63a5\u53e3\u200b\u5bfc\u51fa\u200b\u540e\u200b\uff0c\u200b\u5728\u200b\u9879\u76ee\u200b\u4e2d\u200b\u8c03\u7528\u200bc\u200b\u8bed\u8a00\u200b\u63a5\u53e3\u200b\u3002</li> </ul> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>C++\u200b\u6280\u6cd5\u200b:\u200b\u6a21\u677f\u200b\u5143\u200b\u7f16\u7a0b\u200b\u7f16\u8bd1\u200b\u671f\u200b\u83b7\u53d6\u200b\u7c7b\u200b\u6210\u5458\u200b\u6570\u91cf\u200b</li> <li>C++\u200b\u7684\u200b\u201cBase-from-Member\u201d\u200b\u6280\u6cd5\u200b\u89e3\u51b3\u200b\u4e86\u200b\u4ec0\u4e48\u200b\u95ee\u9898\u200b\uff1f</li> <li>C++20\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u57fa\u4e8e\u200b\u5c5e\u6027\u200b\u6d4b\u8bd5\u200b\u7684\u200bquickcheck-cpp\u200b\u5e93\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/c%E6%8A%80%E6%B3%95%E6%A8%A1%E6%9D%BF%E5%85%83%E7%BC%96%E7%A8%8B%E7%BC%96%E8%AF%91%E6%9C%9F%E8%8E%B7%E5%8F%96%E7%B1%BB%E6%88%90%E5%91%98%E6%95%B0%E9%87%8F/","title":"C++\u200b\u6280\u6cd5\u200b:\u200b\u6a21\u677f\u200b\u5143\u200b\u7f16\u7a0b\u200b\u7f16\u8bd1\u200b\u671f\u200b\u83b7\u53d6\u200b\u7c7b\u200b\u6210\u5458\u200b\u6570\u91cf","text":"<p>C++\u200b\u53cd\u5c04\u200b\u4e2d\u200b\uff0c\u200b\u6709\u4e2a\u200b\u5fc5\u8981\u200b\u7684\u200b\u5c31\u662f\u200b\u9700\u8981\u200b\u83b7\u53d6\u200b\u4e00\u4e2a\u200b\u7c7b\u200b\u7684\u200b\u6210\u5458\u200b\u4e2a\u6570\u200b\uff0c\u200b\u7136\u540e\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u6839\u636e\u200b\u4e2a\u6570\u200b\uff0c\u200b\u5c06\u7c7b\u200b\u7684\u200b\u6210\u5458\u200b\u901a\u8fc7\u200bstd::tie\u200b\u8f6c\u6362\u6210\u200btuple\u3002\u200b\u7ee7\u800c\u200b\u53ef\u4ee5\u200b\u5b9e\u73b0\u200bequal\u3001hash\u3001serialize\u200b\u7b49\u200b\u529f\u80fd\u200b\u3002</p>"},{"location":"blog/c%E6%8A%80%E6%B3%95%E6%A8%A1%E6%9D%BF%E5%85%83%E7%BC%96%E7%A8%8B%E7%BC%96%E8%AF%91%E6%9C%9F%E8%8E%B7%E5%8F%96%E7%B1%BB%E6%88%90%E5%91%98%E6%95%B0%E9%87%8F/#\u57fa\u672c\u539f\u7406","title":"\u57fa\u672c\u539f\u7406","text":"<p>\u200b\u672c\u6587\u200b\u4ecb\u7ecd\u200b\u5206\u6790\u200b\u5982\u4f55\u200b\u83b7\u53d6\u200b\u4e00\u4e2a\u200b\u7c7b\u200b\u7684\u200b\u6210\u5458\u200b\u4e2a\u6570\u200b\u7684\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u901a\u8fc7\u200b\u6a21\u677f\u200b\u5143\u200b\u7f16\u7a0b\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u57fa\u672c\u539f\u7406\u200b\uff1a + \u200b\u7f16\u8bd1\u200b\u65f6\u200b\u8ba1\u7b97\u200b\u7ed3\u6784\u200b\u4f53\u200b\u6210\u5458\u200b\u6570\u91cf\u200b</p> <ul> <li> <p>\u200b\u4f7f\u7528\u200bSFINAE\u200b\u6280\u672f\u200b\uff0c\u200b\u901a\u8fc7\u200b\u9012\u5f52\u200b\u5b9e\u4f8b\u200b\u5316\u200barity_impl\u200b\u6a21\u677f\u200b\u6765\u200b\u63a2\u6d4b\u200b\u7ed3\u6784\u200b\u4f53\u80fd\u200b\u63a5\u53d7\u200b\u7684\u200b\u6700\u5927\u200b\u53c2\u6570\u200b\u6570\u91cf\u200b</p> </li> <li> <p>\u200b\u901a\u8fc7\u200b\u4e00\u4e2a\u200binstance\u200b\u7c7b\u200b\u63d0\u4f9b\u200b\u5230\u200b\u4efb\u610f\u200b\u7c7b\u578b\u200b\u7684\u200b\u9690\u5f0f\u200b\u8f6c\u6362\u200b</p> </li> </ul>"},{"location":"blog/c%E6%8A%80%E6%B3%95%E6%A8%A1%E6%9D%BF%E5%85%83%E7%BC%96%E7%A8%8B%E7%BC%96%E8%AF%91%E6%9C%9F%E8%8E%B7%E5%8F%96%E7%B1%BB%E6%88%90%E5%91%98%E6%95%B0%E9%87%8F/#\u6838\u5fc3\u4ee3\u7801\u5b9e\u73b0","title":"\u6838\u5fc3\u200b\u4ee3\u7801\u200b\u5b9e\u73b0","text":"<p>\u200b\u6838\u5fc3\u200b\u4ee3\u7801\u200b\u5982\u4e0b\u200b\uff1a</p> C++<pre><code>#pragma once\n#include &lt;type_traits&gt;\nnamespace detail {\n\n// instance\u200b\u7c7b\u200b\u7684\u200b\u4f5c\u7528\u200b\uff1a\u200b\u5b9a\u4e49\u200b\u4e86\u200boperator\u200b\u51fd\u6570\u200b\uff0c\u200b\u63d0\u4f9b\u200b\u5230\u200b\u4efb\u610f\u200b\u7c7b\u578b\u200b\u7684\u200b\u9690\u5f0f\u200b\u8f6c\u6362\u200b\u64cd\u4f5c\u7b26\u200b\uff0c\u200b\u7528\u4e8e\u200b\u6a21\u62df\u200b\u6784\u9020\u200bAggregate\u200b\u7c7b\u578b\u200b\u65f6\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u4efb\u610f\u200b\u7c7b\u578b\u200b\u53c2\u6570\u200b\nstruct instance {\n  template &lt;typename Type&gt;\n  operator Type() const;\n};\n\ntemplate &lt;typename Aggregate, typename IndexSequence = std::index_sequence&lt;&gt;,\n          typename = void&gt;\nstruct arity_impl : IndexSequence {};\n\n// \u200b\u7279\u5316\u200b\u7248\u672c\u200b\ntemplate &lt;typename Aggregate, std::size_t... Indices&gt;\nstruct arity_impl&lt;Aggregate, std::index_sequence&lt;Indices...&gt;,\n                  std::void_t&lt;decltype(Aggregate{\n                      (static_cast&lt;void&gt;(Indices), std::declval&lt;instance&gt;())...,\n                      std::declval&lt;instance&gt;()})&gt;&gt;\n    : arity_impl&lt;Aggregate,\n                 std::index_sequence&lt;Indices..., sizeof...(Indices)&gt;&gt; {};\n\n}  // namespace detail\n\ntemplate &lt;typename T&gt;\nconstexpr std::size_t arity() noexcept {\n  // \u200b\u4f7f\u7528\u200bdecay_t\u200b\u53bb\u9664\u200b\u7c7b\u578b\u200b\u4fee\u9970\u200b\uff08\u200b\u5982\u200bconst/volatile/\u200b\u5f15\u7528\u200b\uff09\n  return detail::arity_impl&lt;decay_t&lt;T&gt;&gt;().size();\n}\n</code></pre> <p>\u200b\u9996\u5148\u200b\uff0c\u200b\u5bf9\u200b\u4e0a\u9762\u200b\u7684\u200b\u4ee3\u7801\u200b\u8fdb\u884c\u200b\u62c6\u89e3\u200b\uff0c\u200b\u5206\u200b\u7ec6\u8282\u200b\u8fdb\u884c\u200b\u8ba8\u8bba\u200b\uff1a</p>"},{"location":"blog/c%E6%8A%80%E6%B3%95%E6%A8%A1%E6%9D%BF%E5%85%83%E7%BC%96%E7%A8%8B%E7%BC%96%E8%AF%91%E6%9C%9F%E8%8E%B7%E5%8F%96%E7%B1%BB%E6%88%90%E5%91%98%E6%95%B0%E9%87%8F/#\u7ec6\u82821-\u6784\u9020aggregate\u5bf9\u8c61\u9017\u53f7\u8868\u8fbe\u5f0f","title":"\u7ec6\u8282\u200b1: \u200b\u6784\u9020\u200bAggregate\u200b\u5bf9\u8c61\u200b+\u200b\u9017\u53f7\u200b\u8868\u8fbe\u5f0f","text":"C++<pre><code>Aggregate{\n    (static_cast&lt;void&gt;(Indices), std::declval&lt;instance&gt;())...,\n    std::declval&lt;instance&gt;()}\n</code></pre> \u200b\u8fd9\u200b\u6bb5\u200b\u4ee3\u7801\u200b\u5c1d\u8bd5\u200b\u6784\u9020\u200bAggregate\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u901a\u8fc7\u200b\u4e0d\u65ad\u200b\u589e\u52a0\u200b\u53c2\u6570\u200b\u6570\u91cf\u200b\u76f4\u5230\u200b\u7f16\u8bd1\u200b\u5931\u8d25\u200b\uff0c\u200b\u4ece\u800c\u200b\u786e\u5b9a\u200b\u6700\u5927\u200b\u6709\u6548\u200b\u53c2\u6570\u200b\u6570\u91cf\u200b\u3002 C++<pre><code>(static_cast&lt;void&gt;(Indices), std::declval&lt;instance&gt;())\n</code></pre> \u200b\u8fd9\u200b\u6bb5\u200b\u4ee3\u7801\u200b\u901a\u8fc7\u200bstd::declval&lt;instance&gt;()\u200b\u751f\u6210\u200b\u4e00\u4e2a\u200binstance\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u5e76\u200b\u901a\u8fc7\u200bstatic_cast&lt;void&gt;(Indices)\u200b\u6765\u200b\u907f\u514d\u200b\u7f16\u8bd1\u5668\u200b\u8b66\u544a\u200b\u3002\u200b\u8fd9\u91cc\u200b\u8fd8\u200b\u7528\u5230\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u6280\u672f\u200b\uff0c\u200b\u5c31\u662f\u200bc++\u200b\u4e2d\u200b\u7684\u200b\u9017\u53f7\u200b\u8868\u8fbe\u5f0f\u200b\u3002 <p>C++\u200b\u4e2d\u200b\u7684\u200b\u9017\u53f7\u200b\u8868\u8fbe\u5f0f\u200b\u662f\u200b\u4e00\u79cd\u200b\u7279\u6b8a\u200b\u7684\u200b\u8fd0\u7b97\u7b26\u200b\uff0c\u200b\u5b83\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u591a\u4e2a\u200b\u8868\u8fbe\u5f0f\u200b\u8fde\u63a5\u8d77\u6765\u200b\u5e76\u200b\u6309\u200b\u987a\u5e8f\u200b\u6c42\u503c\u200b\u3002\u200b\u9017\u53f7\u200b\u8868\u8fbe\u5f0f\u200b\u7684\u200b\u4e00\u822c\u200b\u5f62\u5f0f\u200b\u4e3a\u200b\uff1a\u200b\u8868\u8fbe\u5f0f\u200b1, \u200b\u8868\u8fbe\u5f0f\u200b2, \u2026, \u200b\u8868\u8fbe\u5f0f\u200bn\u3002\u200b\u5176\u200b\u6c42\u503c\u200b\u8fc7\u7a0b\u200b\u662f\u200b\u4ece\u5de6\u5230\u53f3\u200b\u4f9d\u6b21\u200b\u8ba1\u7b97\u200b\u6bcf\u4e2a\u200b\u5b50\u200b\u8868\u8fbe\u5f0f\u200b\uff0c\u200b\u6700\u7ec8\u200b\u6574\u4e2a\u200b\u8868\u8fbe\u5f0f\u200b\u7684\u200b\u503c\u200b\u4e3a\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u8868\u8fbe\u5f0f\u200b\uff08\u200b\u8868\u8fbe\u5f0f\u200bn\uff09\u200b\u7684\u200b\u503c\u200b\u3002\u200b\u4f8b\u5982\u200b\uff1a </p>C++<pre><code>int a = (1, 2, 3); // a\u200b\u7684\u200b\u503c\u200b\u4e3a\u200b3\n</code></pre> \u200b\u7ed3\u5408\u200b\u4e0a\u9762\u200b\u7684\u200b\u4ee3\u7801\u200b\uff0c\u200b\u5c31\u200b\u53ea\u4f1a\u200b\u8f93\u5165\u200bstd::declval&lt;instance&gt;()\u200b\u4f5c\u4e3a\u200b\u53c2\u6570\u200b\u6784\u9020\u200bAggregate\u200b\u5bf9\u8c61\u200b\u3002<p></p> <p>\u200b\u53c2\u6570\u200b\u5305\u200b(Indices, instance)\u2026\u200b\u751f\u6210\u200bN\u200b\u4e2a\u200binstance\uff0c\u200b\u989d\u5916\u200b\u6dfb\u52a0\u200b\u7684\u200binstance\u200b\u7528\u4e8e\u200b\u63a2\u6d4b\u200b\u8fb9\u754c\u6761\u4ef6\u200b\u3002\u200b\u4e5f\u200b\u5c31\u662f\u200bindices\u200b\u4e3a\u200b(0, 1)\u200b\u65f6\u200b\uff0c\u200b\u4f20\u9012\u200b3\u200b\u4e2a\u200b\u53c2\u6570\u200b\uff0c\u200b\u5f53\u200bindices\u200b\u4e3a\u200b(0, 1, 2)\u200b\u65f6\u200b\uff0c\u200b\u4f20\u9012\u200b4\u200b\u4e2a\u200b\u53c2\u6570\u200b\u3002</p>"},{"location":"blog/c%E6%8A%80%E6%B3%95%E6%A8%A1%E6%9D%BF%E5%85%83%E7%BC%96%E7%A8%8B%E7%BC%96%E8%AF%91%E6%9C%9F%E8%8E%B7%E5%8F%96%E7%B1%BB%E6%88%90%E5%91%98%E6%95%B0%E9%87%8F/#\u7ec6\u82822sfinae\u6280\u672fvoid_t\u8868\u8fbe\u5f0f\u5408\u6cd5\u6027\u68c0\u67e5","title":"\u7ec6\u8282\u200b2\uff1aSFINAE\u200b\u6280\u672f\u200b+void_t\u200b\u8868\u8fbe\u5f0f\u200b\u5408\u6cd5\u6027\u68c0\u67e5","text":"C++<pre><code>std::void_t&lt;decltype(Aggregate{\n                      (static_cast&lt;void&gt;(Indices), std::declval&lt;instance&gt;())...,\n                      std::declval&lt;instance&gt;()})&gt;&gt;\n</code></pre> <p>\u200b\u8bf4\u660e\u200b\u4e00\u4e0b\u200b\u8fd9\u91cc\u200bstd::void_t\uff0cvoid_t\u200b\u901a\u5e38\u200b\u7ed3\u5408\u200bSFINAE\u200b\u6280\u672f\u200b\u8fdb\u884c\u200b\u5143\u200b\u7f16\u7a0b\u200b\u7684\u200b\u7c7b\u578b\u200b\u8bca\u65ad\u200b\u4e0e\u200b\u8868\u8fbe\u5f0f\u200b\u7684\u200b\u5408\u6cd5\u6027\u68c0\u67e5\u200b\uff0cvoid_t\u200b\u672c\u8eab\u200b\u5b9a\u4e49\u200b\u975e\u5e38\u7b80\u5355\u200b\uff0c\u200b\u5bf9\u4e8e\u200b\u4efb\u610f\u200b\u7c7b\u578b\u200b\uff0c\u200b\u4e43\u81f3\u200b\u53ef\u53d8\u200b\u7684\u200b\u53c2\u6570\u200b\u7c7b\u578b\u200b\uff0c\u200b\u90fd\u200b\u91cd\u200b\u5b9a\u4e49\u200b\u4e3a\u200bvoid\u3002</p> <p>\u200b\u770b\u4e2a\u200b\u4f8b\u5b50\u200b\u4f60\u200b\u5c31\u200b\u660e\u767d\u200b\u4e86\u200b\uff1a</p> <ul> <li>\u200b\u68c0\u6d4b\u200b\u7c7b\u578b\u200b\u6210\u5458\u200b\u662f\u5426\u200b\u5b58\u5728\u200b C++<pre><code>// \u200b\u6cdb\u5316\u200b\u7248\u672c\u200b\uff08\u200b\u9ed8\u8ba4\u200b\u8fd4\u56de\u200b false\uff09\ntemplate&lt;typename T, typename = void&gt;\nstruct has_type_member : std::false_type {};\n\n// \u200b\u7279\u5316\u200b\u7248\u672c\u200b\uff08\u200b\u5f53\u200b T::type \u200b\u5b58\u5728\u200b\u65f6\u200b\u5339\u914d\u200b\uff09\ntemplate&lt;typename T&gt;\nstruct has_type_member&lt;T, std::void_t&lt;typename T::type&gt;&gt; : std::true_type {};\n</code></pre></li> </ul> <p>\u200b\u82e5\u200b T \u200b\u5305\u542b\u200b type \u200b\u6210\u5458\u200b\u7c7b\u578b\u200b\uff0c\u200b\u5219\u200b\u7279\u5316\u200b\u7248\u672c\u200b\u751f\u6548\u200b\uff0c\u200b\u8fd4\u56de\u200b true\u3002 + \u200b\u68c0\u6d4b\u200b\u51fd\u6570\u200b\u662f\u5426\u200b\u5b58\u5728\u200b</p> C++<pre><code>template&lt;typename T, typename = void&gt;\nstruct has_hello_func : std::false_type {};\n\ntemplate&lt;typename T&gt;\nstruct has_hello_func&lt;T, std::void_t&lt;decltype(std::declval&lt;T&gt;().hello())&gt;&gt; \n    : std::true_type {};\n</code></pre>"},{"location":"blog/c%E6%8A%80%E6%B3%95%E6%A8%A1%E6%9D%BF%E5%85%83%E7%BC%96%E7%A8%8B%E7%BC%96%E8%AF%91%E6%9C%9F%E8%8E%B7%E5%8F%96%E7%B1%BB%E6%88%90%E5%91%98%E6%95%B0%E9%87%8F/#\u7ec6\u82823index_sequence\u7684\u4f7f\u7528","title":"\u7ec6\u8282\u200b3\uff1aindex_sequence\u200b\u7684\u200b\u4f7f\u7528","text":"<p>std::index_sequence\u200b\u662f\u200bC++14\u200b\u5f15\u5165\u200b\u7684\u200b\u7f16\u8bd1\u200b\u671f\u200b\u6574\u6570\u200b\u5e8f\u5217\u200b\u5de5\u5177\u200b\uff0c\u200b\u4e3b\u8981\u200b\u7528\u4e8e\u200b\u6a21\u677f\u200b\u5143\u200b\u7f16\u7a0b\u200b\u4e2d\u200b\u5904\u7406\u200b\u53c2\u6570\u200b\u5305\u200b\u548c\u200b\u7d22\u5f15\u200b\u64cd\u4f5c\u200b\u3002</p> <p>\u200b\u4f8b\u5982\u200b\uff1a </p>C++<pre><code>template&lt;size_t... I&gt;\nconstexpr auto make_squares(std::index_sequence&lt;I...&gt;) {\n    return std::array{I*I...};\n}\nauto arr = make_squares(std::make_index_sequence&lt;5&gt;{}); // {0,1,4,9,16}\n</code></pre><p></p>"},{"location":"blog/c%E6%8A%80%E6%B3%95%E6%A8%A1%E6%9D%BF%E5%85%83%E7%BC%96%E7%A8%8B%E7%BC%96%E8%AF%91%E6%9C%9F%E8%8E%B7%E5%8F%96%E7%B1%BB%E6%88%90%E5%91%98%E6%95%B0%E9%87%8F/#\u7ec6\u82824-\u9012\u5f52\u63a2\u6d4b\u7684\u673a\u5236","title":"\u7ec6\u8282\u200b4: \u200b\u9012\u5f52\u200b\u63a2\u6d4b\u200b\u7684\u200b\u673a\u5236","text":"C++<pre><code>template &lt;typename Aggregate, std::size_t... Indices&gt;\nstruct arity_impl&lt;Aggregate, std::index_sequence&lt;Indices...&gt;,\n                  // \u200b\u672c\u6b21\u200b\u63a2\u6d4b\u200b\u7684\u200b\u53c2\u6570\u200b\u5217\u8868\u200b\uff0c\u200b\u7528\u4e8e\u200b\u63a2\u6d4b\u200bAggregate\u200b\u80fd\u200b\u63a5\u53d7\u200b\u7684\u200b\u53c2\u6570\u200b\u6570\u91cf\u200b\uff0c\u200b\u53c2\u6570\u200b\u6570\u91cf\u200b\u4e3a\u200bsizeof...(Indices)+ 1\n                  std::void_t&lt;decltype(Aggregate{\n                      (static_cast&lt;void&gt;(Indices), std::declval&lt;instance&gt;())...,\n                      std::declval&lt;instance&gt;()})&gt;&gt;\n    // \u200b\u9012\u5f52\u200b\u63a2\u6d4b\u200b\uff0c\u200b\u6bcf\u6b21\u200b\u9012\u5f52\u200b\u589e\u52a0\u200b\u4e00\u4e2a\u200b\u53c2\u6570\u200b\uff0c\u200b\u589e\u52a0\u200b\u7684\u200b\u53c2\u6570\u200b\u4e3a\u200bsizeof...(Indices)\n    : arity_impl&lt;Aggregate,\n                 std::index_sequence&lt;Indices..., sizeof...(Indices)&gt;&gt; {};\n</code></pre> <p>\u200b\u9012\u5f52\u200b\u63a2\u6d4b\u200b\u673a\u5236\u200b\uff1a + \u200b\u4ece\u7a7a\u200b\u53c2\u6570\u200b\u5217\u8868\u200b\u5f00\u59cb\u200b(std::index_sequence&lt;&gt;)</p> <ul> <li> <p>\u200b\u6bcf\u6b21\u200b\u9012\u5f52\u200b\u589e\u52a0\u200b\u4e00\u4e2a\u200b\u53c2\u6570\u200b(std::index_sequence&lt;Indices\u2026, sizeof\u2026(Indices)&gt;)\uff0c\u200b\u6bd4\u5982\u200b\u539f\u6765\u200b\u662f\u200b\uff1astd::index_sequence&lt;&gt;\uff0c\u200b\u4e0b\u200b\u4e00\u6b21\u200b\u9012\u5f52\u200b\u53d8\u4e3a\u200bstd::index_sequence&lt;0&gt;\uff0c\u200b\u518d\u4e0b\u200b\u4e00\u6b21\u200b\u9012\u5f52\u200b\u53d8\u4e3a\u200bstd::index_sequence&lt;0, 1&gt;\uff0c\u200b\u4ee5\u6b64\u7c7b\u63a8\u200b\u3002</p> </li> <li> <p>\u200b\u5f53\u200b\u53c2\u6570\u200b\u6570\u91cf\u200b\u8d85\u8fc7\u200bAggregate\u200b\u7c7b\u578b\u200b\u6210\u5458\u200b\u6570\u91cf\u200b\u65f6\u200b\uff0cSFINAE\u200b\u4f7f\u200b\u7279\u5316\u200b\u7248\u672c\u200b\u5931\u6548\u200b</p> </li> </ul>"},{"location":"blog/c%E6%8A%80%E6%B3%95%E6%A8%A1%E6%9D%BF%E5%85%83%E7%BC%96%E7%A8%8B%E7%BC%96%E8%AF%91%E6%9C%9F%E8%8E%B7%E5%8F%96%E7%B1%BB%E6%88%90%E5%91%98%E6%95%B0%E9%87%8F/#\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u7406\u89e3\u8ba1\u7b97\u8fc7\u7a0b","title":"\u901a\u8fc7\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b\u7406\u89e3\u200b\u8ba1\u7b97\u200b\u8fc7\u7a0b\u200b\ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350","text":"<p>arity&lt;T&gt;()\u200b\u51fd\u6570\u200b\u6a21\u677f\u200b\u53ef\u4ee5\u200b\u8fd4\u56de\u200b\u4efb\u610f\u200b\u7c7b\u578b\u200bT\u200b\u7684\u200b\u6210\u5458\u200b\u6570\u91cf\u200b\uff0c\u200b\u5b8c\u5168\u200b\u5728\u200b\u7f16\u8bd1\u200b\u671f\u200b\u8ba1\u7b97\u200b\uff0c\u200b\u96f6\u200b\u8fd0\u884c\u200b\u65f6\u200b\u5f00\u9500\u200b\u3002</p> C++<pre><code>struct Point { int x; double y; };\n\n// \u200b\u5c1d\u8bd5\u200b\u6784\u9020\u200b\uff1a\nPoint{\n    instance{},  // \u200b\u5339\u914d\u200bx\n    instance{},  // \u200b\u5339\u914d\u200by \n    instance{}   // \u200b\u89e6\u53d1\u200bSFINAE (Point\u200b\u53ea\u6709\u200b2\u200b\u4e2a\u200b\u6210\u5458\u200b)\n}\n</code></pre> <p>\u200b\u5f53\u200b\u53c2\u6570\u200b\u6570\u91cf\u200b=3\u200b\u65f6\u200b\u6784\u9020\u200b\u5931\u8d25\u200b\uff0c\u200b\u9012\u5f52\u200b\u7ec8\u6b62\u200b\uff0c\u200b\u786e\u5b9a\u200barity=2\u3002</p> <p>\u200b\u4ee5\u200b\u7ed3\u6784\u200b\u4f53\u200bPoint\u200b\u4e3a\u4f8b\u200b\uff0c\u200b\u9010\u6b65\u200b\u89e3\u91ca\u200b\u8fd9\u4e2a\u200b\u6a21\u677f\u200b\u7279\u5316\u200b\u7684\u200b\u6267\u884c\u200b\u8fc7\u7a0b\u200b\uff1a</p> <ul> <li>\u200b\u7b2c\u4e00\u6b65\u200b, \u200b\u5c1d\u8bd5\u200b\u5339\u914d\u200b\u7279\u5316\u200b\u7248\u672c\u200b\uff08\u200b\u5e26\u200bstd::void_t\u200b\u7684\u200b\u7248\u672c\u200b\uff09</li> </ul> <p></p>C++<pre><code>arity_impl&lt;Point, std::index_sequence&lt;&gt;&gt;\n</code></pre> \u200b\u6b64\u65f6\u200bIndices\u200b\u5305\u4e3a\u200b\u7a7a\u200b\uff0c\u200b\u5c1d\u8bd5\u200b\u6784\u9020\u200b\uff1a C++<pre><code>Point{instance{}}\n</code></pre> \u200b\u6784\u9020\u200b\u6210\u529f\u200b\uff08\u200b\u5339\u914d\u200b1\u200b\u4e2a\u200b\u6210\u5458\u200b\uff09\uff0c\u200b\u89e6\u53d1\u200b\u9012\u5f52\u200b\uff1a<p></p> <ul> <li>\u200b\u7b2c\u4e00\u6b21\u200b\u9012\u5f52\u200b\uff1a</li> </ul> <p></p>C++<pre><code>arity_impl&lt;Point, std::index_sequence&lt;0&gt;&gt;\n</code></pre> \u200b\u5c1d\u8bd5\u200b\u6784\u9020\u200b\uff1a C++<pre><code>Point{instance{}, instance{}}\n</code></pre> \u200b\u6784\u9020\u200b\u6210\u529f\u200b\uff08\u200b\u5339\u914d\u200b2\u200b\u4e2a\u200b\u6210\u5458\u200b\uff09, \u200b\u89e6\u53d1\u200b\u9012\u5f52\u200b<p></p> <ul> <li>\u200b\u7b2c\u4e8c\u6b21\u200b\u9012\u5f52\u200b\uff1a</li> </ul> C++<pre><code>arity_impl&lt;Point, std::index_sequence&lt;0,1&gt;&gt;\n</code></pre> <p>\u200b\u5c1d\u8bd5\u200b\u6784\u9020\u200b\uff1a</p> C++<pre><code>Point{instance{}, instance{}, instance{}}\n</code></pre> <p>\u200b\u6784\u9020\u200b\u5931\u8d25\u200b\uff08\u200b\u8d85\u8fc7\u200b2\u200b\u4e2a\u200b\u53c2\u6570\u200b\uff09, \u200b\u9012\u5f52\u200b\u7ec8\u6b62\u200b\u3002 \u200b\u6700\u7ec8\u200b\u7ee7\u627f\u200barity_impl&lt;Point, std::index_sequence&lt;0,1&gt;&gt;, size()\u200b\u8fd4\u56de\u200b2\u3002</p> C++<pre><code>Point p1 = {};\n\nPoint p2 = {1};\n\nPoint p3 = {1, 2};\n\nPoint p4 = {1, 2, 3}; // error, \u200b\u8d85\u8fc7\u200b2\u200b\u4e2a\u200b\u53c2\u6570\u200b\n</code></pre> <p>\u200b\u901a\u8fc7\u200b\u8fd9\u4e2a\u200b\u4f8b\u5b50\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\uff0c\u200b\u901a\u8fc7\u200b\u9012\u5f52\u200b\u63a2\u6d4b\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u786e\u5b9a\u200b\u4efb\u610f\u200b\u7c7b\u578b\u200b\u7684\u200b\u6210\u5458\u200b\u6570\u91cf\u200b\u3002</p> <p>\u200b\u5177\u4f53\u200b\u4f7f\u7528\u200b\uff1a</p> <p></p>C++<pre><code>int main(){\n  int nums = cista::arity&lt;Point&gt;();\n  std::cout &lt;&lt; nums &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre> \u200b\u5b8c\u6574\u200b\u4f8b\u5b50\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200bKenForever1/cpp_idioms\u3002<p></p> <ul> <li>C++\u200b\u5f00\u53d1\u200b\u5e38\u89c1\u95ee\u9898\u200b\u4e4b\u200bABI\u200b\u517c\u5bb9\u6027\u95ee\u9898\u200b</li> <li>C++\u200b\u6280\u6cd5\u200b\uff1a\u200b\u5982\u4f55\u200b\u4e3a\u200b\u4e00\u4e2a\u200b\u7c7b\u200b\u52a8\u6001\u200b\u9644\u52a0\u200b\u4efb\u610f\u200b\u7c7b\u578b\u200b\u6570\u636e\u200b</li> <li>C++\u200b\u6280\u6cd5\u200b\uff1aiguana\u200b\u5e8f\u5217\u5316\u200b\u5e93\u4e2d\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200benum reflection\u200b\u53cd\u5c04\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/c%E7%9A%84base-from-member%E6%8A%80%E6%B3%95%E8%A7%A3%E5%86%B3%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98/","title":"C++\u200b\u7684\u200b\u201cBase-from-Member\u201d\u200b\u6280\u6cd5\u200b\u89e3\u51b3\u200b\u4e86\u200b\u4ec0\u4e48\u200b\u95ee\u9898\u200b\uff1f","text":"<p>C++ has indeed become too \u201cexpert friendly\u201d \u2013 Bjarne Stroustrup</p> <p>Bjarne Stroustrup \u200b\u7684\u200b\u8bf4\u200b\u5f97\u200b\u5f88\u200b\u5bf9\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u4e13\u5bb6\u200b\u4eec\u200b\u5bf9\u200b C++\u200b\u8bed\u8a00\u200b\u4e2d\u200b\u7684\u200b\u60ef\u7528\u200b\u6cd5\u200b\u975e\u5e38\u200b\u719f\u6089\u200b\u3002\u200b\u968f\u7740\u200b\u7a0b\u5e8f\u5458\u200b\u7406\u89e3\u200b\u7684\u200b\u60ef\u7528\u200b\u6cd5\u200b\u7684\u200b\u589e\u52a0\u200b\uff0c\u200b\u8be5\u200b\u8bed\u8a00\u200b\u5bf9\u200b\u4ed6\u4eec\u200b\u6765\u8bf4\u200b\u53d8\u5f97\u200b\u66f4\u52a0\u200b\u53cb\u597d\u200b\u3002 \u200b\u8fd9\u200b\u7bc7\u6587\u7ae0\u200b\u4ecb\u7ecd\u200b\u7684\u200b\u201cBase-from-Member\u201d\u200b\u5c31\u662f\u200b c++\u200b\u4e2d\u200b\u7684\u200b\u4e00\u79cd\u200b\u60ef\u7528\u200b\u6cd5\u200b\uff08idioms\uff09\u3002\u200b\u901a\u8fc7\u200b\u638c\u63e1\u200b\u73b0\u4ee3\u200b C++ \u200b\u60ef\u7528\u200b\u6cd5\u200b\uff0c\u200b\u63d0\u5347\u200b\u8fd9\u65b9\u9762\u200b\u7684\u200b\u77e5\u8bc6\u200b\uff0cC++\u200b\u5bf9\u200b\u6211\u4eec\u200b\u6765\u8bf4\u200b\u5c31\u200b\u66f4\u52a0\u200b\u53cb\u597d\u200b\u3002</p>"},{"location":"blog/c%E7%9A%84base-from-member%E6%8A%80%E6%B3%95%E8%A7%A3%E5%86%B3%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98/#base-from-member\u6280\u6cd5\u7684\u76ee\u7684","title":"\u201cBase-from-Member\u201d\u200b\u6280\u6cd5\u200b\u7684\u200b\u76ee\u7684","text":"<p>\u201cBase-from-Member\u201d\u200b\u6280\u6cd5\u200b\u7684\u200b\u76ee\u7684\u200b\u662f\u200b\uff0c\u200b\u89e3\u51b3\u200b C++\u200b\u5728\u200b\u7ee7\u627f\u200b\u4e2d\u200b\uff0c\u200b\u5982\u4f55\u200b\u521d\u59cb\u5316\u200b\u4e00\u4e2a\u200b\u4f9d\u8d56\u200b\u6d3e\u751f\u7c7b\u200b\uff08\u200b\u5b50\u7c7b\u200b\uff09\u200b\u6210\u5458\u200b\u53d8\u91cf\u200b\u7684\u200b\u57fa\u7c7b\u200b\u3002</p> <p></p> <p>\u200b\u5148\u200b\u6765\u200b\u770b\u770b\u200b\uff0c\u200b\u4e3a\u4ec0\u4e48\u200b\u4f1a\u200b\u5b58\u5728\u200b\u8fd9\u4e2a\u200b\u95ee\u9898\u200b\u3002 \u200b\u5728\u200b C++\u200b\u4e2d\u200b\uff0c\u200b\u6709\u200b\u4e00\u4e2a\u200b\u6cd5\u5219\u200b\u5c31\u662f\u200b\uff0c\u200b\u5148\u200b\u5b8c\u6210\u200b\u6240\u6709\u200b\u7684\u200b\u57fa\u7c7b\u200b\u521d\u59cb\u5316\u200b\uff0c\u200b\u7136\u540e\u200b\u518d\u200b\u662f\u200b\u6d3e\u751f\u7c7b\u200b\uff08\u200b\u5b50\u7c7b\u200b\uff09\u200b\u7684\u200b\u6240\u6709\u200b\u6210\u5458\u200b\u53d8\u91cf\u200b\u521d\u59cb\u5316\u200b\u3002</p> <p>\u200b\u4e3a\u4ec0\u4e48\u200b\u5462\u200b\uff1f \u200b\u8fd9\u200b\u662f\u56e0\u4e3a\u200b\u6d3e\u751f\u7c7b\u200b\u7684\u200b\u6210\u5458\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u4f7f\u7528\u200b\u5bf9\u8c61\u200b\u7684\u200b\u57fa\u7c7b\u200b\u90e8\u5206\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u6240\u6709\u200b\u7684\u200b\u57fa\u7c7b\u200b\u5fc5\u987b\u200b\u5728\u200b\u6d3e\u751f\u7c7b\u200b\u7684\u200b\u6210\u5458\u200b\u4e4b\u524d\u200b\u88ab\u200b\u521d\u59cb\u5316\u200b\u3002 \u200b\u4f46\u662f\u200b\uff0c\u200b\u6709\u4e9b\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u6d3e\u751f\u7c7b\u200b\u4e2d\u200b\u53ef\u7528\u200b\u7684\u200b\u6570\u636e\u200b\u6210\u5458\u200b\u53bb\u200b\u521d\u59cb\u5316\u200b\u6211\u4eec\u200b\u7684\u200b\u57fa\u7c7b\u200b\u3002 \u200b\u4e0d\u200b\u77e5\u9053\u200b\u4f60\u200b\u53d1\u73b0\u200b\u6ca1\u200b\uff0c\u200b\u8fd9\u200b\u5c31\u200b\u4ea7\u751f\u200b\u4e86\u200b\u51b2\u7a81\u200b\u3002\u200b\u8fd9\u200b\u4e0a\u9762\u200b\u63d0\u5230\u200b\u7684\u200b\u89c4\u5219\u200b\u76f8\u200b\u77db\u76fe\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u4f20\u9012\u200b\u7ed9\u200b\u57fa\u7c7b\u200b\u6784\u9020\u51fd\u6570\u200b\u7684\u200b\u53c2\u6570\u200b\uff08\u200b\u6d3e\u751f\u7c7b\u200b\u7684\u200b\u4e00\u4e2a\u200b\u6210\u5458\u200b\uff09\u200b\u5fc5\u987b\u200b\u5b8c\u5168\u200b\u521d\u59cb\u5316\u200b\u3002\u200b\u8fd9\u200b\u5c31\u200b\u4ea7\u751f\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u5faa\u73af\u200b\u521d\u59cb\u5316\u200b\u95ee\u9898\u200b\u3002</p>"},{"location":"blog/c%E7%9A%84base-from-member%E6%8A%80%E6%B3%95%E8%A7%A3%E5%86%B3%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98/#\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u53d1\u73b0\u95ee\u9898","title":"\u901a\u8fc7\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b\u53d1\u73b0\u200b\u95ee\u9898","text":"<p>\u200b\u6211\u4eec\u200b\u901a\u8fc7\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b\u770b\u200b\u4e00\u4e0b\u200b\u8fd9\u4e2a\u200b\u95ee\u9898\u200b\uff1a</p> C++<pre><code>#include &lt;streambuf&gt;\n#include &lt;ostream&gt;\n\nnamespace std {\n  class streambuf;\n  class ostream {\n    explicit ostream(std::streambuf * buf);\n    //...\n  };\n}\n\n// A customization of streambuf.\nclass fdoutbuf : public std::streambuf\n{\npublic:\n    explicit fdoutbuf( int fd );\n    //...\n};\n\nclass fdostream : public std::ostream\n{\nprotected:\n    fdoutbuf buf;\npublic:\n    explicit fdostream( int fd )\n        : buf( fd ), std::ostream( &amp;buf )\n        // This is not allowed: buf can't be initialized before std::ostream.\n        // std::ostream needs a std::streambuf object defined inside fdoutbuf.\n    {}\n};\n</code></pre> <p>\u200b\u8fd9\u4e2a\u200b\u4f8b\u5b50\u200b\u6765\u6e90\u4e8e\u200bBoost libraries\u3002 \u200b\u8bb2\u200b\u7684\u200b\u662f\u200b\uff1a</p> <ul> <li>\u200b\u901a\u8fc7\u200b\u7ee7\u627f\u200b streambuf \u200b\u7c7b\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u81ea\u5b9a\u4e49\u200b\u7684\u200b fdoutbuf \u200b\u7c7b\u200b\u3002</li> <li>fdoutbuf \u200b\u7c7b\u200b\u58f0\u660e\u200b\u4e86\u200b\u4e00\u4e2a\u200b fdostream \u200b\u7684\u200b\u6210\u5458\u200b\u53d8\u91cf\u200b\u3002\u200b\u7528\u6765\u200b\u521d\u59cb\u5316\u200b fdostream \u200b\u7684\u200b\u57fa\u7c7b\u200b std::ostream\u3002</li> <li>std::ostream \u200b\u7684\u200b\u521d\u59cb\u5316\u200b\u9700\u8981\u200b fdoutbuf \u200b\u7c7b\u578b\u200b\u7684\u200b\u6210\u5458\u200b\u53d8\u91cf\u200b\u3002   \u200b\u8fd9\u200b\u4e0d\u200b\u5c31\u200b\u4ea7\u751f\u200b\u4e86\u200b\u4e0a\u9762\u200b\u7684\u200b\u57fa\u7c7b\u200b\u548c\u200b\u5b50\u7c7b\u200b\u6210\u5458\u200b\u53d8\u91cf\u200b\u7684\u200b\u5faa\u73af\u200b\u521d\u59cb\u5316\u200b\u95ee\u9898\u200b\u4e86\u200b\u5417\u200b\uff1f</li> </ul>"},{"location":"blog/c%E7%9A%84base-from-member%E6%8A%80%E6%B3%95%E8%A7%A3%E5%86%B3%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98/#\u5982\u4f55\u89e3\u51b3\u5faa\u73af\u521d\u59cb\u5316\u95ee\u9898\u5462","title":"\u5982\u4f55\u200b\u89e3\u51b3\u200b\u5faa\u73af\u200b\u521d\u59cb\u5316\u200b\u95ee\u9898\u200b\u5462\u200b\uff1f","text":"<p>\u200b\u4eca\u5929\u200b\u5c06\u200b\u7684\u200b\u8fd9\u4e2a\u200b\u6280\u6cd5\u200b\u201cbase-from-member\u201d\uff0c\u200b\u4f7f\u7528\u200b\u5230\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u89c4\u5219\u200b\u3002\u200b\u5c31\u662f\u200b\u57fa\u7c7b\u200b\u521d\u59cb\u5316\u200b\u662f\u200b\u6309\u7167\u200b\u58f0\u660e\u200b\u7684\u200b\u987a\u5e8f\u200b\u8fdb\u884c\u200b\u7684\u200b\u3002\u200b\u6bd4\u5982\u200b\uff1a</p> C++<pre><code>class A;\n\nclass B;\n\nclass C: A, B {\n\n    M m;\n}\n</code></pre> <p>C \u200b\u7c7b\u200b\u7684\u200b\u57fa\u7c7b\u200b\u521d\u59cb\u5316\u200b\u987a\u5e8f\u200b\u662f\u200b\uff1a\u200b\u5148\u200b A\uff0c\u200b\u540e\u200b B\uff0c\u200b\u7136\u540e\u200b\u518d\u200b\u662f\u200b C \u200b\u7684\u200b\u6210\u5458\u200b m\u3002</p> <p>\u200b\u90a3\u4e48\u200b\u6211\u4eec\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u6dfb\u52a0\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u7c7b\u200b MC, C \u200b\u7c7b\u53bb\u200b\u7ee7\u627f\u200b MC \u200b\u7c7b\u200b\uff0cMC \u200b\u7c7b\u200b\u8d1f\u8d23\u200b\u521d\u59cb\u5316\u200b M m \u200b\u8fd9\u4e2a\u200b\u6210\u5458\u200b\u3002\u200b\u5e76\u4e14\u200b\u7ee7\u627f\u200b\u987a\u5e8f\u200b\u4e0a\u200b MC \u200b\u5728\u200b A\u3001B \u200b\u7684\u200b\u524d\u9762\u200b\u3002</p> C++<pre><code>class MC{\n    M m;\n}\n\nclass C: MC, A, B{}\n</code></pre> <p>\u200b\u5728\u200b\u8fd9\u4e2a\u200b\u6280\u5de7\u200b\u4e2d\u200b\uff0c\u200b\u6dfb\u52a0\u200b\u4e00\u4e2a\u200b\u65b0\u7c7b\u200b\u53ea\u662f\u200b\u4e3a\u4e86\u200b\u521d\u59cb\u5316\u200b\u6d3e\u751f\u7c7b\u200b\u4e2d\u200b\u5bfc\u81f4\u200b\u95ee\u9898\u200b\u7684\u200b\u6210\u5458\u200b\u3002\u200b\u8fd9\u4e2a\u200b\u65b0\u7c7b\u200b\u5728\u200b\u6240\u6709\u200b\u5176\u4ed6\u200b\u57fa\u7c7b\u200b\u4e4b\u524d\u200b\u88ab\u200b\u5f15\u5165\u200b\u5230\u200b\u57fa\u7c7b\u200b\u5217\u8868\u200b\u4e2d\u200b\u3002\u200b\u56e0\u4e3a\u200b\u65b0\u7c7b\u200b\u5728\u200b\u9700\u8981\u200b\u5b8c\u5168\u200b\u6784\u9020\u200b\u53c2\u6570\u200b\u7684\u200b\u57fa\u7c7b\u200b\u4e4b\u524d\u200b\u51fa\u73b0\u200b\uff0c\u200b\u6240\u4ee5\u200b\u5b83\u200b\u9996\u5148\u200b\u88ab\u200b\u521d\u59cb\u5316\u200b\uff0c\u200b\u7136\u540e\u200b\u53ef\u4ee5\u200b\u50cf\u200b\u5f80\u5e38\u200b\u4e00\u6837\u200b\u4f20\u9012\u200b\u5f15\u7528\u200b\u3002</p> <p>\u200b\u901a\u8fc7\u200b\u8fd9\u79cd\u200b\u65b9\u5f0f\u200b\u89e3\u51b3\u200b\u540e\u200b\u7684\u200b\u4ee3\u7801\u200b\uff1a</p> C++<pre><code>#include &lt;streambuf&gt;\n#include &lt;ostream&gt;\n\nclass fdoutbuf : public std::streambuf\n{\npublic:\n    explicit fdoutbuf(int fd);\n    //...\n};\n\nstruct fdostream_pbase // A newly introduced class.\n{\n    fdoutbuf sbuffer; // The member moved 'up' the hierarchy.\n    explicit fdostream_pbase(int fd)\n        : sbuffer(fd)\n    {}\n};\n\nclass fdostream\n    : protected fdostream_pbase // This class will be initialized before the next one.\n    , public std::ostream\n{\npublic:\n    explicit fdostream(int fd)\n        : fdostream_pbase(fd),   // Initialize the newly added base before std::ostream.\n          std::ostream(&amp;sbuffer) //  Now safe to pass the pointer.\n    {}\n    //...\n};\n\nint main()\n{\n  fdostream standard_out(1);\n  standard_out &lt;&lt; \"Hello, World\\n\";\n  return 0;\n}\n</code></pre> <p>\u200b\u5728\u200b\u89e3\u51b3\u200b\u540e\u200b\u7684\u200b\u4ee3\u7801\u200b\u4e2d\u200b\uff0c\u200b\u52a0\u5165\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u7c7b\u200b fdostream_pbase\uff0c\u200b\u6211\u4eec\u200b\u628a\u200b fdostream \u200b\u7c7b\u4e2d\u200b\u7684\u200b\u6210\u5458\u200b\u53d8\u91cf\u200b sbuffer \u200b\u79fb\u52a8\u200b\u5230\u200b\u5b83\u200b\u4e2d\u200b\u4e86\u200b\u3002\u200b\u7136\u540e\u200b\u8ba9\u200b fdostream \u200b\u5148\u200b\u7ee7\u627f\u200b\u81ea\u200b fdostream_pbase\u3002\u200b\u7136\u540e\u200b\u518d\u200b\u7ee7\u627f\u200b std::ostream\uff0c\u200b\u5e76\u4e14\u200b\u628a\u200b sbuffer \u200b\u6307\u9488\u200b\u4f20\u9012\u200b\u7ed9\u200b std::ostream\u3002 \u200b\u4ece\u800c\u200b\uff0c\u200b\u4fdd\u8bc1\u200b\u4e86\u200b sbuffer \u200b\u5148\u200b\u521d\u59cb\u5316\u200b\uff0c\u200b\u7136\u540e\u200b\u518d\u200b\u521d\u59cb\u5316\u200b std::ostream\uff0c\u200b\u8fd9\u6837\u200b\u6307\u9488\u200b\u53ef\u4ee5\u200b\u5b89\u5168\u200b\u4f20\u9012\u200b\u7ed9\u200b\u6784\u9020\u51fd\u6570\u200b\u4e86\u200b\u3002</p> <p>\u200b\u4f60\u200b\u5b66\u4f1a\u200b\u4e86\u200b\u8fd9\u4e2a\u200b\u6280\u6cd5\u200b\u4e86\u200b\u5417\u200b\uff1f\u200b\u522b\u7740\u6025\u200b\uff0c\u200b\u6211\u4eec\u200b\u770b\u200b\u4e00\u4e2a\u200b\u5b9e\u6218\u200b\uff0c\u200b\u5728\u200b\u5b9e\u9645\u200b\u7684\u200b\u4ee3\u7801\u200b\u4e2d\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u6784\u9020\u200b\u4e00\u4e2a\u200b\u6a21\u677f\u200b\u7c7b\u200b detail::BaseFromMember\u3002</p>"},{"location":"blog/c%E7%9A%84base-from-member%E6%8A%80%E6%B3%95%E8%A7%A3%E5%86%B3%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98/#detailbasefrommember-\u6a21\u677f\u7c7b\u65b9\u5f0f\u89e3\u51b3","title":"detail::BaseFromMember \u200b\u6a21\u677f\u200b\u7c7b\u200b\u65b9\u5f0f\u200b\u89e3\u51b3","text":"<p>\u200b\u6a21\u677f\u200b\u7c7b\u200b detail::BaseFromMember \u200b\u7c7b\u200b\u8fd9\u4e2a\u200b\u4f8b\u5b50\u200b\u6765\u6e90\u4e8e\u200b CVCUDA \u200b\u9879\u76ee\u200b\u4e2d\u200b\u7684\u200b\u6e90\u7801\u200b\u3002</p> <p>\u200b\u4f7f\u7528\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b BaseFromMember\u200b\u5b9a\u4e49\u200b\u5305\u542b\u200b Bar \u200b\u7c7b\u578b\u200b\u6210\u5458\u200b\u7684\u200b\u57fa\u7c7b\u200b\u3002\u200b\u5982\u679c\u200b Far \u200b\u7c7b\u200b\u4e5f\u200b\u662f\u200b\u4e00\u4e2a\u200b\u57fa\u7c7b\u200b\uff0c\u200b\u5b83\u200b\u7684\u200b\u521d\u59cb\u5316\u200b\u4f9d\u8d56\u4e8e\u200b Bar \u200b\u7c7b\u578b\u200b\u7684\u200b\u6210\u5458\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b Foo(BaseFromMember::member)\u3002\u200b\u5982\u679c\u200b\u4f9d\u8d56\u200b\u591a\u4e2a\u200b\u6210\u5458\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u6210\u5458\u200b\u662f\u200b\u540c\u4e00\u4e2a\u200b\u7c7b\u578b\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u7ed9\u200b\u4ed6\u4eec\u200b\u4e00\u4e2a\u200b ID \u200b\u533a\u5206\u200b\u3002</p> C++<pre><code>struct Bar\n{\n};\n\nstruct Foo\n{\n    Foo(Bar &amp;, Bar * = nullptr);\n};\n\nstruct A\n    : BaseFromMember&lt;Bar&gt;,\n      Foo\n{\n    using MemberBar = BaseFromMember&lt;Bar&gt;;\n\n    A()\n        : Foo(MemberBar::member)\n    {\n    }\n};\n\nstruct B\n    : BaseFromMember&lt;Bar, 0&gt;,\n      BaseFromMember&lt;Bar, 1&gt;,\n      Foo\n{\n    using MemberBar0 = BaseFromMember&lt;Bar, 0&gt;;\n    using MemberBar1 = BaseFromMember&lt;Bar, 1&gt;;\n\n    B()\n        : Foo(MemberBar0::member, MemberBar1::member)\n    {\n    }\n};\n</code></pre> <p>\u200b\u770b\u770b\u200b\u8fd9\u4e2a\u200b\u6a21\u677f\u200b\u7c7b\u200b\u5177\u4f53\u200b\u600e\u4e48\u200b\u5b9e\u73b0\u200b\u7684\u200b\uff1a</p> C++<pre><code>template &lt;class T, int ID = 0&gt;\nclass BaseFromMember\n{\npublic:\n    T member;\n};\n\ntemplate &lt;class T, int ID&gt;\nclass BaseFromMember&lt;T &amp;, ID&gt;\n{\npublic:\n    BaseFromMember(T &amp;m)\n        : member(m)\n    {\n    }\n\n    T &amp;member;\n};\n</code></pre> <p>\u200b\u770b\u200b\u4e86\u200b\u4ee3\u7801\u200b\u662f\u4e0d\u662f\u200b\u5f88\u200b\u7b80\u5355\u200b\uff0c\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u6a21\u677f\u200b\u7c7b\u200b\uff0c\u200b\u58f0\u660e\u200b\u4e86\u200b T &amp;member \u200b\u7684\u200b\u6210\u5458\u200b\uff0c\u200b\u91c7\u7528\u200b\u7279\u5316\u200b\u7684\u200b\u65b9\u5f0f\u200b\u6307\u5b9a\u200b\u9ed8\u8ba4\u200b ID \u200b\u4e3a\u200b 0\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u6307\u5b9a\u200b\u53c2\u6570\u200b ID\u3002</p> <p>\u200b\u770b\u200b\u4e00\u4e2a\u200b CVCUDA \u200b\u4e2d\u200b\u5177\u4f53\u200b\u7684\u200b\u4f8b\u5b50\u200b\uff1a</p> C++<pre><code>class TensorDataAccessStrided\n    // declaration order is important here\n    : private detail::BaseFromMember&lt;TensorShapeInfo&gt;\n    , public detail::TensorDataAccessStridedImpl\n{\npublic:\n    static bool IsCompatible(const ITensorData &amp;data)\n    {\n        return dynamic_cast&lt;const ITensorDataStrided *&gt;(&amp;data) != nullptr;\n    }\n\n    static detail::Optional&lt;TensorDataAccessStrided&gt; Create(const ITensorData &amp;data)\n    {\n        if (auto *dataStrided = dynamic_cast&lt;const ITensorDataStrided *&gt;(&amp;data))\n        {\n            return TensorDataAccessStrided(*dataStrided);\n        }\n        else\n        {\n            return detail::NullOpt;\n        }\n    }\n\n    TensorDataAccessStrided(const TensorDataAccessStrided &amp;that)\n        : MemberShapeInfo(that)\n        , detail::TensorDataAccessStridedImpl(that, MemberShapeInfo::member)\n    {\n    }\n\nprivate:\n    using MemberShapeInfo = detail::BaseFromMember&lt;TensorShapeInfo&gt;;\n\n    TensorDataAccessStrided(const ITensorDataStrided &amp;data)\n        : MemberShapeInfo{*TensorShapeInfo::Create(data.shape())}\n        , detail::TensorDataAccessStridedImpl(data, MemberShapeInfo::member)\n    {\n    }\n};\n</code></pre> <p>\u200b\u611f\u8c22\u60a8\u200b\u7684\u200b\u5173\u6ce8\u200b\u4e8e\u200b\u652f\u6301\u200b\uff01\uff01</p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>C++\u200b\u6280\u6cd5\u200b:\u200b\u6a21\u677f\u200b\u5143\u200b\u7f16\u7a0b\u200b\u7f16\u8bd1\u200b\u671f\u200b\u83b7\u53d6\u200b\u7c7b\u200b\u6210\u5458\u200b\u6570\u91cf\u200b</li> <li>C++\u200b\u5f00\u53d1\u200b\u5e38\u89c1\u95ee\u9898\u200b\u4e4b\u200bABI\u200b\u517c\u5bb9\u6027\u95ee\u9898\u200b</li> <li>C++20\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u57fa\u4e8e\u200b\u5c5e\u6027\u200b\u6d4b\u8bd5\u200b\u7684\u200bquickcheck-cpp\u200b\u5e93\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/c%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%BA%93cista/","title":"C++\u200b\u96f6\u200b\u62f7\u8d1d\u200b\u53cd\u200b\u5e8f\u5217\u5316\u200b\u5e93\u200bcista","text":""},{"location":"blog/c%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%BA%93cista/#c\u96f6\u62f7\u8d1d\u53cd\u5e8f\u5217\u5316\u5e93cista","title":"C++\u200b\u96f6\u200b\u62f7\u8d1d\u200b\u53cd\u200b\u5e8f\u5217\u5316\u200b\u5e93\u200bcista","text":"<p>\u200b\u5728\u200b\u9605\u8bfb\u200bCandle\uff08rust\u200b\u7684\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u5e93\u200b\uff09\u200b\u65f6\u200b\uff0c\u200b\u770b\u5230\u200b\u4e86\u200brust\u200b\u4e2d\u200b\u5229\u7528\u200bmmap\u200b\u548c\u200bCow\u200b\u673a\u5236\u200b\u5b9e\u73b0\u200b\u96f6\u200b\u62f7\u8d1d\u200b\u53cd\u200b\u5e8f\u5217\u5316\u200b\u52a0\u8f7d\u200b\u6a21\u578b\u200b\u7684\u200btensor\u3002</p> <p>\u200b\u5176\u4e2d\u200b\u4e3a\u4e86\u200b\u89e3\u51b3\u200bmmap\u200b\u7684\u200b\u6570\u636e\u200b\u751f\u547d\u5468\u671f\u200b\u4e3a\u200b\u2019a, \u200b\u5982\u679c\u200b\u7528\u200bCow&lt;\u2019a&gt;\u200b\u5f15\u7528\u200bmmap\u200b\u8fd4\u56de\u200b\u7684\u200b\u6307\u9488\u200b, \u200b\u4f7f\u7528\u200b\u7684\u200b\u751f\u547d\u5468\u671f\u200b\u5982\u679c\u200b\u8d85\u8fc7\u200b\u2019a\u200b\u5219\u200b\u4e0d\u80fd\u200b\u4f7f\u7528\u200b\uff0c\u200b\u4e0d\u5229\u4e8e\u200b\u4ee3\u7801\u200b\u5f00\u53d1\u200b\u548c\u200b\u5f15\u7528\u200b\u3002\u200b\u56e0\u6b64\u200b\u5f15\u5165\u200b\u4e86\u200byoke crate\u200b\u64e6\u9664\u200b\u751f\u547d\u5468\u671f\u200b\u3002</p> <p>\u200b\u501f\u6b64\u200b\uff0c\u200b\u641c\u7d22\u200b\u4e86\u200b\u4e00\u4e0b\u200bc++\u200b\u7684\u200b\u96f6\u200b\u62f7\u8d1d\u200b\u53cd\u200b\u5e8f\u5217\u5316\u200b\u5e93\u200b\uff0c\u200b\u627e\u5230\u200b\u4e86\u200bcista\u3002</p> C++<pre><code>namespace data = cista::offset;\nconstexpr auto const MODE =  // opt. versioning + check sum\n    cista::mode::WITH_VERSION | cista::mode::WITH_INTEGRITY;\n\nstruct pos { int x, y; };\nusing pos_map =  // Automatic deduction of hash &amp; equality\n    data::hash_map&lt;data::vector&lt;pos&gt;,\n                   data::hash_set&lt;data::string&gt;&gt;;\n\n{  // Serialize.\n  auto positions =\n      pos_map{{{{1, 2}, {3, 4}}, {\"hello\", \"cista\"}},\n              {{{5, 6}, {7, 8}}, {\"hello\", \"world\"}}};\n  cista::buf mmap{cista::mmap{\"data\"}};\n  cista::serialize&lt;MODE&gt;(mmap, positions);\n}\n\n// Deserialize.\nauto b = cista::mmap(\"data\", cista::mmap::protection::READ);\nauto positions = cista::deserialize&lt;pos_map, MODE&gt;(b);\n</code></pre> <p>\u200b\u5b83\u200b\u6709\u200b\u4e24\u79cd\u200b\u6a21\u5f0f\u200b\uff1a </p>C++<pre><code>namespace data = cista::raw;\n\u200b\u548c\u200b\nnamespace data = cista::offset;\n</code></pre> \u200b\u5728\u200bdata\u200b\u547d\u540d\u200b\u7a7a\u95f4\u200b\u4e0b\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u4e86\u200bhashmap\u3001hashset\u3001string\u3001vector\u200b\u7b49\u200b\u6570\u636e\u7ed3\u6784\u200b\uff0c\u200b\u652f\u6301\u200b\u5224\u65ad\u200b\u76f8\u7b49\u200b\u3001hash\u200b\u7b49\u200b\u3002<p></p> <ul> <li> <p>\u200b\u4e3a\u4ec0\u4e48\u200boffset\u200b\u65b9\u5f0f\u200b\u76f8\u6bd4\u200braw\u200b\u65b9\u5f0f\u200b\u901f\u5ea6\u200b\u66f4\u200b\u5feb\u200b\uff1f</p> </li> <li> <p>hashmap\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u7684\u200b\uff1f</p> </li> </ul>"},{"location":"blog/c%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%BA%93cista/#offset\u548craw\u65b9\u5f0f","title":"offset\u200b\u548c\u200braw\u200b\u65b9\u5f0f","text":"<p>Offset Based Data Structures</p> <ul> <li> <p>+ can be read without any deserialization step (i.e. reinterpret_cast is sufficient).</p> </li> <li> <p>+ suitable for shared memory applications</p> </li> <li> <p>- slower at runtime (pointers need to be resolved using one more add)</p> </li> </ul> <p>Raw Data Structures</p> <ul> <li> <p>- deserialize step takes time (but still very fast also for GBs of data)</p> </li> <li> <p>- the buffer containing the serialized data needs to be modified</p> </li> <li> <p>+ fast runtime access (raw access)</p> </li> </ul> <p>\u200b\u6211\u4eec\u200b\u7b80\u5355\u200b\u8fc7\u200b\u4e00\u4e0b\u200b\u4ee3\u7801\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u6709\u200b\u5174\u8da3\u200b\u7684\u200b\u670b\u53cb\u200b\u53ef\u4ee5\u200b\u9605\u8bfb\u200b\u6e90\u7801\u200b\uff0c\u200b\u4ee3\u7801\u200b\u5f88\u200b\u6e05\u6670\u200b\u3002</p>"},{"location":"blog/c%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%BA%93cista/#\u96f6\u62f7\u8d1d\u53cd\u5e8f\u5217\u5316","title":"\u96f6\u200b\u62f7\u8d1d\u200b\u53cd\u200b\u5e8f\u5217\u5316","text":"<p>\u200b\u96f6\u200b\u62f7\u8d1d\u200b\u4e3b\u8981\u200b\u4f7f\u7528\u200b\u4e86\u200bmmap\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u5c06\u200b\u6587\u4ef6\u200b\u6620\u5c04\u200b\u5230\u200b\u8fdb\u7a0b\u200b\u5730\u5740\u200b\u7a7a\u95f4\u200b\uff0c\u200b\u76f4\u63a5\u200b\u901a\u8fc7\u200b\u6307\u9488\u200b\u8bbf\u95ee\u200b\u6587\u4ef6\u200b\u5185\u5bb9\u200b\u3002</p> C++<pre><code>template &lt;mode Mode = kDefaultMode, typename T&gt;\nvoid write(std::filesystem::path const&amp; p, T const&amp; w) {\n  auto mmap =\n      cista::mmap{p.generic_string().c_str(), cista::mmap::protection::WRITE};\n  auto writer = cista::buf&lt;cista::mmap&gt;(std::move(mmap));\n  cista::serialize&lt;Mode&gt;(writer, w);\n}\n\ntemplate &lt;mode Mode = kDefaultMode, typename T&gt;\nvoid write(std::filesystem::path const&amp; p, wrapped&lt;T&gt; const&amp; w) {\n  write&lt;Mode&gt;(p, *w);\n}\n\ntemplate &lt;typename T, mode Mode = kDefaultMode&gt;\ncista::wrapped&lt;T&gt; read(std::filesystem::path const&amp; p) {\n  auto b = cista::file{p.generic_string().c_str(), \"r\"}.content();\n  auto const ptr = cista::deserialize&lt;T, Mode&gt;(b);\n  auto mem = cista::memory_holder{std::move(b)};\n  return cista::wrapped{std::move(mem), ptr};\n}\n\ntemplate &lt;typename T, mode Mode = kDefaultMode&gt;\ncista::wrapped&lt;T&gt; read_mmap(std::filesystem::path const&amp; p) {\n  auto mmap =\n      cista::mmap{p.generic_string().c_str(), cista::mmap::protection::READ};\n  auto const ptr = cista::deserialize&lt;T, Mode&gt;(mmap);\n  auto mem = cista::memory_holder{buf{std::move(mmap)}};\n  return cista::wrapped{std::move(mem), ptr};\n}\n</code></pre>"},{"location":"blog/c%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%BA%93cista/#hashmap\u5b9e\u73b0","title":"hashmap\u200b\u5b9e\u73b0","text":""},{"location":"blog/c%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%BA%93cista/#swiss-table\u5b9e\u73b0","title":"swiss table\u200b\u5b9e\u73b0","text":"<p>\u200b\u53c2\u8003\u200b\u4e86\u200babseil\u200b\u7684\u200bswiss tables\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u5728\u200b\u539f\u5148\u200b\u5b9e\u73b0\u200b\u7684\u200b\u4e0a\u200b\u5220\u9664\u200b\u4e86\u200b\u591a\u4f59\u200b\u7684\u200b\u529f\u80fd\u200b\u3002</p> <p>swiss table\u200b\u4ece\u200b\u7528\u6cd5\u200b\u4e0a\u200b\u5206\u4e3a\u200b\u4e24\u7c7b\u200b\uff1a</p> <ul> <li>absl::flat_hash_map and absl::flat_hash_set</li> </ul> <p>flat\u200b\u65b9\u5f0f\u200b\u5c06\u200bvalue_type\u200b\u5b58\u50a8\u200b\u5728\u200b\u5bb9\u5668\u200b\u7684\u200b\u4e3b\u200b\u6570\u7ec4\u200b\u4e2d\u200b\uff0c\u200b\u4ee5\u200b\u907f\u514d\u200b\u5185\u5b58\u200b\u95f4\u63a5\u200b\u5bfb\u5740\u200b\u3002\u200b\u7531\u4e8e\u200b\u5b83\u4eec\u200b\u5728\u200b\u91cd\u65b0\u200b\u54c8\u5e0c\u200b\u65f6\u4f1a\u200b\u79fb\u52a8\u200b\u6570\u636e\u200b\uff0c\u200b\u56e0\u6b64\u200b\u5143\u7d20\u200b\u65e0\u6cd5\u200b\u4fdd\u6301\u200b\u6307\u9488\u200b\u7a33\u5b9a\u6027\u200b\u3002</p> <p></p> <ul> <li>absl::node_hash_map and absl::node_hash_set</li> </ul> <p>\u200b\u8ffd\u6c42\u200b\u6307\u9488\u200b\u7a33\u5b9a\u6027\u200b\uff0c\u200b\u6216\u8005\u200b\u4f60\u200b\u7684\u200b\u503c\u200b\u5f88\u5927\u200b\uff0c\u200b\u5c31\u200b\u91c7\u7528\u200bnode\u200b\u65b9\u5f0f\u200b\u3002</p> <p></p> <p>blog/20180927-swisstables\u200b\u4e2d\u200b\u4ecb\u7ecd\u200b\uff0c\u200b\u66f4\u200b\u63a8\u8350\u200b\u4f7f\u7528\u200b absl::flat_hash_map&lt;K, std::unique_ptr&lt;V&gt;&gt;\u200b\u65b9\u5f0f\u200b\u66ff\u4ee3\u200b absl::node_hash_map&lt;K, V&gt;\u3002</p>"},{"location":"blog/c%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%BA%93cista/#hash_storage\u5b9e\u73b0","title":"hash_storage\u200b\u5b9e\u73b0","text":"<p>hashmap\u200b\u548c\u200bhashset\u200b\u7684\u200b\u6838\u5fc3\u200b\u5b9e\u73b0\u200b\u662f\u200bhash_storage struct, hash_storage\u200b\u91c7\u7528\u200bswiss_table\u200b\u5b9e\u73b0\u200b\u3002\u200b\u5728\u200b\u540e\u9762\u200b\u7684\u200b\u6587\u7ae0\u200b\u7684\u200b\u4ecb\u7ecd\u200b\u3002</p> C++<pre><code>namespace raw {\ntemplate &lt;typename Key, typename Value, typename Hash = hashing&lt;Key&gt;,\n          typename Eq = equal_to&lt;Key&gt;&gt;\nusing hash_map =\n    hash_storage&lt;pair&lt;Key, Value&gt;, ptr, get_first, get_second, Hash, Eq&gt;;\n}  // namespace raw\n\nnamespace offset {\ntemplate &lt;typename Key, typename Value, typename Hash = hashing&lt;Key&gt;,\n          typename Eq = equal_to&lt;Key&gt;&gt;\nusing hash_map =\n    hash_storage&lt;pair&lt;Key, Value&gt;, ptr, get_first, get_second, Hash, Eq&gt;;\n}  // namespace offset\n\nnamespace offset {\ntemplate &lt;typename T, typename Hash = hashing&lt;T&gt;, typename Eq = equal_to&lt;T&gt;&gt;\nusing hash_set = hash_storage&lt;T, ptr, identity, identity, Hash, Eq&gt;;\n}  // namespace offset\n</code></pre>"},{"location":"blog/c%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%BA%93cista/#string\u7684\u5b9e\u73b0","title":"string\u200b\u7684\u200b\u5b9e\u73b0","text":"<p>\u200b\u6839\u636e\u200bstring\u200b\u7684\u200b\u5927\u5c0f\u200b\uff0c\u200b\u5206\u4e3a\u200b\u4e24\u79cd\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u5c0f\u200b\u7684\u200b\u7528\u200bstack\uff0c\u200b\u5927\u200b\u7684\u200b\u7528\u200bheap, short_length_limit\u200b\u662f\u200b16\u200b\u5b57\u8282\u200b\u3002 </p>C++<pre><code>struct generate_string{\n  struct heap {\n    bool is_short_{false};\n    bool self_allocated_{false};\n    std::uint16_t __fill__{0};\n    std::uint32_t size_{0};\n    Ptr ptr_{nullptr};\n  };\n\n  struct stack {\n    union {\n      bool is_short_{true};\n      CharT __fill__;\n    };\n    CharT s_[short_length_limit]{0};\n  };\n\n  union {\n    heap h_{};\n    stack s_;\n  };\n}\n</code></pre><p></p> <p>\u200b\u5206\u4e3a\u200b\u4e24\u79cd\u200b\u60c5\u51b5\u200b\uff0cown\u200b\u548c\u200bnon_own\u3002\u200b\u4e5f\u200b\u5c31\u662f\u200b\u7ba1\u7406\u200b\u5185\u5b58\u200b\u8fd8\u662f\u200b\u4e0d\u200b\u7ba1\u7406\u200b\u5185\u5b58\u200b\u3002</p> C++<pre><code>  static constexpr struct owning_t {\n  } owning{};\n  static constexpr struct non_owning_t {\n  } non_owning{};\n</code></pre> <p>\u200b\u5982\u679c\u200b\u8981\u200b\u4ece\u200bnon_owning\u200b\u8f6c\u6362\u6210\u200bowning\uff0c\u200b\u5219\u200b\u9700\u8981\u200b\u8c03\u7528\u200bstd::memcpy\u3002</p> C++<pre><code>static constexpr msize_t short_length_limit = 15U / sizeof(CharT);\n\nvoid set_owning(CharT const* str, msize_t const len) {\n    reset();\n    if (str == nullptr || len == 0U) {\n    return;\n    }\n    s_.is_short_ = (len &lt;= short_length_limit);\n    if (s_.is_short_) {\n    std::memcpy(s_.s_, str, len * sizeof(CharT));\n    for (auto i = len; i &lt; short_length_limit; ++i) {\n        s_.s_[i] = 0;\n    }\n    } else {\n    h_.ptr_ = static_cast&lt;CharT*&gt;(std::malloc(len * sizeof(CharT)));\n    if (h_.ptr_ == nullptr) {\n        throw_exception(std::bad_alloc{});\n    }\n    h_.size_ = len;\n    h_.self_allocated_ = true;\n    std::memcpy(data(), str, len * sizeof(CharT));\n    }\n}\n</code></pre>"},{"location":"blog/c%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%BA%93cista/#\u5176\u5b83\u5e8f\u5217\u5316\u5e93","title":"\u5176\u5b83\u200b\u5e8f\u5217\u5316\u200b\u5e93","text":"<ul> <li> <p>Protocol Buffers</p> </li> <li> <p>Cap\u2019n Proto</p> </li> <li> <p>Flatbuffers</p> </li> <li> <p>cereal</p> </li> <li> <p>Boost Serialization</p> </li> <li> <p>MessagePack</p> </li> </ul> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>cista\u200b\u96f6\u200b\u62f7\u8d1d\u200b\u53cd\u200b\u5e8f\u5217\u5316\u200b\u5e93\u200b\u5b9e\u73b0\u200b\u4e4b\u200bswiss_table\u200b\u54c8\u5e0c\u200b\u8868\u200b\u5b9e\u73b0\u200b</li> <li>C++\u200b\u5f00\u53d1\u200b\u5e38\u89c1\u95ee\u9898\u200b\u4e4b\u200bABI\u200b\u517c\u5bb9\u6027\u95ee\u9898\u200b</li> <li>Fast PIMPL \u200b\u53c8\u200b\u662f\u200b\u4ec0\u4e48\u200b\u6280\u6cd5\u200b\uff1f</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/cutlass%E5%BA%93%E4%B8%AD%E7%9A%84%E5%B0%BE%E5%A3%B0%E8%9E%8D%E5%90%88epilogue-fusion%E5%92%8Cepilogue-visitor-trees/","title":"CUTLASS\u200b\u5e93\u4e2d\u200b\u7684\u200b\u5c3e\u58f0\u200b\u878d\u5408\u200b(Epilogue Fusion)\u200b\u548c\u200bEpilogue Visitor Trees","text":"<p>CUTLASS\u200b\u5e93\u4e2d\u200b\u7684\u200b\u5c3e\u58f0\u200b\u878d\u5408\u200b(Epilogue Fusion)\u200b\u548c\u200b\u5c3e\u58f0\u200b\u8bbf\u95ee\u200b\u6811\u200b(Epilogue Visitor Trees)</p> <p>GEMM \u200b\u5728\u200b NVIDIA GPU \u200b\u4e0a\u200b\u7684\u200b\u9ad8\u6027\u80fd\u200b\u5b9e\u73b0\u200b\u5206\u4e3a\u200b\u4e24\u4e2a\u200b\u9636\u6bb5\u200b\uff1amainloop\u200b\u548c\u200bepilogue\u3002</p> <ul> <li> <p>mainloop\uff1a\u200b\u8d1f\u8d23\u200b\u5b9e\u9645\u200b GEMM \u200b\u8ba1\u7b97\u200b\u7684\u200b\u90e8\u5206\u200b</p> </li> <li> <p>epilogue\uff1a\u200b\u5176\u4e2d\u200b\u8fdb\u884c\u200b\u4e86\u200b\u540e\u5904\u7406\u200b\uff08\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5143\u7d20\u200b\u6fc0\u6d3b\u200b\u3001\u200b\u7f29\u653e\u200b\uff09\u200b\u548c\u200b\u6570\u636e\u200b\u5b58\u50a8\u200b</p> </li> </ul> <p>\u200b\u8fd9\u200b\u7bc7\u6587\u7ae0\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u7814\u7a76\u200b CUTLASS \u200b\u7684\u200b\u5c3e\u58f0\u200b\u878d\u5408\u200b(epilogue fusion)\u200b\u65b9\u6848\u200b\u3002EVT\u200b\u5728\u200b\u8bba\u6587\u200bEpilogue Visitor Tree (EVT)\u200b\u4e2d\u200b\u3002</p> <p>\u200b\u9996\u5148\u200b\uff0c\u200b\u6982\u8ff0\u200b\u4e86\u200b\u5c3e\u58f0\u200b\u9636\u6bb5\u200b\u548c\u200b EVT\u3002\u200b\u7136\u540e\u200b\u5c06\u200b\u5c55\u793a\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b CUTLASS \u200b\u5b9a\u4e49\u200b\u7684\u200b EVT \u200b\u548c\u200b\u624b\u52a8\u200b\u6784\u5efa\u200b\u7684\u200b EVT \u200b\u5c06\u200b\u7b80\u5355\u200b\u7684\u200b EVT \u200b\u6dfb\u52a0\u200b\u5230\u200b CUTLASS GEMM \u200b\u5185\u6838\u200b\u4e2d\u200b\u3002\u200b\u7136\u540e\u200b\uff0c\u200b\u7ed9\u51fa\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u4e3a\u200b\u65b0\u9896\u200b\u7528\u4f8b\u200b\u5f00\u53d1\u200b EVT \u200b\u7684\u200b\u6269\u5c55\u200b\u793a\u4f8b\u200b\uff0c\u200b\u8be5\u200b\u793a\u4f8b\u200b\u4ecb\u7ecd\u200b\u4e86\u200b\u4e00\u4e9b\u200b\u66f4\u200b\u9ad8\u7ea7\u200b\u7684\u200b\u5de5\u5177\u200b\uff1a\u200b\u5f52\u7ea6\u200b\u64cd\u4f5c\u200b\u548c\u200b\u62d3\u6251\u200b\u8bbf\u95ee\u8005\u200b\u3002\u200b\u4ee3\u7801\u200b\u793a\u4f8b\u200b</p>"},{"location":"blog/cutlass%E5%BA%93%E4%B8%AD%E7%9A%84%E5%B0%BE%E5%A3%B0%E8%9E%8D%E5%90%88epilogue-fusion%E5%92%8Cepilogue-visitor-trees/#cutlass-\u662f\u4ec0\u4e48","title":"CUTLASS \u200b\u662f\u200b\u4ec0\u4e48\u200b\uff1f","text":"<p>\u200b\u53c2\u8003\u200bCUTLASS 3.8.0\u3002</p> <p>CUTLASS \u200b\u662f\u200b\u4e00\u4e2a\u200b CUDA C++\u200b\u6a21\u677f\u200b\u62bd\u8c61\u200b\u96c6\u5408\u200b\uff0c\u200b\u7528\u4e8e\u200b\u5728\u200b CUDA \u200b\u4e2d\u200b\u5b9e\u73b0\u200b\u9ad8\u6027\u80fd\u200b\u77e9\u9635\u200b\u4e58\u6cd5\u200b\uff08GEMM\uff09\u200b\u53ca\u200b\u76f8\u5173\u200b\u8ba1\u7b97\u200b\uff0c\u200b\u6db5\u76d6\u200b\u6240\u6709\u200b\u7ea7\u522b\u200b\u548c\u200b\u89c4\u6a21\u200b\u3002\u200b\u5b83\u200b\u91c7\u7528\u200b\u4e86\u200b\u7c7b\u4f3c\u200b\u4e8e\u200b\u7528\u4e8e\u200b\u5b9e\u73b0\u200b cuBLAS \u200b\u548c\u200b cuDNN \u200b\u7684\u200b\u5206\u5c42\u200b\u5206\u89e3\u200b\u548c\u200b\u6570\u636e\u200b\u79fb\u52a8\u200b\u7b56\u7565\u200b\u3002CUTLASS \u200b\u5c06\u200b\u8fd9\u4e9b\u200b\u201c\u200b\u53ef\u200b\u79fb\u52a8\u200b\u90e8\u5206\u200b\u201d\u200b\u5206\u89e3\u200b\u4e3a\u200b\u53ef\u200b\u91cd\u7528\u200b\u7684\u200b\u6a21\u5757\u5316\u200b\u8f6f\u4ef6\u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u7531\u200b C++\u200b\u6a21\u677f\u200b\u7c7b\u200b\u62bd\u8c61\u200b\u51fa\u6765\u200b\u3002\u200b\u6982\u5ff5\u200b\u5e76\u884c\u200b\u5c42\u6b21\u7ed3\u6784\u200b\u4e0d\u540c\u200b\u7ea7\u522b\u200b\u7684\u200b\u539f\u8bed\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u81ea\u5b9a\u4e49\u200b\u5206\u5757\u200b\u5927\u5c0f\u200b\u3001\u200b\u6570\u636e\u7c7b\u578b\u200b\u548c\u200b\u5176\u4ed6\u200b\u7b97\u6cd5\u200b\u7b56\u7565\u200b\u8fdb\u884c\u200b\u4e13\u95e8\u5316\u200b\u548c\u200b\u8c03\u6574\u200b\u3002\u200b\u7531\u6b64\u200b\u4ea7\u751f\u200b\u7684\u200b\u7075\u6d3b\u6027\u200b\u7b80\u5316\u200b\u4e86\u200b\u5b83\u4eec\u200b\u5728\u200b\u81ea\u5b9a\u4e49\u200b\u5185\u6838\u200b\u548c\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e2d\u200b\u4f5c\u4e3a\u200b\u6784\u5efa\u200b\u5757\u200b\u7684\u200b\u4f7f\u7528\u200b\u3002</p> <p>\u200b\u4e3a\u4e86\u200b\u652f\u6301\u200b\u5404\u79cd\u200b\u5e94\u7528\u200b\uff0cCUTLASS \u200b\u4e3a\u200b\u6df7\u5408\u200b\u7cbe\u5ea6\u200b\u8ba1\u7b97\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u5e7f\u6cdb\u652f\u6301\u200b\uff0c\u200b\u4e3a\u200b FP64\u3001FP32\u3001TF32\u3001FP16\u3001BF16\u3001\u200b\u901a\u8fc7\u200b\u5f20\u91cf\u200b\u6838\u5fc3\u200b\u6307\u4ee4\u200b\u6a21\u62df\u200b FP32\u30018 \u200b\u4f4d\u200b\u6d6e\u70b9\u200b\u7c7b\u578b\u200b\uff08e5m2 \u200b\u548c\u200b e4m3\uff09\u3001\u200b\u5757\u200b\u7f29\u653e\u200b\u6570\u636e\u7c7b\u578b\u200b\uff08NVIDIA NVFP4 \u200b\u548c\u200b OCP \u200b\u6807\u51c6\u200b MXFP4\u3001MXFP6\u3001MXFP8\uff09\u3001\u200b\u7a84\u200b\u6574\u6570\u200b\u7c7b\u578b\u200b\uff084 \u200b\u4f4d\u200b\u548c\u200b 8 \u200b\u4f4d\u6709\u200b\u7b26\u53f7\u200b\u548c\u200b\u65e0\u200b\u7b26\u53f7\u200b\u6574\u6570\u200b\uff09\u200b\u4ee5\u53ca\u200b\u4e8c\u8fdb\u5236\u200b 1 \u200b\u4f4d\u200b\u6570\u636e\u7c7b\u578b\u200b\uff08\u200b\u5728\u200b\u67b6\u6784\u200b\u5141\u8bb8\u200b\u5bf9\u200b\u8fd9\u4e9b\u200b\u6570\u636e\u7c7b\u578b\u200b\u8fdb\u884c\u200b\u539f\u751f\u200b\u652f\u6301\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff09\u200b\u63d0\u4f9b\u200b\u4e13\u95e8\u200b\u7684\u200b\u6570\u636e\u200b\u79fb\u52a8\u200b\u548c\u200b\u4e58\u79ef\u200b\u7d2f\u52a0\u200b\u62bd\u8c61\u200b\u3002CUTLASS \u200b\u9488\u5bf9\u200b NVIDIA \u200b\u7684\u200b Volta\u3001Turing\u3001Ampere\u3001Ada\u3001Hopper \u200b\u548c\u200b Blackwell \u200b\u67b6\u6784\u200b\u5b9e\u73b0\u200b\u7684\u200b\u53ef\u7f16\u7a0b\u200b\u9ad8\u200b\u541e\u5410\u91cf\u200b\u5f20\u91cf\u200b\u6838\u5fc3\u200b\u5c55\u793a\u200b\u4e86\u200b\u6700\u4f73\u200b\u77e9\u9635\u200b\u4e58\u6cd5\u200b\u64cd\u4f5c\u200b\u3002</p> <p>\u200b\u9664\u4e86\u200b\u901a\u7528\u200b\u77e9\u9635\u200b\u4e58\u6cd5\u200b\uff08General Matrix Multiplication\uff0cGEMM\uff09\u200b\u4e4b\u5916\u200b\uff0cCUTLASS \u200b\u8fd8\u200b\u901a\u8fc7\u200b\u9690\u5f0f\u200b GEMM \u200b\u7b97\u6cd5\u200b\u5b9e\u73b0\u200b\u9ad8\u6027\u80fd\u200b\u5377\u79ef\u200b\u3002\u200b\u9690\u5f0f\u200b GEMM \u200b\u662f\u200b\u5c06\u200b\u5377\u79ef\u200b\u8fd0\u7b97\u200b\u8868\u8ff0\u200b\u4e3a\u200b GEMM\uff0c\u200b\u4ece\u800c\u200b\u5229\u7528\u200b CUTLASS \u200b\u7684\u200b\u6a21\u5757\u5316\u200b GEMM \u200b\u6d41\u6c34\u7ebf\u200b\u3002\u200b\u8fd9\u200b\u4f7f\u5f97\u200b CUTLASS \u200b\u80fd\u591f\u200b\u901a\u8fc7\u200b\u91cd\u7528\u200b\u9ad8\u5ea6\u200b\u4f18\u5316\u200b\u7684\u200b GEMM \u200b\u7ec4\u4ef6\u200b\u6765\u200b\u6784\u5efa\u200b\u5377\u79ef\u200b\u3002</p>"},{"location":"blog/cutlass%E5%BA%93%E4%B8%AD%E7%9A%84%E5%B0%BE%E5%A3%B0%E8%9E%8D%E5%90%88epilogue-fusion%E5%92%8Cepilogue-visitor-trees/#\u5c3e\u58f0\u9636\u6bb5\u548c-evt","title":"\u5c3e\u58f0\u200b\u9636\u6bb5\u200b\u548c\u200b EVT","text":"<p>\u200b\u5728\u200b\u5185\u6838\u200b\u4e2d\u200b\uff0c\u200b\u5c3e\u58f0\u200b\u9636\u6bb5\u200b\u5728\u200b\u4e3b\u200b\u5faa\u73af\u200b\u9636\u6bb5\u200b\u4e4b\u540e\u200b\uff0c\u200b\u5904\u7406\u200b\u8f93\u51fa\u200b\u5f20\u91cf\u200b\u7684\u200b\u540e\u5904\u7406\u200b\u3002\u200b\u5728\u200b\u6700\u200b\u666e\u901a\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u9636\u6bb5\u200b\u53ea\u662f\u200b\u5c06\u200b\u77e9\u9635\u200b\u4e58\u79ef\u200b\u5b58\u50a8\u200b\u5230\u200b\u5168\u5c40\u200b\u5185\u5b58\u200b\uff08GMEM\uff09\u200b\u4e2d\u200b\u3002\u200b\u7136\u800c\u200b\uff0c\u200b\u8bb8\u591a\u200b\u4eba\u5de5\u667a\u80fd\u200b\u5de5\u4f5c\u200b\u8d1f\u8f7d\u200b\u9700\u8981\u200b\u5bf9\u200b\u8f93\u51fa\u200b\u8fdb\u884c\u200b\u989d\u5916\u200b\u7684\u200b\u5904\u7406\u200b\uff1a\u200b\u6dfb\u52a0\u200b\u504f\u7f6e\u200b\u9879\u200b\u3001\u200b\u8ba1\u7b97\u200b\u50cf\u200b GELU \u200b\u8fd9\u6837\u200b\u7684\u200b\u9010\u200b\u5143\u7d20\u200b\u6fc0\u6d3b\u200b\u51fd\u6570\u200b\uff0c\u200b\u6216\u8005\u200b\u5e94\u7528\u200b\u66f4\u200b\u590d\u6742\u200b\u7684\u200b\u5f52\u7ea6\u200b\u7c7b\u578b\u200b\u51fd\u6570\u200b\uff0c\u200b\u5982\u5c42\u200b\u5f52\u4e00\u5316\u200b\u6216\u200b\u5747\u200b\u65b9\u6839\u200b\u5f52\u4e00\u5316\u200b\u3002\u200b\u8fd9\u4e9b\u200b\u8ba1\u7b97\u200b\u53ef\u80fd\u200b\u8fd8\u200b\u9700\u8981\u200b\u52a0\u8f7d\u200b\u989d\u5916\u200b\u7684\u200b\u6570\u636e\u200b\uff0c\u200b\u4f8b\u5982\u200b\u5728\u200b\u5e94\u7528\u200b\u6b8b\u5dee\u200b\u8fde\u63a5\u200b\u6216\u200b\u4f7f\u7528\u200b\u4e00\u7ec4\u200b\u771f\u5b9e\u200b\u6807\u7b7e\u200b\u8ba1\u7b97\u200b\u635f\u5931\u200b\u65f6\u200b\u3002\u200b\u5c06\u200b\u8fd9\u4e9b\u200b\u64cd\u4f5c\u200b\u5408\u5e76\u200b(\u200b\u6216\u200b\u878d\u5408\u200b)\u200b\u5230\u200b GEMM \u200b\u5185\u6838\u200b\u7684\u200b\u5c3e\u58f0\u200b\u4e2d\u200b\u901a\u5e38\u200b\u662f\u200b\u6709\u76ca\u200b\u7684\u200b\u3002\u200b\u878d\u5408\u200b\u540e\u200b\u7684\u200b\u5185\u6838\u200b\u6bd4\u200b\u4f7f\u7528\u200b\u989d\u5916\u200b\u7684\u200b\u5185\u6838\u200b\u6765\u200b\u5904\u7406\u200b\u540e\u5904\u7406\u200b\u6709\u200b\u51e0\u4e2a\u200b\u4f18\u52bf\u200b\u3002</p> <ul> <li> <p>\u200b\u5171\u4eab\u5185\u5b58\u200b\uff08SMEM\uff09\u200b\u4e2d\u200b\u901a\u7528\u200b\u77e9\u9635\u200b\u4e58\u200b\uff08GEMM\uff09\u200b\u7684\u200b\u8f93\u51fa\u200b\u6570\u636e\u200b\u53ef\u4ee5\u200b\u5728\u200b\u878d\u5408\u200b\u5185\u6838\u200b\u4e2d\u200b\u7acb\u5373\u200b\u8fdb\u884c\u200b\u540e\u5904\u7406\u200b\uff0c\u200b\u800c\u200b\u5355\u72ec\u200b\u7684\u200b\u5185\u6838\u200b\u9700\u8981\u200b\u989d\u5916\u200b\u7684\u200b\u5168\u5c40\u200b\u5185\u5b58\u200b\uff08GMEM\uff09\u200b\u5230\u200b\u5171\u4eab\u5185\u5b58\u200b\uff08SMEM\uff09\u200b\u7684\u200b\u4f20\u8f93\u200b\u3002</p> </li> <li> <p>\u200b\u5728\u200b\u878d\u5408\u200b\u5185\u6838\u200b\u4e2d\u200b\uff0c\u200b\u5f53\u200b\u77e9\u9635\u200b\u4e58\u6cd5\u200b\uff08GEMM\uff09\u200b\u7ed3\u679c\u200b\u4ecd\u200b\u5728\u200b\u5bc4\u5b58\u5668\u200b\u4e2d\u200b\u65f6\u200b\uff0c\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5e94\u7528\u200b\u4e00\u4e9b\u200b\u540e\u5904\u7406\u200b\u64cd\u4f5c\u200b\u3002</p> </li> <li> <p>\u200b\u989d\u5916\u200b\u7684\u200b\u5185\u6838\u200b\u542f\u52a8\u200b\u4f1a\u200b\u4ea7\u751f\u200b\u989d\u5916\u200b\u7684\u200b\u5ef6\u8fdf\u200b\u548c\u200b\u5f00\u9500\u200b\u3002</p> </li> </ul> <p>\u200b\u8fd9\u79cd\u200b\u5728\u200b GEMM \u200b\u4e3b\u200b\u5faa\u73af\u200b\u548c\u200b\u5185\u6838\u200b\u51fa\u53e3\u200b\u4e4b\u95f4\u200b\u5408\u5e76\u200b\u989d\u5916\u200b\u5904\u7406\u200b\u7684\u200b\u8fc7\u7a0b\u200b\u79f0\u4e3a\u200b\u5c3e\u58f0\u200b\u878d\u5408\u200b\uff08epilogue fusion\uff09\u3002</p> <p>\u200b\u5728\u200b\u5b9e\u73b0\u200b\u5c3e\u58f0\u200b\u878d\u5408\u200b\u65f6\u200b\u7684\u200b\u4e00\u4e2a\u200b\u96be\u70b9\u200b\u662f\u200b\u6709\u200b\u8bb8\u591a\u200b\u7c7b\u578b\u200b\u7684\u200b\u64cd\u4f5c\u200b\u9700\u8981\u200b\u878d\u5408\u200b\u3002\u200b\u5c3e\u58f0\u200b\u53ef\u80fd\u200b\u5305\u542b\u200b\u57fa\u672c\u4e0a\u200b\u4efb\u610f\u200b\u7684\u200b\u8ba1\u7b97\u200b\u5e8f\u5217\u200b\uff0c\u200b\u5e76\u4e14\u200b\u53ef\u80fd\u200b\u9700\u8981\u200b\u5185\u6838\u200b\u52a0\u8f7d\u200b\u6216\u200b\u5b58\u50a8\u200b\u989d\u5916\u200b\u7684\u200b\u6570\u636e\u200b\u3002\u200b\u4e3a\u200b\u6bcf\u4e2a\u200b\u4e0d\u540c\u200b\u7684\u200b\u5c3e\u58f0\u200b\u6a21\u5f0f\u200b\u7f16\u5199\u200b\u878d\u5408\u200b\u5185\u6838\u200b\u4f1a\u200b\u8fc5\u901f\u200b\u5bfc\u81f4\u200b\u5185\u6838\u200b\u6570\u91cf\u200b\u4e0d\u53ef\u200b\u7ba1\u7406\u200b\u5730\u200b\u6fc0\u589e\u200b\u3002\u200b\u6b64\u5916\u200b\uff0c\u200b\u7a0b\u5e8f\u5458\u200b\u53ef\u80fd\u200b\u60f3\u8981\u200b\u5c1d\u8bd5\u200b\u65b0\u9896\u200b\u7684\u200b\u5c3e\u58f0\u200b\uff0c\u200b\u5bf9\u4e8e\u200b\u4e00\u4e2a\u200b\u6b63\u786e\u200b\u878d\u5408\u200b\u7684\u200b\u5c3e\u58f0\u200b\uff0c\u200b\u8fd9\u200b\u901a\u5e38\u200b\u9700\u8981\u200b\u5bf9\u200b\u5185\u6838\u200b\u4ee3\u7801\u200b\u8fdb\u884c\u200b\u5927\u91cf\u200b\u66f4\u6539\u200b\u3002\u200b\u4e3a\u4e86\u200b\u89e3\u51b3\u200b\u8fd9\u4e2a\u200b\u95ee\u9898\u200b\uff0cCUTLASS \u200b\u4f7f\u7528\u200b\u4e00\u79cd\u200b\u79f0\u4e3a\u200b\u8bbf\u95ee\u8005\u200b\u6a21\u5f0f\u200b\u7684\u200b\u8bbe\u8ba1\u6a21\u5f0f\u200b\u3002</p> <p>\u200b\u5728\u200b\u8fd9\u79cd\u200b\u6a21\u5f0f\u200b\u4e0b\u200b\uff0c\u200b\u5404\u79cd\u7c7b\u578b\u200b\u7684\u200b\u5c3e\u58f0\u200b\u5728\u200b\u4e13\u95e8\u200b\u7684\u200b\u5c3e\u58f0\u200b\u8bbf\u95ee\u8005\u200b\u5bf9\u8c61\u200b\u4e2d\u200b\u5b9e\u73b0\u200b\u3002CUTLASS GEMM \u200b\u5185\u6838\u200b\u88ab\u200b\u8bbe\u8ba1\u200b\u4e3a\u200b\u63a5\u53d7\u200b\u4efb\u610f\u200b\u7684\u200b\u5c3e\u58f0\u200b\u8bbf\u95ee\u8005\u200b\u5bf9\u8c61\u200b\u6765\u200b\u5904\u7406\u200b\u8f93\u51fa\u200b\u6570\u636e\u200b\u3002\u200b\u7136\u540e\u200b\uff0c\u200b\u5c3e\u58f0\u200b\u8bbf\u95ee\u8005\u200b\u5c06\u200b\u8bbf\u95ee\u200b\u8f93\u51fa\u200b\u6570\u636e\u200b\u5e76\u200b\u8fdb\u884c\u200b\u5904\u7406\u200b\u3002\u200b\u4f7f\u7528\u200b\u8fd9\u79cd\u200b\u6a21\u578b\u200b\uff0c\u200b\u6dfb\u52a0\u200b\u65b0\u200b\u7684\u200b\u5c3e\u58f0\u200b\u53ea\u200b\u9700\u8981\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u4e13\u95e8\u200b\u8bbf\u95ee\u8005\u200b\u7c7b\u200b\uff0c\u200b\u5e76\u200b\u5c06\u200b\u5176\u200b\u4e0e\u200b\u5f53\u524d\u200b\u8bbf\u95ee\u8005\u200b\u8fdb\u884c\u200b\u4ea4\u6362\u200b\u3002</p> <p>\u200b\u7531\u4e8e\u200b\u5c3e\u58f0\u200b\u53ef\u80fd\u200b\u6d89\u53ca\u200b\u590d\u6742\u200b\u7684\u200b\u64cd\u4f5c\u200b\u5e8f\u5217\u200b\uff0c\u200b\u56e0\u6b64\u200b\u5c3e\u58f0\u200b\u8bbf\u95ee\u8005\u200b\u5fc5\u987b\u200b\u662f\u200b\u53ef\u200b\u7ec4\u5408\u200b\u7684\u200b\u3002\u200b\u5c3e\u58f0\u200b\u8bbf\u95ee\u8005\u200b\u6811\u200b\uff08EVT\uff09\u200b\u662f\u200b\u7ec4\u7ec7\u200b\u6210\u200b\u6811\u72b6\u200b\u7ed3\u6784\u200b\u7684\u200b\u8bbf\u95ee\u8005\u200b\u96c6\u5408\u200b\uff0c\u200b\u5b83\u4eec\u200b\u5171\u540c\u200b\u4f5c\u4e3a\u200b\u4e00\u4e2a\u200b\u5355\u72ec\u200b\u7684\u200b\u8bbf\u95ee\u8005\u200b\u8fdb\u884c\u200b\u64cd\u4f5c\u200b\u3002\u200b\u6811\u4e2d\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u53f6\u200b\u8282\u70b9\u200b\u4ee3\u8868\u200b\u4e00\u4e2a\u200b\u57fa\u672c\u64cd\u4f5c\u200b\uff0c\u200b\u4f8b\u5982\u200b\u52a0\u6cd5\u200b\u3001\u200b\u4e58\u6cd5\u200b\u3001\u200b\u52a0\u8f7d\u200b\u6216\u200b\u5b58\u50a8\u200b\u3002\u200b\u975e\u53f6\u200b\u8282\u70b9\u200b\u901a\u5e38\u200b\u662f\u200b\u6811\u200b\u8bbf\u95ee\u8005\u200b\uff08\u200b\u7a0d\u540e\u200b\u6211\u4eec\u200b\u5c06\u200b\u8ba8\u8bba\u200b\u4e00\u4e2a\u200b\u4f8b\u5916\u60c5\u51b5\u200b\uff09\u3002\u200b\u5f53\u6811\u200b\u8bbf\u95ee\u8005\u200b\u8bbf\u95ee\u200b\u6570\u636e\u200b\u65f6\u200b\uff0c\u200b\u5b83\u200b\u9012\u5f52\u200b\u5730\u200b\u5c06\u200b\u4efb\u52a1\u200b\u59d4\u6258\u200b\u7ed9\u200b\u5176\u5b50\u200b\u8282\u70b9\u200b\uff0c\u200b\u5e76\u200b\u5c06\u5b50\u200b\u8282\u70b9\u200b\u7684\u200b\u8f93\u51fa\u200b\u4f5c\u4e3a\u200b\u5176\u200b\u81ea\u8eab\u200b\u64cd\u4f5c\u200b\u7684\u200b\u8f93\u5165\u200b\u3002\u200b\u6811\u200b\u7684\u200b\u6839\u200b\u8282\u70b9\u200b\u7684\u200b\u8f93\u51fa\u200b\u6700\u7ec8\u200b\u5b58\u50a8\u200b\u5230\u200b GMEM\u3002\u200b\u8ba1\u7b97\u200b\u7684\u200b\u4e00\u4e2a\u200b\u57fa\u672c\u200b\u793a\u200b\u4f8b\u5982\u200b\u56fe\u200b 1\u200b\u6240\u793a\u200b\u3002</p> \\[ \\mathrm{ReLU}(\\alpha\\mathbf{AB}+\\beta\\mathbf{C}) \\] <p></p> <p>\u200b\u5c3e\u58f0\u200b\u8bbf\u5ba2\u200b\u6811\u200b\u62bd\u8c61\u200b\u7531\u200b CUTLASS \u200b\u4ee5\u200b\u4e24\u79cd\u200b\u65b9\u5f0f\u200b\u652f\u6301\u200b\u3002\u200b\u9996\u5148\u200b\uff0c\u200b\u5e38\u89c1\u200b\u7684\u200b\u5c3e\u58f0\u200b\u6709\u200b\u9884\u5148\u200b\u6784\u5efa\u200b\u7684\u200b\u5e26\u6709\u200b\u7528\u6237\u200b\u53cb\u597d\u200b\u522b\u540d\u200b\u7684\u200b\u8bbf\u5ba2\u200b\u6811\u200b\u3002\u200b\u5176\u6b21\u200b\uff0c\u200b\u5f00\u53d1\u4eba\u5458\u200b\u53ef\u4ee5\u200b\u4e3a\u200b\u5b9a\u5236\u200b\u7684\u200b\u5c3e\u58f0\u200b\u7f16\u5199\u200b\u81ea\u5df1\u200b\u7684\u200b\u8bbf\u5ba2\u200b\u6811\u200b\u3002\u200b\u7136\u540e\u200b\uff0cCUTLASS \u200b\u5c06\u200b\u4ece\u200b\u63d0\u4f9b\u200b\u7684\u200b\u6811\u200b\u751f\u6210\u200b\u878d\u5408\u200b\u5185\u6838\u200b\u3002\u200b\u6211\u4eec\u200b\u5c06\u200b\u901a\u8fc7\u200b\u8fd9\u200b\u4e24\u79cd\u200b\u65b9\u6cd5\u200b\u7684\u200b\u7b80\u5355\u200b\u793a\u4f8b\u200b\u8fdb\u884c\u200b\u8bb2\u89e3\u200b\uff0c\u200b\u7136\u540e\u200b\u8ba8\u8bba\u200b\u5982\u4f55\u200b\u521b\u5efa\u200b\u66f4\u200b\u590d\u6742\u200b\u7684\u200b\u6811\u200b\u3002</p>"},{"location":"blog/cutlass%E5%BA%93%E4%B8%AD%E7%9A%84%E5%B0%BE%E5%A3%B0%E8%9E%8D%E5%90%88epilogue-fusion%E5%92%8Cepilogue-visitor-trees/#\u4f7f\u7528\u5c3e\u58f0epilogue\u548c-evt","title":"\u4f7f\u7528\u200b\u5c3e\u58f0\u200b\uff08Epilogue\uff09\u200b\u548c\u200b EVT","text":"<p>\u200b\u5728\u200b\u672c\u6587\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u91cd\u70b9\u200b\u5173\u6ce8\u200b CUTLASS 3.X \u200b\u7248\u672c\u200b\u4e2d\u200b\u9488\u5bf9\u200b EVT \u200b\u7684\u200b\u8bed\u6cd5\u200b\uff0c\u200b\u8be5\u200b\u8bed\u6cd5\u200b\u76ee\u524d\u200b\u4ec5\u200b\u652f\u6301\u200b NVIDIA Hopper\u2122\u200b\u67b6\u6784\u200b\uff0c\u200b\u5e76\u4e14\u200b\u4ec5\u200b\u9002\u7528\u200b\u4e8e\u200b warp \u200b\u4e13\u7528\u200b\u5185\u6838\u200b\u3002\u200b\u5bf9\u4e8e\u200b\u8f83\u200b\u65e7\u200b\u7684\u200b\u7248\u672c\u200b\uff0c\u200b\u8bf7\u200b\u4f7f\u7528\u200b 2.X \u200b\u8bed\u6cd5\u200b\u4e2d\u200b\u7684\u200b\u8bbf\u95ee\u200b\u5668\u200b\u2014\u2014\u200b\u8bf7\u53c2\u9605\u200bcutlass/epilogue/threadblock/fusion/visitor_2x.hpp\u200b\u4ee5\u53ca\u200b\u793a\u4f8b\u200b 35\u200b\u4ee5\u200b\u4e86\u89e3\u200b\u5176\u200b\u7528\u6cd5\u200b\u3002</p> <p>\u200b\u5728\u200b CUTLASS 3.X API \u200b\u4e2d\u200b\u6784\u5efa\u200b\u5185\u6838\u200b\u7684\u200b\u57fa\u672c\u200b\u65b9\u6cd5\u200b\u662f\u200b\u57fa\u4e8e\u200bCollectiveMainloop\u200b\u548c\u200bCollectiveEpilogue\u3002</p> C++<pre><code>using GemmKernel = cutlass::gemm::kernel::GemmUniversal&lt;\n    cute::Shape&lt;int,int,int,int&gt;, // ProblemShape [M,N,K,L]\n    CollectiveMainloop,\n    CollectiveEpilogue\n&gt;;\n</code></pre> <p>CUTLASS \u200b\u63d0\u4f9b\u200b\u4e86\u200b\u591a\u79cd\u4e0d\u540c\u200b\u7684\u200b\u65b9\u6cd5\u200b\u6765\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200bCollectiveEpilogue\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u6309\u7167\u200b\u590d\u6742\u6027\u200b\u9012\u589e\u200b\u7684\u200b\u987a\u5e8f\u200b\u8fdb\u884c\u200b\u4ecb\u7ecd\u200b\u3002</p>"},{"location":"blog/cutlass%E5%BA%93%E4%B8%AD%E7%9A%84%E5%B0%BE%E5%A3%B0%E8%9E%8D%E5%90%88epilogue-fusion%E5%92%8Cepilogue-visitor-trees/#defaultepilogue","title":"DefaultEpilogue","text":"<p>\u200b\u5bf9\u4e8e\u200b\u8bb8\u591a\u200b\u4ec5\u200b\u4f7f\u7528\u200b\u9010\u200b\u5143\u7d20\u200b\u8fd0\u7b97\u7b26\u200b\u7684\u200b\u5e38\u89c1\u200b\u5c3e\u58f0\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u5c3e\u58f0\u200b\u878d\u5408\u200b\u7684\u200b\u6700\u200b\u77ed\u200b\u8def\u5f84\u200b\u662f\u200bDefaultEpilogue\u3002\u200b\u53ef\u4ee5\u200b\u5982\u4e0b\u200b\u5b9a\u4e49\u200b\u4e00\u4e2a\u200bCollectiveEpilogue\u3002</p> C++<pre><code>using CollectiveEpilogue = cutlass::epilogue::collective::DefaultEpilogue&lt;\n    cutlass::gemm::TagToStrideC_t&lt;LayoutC&gt;,\n    cutlass::gemm::TagToStrideC_t&lt;LayoutC&gt;,\n    cutlass::epilogue::thread::LinearCombination&lt;ElementC, 1, ElementAccumulator, ElementAccumulator&gt;&gt;;\n</code></pre> <p>\u200b\u5728\u200binclude/cutlass/epilogue/thread\u200b\u4e2d\u200b\u8fd8\u200b\u5305\u62ec\u200bLinearCombinationReLU\u200b\u7b49\u200b\u66f4\u200b\u591a\u200b\u7684\u200b\u8fd0\u7b97\u7b26\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u3002</p> <p>DefaultEpilogue\u200b\u4e0d\u200b\u4f7f\u7528\u200b\u8bbf\u95ee\u8005\u200b\u6811\u200b\u3002\u200b\u76f8\u53cd\u200b\uff0c\u200b\u5b83\u200b\u53ea\u662f\u200b\u5faa\u73af\u200b\u904d\u5386\u200b\u8f93\u51fa\u200b\u7247\u6bb5\u200b\uff08\u200b\u6570\u636e\u200b\uff09\u200b\u5e76\u200b\u5e94\u7528\u200b\u6307\u5b9a\u200b\u7684\u200b\u64cd\u4f5c\u200b\u3002\u200b\u6240\u4ee5\u200b\u5b83\u200b\u4e0d\u662f\u200b\u4e3a\u200b\u590d\u6742\u200b\u7684\u200b\u5c3e\u58f0\u200b\u800c\u200b\u8bbe\u8ba1\u200b\u7684\u200b\u3002</p>"},{"location":"blog/cutlass%E5%BA%93%E4%B8%AD%E7%9A%84%E5%B0%BE%E5%A3%B0%E8%9E%8D%E5%90%88epilogue-fusion%E5%92%8Cepilogue-visitor-trees/#\u5185\u7f6eevts","title":"\u5185\u7f6e\u200bEVTs","text":"<p>\u200b\u5982\u679c\u200b\u60a8\u200b\u9700\u8981\u200b\u66f4\u200b\u590d\u6742\u200b\u7684\u200b\u5185\u5bb9\u200b\uff0c\u200b\u90a3\u4e48\u200b\u60a8\u200b\u5c06\u200b\u9700\u8981\u200b\u4f7f\u7528\u200b EVT\u3002CUTLASS \u200b\u63d0\u4f9b\u200b\u4e86\u200b\u5404\u79cd\u200b\u4f7f\u7528\u200b EVT \u200b\u6784\u5efa\u200b\u7684\u200b\u5e38\u89c1\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5728\u200b include/cutlass/epilogue/fusion/operations.hpp \u200b\u4e2d\u200b\u627e\u5230\u200b\u3002</p> <p>\u200b\u8981\u200b\u4f7f\u7528\u200b\u5185\u7f6e\u200b\u7684\u200b\u5c3e\u58f0\u200b\uff0c\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u4f7f\u7528\u200bCollectiveBuilder\u3002</p> C++<pre><code>using EVTOp = cutlass::epilogue::fusion::LinCombEltAct&lt;\n  cutlass::epilogue::thread::ReLU,\n  ElementD, ElementCompute, ElementC, ElementScalar&gt;;\n\nusing CollectiveEpilogue = typename cutlass::epilogue::collective::CollectiveBuilder&lt;\n      cutlass::arch::Sm90, cutlass::arch::OpClassTensorOp,\n      Shape&lt;_128,_128,_64&gt;, Shape&lt;_1,_1,_1&gt;, // grid and cluster shapes\n      cutlass::epilogue::collective::EpilogueTileAuto, // automatically compute epilogue tile size\n      ElementAccumulator, ElementCompute, // dtypes\n      ElementC, LayoutC, AlignmentC,\n      ElementD, LayoutD, AlignmentD,\n      EpilogueScheduleType, // need TMA warp-specialized to use EVT\n      EVTOp\n    &gt;::CollectiveOp;\n</code></pre> <p>\u200b\u4e0a\u8ff0\u200b\u4ee3\u7801\u200b\u793a\u4f8b\u200b\u4f7f\u7528\u200b EVT \u200b\u5b9e\u73b0\u200b\u4e86\u200b\u5e26\u200b ReLU \u200b\u6fc0\u6d3b\u200b\u7684\u200bLinearCombination\u3002\u200b\u5bf9\u4e8e\u200bEVTOp\uff0c\u200b\u6211\u4eec\u200b\u4ece\u200bcutlass::epilogue::fusion\u200b\u4e2d\u200b\u9009\u62e9\u200b\u4e86\u200b\u5408\u9002\u200b\u7684\u200b\u64cd\u4f5c\u200b\u3002\u200b\u6a21\u677f\u200b\u53c2\u6570\u200b\u5f53\u7136\u200b\u53d6\u51b3\u4e8e\u200b\u6240\u200b\u8ba8\u8bba\u200b\u7684\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u56e0\u6b64\u200b\u8bf7\u200b\u53c2\u8003\u200boperations.hpp\u200b\u4ee5\u200b\u83b7\u53d6\u200b\u6709\u5173\u200b\u7279\u5b9a\u200b\u64cd\u4f5c\u200b\u7684\u200b\u66f4\u200b\u591a\u200b\u8be6\u7ec6\u4fe1\u606f\u200b\u3002\u200b\u5bf9\u4e8e\u200b\u6211\u4eec\u200b\u7684\u200bLinCombEltAct\u200b\u793a\u4f8b\u200b\uff0c\u200b\u7b2c\u4e00\u4e2a\u200b\u53c2\u6570\u200b\u662f\u200b\u6fc0\u6d3b\u200b\u51fd\u6570\u200b\uff08\u200b\u6709\u5173\u200b\u66f4\u200b\u591a\u200b\u9009\u9879\u200b\uff0c\u200b\u8bf7\u53c2\u9605\u200bcutlass/epilogue/thread/activation.h\uff09\uff0c\u200b\u5176\u4f59\u200b\u7684\u200b\u662f\u200b\u8f93\u5165\u200b\u548c\u200b\u8f93\u51fa\u200b\u7684\u200b\u6570\u636e\u7c7b\u578b\u200b\u4ee5\u53ca\u200b\u7528\u4e8e\u200b\u7d2f\u52a0\u200b\u7684\u200b\u6570\u636e\u7c7b\u578b\u200b\u3002</p> <p>\u200b\u6b64\u200b\u5c3e\u58f0\u200b\u9700\u8981\u200b\u989d\u5916\u200b\u7684\u200b\u53c2\u6570\u200b\uff0c\u200b\u6807\u91cf\u200balpha\u200b\u548c\u200bbeta\u3002\u200b\u5bf9\u4e8e\u200b\u4f7f\u7528\u200b CollectiveBuilder \u200b\u6784\u5efa\u200b\u7684\u200b GEMM\uff0c\u200b\u5728\u200b\u521d\u59cb\u5316\u200b\u5185\u6838\u200b\u65f6\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u8fd9\u4e9b\u200b\u53c2\u6570\u200b\u4e0e\u200b\u5185\u6838\u200b\u7684\u200b\u5176\u4f59\u200b\u53c2\u6570\u200b\u4e00\u8d77\u200b\u6307\u5b9a\u200b\u3002\u200b\u5185\u6838\u200b\u7684\u200b\u53c2\u6570\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\u3002</p> C++<pre><code>typename Gemm::Arguments arguments {\n    cutlass::gemm::GemmUniversalMode::kGemm, // GEMM mode (batched, grouped, // etc.)\n    problem_size,\n    {block_A.get(), stride_A,                // pointers and strides for mainloop\n      block_B.get(), stride_B},\n    {{},                   // arguments.epilogue.thread, modified below\n      block_C.get(), stride_C,                // pointers and strides for epilogue\n      block_D.get(), stride_D},\n    hw_info                                  // hardware info\n};\n</code></pre> <p>\u200b\u5bf9\u200b EVT \u200b\u7684\u200b\u53c2\u6570\u200b\u53ef\u200b\u5728\u200barguments.epilogue.thread\u200b\u4e2d\u200b\u627e\u5230\u200b\u3002\u200b\u5bf9\u4e8e\u200b\u5185\u7f6e\u200b\u7684\u200b EVT\uff0c\u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b\u7531\u200b\u65b9\u4fbf\u200b\u547d\u540d\u200b\u7684\u200b\u53c2\u6570\u200b\u7ec4\u6210\u200b\u7684\u200b\u6241\u5e73\u200b\u7ed3\u6784\u200b\uff0c\u200b\u8fd9\u6837\u200b\u6211\u4eec\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u5199\u200b\uff1a</p> C++<pre><code>arguments.epilogue.thread.alpha = alpha;\narguments.epilogue.thread.beta = beta;\nGemm gemm;\ngemm.initialize(arguments, workspace_ptr);\n// workspace_ptr points to additional GMEM workspace, allocated elsewhere\n</code></pre>"},{"location":"blog/cutlass%E5%BA%93%E4%B8%AD%E7%9A%84%E5%B0%BE%E5%A3%B0%E8%9E%8D%E5%90%88epilogue-fusion%E5%92%8Cepilogue-visitor-trees/#\u5bf9-evt-\u7684\u7ed3\u6784\u8fdb\u884c\u62c6\u89e3\u5206\u6790","title":"\u5bf9\u200b EVT \u200b\u7684\u200b\u7ed3\u6784\u200b\u8fdb\u884c\u200b\u62c6\u89e3\u200b\u5206\u6790","text":"<p>\u200b\u5982\u679c\u200b\u5185\u7f6e\u200b\u64cd\u4f5c\u200b\u90fd\u200b\u4e0d\u200b\u7b26\u5408\u200b\u4f60\u200b\u7684\u200b\u9700\u6c42\u200b\uff0c\u200b\u90a3\u4e48\u200b\u4f60\u200b\u9700\u8981\u200b\u901a\u8fc7\u200b\u81ea\u5df1\u200b\u6784\u5efa\u200b\u8bbf\u95ee\u8005\u200b\u6811\u6765\u200b\u521b\u5efa\u200b\u81ea\u5b9a\u4e49\u200b EVT\u3002\u200b\u4e3a\u4e86\u200b\u8ba8\u8bba\u200b\u8fd9\u4e2a\u200b\u8fc7\u7a0b\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u770b\u770b\u200b\u5185\u7f6e\u200b\u7684\u200bLinCombEltAct\u200b\u662f\u200b\u5982\u4f55\u200b\u6784\u5efa\u200b\u7684\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u8fd9\u4e9b\u200b\u5185\u7f6e\u200b\u64cd\u4f5c\u200b\u662f\u200b\u4f7f\u7528\u200b\u4e0e\u200b\u521b\u5efa\u200b\u81ea\u5b9a\u4e49\u200b EVT \u200b\u76f8\u540c\u200b\u7684\u200b\u6784\u5efa\u200b\u5757\u200b\u521b\u5efa\u200b\u7684\u200b\u3002</p> C++<pre><code>using Sm90LinearCombination = \n  Sm90EVT&lt;Sm90Compute&lt;homogeneous_multiply_add, ElementOutput, ElementCompute, RoundStyle&gt;, // beta * C + (alpha * acc)\n    Sm90ScalarBroadcast&lt;ElementScalar&gt;, // beta\n    Sm90SrcFetch&lt;ElementSource&gt;, // C\n    Sm90EVT&lt;Sm90Compute&lt;multiplies, ElementCompute, ElementCompute, RoundStyle&gt;, // alpha * acc\n      Sm90ScalarBroadcast&lt;ElementScalar&gt;, // alpha\n      Sm90AccFetch // acc\n    &gt;\n  &gt;;\n\nusing Sm90LinCombEltAct =\n  Sm90EVT&lt;Sm90Compute&lt;ActivationFn, ElementOutput, ElementCompute, RoundStyle&gt;, // activation(beta * C + (alpha * acc))\n    Sm90LinearCombination&lt;ElementCompute, ElementCompute, ElementSource, ElementScalar, RoundStyle&gt; // beta * C + (alpha * acc)\n  &gt;;\n</code></pre> <p>CUTLASS \u200b\u8bbf\u95ee\u8005\u200b\u6811\u200b\u7684\u200b\u6838\u5fc3\u200b\u662f\u200bSm90EVT\uff0c\u200b\u5b83\u200b\u662f\u200bSm90TreeVisitor\u200b\u7684\u200b\u522b\u540d\u200b\u3002\u200b\u8fd9\u4e2a\u200b\u7c7b\u200b\u4ee3\u8868\u200b\u6811\u4e2d\u200b\u7684\u200b\u975e\u53f6\u200b\u8282\u70b9\u200b\u3002\u200b\u7b2c\u4e00\u4e2a\u200b\u53c2\u6570\u200b\u662f\u200b\u4e0e\u200b\u6b64\u200b\u8282\u70b9\u200b\u5173\u8054\u200b\u7684\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u800c\u200b\u540e\u9762\u200b\u7684\u200b\u6240\u6709\u200b\u53c2\u6570\u200b\u90fd\u200b\u662f\u200b\u5b50\u200b\u8282\u70b9\u200b\u3002\u200b\u6a21\u677f\u200b\u53c2\u6570\u200b\u5141\u8bb8\u200b\u4efb\u610f\u200b\u6570\u91cf\u200b\u7684\u200b\u8282\u70b9\u200b\u2014\u2014\u200b\u4f8b\u5982\u200b\uff0cSm90LinCombEltAct\u200b\u4e2d\u200b\u7684\u200b\u6fc0\u6d3b\u200b\u51fd\u6570\u200b\u63a5\u53d7\u200b\u4e00\u4e2a\u200b\u8282\u70b9\u200b\uff0c\u200b\u800c\u200bSm90LinearCombination\u200b\u4e2d\u200b\u7684\u200b\u878d\u5408\u200b\u4e58\u6cd5\u200b\u52a0\u6cd5\u200b\u64cd\u4f5c\u200b\u63a5\u53d7\u200b\u4e09\u4e2a\u200b\u8282\u70b9\u200b\u3002</p> <p>Sm90Compute\u200b\u662f\u200b\u4e00\u4e2a\u200b\u8282\u70b9\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u5b83\u200b\u5c06\u200b\u4e00\u4e2a\u200b\u8282\u70b9\u200b\u5b9a\u4e49\u200b\u4e3a\u200b\u8ba1\u7b97\u200b\u8282\u70b9\u200b\u3002\u200b\u7b2c\u4e00\u4e2a\u200b\u6a21\u677f\u200b\u53c2\u6570\u200b\u662f\u200b\u4e00\u4e2a\u200b\u9010\u200b\u5143\u7d20\u200b\u64cd\u4f5c\u200b\uff08\u200b\u4f8b\u5982\u200b ReLU\u3001FMA\uff09\uff0c\u200b\u5176\u4ed6\u200b\u53c2\u6570\u200b\u786e\u5b9a\u200b\u6240\u200b\u4f7f\u7528\u200b\u7684\u200b\u6570\u636e\u7c7b\u578b\u200b\u548c\u200b\u6d6e\u70b9\u200b\u820d\u5165\u200b\u65b9\u5f0f\u200b\u3002</p> <p></p> <p>\u200b\u4e0e\u200b\u5185\u7f6e\u200b EVT \u200b\u4e00\u6837\u200b\uff0c\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u4f20\u5165\u200b\u53c2\u6570\u200b alpha \u200b\u548c\u200b beta \u200b\u6765\u200b\u8fd0\u884c\u200b GEMM\u3002\u200b\u7136\u800c\u200b\uff0c\u200b\u5bf9\u4e8e\u200b\u81ea\u5b9a\u4e49\u200b EVT\uff0c\u200b\u6211\u4eec\u200b\u4e0d\u80fd\u200b\u518d\u200b\u4f7f\u7528\u200b\u5e73\u9762\u200b\u547d\u540d\u200b\u53c2\u6570\u200b\u63a5\u53e3\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u53ef\u80fd\u200b\u5b58\u5728\u200b\u540c\u4e00\u200b\u7c7b\u578b\u200b\u8282\u70b9\u200b\u7684\u200b\u591a\u4e2a\u200b\u5b9e\u4f8b\u200b\u3002\u200b\u76f8\u53cd\u200b\uff0c\u200b\u53c2\u6570\u200b\u5f62\u6210\u200b\u4e00\u68f5\u200b\u53cd\u6620\u200b EVT \u200b\u7ed3\u6784\u200b\u7684\u200b\u6811\u200b\u3002</p> <p>Sm90EVT\u200b\u8282\u70b9\u200b\u4ee5\u200b\u4ee5\u4e0b\u200b\u5f62\u5f0f\u200b\u83b7\u53d6\u200b\u53c2\u6570\u200b\uff1a</p> Text Only<pre><code>{first_child_args, ... last_child_args, node_op_args}\n</code></pre> <p>\u200b\u5bf9\u4e8e\u200b\u8fd9\u4e2a\u200b\u6811\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u8fd9\u6837\u200b\u5199\u200b:</p> <p></p>C++<pre><code>arguments.epilogue.thread =\n{    // unary op: activation(beta * C + (alpha * acc))\n  {    // ternary op (FMA): beta * C + (alpha * acc)\n     {{beta}, {beta_ptr}}, // args to Sm90ScalarBroadcast\n     {},                   // no args to Sm90SrcFetch (kernel knows about C)\n     {                     // binary op : alpha * acc\n       {{alpha}, {alpha_ptr}}, // args to Sm90ScalarBroadcast\n       {},                     // no args to Sm90AccFetch\n       {}                  // op args: multiplies\n     },                    // end binary op\n     {} // op args: multiply_add\n   },   // end ternary op\n   activation_args // op args: activation\n };   // end unary op\n</code></pre> \u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u6811\u200b\u8bbf\u95ee\u8005\u200b\u8282\u70b9\u200b\u7684\u200bnode_op_args\u200b\u51fa\u73b0\u200b\u5728\u200b\u6240\u6709\u200b\u5b50\u200b\u8282\u70b9\u200b\u7684\u200b\u53c2\u6570\u200b\u4e4b\u540e\u200b\u2014\u2014\u200b\u800c\u200b\u5728\u200bSm90EVT\u200b\u7684\u200b\u6a21\u677f\u200b\u53c2\u6570\u200b\u4e2d\u200b\uff0c\u200b\u8282\u70b9\u200b\u64cd\u4f5c\u200b\u51fa\u73b0\u200b\u5728\u5b50\u200b\u8282\u70b9\u200b\u4e4b\u524d\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u64cd\u4f5c\u200b\u6811\u200b\u548c\u200b\u53c2\u6570\u200b\u6811\u200b\u6ca1\u6709\u200b\u76f8\u540c\u200b\u7684\u200b\u7ed3\u6784\u200b\u3002\u200b\u4e24\u8005\u4e4b\u95f4\u200b\u7684\u200b\u5173\u7cfb\u200b\u5982\u56fe\u200b 3\u200b\u6240\u793a\u200b\u3002<p></p> <p></p>"},{"location":"blog/cutlass%E5%BA%93%E4%B8%AD%E7%9A%84%E5%B0%BE%E5%A3%B0%E8%9E%8D%E5%90%88epilogue-fusion%E5%92%8Cepilogue-visitor-trees/#\u66f4\u590d\u6742\u7684\u4f8b\u5b50\u4e8c\u5143\u4ea4\u53c9\u71b5\u635f\u5931","title":"\u66f4\u200b\u590d\u6742\u200b\u7684\u200b\u4f8b\u5b50\u200b\uff1a\u200b\u4e8c\u5143\u200b\u4ea4\u53c9\u200b\u71b5\u200b\u635f\u5931","text":"<p>\u200b\u8ba9\u200b\u6211\u4eec\u200b\u5f00\u53d1\u200b\u4e00\u4e2a\u200b\u66f4\u200b\u590d\u6742\u200b\u7684\u200b\u3001\u200b\u5177\u6709\u200b\u5b9e\u9645\u200b\u5e94\u7528\u200b\u4ef7\u503c\u200b\u4e14\u200b\u4e0d\u662f\u200b\u7531\u200b CUTLASS \u200b\u9884\u5148\u200b\u5b9a\u4e49\u200b\u7684\u200b\u793a\u4f8b\u200b\uff1a\u200b\u4e8c\u5143\u200b\u4ea4\u53c9\u200b\u71b5\u200b\u635f\u5931\u200b(binary cross-entropy loss)\u3002\u200b\u4f5c\u4e3a\u200b\u52a8\u673a\u200b\uff0c\u200b\u5047\u8bbe\u200b\u6211\u4eec\u200b\u6b63\u5728\u200b\u8bad\u7ec3\u200b\u4e00\u4e2a\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u6a21\u578b\u200b\u6765\u200b\u68c0\u6d4b\u200b\u56fe\u50cf\u200b\u4e2d\u200b\u7684\u200b\u5bf9\u8c61\u200b\u3002\u200b\u5bf9\u4e8e\u200b\u63d0\u4f9b\u200b\u7684\u200b\u6bcf\u5f20\u200b\u56fe\u50cf\u200b\uff0c\u200b\u6a21\u578b\u200b\u5e94\u8be5\u200b\u6807\u6ce8\u200b\u5b83\u200b\u662f\u5426\u200b\u5305\u542b\u200b\u4e00\u4e2a\u200b\u4eba\u200b\u3001\u200b\u4e00\u53ea\u200b\u72d7\u200b\u3001\u200b\u4e00\u8f86\u200b\u516c\u5171\u6c7d\u8f66\u200b\u7b49\u7b49\u200b\u3002\u200b\u7ed9\u5b9a\u200b\u7684\u200b\u56fe\u50cf\u200b\u53ef\u80fd\u200b\u5305\u542b\u200b\u4efb\u610f\u200b\u6570\u91cf\u200b\u7684\u200b\u8fd9\u4e9b\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u5e76\u4e14\u200b\u6709\u200b\u5927\u91cf\u200b\u7684\u200b\u5bf9\u8c61\u200b\u9700\u8981\u200b\u8003\u8651\u200b\u3002\u200b\u5728\u200b\u8fd9\u79cd\u200b\u88ab\u200b\u79f0\u4e3a\u200b\u6781\u7aef\u200b\u591a\u200b\u6807\u7b7e\u200b\u5206\u7c7b\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u8bc4\u4f30\u200b\u6a21\u578b\u200b\u7684\u200b\u4e00\u79cd\u200b\u6f5c\u5728\u200b\u65b9\u6cd5\u200b\u662f\u200b\u5c06\u200b\u6bcf\u4e2a\u200b\u6807\u7b7e\u200b\u89c6\u4e3a\u200b\u4e00\u4e2a\u200b\u5355\u72ec\u200b\u7684\u200b\u4e8c\u5143\u200b\u5206\u7c7b\u200b\u95ee\u9898\u200b\uff0c\u200b\u72ec\u7acb\u200b\u8bc4\u4f30\u200b\u6a21\u578b\u200b\u5728\u200b\u6bcf\u4e2a\u200b\u95ee\u9898\u200b\u4e0a\u200b\u7684\u200b\u6027\u80fd\u200b\uff0c\u200b\u5e76\u200b\u6c47\u603b\u200b\u7ed3\u679c\u200b\u3002\u200b\u8fd9\u200b\u5c06\u200b\u5f15\u5bfc\u200b\u6211\u4eec\u200b\u5f97\u5230\u200b\u4ee5\u4e0b\u200b\u635f\u5931\u200b\u51fd\u6570\u200b</p> \\[ \\mathrm{Loss}=-\\frac{1}{n}\\sum_{i=1}^n\\sum_{j=1}^L\\left[C_{ij}\\log\\sigma(f_{ij})+(1-C_{ij})\\log(1-\\sigma(f_{ij}))\\right], \\] <ul> <li> <p>n\u200b\u662f\u200b\u8bad\u7ec3\u6837\u672c\u200b\u7684\u200b\u6570\u91cf\u200b</p> </li> <li> <p>L\u200b\u662f\u200b\u53ef\u80fd\u200b\u7684\u200b\u6807\u7b7e\u200b\u6570\u91cf\u200b</p> </li> <li> <p>$ C_{ij} $ \u200b\u662f\u200b\u771f\u5b9e\u200b\u6807\u7b7e\u200b\u77e9\u9635\u200b\uff0c\u200b\u5176\u4e2d\u200b\u5982\u679c\u200b\u7b2c\u200b i \u200b\u4e2a\u200b\u6837\u672c\u200b\u5b9e\u9645\u4e0a\u200b\u5177\u6709\u200b\u6807\u7b7e\u200b j\uff0c$ C_{ij} $ \u200b\u5219\u200b\u7b49\u4e8e\u200b 1\uff0c\u200b\u5426\u5219\u200b\u4e3a\u200b 0\u3002</p> </li> <li> <p>$ f_{ij} $ \u200b\u662f\u200b\u6a21\u578b\u200b\u8f93\u51fa\u200b\u7684\u200b\u77e9\u9635\u200b\uff0c\u200b\u56e0\u6b64\u200b\u6bcf\u4e2a\u200b $ f_{ij} $ \u200b\u90fd\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5b9e\u6570\u200b\uff0c\u200b\u5982\u679c\u200b\u6a21\u578b\u200b\u66f4\u200b\u6709\u200b\u4fe1\u5fc3\u200b\u7b2c\u200b i \u200b\u4e2a\u200b\u793a\u4f8b\u200b\u5c5e\u4e8e\u200b\u7c7b\u522b\u200b j\uff0c\u200b\u5219\u200b\u8be5\u200b\u5b9e\u6570\u200b\u66f4\u5927\u200b\u3002</p> </li> <li> <p>$ sigma $ \u200b\u662f\u200bsigmoid function</p> </li> </ul> <p></p> <p>\u200b\u8fd9\u200b\u5e26\u6765\u200b\u4e86\u200b\u4e00\u7cfb\u5217\u200b\u65b0\u200b\u7684\u200b\u590d\u6742\u200b\u60c5\u51b5\u200b\uff1a</p> <ul> <li> <p>\u200b\u9664\u4e86\u200b\u6807\u91cf\u200b\u4e4b\u5916\u200b\uff0c\u200b\u6211\u4eec\u200b\u73b0\u5728\u200b\u8fd8\u200b\u9700\u8981\u200b\u5e7f\u64ad\u200b\u884c\u5411\u91cf\u200b $ b^T $\u3002\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b EVT \u200b\u8282\u70b9\u200bSm90RowBroadcast\u200b\u6765\u200b\u5b9e\u73b0\u200b\u8fd9\u200b\u4e00\u70b9\u200b\u3002\uff08\u200b\u540c\u6837\u200b\uff0c\u200b\u5bf9\u4e8e\u200b\u5e7f\u64ad\u200b\u5217\u200b\u5411\u91cf\u200b\uff0c\u200b\u4e5f\u200b\u6709\u200b EVT \u200b\u8282\u70b9\u200bSm90ColBroadcast\u3002\uff09</p> </li> <li> <p>\u200b\u7ed3\u679c\u200b\u5fc5\u987b\u200b\u7b80\u5316\u200b\u4e3a\u200b\u6807\u91cf\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u65b0\u200b\u7684\u200b EVT \u200b\u8282\u70b9\u200bSm90ScalarReduction\u200b\u6765\u200b\u5b9e\u73b0\u200b\u3002\uff08\u200b\u4e5f\u200b\u6709\u200b\u7528\u4e8e\u200b\u884c\u548c\u5217\u200b\u7b80\u5316\u200b\u7684\u200b EVT \u200b\u8282\u70b9\u200b\u3002\uff09</p> </li> <li> <p>\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u52a0\u8f7d\u200b\u4e00\u4e2a\u200b\u989d\u5916\u200b\u7684\u200b\u77e9\u9635\u200b\uff0c\u200b\u5373\u200b\u6807\u7b7e\u200b\u77e9\u9635\u200bC\uff0c\u200b\u7406\u60f3\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u4f7f\u7528\u200b TMA\u3001\u200b\u7ba1\u9053\u200b(pipeline)\u200b\u548c\u200b warp-specialization\u3002CUTLASS \u200b\u7684\u200b GEMM \u200b\u5185\u6838\u200b\u671f\u671b\u200b\u6267\u884c\u200b\u8ba1\u7b97\u200b $ D = AB + C $\uff0c\u200b\u56e0\u6b64\u200b\u65e0\u8bba\u5982\u4f55\u200b\u90fd\u200b\u4f1a\u200b\u63a5\u53d7\u200b\u4e00\u4e2a\u200b\u989d\u5916\u200b\u7684\u200b\u8f93\u5165\u200b\u77e9\u9635\u200bC\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200bSm90SrcFetch\u200b\u8bbf\u95ee\u200b\u5b83\u200b\u3002\u200b\u5982\u679c\u200b\u6211\u4eec\u200b\u4e0d\u60f3\u200b\u8fd9\u6837\u200b\u505a\u200b\uff0c\u200b\u6216\u8005\u200b\u5982\u679c\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u52a0\u8f7d\u200b\u591a\u4e2a\u200b\u989d\u5916\u200b\u7684\u200b\u77e9\u9635\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200bSm90AuxLoad\u3002</p> </li> <li> <p>\u200b\u8be5\u56fe\u200b\u4e0d\u518d\u200b\u662f\u200b\u6811\u200b\uff1a\u200b\u5728\u200b\u8ba1\u7b97\u200b\u4e2d\u200b\uff0c$ sigma(f_{ij}) $ \u200b\u548c\u200b $ C_{ij} $ \u200b\u90fd\u200b\u88ab\u200b\u4f7f\u7528\u200b\u4e86\u200b\u4e24\u6b21\u200b\u3002\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u91cd\u65b0\u200b\u52a0\u8f7d\u200b\u6216\u200b\u91cd\u65b0\u200b\u8ba1\u7b97\u200b\u8fd9\u4e9b\u200b\u77e9\u9635\u200b\u4e24\u6b21\u200b\u5c06\u200b\u56fe\u200b\u8f6c\u6362\u200b\u4e3a\u6811\u200b\uff0c\u200b\u4f46\u200b\u8fd9\u4f1a\u200b\u5e26\u6765\u200b\u4e0d\u826f\u200b\u7684\u200b\u6027\u80fd\u200b\u6210\u672c\u200b\u3002\u200b\u8fd9\u4e2a\u200b\u95ee\u9898\u200b\u662f\u200b\u53ef\u4ee5\u200b\u89e3\u51b3\u200b\u7684\u200b\uff0c\u200b\u4f46\u200b\u5b83\u200b\u7684\u200b\u89e3\u51b3\u65b9\u6848\u200b\u66f4\u200b\u590d\u6742\u200b\uff0c\u200b\u9700\u8981\u200b\u89e3\u91ca\u4e00\u4e0b\u200b\u3002</p> </li> </ul>"},{"location":"blog/cutlass%E5%BA%93%E4%B8%AD%E7%9A%84%E5%B0%BE%E5%A3%B0%E8%9E%8D%E5%90%88epilogue-fusion%E5%92%8Cepilogue-visitor-trees/#\u62d3\u6251\u8bbf\u95ee\u8005topological-visitors","title":"\u62d3\u6251\u200b\u8bbf\u95ee\u8005\u200b(Topological visitors)","text":"<p>EVTs \u200b\u662f\u200b\u7528\u200b\u6811\u200b\u8868\u793a\u200b\u7684\u200b\u8ba1\u7b97\u200b\u56fe\u200b\u3002\u200b\u5728\u200b\u8bbf\u95ee\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u6811\u200b\u88ab\u200b\u9012\u5f52\u200b\u5730\u200b\u904d\u5386\u200b\uff1b\u200b\u6bcf\u4e2a\u200b\u6811\u200b\u8bbf\u95ee\u8005\u200b\u8282\u70b9\u200b\u8c03\u7528\u200b\u5176\u200b\u6bcf\u4e2a\u200b\u5b50\u200b\u8282\u70b9\u200b\u7684\u200b\u8bbf\u95ee\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u5e76\u200b\u4f7f\u7528\u200b\u5176\u200b\u6307\u5b9a\u200b\u7684\u200b\u8282\u70b9\u200b\u64cd\u4f5c\u200b\u7ec4\u5408\u200b\u5b83\u4eec\u200b\u7684\u200b\u7ed3\u679c\u200b\u3002\u200b\u91cd\u8981\u200b\u7684\u200b\u662f\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u8282\u70b9\u200b\u9884\u8ba1\u200b\u53ea\u200b\u88ab\u200b\u8bbf\u95ee\u200b\u4e00\u6b21\u200b\u3002\u200b\u4f46\u200b\u4e00\u822c\u6765\u8bf4\u200b\uff0c\u200b\u8ba1\u7b97\u200b\u56fe\u200b\u4e0d\u200b\u4e00\u5b9a\u200b\u662f\u200b\u6811\u200b\uff0c\u200b\u800c\u662f\u200b\u6709\u200b\u5411\u200b\u65e0\u200b\u73af\u56fe\u200b\u3002\u200b\u5b9e\u9645\u4e0a\u200b\uff0c\u200b\u8fd9\u200b\u610f\u5473\u7740\u200b\u4e00\u4e2a\u200b\u8282\u70b9\u200b\u7684\u200b\u8f93\u51fa\u200b\u53ef\u80fd\u200b\u88ab\u200b\u591a\u4e2a\u200b\u5176\u4ed6\u200b\u8282\u70b9\u200b\u9700\u8981\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u6211\u4eec\u200b\u4ecd\u7136\u200b\u5c06\u200b\u8fd9\u6837\u200b\u7684\u200b\u56fe\u200b\u8868\u793a\u200b\u4e3a\u200b\u4e00\u68f5\u6811\u200b\uff0c\u200b\u4ec5\u200b\u4f7f\u7528\u200b\u6811\u200b\u8bbf\u95ee\u8005\u200b\uff0c\u200b\u90a3\u4e48\u200b\u6211\u4eec\u200b\u5b9e\u9645\u4e0a\u200b\u5fc5\u987b\u200b\u590d\u5236\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u8282\u70b9\u200b\uff1b\u200b\u6bcf\u4e2a\u200b\u9700\u8981\u200b\u8f93\u51fa\u200b\u7684\u200b\u7236\u200b\u8282\u70b9\u200b\u90fd\u200b\u6709\u200b\u4e00\u4e2a\u200b\u3002\u200b\u8fd9\u79cd\u200b\u65b9\u6cd5\u200b\u6548\u7387\u200b\u4f4e\u4e0b\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5b83\u4f1a\u200b\u5bfc\u81f4\u200b\u5927\u91cf\u200b\u91cd\u590d\u200b\u5de5\u4f5c\u200b\u3002\u200b\u76f8\u53cd\u200b\uff0c\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b\u4e00\u4e2a\u200b\u79f0\u4e3a\u200b\u201c\u200b\u62d3\u6251\u200b\u8bbf\u95ee\u8005\u200b\u201d\u200b\u7684\u200b\u8282\u70b9\u200b\u3002\u200b\u867d\u7136\u200b\u6811\u200b\u8bbf\u95ee\u8005\u200b\u7528\u4e8e\u200b\u8868\u793a\u200b\u8ba1\u7b97\u200b\u56fe\u4e2d\u200b\u7684\u200b\u5355\u4e2a\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u4f46\u200b\u62d3\u6251\u200b\u8bbf\u95ee\u8005\u200b\u8868\u793a\u200b\u8be5\u56fe\u200b\u7684\u200b\u201c\u200b\u4efb\u4f55\u200b\u5b50\u56fe\u200b\u201d\u3002</p> <p>\u200b\u62d3\u6251\u200b\u8bbf\u95ee\u8005\u200b\u5728\u200b\u5176\u5b50\u200b\u56fe\u4e2d\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u8282\u70b9\u200b\u90fd\u200b\u6709\u200b\u4e00\u4e2a\u200b\u5b50\u200b\u8bbf\u95ee\u8005\u200b\u3002\u200b\u5728\u200b\u8bbf\u95ee\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u5b83\u200b\u4ee5\u200b\u62d3\u6251\u200b\u987a\u5e8f\u200b\u5c06\u200b\u4efb\u52a1\u200b\u59d4\u6258\u200b\u7ed9\u200b\u5176\u5b50\u200b\u8bbf\u95ee\u8005\u200b\uff0c\u200b\u7528\u200b\u5df2\u200b\u8bbf\u95ee\u200b\u7684\u200b\u5b50\u200b\u8bbf\u95ee\u8005\u200b\u7684\u200b\u8f93\u51fa\u200b\u586b\u5145\u200b\u6bcf\u4e2a\u200b\u5b50\u200b\u8bbf\u95ee\u8005\u200b\u7684\u200b\u8f93\u5165\u200b\u3002\u200b\u8fd9\u91cc\u200b\u7684\u200b\u201c\u200b\u62d3\u6251\u200b\u987a\u5e8f\u200b\u201d\u200b\u610f\u5473\u7740\u200b\u5728\u200b\u8ba1\u7b97\u200b\u56fe\u4e2d\u200b\uff0c\u200b\u4efb\u4f55\u200b\u5b50\u200b\u8282\u70b9\u200b\u90fd\u200b\u4e0d\u4f1a\u200b\u5728\u200b\u5176\u200b\u524d\u9a71\u200b\u8282\u70b9\u200b\u4e4b\u524d\u200b\u88ab\u200b\u8bbf\u95ee\u200b\u2014\u2014\u200b\u6362\u53e5\u8bdd\u8bf4\u200b\uff0c\u200b\u5f53\u200b\u8bbf\u95ee\u200b\u4e00\u4e2a\u200b\u540e\u4ee3\u200b\u8282\u70b9\u200b\u65f6\u200b\uff0c\u200b\u5b83\u200b\u7684\u200b\u6240\u6709\u200b\u8f93\u5165\u200b\u90fd\u200b\u5fc5\u987b\u200b\u51c6\u5907\u200b\u597d\u200b\u3002\u200b\u62d3\u6251\u200b\u8bbf\u95ee\u8005\u200b\u7684\u200b\u8fd4\u56de\u503c\u200b\u662f\u200b\u5b83\u200b\u8bbf\u95ee\u200b\u7684\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u8282\u70b9\u200b\u7684\u200b\u8fd4\u56de\u503c\u200b\u3002</p> <p></p> <p>\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b\u4f8b\u5b50\u200b\u5982\u56fe\u200b 5\u200b\u6240\u793a\u200b\u3002\u200b\u8fd9\u4e2a\u200b\u8ba1\u7b97\u200b\u56fe\u6709\u200b\u4e24\u4e2a\u200b\u8282\u70b9\u200b\uff0c1 \u200b\u548c\u200b 2\uff0c\u200b\u5b83\u4eec\u200b\u90fd\u200b\u9700\u8981\u200b\u8282\u70b9\u200b 0 \u200b\u7684\u200b\u7ed3\u679c\u200b\uff0c\u200b\u6240\u4ee5\u200b\u6211\u4eec\u200b\u5e94\u8be5\u200b\u7528\u200b\u62d3\u6251\u200b\u8bbf\u95ee\u200b\u5668\u6765\u200b\u6784\u5efa\u200b\u76f8\u5173\u200b\u7684\u200b EVT\u3002\u200b\u8282\u70b9\u200b 0 \u200b\u4e0d\u200b\u9700\u8981\u200b\u4efb\u4f55\u200b\u8f93\u5165\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5b83\u200b\u53ea\u200b\u8fd4\u56de\u200b\u7d2f\u52a0\u5668\u200b\u7684\u200b\u503c\u200b\u3002\u200b\u8282\u70b9\u200b 1 \u200b\u548c\u200b 2 \u200b\u5404\u53d6\u200b\u4e00\u4e2a\u200b\u8f93\u5165\u200b\uff0c\u200b\u5373\u200b\u8282\u70b9\u200b 0 \u200b\u7684\u200b\u8f93\u51fa\u200b\u3002\u200b\u8282\u70b9\u200b 3 \u200b\u53d6\u200b\u4e24\u4e2a\u200b\u8f93\u5165\u200b\uff0c\u200b\u5373\u200b\u8282\u70b9\u200b 1 \u200b\u548c\u200b\u8282\u70b9\u200b 2 \u200b\u7684\u200b\u8f93\u51fa\u200b\u3002\u200b\u6700\u540e\u200b\uff0c\u200b\u62d3\u6251\u200b\u8bbf\u95ee\u200b\u5668\u200b\u8fd4\u56de\u200b\u8282\u70b9\u200b 3 \u200b\u7684\u200b\u8f93\u51fa\u200b\u3002</p> <p>\u200b\u6b64\u65f6\u200b\uff0cEVT \u200b\u662f\u200b\u4e00\u68f5\u6811\u200b\uff0c\u200b\u6709\u200b\u4e00\u4e2a\u200b\u6839\u200b\uff08\u200b\u62d3\u6251\u200b\u8bbf\u95ee\u8005\u200b\uff09\u200b\u548c\u200b\u56db\u7247\u200b\u53f6\u5b50\u200b\uff08\u200b\u8ba1\u7b97\u200b\u56fe\u200b\u7684\u200b\u7f16\u53f7\u200b\u8282\u70b9\u200b\uff09\u3002</p> <p>\u200b\u56fe\u200b\u7684\u200b\u53f3\u4fa7\u200b\u7ed9\u51fa\u200b\u4e86\u200b\u62d3\u6251\u200b\u8bbf\u95ee\u200b\u5668\u200b\u7684\u200b CUTLASS \u200b\u8bed\u6cd5\u200b\u3002\u200b\u7b2c\u4e00\u4e2a\u200b\u6a21\u677f\u200b\u53c2\u6570\u200b\u662f\u200b\u8ba1\u7b97\u200b\u7684\u200b\u6570\u636e\u7c7b\u578b\u200b\u3002\u200b\u7b2c\u4e8c\u4e2a\u200b\u662f\u200b\u5143\u7ec4\u200b\u5e8f\u5217\u200b\u3002\u200b\u5176\u4f59\u200b\u7684\u200b\u6a21\u677f\u200b\u53c2\u6570\u200b\u662f\u200b\u88ab\u200b\u8bbf\u95ee\u200b\u7684\u200b\u8282\u70b9\u200b\uff08\u200b\u5b83\u4eec\u200b\u672c\u8eab\u200b\u53ef\u4ee5\u200b\u662f\u200b\u6811\u200b\u6216\u200b\u62d3\u6251\u200b\u8bbf\u95ee\u200b\u5668\u200b\uff09\u3002\u200b\u8282\u70b9\u200b\u6309\u7167\u200b\u5b83\u4eec\u200b\u5728\u200b\u53c2\u6570\u200b\u4e2d\u200b\u51fa\u73b0\u200b\u7684\u200b\u987a\u5e8f\u200b\u8fdb\u884c\u200b\u679a\u4e3e\u200b\uff0c\u200b\u7b2c\u4e00\u4e2a\u200b\u662f\u200b\u8282\u70b9\u200b 0\u3002\u200b\u56de\u5230\u200b\u5143\u7ec4\u200b\uff0c\u200b\u5b83\u4eec\u200b\u663e\u793a\u200b\u4e86\u200b\u8282\u70b9\u200b\u4f9d\u8d56\u200b\u5173\u7cfb\u200b\uff0c\u200b\u5176\u4e2d\u200b\u7b2c\u200b N \u200b\u4e2a\u200b\u5143\u7ec4\u200b\u5217\u51fa\u200b\u4e86\u200b\u5176\u200b\u8f93\u51fa\u200b\u5c06\u200b\u7528\u4f5c\u200b\u8282\u70b9\u200b N \u200b\u7684\u200b\u8f93\u5165\u200b\u7684\u200b\u8282\u70b9\u200b\u3002</p> <p>\u200b\u603b\u4e4b\u200b\uff0c\u200b\u62d3\u6251\u200b\u8bbf\u95ee\u8005\u200b\u7684\u200b\u76ee\u7684\u200b\u662f\u200b\u5c06\u200b\u975e\u200b\u6811\u5f62\u200b\u6709\u200b\u5411\u200b\u65e0\u200b\u73af\u56fe\u200b\uff08DAG\uff09\u200b\u8f6c\u6362\u200b\u4e3a\u6811\u200b\u3002\u200b\u8fd9\u200b\u610f\u5473\u7740\u200b\uff0c\u200b\u4f5c\u4e3a\u200b\u4e00\u4e2a\u200b\u7ecf\u9a8c\u200b\u6cd5\u5219\u200b\uff0c\u200b\u62d3\u6251\u200b\u8bbf\u95ee\u8005\u200b\u53ea\u200b\u9700\u8981\u200b\u8bbf\u95ee\u200b\u8ba1\u7b97\u200b\u56fe\u200b\u7684\u200b\u975e\u6811\u200b\u90e8\u5206\u200b\u3002\u200b\u5982\u56fe\u200b 5 \u200b\u6240\u793a\u200b\uff0c\u200b\u8fd9\u90e8\u5206\u200b\u901a\u5e38\u200b\u662f\u200b\u201c\u200b\u5728\u200b\u5206\u652f\u200b\u548c\u200b\u5408\u5e76\u200b\u4e4b\u95f4\u200b\u201d\uff0c\u200b\u4ece\u200b\u751f\u6210\u200b\u591a\u4e2a\u200b\u8ba1\u7b97\u200b\u6d41\u200b\u7684\u200b\u5730\u65b9\u200b\u5f00\u59cb\u200b\uff0c\u200b\u5230\u200b\u5b83\u4eec\u200b\u91cd\u65b0\u7ec4\u5408\u200b\u7684\u200b\u5730\u65b9\u200b\u7ed3\u675f\u200b\u3002</p>"},{"location":"blog/cutlass%E5%BA%93%E4%B8%AD%E7%9A%84%E5%B0%BE%E5%A3%B0%E8%9E%8D%E5%90%88epilogue-fusion%E5%92%8Cepilogue-visitor-trees/#\u4f7f\u7528\u62d3\u6251\u8bbf\u95ee\u5668\u6784\u5efaevt","title":"\u4f7f\u7528\u200b\u62d3\u6251\u200b\u8bbf\u95ee\u200b\u5668\u200b\u6784\u5efa\u200bEVT","text":"<p>\u200b\u4f7f\u7528\u200b\u62d3\u6251\u200b\u8bbf\u95ee\u200b\u5668\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u91cd\u7528\u200b\u7d2f\u52a0\u5668\u200b\u548c\u200b\u6807\u7b7e\u200b\u77e9\u9635\u200b\u4e2d\u200b\u7684\u200b\u6570\u636e\u200b\uff0c\u200b\u800c\u200b\u65e0\u9700\u200b\u91cd\u65b0\u200b\u52a0\u8f7d\u200b\u5b83\u200b\u3002\u200b\u5728\u200b\u5c06\u200b\u6811\u200b\u5199\u6210\u200b CUTLASS \u200b\u7c7b\u578b\u200b\u4e4b\u524d\u200b\uff0c\u200b\u6211\u4eec\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u8fdb\u884c\u200b\u4e00\u4e9b\u200b\u8c03\u6574\u200b\u3002\u200b\u8ba9\u200b\u6211\u4eec\u200b\u56de\u5230\u200b\u4e4b\u524d\u200b\u7684\u200b\u635f\u5931\u200b\u516c\u5f0f\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u8fdb\u884c\u200b\u8c03\u6574\u200b\u7b80\u5316\u200b\u3002</p> \\[ \\mathrm{Loss}=-\\frac{1}{n}\\sum_{i=1}^n\\sum_{j=1}^L\\left[C_{ij}\\log\\sigma(f_{ij})+(1-C_{ij})\\log(1-\\sigma(f_{ij}))\\right], \\] \\[ \\log(1-\\sigma(x))=\\log\\left(1-\\frac{1}{1+e^{-x}}\\right)=\\log\\left(\\frac{e^{-x}}{1+e^{-x}}\\right)=-x+\\log\\sigma(x) \\] <p>\u200b\u56e0\u6b64\u200b\uff0c\u200b\u8be5\u200b\u516c\u5f0f\u200b\u7b80\u5316\u200b\u4e3a\u200b</p> \\[ \\sum_{i=1}^n\\sum_{j=1}^L\\left[(1-C_{ij})(-f_{ij})+\\log\\sigma(f_{ij})\\right] \\] <ul> <li> <p>\u200b\u5b83\u200b\u901a\u8fc7\u200b\u6d88\u9664\u200b C \u200b\u7684\u200b\u91cd\u590d\u4f7f\u7528\u200b\u7b80\u5316\u200b\u4e86\u200b\u8ba1\u7b97\u200b\u56fe\u200b\u3002</p> </li> <li> <p>\u200b\u4ece\u200b\u6027\u80fd\u200b\u89d2\u5ea6\u200b\u6765\u770b\u200b\uff0c\u200b\u8fd9\u200b\u53ea\u200b\u9700\u8981\u200b\u5bf9\u200b\u6bcf\u4e2a\u200b\u9879\u200b\u8fdb\u884c\u200b\u4e00\u6b21\u200b\u5bf9\u6570\u200b\u8fd0\u7b97\u200b\uff0c\u200b\u800c\u200b\u4e0d\u662f\u200b\u4e24\u6b21\u200b\uff0c\u200b\u4ece\u800c\u200b\u51cf\u5c11\u200b\u4e86\u200b\u5bf9\u200b\u76f8\u5bf9\u200b\u4f4e\u200b\u541e\u5410\u91cf\u200b\u7684\u200b\u7279\u6b8a\u200b\u51fd\u6570\u200b\u5355\u5143\u200b\u7684\u200b\u8d1f\u8f7d\u200b\u3002</p> </li> <li> <p>\u200b\u4ece\u200b\u6570\u503c\u200b\u7a33\u5b9a\u6027\u200b\u7684\u200b\u89d2\u5ea6\u200b\u6765\u770b\u200b\uff0c\u200b\u5982\u679c\u200b $ f_{ij} $ \u200b\u5f88\u5927\u200b\uff08\u200b\u4ee5\u81f3\u4e8e\u200b $ 1 - sigma(f_{ij}) $ \u200b\u8d8b\u8fd1\u200b\u4e8e\u200b0\uff09\uff0c\u200b\u90a3\u4e48\u200b\u539f\u59cb\u200b\u516c\u5f0f\u200b\u4f1a\u200b\u8d8b\u4e8e\u200b\u4e0b\u6ea2\u200b\u3002\u200b\u4f46\u200b\u8fd9\u4e2a\u200b\u516c\u5f0f\u200b\u4e0d\u4f1a\u200b\u3002</p> </li> </ul> <p>\u200b\u5176\u6b21\u200b\uff0c\u200b\u5982\u679c\u200b $ -f_{ij} $ \u200b\u5f88\u5927\u200b\uff08\u200b\u4ee5\u81f3\u4e8e\u200b $ sigma(f_{ij}) $ \u200b\u8d8b\u8fd1\u200b\u4e8e\u200b0\uff09\uff0c\u200b\u65b0\u200b\u516c\u5f0f\u200b\u4ecd\u7136\u200b\u4f1a\u200b\u4e0b\u6ea2\u200b\u3002\u200b\u6709\u200b\u51e0\u79cd\u200b\u65b9\u6cd5\u200b\u53ef\u4ee5\u200b\u5904\u7406\u200b\u8fd9\u4e2a\u200b\u95ee\u9898\u200b\uff0c\u200b\u4f46\u200b\u6700\u200b\u7b80\u5355\u200b\u7684\u200b\u53ef\u80fd\u200b\u662f\u200b\u5bf9\u200b $ sigma(f_{ij}) $ \u200b\u7684\u200b\u8f93\u51fa\u200b\u8fdb\u884c\u200b\u622a\u65ad\u200b\uff0c\u200b\u4f7f\u200b\u5176\u200b\u6c38\u8fdc\u200b\u4e0d\u4f1a\u200b\u592a\u200b\u63a5\u8fd1\u200b 0\u3002\u200b\u8fdb\u884c\u200b\u8fd9\u4e9b\u200b\u66f4\u6539\u200b\u540e\u200b\uff0c\u200b\u6211\u4eec\u200b\u5f97\u5230\u200b\u4e86\u200b&lt;\u200b\u56fe\u200b 6&gt;\u200b\u4e2d\u200b\u7684\u200b\u8ba1\u7b97\u200b\u56fe\u200b\u3002\u200b\u8fd9\u4e2a\u200b\u56fe\u200b\u4ecd\u7136\u200b\u4e0d\u662f\u200b\u4e00\u68f5\u6811\u200b\uff0c\u200b\u6240\u4ee5\u200b\u6211\u4eec\u200b\u5fc5\u987b\u200b\u5728\u200b\u76f8\u5173\u200b\u7684\u200b EVT \u200b\u4e2d\u200b\u4f7f\u7528\u200b\u62d3\u6251\u200b\u8bbf\u95ee\u200b\u5668\u200b\u3002</p> <p></p> <p>\u200b\u5bf9\u4e8e\u200b\u50cf\u200b\u8fd9\u6837\u200b\u7684\u200b\u590d\u6742\u200b\u56fe\u5f62\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u50cf\u200b\u6211\u4eec\u200b\u5728\u200b\u4e0b\u9762\u200b\u6240\u200b\u505a\u200b\u7684\u200b\u90a3\u6837\u200b\uff0c\u200b\u7528\u200b\u7c7b\u578b\u200b\u522b\u540d\u200b\u7f29\u5199\u200b EVT \u200b\u7684\u200b\u90e8\u5206\u200b\u5185\u5bb9\u200b\u3002</p> C++<pre><code>using CMinus1 =\n  Sm90EVT&lt;\n    Sm90Compute&lt;cutlass::minus, ElementCompute, ElementCompute, RoundStyle&gt;,\n    Sm90SrcFetch&lt;TC&gt;,\n    Sm90ScalarBroadcast&lt;ElementScalar&gt;\n  &gt;;\nusing MatmulPlusBias =\n  Sm90EVT&lt;\n    Sm90Compute&lt;cutlass::plus, ElementCompute, ElementCompute, RoundStyle&gt;,\n    Sm90ColBroadcast&lt;0, CtaTileShapeMNK, ElementBias, Stride&lt;_1, _0, _0&gt;&gt;,\n    Sm90AccFetch\n  &gt;;\nusing TopoVisitor =\n  Sm90TopologicalVisitor&lt;\n    ElementCompute,\n    cute::tuple&lt;\n      cute::seq&lt;&gt;,\n      cute::seq&lt;&gt;,\n      cute::seq&lt;0, 1&gt;,\n      cute::seq&lt;0&gt;,\n      cute::seq&lt;3&gt;,\n      cute::seq&lt;4&gt;,\n      cute::seq&lt;2, 5&gt;,\n    &gt;,\n    MatmulPlusBias,\n    CMinus1,\n    Sm90Compute&lt;cutlass::multiplies, ElementCompute, ElementCompute, RoundStyle&gt;,\n    Sm90Compute&lt;cutlass::epilogue::thread::Sigmoid, ElementCompute, ElementCompute, RoundStyle&gt;,\n    Sm90Compute&lt;cutlass::epilogue::thread::Clamp, ElementCompute, ElementCompute, RoundStyle&gt;,\n    Sm90Compute&lt;FastLog, ElementCompute, ElementCompute, RoundStyle&gt;,\n    Sm90Compute&lt;cutlass::plus, ElementCompute, ElementCompute, RoundStyle&gt;\n  &gt;;\nusing BCELossEVT =\n  Sm90EVT&lt;\n    Sm90ScalarReduction&lt;\n      cutlass::plus,       // register reduce function\n      cutlass::atomic_add, // GMEM reduce function\n        ElementScalar, ElementCompute, RoundStyle,\n        Stride&lt;_0, _0, _0&gt;&gt;, // no batching here\n    TopoVisitor\n  &gt;;\n</code></pre> <p>\u200b\u62d3\u6251\u200b\u8bbf\u95ee\u8005\u200b\u7684\u200b\u53c2\u6570\u200b\u662f\u200b\u5b83\u200b\u8bbf\u95ee\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u8282\u70b9\u200b\u7684\u200b\u53c2\u6570\u200b\u5217\u8868\u200b\u3002\u200b\u6574\u4e2a\u200b EVT \u200b\u7684\u200b\u53c2\u6570\u200b\u5982\u4e0b\u200b\uff1a</p> C++<pre><code>BCELossEVT::Arguments args_BCE =\n{\n  { // TopoVisitor [(C - 1) * (bias + AB) + log(clamp(sigmoid(bias + AB)))]\n    { // args to MatmulPlusBias = bias + AB (node 0)\n      {d_bias_BCE.data().get(), 0, stride_bias_BCE}, // args to ColBroadcast\n      {},  // args to AccFetch\n      {}   // op args: plus\n    },\n    { // args to CMinus1 = C - 1 (node 1)\n      {}, // args to SrcFetch\n      {{ElementScalar(1.0)}}, // args to ScalarBroadcast\n      {}  // op args: minus\n    },\n    {}, // op args: multiplies (node 2)\n    {}, // op args: sigmoid (node 3)\n    {0.001f, 0.999f},   // op args: clamp (node 4)\n    {}, // op args: log (node 5)\n    {}, // op args: plus (node 6)\n  },\n  {d_result, 0, stride_result} // args to ScalarReduction\n};\n</code></pre>"},{"location":"blog/cutlass%E5%BA%93%E4%B8%AD%E7%9A%84%E5%B0%BE%E5%A3%B0%E8%9E%8D%E5%90%88epilogue-fusion%E5%92%8Cepilogue-visitor-trees/#\u56fe\u7f16\u8bd1\u53ca\u8fdb\u4e00\u6b65\u4f18\u5316","title":"\u56fe\u200b\u7f16\u8bd1\u200b\u53ca\u200b\u8fdb\u4e00\u6b65\u200b\u4f18\u5316","text":"<p>\u200b\u6b63\u5982\u200b\u8fd9\u4e2a\u200b\u4f8b\u5b50\u200b\u6240\u793a\u200b\uff0c\u200b\u6784\u5efa\u200b EVT \u200b\u7684\u200b\u8fc7\u7a0b\u200b\u5e76\u975e\u200b\u5b8c\u5168\u200b\u7b80\u5355\u200b\u3002\u200b\u7406\u60f3\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u4eba\u4eec\u200b\u5e0c\u671b\u200b\u7528\u200b\u50cf\u200b Python \u200b\u8fd9\u6837\u200b\u7684\u200b\u9ad8\u7ea7\u200b\u8bed\u8a00\u200b\u4ee5\u200b\u6570\u5b66\u200b\u65b9\u5f0f\u200b\u63cf\u8ff0\u200b\u5c3e\u58f0\u200b\uff0c\u200b\u5e76\u200b\u8ba9\u200b\u4e00\u4e2a\u200b\u81ea\u52a8\u5316\u200b\u7cfb\u7edf\u200b\u5728\u200b\u5e94\u7528\u200b\u660e\u663e\u200b\u4f18\u5316\u200b\u7684\u200b\u540c\u65f6\u200b\u5c06\u200b\u5176\u200b\u89e3\u6790\u200b\u4e3a\u200b EVT\u3002EVT \u200b\u8bba\u6587\u200b\u7684\u200b\u4f5c\u8005\u200b\u5c06\u200b\u8fd9\u6837\u200b\u7684\u200b\u7cfb\u7edf\u200b\u79f0\u4e3a\u200b\u201c\u200b\u6df1\u5ea6\u200b\u5b66\u4e60\u200b\u7f16\u8bd1\u5668\u200b\u201d\uff0c\u200b\u5e76\u200b\u5728\u200b\u8bba\u6587\u200b\u7684\u200b GitHub \u200b\u4ed3\u5e93\u200b\u4e2d\u4ee5\u200btorch.fx \u200b\u7684\u200b\u5f62\u5f0f\u200b\u5b9e\u73b0\u200b\u5b83\u200b\u3002CUTLASS \u200b\u5728\u200b\u5176\u200b Python \u200b\u63a5\u53e3\u200b\u4e2d\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b Python \u200b\u5230\u200b C++\u200b\u7248\u672c\u200b\u3002</p> <p>EVT \u200b\u7f16\u8bd1\u5668\u200b\u7b97\u6cd5\u200b\u6267\u884c\u200b\u7684\u200b\u4e00\u4e9b\u200b\u4f18\u5316\u200b\u5e94\u8be5\u200b\u88ab\u200b\u4efb\u4f55\u200b\u624b\u52a8\u200b\u7f16\u5199\u200b\u5c3e\u58f0\u200b\u8bbf\u95ee\u8005\u200b\u6811\u200b\u7684\u200b\u4eba\u200b\u8003\u8651\u200b\u3002</p> <ul> <li> <p>\u200b\u8fd0\u7b97\u7b26\u200b\u878d\u5408\u200b\uff1a\u200b\u7528\u200b\u5176\u200b\u7ec4\u5408\u200b\u7684\u200b\u5feb\u901f\u200b\u5b9e\u73b0\u200b\u6765\u200b\u66ff\u6362\u200b\u4e00\u7cfb\u5217\u200b\u8fd0\u7b97\u7b26\u200b\u3002</p> </li> <li> <p>\u200b\u7b97\u5b50\u200b\u88c2\u53d8\u200b\uff1a\u200b\u5c06\u200b\u4e00\u4e2a\u200b\u7b97\u5b50\u200b\u5206\u89e3\u6210\u200b\u4e00\u4e2a\u200b\u5e8f\u5217\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u5728\u200b\u5176\u4ed6\u200b\u5730\u65b9\u200b\u8fdb\u884c\u200b\u7b97\u5b50\u200b\u878d\u5408\u200b\u3002</p> </li> <li> <p>\u200b\u4fee\u526a\u200b\u672a\u200b\u4f7f\u7528\u200b\u7684\u200b\u8282\u70b9\u200b\uff1a\u200b\u4e5f\u8bb8\u200b\u592a\u200b\u660e\u663e\u200b\u800c\u200b\u65e0\u9700\u200b\u63d0\u53ca\u200b\uff0c\u200b\u4f46\u200b\u8be5\u200b\u8bba\u6587\u200b\u6307\u51fa\u200b\uff0c\u200b\u5728\u200b\u8bad\u7ec3\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u6a21\u578b\u200b\u65f6\u200b\uff0c\u200b\u901a\u5e38\u200b\u4e0d\u5fc5\u200b\u8ba1\u7b97\u200b\u635f\u5931\u200b\u672c\u8eab\u200b\u2014\u2014\u200b\u53ea\u200b\u9700\u200b\u8ba1\u7b97\u200b\u5176\u200b\u68af\u5ea6\u200b\uff01</p> </li> <li> <p>\u200b\u5f52\u7ea6\u200b\u6d88\u9664\u200b\uff1a\u200b\u7531\u4e8e\u200b\u5f52\u7ea6\u200b\u9700\u8981\u200b\u7ebf\u7a0b\u200b\u95f4\u200b\u534f\u4f5c\u200b\uff0c\u200b\u56e0\u6b64\u200b\u5b83\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5e38\u89c1\u200b\u7684\u200b\u74f6\u9888\u200b\u3002\u200b\u5728\u200b\u67d0\u4e9b\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u6d88\u9664\u200b\u5f52\u7ea6\u200b\u64cd\u4f5c\u200b\u3002\u200b\u4f5c\u4e3a\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b\u4f8b\u5b50\u200b\uff0c\u200b\u4e00\u4e2a\u200bone-hot\u200b\u7684\u200b\u884c\u200b\u548c\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5e38\u6570\u200b\u5411\u91cf\u200b\uff0c\u200b\u5176\u200b\u5143\u7d20\u200b\u5168\u4e3a\u200b 1\u3002</p> </li> </ul>"},{"location":"blog/cutlass%E5%BA%93%E4%B8%AD%E7%9A%84%E5%B0%BE%E5%A3%B0%E8%9E%8D%E5%90%88epilogue-fusion%E5%92%8Cepilogue-visitor-trees/#\u7ed3\u8bba","title":"\u7ed3\u8bba","text":"<p>\u200b\u5728\u200b\u672c\u6587\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5bf9\u200b\u5c3e\u58f0\u200b\u878d\u5408\u200b\u548c\u200b\u5c3e\u58f0\u200b\u8bbf\u95ee\u8005\u200b\u6811\u200b\u8fdb\u884c\u200b\u4e86\u200b\u8be6\u7ec6\u200b\u7684\u200b\u8ba8\u8bba\u200b\u3002\u200b\u6211\u4eec\u200b\u4ecb\u7ecd\u200b\u4e86\u200b\u5c3e\u58f0\u200b\u878d\u5408\u200b\u53ca\u5176\u200b\u5728\u200b\u9ad8\u6027\u80fd\u200b\u901a\u7528\u200b\u77e9\u9635\u200b\u4e58\u6cd5\u200b\uff08GEMM\uff09\u200b\u5de5\u4f5c\u200b\u8d1f\u8f7d\u200b\u4e2d\u200b\u7684\u200b\u91cd\u8981\u6027\u200b\u3002\u200b\u7136\u540e\u200b\uff0c\u200b\u6211\u4eec\u200b\u8ba8\u8bba\u200b\u4e86\u200b\u5c3e\u58f0\u200b\u8bbf\u95ee\u8005\u200b\u6811\u200b\u5982\u4f55\u200b\u63d0\u4f9b\u200b\u4e00\u79cd\u200b\u72ec\u7acb\u200b\u4e8e\u200b\u5185\u6838\u200b\u4e3b\u200b\u5faa\u73af\u200b\u672c\u8eab\u200b\u5f00\u53d1\u200b\u53ef\u200b\u878d\u5408\u200b\u5c3e\u58f0\u200b\u7684\u200b\u65b9\u6cd5\u200b\u3002</p> <p>\u200b\u63a5\u4e0b\u6765\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c55\u5f00\u200b\u4e86\u200b CUTLASS \u200b\u4e3a\u200b\u5c3e\u58f0\u200b\u878d\u5408\u200b\u63d0\u4f9b\u200b\u7684\u200b\u4e0d\u540c\u200b\u63a5\u53e3\u200b\uff1aDefaultEpilogue\u3001\u200b\u9884\u200b\u6784\u5efa\u200b\u7684\u200b EVT \u200b\u548c\u200b\u81ea\u5b9a\u4e49\u200b EVT\u3002\u200b\u6700\u540e\u200b\uff0c\u200b\u6211\u4eec\u200b\u901a\u8fc7\u200b\u4e3a\u200b\u4e8c\u5143\u200b\u4ea4\u53c9\u200b\u71b5\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b EVT \u200b\u7ed9\u51fa\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u590d\u6742\u200b\u7684\u200b\u771f\u5b9e\u4e16\u754c\u200b\u793a\u4f8b\u200b\u3002\u200b\u8fd9\u4e2a\u200b\u793a\u4f8b\u200b\u4ee5\u53ca\u200b\u5173\u4e8e\u200b\u5404\u79cd\u200b CUTLASS EVT \u200b\u8282\u70b9\u200b\u7684\u200b\u8865\u5145\u200b\u6587\u6863\u200b\u53ef\u200b\u5728\u200b\u6211\u4eec\u200b\u7684\u200b GitHub\u200b\u4e0a\u200b\u627e\u5230\u200b\u3002</p> <p>\uff08\u200b\u6587\u7ae0\u200b\u7ed3\u5408\u200b\u4f5c\u8005\u200b\u7406\u89e3\u200b\uff0c\u200b\u8bd1\u81ea\u200bepilogue_visitor_tree/\uff09</p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>DeepSeek-R1\u200b\u548c\u200bFP8\u200b\u6df7\u5408\u200b\u7cbe\u5ea6\u200b\u8bad\u7ec3\u200b\u4ee5\u53ca\u200bFP8\u200b\u91cf\u5316\u200b\u5b9e\u73b0\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/deepseek-r1%E5%92%8Cfp8%E6%B7%B7%E5%90%88%E7%B2%BE%E5%BA%A6%E8%AE%AD%E7%BB%83%E4%BB%A5%E5%8F%8Afp8%E9%87%8F%E5%8C%96%E5%AE%9E%E7%8E%B0/","title":"DeepSeek-R1\u200b\u548c\u200bFP8\u200b\u6df7\u5408\u200b\u7cbe\u5ea6\u200b\u8bad\u7ec3\u200b\u4ee5\u53ca\u200bFP8\u200b\u91cf\u5316\u200b\u5b9e\u73b0","text":""},{"location":"blog/deepseek-r1%E5%92%8Cfp8%E6%B7%B7%E5%90%88%E7%B2%BE%E5%BA%A6%E8%AE%AD%E7%BB%83%E4%BB%A5%E5%8F%8Afp8%E9%87%8F%E5%8C%96%E5%AE%9E%E7%8E%B0/#deepseek-r1-\u548c-fp8-\u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3\u8bd1","title":"DeepSeek-R1 \u200b\u548c\u200b FP8 \u200b\u6df7\u5408\u200b\u7cbe\u5ea6\u200b\u8bad\u7ec3\u200b(\u200b\u8bd1\u200b)","text":"<p>(\u200b\u672c\u200b\u5c0f\u8282\u200b\u8bd1\u81ea\u200bdeepseek-r1-and-fp8-mixed-precision-training)</p> <p>\u200b\u6df1\u5ea6\u200b\u63a2\u7d22\u200b\uff08DeepSeek\uff09\u200b\u53d1\u5e03\u200b\u4e86\u200b\u5176\u200b\u63a8\u7406\u6a21\u578b\u200b\u6df1\u5ea6\u200b\u63a2\u7d22\u200b-R1\uff08DeepSeek-R1\uff09\uff0c\u200b\u9707\u60ca\u200b\u4e86\u200b\u4e16\u754c\u200b\u3002\u200b\u4e0e\u200b OpenAI \u200b\u7684\u200b o1 \u200b\u548c\u200bGoogle Gemini\u200b\u7684\u200bFlash Thinking\u200b\u7c7b\u4f3c\u200b\uff0cR1 \u200b\u6a21\u578b\u200b\u65e8\u5728\u200b\u901a\u8fc7\u200b\u5728\u200b\u54cd\u5e94\u200b\u63d0\u793a\u200b\u4e4b\u524d\u200b\u751f\u6210\u200b\u4e00\u6761\u200b\u201c\u200b\u601d\u7ef4\u200b\u94fe\u200b\u201d\u200b\u6765\u200b\u63d0\u9ad8\u200b\u56de\u590d\u200b\u8d28\u91cf\u200b\u3002R1 \u200b\u5f15\u8d77\u200b\u7684\u200b\u5174\u594b\u200b\u6e90\u4e8e\u200b\u5b83\u200b\u5728\u200b\u5305\u62ec\u200b\u6570\u5b66\u200b\u3001\u200b\u7f16\u7801\u200b\u4ee5\u53ca\u200b\u82f1\u8bed\u200b\u548c\u200b\u4e2d\u6587\u200b\u8bed\u8a00\u200b\u7406\u89e3\u200b\u7b49\u200b\u51e0\u4e2a\u200b\u884c\u4e1a\u6807\u51c6\u200b\u57fa\u51c6\u200b\u6d4b\u8bd5\u200b\u4e2d\u200b\u4e0e\u200b o1 \u200b\u8fbe\u5230\u200b\u540c\u7b49\u200b\u6c34\u5e73\u200b\uff0c\u200b\u540c\u65f6\u200b\u5b83\u200b\u4e5f\u200b\u662f\u200b\u5f00\u6e90\u200b\u7684\u200b\uff0c\u200b\u5e76\u4e14\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u6df1\u5ea6\u200b\u63a2\u7d22\u200b API \u200b\u4ee5\u6781\u200b\u4f4e\u200b\u7684\u200b\u6210\u672c\u200b\u83b7\u5f97\u200b\u3002</p> <p>DeepSeek \u200b\u7684\u200b\u6280\u672f\u200b\u62a5\u544a\u200b\u6db5\u76d6\u200b\u4e86\u200b\u5e7f\u6cdb\u200b\u7684\u200b\u6027\u80fd\u200b\u4f18\u5316\u200b\u6280\u672f\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u6280\u672f\u200b\u4f7f\u200b\u5176\u200b\u5728\u200b\u9ad8\u6548\u200b\u7684\u200b\u5927\u578b\u200b\u8bed\u8a00\u200b\u6a21\u578b\u200b\u8bad\u7ec3\u200b\u548c\u200b\u63a8\u7406\u200b\u65b9\u9762\u200b\u53d6\u5f97\u200b\u4e86\u200b\u7a81\u7834\u6027\u200b\u6210\u679c\u200b\u3002\u200b\u5176\u4e2d\u200b\u8bb8\u591a\u200b\u6280\u672f\u200b\u5df2\u200b\u88ab\u200b\u7528\u4e8e\u200b\u8bad\u7ec3\u200b DeepSeek-V3\uff0c\u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b\u4e0e\u200b Anthropic \u200b\u7684\u200b Claude Sonnet \u200b\u548c\u200b OpenAI \u200b\u7684\u200b GPT-4o \u200b\u76f8\u5f53\u200b\u7684\u200b\u6a21\u578b\u200b\uff0cR1 \u200b\u6a21\u578b\u200b\u662f\u200b\u901a\u8fc7\u200b\u5fae\u8c03\u200b\uff08fine-tuning\uff09\u200b\u548c\u200b\u5f3a\u5316\u200b\u5b66\u4e60\u200b\u4ece\u200b DeepSeek-V3 \u200b\u4e2d\u200b\u83b7\u5f97\u200b\u7684\u200b\u3002\u200b\u5728\u200b\u8fd9\u200b\u7bc7\u6587\u7ae0\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u7279\u522b\u200b\u5173\u6ce8\u200b DeepSeek \u200b\u7684\u200b\u57fa\u7840\u200b DeepSeek-V3 \u200b\u6a21\u578b\u200b\u7684\u200b FP8 \u200b\u6df7\u5408\u200b\u7cbe\u5ea6\u200b\u8bad\u7ec3\u200b\u7b56\u7565\u200b\uff08\u200b\u5728\u200b DeepSeek-V3 \u200b\u8bba\u6587\u200b\u7684\u200b 3.3 \u200b\u8282\u200b\u548c\u200b\u4e0b\u56fe\u200b\uff08\u200b\u8be5\u200b\u8bba\u6587\u200b\u7684\u200b\u56fe\u200b 6\uff09\u200b\u4e2d\u200b\u8fdb\u884c\u200b\u4e86\u200b\u63cf\u8ff0\u200b\uff09\u3002</p> <p>\u200b\u548c\u200b\u5f80\u5e38\u200b\u4e00\u6837\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u6838\u5fc3\u200b\u74f6\u9888\u200b\u662f\u200b\u77e9\u9635\u200b\u4e58\u6cd5\u200b\uff08\u200b\u4e5f\u200b\u79f0\u4e3a\u200b\u201cmatmul\u201d\u200b\u6216\u200b\u201cGEMM\u201d\uff09\uff0c\u200b\u5982\u200b\u56fe\u8868\u200b\u4e2d\u200b\u7684\u200b\u9ec4\u8272\u200b\u65b9\u6846\u200b\u6240\u793a\u200b\u3002\u200b\u5982\u56fe\u6240\u793a\u200b\uff0c\u200b\u6a21\u578b\u200b\u6743\u91cd\u200b\u5b58\u50a8\u200b\u5728\u200b FP8 \u200b\u4e2d\u200b\uff0c\u200b\u6240\u6709\u200b\u77e9\u9635\u200b\u4e58\u6cd5\u200b\u90fd\u200b\u5728\u200b FP8 \u200b\u4e2d\u200b\u8fdb\u884c\u200b\uff0c\u200b\u5e76\u200b\u5e26\u6709\u200b FP32 \u200b\u7d2f\u52a0\u200b\u3002\u200b\u6fc0\u6d3b\u200b\u503c\u200b\u548c\u200b\u68af\u5ea6\u200b\u5b58\u50a8\u200b\u5728\u200b BF16 \u200b\u4e2d\u200b\uff0cFP32 \u200b\u4e5f\u200b\u7528\u4e8e\u200b\u4e00\u4e9b\u200b\u5185\u90e8\u200b\u8ba1\u7b97\u200b\u3002</p> <p></p> <p>DeepSeek-V3 \u200b\u8bba\u6587\u200b\u4e2d\u200b\u7684\u200b\u56fe\u200b 6\uff0c\u200b\u5c55\u793a\u200b\u4e86\u200b\u5176\u200b\u7ebf\u6027\u200b\u5c42\u4e2d\u200b\u4f7f\u7528\u200b\u7684\u200b\u5404\u79cd\u200b\u6d6e\u70b9\u200b\u7cbe\u5ea6\u200b\u3002</p>"},{"location":"blog/deepseek-r1%E5%92%8Cfp8%E6%B7%B7%E5%90%88%E7%B2%BE%E5%BA%A6%E8%AE%AD%E7%BB%83%E4%BB%A5%E5%8F%8Afp8%E9%87%8F%E5%8C%96%E5%AE%9E%E7%8E%B0/#\u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u5173\u6ce8-fp8-\u8bad\u7ec3","title":"\u4e3a\u4ec0\u4e48\u200b\u6211\u4eec\u200b\u8981\u200b\u5173\u6ce8\u200b FP8 \u200b\u8bad\u7ec3\u200b\uff1f","text":"<p>\u200b\u5728\u200b NVIDIA \u200b\u663e\u5361\u200b\u4e0a\u200b\uff0c\u200b\u901a\u7528\u200b\u77e9\u9635\u200b\u4e58\u6cd5\u200b\uff08GEMM\uff09\u200b\u8ba1\u7b97\u200b\u53ef\u4ee5\u200b\u5229\u7528\u200b\u663e\u5361\u200b\u7684\u200b Tensor Core \u200b\u63d0\u4f9b\u200b\u7684\u200b\u786c\u4ef6\u52a0\u901f\u200b\u3002\u200b\u5728\u200b Hopper \u200b\u67b6\u6784\u200b\u4e0a\u200b\uff0cFP8 GEMM \u200b\u5f97\u5230\u200b\u539f\u751f\u200b\u652f\u6301\u200b\uff0c\u200b\u5e76\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u53ef\u80fd\u200b\u7684\u200b\u6700\u9ad8\u200b\u8ba1\u7b97\u200b\u541e\u5410\u91cf\u200b\uff0c\u200b\u5728\u200b H100 SXM \u200b\u663e\u5361\u200b\u4e0a\u200b\u5ba3\u79f0\u200b\u7ea6\u200b\u4e3a\u200b 2 petaFLOPS\u3002\u200b\u5b9e\u9645\u4e0a\u200b\uff0cNVIDIA \u200b\u8ba4\u4e3a\u200b\u4f4e\u200b\u7cbe\u5ea6\u200b\u8ba1\u7b97\u200b\u975e\u5e38\u200b\u91cd\u8981\u200b\uff0c\u200b\u4ee5\u81f3\u4e8e\u200b\u5b83\u200b\u6b63\u5728\u200b\u901a\u8fc7\u200b Blackwell \u200b\u5c06\u200b Tensor Core \u200b\u7684\u200b\u529f\u80fd\u200b\u6269\u5c55\u200b\u5230\u200b FP4 \u200b\u548c\u200b FP6\u3002\u200b\u4ee5\u4f4e\u200b\u7cbe\u5ea6\u200b\u5b58\u50a8\u200b\u6a21\u578b\u200b\u6743\u91cd\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u51cf\u5c11\u200b\u6a21\u578b\u200b\u7684\u200b\u603b\u4f53\u200b\u5927\u5c0f\u200b\uff0c\u200b\u51cf\u8f7b\u200b\u5bf9\u200b\u5185\u5b58\u200b\u548c\u200b\u663e\u5361\u200b\u95f4\u901a\u4fe1\u200b\u901a\u9053\u200b\u7684\u200b\u538b\u529b\u200b\uff0c\u200b\u800c\u200b\u8fd9\u4e9b\u200b\u901a\u9053\u200b\u5df2\u7ecf\u200b\u88ab\u200b\u63a8\u5411\u200b\u6781\u9650\u200b\u4ee5\u200b\u8ddf\u4e0a\u200b Tensor Core \u200b\u7684\u200b\u6b65\u4f10\u200b\u3002</p>"},{"location":"blog/deepseek-r1%E5%92%8Cfp8%E6%B7%B7%E5%90%88%E7%B2%BE%E5%BA%A6%E8%AE%AD%E7%BB%83%E4%BB%A5%E5%8F%8Afp8%E9%87%8F%E5%8C%96%E5%AE%9E%E7%8E%B0/#\u5728-fp8-\u4e2d\u5de5\u4f5c\u6709\u51e0\u4e2a\u6743\u8861","title":"\u5728\u200b FP8 \u200b\u4e2d\u200b\u5de5\u4f5c\u200b\u6709\u200b\u51e0\u4e2a\u200b\u6743\u8861","text":"<p>\u200b\u9996\u5148\u200b\uff0c\u200b\u4e3a\u4e86\u200b\u9632\u6b62\u200b\u6ea2\u51fa\u200b\uff0c\u200b\u901a\u5e38\u200b\u5728\u200b\u5c06\u200b\u66f4\u200b\u9ad8\u7cbe\u5ea6\u200b\u7684\u200b\u6743\u91cd\u200b\u6216\u200b\u6fc0\u6d3b\u200b\u77e9\u9635\u200b\u91cf\u5316\u200b\u4e4b\u524d\u200b\uff0c\u200b\u5c06\u200b\u5176\u7f29\u200b\u653e\u5230\u200b FP8 \u200b\u53ef\u200b\u8868\u793a\u200b\u7684\u200b\u8303\u56f4\u200b\u2014\u2014\u200b\u4f8b\u5982\u200b\uff0c\u200b\u901a\u8fc7\u200b\u5c06\u200b\u6574\u4e2a\u200b\u5f20\u91cf\u200b\u9664\u4ee5\u200b\u5176\u200b\u6700\u5927\u200b\u5143\u7d20\u200b\u3002\u200b\u8be5\u200b\u6700\u5927\u200b\u5143\u7d20\u200b\u88ab\u200b\u5355\u72ec\u200b\u4fdd\u7559\u200b\uff0c\u200b\u5e76\u200b\u5728\u200b\u4e0e\u200b\u91cf\u5316\u200b\u5f20\u91cf\u200b\u7684\u200b\u6bcf\u6b21\u200b\u77e9\u9635\u200b\u4e58\u6cd5\u200b\u4e2d\u200b\u7528\u4f5c\u200b\u7f29\u653e\u200b\u56e0\u5b50\u200b\u3002\u200b\u7136\u800c\u200b\uff0c\u200b\u8fd9\u200b\u4f7f\u5f97\u200b\u91cf\u5316\u200b\u8fc7\u7a0b\u200b\u5bf9\u200b\u5f02\u5e38\u200b\u503c\u200b\u6781\u4e3a\u200b\u654f\u611f\u200b\uff1a\u200b\u5728\u200b\u67d0\u4e9b\u200b\u5c42\u4e2d\u200b\u5b58\u5728\u200b\u975e\u5e38\u200b\u5927\u200b\u7684\u200b\u6743\u91cd\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u8feb\u4f7f\u200b\u6240\u6709\u200b\u5176\u4ed6\u200b\u6743\u91cd\u200b\u88ab\u200b\u91cf\u5316\u200b\u4e3a\u200b 0\u3002DeepSeek \u200b\u56e2\u961f\u200b\u901a\u8fc7\u200b\u5f15\u5165\u200b\u5206\u5757\u200b\u548c\u200b\u5206\u7247\u200b\u7f29\u653e\u200b( blockwise and tilewise scaling)\u200b\u6765\u200b\u5904\u7406\u200b\u8fd9\u4e2a\u200b\u95ee\u9898\u200b\uff0c\u200b\u5176\u4e2d\u200b\u6743\u91cd\u200b\u77e9\u9635\u200b\u7684\u200b\u6bcf\u4e2a\u200b 128\u00d7128 \u200b\u5b50\u200b\u77e9\u9635\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u6fc0\u6d3b\u200b\u5411\u91cf\u200b\u7684\u200b\u6bcf\u4e2a\u200b 1\u00d7128 \u200b\u5b50\u200b\u5411\u91cf\u200b\uff0c\u200b\u5206\u522b\u200b\u8fdb\u884c\u200b\u7f29\u653e\u200b\u548c\u200b\u91cf\u5316\u200b\u3002\u200b\u7136\u540e\u200b\uff0c\u200b\u7531\u4e8e\u200b\u5728\u200b GEMM \u200b\u7684\u200b\u201c\u200b\u5185\u90e8\u200b\u201d\u200b\u6216\u200b\u201c\u200b\u6536\u7f29\u200b\u201d\u200b\u7ef4\u5ea6\u200b\u4e0a\u200b\u5b58\u5728\u200b\u4e0d\u540c\u200b\u7684\u200b\u7f29\u653e\u200b\u56e0\u5b50\u200b\uff0c\u200b\u91cd\u65b0\u200b\u7f29\u653e\u200b\u8ba1\u7b97\u200b\u9700\u8981\u200b\u878d\u5408\u200b\u5230\u200b\u77e9\u9635\u200b\u4e58\u6cd5\u200b\u4e3b\u200b\u5faa\u73af\u200b\u4e2d\u200b\u3002\u200b\u8fd9\u200b\u8981\u6c42\u200b\u56e2\u961f\u200b\u7f16\u5199\u200b\u4e00\u4e2a\u200b\u81ea\u5b9a\u4e49\u200b\u7684\u200b\u5e26\u200bre-scaling\u200b\u7684\u200b FP8-GEMM \u200b\u5185\u6838\u200b\u3002\u200b\u6211\u4eec\u200b\u8fd8\u200b\u6ce8\u610f\u200b\u5230\u200b\uff0c\u200b\u7531\u4e8e\u200b\u8bad\u7ec3\u200b\u4e0d\u200b\u7a33\u5b9a\u200b\uff0c\u200b\u4ec5\u200b\u5206\u5757\u200b\u91cf\u5316\u200b\uff08\u200b\u5373\u200b\u5bf9\u4e8e\u200b\u6fc0\u6d3b\u200b\u4e5f\u200b\u662f\u200b\u5982\u6b64\u200b\uff09\u200b\u88ab\u200b\u8bc1\u660e\u200b\u5bf9\u4e8e\u200b\u4ed6\u4eec\u200b\u7684\u200b\u76ee\u7684\u200b\u662f\u200b\u4e0d\u591f\u200b\u7684\u200b\uff1b\u200b\u53c2\u89c1\u200b\u8bba\u6587\u200b\u9644\u5f55\u200b B.2 \u200b\u4e2d\u200b\u63cf\u8ff0\u200b\u7684\u200b\u6d88\u878d\u200b\u7814\u7a76\u200b\u3002</p> <p>\u200b\u6b64\u5916\u200b\uff0c\u200b\u5728\u200b Hopper GPU \u200b\u4e0a\u200b\u7684\u200b\u6700\u4f73\u200b\u901a\u7528\u200b\u77e9\u9635\u200b\u4e58\u6cd5\u200b\uff08GEMM\uff09\u200b\u4f7f\u7528\u200b\u4e86\u200b\u7ebf\u7a0b\u200b\u675f\u7ec4\u200b\u8303\u56f4\u200b\u7684\u200b\u77e9\u9635\u200b\u4e58\u200b\u7d2f\u52a0\u200b\u6307\u4ee4\u200b\uff08warpgroup-wide MMA instructions\uff0cWGMMA\uff09\uff0c\u200b\u5728\u200b GEMM \u200b\u6559\u7a0b\u200b\u4e2d\u200b\u4f5c\u4e3a\u200b\u4e00\u90e8\u5206\u200b\u5bf9\u200b\u5176\u200b\u8fdb\u884c\u200b\u4e86\u200b\u8be6\u7ec6\u63cf\u8ff0\u200b\u3002\u200b\u5728\u200b\u8fd9\u4e9b\u200b\u6307\u4ee4\u200b\u4e0b\u200b\uff0cHopper GPU \u200b\u6d41\u5f0f\u200b\u591a\u5904\u7406\u5668\u200b\uff08SM\uff09\u200b\u4e0a\u200b\u7684\u200b\u6240\u6709\u200b\u5f20\u91cf\u200b\u6838\u5fc3\u200b\u534f\u540c\u200b\u8ba1\u7b97\u200b\u77e9\u9635\u200b\u4e58\u79ef\u200b\u7684\u200b\u7247\u6bb5\u200b\u3002\u200b\u7136\u800c\u200b\uff0c\u200b\u8fd9\u200b\u5c31\u200b\u5f15\u51fa\u200b\u4e86\u200b FP8 \u200b\u7684\u200b\u7b2c\u4e8c\u4e2a\u200b\u95ee\u9898\u200b\u3002DeepSeek \u200b\u7814\u7a76\u200b\u4eba\u5458\u200b\u53d1\u73b0\u200b\uff0cFP8 \u200b\u5f20\u91cf\u200b\u6838\u5fc3\u200b\u4f7f\u7528\u200b\u4e86\u200b\u4e00\u79cd\u200b\u7279\u5b9a\u200b\u7684\u200b\u201c\u200b\u5b9a\u70b9\u200b\u7d2f\u52a0\u200b\u201d\u200b\u7b56\u7565\u200b\uff0c\u200b\u5b9e\u9645\u4e0a\u200b\u53ea\u200b\u4f7f\u7528\u200b\u4e86\u200b 14 \u200b\u4f4d\u200b\u7cbe\u5ea6\u200b\uff0c\u200b\u800c\u200b\u4e0d\u662f\u200b\u771f\u6b63\u200b\u7684\u200b FP32 \u200b\u7cbe\u5ea6\u200b\uff1b\u200b\u53c2\u89c1\u200b\u8bba\u6587\u200b\u7684\u200b 3.5.2 \u200b\u8282\u200b\u3002\u200b\u8fd9\u200b\u5bfc\u81f4\u200b\u4e86\u200b\u8bad\u7ec3\u200b\u4e0d\u200b\u51c6\u786e\u6027\u200b\u968f\u7740\u200b\u6a21\u578b\u200b\u5c3a\u5bf8\u200b\u7684\u200b\u589e\u5927\u200b\u800c\u200b\u589e\u52a0\u200b\u3002</p>"},{"location":"blog/deepseek-r1%E5%92%8Cfp8%E6%B7%B7%E5%90%88%E7%B2%BE%E5%BA%A6%E8%AE%AD%E7%BB%83%E4%BB%A5%E5%8F%8Afp8%E9%87%8F%E5%8C%96%E5%AE%9E%E7%8E%B0/#deepseek-\u7684\u89e3\u51b3\u65b9\u6848","title":"DeepSeek \u200b\u7684\u200b\u89e3\u51b3\u65b9\u6848","text":"<p>DeepSeek \u200b\u7684\u200b\u89e3\u51b3\u65b9\u6848\u200b\u662f\u200b\u5c06\u200b\u90e8\u5206\u200b\u7d2f\u52a0\u200b\u64cd\u4f5c\u200b\u79fb\u200b\u5230\u200b Tensor Core \u200b\u4e4b\u5916\u200b\u3002\u200b\u4ed6\u4eec\u200b\u7684\u200b\u901a\u7528\u200b\u77e9\u9635\u200b\u4e58\u6cd5\u200b\uff08GEMM\uff09\u200b\u5185\u6838\u200b\u5728\u200b Tensor Core \u200b\u5185\u90e8\u200b\u6267\u884c\u200b\u6bcf\u200b\u4e00\u7cfb\u5217\u200b\u8fde\u7eed\u200b\u7684\u200b 4 \u200b\u6b21\u200bWGMMA\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u5e76\u200b\u4ee5\u200b\u8f83\u200b\u4f4e\u200b\u7cbe\u5ea6\u200b\u683c\u5f0f\u200b\u8fdb\u884c\u200b\u7d2f\u52a0\u200b\uff0c\u200b\u4f46\u200b\u968f\u540e\u200b\u5c06\u200b\u7ed3\u679c\u200b\u6dfb\u52a0\u200b\u5230\u200b\u4e00\u4e2a\u200b\u5355\u72ec\u200b\u7684\u200b\u57fa\u4e8e\u200b\u5bc4\u5b58\u5668\u200b\u7684\u200b\u7d2f\u52a0\u5668\u200b\u5f20\u91cf\u200b\u4e2d\u200b\uff0c\u200b\u8be5\u200b\u5f20\u91cf\u200b\u4e3a\u200b\u5355\u7cbe\u5ea6\u200b\u6d6e\u70b9\u6570\u200b\uff08FP32\uff09\u200b\u683c\u5f0f\u200b\u3002\u200b\u7b2c\u4e8c\u6b21\u200b\u52a0\u6cd5\u200b\u662f\u200b\u4f7f\u7528\u200b CUDA Core\uff08GPU \u200b\u7528\u4e8e\u200b\u975e\u200b\u77e9\u9635\u200b\u4e58\u6cd5\u200b\u7684\u200b FP32 \u200b\u7b97\u672f\u200b\u7684\u200b\u6807\u51c6\u200b\u6267\u884c\u200b\u5355\u5143\u200b\uff09\u200b\u6267\u884c\u200b\u7684\u200b\uff0c\u200b\u56e0\u6b64\u200b\u4ee5\u200b\u666e\u901a\u200b\u7684\u200b FP32 \u200b\u7cbe\u5ea6\u200b\u8fdb\u884c\u200b\uff0c\u200b\u4ece\u800c\u200b\u51cf\u8f7b\u200b\u4e86\u200b\u7cbe\u5ea6\u200b\u635f\u5931\u200b\u3002\u200b\u53cd\u200b\u91cf\u5316\u200b\u6bd4\u4f8b\u200b\u56e0\u5b50\u200b\u4e5f\u200b\u5e94\u7528\u200b\u4e8e\u200b\u8fd9\u4e2a\u200b FP32 \u200b\u7d2f\u52a0\u5668\u200b\u3002</p> <p></p> <p>\u200b\u8bba\u6587\u200b\u4e2d\u200b\u7684\u200b\u56fe\u200b 7(b)\uff1a\u200b\u5728\u200b DeepSeek-V3 \u200b\u7684\u200b\u8bad\u7ec3\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u7684\u200b\u6df7\u5408\u200b\u7cbe\u5ea6\u200b\u77e9\u9635\u200b\u4e58\u6cd5\u200b\u6280\u672f\u200b\uff0c\u200b\u5176\u4e2d\u200b\u5728\u200bTensor Cores\u200b\u4e0a\u200b\u8fdb\u884c\u200b\u7684\u200b\u4f4e\u200b\u7cbe\u5ea6\u200b WGMMA \u200b\u64cd\u4f5c\u200b\u4e0e\u200b\u5728\u200b CUDA Cores\u200b\u4e0a\u200b\u8fdb\u884c\u200b\u7684\u200b\u9ad8\u7cbe\u5ea6\u200b\u7d2f\u52a0\u200b\u4ea4\u66ff\u200b\u8fdb\u884c\u200b\u3002</p> <p>\u200b\u8bba\u6587\u200b\u4f5c\u8005\u200b\u5f15\u7528\u200b\u4e86\u200b NVIDIA \u200b\u7684\u200bCUTLASS \u200b\u5e93\u6765\u200b\u4ecb\u7ecd\u200b\u8fd9\u9879\u200b\u6280\u672f\u200b\u3002\u200b\u81ea\u200b 3.2 \u200b\u7248\u672c\u200b\u4ee5\u6765\u200b\uff0cCUTLASS \u200b\u5c31\u200b\u652f\u6301\u200b\u4e86\u200b\u5c06\u200b FP8 \u200b\u77e9\u9635\u200b\u4e58\u6cd5\u200b\u63d0\u5347\u200b\u4e3a\u200b\u5728\u200b CUDA \u200b\u6838\u5fc3\u200b\u4e2d\u200b\u8fdb\u884c\u200b FP32 \u200b\u7d2f\u52a0\u200b\u3002\u200b\u6b64\u5916\u200b\uff0c\u200b\u5206\u5757\u200b\u7f29\u653e\u200b\u662f\u200b\u5728\u200b\u8fd9\u4e2a\u200b PR\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u7684\u200b\uff0c\u200b\u5e76\u200b\u5728\u200b 3.7 \u200b\u7248\u672c\u200b\u4e2d\u200b\u5408\u5e76\u200b\u5230\u200b\u4e3b\u200b\u5206\u652f\u200b\uff0c\u200b\u5e76\u4e14\u200b\u7531\u4e8e\u200b\u8fd9\u4e2a\u200b PR\uff08\u200b\u4e3a\u4e86\u200b\u6e05\u6670\u200b\u8d77\u200b\u89c1\u200b\uff0c\u200b\u5c06\u200b\u8fd9\u4e2a\u200b\u6982\u5ff5\u200b\u91cd\u547d\u540d\u200b\u4e3a\u200b\u5206\u7ec4\u200b\u7f29\u653e\u200b\uff09\uff0c\u200b\u5f88\u5feb\u200b\u5c06\u200b\u652f\u6301\u200b\u5206\u5757\u200b\u7f29\u653e\u200b\u3002\u200b\u4f5c\u4e3a\u200b CUTLASS \u200b\u7528\u6237\u200b\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u5c06\u200bKernelScheduleType\u200b\u8bbe\u7f6e\u200b\u4e3a\u200bKernelTmaWarpSpecializedCooperativeFP8BlockScaledAccum\uff0c\u200b\u4f7f\u7528\u200bCollectiveBuilder\u200b\u6765\u200b\u8c03\u7528\u200b\u5177\u6709\u200b\u63d0\u5347\u200b\u7684\u200b FP32 \u200b\u7d2f\u52a0\u200b\u548c\u200b\u5206\u5757\u200b\u7f29\u653e\u200b\u7684\u200b Hopper FP8 GEMM\uff08\u200b\u53c2\u89c1\u200b\u793a\u4f8b\u200b 67\uff09\u3002\u200b\u5b9e\u9645\u4e0a\u200b\uff0cCUTLASS \u200b\u7684\u200b Hopper FP8 GEMM \u200b\u5185\u6838\u200b\u9ed8\u8ba4\u200b\u4f7f\u7528\u200b CUDA \u200b\u6838\u5fc3\u200b\u7d2f\u52a0\u200b\u6280\u672f\u200b\u3002\u200b\u6216\u8005\u200b\uff0c\u200b\u4ec5\u200b\u652f\u6301\u200b\u5728\u200bTensor Cores\u200b\u4e2d\u200b, \u200b\u4f60\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u8bf8\u5982\u200bKernelTmaWarpSpecializedFP8FastAccum\u200b\u7684\u200b\u8c03\u5ea6\u200b\u8fdb\u884c\u200b\u7d2f\u52a0\u200b\uff1b\u200b\u8fd9\u200b\u662f\u200b\u4ee5\u200b\u8f83\u200b\u4f4e\u200b\u7684\u200b\u51c6\u786e\u6027\u200b\u6362\u53d6\u200b\u66f4\u597d\u200b\u7684\u200b\u6027\u80fd\u200b\uff0c\u200b\u8fd9\u200b\u5bf9\u4e8e\u200b\u63a8\u7406\u200b\u5e94\u7528\u200b\u53ef\u80fd\u200b\u6548\u679c\u200b\u66f4\u597d\u200b\u3002</p>"},{"location":"blog/deepseek-r1%E5%92%8Cfp8%E6%B7%B7%E5%90%88%E7%B2%BE%E5%BA%A6%E8%AE%AD%E7%BB%83%E4%BB%A5%E5%8F%8Afp8%E9%87%8F%E5%8C%96%E5%AE%9E%E7%8E%B0/#\u4e0d\u540c\u6846\u67b6\u5bf9deepseek-v3_fp8\u91cf\u5316\u652f\u6301","title":"\u4e0d\u540c\u200b\u6846\u67b6\u200b\u5bf9\u200bDeepSeek-V3_FP8\u200b\u91cf\u5316\u200b\u652f\u6301","text":""},{"location":"blog/deepseek-r1%E5%92%8Cfp8%E6%B7%B7%E5%90%88%E7%B2%BE%E5%BA%A6%E8%AE%AD%E7%BB%83%E4%BB%A5%E5%8F%8Afp8%E9%87%8F%E5%8C%96%E5%AE%9E%E7%8E%B0/#sglang\u6846\u67b6deepseek-fp8\u5206\u5757\u91cf\u5316\u652f\u6301","title":"SGLang\u200b\u6846\u67b6\u200bdeepseek FP8\u200b\u5206\u5757\u200b\u91cf\u5316\u200b\u652f\u6301","text":"<p>SGLang\u200b\u6846\u67b6\u200b\u5bf9\u200bdeepseek v3\u200b\u6a21\u578b\u200bFP8\u200b\u5206\u5757\u200b\u91cf\u5316\u200b\u652f\u6301\u200b\u3002</p> Text Only<pre><code>Description: SGLang implements block-wise FP8 quantization with two key optimizations:\n\nActivation: E4M3 format using per-token-per-128-channel sub-vector scales with online casting.\n\nWeight: Per-128x128-block quantization for better numerical stability.\n</code></pre> <p>\u200b\u6e90\u7801\u200b\u5b9e\u73b0\u200b\uff1afp8_kernel.py</p>"},{"location":"blog/deepseek-r1%E5%92%8Cfp8%E6%B7%B7%E5%90%88%E7%B2%BE%E5%BA%A6%E8%AE%AD%E7%BB%83%E4%BB%A5%E5%8F%8Afp8%E9%87%8F%E5%8C%96%E5%AE%9E%E7%8E%B0/#\u9ad8\u6027\u80fdcutlass\u5b9e\u73b0blockwise-scaling\u548cgroupwise-scaling","title":"\u9ad8\u6027\u80fd\u200bCutlass\u200b\u5b9e\u73b0\u200b\uff1aBlockwise Scaling\u200b\u548c\u200bGroupwise Scaling","text":"<p>\u200b\u5f53\u200b\u6211\u4eec\u200b\u91c7\u7528\u200b\u66f4\u7a84\u200b\u7684\u200b\u6570\u636e\u7c7b\u578b\u200b\u65f6\u200b\uff0c\u200b\u4f20\u7edf\u200b\u7684\u200b\u7f29\u653e\u200b\u65b9\u6cd5\u200b\u96be\u4ee5\u200b\u4fdd\u6301\u200b\u51c6\u786e\u6027\u200b\uff0c\u200b\u7279\u522b\u200b\u662f\u200b\u5bf9\u4e8e\u200b 8 \u200b\u4f4d\u200b\u6d6e\u70b9\u200b\u7c7b\u578b\u200b\uff08\u200b\u4f8b\u5982\u200b\uff0ce5m2_t\uff0ce4m3_t\uff09\u3002\u200b\u5178\u578b\u200b\u7684\u200b\u901a\u7528\u200b\u77e9\u9635\u200b\u4e58\u6cd5\u200b\uff08GEMM\uff09\u200b\u64cd\u4f5c\u200b\u4f7f\u7528\u200b\u5f20\u91cf\u200b\u7f29\u653e\u200b\uff0c\u200b\u516c\u5f0f\u200b\u4e3a\u200bD = alpha * (A @ B) + beta * C\uff0c\u200b\u4f46\u200b\u66f4\u200b\u7a84\u200b\u7684\u200b\u6570\u636e\u7c7b\u578b\u200b\u9700\u8981\u200b\u66f4\u200b\u7cbe\u7ec6\u200b\u7684\u200b\u7f29\u653e\u200b\u6280\u672f\u200b\u3002\u200b\u6b64\u62c9\u53d6\u200b\u8bf7\u6c42\u200b\uff08PR\uff09\u200b\u6dfb\u52a0\u200b\u4e86\u200b\u5206\u5757\u200b\u7f29\u653e\u200b\u7b56\u7565\u200b\uff0c\u200b\u4ee5\u200b\u63d0\u9ad8\u200b\u51c6\u786e\u6027\u200b\uff0c\u200b\u540c\u65f6\u200b\u52aa\u529b\u200b\u4e0d\u200b\u635f\u5931\u200b\u6027\u80fd\u200b\u3002</p> <p></p> <p>CUTLASS\u200b\u652f\u6301\u200b\u7684\u200b\u56db\u79cd\u200b\u7f29\u653e\u200b\u6a21\u5f0f\u200b\uff0c\u200b\u4e0d\u540c\u200b\u6a21\u5f0f\u200b\u7684\u200b\u91cf\u5316\u200b\u7c92\u5ea6\u200b\u4e0d\u200b\u4e00\u6837\u200b\uff1a</p> <ul> <li> <p>\u200b\u5f20\u200b\u91cf\u7ea7\u200b\u7f29\u653e\u200b\uff08Tensorwise Scaling\uff09\uff1a \u200b\u6bcf\u4e2a\u200b\u5f20\u91cf\u200b\u4f7f\u7528\u200b\u5355\u4e2a\u200b\u7f29\u653e\u200b\u56e0\u5b50\u200b\uff0c\u200b\u5728\u200b\u5c3e\u58f0\u200b\uff08epilogue\uff09\u200b\u4e2d\u200b\u5e94\u7528\u200b\u3002</p> </li> <li> <p>\u200b\u884c\u7ea7\u200b\u7f29\u653e\u200b\uff08Rowwise Scaling\uff09\uff1a \u200b\u4f7f\u7528\u200b\u4e00\u4e2a\u200b\u884c\u5411\u91cf\u200b\u8fdb\u884c\u200b\u7f29\u653e\u200b\uff0c\u200b\u5bf9\u4e8e\u200b\u64cd\u4f5c\u6570\u200b A \u200b\u7684\u200b\u7ef4\u5ea6\u200b\u4e3a\u200b Mx1\uff0c\u200b\u5bf9\u4e8e\u200b\u64cd\u4f5c\u6570\u200b B \u200b\u7684\u200b\u7ef4\u5ea6\u200b\u4e3a\u200b 1xN\uff0c\u200b\u907f\u514d\u200b\u6cbf\u200b\u5f52\u7ea6\u200b\u7ef4\u5ea6\u200b\u8fdb\u884c\u200b\u7f29\u653e\u200b\u3002\u200b\u8fd9\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u5728\u200b\u5c3e\u58f0\u200b\u4e2d\u200b\u4f7f\u7528\u200b EpilogueVisitorTree \u200b\u6765\u200b\u5904\u7406\u200b\u3002</p> </li> <li> <p>\u200b\u5206\u5757\u200b\u7f29\u653e\u200b\uff08Blockwise Scaling\uff09\uff1a \u200b\u5f15\u5165\u200b\u4e00\u4e2a\u200b 2D \u200b\u7f29\u653e\u200b\u5f20\u91cf\u200b\uff0c\u200b\u6bcf\u4e2a\u200b CTA \u200b\u5757\u200b\u5206\u914d\u200b\u4e00\u4e2a\u200b\u7f29\u653e\u200b\u503c\u200b\u3002\u200b\u7531\u4e8e\u200b\u6b64\u200b\u7f29\u653e\u200b\u6d89\u53ca\u200b\u5f52\u7ea6\u200b\u7ef4\u5ea6\u200b (M, N, K)\uff0c\u200b\u56e0\u6b64\u200b\u5fc5\u987b\u200b\u5728\u200b\u4e3b\u200b\u5faa\u73af\u200b\u4e2d\u200b\u5e94\u7528\u200b\uff0c\u200b\u8fd9\u4f1a\u200b\u5f71\u54cd\u200b\u6027\u80fd\u200b\u3002\u200b\u4e3a\u200b CUTLASS F8 GEMM \u200b\u5b9e\u73b0\u200b\u7684\u200b\u5206\u5757\u200b\u7f29\u653e\u200b\uff0c\u200b\u901a\u8fc7\u200b\u5171\u4eab\u5185\u5b58\u200b\u6682\u5b58\u200b\u7f29\u653e\u200b\u5f20\u91cf\u200b\uff0c\u200b\u5bf9\u200b\u5206\u7ec4\u200b\u7f29\u653e\u200b\u7684\u200b\u652f\u6301\u200b\u505a\u200b\u4e86\u200b\u51c6\u5907\u200b\u3002</p> </li> <li> <p>\u200b\u5206\u7ec4\u200b\u7f29\u653e\u200b\uff08Groupwise Scaling\uff09\uff1a \u200b\u4f7f\u7528\u200b\u4e00\u4e2a\u200b 2D \u200b\u7f29\u653e\u200b\u5f20\u91cf\u200b\uff0c\u200b\u6bcf\u4e2a\u200b CTA \u200b\u5757\u200b\u6709\u200b\u591a\u4e2a\u200b\u7f29\u653e\u200b\u503c\u200b\u3002\u200b\u7f29\u653e\u200b\u7c92\u5ea6\u200b\u72ec\u7acb\u200b\u4e8e\u200b CTA \u200b\u5757\u200b\u914d\u7f6e\u200b\uff0c\u200b\u4e3a\u200b\u5c06\u6765\u200b\u7684\u200b\u5b9e\u73b0\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u66f4\u200b\u5927\u200b\u7684\u200b\u7075\u6d3b\u6027\u200b\u3002</p> </li> </ul>"},{"location":"blog/deepseek-r1%E5%92%8Cfp8%E6%B7%B7%E5%90%88%E7%B2%BE%E5%BA%A6%E8%AE%AD%E7%BB%83%E4%BB%A5%E5%8F%8Afp8%E9%87%8F%E5%8C%96%E5%AE%9E%E7%8E%B0/#\u5206\u5757\u7f29\u653e\u5b9e\u73b0","title":"\u5206\u5757\u200b\u7f29\u653e\u200b\u5b9e\u73b0","text":"<p>Cutlass\u200b\u5206\u5757\u200b\u7f29\u653e\u200b\uff08Blockwise Scaling\uff09\u200b\u5b9e\u73b0\u200b</p> <p>\u200b\u6b63\u5982\u200b\u5b9e\u73b0\u200b\u63cf\u8ff0\u200b\uff0c\u200b\u4e0b\u56fe\u200b\u5c55\u793a\u200b\u4e86\u200b\u5206\u5757\u200b\u7f29\u653e\u200b\u7684\u200b\u901a\u7528\u200b\u77e9\u9635\u200b\u4e58\u6cd5\u200b\uff08GEMM\uff09\uff0c\u200b\u64cd\u4f5c\u6570\u200b\u5f20\u91cf\u200b A \u200b\u548c\u200b B \u200b\u4ee5\u200b\u7070\u8272\u200b\u663e\u793a\u200b\uff0c\u200b\u5757\u200b\u7f29\u653e\u200b\u5f20\u91cf\u200b\u4e3a\u200b\u84dd\u8272\u200b\uff0c\u200b\u8f93\u51fa\u200b\u4e3a\u200b\u7eff\u8272\u200b\u3002\u200b\u5728\u200b\u8fd9\u4e2a\u200b\u5b9e\u73b0\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200bUTMALDG\u200b\u52a0\u8f7d\u200b\u64cd\u4f5c\u6570\u200b\u5f20\u91cf\u200b\uff0c\u200b\u5e76\u200b\u4f7f\u7528\u200bLDGSTS\u200b\u52a0\u8f7d\u200b\u5757\u200b\u7f29\u653e\u200b\u5f20\u91cf\u200b\uff0c\u200b\u5c06\u200b\u5b83\u4eec\u200b\u4ece\u200b\u5168\u5c40\u200b\u5185\u5b58\u200b\u4f20\u8f93\u200b\u5230\u200b\u5171\u4eab\u5185\u5b58\u200b\u3002\u200b\u5757\u200b\u7f29\u653e\u200b\u5f20\u91cf\u200b\u7684\u200b\u52a0\u8f7d\u200b\u4e0e\u200b\u64cd\u4f5c\u6570\u200b\u5f20\u91cf\u200b\u7684\u200b\u52a0\u8f7d\u200b\u5728\u200b\u540c\u4e00\u200b\u9636\u6bb5\u200b\u8fdb\u884c\u200b\u3002\u200b\u4e3a\u4e86\u200b\u786e\u4fdd\u200bLDGSTS\u200b\u7684\u200b\u6b63\u786e\u200b\u540c\u6b65\u200b\uff0c\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b\u5e26\u6709\u200bnoinc\u200b\u4fee\u9970\u7b26\u200b\u7684\u200bcutlass::arch::cpasync_barrier_arrive\u3002\u200b\u6211\u4eec\u200b\u5df2\u7ecf\u200b\u4fee\u6539\u200b\u4e86\u200bPipelineTmaAsync\u200b\u7c7b\u200b\uff0c\u200b\u4ee5\u200b\u9002\u5e94\u200b\u4e0d\u540c\u200b\u6570\u91cf\u200b\u7684\u200b\u751f\u4ea7\u8005\u200b\u7ebf\u7a0b\u200b\u5230\u8fbe\u200b\u4e8b\u4ef6\u200b\uff0c\u200b\u4ece\u800c\u200b\u6709\u6548\u200b\u5730\u200b\u652f\u6301\u200b\u6b64\u200b\u529f\u80fd\u200b\u3002</p> <p></p>"},{"location":"blog/deepseek-r1%E5%92%8Cfp8%E6%B7%B7%E5%90%88%E7%B2%BE%E5%BA%A6%E8%AE%AD%E7%BB%83%E4%BB%A5%E5%8F%8Afp8%E9%87%8F%E5%8C%96%E5%AE%9E%E7%8E%B0/#\u5206\u7ec4\u7f29\u653e\u5b9e\u73b0","title":"\u5206\u7ec4\u200b\u7f29\u653e\u200b\u5b9e\u73b0\u200b\ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350","text":"<p>Cutlass\u200b\u5206\u7ec4\u200b\u7f29\u653e\u200b\uff08Groupwise Scaling\uff09\u200b\u5b9e\u73b0\u200b</p> <p>\u200b\u7531\u4e8e\u200b#1932\u200b\u6dfb\u52a0\u200b\u4e86\u200b\u5206\u5757\u200b\u7f29\u653e\u200b\u7b56\u7565\u200b\uff0c\u200b\u6b64\u200b PR \u200b\u662f\u200b\u57fa\u4e8e\u200b#1932\u200b\u7684\u200b\u8865\u4e01\u200b\uff0c\u200b\u5e76\u200b\u5728\u200b A \u200b\u5f20\u91cf\u200b\u4e2d\u6cbf\u200b M \u200b\u6dfb\u52a0\u200b\u4e86\u200b\u5206\u7ec4\u200b\u7f29\u653e\u200b\u7b56\u7565\u200b\u3002\u200b\u6cbf\u200b M \u200b\u7684\u200b\u7f29\u653e\u200b\u7c92\u5ea6\u200b\u4e0e\u200b CTA \u200b\u5757\u200b\u914d\u7f6e\u200b\u65e0\u5173\u200b\uff0c\u200b\u4f46\u662f\u200b\uff0c\u200b\u6cbf\u200b N \u200b\u548c\u200b K \u200b\u7684\u200b\u7f29\u653e\u200b\u7c92\u5ea6\u200b\u4ecd\u7136\u200b\u662f\u200b\u5206\u5757\u200b\u7684\u200b\uff08\u200b\u5373\u200b\u6bcf\u4e2a\u200b CTA \u200b\u5757\u200b\u4e00\u4e2a\u200b\u7f29\u653e\u200b\u503c\u200b\uff09\u3002 \u200b\u6b64\u200b PR \u200b\u5c06\u200b\u6cbf\u200b M \u200b\u7684\u200b\u7f29\u653e\u200b\u7c92\u5ea6\u200b\u9650\u5236\u200b\u4e3a\u200b CTA \u200b\u5757\u200b\u914d\u7f6e\u200b\u4e2d\u200bTILE_SHAPE_M\u200b\u7684\u200b\u500d\u6570\u200b\uff0c\u200b\u540c\u65f6\u200b\u53ef\u4ee5\u200b\u5c06\u200b GEMM \u200b\u6cbf\u200b M \u200b\u7684\u200b\u7f29\u653e\u200b\u7c92\u5ea6\u200b\u7cbe\u786e\u200b\u8bbe\u7f6e\u200b\u4e3a\u200bTILE_SHAPE_M\uff08\u200b\u5373\u200b\u56de\u9000\u200b\u5230\u200b\u5206\u5757\u200b\u7f29\u653e\u200b\u7b56\u7565\u200b\uff09\uff0c\u200b\u5e76\u200b\u5728\u200b\u8f93\u5165\u200b\u5f20\u91cf\u200bScaleA\u200b\u4e0a\u200b\u8c03\u7528\u200brepeat_interleave\u200b\u65b9\u6cd5\u200b\u6765\u200b\u6a21\u62df\u200b\u7f29\u653e\u200b\u7c92\u5ea6\u200b\u662f\u200bTILE_SHAPE_M\u200b\u7684\u200b\u500d\u6570\u200b\u7684\u200b\u60c5\u51b5\u200b\u3002</p> <p>\u200b\u5728\u200b\u8fd9\u79cd\u200b\u5b9e\u73b0\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u6bd4\u200b\u201c#1932\u201d\u200b\u5177\u6709\u200b\u66f4\u200b\u591a\u200b\u5143\u7d20\u200b\u7684\u200b\u7f29\u653e\u200b\u5f20\u91cf\u200b\u52a0\u8f7d\u200b\u5230\u200b\u5171\u4eab\u5185\u5b58\u200b\u4e2d\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u6bcf\u4e2a\u200b CTA \u200b\u5757\u200b\u53ef\u80fd\u200b\u6cbf\u200b M \u200b\u6709\u200b\u5404\u79cd\u200b\u4e0d\u540c\u200b\u7684\u200b\u7f29\u653e\u200b\u3002\u200b\u7136\u800c\u200b\uff0c\u200b\u7531\u4e8e\u200b\u6bcf\u4e2a\u200b\u7ebf\u7a0b\u200b\u7684\u200b WGMMA \u200b\u7d2f\u52a0\u5668\u200b\u5728\u200b\u7ed3\u679c\u200b\u5f20\u91cf\u200b\u4e2d\u4ec5\u200b\u6d89\u53ca\u200b\u4e24\u884c\u200b\uff0c\u200b\u6240\u4ee5\u200b\u6bcf\u4e2a\u200b\u8fed\u4ee3\u200b\u4e2d\u200b\u6bcf\u4e2a\u200b\u7ebf\u7a0b\u200b\u4ec5\u200b\u9700\u8981\u200b\u4ece\u200b\u5171\u4eab\u5185\u5b58\u200b\u5c06\u200b A \u200b\u5f20\u91cf\u200b\u7684\u200b\u6700\u200b\u591a\u200b\u4e24\u4e2a\u200b\u7f29\u653e\u200b\u503c\u200b\u548c\u200b B \u200b\u5f20\u91cf\u200b\u7684\u200b\u6070\u597d\u200b\u4e00\u4e2a\u200b\u7f29\u653e\u200b\u503c\u200b\u52a0\u8f7d\u200b\u5230\u200b\u5bc4\u5b58\u5668\u200b\u4e2d\u200b\u3002</p> <ul> <li>CUTLASS\u200b\u5e93\u4e2d\u200b\u7684\u200b\u5c3e\u58f0\u200b\u878d\u5408\u200b(Epilogue Fusion)\u200b\u548c\u200bEpilogue Visitor Trees</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/deepseek-v3_deepseekmoe%E6%9C%BA%E5%88%B6%E6%98%AF%E4%BB%80%E4%B9%88/","title":"DeepSeek-V3_DeepSeekMoE\u200b\u673a\u5236\u200b\u662f\u200b\u4ec0\u4e48\u200b\uff1f","text":"<p>\u200b\u4eca\u5929\u200b\u6211\u4eec\u200b\u4e00\u200b\u8d77\u6765\u200b\u9605\u8bfb\u200b\u4e00\u7bc7\u200b\u6587\u7ae0\u200bdeepseek-v3-explained-2-deepseekmoe\uff0c\u200b\u6587\u7ae0\u200b\u901a\u8fc7\u200b\u5de7\u5999\u200b\u7684\u200b\u4f8b\u5b50\u200b\u751f\u52a8\u200b\u8bb2\u89e3\u200b\u4e86\u200bDeepSeekMoE\u200b\u673a\u5236\u200b\u7684\u200b\u539f\u7406\u200b\u3002DeepSeekMoE\u200b\u662f\u200bDeepSeek\u200b\u6a21\u578b\u200b\u4e2d\u200b\u7684\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u5173\u952e\u200b\u67b6\u6784\u200b\u521b\u65b0\u200b\u3002</p> <p>\u200b\u5c06\u200b\u89e3\u91ca\u200b Mixture-of-Experts \uff08MoE\uff09 \u200b\u7684\u200b\u5de5\u4f5c\u200b\u539f\u7406\u200b\uff0c\u200b\u662f\u200b\u4ec0\u4e48\u200b\u8ba9\u200b\u5b83\u200b\u5728\u200b LLM \u200b\u4e2d\u200b\u5982\u6b64\u200b\u53d7\u6b22\u8fce\u200b\u4ee5\u53ca\u200b\u5b83\u200b\u9762\u4e34\u200b\u7684\u200b\u6311\u6218\u200b\u3002\u200b\u6211\u4eec\u200b\u8fd8\u200b\u5c06\u200b\u8ba8\u8bba\u200b\u4e13\u5bb6\u200b\u4e13\u4e1a\u5316\u200b\u4e0e\u200b\u77e5\u8bc6\u200b\u5171\u4eab\u200b\u4e4b\u95f4\u200b\u7684\u200b\u6743\u8861\u200b\uff0c\u200b\u4ee5\u53ca\u200b DeepSeekMoE \u200b\u5982\u4f55\u200b\u8bbe\u8ba1\u200b\u4ee5\u200b\u53d6\u5f97\u200b\u66f4\u597d\u200b\u7684\u200b\u6743\u8861\u200b\u3002\u200b\u4e3a\u4e86\u200b\u4f7f\u200b\u8fd9\u4e9b\u200b\u6982\u5ff5\u200b\u66f4\u200b\u76f4\u89c2\u200b\uff0c\u200b\u6587\u7ae0\u200b\u901a\u8fc7\u200b\u9910\u5385\u200b\u505a\u83dc\u200b\u9009\u62e9\u200b\u53a8\u5e08\u200b\u7684\u200b\u4f8b\u5b50\u200b\uff0c\u200b\u6765\u200b\u7c7b\u6bd4\u200b\u5206\u89e3\u200b\u5b83\u4eec\u200b\uff0c\u200b\u901a\u8fc7\u200b\u53a8\u5e08\u200b\u5728\u200b\u53a8\u623f\u200b\u4e2d\u200b\u7684\u200b\u89d2\u8272\u200b\u6765\u200b\u8bf4\u660e\u200b MoE \u200b\u4e2d\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u5143\u7d20\u200b\u3002</p> <ul> <li>DeepSeek-V3_MLA\u200b\u6ce8\u610f\u529b\u200b\u673a\u5236\u200b</li> </ul>"},{"location":"blog/deepseek-v3_deepseekmoe%E6%9C%BA%E5%88%B6%E6%98%AF%E4%BB%80%E4%B9%88/#\u80cc\u666f\u77e5\u8bc6","title":"\u80cc\u666f\u200b\u77e5\u8bc6","text":""},{"location":"blog/deepseek-v3_deepseekmoe%E6%9C%BA%E5%88%B6%E6%98%AF%E4%BB%80%E4%B9%88/#llm-\u4e2d\u7684-moe-mixture-of-experts","title":"LLM \u200b\u4e2d\u200b\u7684\u200b MoE \uff08Mixture-of-Experts\uff09","text":"<p>MoE \u200b\u6765\u6e90\u4e8e\u200b Adaptive Mixture of Local Experts </p> <p></p> <p>\u200b\u4e3b\u8981\u200b\u7531\u200b \u200b\u4e09\u4e2a\u200b\u6838\u5fc3\u200b\u90e8\u5206\u200b \u200b\u7ec4\u6210\u200b\uff1a</p> <ul> <li> <p>\u200b\u8f93\u5165\u200b\u5c42\u200b\uff08Input Layer\uff09\uff1a\u200b\u63a5\u6536\u6570\u636e\u200b\uff0c\u200b\u5e76\u200b\u5c06\u200b\u5176\u200b\u7f16\u7801\u200b\u6210\u200b\u5411\u91cf\u200b\u8868\u793a\u200b\u3002</p> </li> <li> <p>\u200b\u4e13\u5bb6\u200b\u7f51\u7edc\u200b\uff08Experts\uff09\uff1a\u200b\u591a\u4e2a\u200b\u5b50\u200b\u6a21\u578b\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u4e13\u5bb6\u200b\u8d1f\u8d23\u200b\u4e0d\u540c\u200b\u7684\u200b\u77e5\u8bc6\u200b\u9886\u57df\u200b\u3002</p> </li> <li> <p>\u200b\u95e8\u63a7\u200b\u7f51\u7edc\u200b\uff08Gating Network\uff09\uff1a\u200b\u51b3\u5b9a\u200b\u8f93\u5165\u200b\u6570\u636e\u200b\u5e94\u8be5\u200b\u7531\u200b\u54ea\u4e9b\u200b\u4e13\u5bb6\u200b\u6765\u200b\u5904\u7406\u200b\uff0c\u200b\u5e76\u200b\u5206\u914d\u200b\u6743\u91cd\u200b\u3002</p> </li> </ul> <p>\u200b\u95e8\u63a7\u200b\u7f51\u7edc\u200b \u200b\u4f1a\u200b\u5206\u6790\u200b\u8f93\u5165\u200b\u6570\u636e\u200b\uff0c\u200b\u7ed9\u51fa\u200b\u4e00\u4e2a\u200b\u201c\u200b\u4e13\u5bb6\u200b\u9009\u62e9\u200b\u201d\u200b\u6982\u7387\u5206\u5e03\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u4e00\u4e2a\u200b MoE \u200b\u53ef\u80fd\u200b\u6709\u200b 16 \u200b\u4e2a\u200b\u4e13\u5bb6\u200b\uff0c\u200b\u4f46\u200b\u6bcf\u6b21\u200b\u63a8\u7406\u200b\u65f6\u200b\u53ea\u4f1a\u200b\u6fc0\u6d3b\u200b\u5176\u4e2d\u200b 2-4 \u200b\u4e2a\u200b\u4e13\u5bb6\u200b\uff0c\u200b\u51cf\u5c11\u200b\u8ba1\u7b97\u200b\u91cf\u200b\u3002 \u200b\u9009\u5b9a\u200b\u7684\u200b\u4e13\u5bb6\u200b\u4f1a\u200b\u5bf9\u200b\u8f93\u5165\u200b\u6570\u636e\u200b\u8fdb\u884c\u200b\u8ba1\u7b97\u200b\uff0c\u200b\u5e76\u200b\u5c06\u200b\u7ed3\u679c\u200b\u52a0\u6743\u200b\u5408\u5e76\u200b\u540e\u200b\u8f93\u51fa\u200b\u3002 \u200b\u8fd9\u79cd\u200b\u65b9\u5f0f\u200b\u8ba9\u200b MoE \u200b\u65e2\u200b\u80fd\u200b \u200b\u7075\u6d3b\u200b\u8c03\u7528\u200b\u4e0d\u540c\u200b\u7684\u200b\u4e13\u5bb6\u200b\uff0c\u200b\u53c8\u200b\u80fd\u200b \u200b\u51cf\u5c11\u200b\u8ba1\u7b97\u200b\u5f00\u9500\u200b\uff0c\u200b\u4f7f\u5f97\u200b\u8bad\u7ec3\u200b\u548c\u200b\u63a8\u7406\u200b\u66f4\u200b\u9ad8\u6548\u200b\u3002</p> <p>\u200b\u5728\u200b LLM \u200b\u7684\u200b\u4e0a\u4e0b\u6587\u200b\u4e2d\u200b\uff0cMoE \u200b\u901a\u5e38\u200b\u662f\u200b\u6307\u200b\u5c06\u200b Transformer \u200b\u6a21\u578b\u200b\u4e2d\u200b\u7684\u200b FFN \u200b\u5c42\u66ff\u6362\u200b\u4e3a\u200b MoE \u200b\u5c42\u200b\uff0c\u200b\u5982\u4e0b\u200b\u56fe\u200b\u6240\u793a\u200b\uff1a</p> <p></p> <p>\u200b\u4e0a\u200b\u56fe\u200b\u6765\u81ea\u200b\u4e8e\u200bGShard: Scaling Giant Models with Conditional Computation and Automatic Sharding</p> <p>\u200b\u66f4\u200b\u5177\u4f53\u5730\u8bf4\u200b\uff0c\u200b\u5de6\u4fa7\u200b\u663e\u793a\u200b\u4e86\u200b\u4e00\u53e0\u200b N \u200b\u4e2a\u200b Transformer \u200b\u5c42\u200b\u3002\u200b\u6bcf\u4e2a\u200b\u5c42\u200b\u90fd\u200b\u6709\u200b\u4e00\u4e2a\u200b MHA \u200b\u5b50\u5c42\u200b\uff0c\u200b\u540e\u200b\u8ddf\u200b\u4e00\u4e2a\u200b FFN \u200b\u5b50\u5c42\u200b\u3002\u200b\u76f8\u6bd4\u4e4b\u4e0b\u200b\uff0c\u200b\u53f3\u4fa7\u200b\u5c55\u793a\u200b\u4e86\u200b\u4e00\u53e0\u200b N/2 \u200b\u4e2a\u200b Transformer \u200b\u5c42\u200b\uff0c\u200b\u5176\u4e2d\u200b\u4e0b\u5c42\u200b Transformer \u200b\u5c42\u4e2d\u200b\u7684\u200b FFN \u200b\u5b50\u5c42\u200b\u5df2\u200b\u88ab\u200b MoE \u200b\u5c42\u200b\u53d6\u4ee3\u200b\u3002\u200b\u6bcf\u4e2a\u200b Transformer \u200b\u5c42\u4e2d\u200b\u7684\u200b FFN \u200b\u5b50\u5c42\u200b\u90fd\u200b\u5c06\u200b\u88ab\u200b MoE \u200b\u5c42\u66ff\u6362\u200b\u3002\u200b\u5728\u5b9e\u8df5\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u5728\u200b Transformer \u200b\u5c42\u200b\u7684\u200b\u7279\u5b9a\u200b\u95f4\u9694\u200b\u5904\u200b\u5b9e\u73b0\u200b MoE \u200b\u4ee5\u200b\u66ff\u6362\u200b FFN\u3002</p> <p>\u200b\u5982\u679c\u200b\u6211\u4eec\u200b\u8fdb\u4e00\u6b65\u200b\u7814\u7a76\u200b MoE \u200b\u5c42\u200b\uff0c\u200b\u6211\u4eec\u200b\u4f1a\u200b\u53d1\u73b0\u200b\u5b83\u200b\u5305\u542b\u200b\u4e00\u4e2a\u200b Gating operation\uff08\u200b\u95e8\u63a7\u200b\u64cd\u4f5c\u200b\uff09\uff0c\u200b\u540e\u200b\u8ddf\u200b\u4e00\u5806\u200b FFN\uff0c\u200b\u6bcf\u4e2a\u200b FFN \u200b\u90fd\u200b\u4e0e\u200b\u6807\u51c6\u200b FFN \u200b\u5b50\u5c42\u200b\u5177\u6709\u200b\u76f8\u540c\u200b\u7684\u200b\u67b6\u6784\u200b\u3002\u200b\u8fd9\u4e9b\u200b FFN \u200b\u5c42\u200b\u5728\u200b MoE \u200b\u4e2d\u200b\u88ab\u200b\u79f0\u4e3a\u200b \u201c\u200b\u4e13\u5bb6\u200b\u201d\uff0c\u200b\u95e8\u63a7\u200b\u4f5c\u200b\u7ecf\u8fc7\u8bad\u7ec3\u200b\u4ee5\u200b\u9009\u62e9\u200b\u5e94\u200b\u6fc0\u6d3b\u200b\u54ea\u4e2a\u200b\u4e13\u5bb6\u200b\u6765\u200b\u5904\u7406\u200b\u7279\u5b9a\u200b\u8f93\u5165\u200b\u3002</p> <p></p> <p>MoE \u200b\u7684\u200b\u4e00\u822c\u200b\u67b6\u6784\u200b\u53ef\u4ee5\u200b\u66f4\u200b\u6b63\u5f0f\u200b\u5730\u200b\u63cf\u8ff0\u200b\u5982\u4e0b\u200b: </p> <p></p> <p>DeepSeekMoE: Towards Ultimate Expert Specialization in Mixture-of-Experts Language Models</p> <ul> <li> <p>$ u^l_t $ \u200b\u548c\u200b $ h^l_t $ \u200b\u662f\u200b\u7b2c\u200b \\(l\\) \u200b\u4e2a\u200b Transformer \u200b\u5c42\u4e2d\u200b\u7b2c\u200b t \u200b\u4e2a\u200b\u4ee4\u724c\u200b\u7684\u200b\u8f93\u5165\u200b\u548c\u200b\u8f93\u51fa\u200b\u9690\u85cf\u200b\u72b6\u6001\u200b\u3002</p> </li> <li> <p>$ FFN_i $ \u200b\u662f\u200b N \u200b\u4f4d\u200b\u4e13\u5bb6\u200b\u4e2d\u200b\u7684\u200b\u7b2c\u200b i \u200b\u4f4d\u200b\u4e13\u5bb6\u200b\u3002</p> </li> <li> <p>$ g_{i\uff0c t} $ \u200b\u662f\u200b\u7ed9\u5b9a\u200b\u6807\u8bb0\u200b t \u200b\u548c\u200b\u4e13\u5bb6\u200b i \u200b\u7684\u200b\u95e8\u63a7\u200b\u503c\u200b\uff0c\u200b\u901a\u8fc7\u200b\u5728\u200b softmax \u200b\u8f93\u51fa\u200b\u4e0a\u200b\u5e94\u7528\u200b TopK \u200b\u64cd\u4f5c\u200b\u83b7\u5f97\u200b\u3002</p> </li> <li> <p>\u200b\u7b49\u5f0f\u200b\uff085\uff09\u200b\u4e2d\u200b\u7684\u200b $ e^l_i $ \u200b\u901a\u5e38\u200b\u88ab\u200b\u79f0\u4e3a\u200b\u7b2c\u200b i \u200b\u4e2a\u200b\u4e13\u5bb6\u200b\u7684\u200b\u8d28\u5fc3\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u6c47\u603b\u200b\u8fc7\u53bb\u200b\u8def\u7531\u200b\u5230\u200b\u7b2c\u200b i \u200b\u4e2a\u200b\u4e13\u5bb6\u200b\u7684\u200b\u6240\u6709\u200b\u8f93\u5165\u200b\u6807\u8bb0\u200b\u6765\u200b\u8ba1\u7b97\u200b\uff1a</p> </li> </ul> <p></p> <p>\u200b\u73b0\u5728\u200b\u8ba9\u200b\u6211\u4eec\u200b\u4ee5\u200b\u4ece\u200b\uff085\uff09\u200b\u5230\u200b\uff083\uff09\u200b\u7684\u200b\u76f8\u53cd\u200b\u987a\u5e8f\u200b\u9010\u6b65\u200b\u89e3\u91ca\u200b\u4e0a\u8ff0\u200b\u65b9\u7a0b\u200b\uff1a</p> <ul> <li> <p>\u200b\u5728\u200b\u65b9\u7a0b\u200b \uff085\uff09 \u200b\u4e2d\u200b\uff0c$ u^l_t \u200b\u548c\u200b e^l_i $ \u200b\u4e4b\u95f4\u200b\u7684\u200b\u5185\u79ef\u200b\u6d4b\u91cf\u200b\u5f53\u524d\u200b\u8f93\u5165\u200b\u6807\u8bb0\u200b\u4e0e\u200b\u8fc7\u53bb\u200b\u8def\u7531\u200b\u5230\u200b\u7b2c\u200b i \u200b\u4e2a\u200b\u4e13\u5bb6\u7cfb\u7edf\u200b\u7684\u200b\u5e73\u5747\u200b\u8f93\u5165\u200b\u6807\u8bb0\u200b\u7684\u200b\u63a5\u8fd1\u200b\u7a0b\u5ea6\u200b\u3002\u200b\u76f4\u89c2\u200b\u5730\u8bf4\u200b\uff0c\u200b\u5982\u679c\u200b\u4e13\u5bb6\u200b i \u200b\u5904\u7406\u200b\u4e86\u200b\u5f88\u591a\u200b\u4e0e\u200b\u5f53\u524d\u200b\u7c7b\u4f3c\u200b\u7684\u200b input token\uff0c\u200b\u90a3\u4e48\u200b\u5b83\u200b\u4e5f\u200b\u5e94\u8be5\u200b\u66f4\u200b\u64c5\u957f\u200b\u5904\u7406\u200b\u5f53\u524d\u200b token\u3002\u200b\u7136\u540e\u200b\uff0c\u200b\u5c06\u200b Softmax \u200b\u5e94\u7528\u200b\u4e8e\u200b\u6b64\u200b inner-product\uff0c\u200b\u5c06\u200b\u5176\u200b\u8f6c\u6362\u200b\u4e3a\u200b distribution\u3002\u200b\u7531\u4e8e\u200b\u6211\u4eec\u200b\u6709\u200b N \u200b\u4e2a\u200b\u4e13\u5bb6\u200b\uff0c\u200b\u56e0\u6b64\u200b\u6bcf\u4e2a\u200b token \u200b\u4e5f\u200b\u5c06\u200b\u6709\u200b N \u200b\u4e2a\u200b $ s_{i\uff0c t} $\u200b\u503c\u200b\u3002</p> </li> <li> <p>\u200b\u5728\u200b\u65b9\u7a0b\u200b \uff084\uff09 \u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b TopK \u200b\u5e94\u7528\u200b\u4e8e\u200b\u6240\u6709\u200b $ s_{i\uff0c t} $ \u200b\u503c\u200b\uff0c\u200b\u751f\u6210\u200b\u7a00\u758f\u200b$ g_{i\uff0c t} $ \u200b\u503c\u200b\u3002</p> </li> <li> <p>\u200b\u5728\u200b\u65b9\u7a0b\u200b \uff083\uff09 \u200b\u4e2d\u200b\uff0c\u200b\u7a00\u758f\u200b$ g_{i\uff0c t} $\u200b\u503c\u200b\u7528\u4e8e\u200b\u9009\u62e9\u200b K \u200b\u4e2a\u200b\u4e13\u5bb6\u200b\u6765\u200b\u8ba1\u7b97\u200b\u8f93\u51fa\u200b\u9690\u85cf\u200b\u72b6\u6001\u200b\u3002</p> </li> </ul> <p>\u200b\u6362\u53e5\u8bdd\u8bf4\u200b\uff0cN \u200b\u4e2a\u200b\u4e13\u5bb6\u200b\u4e2d\u200b\u53ea\u6709\u200b K \u200b\u4e2a\u4f1a\u200b\u88ab\u200b\u6fc0\u6d3b\u200b\u7b2c\u200b t \u200b\u4e2a\u200b\u6807\u8bb0\u200b\uff0c\u200b\u56e0\u4e3a\u200b K \u200b\u901a\u5e38\u200b\u975e\u5e38\u200b\u5c0f\u200b\uff0c\u200b\u56e0\u6b64\u200b $ g_{i\uff0c t} $\u200b\u503c\u200b\u662f\u200b\u7a00\u758f\u200b\u7684\u200b\u3002\u200b\u5728\u200b\u8fd9\u6837\u200b\u7684\u200b\u8bbe\u8ba1\u200b\u4e2d\u200b\uff0c\u200b\u7531\u4e8e\u200b\u989d\u5916\u200b\u7684\u200b FFN \u200b\u800c\u200b\u589e\u52a0\u200b\u6a21\u578b\u200b\u4e2d\u200b\u7684\u200b\u53ef\u200b\u8bad\u7ec3\u200b\u53c2\u6570\u200b\u603b\u6570\u200b\uff0c\u200b\u4f46\u200b\u53ea\u6709\u200b\u4e00\u5c0f\u90e8\u5206\u200b\u53c2\u6570\u200b\u4f1a\u200b\u5728\u200b\u524d\u200b\u5411\u200b\u4f20\u9012\u200b\u671f\u95f4\u200b\u88ab\u200b\u6fc0\u6d3b\u200b\u3002</p> <p>\u200b\u8fd9\u200b\u5c31\u662f\u200b\u4e3a\u4ec0\u4e48\u200b\u6211\u4eec\u200b\u7ecf\u5e38\u200b\u770b\u5230\u200b\u5e26\u6709\u200b MoE \u200b\u7684\u200b LLM \u200b\u5c06\u200b\u5176\u200b\u6a21\u578b\u200b\u5927\u5c0f\u200b\u63cf\u8ff0\u200b\u4e3a\u200b\u201cXX \u200b\u4e2a\u200b\u603b\u200b\u53c2\u6570\u200b, \u200b\u6bcf\u4e2a\u200b Token \u200b\u6fc0\u6d3b\u200b\u4e86\u200bYY\u201d\uff0c\u200b\u5176\u4e2d\u200b YY \u200b\u8fdc\u200b\u5c0f\u4e8e\u200b XX\uff0c\u200b\u5982\u200b DeepSeek-V3 \u200b\u793a\u4f8b\u200b\u6240\u793a\u200b\uff1a</p> <p>\u201c\u200b\u5b83\u200b\u603b\u5171\u200b\u5305\u542b\u200b 236B \u200b\u4e2a\u200b\u53c2\u6570\u200b\uff0c\u200b\u5176\u4e2d\u200b 21B \u200b\u4e3a\u200b\u6bcf\u4e2a\u200b\u4ee4\u724c\u200b\u6fc0\u6d3b\u200b......\u201d</p> <p>\u200b\u90a3\u4e48\u200b\uff0c\u200b\u5982\u679c\u200b MoE \u200b\u5f15\u5165\u200b\u66f4\u200b\u591a\u200b\u53c2\u6570\u200b\uff0c\u200b\u5b83\u200b\u6709\u200b\u4ec0\u4e48\u200b\u597d\u5904\u200b\u5462\u200b\uff1f</p>"},{"location":"blog/deepseek-v3_deepseekmoe%E6%9C%BA%E5%88%B6%E6%98%AF%E4%BB%80%E4%B9%88/#moe-\u7684\u597d\u5904\u548c\u6311\u6218","title":"MoE \u200b\u7684\u200b\u597d\u5904\u200b\u548c\u200b\u6311\u6218","text":"<p>MoE \u200b\u7684\u200b\u4f1f\u5927\u200b\u4e4b\u200b\u5904\u200b\u5728\u4e8e\u200b\u5b83\u200b\u53cd\u6620\u200b\u4e86\u200b\u8bb8\u591a\u200b\u5177\u6709\u200b\u76f8\u4f3c\u200b\u539f\u7406\u200b\u7684\u200b\u73b0\u5b9e\u751f\u6d3b\u200b\u573a\u666f\u200b\uff0c\u200b\u56e0\u6b64\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u8fd9\u4e9b\u200b\u793a\u4f8b\u200b\u6765\u200b\u66f4\u200b\u76f4\u89c2\u200b\u5730\u200b\u7406\u89e3\u200b\u5b83\u200b\u3002</p> <p>\u200b\u73b0\u5728\u200b\u60f3\u8c61\u200b\u4e00\u4e0b\u200b\uff0c\u200b\u6211\u4eec\u200b\u6b63\u5728\u200b\u4e3a\u200b\u4e00\u5bb6\u200b\u540c\u65f6\u200b\u4f9b\u5e94\u200b\u4e2d\u56fd\u200b\u83dc\u200b\u548c\u200b\u610f\u5927\u5229\u200b\u83dc\u200b\u7684\u200b\u9910\u5385\u200b\u62db\u8058\u200b\u53a8\u5e08\u200b\uff0c\u200b\u6211\u4eec\u200b\u6709\u200b\u4e24\u4e2a\u200b\u9009\u62e9\u200b\uff1a</p> <ul> <li> <p>\u200b\u9009\u9879\u200b 1\uff1a\u200b\u8058\u8bf7\u200b\u4e00\u4f4d\u200b\u64c5\u957f\u200b\u4e2d\u9910\u200b\u548c\u200b\u610f\u5927\u5229\u200b\u83dc\u200b\u7684\u200b\u53a8\u5e08\u200b\uff0c\u200b\u8fd9\u6837\u200b\u4ed6\u200b\u6216\u200b\u5979\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u5355\u72ec\u200b\u5904\u7406\u200b\u6bcf\u9053\u83dc\u200b\u3002\u200b\u8fd9\u200b\u7c7b\u4f3c\u200b\u4e8e\u200b\u6807\u51c6\u200b Transformer \u200b\u6a21\u578b\u200b\uff0c\u200b\u5176\u4e2d\u200b\u5355\u4e2a\u200b FFN \u200b\u5b50\u5c42\u200b\u5c06\u200b\u5904\u7406\u200b\u6240\u6709\u200b\u8f93\u5165\u200btoken\u3002</p> </li> <li> <p>\u200b\u9009\u9879\u200b 2\uff1a\u200b\u8058\u8bf7\u200b\u591a\u540d\u200b\u53a8\u5e08\u200b\uff0c\u200b\u6bcf\u4f4d\u200b\u53a8\u5e08\u200b\u90fd\u200b\u64c5\u957f\u200b\u4e2d\u9910\u200b\u6216\u200b\u610f\u5927\u5229\u200b\u83dc\u200b\uff0c\u200b\u5916\u52a0\u200b\u4e00\u540d\u200b\u4e3b\u53a8\u200b\uff0c\u200b\u6839\u636e\u200b\u4ed6\u4eec\u200b\u7684\u200b\u4e13\u4e1a\u77e5\u8bc6\u200b\u4e3a\u200b\u8fd9\u200b\u4e24\u4f4d\u200b\u53a8\u5e08\u200b\u5206\u914d\u200b\u8ba2\u5355\u200b\u3002\u200b\u8fd9\u200b\u7c7b\u4f3c\u200b\u4e8e\u200b MoE \u200b\u65b9\u6cd5\u200b\uff0c\u200b\u5176\u4e2d\u200b\u6bcf\u4e2a\u200b\u53a8\u5e08\u200b\u90fd\u200b\u5145\u5f53\u200b\u4e13\u5bb6\u200b\uff0c\u200b\u800c\u200b\u4e3b\u53a8\u200b\u5145\u5f53\u200b\u9009\u62e9\u200b\u4e13\u5bb6\u200b\u7684\u200b\u95e8\u63a7\u200b\u673a\u5236\u200b\u3002</p> </li> </ul> <p>\u200b\u901a\u8fc7\u200b\u4e0a\u9762\u200b\u7684\u200b\u7c7b\u6bd4\u200b\uff0c\u200b\u5f88\u200b\u660e\u663e\u200b\uff0c\u200b\u9009\u9879\u200b 2 \u200b\u4e0d\u4ec5\u200b\u4f7f\u200b\u62db\u8058\u200b\u66f4\u200b\u5bb9\u6613\u200b\uff0c\u200b\u800c\u4e14\u200b\u53ef\u4ee5\u200b\u786e\u4fdd\u200b\u4e24\u79cd\u200b\u83dc\u80b4\u200b\u90fd\u200b\u4ee5\u200b\u66f4\u200b\u9ad8\u200b\u7684\u200b\u8d28\u91cf\u200b\u51c6\u5907\u200b\u3002\u200b\u76f8\u6bd4\u4e4b\u4e0b\u200b\uff0c\u200b\u627e\u5230\u200b\u4e00\u4f4d\u200b\u7cbe\u901a\u200b\u591a\u79cd\u200b\u7f8e\u98df\u200b\u7684\u200b\u53a8\u5e08\u200b\u8981\u200b\u56f0\u96be\u200b\u5f97\u200b\u591a\u200b, \u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u4e0d\u5f97\u4e0d\u200b\u5728\u200b\u83dc\u80b4\u200b\u7684\u200b\u8d28\u91cf\u200b\u4e0a\u200b\u59a5\u534f\u200b\u3002</p> <p>\u200b\u56de\u5230\u200b\u6211\u4eec\u200b\u7684\u200b LLM \u200b\u573a\u666f\u200b\uff0cMoE \u200b\u7684\u200b\u52a8\u673a\u200b\u90e8\u5206\u200b\u4e0e\u200b\u89c4\u6a21\u200b\u5047\u8bbe\u200b\u6709\u5173\u200b\uff0c\u200b\u5373\u200b\u5728\u200b\u5927\u200b\u6570\u636e\u200b\u89c4\u6a21\u200b\u4e0a\u200b\u6269\u5c55\u200b LLM \u200b\u65f6\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u51fa\u73b0\u200b\u6d8c\u73b0\u200b\u80fd\u529b\u200b\uff0c\u200b\u8fd9\u200b\u5c31\u662f\u200b\u4e3a\u4ec0\u4e48\u200b\u6211\u4eec\u200b\u76ee\u7779\u200b\u4e86\u200b\u5f53\u4eca\u200b LLM \u200b\u53d8\u5f97\u200b\u8d8a\u6765\u8d8a\u200b\u5927\u200b\uff0c\u200b\u4f8b\u5982\u200b GPT \u200b\u6a21\u578b\u200b\u5df2\u7ecf\u200b\u4ece\u200b 117M \u200b\u6269\u5c55\u200b\u5230\u200b 175B\u3002</p> <p>\u200b\u7136\u800c\u200b\uff0c\u200b\u5e76\u200b\u4e0d\u662f\u200b\u6bcf\u4e2a\u200b\u4eba\u200b\u90fd\u200b\u6709\u200b\u7279\u6743\u200b\u8bad\u7ec3\u200b\u5982\u6b64\u200b\u5927\u89c4\u6a21\u200b\u7684\u200b LLM\uff0c\u200b\u800c\u200b MoE \u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u6298\u8877\u65b9\u6848\u200b\uff1a\u200b\u5b83\u200b\u5141\u8bb8\u200b\u6211\u4eec\u200b\u6269\u5927\u200b\u6a21\u578b\u200b\u5927\u5c0f\u200b\u4ee5\u200b\u589e\u52a0\u200b\u6a21\u578b\u200b\u5bb9\u91cf\u200b\uff0c\u200b\u540c\u65f6\u200b\u901a\u8fc7\u200b\u4ec5\u200b\u6fc0\u6d3b\u200b\u6bcf\u4e2a\u200b\u8f93\u5165\u200btoken\u200b\u603b\u200b\u53c2\u6570\u200b\u7684\u200b\u4e00\u5c0f\u90e8\u5206\u200b\u6765\u200b\u4fdd\u6301\u200b\u8bad\u7ec3\u200b\u548c\u200b\u63a8\u7406\u200b\u6210\u672c\u200b\u53ef\u63a7\u200b\u3002</p> <p>\u200b\u5728\u200bdeepseek\u200b\u8bba\u6587\u200b\u4e2d\u200bDeepSeekMoE: Towards Ultimate Expert Specialization in Mixture-of-Experts Language Models \u200b\u6240\u793a\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u8bad\u7ec3\u200b\u4ec5\u200b\u6fc0\u6d3b\u200b 0.3B \u200b\u53c2\u6570\u200b\u7684\u200b 2B \u200b\u6a21\u578b\u200b\u3001\u200b\u6fc0\u6d3b\u200b 2.8B \u200b\u53c2\u6570\u200b\u7684\u200b 16B \u200b\u6a21\u578b\u200b\uff0c\u200b\u751a\u81f3\u200b\u4ec5\u200b\u6fc0\u6d3b\u200b 22.2B \u200b\u53c2\u6570\u200b\u7684\u200b 145B \u200b\u6a21\u578b\u200b\u3002\u200b\u5728\u200b\u6bcf\u79cd\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u4e00\u6b21\u200b\u53ea\u200b\u4f7f\u7528\u200b\u603b\u200b\u53c2\u6570\u200b\u7684\u200b 1/7 \u200b\u5de6\u53f3\u200b\uff0c\u200b\u663e\u8457\u200b\u63d0\u9ad8\u200b\u4e86\u200b\u8bad\u7ec3\u200b\u548c\u200b\u63a8\u7406\u200b\u6548\u7387\u200b\u3002</p> <p>\u200b\u7136\u800c\u200b\uff0c\u200b\u6bcf\u79cd\u200b\u8bbe\u8ba1\u200b\u90fd\u200b\u6709\u200b\u5176\u200b\u81ea\u8eab\u200b\u7684\u200b\u5c40\u9650\u6027\u200b\uff0c\u200b\u5e76\u200b\u5e26\u6765\u200b\u4e86\u200b\u65b0\u200b\u7684\u200b\u6311\u6218\u200b\u3002\u200b\u5728\u200b MoE \u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u5b83\u200b\u7684\u200b\u6027\u80fd\u200b\u5728\u200b\u5f88\u5927\u200b\u7a0b\u5ea6\u200b\u4e0a\u200b\u53d6\u51b3\u4e8e\u200b\u95e8\u63a7\u200b\u673a\u5236\u200b\u7684\u200b\u6709\u6548\u6027\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u65e0\u6cd5\u200b\u4fdd\u8bc1\u200b\u5b83\u200b\u603b\u662f\u200b\u5c06\u200b\u6bcf\u4e2a\u200b\u8f93\u5165\u200btoken\u200b\u8def\u7531\u200b\u5230\u200b\u6700\u4f73\u200b\u4e13\u5bb6\u200b\uff0c\u200b\u5e76\u4e14\u200b\u6709\u200b\u53ef\u80fd\u200b\u5c11\u6570\u200b\u4e13\u5bb6\u200b\u7ecf\u5e38\u200b\u88ab\u200b\u6fc0\u6d3b\u200b\u5927\u591a\u6570\u200b\u8f93\u5165\u200btoken\uff0c\u200b\u800c\u200b\u5176\u4ed6\u200b\u4e13\u5bb6\u200b\u5219\u200b\u5750\u5728\u200b\u90a3\u91cc\u200b\u800c\u200b\u6ca1\u6709\u200b\u66b4\u9732\u200b\u8db3\u591f\u200b\u7684\u200b\u8bad\u7ec3\u200btoken\u3002\u200b\u8fd9\u200b\u901a\u5e38\u200b\u88ab\u200b\u79f0\u4e3a\u200b \u201c\u200b\u4e13\u5bb6\u200b\u5d29\u6e83\u200b\u201d \u200b\u95ee\u9898\u200b\u3002\u200b\u8fd9\u200b\u4e5f\u200b\u4f1a\u200b\u5bfc\u81f4\u200b\u5176\u4ed6\u200b\u95ee\u9898\u200b\uff0c\u200b\u4f8b\u5982\u200b\u8d1f\u8f7d\u200b\u4e0d\u200b\u5e73\u8861\u200b\uff08\u200b\u56e0\u4e3a\u200b\u5927\u591a\u6570\u200b\u8f93\u5165\u200btoken\u200b\u90fd\u200b\u8def\u7531\u200b\u5230\u200b\u4e00\u5c0f\u90e8\u5206\u200b\u4e13\u5bb6\u200b\uff09\u200b\u548c\u200b\u4e0d\u200b\u7a33\u5b9a\u200b\uff08\u200b\u5f53\u200b\u8f93\u5165\u200btoken\u200b\u8def\u7531\u200b\u5230\u200b\u6ca1\u6709\u200b\u63a5\u53d7\u200b\u8db3\u591f\u200b\u4efb\u52a1\u200b\u57f9\u8bad\u200b\u7684\u200b\u4e13\u5bb6\u200b\u65f6\u200b\uff0c\u200b\u7ed3\u679c\u200b\u4f1a\u200b\u5f88\u200b\u5dee\u200b\uff09\u3002</p> <p>\u200b\u56e0\u6b64\u200b\uff0c\u200b\u5728\u200b\u63d0\u5230\u200bMoE\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u4f60\u200b\u7ecf\u5e38\u200b\u4f1a\u200b\u770b\u5230\u200b\u8d1f\u8f7d\u200b\u5747\u8861\u200b\u8fd9\u4e2a\u200b\u8bcd\u8bed\u200b\u3002</p> <p>DeepSeekMoE \u200b\u8fd8\u200b\u63d0\u51fa\u200b\u4e86\u200b\u4e00\u4e9b\u200b\u8d1f\u8f7d\u200b\u5747\u8861\u200b\u7b56\u7565\u200b\uff0c\u200b\u6bd4\u5982\u200b\u65e0\u9700\u200b\u8f85\u52a9\u200b\u635f\u5931\u200b\u7684\u200b\u8d1f\u8f7d\u200b\u5747\u8861\u200b\u7b56\u7565\u200b\u3002\u200b\u5177\u4f53\u6765\u8bf4\u200b\uff0c\u200b\u4f5c\u8005\u200b\u91c7\u7528\u200b\u4e86\u200b DeepSeek AI \u200b\u8bba\u6587\u200b Auxiliary-Loss-Free Load Balancing Strategy for Mixture-of-Experts \u200b\u4e2d\u200b\u7684\u200b\u8d1f\u8f7d\u200b\u5747\u8861\u200b\u7b56\u7565\u200b\uff0c\u200b\u5177\u4f53\u6765\u8bf4\u200b\uff0c\u200b\u5176\u200b\u901a\u8fc7\u200b\u52a8\u6001\u200b\u66f4\u65b0\u200b\u6bcf\u4e2a\u200b\u4e13\u5bb6\u200b\u7684\u200b\u504f\u7f6e\u200b\uff08b\uff09\u200b\u6765\u200b\u7ef4\u6301\u200b\u4e13\u5bb6\u200b\u7684\u200b\u8d1f\u8f7d\u200b\u5747\u8861\u200b\uff0c\u200b\u800c\u200b\u4e0d\u4f1a\u200b\u5f15\u5165\u200b\u989d\u5916\u200b\u7684\u200b\u5e72\u6270\u200b\u68af\u5ea6\u200b\u3002</p> <p></p>"},{"location":"blog/deepseek-v3_deepseekmoe%E6%9C%BA%E5%88%B6%E6%98%AF%E4%BB%80%E4%B9%88/#\u77e5\u8bc6\u4e13\u4e1a\u5316\u4e0e\u77e5\u8bc6\u5171\u4eab","title":"\u77e5\u8bc6\u200b\u4e13\u4e1a\u5316\u200b\u4e0e\u200b\u77e5\u8bc6\u200b\u5171\u4eab","text":"<p>\u200b\u5f53\u200b\u6211\u4eec\u200b\u5728\u200b\u4e0a\u9762\u200b\u7684\u200b\u9910\u5385\u200b\u793a\u4f8b\u200b\u4e2d\u200b\u505a\u51fa\u200b\u62db\u8058\u200b\u51b3\u5b9a\u200b\u65f6\u200b\uff0c\u200b\u6211\u4eec\u200b\u4e5f\u200b\u5728\u200b\u77e5\u8bc6\u200b\u4e13\u4e1a\u5316\u200b\u4e0e\u200b\u77e5\u8bc6\u200b\u5171\u4eab\u200b(Knowledge Specialization vs. Knowledge Sharing)\u200b\u4e4b\u95f4\u200b\u8fdb\u884c\u200b\u6743\u8861\u200b\uff1a \u200b\u9009\u9879\u200b 1 \u200b\u4f18\u5148\u200b\u8003\u8651\u200b\u901a\u624d\u200b\uff0c\u200b\u4f46\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u727a\u7272\u200b\u6df1\u5ea6\u200b\uff0c\u200b\u800c\u200b\u9009\u9879\u200b 2 \u200b\u4f18\u5148\u200b\u8003\u8651\u200b\u4e13\u4e1a\u5316\u200b\u3002\u200b\u8fd9\u79cd\u200b\u6743\u8861\u200b\u5b58\u5728\u200b\u4e8e\u200b\u8bb8\u591a\u200b\u7ec4\u7ec7\u200b\u7684\u200b\u5b9e\u9645\u200b\u573a\u666f\u200b\u4e2d\u200b\uff0c\u200b\u4f8b\u5982\u200b\u516c\u53f8\u200b\u3001\u200b\u56e2\u961f\u200b\u7b49\u200b\u3002</p> <p>\u200b\u5b83\u200b\u4e5f\u200b\u5b58\u5728\u200b\u4e8e\u200b MoE \u200b\u4e2d\u200b\uff0c\u200b\u4f46\u200b\u4ee5\u200b\u66f4\u200b\u9690\u6666\u200b\u7684\u200b\u65b9\u5f0f\u200b\u5b58\u5728\u200b\u3002\u200b\u4ece\u200b\u7406\u8bba\u200b\u4e0a\u200b\u8bb2\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u4e13\u5bb6\u200b\u90fd\u200b\u5e94\u8be5\u200b\u4e13\u6ce8\u200b\u4e8e\u200b\u7279\u5b9a\u200b\u65b9\u9762\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u53ea\u6709\u200b input token \u200b\u7684\u200b\u4e00\u4e2a\u200b\u5b50\u96c6\u200b\u88ab\u200b\u8def\u7531\u200b\u5230\u200b\u6bcf\u4e2a\u200b\u4e13\u5bb6\u200b\uff0c\u200b\u5e76\u4e14\u200b\u6240\u6709\u200b\u4e13\u5bb6\u200b\u4ecd\u7136\u200b\u5171\u4eab\u200b\u4e00\u4e9b\u200b\u5171\u540c\u200b\u77e5\u8bc6\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5b83\u4eec\u200b\u5171\u4eab\u200b\u8bb8\u591a\u200b\u53c2\u6570\u200b\u3002\u200b\u4e0e\u200b\u771f\u5b9e\u200b\u7684\u200b\u7ec4\u7ec7\u200b\u4e0d\u540c\u200b\uff0c\u200b\u5f88\u96be\u200b\u786e\u5b9a\u200b\u6bcf\u4e2a\u200b\u4e13\u5bb6\u200b\u7684\u200b\u4e13\u4e1a\u200b\u7a0b\u5ea6\u200b\u4ee5\u53ca\u200b\u4ed6\u4eec\u200b\u5171\u4eab\u200b\u77e5\u8bc6\u200b\u7684\u200b\u7a0b\u5ea6\u200b\u3002</p> <p>\u200b\u6743\u8861\u200b\u4e13\u4e1a\u5316\u200b\u548c\u200b\u77e5\u8bc6\u200b\u5171\u4eab\u200b\u662f\u200b MoE \u200b\u67b6\u6784\u200b\u7684\u200b\u4e00\u4e2a\u200b\u5173\u952e\u200b\u8bbe\u8ba1\u200b\u8003\u8651\u200b\u56e0\u7d20\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u8fc7\u5ea6\u200b\u4e13\u4e1a\u5316\u200b\u548c\u200b\u8fc7\u5ea6\u200b\u5197\u4f59\u200b\u90fd\u200b\u4e0d\u662f\u200b\u7406\u60f3\u200b\u7684\u200b\u3002</p> <p>\u200b\u5728\u200b\u524d\u200b\u4e00\u79cd\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u62e5\u6709\u200b\u8fc7\u4e8e\u200b\u4e13\u4e1a\u200b\u7684\u200b\u4e13\u5bb6\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5bfc\u81f4\u200b\u8bad\u7ec3\u200b\u548c\u200b\u63a8\u7406\u200b\u4e0d\u200b\u7a33\u5b9a\u200b\uff0c\u200b\u800c\u200b\u4efb\u4f55\u200b\u6b21\u4f18\u200b\u7684\u200b\u8def\u7531\u200b\u90fd\u200b\u53ef\u80fd\u200b\u5bfc\u81f4\u200b\u6027\u80fd\u200b\u4e0d\u4f73\u200b\u3002\u200b\u540c\u65f6\u200b\uff0c\u200b\u8fd9\u200b\u901a\u5e38\u200b\u4f1a\u200b\u5bfc\u81f4\u200b\u5bb9\u91cf\u200b\u5229\u7528\u7387\u200b\u4e0d\u8db3\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u9ad8\u5ea6\u200b\u4e13\u4e1a\u5316\u200b\u7684\u200b\u4e13\u5bb6\u200b\u53ea\u80fd\u200b\u5904\u7406\u200b\u4e00\u5c0f\u90e8\u5206\u200btokens\u3002</p> <p>\u200b\u5728\u200b\u540e\u200b\u4e00\u79cd\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u5982\u679c\u200b expert \u200b\u53d8\u5f97\u200b\u8fc7\u4e8e\u200b\u76f8\u4f3c\u200b\uff0cMoE \u200b\u5f15\u5165\u200b\u7684\u200b\u989d\u5916\u200b\u53c2\u6570\u200b\u4e0d\u4f1a\u200b\u5e26\u6765\u200b\u6210\u200b\u6bd4\u4f8b\u200b\u7684\u200bLLM\u200b\u80fd\u529b\u200b\u4e0a\u200b\u7684\u200b\u589e\u76ca\u200b\uff0c\u200b\u8fd9\u200b\u80af\u5b9a\u200b\u662f\u200b\u5bf9\u200b\u6709\u9650\u200b\u8ba1\u7b97\u8d44\u6e90\u200b\u7684\u200b\u6d6a\u8d39\u200b\u3002</p> <p>\u200b\u5728\u200b\u4e0b\u200b\u4e00\u8282\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u4e86\u89e3\u200b DeepSeekMoE \u200b\u5982\u4f55\u200b\u8bbe\u8ba1\u200b\u4ee5\u200b\u5b9e\u73b0\u200b\u4e24\u8005\u200b\u7684\u200b\u66f4\u597d\u200b\u6743\u8861\u200b\u3002</p>"},{"location":"blog/deepseek-v3_deepseekmoe%E6%9C%BA%E5%88%B6%E6%98%AF%E4%BB%80%E4%B9%88/#deepseekmoe-\u67b6\u6784","title":"DeepSeekMoE \u200b\u67b6\u6784","text":"<p>DeepSeekMoE \u200b\u5229\u7528\u200b\u4e24\u9879\u200b\u5173\u952e\u200b\u521b\u65b0\u200b\u6765\u200b\u5e73\u8861\u200b MoE \u200b\u4e2d\u200b\u7684\u200b\u77e5\u8bc6\u200b\u4e13\u4e1a\u5316\u200b\u4e0e\u200b\u77e5\u8bc6\u200b\u5171\u4eab\u200b\uff0c\u200b\u5373\u200b\u7ec6\u7c92\u5ea6\u200b\u4e13\u5bb6\u200b\u7ec6\u5206\u200b\uff08fine-grained expert segmentation\uff09\u200b\u548c\u200b\u5171\u4eab\u200b\u4e13\u5bb6\u200b\u9694\u79bb\u200b\uff08shared expert isolation\uff09\u3002</p> <p></p>"},{"location":"blog/deepseek-v3_deepseekmoe%E6%9C%BA%E5%88%B6%E6%98%AF%E4%BB%80%E4%B9%88/#\u7ec6\u7c92\u5ea6\u7684\u4e13\u5bb6\u7ec6\u5206","title":"\u7ec6\u7c92\u5ea6\u200b\u7684\u200b\u4e13\u5bb6\u200b\u7ec6\u5206","text":"<p>DeepSeekMoE \u200b\u4e2d\u200b\u63d0\u51fa\u200b\u4e86\u200b\u7ec6\u7c92\u5ea6\u200b\u7684\u200b\u4e13\u5bb6\u200b\u7ec6\u5206\u200b\uff0c\u200b\u4ee5\u200b\u4fc3\u8fdb\u200b\u4e13\u5bb6\u200b\u4e13\u4e1a\u5316\u200b\uff0c\u200b\u80cc\u540e\u200b\u7684\u200b\u76f4\u89c9\u200b\u975e\u5e38\u7b80\u5355\u200b\uff1a\u200b\u968f\u7740\u200b\u4e3a\u200b\u8f93\u5165\u200b\u4ee4\u724c\u200b\u6fc0\u6d3b\u200b\u7684\u200b\u4e13\u5bb6\u200b\u8d8a\u200b\u591a\u200b\uff0c\u200b\u5904\u7406\u200b\u8be5\u200b\u4ee4\u724c\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u77e5\u8bc6\u200b\u66f4\u200b\u6709\u200b\u53ef\u80fd\u200b\u88ab\u200b\u4e0d\u540c\u200b\u7684\u200b\u4e13\u5bb6\u200b\u5206\u89e3\u200b\u548c\u200b\u83b7\u53d6\u200b\u3002</p> <p>\u200b\u5728\u200b\u6211\u4eec\u200b\u524d\u9762\u200b\u7684\u200b\u9910\u5385\u200b\u793a\u4f8b\u200b\u4e2d\u200b\uff0c\u200b\u8fd9\u200b\u7c7b\u4f3c\u200b\u4e8e\u200b\u5c06\u200b\u6bcf\u4e2a\u200b\u53a8\u5e08\u200b\u5212\u5206\u200b\u4e3a\u200b\u4e13\u4e1a\u6280\u80fd\u200b\uff0c\u200b\u5982\u4e0b\u200b\u56fe\u200b\u6240\u793a\u200b\u3002\u200b\u6700\u521d\u200b\uff0c\u200b\u6211\u4eec\u200b\u7531\u200b\u4e00\u540d\u200b\u53a8\u5e08\u200b\u51c6\u5907\u200b\u6240\u6709\u200b\u4e2d\u9910\u200b\uff0c\u200b\u53e6\u4e00\u540d\u200b\u53a8\u5e08\u200b\u5904\u7406\u200b\u6240\u6709\u200b\u610f\u5927\u5229\u200b\u83dc\u200b\u3002\u200b\u5728\u200b\u5e94\u7528\u200b\u7cbe\u7ec6\u200b\u7684\u200b\u4e13\u5bb6\u200b\u7ec6\u5206\u200b\u540e\u200b\uff0c\u200b\u5c06\u200b\u6bcf\u79cd\u200b\u83dc\u7cfb\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u6280\u80fd\u200b\u5212\u5206\u200b\u4e3a\u200b\u591a\u4e2a\u200b\u4e13\u5bb6\u200b\uff0c\u200b\u8fd9\u6837\u200b\u6211\u4eec\u200b\u5c31\u200b\u4f1a\u200b\u6709\u200b\u4e00\u7ec4\u200b\u4e2d\u9910\u200b\u53a8\u5e08\u200b\u548c\u200b\u53e6\u4e00\u7ec4\u200b\u610f\u5927\u5229\u200b\u83dc\u200b\u53a8\u5e08\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u53a8\u5e08\u200b\u53ea\u200b\u9700\u8981\u200b\u638c\u63e1\u200b\u8be5\u200b\u83dc\u7cfb\u200b\u7684\u200b\u7279\u5b9a\u200b\u6280\u80fd\u200b\u3002</p> <p></p> <p>\u200b\u4e0b\u56fe\u200b\u4e5f\u200b\u8bf4\u660e\u200b\u4e86\u200b\u8fd9\u200b\u4e00\u70b9\u200b\uff0c\u200b\u5176\u4e2d\u200b\u5728\u5b50\u200b\u56fe\u200b \uff08a\uff09 \u200b\u4e2d\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u8f93\u5165\u200b\u4ee4\u724c\u200b\u88ab\u200b\u8def\u7531\u200b\u5230\u200b N \u200b\u4e2a\u200b\u4e13\u5bb6\u200b\u4e2d\u200b\u7684\u200b 2 \u200b\u4e2a\u200b\uff0c\u200b\u800c\u200b\u5728\u200b \uff08b\uff09 \u200b\u4e2d\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u4ee4\u724c\u200b\u5c06\u200b\u88ab\u200b\u8def\u7531\u200b\u5230\u200b 2N \u200b\u4e2a\u200b\u4e13\u5bb6\u200b\u4e2d\u200b\u7684\u200b 4 \u200b\u4e2a\u200b\u3002\u200b\u5728\u200b\u66f4\u200b\u4e00\u822c\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u4e13\u5bb6\u200b\u6570\u91cf\u200b\u4ece\u200b N \u200b\u589e\u52a0\u200b\u5230\u200b mN\uff0c\u200b\u540c\u65f6\u200b\u5c06\u200b\u6bcf\u4e2a\u200b\u4e13\u5bb6\u200b FFN \u200b\u7684\u200b\u4e2d\u95f4\u200b\u9690\u85cf\u200b\u7ef4\u5ea6\u200b\u51cf\u5c11\u200b\u5230\u200b 1/m\uff0c\u200b\u5e76\u200b\u4e3a\u200b\u6bcf\u4e2a\u200b\u8f93\u5165\u200btoken\u200b\u6fc0\u6d3b\u200b m \u200b\u500d\u200b\u7684\u200b\u4e13\u5bb6\u200b\u3002\u200b\u8fd9\u6837\u200b\uff0c\uff08a\uff09 \u200b\u548c\u200b \uff08b\uff09 \u200b\u7684\u200b\u603b\u4f53\u200b\u8ba1\u7b97\u6210\u672c\u200b\u5c06\u200b\u5927\u81f4\u200b\u4fdd\u6301\u200b\u4e0d\u53d8\u200b\u3002</p> <p></p> <p>\u200b\u867d\u7136\u200b\u4f5c\u8005\u200b\u6ca1\u6709\u200b\u4e3a\u200b\u8fd9\u79cd\u200b\u7b56\u7565\u200b\u7684\u200b\u6709\u6548\u6027\u200b\u63d0\u4f9b\u200b\u4efb\u4f55\u200b\u7406\u8bba\u200b\u8bc1\u660e\u200b\uff0c\u200b\u4f46\u200b\u4ed6\u4eec\u200b\u505a\u200b\u4e86\u200b\u8bbe\u8ba1\u200b\u5b9e\u9a8c\u200b\u6765\u200b\u9a8c\u8bc1\u200b\u4ed6\u4eec\u200b\u7684\u200b\u60f3\u6cd5\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u5728\u200b\u8bc4\u4f30\u200b\u90e8\u5206\u200b\u4ecb\u7ecd\u200b\u3002</p>"},{"location":"blog/deepseek-v3_deepseekmoe%E6%9C%BA%E5%88%B6%E6%98%AF%E4%BB%80%E4%B9%88/#\u5171\u4eab\u4e13\u5bb6\u9694\u79bb","title":"\u5171\u4eab\u200b\u4e13\u5bb6\u200b\u9694\u79bb","text":"<p>DeepSeekMoE \u200b\u63d0\u51fa\u200b\u7684\u200b\u53e6\u200b\u4e00\u79cd\u200b\u6280\u672f\u200b\u662f\u200b\u9694\u79bb\u200b\u4e00\u4e9b\u200b\u5171\u4eab\u200b\u7684\u200b\u4e13\u5bb6\u200b\u4ee5\u200b\u51cf\u5c11\u200b\u5197\u4f59\u200b\u3002\u200b\u80cc\u540e\u200b\u7684\u200b\u539f\u7406\u200b\u662f\u200b\uff0c\u200b\u5982\u679c\u200b\u6211\u4eec\u200b\u7528\u200b\u4e00\u4e9b\u200b\u5171\u4eab\u200b\u7684\u200b\u4e13\u5bb6\u200b\u6765\u200b\u5b66\u4e60\u200b\u4e0d\u540c\u200b\u4efb\u52a1\u200b\u4e2d\u200b\u9700\u8981\u200b\u7684\u200b\u5171\u540c\u200b\u77e5\u8bc6\u200b\uff0c\u200b\u8fd9\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u7ed9\u200b\u5176\u4ed6\u200b\u4e13\u5bb6\u200b\u66f4\u200b\u591a\u200b\u7684\u200b\u81ea\u7531\u200b\u6765\u200b\u6446\u8131\u200b\u8fd9\u4e9b\u200b\u5171\u540c\u200b\u77e5\u8bc6\u200b\uff0c\u200b\u4ece\u800c\u200b\u51cf\u5c11\u200b\u8fd9\u4e9b\u200b\u672a\u200b\u5171\u4eab\u200b\u7684\u200b\u4e13\u5bb6\u200b\u4e4b\u95f4\u200b\u7684\u200b\u5197\u4f59\u200b\u3002\u200b\u7b80\u5355\u200b\u6765\u8bf4\u200b\uff0c\u200b\u5c31\u662f\u200b\u5171\u4eab\u200b\u4e13\u5bb6\u200b\u8d1f\u8d23\u200b\u5927\u5bb6\u200b\u90fd\u200b\u4f1a\u200b\u7528\u5230\u200b\u7684\u200b\u901a\u8bc6\u200b\uff0c\u200b\u4e13\u95e8\u200b\u9886\u57df\u200b\u7684\u200b\u4e13\u5bb6\u200b\u8d1f\u8d23\u200b\u4e13\u6709\u200b\u77e5\u8bc6\u200b\u3002</p> <p>\u200b\u5728\u200b\u6211\u4eec\u200b\u7684\u200b\u9910\u5385\u200b\u793a\u4f8b\u200b\u4e2d\u200b\uff0c\u200b\u8fd9\u200b\u7c7b\u4f3c\u200b\u4e8e\u200b\u5c06\u200b\u6240\u6709\u200b\u53a8\u5e08\u200b\u8fdb\u4e00\u6b65\u200b\u5206\u4e3a\u200b\u4e24\u7ec4\u200b\uff0c\u200b\u5982\u4e0b\u200b\u56fe\u200b\u6240\u793a\u200b\uff0c\u200b\u5176\u4e2d\u200b\u4e0a\u90e8\u200b\u663e\u793a\u200b\u7684\u200b\u7b2c\u4e00\u7ec4\u200b\u5904\u7406\u200b\u4e00\u822c\u200b\u70f9\u996a\u200b\u6280\u80fd\u200b\uff0c\u200b\u4f8b\u5982\u200b\u57fa\u672c\u200b\u5200\u5de5\u200b\u3001\u200b\u70f9\u996a\u200b\u6280\u672f\u200b\u548c\u200b\u8c03\u5473\u200b\u539f\u7406\u200b\uff0c\u200b\u800c\u200b\u7b2c\u4e8c\u7ec4\u200b\u7684\u200b\u53a8\u5e08\u200b\u66f4\u200b\u4e13\u6ce8\u200b\u4e8e\u200b\u4ed6\u4eec\u200b\u81ea\u5df1\u200b\u7684\u200b\u4e13\u4e1a\u200b\u83dc\u80b4\u200b\u3002</p> <p>\u200b\u4f8b\u5982\u200b\uff0c\u200b\u997a\u5b50\u200b\u53a8\u5e08\u200b\u53ef\u4ee5\u200b\u53ea\u200b\u4e13\u6ce8\u200b\u4e8e\u200b\u997a\u5b50\u200b\u6298\u53e0\u200b\u548c\u200b\u84b8\u200b\uff0c\u200b\u800c\u200b\u4e0d\u200b\u9700\u8981\u200b\u62c5\u5fc3\u200b\u6446\u76d8\u200b\u6280\u672f\u200b\uff0c\u200b\u800c\u200b\u610f\u5927\u5229\u200b\u9762\u200b\u53a8\u5e08\u200b\u53ef\u4ee5\u200b\u53ea\u200b\u4e13\u6ce8\u200b\u4e8e\u200b\u5236\u4f5c\u200b\u66f4\u597d\u200b\u7684\u200b\u610f\u5927\u5229\u200b\u9762\u200b\uff0c\u200b\u800c\u200b\u4e0d\u200b\u9700\u8981\u200b\u5b66\u4e60\u200b\u5207\u788e\u200b\u6280\u672f\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u51cf\u5c11\u200b\u53a8\u5e08\u200b\u4e4b\u95f4\u200b\u7684\u200b\u77e5\u8bc6\u200b\u5197\u4f59\u200b\u3002</p> <p></p> <p>\u200b\u5728\u200b\u56fe\u200b\uff08c\uff09 \u200b\u8fd8\u200b\u663e\u793a\u200b\u4e86\u200b\u5982\u4f55\u200b\u5728\u200b DeepSeekMoE \u200b\u4e2d\u200b\u5b9e\u65bd\u200b\u6b64\u200b\u7b56\u7565\u200b\uff0c\u200b\u5176\u4e2d\u200b\u9009\u62e9\u200b\u4e00\u4e2a\u200b\u4e13\u5bb6\u200b\u4f5c\u4e3a\u200b\u5171\u4eab\u200b\u4e13\u5bb6\u200b\uff08\u200b\u4ee5\u200b\u7eff\u8272\u200b\u7a81\u51fa\u200b\u663e\u793a\u200b\uff09\uff0c\u200b\u56e0\u6b64\u200b\u6240\u6709\u200b\u8f93\u5165\u200btoken\u200b\u90fd\u200b\u5c06\u200b\u8def\u7531\u200b\u5230\u200b\u8be5\u200b\u4e13\u5bb6\u200b\uff0c\u200b\u800c\u200b\u65e0\u9700\u200b\u901a\u8fc7\u200b Router\u3002\u200b\u540c\u65f6\u200b\uff0c\u200b\u6fc0\u6d3b\u200b\u7684\u200b Specialized Expert \u200b\u6570\u91cf\u200b\u4ece\u200b 4 \u200b\u4e2a\u200b\u51cf\u5c11\u200b\u5230\u200b 3 \u200b\u4e2a\u200b\uff0c\u200b\u56e0\u6b64\u200b\u6fc0\u6d3b\u200b\u7684\u200b Expert \u200b\u603b\u6570\u200b\u4e0e\u200b\u56fe\u200b 3 \uff08b\uff09 \u200b\u76f8\u540c\u200b\u3002</p> <p></p> <p>\u200b\u7efc\u4e0a\u6240\u8ff0\u200b\uff0c\u200b\u4e0b\u56fe\u200b\u53f3\u4fa7\u200b\u53ef\u4ee5\u200b\u66f4\u200b\u6b63\u5f0f\u200b\u5730\u200b\u8868\u8ff0\u200b DeepSeekMoE \u200b\u67b6\u6784\u200b\uff0c\u200b\u5c06\u200b\u5176\u200b\u4e0e\u200b\u4ee5\u524d\u200b\u7684\u200b\u901a\u7528\u200b MoE \u200b\u8fdb\u884c\u200b\u6bd4\u8f83\u200b\uff0c\u200b\u4ee5\u200b\u7a81\u51fa\u200b\u5dee\u5f02\u200b\uff1a</p> <p></p> <ul> <li> <p>\u200b\u65b9\u7a0b\u200b\uff0811\uff09\u200b\u4e0e\u200b\u4e4b\u524d\u200b\u7684\u200b\u65b9\u7a0b\u200b\uff085\uff09\u200b\u76f8\u540c\u200b</p> </li> <li> <p>\u200b\u65b9\u7a0b\u200b \uff0810\uff09 \u200b\u7c7b\u4f3c\u200b\u4e8e\u200b\u65b9\u7a0b\u200b \uff084\uff09\uff0c\u200b\u4f46\u200b\u8fd9\u91cc\u200b\u6211\u4eec\u200b\u5e94\u7528\u200b TopK \u200b\u4ece\u200b \\(\uff08mN \u2014 K_s\uff09\\) \u200b\u4e13\u5bb6\u200b\u4e2d\u200b\u9009\u62e9\u200b \\(\uff08mK \u2014 K_s\uff09\\)\uff0c\u200b\u5176\u4e2d\u200b$ K_s $\u200b\u8868\u793a\u200b\u5171\u4eab\u200b\u4e13\u5bb6\u200b\u7684\u200b\u6570\u91cf\u200b\u3002</p> </li> <li> <p>\u200b\u65b9\u7a0b\u200b \uff089\uff09 \u200b\u5c06\u200b\u65b9\u7a0b\u200b \uff083\uff09 \u200b\u4e2d\u200b\u7684\u200b\u7b2c\u4e00\u9879\u200b\u5206\u6210\u200b\u4e24\u4e2a\u200b\u5b50\u9879\u200b\uff0c\u200b\u5206\u522b\u200b\u5bf9\u5e94\u200b\u4e8e\u200b\u5171\u4eab\u200b\u4e13\u5bb6\u200b\u548c\u200b\u8def\u7531\u200b\u4e13\u5bb6\u200b\u3002</p> </li> </ul> <p>\u200b\u540c\u6837\u200b\uff0c\u200b\u539f\u59cb\u200b\u8bba\u6587\u200b\u4e2d\u200b\u6ca1\u6709\u200b\u7406\u8bba\u200b\u8bc1\u660e\u200b\u6240\u200b\u63d0\u51fa\u200b\u7684\u200b\u7b56\u7565\u200b\u7684\u200b\u6709\u6548\u6027\u200b\uff0c\u200b\u4f46\u200b\u6b63\u5982\u200b\u6211\u4eec\u200b\u5c06\u200b\u5728\u200b\u4e0b\u200b\u4e00\u8282\u200b\u4e2d\u200b\u770b\u5230\u200b\u7684\u200b\u90a3\u6837\u200b\uff0c\u200b\u8bc4\u4f30\u200b\u7ed3\u679c\u200b\u786e\u5b9e\u200b\u8868\u660e\u200b\uff0c\u200b\u6dfb\u52a0\u200b\u5171\u4eab\u200b\u4e13\u5bb6\u200b\u53ef\u4ee5\u200b\u63d0\u9ad8\u200b\u7ee9\u6548\u200b\u5e76\u200b\u51cf\u5c11\u200b\u77e5\u8bc6\u200b\u5197\u4f59\u200b\u3002</p>"},{"location":"blog/deepseek-v3_deepseekmoe%E6%9C%BA%E5%88%B6%E6%98%AF%E4%BB%80%E4%B9%88/#\u8bc4\u4f30","title":"\u8bc4\u4f30","text":"<p>\u200b\u6b63\u5982\u200b\u6211\u4eec\u200b\u4e4b\u524d\u200b\u63d0\u5230\u200b\u7684\u200b\uff0c\u200b\u5c3d\u7ba1\u200b\u8fd9\u200b\u4e24\u79cd\u200b\u7b56\u7565\u200b\u80cc\u540e\u200b\u7684\u200b\u76f4\u89c9\u200b\u542c\u200b\u8d77\u6765\u200b\u90fd\u200b\u5f88\u200b\u5408\u7406\u200b\uff0c\u200b\u4f46\u200b\u4f5c\u8005\u200b\u6ca1\u6709\u200b\u63d0\u4f9b\u200b\u4efb\u4f55\u200b\u7406\u8bba\u200b\u8bc1\u636e\u200b\u6765\u200b\u8bc1\u660e\u200b\u5b83\u4eec\u200b\u7684\u200b\u5408\u7406\u6027\u200b\uff0c\u200b\u56e0\u6b64\u200b\u4e0d\u200b\u6e05\u695a\u200b\u5b83\u4eec\u200b\u662f\u5426\u200b\u771f\u7684\u200b\u53ef\u4ee5\u200b\u5e2e\u52a9\u200b\u89e3\u51b3\u200b\u4e13\u4e1a\u5316\u200b\u4e0e\u200b\u77e5\u8bc6\u200b\u5171\u4eab\u200b\u4e4b\u95f4\u200b\u7684\u200b\u7d27\u5f20\u200b\u5173\u7cfb\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u5b83\u4eec\u200b\u53ef\u4ee5\u200b\u5728\u200b\u591a\u200b\u5927\u7a0b\u5ea6\u200b\u4e0a\u200b\u63d0\u4f9b\u200b\u5e2e\u52a9\u200b\u3002</p> <p>\u200b\u57fa\u672c\u4e0a\u200b\uff0c\u200b\u6211\u4eec\u200b\u60f3\u8981\u200b\u7406\u89e3\u200b\u4e09\u4e2a\u200b\u6838\u5fc3\u200b\u95ee\u9898\u200b\uff1a</p> <ul> <li> <p>DeepSeekMoE \u200b\u80fd\u200b\u53d6\u5f97\u200b\u66f4\u597d\u200b\u7684\u200b\u7ed3\u679c\u200b\u5417\u200b\uff1f</p> </li> <li> <p>\u200b\u7cbe\u7ec6\u200b\u7684\u200b\u4e13\u5bb6\u200b\u7ec6\u5206\u200b\u662f\u5426\u200b\u4ee5\u53ca\u200b\u5728\u200b\u591a\u200b\u5927\u7a0b\u5ea6\u200b\u4e0a\u200b\u6709\u5229\u4e8e\u200b\u4e13\u4e1a\u5316\u200b\uff1f</p> </li> <li> <p>\u200b\u5171\u4eab\u200b\u4e13\u5bb6\u200b\u9694\u79bb\u200b\u80fd\u5426\u200b\u4ee5\u53ca\u200b\u5728\u200b\u591a\u200b\u5927\u7a0b\u5ea6\u200b\u4e0a\u200b\u51cf\u5c11\u200b\u5197\u4f59\u200b\uff1f</p> </li> </ul> <p>\u200b\u4e3a\u4e86\u200b\u7406\u89e3\u200b\u8fd9\u4e9b\u200b\u95ee\u9898\u200b\uff0c\u200b\u4f5c\u8005\u200b\u7cbe\u5fc3\u8bbe\u8ba1\u200b\u4e86\u200b\u4e00\u7cfb\u5217\u200b\u5b9e\u9a8c\u200b\uff0c\u200b\u5728\u200b\u8fd9\u91cc\u200b\u63d0\u53ca\u200b\u5b83\u4eec\u200b\u81f3\u5173\u91cd\u8981\u200b\u3002</p>"},{"location":"blog/deepseek-v3_deepseekmoe%E6%9C%BA%E5%88%B6%E6%98%AF%E4%BB%80%E4%B9%88/#deepseekmoe-\u80fd\u8fbe\u5230\u66f4\u597d\u7684\u6548\u679c\u5417","title":"DeepSeekMoE \u200b\u80fd\u200b\u8fbe\u5230\u200b\u66f4\u597d\u200b\u7684\u200b\u6548\u679c\u200b\u5417\u200b\uff1f","text":"<p>\u200b\u9996\u5148\u200b\uff0c\u200b\u4f5c\u8005\u200b\u7814\u7a76\u200b\u4e86\u200b\u4ed6\u4eec\u200b\u7684\u200b\u65b9\u6cd5\u200b\u662f\u5426\u200b\u53ef\u4ee5\u200b\u5e26\u6765\u200b\u66f4\u597d\u200b\u7684\u200b\u6574\u4f53\u200b\u6027\u80fd\u200b\u3002\u200b\u4e3a\u4e86\u200b\u9a8c\u8bc1\u200b\u8fd9\u200b\u4e00\u70b9\u200b\uff0c\u200b\u4ed6\u4eec\u200b\u8bad\u7ec3\u200b\u4e86\u200b\u4e00\u7cfb\u5217\u200b\u5177\u6709\u200b\u53ef\u6bd4\u6027\u200b\u7684\u200b \u200b\u603b\u200b\u53c2\u6570\u200b/\u200b\u88ab\u200b\u6fc0\u6d3b\u200b\u53c2\u6570\u200b \u200b\u7684\u200b\u6a21\u578b\u200b\uff0c\u200b\u5e76\u200b\u5728\u200b\u4e0d\u540c\u200b\u7684\u200b\u4efb\u52a1\u200b\u4e2d\u200b\u8bc4\u4f30\u200b\u5b83\u4eec\u200b\u3002\u200b\u4ed6\u4eec\u200b\u7684\u200b\u4e3b\u8981\u200b\u7ed3\u679c\u200b\u603b\u7ed3\u200b\u5728\u200b\u4e0b\u8868\u4e2d\u200b\uff0c\u200b\u6700\u4f73\u200b\u6307\u6807\u200b\u4ee5\u200b\u7c97\u4f53\u200b\u7a81\u51fa\u200b\u663e\u793a\u200b\u3002</p> <p></p> <p>\u200b\u51e0\u4e2a\u200b\u8981\u70b9\u200b:</p> <ul> <li> <p>\u200b\u84dd\u8272\u200b\u7a81\u51fa\u200b\u663e\u793a\u200b\u7684\u200b\u5217\u200b\u5c06\u200b\u6807\u51c6\u200b Transformer \uff08Dense\uff09 \u200b\u4e0e\u200b\u4e24\u79cd\u200b MoE \u200b\u67b6\u6784\u200b\uff08Hash Layer \u200b\u548c\u200bSwitch Transformer\uff09\u200b\u8fdb\u884c\u200b\u6bd4\u8f83\u200b\uff0c\u200b\u8868\u660e\u200b\u5728\u200b\u53ef\u6bd4\u200b\u7684\u200b\u6fc0\u6d3b\u200b\u53c2\u6570\u200b\u4e0b\u200b\uff0cMoE \u200b\u67b6\u6784\u200b\u53ef\u4ee5\u200b\u5b9e\u73b0\u200b\u660e\u663e\u200b\u66f4\u597d\u200b\u7684\u200b\u6027\u80fd\u200b\u3002</p> </li> <li> <p>\u200b\u4ee5\u200b\u7eff\u8272\u200b\u7a81\u51fa\u200b\u663e\u793a\u200b\u7684\u200b\u5217\u200b\u8fdb\u4e00\u6b65\u200b\u5c06\u200b DeepSeekMoE \u200b\u4e0e\u200b\u53e6\u200b\u4e00\u79cd\u200b MoE \u200b\u65b9\u6cd5\u200b GShard \u200b\u8fdb\u884c\u200b\u4e86\u200b\u6bd4\u8f83\u200b\uff0c\u200b\u8868\u660e\u200b\u5728\u200b\u53ef\u6bd4\u200b\u7684\u200b\u6fc0\u6d3b\u200b\u53c2\u6570\u200b\u4e0b\u200b\uff0cDeepSeekMoE \u200b\u5b9e\u73b0\u200b\u4e86\u200b\u660e\u663e\u200b\u66f4\u597d\u200b\u7684\u200b\u6027\u80fd\u200b\u3002</p> </li> </ul> <p>\u200b\u7136\u800c\u200b\uff0c\u200b\u83b7\u5f97\u200b\u66f4\u597d\u200b\u7684\u200b\u6027\u80fd\u200b\u5e76\u4e0d\u4e00\u5b9a\u200b\u610f\u5473\u7740\u200b\u5728\u200b\u4e13\u4e1a\u5316\u200b\u4e0e\u200b\u77e5\u8bc6\u200b\u5171\u4eab\u200b\u4e4b\u95f4\u200b\u505a\u51fa\u200b\u66f4\u597d\u200b\u7684\u200b\u6743\u8861\u200b\uff0c\u200b\u56e0\u6b64\u200b\u6211\u4eec\u200b\u4ecd\u7136\u200b\u9700\u8981\u200b\u5176\u4ed6\u200b\u5b9e\u9a8c\u200b\u3002</p>"},{"location":"blog/deepseek-v3_deepseekmoe%E6%9C%BA%E5%88%B6%E6%98%AF%E4%BB%80%E4%B9%88/#deepseekmoe-\u5bf9\u4e13\u4e1a\u5316\u6709\u597d\u5904\u5417","title":"DeepSeekMoE \u200b\u5bf9\u200b\u4e13\u4e1a\u5316\u200b\u6709\u200b\u597d\u5904\u200b\u5417\u200b\uff1f","text":"<p>\u200b\u76f4\u63a5\u200b\u8861\u91cf\u200b\u4e13\u5bb6\u200b\u7684\u200b\u4e13\u4e1a\u5316\u200b\u662f\u200b\u56f0\u96be\u200b\u7684\u200b\uff0c\u200b\u76f8\u53cd\u200b\uff0c\u200b\u4f5c\u8005\u200b\u4ece\u200b\u76f8\u53cd\u200b\u7684\u200b\u65b9\u5411\u200b\u8bbe\u8ba1\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u6709\u8da3\u200b\u7684\u200b\u5b9e\u9a8c\u200b\uff0c\u200b\u901a\u8fc7\u200b\u7981\u7528\u200b\u4e00\u4e9b\u200b\u6392\u540d\u200b\u9760\u200b\u524d\u200b\u7684\u200b\u4e13\u5bb6\u200b\uff0c\u200b\u770b\u770b\u200b\u4f1a\u200b\u53d1\u751f\u200b\u4ec0\u4e48\u200b\u3002</p> <p>\u200b\u76f4\u89c2\u200b\u5730\u8bf4\u200b\uff0c\u200b\u5f53\u200b\u4e13\u5bb6\u200b\u66f4\u200b\u4e13\u4e1a\u200b\u65f6\u200b\uff0c\u200b\u4ed6\u4eec\u200b\u5e94\u8be5\u200b\u66f4\u96be\u200b\u88ab\u200b\u66ff\u6362\u200b\uff0c\u200b\u56e0\u6b64\u200b\uff0c\u200b\u7981\u7528\u200b\u8def\u7531\u200b\u6392\u540d\u200b\u9760\u200b\u524d\u200b\u7684\u200b\u4e13\u5bb6\u200b\u5e94\u8be5\u200b\u5bf9\u200b\u6027\u80fd\u200b\u4ea7\u751f\u200b\u66f4\u5927\u200b\u7684\u200b\u5f71\u54cd\u200b\u3002</p> <p>\u200b\u66f4\u200b\u5177\u4f53\u5730\u8bf4\u200b\uff0c\u200b\u4ed6\u4eec\u200b\u901a\u8fc7\u200b\u5728\u200b DeepSeekMoE \u200b\u548c\u200b GShard x 1.5 \u200b\u4e2d\u200b\u7981\u7528\u200b\u9876\u7ea7\u200b\u8def\u7531\u200b\u7684\u200b\u4e13\u5bb6\u200b\u6765\u200b\u8fdb\u884c\u200b\u5b9e\u9a8c\u200b\uff0c\u200b\u540e\u8005\u200b\u4f5c\u4e3a\u200b\u57fa\u7ebf\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u8fd9\u200b\u4e24\u79cd\u200b\u65b9\u6cd5\u200b\u5728\u200b\u6ca1\u6709\u200b\u4e13\u5bb6\u200b\u7981\u7528\u200b\u65f6\u200b\u5177\u6709\u200b\u53ef\u6bd4\u200b\u7684\u200b Pile loss\uff0c\u200b\u8bf7\u200b\u53c2\u89c1\u200b\u4e0b\u56fe\u200b\u4e2d\u200b\u5bf9\u5e94\u200b\u4e8e\u200b\u6bd4\u7387\u200b 0 \u200b\u7684\u200b\u6700\u200b\u5de6\u70b9\u200b\uff1a</p> <p></p> <p>Pile: n 800GB Dataset of Diverse Text for Language Modeling.</p> <p>\u200b\u968f\u7740\u200b\u88ab\u200b\u7981\u7528\u200b\u7684\u200b\u8def\u7531\u200b\u4e13\u5bb6\u200b\u6bd4\u4f8b\u200b\u7684\u200b\u589e\u52a0\u200b\uff0cDeepSeekMoE \u200b\u59cb\u7ec8\u200b\u4ea7\u751f\u200b\u66f4\u200b\u9ad8\u200b\u7684\u200b Pile \u200b\u635f\u5931\u200b\uff0c\u200b\u8fd9\u200b\u8868\u660e\u200b DeepSeekMoE \u200b\u4e2d\u200b\u7684\u200b\u8def\u7531\u200b\u4e13\u5bb6\u200b\u66f4\u52a0\u200b\u4e13\u4e1a\u200b\uff0c\u200b\u56e0\u6b64\u200b\u66f4\u96be\u200b\u88ab\u200b\u5176\u4ed6\u4eba\u200b\u53d6\u4ee3\u200b\u3002</p>"},{"location":"blog/deepseek-v3_deepseekmoe%E6%9C%BA%E5%88%B6%E6%98%AF%E4%BB%80%E4%B9%88/#deepseekmoe-\u662f\u5426\u51cf\u5c11\u4e86\u77e5\u8bc6\u5197\u4f59","title":"DeepSeekMoE \u200b\u662f\u5426\u200b\u51cf\u5c11\u200b\u4e86\u200b\u77e5\u8bc6\u200b\u5197\u4f59\u200b\uff1f","text":"<p>\u200b\u6309\u7167\u200b\u7c7b\u4f3c\u200b\u7684\u200b\u60f3\u6cd5\u200b\uff0c\u200b\u4f5c\u8005\u200b\u8fd8\u200b\u7981\u7528\u200b\u4e86\u200b\u5171\u4eab\u200b\u4e13\u5bb6\u200b\u5e76\u200b\u6fc0\u6d3b\u200b\u4e86\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u8def\u7531\u200b\u4e13\u5bb6\u200b\uff0c\u200b\u4ee5\u200b\u67e5\u770b\u200b\u662f\u5426\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u6dfb\u52a0\u200b\u5176\u4ed6\u200b\u8def\u7531\u200b\u4e13\u5bb6\u200b\u6765\u200b\u66ff\u6362\u200b\u5171\u4eab\u200b\u4e13\u5bb6\u200b\u3002</p> <p>\u200b\u7ed3\u679c\u200b\uff0c\u200b\u4ed6\u4eec\u200b\u89c2\u5bdf\u200b\u5230\u200b\u201cPile loss\u200b\u663e\u200b\u7740\u200b\u589e\u52a0\u200b\uff0c\u200b\u4ece\u200b 1.808 \u200b\u4e0a\u5347\u200b\u5230\u200b 2.414\u201d\uff0c\u200b\u8fd9\u200b\u8bc1\u5b9e\u200b\u4e86\u200b\u5171\u4eab\u200b\u4e13\u5bb6\u200b\u83b7\u5f97\u200b\u7684\u200b\u77e5\u8bc6\u200b\u5728\u200b\u67d0\u79cd\u7a0b\u5ea6\u200b\u4e0a\u200b\u662f\u200b\u72ec\u7279\u200b\u7684\u200b\uff0c\u200b\u5e76\u4e14\u200b\u8def\u7531\u200b\u4e13\u5bb6\u200b\u6ca1\u6709\u200b\u63a5\u53d7\u200b\u8fc7\u200b\u8db3\u591f\u200b\u7684\u200b\u57f9\u8bad\u200b\u6765\u200b\u6db5\u76d6\u200b\u8fd9\u90e8\u5206\u200b\u77e5\u8bc6\u200b\u3002\u200b\u6362\u53e5\u8bdd\u8bf4\u200b\uff0c\u200b\u8def\u7531\u200b\u4e13\u5bb6\u200b\u66f4\u200b\u4e13\u4e1a\u200b\uff0c\u200b\u5197\u4f59\u200b\u66f4\u200b\u5c11\u200b\u3002</p>"},{"location":"blog/deepseek-v3_deepseekmoe%E6%9C%BA%E5%88%B6%E6%98%AF%E4%BB%80%E4%B9%88/#\u603b\u7ed3","title":"\u603b\u7ed3","text":"<p>\u200b\u5728\u200b\u672c\u6587\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u901a\u8fc7\u200b\u4ee5\u200b\u9910\u5385\u200b\u4e2d\u200b\u573a\u666f\u200b\u4e3a\u200b\u4f8b\u5b50\u200b\u6765\u200b\u89e3\u91ca\u200b DeepSeekMoE\uff0c\u200b\u8fd9\u662f\u200b DeepSeek-V2 \u200b\u548c\u200b DeepSeek-V3 \u200b\u7b49\u200b DeepSeek \u200b\u6a21\u578b\u200b\u4e2d\u200b\u91c7\u7528\u200b\u7684\u200b\u4e3b\u8981\u200b\u67b6\u6784\u200b\u521b\u65b0\u200b\u4e4b\u4e00\u200b\u3002</p> <p>\u200b\u66f4\u200b\u5177\u4f53\u5730\u8bf4\u200b\uff0c\u200b\u6211\u4eec\u200b\u4ecb\u7ecd\u200b\u4e86\u200b MoE \u200b\u7684\u200b\u4e00\u822c\u200b\u8fd0\u4f5c\u200b\u65b9\u5f0f\u200b\u3001\u200b\u5b83\u200b\u7684\u200b\u597d\u5904\u200b\u548c\u200b\u6311\u6218\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u4e13\u5bb6\u200b\u4e13\u4e1a\u5316\u200b\u4e0e\u200b\u77e5\u8bc6\u200b\u5171\u4eab\u200b\u4e4b\u95f4\u200b\u7684\u200b\u6743\u8861\u200b\u3002\u200b\u63a5\u4e0b\u6765\u200b\uff0c\u200b\u6211\u4eec\u200b\u89e3\u91ca\u200b\u4e86\u200b DeepSeekMoE \u200b\u4e2d\u200b\u7684\u200b\u4e24\u4e2a\u200b\u5173\u952e\u200b\u8981\u7d20\u200b\uff1a\u200b\u7ec6\u7c92\u5ea6\u200b\u4e13\u5bb6\u200b\u7ec6\u5206\u200b\u548c\u200b\u5171\u4eab\u200b\u4e13\u5bb6\u200b\u9694\u79bb\u200b\u3002\u200b\u6211\u4eec\u200b\u8fd8\u200b\u5728\u200b\u8bc4\u4f30\u200b\u90e8\u5206\u200b\u8ba8\u8bba\u200b\u4e86\u200b\u5b83\u200b\u7684\u200b\u6027\u80fd\u200b\u3002</p> <p>DeepSeekMoE \u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u4fc3\u8fdb\u200b\u4e13\u5bb6\u200b\u7684\u200b\u4e13\u4e1a\u5316\u200b\u6765\u200b\u83b7\u5f97\u200b\u66f4\u597d\u200b\u7684\u200b\u7ed3\u679c\u200b\uff0c\u200b\u5176\u200b\u8ba1\u7b97\u6210\u672c\u200b\u4e0e\u200b\u4e00\u822c\u200b MoE \u200b\u67b6\u6784\u200b\u76f8\u5f53\u200b\uff0c\u200b\u4ece\u800c\u200b\u63d0\u9ad8\u200b\u8ba1\u7b97\u200b\u6548\u7387\u200b\u3002</p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>DeepSeek\u200b\u5982\u4f55\u200b\u6253\u7834\u200bMoE\u200b\u4e2d\u200b\u9690\u85cf\u200b\u7684\u200b\u74f6\u9888\u200b? \u200b\u8f85\u52a9\u200b\u65e0\u635f\u200b\u8d1f\u8f7d\u200b\u5747\u8861\u200b\u7b56\u7565\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/deepseek%E5%A6%82%E4%BD%95%E6%89%93%E7%A0%B4moe%E4%B8%AD%E9%9A%90%E8%97%8F%E7%9A%84%E7%93%B6%E9%A2%88-%E8%BE%85%E5%8A%A9%E6%97%A0%E6%8D%9F%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5/","title":"DeepSeek\u200b\u5982\u4f55\u200b\u6253\u7834\u200bMoE\u200b\u4e2d\u200b\u9690\u85cf\u200b\u7684\u200b\u74f6\u9888\u200b? \u200b\u8f85\u52a9\u200b\u65e0\u635f\u200b\u8d1f\u8f7d\u200b\u5747\u8861\u200b\u7b56\u7565","text":"<p>\u200b\u8fd9\u200b\u7bc7\u6587\u7ae0\u200b\u63a2\u8ba8\u200b\u4e86\u200b DeepSeek \u200b\u6a21\u578b\u200b\u4e2d\u200b\u4e0e\u200b\u4e13\u5bb6\u200b\u6df7\u5408\u200b \uff08MoE\uff09 \u200b\u76f8\u5173\u200b\u7684\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u5173\u952e\u200b\u67b6\u6784\u200b\u7a81\u7834\u200b\uff1a\u200b\u8f85\u52a9\u200b\u65e0\u635f\u200b\u8d1f\u8f7d\u200b\u5747\u8861\u200b\u7b56\u7565\u200b\u3002\u200b\u5728\u200b\u672c\u6587\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u6df1\u5165\u63a2\u8ba8\u200b DeepSeek \u200b\u5982\u4f55\u200b\u89e3\u51b3\u200b MoE \u200b\u7684\u200b\u9690\u85cf\u200b\u74f6\u9888\u200b\u2014\u2014\u200b\u8d1f\u8f7d\u200b\u5747\u8861\u200b\u2014\u2014\u200b\u540c\u65f6\u200b\u6d88\u9664\u200b\u68af\u5ea6\u200b\u5e72\u6270\u200b\u5e76\u200b\u4fdd\u7559\u200b\u56e0\u679c\u5173\u7cfb\u200b\uff0c\u200b\u4e3a\u200b\u57fa\u4e8e\u200b\u4e13\u5bb6\u200b\u7684\u200b\u6a21\u578b\u200b\u7684\u200b\u6548\u7387\u200b\u8bbe\u5b9a\u200b\u65b0\u200b\u6807\u51c6\u200b\u3002</p>"},{"location":"blog/deepseek%E5%A6%82%E4%BD%95%E6%89%93%E7%A0%B4moe%E4%B8%AD%E9%9A%90%E8%97%8F%E7%9A%84%E7%93%B6%E9%A2%88-%E8%BE%85%E5%8A%A9%E6%97%A0%E6%8D%9F%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5/#\u80cc\u666f","title":"\u80cc\u666f","text":"<p>\u200b\u9996\u5148\u200b\u4ecb\u7ecd\u200b\u4e13\u5bb6\u200b\u6df7\u5408\u200b \uff08Mixture-of-Experts\uff0cMoE\uff09 \u200b\u7684\u200b\u57fa\u7840\u77e5\u8bc6\u200b\uff0c\u200b\u89e3\u91ca\u200b\u4e3a\u4ec0\u4e48\u200b\u8d1f\u8f7d\u5e73\u8861\u200b\u5f88\u200b\u91cd\u8981\u200b\uff0c\u200b\u5e76\u200b\u56de\u987e\u200b\u4ee5\u524d\u200b\u7684\u200b\u5de5\u4f5c\u200b\uff0c\u200b\u5305\u62ec\u200b\u8f85\u52a9\u200b\u635f\u5931\u200b\u65b9\u6cd5\u200b\uff08auxiliary loss methods\uff09\u200b\u548c\u200b\u4e13\u5bb6\u200b\u9009\u62e9\u200b\uff08Expert Choice\uff09\u3002</p>"},{"location":"blog/deepseek%E5%A6%82%E4%BD%95%E6%89%93%E7%A0%B4moe%E4%B8%AD%E9%9A%90%E8%97%8F%E7%9A%84%E7%93%B6%E9%A2%88-%E8%BE%85%E5%8A%A9%E6%97%A0%E6%8D%9F%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5/#transformers\u4e2d\u7684moe","title":"Transformers\u200b\u4e2d\u200b\u7684\u200bMoE","text":"<p>MoE \u200b\u4ee3\u8868\u200b Mixture-of-Experts\uff0c\u200b\u5728\u200b Transformer \u200b\u6a21\u578b\u200b\u7684\u200b\u4e0a\u4e0b\u6587\u200b\u4e2d\u200b\uff0c\u200b\u8fd9\u200b\u901a\u5e38\u200b\u662f\u200b\u6307\u200b\u5c06\u200b\u6bcf\u200b\u51e0\u4e2a\u200b Transformer \u200b\u5c42\u4e2d\u200b\u7684\u200b FFN \u200b\u66ff\u6362\u200b\u4e3a\u200b\u591a\u4e2a\u200b FFNs\uff0c\u200b\u6bcf\u4e2a\u200b FFN \u200b\u90fd\u200b\u5145\u5f53\u200b\u4e13\u5bb6\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u5f53\u200b\u8f93\u5165\u200bToken\u200b\u51fa\u73b0\u200b\u65f6\u200b\uff0c\u200b\u95e8\u63a7\u200b\u4f5c\u5c06\u200b\u9009\u62e9\u200b top-K \u200b\u4e13\u5bb6\u200b\uff0c\u200b\u5e76\u200b\u4ec5\u200b\u5c06\u200b\u8f93\u5165\u200bToken\u200b\u8def\u7531\u200b\u5230\u200b\u9009\u5b9a\u200b\u7684\u200b FFN\uff0c\u200b\u4ee5\u4fbf\u200b\u4ec5\u200b\u6fc0\u6d3b\u200b\u9009\u5b9a\u200b\u7684\u200b\u4e13\u5bb6\u200b\u3002</p> <p></p> <p>\u200b\u5982\u4e0b\u200b\u56fe\u200b\u6240\u793a\u200b\uff0c\u200b\u5176\u4e2d\u200b\u5de6\u4fa7\u200b\u6807\u51c6\u200b Transformer \u200b\u5c42\u4e2d\u200b\u7684\u200b FFN \u200b\u5b50\u5c42\u200b\u88ab\u200b MoE \u200b\u5c42\u200b\u53d6\u4ee3\u200b\u3002</p> <p>\u200b\u5728\u200b\u6211\u4eec\u200b\u4e4b\u524d\u200b\u7684\u200b\u9910\u5385\u200b\u7c7b\u6bd4\u200b\u7684\u200b\u4f8b\u5b50\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u89e3\u91ca\u200b\u4e86\u200b MoE \u200b\u7684\u200b\u6982\u5ff5\u200b\uff0c\u200b\u4e00\u5bb6\u200b\u63d0\u4f9b\u200b\u591a\u79cd\u200b\u7f8e\u98df\u200b\u7684\u200b\u9910\u5385\u200b\uff0c\u200b\u5176\u4e2d\u200b\u6bcf\u4f4d\u200b\u53a8\u5e08\u200b\u62c5\u4efb\u200b\u4e13\u5bb6\u200b\uff0c\u200b\u4e3b\u53a8\u200b\u62c5\u4efb\u200b\u95e8\u63a7\u200b\u4f5c\u200b\uff0c\u200b\u5c06\u200b\u6bcf\u9053\u83dc\u200b\u5206\u914d\u200b\u7ed9\u200b\u5177\u6709\u200b\u9002\u5f53\u200b\u6280\u80fd\u200b\u7684\u200b\u7279\u5b9a\u200b\u53a8\u5e08\u200b\u3002</p> <p>\u200b\u4e3a\u4e86\u200b\u786e\u4fdd\u200b\u8fd9\u6837\u200b\u7684\u200b\u7cfb\u7edf\u200b\u6709\u6548\u200b\u8fd0\u884c\u200b\uff0c\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\uff1a</p> <ul> <li> <p>\u200b\u6bcf\u4e2a\u200b\u4e13\u4e1a\u200b\u53a8\u5e08\u200b\u90fd\u200b\u5fc5\u987b\u200b\u638c\u63e1\u200b\u81ea\u5df1\u200b\u83dc\u80b4\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u6280\u80fd\u200b\uff08\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5305\u200b\u997a\u5b50\u200b\u7684\u200b\u53a8\u5e08\u200b\u5fc5\u987b\u200b\u77e5\u9053\u200b\u5982\u4f55\u200b\u5236\u4f5c\u200b\u997a\u5b50\u200b\uff09\uff0c\u200b\u540c\u65f6\u200b\u4ed6\u4eec\u200b\u53ef\u4ee5\u200b\u96c6\u4f53\u200b\u5904\u7406\u200b\u6240\u6709\u200b\u83dc\u80b4\u200b\u3002</p> </li> <li> <p>\u200b\u4e3b\u53a8\u200b\u5bf9\u200b\u6240\u6709\u200b\u4e13\u4e1a\u200b\u53a8\u5e08\u200b\u7684\u200b\u4e13\u4e1a\u77e5\u8bc6\u200b\u90fd\u200b\u6709\u200b\u5f88\u200b\u597d\u200b\u7684\u200b\u4e86\u89e3\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u6709\u6548\u200b\u5730\u200b\u5206\u914d\u200b\u8ba2\u5355\u200b\u3002</p> </li> </ul> <p>\u200b\u5728\u200b MoE \u200b\u4e2d\u200b\uff0c\u200b\u524d\u8005\u200b\u5bf9\u5e94\u200b\u4e8e\u200b\u4e13\u5bb6\u200b\u4e13\u4e1a\u5316\u200b\u4e0e\u200b\u77e5\u8bc6\u200b\u5171\u4eab\u200b\u4e4b\u95f4\u200b\u7684\u200b\u6743\u8861\u200b\uff0c\u200b\u6211\u4eec\u200b\u5728\u200b DeepSeekMoE \u200b\u4e2d\u200b\u5bf9\u6b64\u200b\u8fdb\u884c\u200b\u4e86\u200b\u8be6\u7ec6\u200b\u8ba8\u8bba\u200b\u3002\u200b\u540e\u8005\u200b\u53cd\u6620\u200b\u4e86\u200b\u8d1f\u8f7d\u200b\u5747\u8861\u200b\u7684\u200b\u91cd\u8981\u6027\u200b\uff0c\u200b\u8fd9\u662f\u200b\u672c\u6587\u200b\u7684\u200b\u4e3b\u8981\u200b\u4e3b\u9898\u200b\u3002</p> <p>\u200b\u90a3\u4e48\u200b\uff0c\u200b\u662f\u200b\u4ec0\u4e48\u200b\u8ba9\u200b\u8d1f\u8f7d\u5e73\u8861\u200b\u5982\u6b64\u200b\u91cd\u8981\u200b\u5462\u200b\uff1f</p> <p>\u200b\u539f\u56e0\u200b\u662f\u200b\u5f53\u200b\u8d1f\u8f7d\u200b\u4e0d\u200b\u5e73\u8861\u200b\u53d1\u751f\u200b\u65f6\u200b\uff0cMoE \u200b\u65e0\u6cd5\u200b\u6b63\u5e38\u200b\u8fd0\u884c\u200b\uff0c\u200b\u6700\u200b\u5e38\u89c1\u200b\u7684\u200b\u95ee\u9898\u200b\u79f0\u4e3a\u200b\u8def\u7531\u200b\u5d29\u6e83\u200b\uff08route collapse\uff09\uff0c\u200b\u5373\u200b\u53ea\u6709\u200b\u4e00\u5c0f\u90e8\u5206\u200b\u4e13\u5bb6\u200b\u6536\u5230\u200b\u5927\u90e8\u5206\u200b \u200b\u8f93\u5165\u200btoken\uff0c\u200b\u800c\u200b\u5176\u4ed6\u200b\u4e13\u5bb6\u200b\u6ca1\u6709\u200b\u5f97\u5230\u200b\u5145\u5206\u5229\u7528\u200b\u3002</p> <p>\u200b\u56e0\u6b64\u200b\uff0c\u200b\u5927\u591a\u6570\u200b\u8ba1\u7b97\u200b\u90fd\u200b\u662f\u200b\u7531\u200b\u8d85\u8d1f\u8377\u200b\u7684\u200b\u4e13\u5bb6\u200b\u8fdb\u884c\u200b\u7684\u200b\uff0c\u200b\u8fd9\u4f1a\u200b\u5bfc\u81f4\u200b\u786c\u4ef6\u200b\u5229\u7528\u7387\u200b\u51fa\u73b0\u200b\u74f6\u9888\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u4e13\u5bb6\u200b\u901a\u5e38\u200b\u5206\u5e03\u200b\u5728\u200b\u591a\u4e2a\u200b GPU \u200b\u6838\u4e0a\u200b\u3002</p> <p>\u200b\u7531\u4e8e\u200b\u68af\u5ea6\u200b\u51b2\u7a81\u200b\uff0c\u200b\u8def\u7ebf\u200b\u5d29\u6e83\u200b\u4e5f\u200b\u4f1a\u200b\u5bfc\u81f4\u200b\u8bad\u7ec3\u200b\u4e0d\u200b\u7a33\u5b9a\u200b\u3002\u200b\u7531\u4e8e\u200b\u8d85\u8f7d\u200b\u7684\u200b\u4e13\u5bb6\u200b\u4f1a\u200b\u6536\u5230\u200b\u66f4\u200b\u591a\u200b\u7684\u200b input token\uff0c\u200b\u4ed6\u4eec\u200b\u4e5f\u200b\u4f1a\u200b\u79ef\u7d2f\u200b\u66f4\u5927\u200b\u7684\u200b\u68af\u5ea6\u200b\uff0c\u200b\u5e76\u4e14\u200b\u6bd4\u4f4e\u200b\u8d1f\u8f7d\u200b\u7684\u200b\u4e13\u5bb6\u200b\u5b66\u4e60\u200b\u5f97\u200b\u66f4\u200b\u5feb\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u6765\u81ea\u200b\u8d85\u8d1f\u8377\u200b\u4e13\u5bb6\u200b\u548c\u200b\u4f4e\u200b\u8d1f\u8377\u200b\u4e13\u5bb6\u200b\u7684\u200b\u68af\u5ea6\u200b\u53ef\u80fd\u200b\u5728\u200b\u5e45\u5ea6\u200b\u548c\u200b\u65b9\u5411\u200b\u4e0a\u200b\u90fd\u200b\u6709\u6240\u4e0d\u540c\u200b\uff0c\u200b\u4ece\u800c\u200b\u4f7f\u200b\u8bad\u7ec3\u200b\u8fc7\u7a0b\u200b\u66f4\u96be\u200b\u6536\u655b\u200b\u3002</p> <p>\u200b\u6700\u540e\u200b\uff0cMoE \u200b\u4e2d\u200b\u7684\u200b\u8d1f\u8f7d\u200b\u4e0d\u200b\u5e73\u8861\u200b\u4e5f\u200b\u4f1a\u200b\u5bfc\u81f4\u200b\u6027\u80fd\u200b\u4e0d\u4f73\u200b\u548c\u200b\u6cdb\u5316\u200b\u80fd\u529b\u5dee\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u8d1f\u8f7d\u200b\u4e0d\u8db3\u200b\u7684\u200b\u4e13\u5bb6\u200b\u6ca1\u6709\u200b\u83b7\u5f97\u200b\u8db3\u591f\u200b\u7684\u200b\u8bad\u7ec3\u200btoken\u200b\u6765\u200b\u5b66\u4e60\u200b\u6709\u200b\u610f\u4e49\u200b\u7684\u200b\u77e5\u8bc6\u200b\u3002</p> <p>\u200b\u7531\u4e8e\u200b\u8d1f\u8f7d\u200b\u5747\u8861\u200b\u5728\u200b MoE \u200b\u4e2d\u200b\u975e\u5e38\u200b\u91cd\u8981\u200b\uff0c\u200b\u56e0\u6b64\u200b\u5df2\u7ecf\u200b\u63d0\u51fa\u200b\u4e86\u200b\u4e0d\u540c\u200b\u7684\u200b\u6280\u672f\u200b\u6765\u200b\u5904\u7406\u200b\u8fd9\u4e2a\u200b\u95ee\u9898\u200b\u3002\u200b\u5728\u200b\u524d\u9762\u200b\u7684\u200b\u8fd9\u4e9b\u200b\u5de5\u4f5c\u200b\u4e2d\u200b\uff0c\u200b\u6700\u200b\u5e38\u7528\u200b\u7684\u200b\u7b56\u7565\u200b\u662f\u200b\u4e3a\u200b\u4e3a\u200b\u8d1f\u8f7d\u200b\u5747\u8861\u200b\u6dfb\u52a0\u200b\u8f85\u52a9\u200b\u635f\u5931\u200b\uff08adding auxiliary loss for load -balancing\uff09\u200b\u548c\u200b\u4e13\u5bb6\u200b\u9009\u62e9\u200b\uff08Expert Choice\uff09\u3002</p>"},{"location":"blog/deepseek%E5%A6%82%E4%BD%95%E6%89%93%E7%A0%B4moe%E4%B8%AD%E9%9A%90%E8%97%8F%E7%9A%84%E7%93%B6%E9%A2%88-%E8%BE%85%E5%8A%A9%E6%97%A0%E6%8D%9F%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5/#\u5177\u6709\u8f85\u52a9\u635f\u5931\u7684\u8d1f\u8f7d\u5747\u8861","title":"\u5177\u6709\u200b\u8f85\u52a9\u200b\u635f\u5931\u200b\u7684\u200b\u8d1f\u8f7d\u200b\u5747\u8861","text":"<p>\u200b\u6539\u8fdb\u200b\u8d1f\u8f7d\u200b\u5747\u8861\u200b\u7684\u200b\u4e00\u79cd\u200b\u5e38\u89c1\u200b\u7b56\u7565\u200b\u662f\u200b\u5728\u200b\u6a21\u578b\u200b\u8bad\u7ec3\u200b\u4e2d\u200b\u7684\u200b\u539f\u59cb\u200b\u76ee\u6807\u200b\u4e4b\u4e0a\u200b\u5f15\u5165\u200b\u8f85\u52a9\u200b\u635f\u5931\u200b\u51fd\u6570\u200b\u3002</p> <p></p> <p>\u200b\u4e0a\u200b\u56fe\u200b\u663e\u793a\u200b\u4e86\u200b\u8f85\u52a9\u200b\u635f\u5931\u200b\u51fd\u6570\u200b\u7684\u200b\u793a\u4f8b\u200b\uff0c\u200b\u5176\u4e2d\u200b</p> <ul> <li> <p>N \u200b\u662f\u200b\u4e13\u5bb6\u200b\u6570\u200b\uff0cT \u200b\u662f\u200b Token \u200b\u6570\u91cf\u200b\uff0cK \u200b\u662f\u200b\u6bcf\u4e2a\u200b\u8f93\u5165\u200b Token \u200b\u7684\u200b\u5df2\u200b\u6fc0\u6d3b\u200b\u4e13\u5bb6\u200b\u6570\u200b\u3002</p> </li> <li> <p>$ s_{i\uff0c t} $ \u200b\u662f\u200b Gating \u200b\u7684\u200b\u8f93\u51fa\u200b\uff0c\u200b\u5df2\u200b\u901a\u8fc7\u200b Softmax \u200b\u6807\u51c6\u5316\u200b\u4e3a\u200b [0\uff0c 1]\uff0c\u200b\u8868\u793a\u200b\u7b2c\u200b t \u200b\u4e2a\u200btoken\u200b\u9009\u62e9\u200b\u7b2c\u200b i \u200b\u4e2a\u200b\u4e13\u5bb6\u200b\u7684\u200b\u6982\u7387\u200b\u3002\u200b\u5411\u91cf\u200b $ u_t $ \u200b\u662f\u200b\u7b2c\u200b t \u200b\u4e2a\u200b\u6807\u8bb0\u200b\u7684\u200b\u8f93\u5165\u200b\u9690\u85cf\u200b\u72b6\u6001\u200b\uff0c\u200b\u800c\u200b $ e_i $ \u200b\u662f\u200b\u7b2c\u200bi\u200b\u4e2a\u200b\u4e13\u5bb6\u200b\u7684\u200b\u8d28\u5fc3\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u770b\u4f5c\u200b\u662f\u200b\u8fc7\u53bb\u200b\u8def\u7531\u200b\u5230\u200b\u7b2c\u200b i \u200b\u4e2a\u200btoken\u200b\u7684\u200b\u5e73\u5747\u200btoken embedding\u3002\u200b\u56e0\u6b64\u200b\uff0c$ s_{i\uff0c t} $ \u200b\u8861\u91cf\u200b\u5f53\u524d\u200b\u8f93\u5165\u200b\u4e0e\u200b\u7b2c\u200b i \u200b\u4e2a\u200b\u4e13\u5bb6\u200b\u63a5\u6536\u200b\u7684\u200b\u5e73\u5747\u200b\u4ee4\u724c\u200b\u7684\u200b\u63a5\u8fd1\u200b\u7a0b\u5ea6\u200b\u3002</p> </li> <li> <p>\u200b\u56e0\u6b64\u200b\uff0c$ P_i $ \u200b\u53ef\u4ee5\u200b\u770b\u4f5c\u200b\u662f\u200b\u5728\u200b\u6574\u4e2a\u200b\u8f93\u5165\u200b\u5e8f\u5217\u200b\u4e2d\u200b\u9009\u62e9\u200b\u7b2c\u200b i \u200b\u4e2a\u200b\u4e13\u5bb6\u200b\u7684\u200b\u5e73\u5747\u200b\u6982\u7387\u200b\u3002</p> </li> <li> <p>$ f_i $ \u200b\u8868\u793a\u200b\u8def\u7531\u200b\u5230\u200b\u7b2c\u200b i \u200b\u4e2a\u200b\u4e13\u5bb6\u200b\u7684\u200btoken\u200b\u7684\u200b\u6bd4\u4f8b\u200b\u3002</p> </li> </ul> <p>\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c$ f_i $ \u200b\u662f\u200b\u4e0d\u53ef\u200b\u5fae\u5206\u200b\u7684\u200b\uff0c\u200b\u56e0\u6b64\u200b\u6700\u5c0f\u5316\u200b\u4e0a\u8ff0\u200b\u635f\u5931\u200b\u51fd\u6570\u200b\u5b9e\u9645\u4e0a\u200b\u53d8\u6210\u200b\u4e86\u200b\u6700\u5c0f\u5316\u200b $ s_{i\uff0ct}$ \u3002\u200b\u6b64\u5916\u200b\uff0c\u200b\u7531\u4e8e\u200b $ f_i $ \u200b\u53d6\u51b3\u4e8e\u200b $ s_{i\uff0c t} $\uff0c\u200b\u56e0\u6b64\u200b\u5bf9\u200b $ s_{i\uff0c t} $ \u200b\u5e94\u7528\u200b\u7684\u200b\u8c03\u6574\u200b\u4e5f\u200b\u4f1a\u200b\u5f71\u54cd\u200b $ f_i $\uff0c\u200b\u56e0\u6b64\u200b\u5206\u914d\u200b\u7ed9\u200b\u6bcf\u4e2a\u200b\u4e13\u5bb6\u200b\u7684\u200b\u8f7d\u8377\u200b\u5c06\u200b\u88ab\u200b\u8c03\u6574\u200b\u3002</p> <p>\u200b\u7136\u800c\u200b\uff0c\u200b\u7528\u200b\u8fd9\u79cd\u200b\u8f85\u52a9\u200b\u635f\u5931\u200b\u6765\u200b\u5e73\u8861\u200b\u8d1f\u8f7d\u200b\u662f\u200b\u6709\u200b\u4ee3\u4ef7\u200b\u7684\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5b83\u200b\u7684\u200b\u68af\u5ea6\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5e72\u6270\u200b\u8bed\u8a00\u200b\u5efa\u6a21\u200b\u76ee\u6807\u200b\u7684\u200b\u68af\u5ea6\u200b\uff0c\u200b\u5bfc\u81f4\u200b\u6a21\u578b\u200b\u6027\u80fd\u200b\u4e0d\u4f73\u200b\uff0c\u200b\u5c24\u5176\u200b\u662f\u200b\u5728\u200b\u8fc7\u8f7d\u200b\u7684\u200b\u4e13\u5bb6\u200b\u7684\u200b$ f_i\u200b\u548c\u200bP_i $ \u200b\u90fd\u200b\u53d8\u5f97\u200b\u975e\u5e38\u200b\u5927\u200b\u7684\u200b\u6781\u200b\u4e0d\u200b\u5e73\u8861\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u3002</p> <p>\u200b\u56e0\u6b64\u200b\uff0c\u200b\u7528\u200b\u8fd9\u79cd\u200b\u65b9\u6cd5\u200b\u5e73\u8861\u200b\u8d1f\u8f7d\u200b\u9700\u8981\u200b\u4ed4\u7ec6\u200b\u6743\u8861\u200b\u8f85\u52a9\u200b\u635f\u5931\u200b\u3002\u200b\u4e3a\u4e86\u200b\u66f4\u200b\u6e05\u695a\u200b\u5730\u200b\u770b\u5230\u200b\u8fd9\u200b\u4e00\u70b9\u200b\uff0c\u200b\u8f85\u52a9\u200b\u65e0\u635f\u200b\u8d1f\u8f7d\u200b\u5747\u8861\u200b\u7b56\u7565\u200b\u7684\u200b\u4f5c\u8005\u200b\u901a\u8fc7\u200b\u8bad\u7ec3\u200b\u5177\u6709\u200b\u4e0d\u540c\u200b alpha \u200b\u503c\u200b\u7684\u200b\u6a21\u578b\u200b\u8fdb\u884c\u200b\u4e86\u200b\u4e00\u9879\u200b\u5b9e\u9a8c\u200b\uff0c\u200b\u7ed3\u679c\u200b\u5982\u4e0b\u200b\u56fe\u200b\u6240\u793a\u200b\uff0c\u200b\u5176\u4e2d\u200b y \u200b\u8f74\u200b\u8868\u793a\u200b\u6a21\u578b\u200b\u6027\u80fd\u200b\u7684\u200b\u56f0\u60d1\u200b\u5ea6\u200b\uff08perplexity\uff09\uff0cx \u200b\u8f74\u200b\u663e\u793a\u200b MaxVio\uff0c\u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b\u8868\u793a\u200b\u8d1f\u8f7d\u200b\u4e0d\u200b\u5e73\u8861\u200b\u7a0b\u5ea6\u200b\u7684\u200b\u6307\u6807\u200b\uff0c\u200b\u5176\u4e2d\u200b\u66f4\u200b\u9ad8\u200b\u7684\u200b MaxVio \u200b\u610f\u5473\u7740\u200b\u66f4\u200b\u4e25\u91cd\u200b\u7684\u200b\u8d1f\u8f7d\u200b\u4e0d\u200b\u5e73\u8861\u200b\uff08i \u200b\u4ee3\u8868\u200b\u7b2c\u200b i \u200b\u4e2a\u200b\u4e13\u5bb6\u200b\uff09\uff1a</p> <p></p> <p></p> <p>\u200b\u5982\u4e0a\u56fe\u200b\u6240\u793a\u200b\uff0c\u200b\u5f53\u200b alpha \u200b\u592a\u5c0f\u200b \uff08alpha = 0\uff09 \u200b\u65f6\u200b\uff0cMaxVio \u200b\u4fdd\u6301\u200b\u9ad8\u6c34\u5e73\u200b\uff0c\u200b\u8fd9\u200b\u610f\u5473\u7740\u200b\u8f85\u52a9\u200b\u635f\u5931\u200b\u4e0d\u591f\u200b\u6709\u6548\u200b\uff0c\u200b\u65e0\u6cd5\u200b\u5b9e\u73b0\u200b\u8d1f\u8f7d\u200b\u5747\u8861\u200b\u76ee\u6807\u200b\u3002\u200b\u53e6\u4e00\u65b9\u9762\u200b\uff0c\u200b\u5f53\u200b alpha \u200b\u53d8\u5f97\u200b\u592a\u200b\u5927\u200b \uff08alpha = 0.01\uff09 \u200b\u65f6\u200b\uff0c\u200b\u6a21\u578b\u200b\u6700\u7ec8\u200b\u4f1a\u200b\u4ea7\u751f\u200b\u66f4\u200b\u9ad8\u200b\u7684\u200b\u56f0\u60d1\u200b\u5ea6\u200b\u3002</p> <p>\u200b\u603b\u4e4b\u200b\uff0c\u200b\u8f85\u52a9\u200b\u635f\u5931\u200b\u63a7\u5236\u200b\u8d1f\u8f7d\u5e73\u8861\u200b\u662f\u200b\u4e00\u628a\u200b\u53cc\u5203\u5251\u200b\uff0c\u200b\u5982\u679c\u200b\u4e0d\u200b\u4ed4\u7ec6\u200b\u8c03\u6574\u200b alpha\uff0c\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5bf9\u6a21\u578b\u200b\u6027\u80fd\u200b\u4ea7\u751f\u200b\u8d1f\u9762\u5f71\u54cd\u200b\u3002\u200b\u5728\u5b9e\u8df5\u4e2d\u200b\uff0c\u200b\u7531\u4e8e\u200b\u8d44\u6e90\u200b\u9650\u5236\u200b\uff0c\u200b\u5728\u200b LLM \u200b\u8bad\u7ec3\u200b\u671f\u95f4\u200b\u8c03\u6574\u200b alpha \u200b\u5177\u6709\u200b\u6311\u6218\u6027\u200b\uff0c\u200b\u8fd9\u200b\u8fdb\u4e00\u6b65\u200b\u4f7f\u200b\u4f18\u5316\u200b\u8fc7\u7a0b\u200b\u590d\u6742\u5316\u200b\u3002</p> <p>\u200b\u4e0a\u56fe\u200b\u8fd8\u200b\u5c06\u200b\u6240\u200b\u63d0\u51fa\u200b\u7684\u200b\u65e0\u635f\u200b\u65b9\u6cd5\u200b\u653e\u5728\u200b\u540c\u4e00\u4e2a\u200b Perplexity-MaxVio \u200b\u56fe\u8868\u200b\u4e0b\u200b\uff0c\u200b\u5b83\u200b\u540c\u65f6\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u4f4e\u200b perplexity \u200b\u548c\u200b\u4f4e\u200b MaxVio\uff0c\u200b\u663e\u793a\u200b\u4e86\u200b loss-free \u200b\u65b9\u6cd5\u200b\u7684\u200b\u6709\u6548\u6027\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u5728\u200b\u8fd9\u91cc\u200b\u8981\u200b\u63d0\u5230\u200b\u7684\u200b\u53e6\u200b\u4e00\u9879\u200b\u5148\u524d\u200b\u7684\u200b\u5de5\u4f5c\u200b\u662f\u200b Expert Choice\uff0c\u200b\u5b83\u200b\u901a\u8fc7\u200b\u5c06\u200b\u8def\u7531\u200b\u7b56\u7565\u200b\u4ece\u200b \u201ctoken choice\u201d \u200b\u8f6c\u53d8\u200b\u4e3a\u200b \u201cexpert choice\u201d\uff0c\u200b\u63d0\u51fa\u200b\u4e86\u200b\u4e00\u79cd\u200b\u7b80\u5355\u200b\u800c\u200b\u6709\u6548\u200b\u7684\u200b\u8d1f\u8f7d\u200b\u5747\u8861\u200b\u65b9\u6cd5\u200b\u3002</p> <p>\u200b\u66f4\u200b\u5177\u4f53\u5730\u8bf4\u200b\uff0cMoE \u200b\u8def\u7531\u200b\u4e2d\u200b\u7684\u200b\u95e8\u63a7\u200b\u5206\u6570\u200b\u901a\u5e38\u200b\u662f\u200b\u5728\u200b\u4eb2\u200b\u548c\u200b\u77e9\u9635\u200b\u4e4b\u4e0a\u200b\u4f7f\u7528\u200b Softmax \u200b\u8ba1\u7b97\u200b\u7684\u200b\uff0c\u200b\u5982\u56fe\u200b 2 \u200b\u6240\u793a\u200b\u3002\u200b\u4f20\u7edf\u200b\u7684\u200b\u8def\u7531\u200b\u65b9\u6cd5\u200b\u4ece\u200b token \u200b\u7ef4\u5ea6\u200b\u5e94\u7528\u200b Softmax \u200b\u4e3a\u200b\u6bcf\u4e2a\u200b token \u200b\u9009\u62e9\u200b\u4e13\u5bb6\u200b\uff0c\u200b\u56e0\u6b64\u200b\u8fd9\u4e9b\u200b\u65b9\u6cd5\u200b\u88ab\u200b\u79f0\u4e3a\u200b \u201ctoken choice\u201d\u3002\u200b\u95ee\u9898\u200b\u662f\u200b\uff0c\u200b\u5728\u200b\u8fd9\u6837\u200b\u7684\u200b\u673a\u5236\u200b\u4e0b\u200b\uff0c\u200b\u6211\u4eec\u200b\u65e0\u6cd5\u63a7\u5236\u200b\u6bcf\u4e2a\u200b\u4e13\u5bb6\u200b\u5c06\u200b\u6536\u5230\u200b\u591a\u5c11\u200b Token\uff0c\u200b\u8fd9\u200b\u6700\u7ec8\u200b\u4f1a\u200b\u5bfc\u81f4\u200b\u8d1f\u8f7d\u200b\u4e0d\u200b\u5e73\u8861\u200b\u95ee\u9898\u200b\u3002</p> <p>\u200b\u53e6\u4e00\u65b9\u9762\u200b\uff0c\u200b\u4e13\u5bb6\u200b\u9009\u62e9\u200b\uff0c\u200b\u901a\u8fc7\u200b\u9009\u62e9\u200b\u8def\u7531\u200b\u5230\u200b\u6bcf\u4e2a\u200b\u4e13\u5bb6\u200b\u7684\u200btoken\uff0c\u200b\u4ece\u200b\u4e13\u5bb6\u200b\u7ef4\u5ea6\u200b\u5e94\u7528\u200b Softmax\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u4e13\u5bb6\u200b\u63a5\u6536\u200b\u7684\u200btoken\u200b\u5728\u200b\u8bbe\u8ba1\u200b\u4e0a\u200b\u662f\u200b\u5b8c\u7f8e\u200b\u5e73\u8861\u200b\u7684\u200b\uff0c\u200b\u56e0\u6b64\u200b\u4e0d\u200b\u9700\u8981\u200b\u8f85\u52a9\u200b\u635f\u5931\u200b\u6765\u200b\u8fdb\u884c\u200b\u8d1f\u8f7d\u200b\u5747\u8861\u200b\u3002\u200b\u5728\u200b\u539f\u59cb\u200b\u8bba\u6587\u200b Expert Choice\u200b\u4e2d\u200b\uff0c\u200b\u8fd9\u79cd\u200b\u65b9\u6cd5\u200b\u5c55\u793a\u200b\u4e86\u200b\u66f4\u597d\u200b\u7684\u200b\u6a21\u578b\u200b\u6027\u80fd\u200b\u548c\u200b\u66f4\u200b\u5feb\u200b\u7684\u200b\u8bad\u7ec3\u200b\u901f\u5ea6\u200b\u3002</p> <p>\u200b\u7136\u800c\u200b\uff0cExpert Choice \u200b\u7684\u200b\u4e00\u4e2a\u200b\u9650\u5236\u200b\u662f\u200b\u672a\u6765\u200b\u7684\u200btoken\u200b\u6cc4\u6f0f\u200b\u95ee\u9898\u200b\uff08future token leakage issue\uff09\uff0c\u200b\u56e0\u4e3a\u200b\u6bcf\u4e2a\u200b\u4e13\u5bb6\u200b\u5728\u200b\u770b\u5230\u200b\u6240\u6709\u200btoken\u200b\u8def\u7531\u200b\u5206\u6570\u200b\u540e\u200b\u51b3\u5b9a\u200b\u5904\u7406\u200b\u54ea\u4e2a\u200btoken\uff0c\u200b\u8fd9\u200b\u8fdd\u53cd\u200b\u4e86\u200b\u56e0\u679c\u5173\u7cfb\u200b\uff0c\u200b\u5728\u200b\u6587\u672c\u200b\u751f\u6210\u200b\u548c\u200b\u673a\u5668\u7ffb\u8bd1\u200b\u7b49\u200b\u81ea\u200b\u56de\u5f52\u200b\u4efb\u52a1\u200b\u4e2d\u200b\u53ef\u80fd\u200b\u662f\u200b\u4e00\u4e2a\u200b\u4e25\u91cd\u200b\u7684\u200b\u95ee\u9898\u200b\u3002</p>"},{"location":"blog/deepseek%E5%A6%82%E4%BD%95%E6%89%93%E7%A0%B4moe%E4%B8%AD%E9%9A%90%E8%97%8F%E7%9A%84%E7%93%B6%E9%A2%88-%E8%BE%85%E5%8A%A9%E6%97%A0%E6%8D%9F%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5/#deepseek-\u7684\u8f85\u52a9\u65e0\u635f\u8d1f\u8f7d\u5747\u8861","title":"DeepSeek \u200b\u7684\u200b\u8f85\u52a9\u200b\u65e0\u635f\u200b\u8d1f\u8f7d\u200b\u5747\u8861","text":"<p>\u200b\u4e3a\u4e86\u200b\u5728\u200b\u4e0d\u200b\u5f15\u5165\u200b\u68af\u5ea6\u200b\u63a8\u7406\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u89e3\u51b3\u200b\u8d1f\u8f7d\u200b\u5747\u8861\u200b\u95ee\u9898\u200b\uff0cDeepSeek \u200b\u63d0\u51fa\u200b\u4e86\u200b\u4e00\u79cd\u200b\u79f0\u4e3a\u200b\u65e0\u635f\u200b\u5e73\u8861\u200b\uff08Loss-Free Balancing\uff09\u200b\u7684\u200b\u65b0\u200b\u6280\u672f\u200b\uff0c\u200b\u901a\u8fc7\u200b\u76f4\u63a5\u200b\u8c03\u6574\u200b\u95e8\u63a7\u200b\u5206\u6570\u200b $ s_{i\uff0ct} $\u3002</p> <p>\u200b\u6b63\u5982\u200b\u6211\u4eec\u200b\u4e4b\u524d\u200b\u63d0\u5230\u200b\u7684\u200b\uff0c\u200b\u5f53\u200b\u6211\u4eec\u200b\u6700\u5c0f\u5316\u200b\u56fe\u200b 2 \u200b\u4e2d\u200b\u6240\u793a\u200b\u7684\u200b\u8f85\u52a9\u200b\u635f\u5931\u200b(auxiliary loss)\u200b\u65f6\u200b\uff0c\u200b\u6700\u7ec8\u200b\u901a\u8fc7\u200b\u8c03\u6574\u200b $ s_{i\uff0c t} $ \u200b\u6765\u200b\u6700\u5c0f\u5316\u200b $ P_i $\u3002</p> <p>\u200b\u56e0\u6b64\u200b\uff0c\u200b\u5982\u679c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u76f4\u63a5\u200b\u8c03\u6574\u200b $ s_{i\uff0c t} $\uff0c\u200b\u7406\u8bba\u200b\u4e0a\u200b\u6211\u4eec\u200b\u5e94\u8be5\u200b\u80fd\u591f\u200b\u8fbe\u5230\u200b\u4e0e\u200b\u5e94\u7528\u200b\u8f85\u52a9\u200b\u635f\u5931\u200b(auxiliary loss)\u200b\u7c7b\u4f3c\u200b\u7684\u200b\u6548\u679c\u200b\u3002</p> <p>\u200b\u4e3a\u6b64\u200b\uff0c\u200b\u5c06\u200b\u4e13\u5bb6\u7ea7\u200b\u504f\u5dee\u200b\u6dfb\u52a0\u200b\u5230\u200b\u6bcf\u4e2a\u200b\u4e13\u5bb6\u200b\u7684\u200b\u95e8\u63a7\u200b\u5206\u6570\u200b\u4e2d\u200b\uff0c\u200b\u5982\u4e0b\u200b\u56fe\u200b\u6240\u793a\u200b\u3002\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0cb_i \u200b\u4e0d\u200b**\u200b\u7528\u4e8e\u200b\u6700\u7ec8\u200b\u7684\u200b\u95e8\u63a7\u200b\u5206\u6570\u200b\uff08\u200b\u6b63\u5982\u200b\u6211\u4eec\u200b\u7a0d\u540e\u200b\u5c06\u200b\u770b\u5230\u200b\u7684\u200b\uff0c\u200b\u8fd9\u79cd\u200b\u504f\u5dee\u200b\u4e5f\u200b\u662f\u200b\u4e0d\u53ef\u200b\u5fae\u5206\u200b\u7684\u200b\uff09\uff0c\u200b\u4f46\u200b\u5b83\u200b\u5728\u200b TopK \u200b\u4e2d\u200b\u7528\u4e8e\u200b\u9009\u62e9\u200b\u4e13\u5bb6\u200b\uff1a</p> <p></p> <p>\u200b\u4e0a\u8ff0\u200b\u504f\u5dee\u200b $ b_i $ \u200b\u7684\u200b\u8ba1\u7b97\u200b\u65b9\u5f0f\u200b\u975e\u5e38\u200b\u76f4\u89c2\u200b\uff0c\u200b\u5982\u4e0b\u200b\u56fe\u200b\u6240\u793a\u200b\uff1a\u200b\u6211\u4eec\u200b\u9996\u5148\u200b\u5f97\u5230\u200b\u5206\u914d\u200b\u7ed9\u200b\u6bcf\u4e2a\u200b\u4e13\u5bb6\u200b\u7684\u200b\u5e73\u5747\u200b Token \u200b\u6570\u91cf\u200b\u548c\u200b\u4ed6\u4eec\u200b\u7684\u200b\u5e73\u5747\u503c\u200b\uff0c\u200b\u7136\u540e\u200b\u5f97\u5230\u200b\u6bcf\u4e2a\u200b\u4e13\u5bb6\u200b\u5206\u914d\u200b\u7684\u200b Token \u200b\u4e0e\u200b\u5e73\u5747\u503c\u200b\u7684\u200b\u5dee\u503c\u200b\uff0c\u200b\u504f\u5dee\u200b\u662f\u200b\u7531\u200b\u8fd9\u4e2a\u200b\u5dee\u503c\u200b\uff08\u200b\u6216\u200b\u8bef\u5dee\u200b\uff09\u200b\u7684\u200b\u7b26\u53f7\u200b\u4e58\u4ee5\u200b\u56fa\u5b9a\u200b\u7684\u200b\u66f4\u65b0\u200b\u7387\u200b**\u200b\u6765\u200b\u786e\u5b9a\u200b\u7684\u200b\uff0c \u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b\u53ef\u200b\u4f18\u5316\u200b\u7684\u200b\u8d85\u200b\u53c2\u6570\u200b\u3002\u200b\u5728\u200b\u540e\u9762\u200b\u7684\u200b\u7ae0\u8282\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u770b\u5230\u200b\u66f4\u200b\u591a\u200b\u5173\u4e8e\u200b\u8fd9\u4e2a\u200b\u8d85\u200b\u53c2\u6570\u200b\u5f71\u54cd\u200b\u7684\u200b\u5b9e\u9a8c\u200b\u3002</p> <p></p> <p>\u200b\u73b0\u5728\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u5728\u200b\u4e0b\u8868\u4e2d\u200b\u603b\u7ed3\u200b\u4e0d\u540c\u200b\u8d1f\u8f7d\u200b\u5747\u8861\u200b\u65b9\u6cd5\u200b\u7684\u200b\u4f18\u52bf\u200b\u548c\u200b\u5c40\u9650\u6027\u200b\uff1a</p> <p></p> <p>\u200b\u6211\u4eec\u200b\u5728\u200b\u56fe\u200b 3 \u200b\u4e2d\u200b\u770b\u5230\u200b\uff0c\u200b\u6240\u200b\u63d0\u51fa\u200b\u7684\u200b\u65b9\u6cd5\u200b\u5728\u200b\u6a21\u578b\u200b\u6027\u80fd\u200b\u548c\u200b\u8d1f\u8f7d\u200b\u5747\u8861\u200b\u65b9\u9762\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u66f4\u597d\u200b\u7684\u200b\u6743\u8861\u200b\uff0c\u200b\u4f46\u200b\u4ecd\u200b\u6709\u200b\u8bb8\u591a\u200b\u65b9\u9762\u200b\u9700\u8981\u200b\u68c0\u67e5\u200b\u3002\u200b\u5728\u200b\u4e0b\u200b\u4e00\u8282\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u4ed4\u7ec6\u200b\u7814\u7a76\u200b\u5b9e\u9a8c\u200b\u7ed3\u679c\u200b\u3002</p>"},{"location":"blog/deepseek%E5%A6%82%E4%BD%95%E6%89%93%E7%A0%B4moe%E4%B8%AD%E9%9A%90%E8%97%8F%E7%9A%84%E7%93%B6%E9%A2%88-%E8%BE%85%E5%8A%A9%E6%97%A0%E6%8D%9F%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5/#\u8bc4\u4f30","title":"\u8bc4\u4f30","text":"<p>\u200b\u57fa\u672c\u4e0a\u200b\uff0c\u200b\u6709\u200b\u4e09\u4e2a\u200b\u91cd\u8981\u200b\u95ee\u9898\u200b\u9700\u8981\u200b\u56de\u7b54\u200b\uff1a</p> <ul> <li> <p>\u200b\u6240\u200b\u63d0\u51fa\u200b\u7684\u200b\u65b9\u6cd5\u200b\u80fd\u5426\u200b\u5728\u200b\u6027\u80fd\u200b\u548c\u200b\u8d1f\u8f7d\u200b\u5747\u8861\u200b\u4e4b\u95f4\u200b\u5b9e\u73b0\u200b\u66f4\u597d\u200b\u7684\u200b\u6743\u8861\u200b\uff1f</p> </li> <li> <p>\u200b\u56fe\u200b 5 \u200b\u4e2d\u200b\u7684\u200b\u66f4\u65b0\u200b\u7387\u200b u \u200b\u6709\u200b\u4ec0\u4e48\u200b\u5f71\u54cd\u200b\uff1f</p> </li> <li> <p>\u200b\u6211\u4eec\u200b\u80fd\u5426\u200b\u8fdb\u4e00\u6b65\u200b\u4f18\u5316\u200b\u504f\u5dee\u200b\u66f4\u65b0\u200b\u89c4\u5219\u200b\uff08\u200b\u9274\u4e8e\u200b\u5b83\u200b\u5982\u6b64\u200b\u7b80\u5355\u200b\uff09\uff1f</p> </li> </ul>"},{"location":"blog/deepseek%E5%A6%82%E4%BD%95%E6%89%93%E7%A0%B4moe%E4%B8%AD%E9%9A%90%E8%97%8F%E7%9A%84%E7%93%B6%E9%A2%88-%E8%BE%85%E5%8A%A9%E6%97%A0%E6%8D%9F%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5/#\u6027\u80fd\u4e0e\u8d1f\u8f7d\u5747\u8861","title":"\u6027\u80fd\u200b\u4e0e\u200b\u8d1f\u8f7d\u200b\u5747\u8861","text":"<p>\u200b\u4e3a\u4e86\u200b\u56de\u7b54\u200b\u7b2c\u4e00\u4e2a\u200b\u95ee\u9898\u200b\uff0c\u200b\u4f5c\u8005\u200b\u5728\u200b 1B \u200b\u548c\u200b 3B \u200b\u6a21\u578b\u200b\u4e0a\u200b\u8fdb\u884c\u200b\u4e86\u200b\u5b9e\u9a8c\u200b\uff0c\u200b\u4ee5\u200b\u6bd4\u8f83\u200b\u635f\u5931\u200b\u63a7\u5236\u200b\uff08loss-controlled\uff09\u200b\u548c\u200b\u65e0\u635f\u200b\u8d1f\u8f7d\u200b\u5747\u8861\u200b\uff08loss-free load balancing\uff09\u200b\u7684\u200b Perplexity \u200b\u548c\u200b MaxVio\uff0c\u200b\u7ed3\u679c\u200b\u5982\u4e0b\u200b\u56fe\u200b\u6240\u793a\u200b\uff1a</p> <p></p> <p>\u200b\u4e0a\u9762\u200b\u7684\u200b\u7ed3\u679c\u200b\u7c7b\u4f3c\u200b\u4e8e\u200b\u6211\u4eec\u200b\u5728\u200b\u56fe\u200b 3 \u200b\u4e2d\u200b\u770b\u5230\u200b\u7684\u200b\u7ed3\u679c\u200b\uff0c\u200b\u6240\u200b\u63d0\u51fa\u200b\u7684\u200b\u65b9\u6cd5\u200b\u540c\u65f6\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u8f83\u200b\u4f4e\u200b\u7684\u200b Perplexity \u200b\u548c\u200b\u8f83\u200b\u4f4e\u200b\u7684\u200b MaxVio\u3002</p> <p>\u200b\u9664\u4e86\u200b\u8bc4\u4f30\u200b\u6700\u7ec8\u200b\u7684\u200b\u68c0\u67e5\u70b9\u200b\u5916\u200b\uff0c\u200b\u4f5c\u8005\u200b\u8fd8\u200b\u5c55\u793a\u200b\u4e86\u200b\u8bad\u7ec3\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u7684\u200b MaxVio \u200b\u66f2\u7ebf\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u66f4\u597d\u200b\u5730\u200b\u4e86\u89e3\u200b\u6240\u200b\u63d0\u51fa\u200b\u7684\u200b\u65b9\u6cd5\u200b\u5728\u200b\u6574\u4e2a\u200b\u8bad\u7ec3\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u7684\u200b\u8868\u73b0\u200b\uff0c\u200b\u5982\u4e0b\u200b\u56fe\u200b\u6240\u793a\u200b\uff1a</p> <p></p> <p>\u200b\u5982\u4e0a\u56fe\u200b\u6240\u793a\u200b\uff0c\u200b\u5728\u200b 1B \u200b\u548c\u200b 3B \u200b\u8bbe\u7f6e\u200b\u4e2d\u200b\uff0c\u200b\u65e0\u635f\u200b\u65b9\u6cd5\u200b\u5728\u200b\u8bad\u7ec3\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u90fd\u200b\u8868\u73b0\u200b\u51fa\u200b\u66f4\u597d\u200b\u7684\u200b\u8d1f\u8f7d\u200b\u5747\u8861\u200b\u80fd\u529b\u200b\uff0c\u200b\u663e\u793a\u200b\u4e86\u200b\u8be5\u200b\u65b9\u6cd5\u200b\u7684\u200b\u7a33\u5b9a\u6027\u200b\u3002</p>"},{"location":"blog/deepseek%E5%A6%82%E4%BD%95%E6%89%93%E7%A0%B4moe%E4%B8%AD%E9%9A%90%E8%97%8F%E7%9A%84%E7%93%B6%E9%A2%88-%E8%BE%85%E5%8A%A9%E6%97%A0%E6%8D%9F%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5/#\u8d85\u53c2\u6570-update-rate-\u7684\u5f71\u54cd","title":"\u8d85\u200b\u53c2\u6570\u200b \uff08Update Rate\uff09 \u200b\u7684\u200b\u5f71\u54cd","text":"<p>\u200b\u5982\u56fe\u200b 5 \u200b\u6240\u793a\u200b\uff0c\u200b\u6240\u200b\u63d0\u51fa\u200b\u7684\u200b\u65b9\u6cd5\u200b\u5f15\u5165\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u8d85\u200b\u53c2\u6570\u200b u\uff0c\u200b\u79f0\u4e3a\u200b\u66f4\u65b0\u200b\u7387\u200b\uff0c\u200b\u56e0\u6b64\u200b\u4e00\u4e2a\u200b\u81ea\u7136\u800c\u7136\u200b\u7684\u200b\u95ee\u9898\u200b\u662f\u200b\u8fd9\u4e2a\u200b\u8d85\u200b\u53c2\u6570\u200b\u5c06\u200b\u5982\u4f55\u200b\u5f71\u54cd\u200b\u65e0\u635f\u200b\u65b9\u6cd5\u200b\u7684\u200b\u6709\u6548\u6027\u200b\u3002\u200b\u66f4\u200b\u5177\u4f53\u5730\u8bf4\u200b\uff0c\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u4e86\u89e3\u200b\u65e0\u635f\u200b\u65b9\u6cd5\u200b\u5bf9\u200b u \u200b\u7684\u200b\u503c\u200b\u662f\u200b\u654f\u611f\u200b\u8fd8\u662f\u200b\u7a33\u5065\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u9009\u62e9\u200b\u4e00\u4e2a\u200b\u503c\u4ee5\u200b\u6700\u597d\u200b\u5730\u200b\u5229\u7528\u200b\u6240\u200b\u63d0\u51fa\u200b\u7684\u200b\u65b9\u6cd5\u200b\u3002</p> <p>\u200b\u5982\u524d\u6240\u8ff0\u200b\uff0c\u200b\u5728\u200b\u95e8\u63a7\u200b\u5206\u6570\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u504f\u5dee\u200b\u9879\u200b\u5728\u200b\u6982\u5ff5\u200b\u4e0a\u200b\u7c7b\u4f3c\u200b\u4e8e\u200b\u5bf9\u200b\u95e8\u63a7\u200b\u5206\u6570\u200b\u5e94\u7528\u200b\u76f4\u63a5\u200b\u68af\u5ea6\u200b\u66f4\u65b0\u200b\uff0c\u200b\u800c\u200b\u4e0d\u200b\u4f9d\u8d56\u4e8e\u200b\u901a\u8fc7\u200b\u635f\u5931\u200b\u51fd\u6570\u200b\u7684\u200b\u53cd\u5411\u200b\u4f20\u64ad\u200b\u3002\u200b\u5728\u200b\u8fd9\u79cd\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u66f4\u65b0\u200b\u901f\u7387\u200b u \u200b\u4e0e\u200b\u68af\u5ea6\u200b\u66f4\u65b0\u200b\u4e2d\u200b\u7684\u200b\u6b65\u957f\u200b\u5177\u6709\u200b\u7c7b\u4f3c\u200b\u7684\u200b\u4f5c\u7528\u200b\u3002\u200b\u4ece\u200b\u8fd9\u4e2a\u200b\u89d2\u5ea6\u200b\u6765\u770b\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u9884\u671f\u200b\u7c7b\u4f3c\u200b\u7684\u200b\u5f71\u54cd\u200b\uff1a\u200b\u8f83\u200b\u5c0f\u200b\u7684\u200b\u66f4\u65b0\u200b\u901f\u7387\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5bfc\u81f4\u200b\u6536\u655b\u200b\u7f13\u6162\u200b\uff0c\u200b\u800c\u200b\u8fc7\u200b\u5927\u200b\u7684\u200b\u66f4\u65b0\u200b\u901f\u7387\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5bfc\u81f4\u200b\u4e0d\u200b\u7a33\u5b9a\u200b\u548c\u200b\u6ce2\u52a8\u200b\u3002</p> <p>\u200b\u5728\u200b\u539f\u59cb\u200b\u8bba\u6587\u200b\u4e2d\u200b\uff0c\u200b\u4f5c\u8005\u200b\u4ee5\u200b 1e-4 \u200b\u5230\u200b 1e-2 \u200b\u7684\u200b\u4e0d\u540c\u200b\u66f4\u65b0\u200b\u901f\u7387\u200b\u8fdb\u884c\u200b\u4e86\u200b\u5b9e\u9a8c\u200b\uff0c\u200b\u7ed3\u679c\u200b\u5982\u4e0b\u200b\u56fe\u200b\u6240\u793a\u200b\uff1a</p> <p></p> <p>\u200b\u6b63\u5982\u200b\u6211\u4eec\u200b\u6240\u200b\u9884\u671f\u200b\u7684\u200b\u90a3\u6837\u200b\uff0c\u200b\u5f53\u200b\u60a8\u200b\u592a\u200b\u5c0f\u65f6\u200b\uff08\u200b\u5728\u200b\u672c\u4f8b\u200b\u4e2d\u4e3a\u200b 1e-4\uff09\uff0cMaxVio \u200b\u4e0b\u964d\u200b\u901f\u5ea6\u200b\u4f1a\u200b\u53d8\u6162\u200b\uff0c\u200b\u4f46\u200b\u8fc7\u200b\u5927\u200b\u7684\u200b u \u200b\u4e5f\u200b\u4f1a\u200b\u4ea7\u751f\u200b\u8d1f\u9762\u5f71\u54cd\u200b\uff0c\u200b\u7531\u4e8e\u200b\u6ce2\u52a8\u200b\u8f83\u5927\u200b\uff0c\u200b\u5bfc\u81f4\u200b\u6574\u4e2a\u200b\u8bad\u7ec3\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u7684\u200b MaxVio \u200b\u66f4\u9ad8\u200b\u3002</p>"},{"location":"blog/deepseek%E5%A6%82%E4%BD%95%E6%89%93%E7%A0%B4moe%E4%B8%AD%E9%9A%90%E8%97%8F%E7%9A%84%E7%93%B6%E9%A2%88-%E8%BE%85%E5%8A%A9%E6%97%A0%E6%8D%9F%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5/#\u5176\u5b83\u504f\u5dee\u66f4\u65b0\u89c4\u5219","title":"\u5176\u5b83\u200b\u504f\u5dee\u200b\u66f4\u65b0\u200b\u89c4\u5219","text":"<p>\u200b\u4e3a\u4e86\u200b\u56de\u7b54\u200b\u7b2c\u4e09\u4e2a\u200b\u95ee\u9898\u200b\uff0c\u200b\u4f5c\u8005\u200b\u5c1d\u8bd5\u200b\u4e86\u200b\u51e0\u79cd\u200b\u66ff\u4ee3\u200b\u7b56\u7565\u200b\uff0c\u200b\u5e76\u200b\u5c06\u200b\u5b83\u4eec\u200b\u4e0e\u200b\u5efa\u8bae\u200b\u7684\u200b\u7248\u672c\u200b\u8fdb\u884c\u200b\u4e86\u200b\u6bd4\u8f83\u200b\uff1a</p> <ul> <li> <p>\u200b\u53d8\u4f53\u200b 1\uff1a\u200b\u4f7f\u7528\u200b $ e_i $ \u200b\u7684\u200b\u503c\u200b\u8ba1\u7b97\u200b\u504f\u5dee\u200b\uff0c\u200b\u800c\u200b\u4e0d\u4ec5\u4ec5\u200b\u662f\u200b\u5176\u200b\u7b26\u53f7\u200b\uff0c\u200b\u5373\u200b\u4ece\u200b $ b_i = b_i +u\u2217sign**\uff08e_i\uff09$ \u200b\u5230\u200b $ b_i = b_i +u\u2217e_i $\u3002</p> </li> <li> <p>\u200b\u53d8\u4f53\u200b 2\uff1a\u200b\u4f7f\u7528\u200b\u4e58\u6cd5\u200b\u504f\u5dee\u200b\u800c\u200b\u4e0d\u662f\u200b\u52a0\u6cd5\u200b\u504f\u5dee\u200b\u3002</p> </li> </ul> <p>\u200b\u5176\u4e2d\u200b\u53d8\u4f53\u200b 2 \u200b\u53ef\u4ee5\u200b\u66f4\u200b\u6b63\u5f0f\u200b\u5730\u200b\u63cf\u8ff0\u200b\u5982\u4e0b\u200b\uff1a</p> <p></p> <p>\u200b\u6b63\u5982\u200b\u4ed6\u4eec\u200b\u7684\u200b\u5b9e\u9a8c\u6240\u200b\u793a\u200b\uff0c\u200b\u53d8\u4f53\u200b 1 \u200b\u4f1a\u200b\u5bfc\u81f4\u200b\u8d1f\u8f7d\u200b\u5747\u8861\u200b\u7565\u200b\u597d\u200b\uff0c\u200b\u4f46\u200b\u5e76\u200b\u6ca1\u6709\u200b\u63d0\u9ad8\u200b\u6a21\u578b\u200b\u6027\u80fd\u200b\uff1a</p> <p></p> <p>\u200b\u53d8\u4f53\u200b 2 \u200b\u751a\u81f3\u200b\u663e\u793a\u200b\u51fa\u7565\u200b\u5dee\u200b\u7684\u200b\u6a21\u578b\u200b\u6027\u80fd\u200b\uff1a</p> <p></p> <p>\u200b\u4ee5\u4e0a\u200b\u6240\u6709\u200b\u7ed3\u679c\u8868\u660e\u200b\uff0c\u200b\u6700\u200b\u7b80\u5355\u200b\u7684\u200b\u7b56\u7565\u200b\u88ab\u200b\u8bc1\u660e\u200b\u662f\u200b\u6700\u597d\u200b\u7684\u200b\u3002</p>"},{"location":"blog/deepseek%E5%A6%82%E4%BD%95%E6%89%93%E7%A0%B4moe%E4%B8%AD%E9%9A%90%E8%97%8F%E7%9A%84%E7%93%B6%E9%A2%88-%E8%BE%85%E5%8A%A9%E6%97%A0%E6%8D%9F%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5/#\u603b\u7ed3","title":"\u603b\u7ed3","text":"<p>\u200b\u5728\u200b\u672c\u6587\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u89e3\u91ca\u200b\u4e86\u200b DeepSeekMoE \u200b\u4e2d\u200b\u4f7f\u7528\u200b\u7684\u200b\u8f85\u52a9\u200b\u65e0\u635f\u200b\u8d1f\u8f7d\u200b\u5747\u8861\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u8fd9\u662f\u200b DeepSeek \u200b\u6a21\u578b\u200b\u4e2d\u200b\u91c7\u7528\u200b\u7684\u200b\u4e3b\u8981\u200b\u67b6\u6784\u200b\u521b\u65b0\u200b\u4e4b\u4e00\u200b\u3002</p> <p>\u200b\u66f4\u200b\u5177\u4f53\u5730\u8bf4\u200b\uff0c\u200b\u6211\u4eec\u200b\u9996\u5148\u200b\u4ecb\u7ecd\u200b\u4e86\u200b Mixture-of-Expert \uff08MoE\uff09 \u200b\u7684\u200b\u57fa\u672c\u539f\u7406\u200b\uff0c\u200b\u5f3a\u8c03\u200b\u4e86\u200b\u8d1f\u8f7d\u200b\u5747\u8861\u200b\u7684\u200b\u91cd\u8981\u6027\u200b\uff0c\u200b\u5e76\u200b\u56de\u987e\u200b\u4e86\u200b\u4ee5\u524d\u200b\u7684\u200b\u89e3\u51b3\u65b9\u6848\u200b\uff0c\u200b\u5305\u62ec\u200b\u8f85\u52a9\u200b\u635f\u5931\u200b\u65b9\u6cd5\u200b\u548c\u200b Expert Choice\u3002\u200b\u7136\u540e\u200b\uff0c\u200b\u6211\u4eec\u200b\u89e3\u91ca\u200b\u4e86\u200b DeepSeek \u200b\u7684\u200b\u65e0\u635f\u200b\u8d1f\u8f7d\u200b\u5747\u8861\u200b\u65b9\u6cd5\u200b\u53ca\u5176\u200b\u6027\u80fd\u200b\u3002</p> <p>\uff08\u200b\u6587\u7ae0\u200b\u8bd1\u81ea\u200bdeepseek-v3-explained-3-auxiliary-loss-free-load-balancing\uff09</p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>DeepSeek-V3_DeepSeekMoE\u200b\u673a\u5236\u200b\u662f\u200b\u4ec0\u4e48\u200b\uff1f</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/gpu%E7%9A%84pin_memory%E6%98%AF%E4%BB%80%E4%B9%88/","title":"GPU\u200b\u7684\u200bpin_memory\u200b\u662f\u200b\u4ec0\u4e48\u200b\uff1f","text":""},{"location":"blog/gpu%E7%9A%84pin_memory%E6%98%AF%E4%BB%80%E4%B9%88/#gpu\u7684pin_memory","title":"gpu\u200b\u7684\u200bpin_memory","text":"<p>pin_memory\u200b\u5c31\u662f\u200b\u5728\u200bRAM\u200b\u4e0a\u200b\u56fa\u5b9a\u200b\u4e86\u200b\u4e00\u5757\u200b\u5185\u5b58\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u5185\u5b58\u200b\u8303\u56f4\u200b\u662f\u200b\u88ab\u200b\u9501\u4f4f\u200b\u7684\u200b\u3002pin\u200b\u8fd9\u4e2a\u200b\u5355\u8bcd\u200b\u5f88\u200b\u5f62\u8c61\u200b\uff0c\u200b\u5f88\u200b\u50cf\u200brust\u200b\u4e2d\u200bpin\u200b\u542b\u4e49\u200b\uff0c\u200b\u7528\u200b\u9489\u5b50\u200b\u628a\u200b\u9489\u4f4f\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u5185\u5b58\u200b\u5c31\u200b\u4e0d\u4f1a\u200b\u91ca\u653e\u200b\uff0c\u200b\u662f\u200b\u5b89\u5168\u200b\u7684\u200b\u610f\u601d\u200b\u3002GPU\u200b\u5728\u200b\u4f20\u9012\u6570\u636e\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u7528\u200bDMA\u200b\u7684\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u9ad8\u6548\u200b\u4f20\u8f93\u6570\u636e\u200b\u3002\u200b\u5426\u5219\u200b\uff0c\u200b\u666e\u901a\u200b\u7684\u200bcpu_memory\uff0c\u200b\u5c31\u200b\u4f1a\u200bswap\u200b\u6389\u200b\uff0c\u200b\u7136\u540e\u200b\u8bbf\u95ee\u200b\u7684\u200b\u65f6\u5019\u200b\u7f3a\u9875\u200b\u4e2d\u65ad\u200b\uff0c\u200b\u8fd9\u6837\u200b\u901f\u5ea6\u200b\u80af\u5b9a\u200b\u5c31\u200b\u6162\u200b\u4e86\u200b\u5f88\u591a\u200b\u3002</p> <p>CUDA Driver checks, if the memory range is locked or not and then it will use a different codepath. Locked memory is stored in the physical memory (RAM), so device can fetch it w/o help from CPU (DMA, aka Async copy; device only need list of physical pages). Not-locked memory can generate a page fault on access, and it is stored not only in memory (e.g. it can be in swap), so driver need to access every page of non-locked memory, copy it into pinned buffer and pass it to DMA (Syncronious, page-by-page copy).</p> <p>\u200b\u53c2\u8003\u200b\uff1awhy-is-cuda-pinned-memory-so-fast</p>"},{"location":"blog/gpu%E7%9A%84pin_memory%E6%98%AF%E4%BB%80%E4%B9%88/#\u63a8\u7406\u5e93\u4e2d\u7684\u4f7f\u7528","title":"\u63a8\u7406\u200b\u5e93\u4e2d\u200b\u7684\u200b\u4f7f\u7528","text":""},{"location":"blog/gpu%E7%9A%84pin_memory%E6%98%AF%E4%BB%80%E4%B9%88/#vllm\u4e2d\u76f8\u5173code","title":"vllm\u200b\u4e2d\u200b\u76f8\u5173\u200bcode","text":"<p>\u200b\u5728\u200bvllm\u200b\u4e2d\u200b\u5c31\u200b\u6709\u200b\u6839\u636e\u200bGPU\u200b\u5e73\u53f0\u200b\u548c\u200b\u73af\u5883\u200b\u7684\u200b\u4e0d\u540c\u200b\uff0c\u200b\u5224\u65ad\u200bpin_memory\u200b\u662f\u5426\u200b\u53ef\u7528\u200b\u3002 \u200b\u6bd4\u5982\u200b\uff1aPinning memory in WSL is not supported. </p>Python<pre><code>@lru_cache(maxsize=None)\ndef is_pin_memory_available() -&gt; bool:\n\n    if in_wsl():\n        # Pinning memory in WSL is not supported.\n        # https://docs.nvidia.com/cuda/wsl-user-guide/index.html#known-limitations-for-linux-cuda-applications\n        print_warning_once(\"Using 'pin_memory=False' as WSL is detected. \"\n                           \"This may slow down the performance.\")\n        return False\n    elif current_platform.is_xpu():\n        print_warning_once(\"Pin memory is not supported on XPU.\")\n        return False\n    elif current_platform.is_neuron():\n        print_warning_once(\"Pin memory is not supported on Neuron.\")\n        return False\n    elif current_platform.is_hpu():\n        print_warning_once(\"Pin memory is not supported on HPU.\")\n        return False\n    elif current_platform.is_cpu() or current_platform.is_openvino():\n        return False\n    return True\n</code></pre><p></p> <p>https://github.com/vllm-project/vllm/issues/188</p>"},{"location":"blog/gpu%E7%9A%84pin_memory%E6%98%AF%E4%BB%80%E4%B9%88/#\u5728lmdeploy\u4f7f\u7528","title":"\u5728\u200blmdeploy\u200b\u4f7f\u7528\u200b\ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350","text":"<p>\u200b\u5728\u200blmdeploy\u200b\u4e2d\u200b\uff0c\u200b\u540c\u6837\u200b\u6709\u200b\u5173\u4e8e\u200bpin_memory\u200b\u7684\u200b\u5224\u65ad\u200b\u3002 </p>Text Only<pre><code>lmdeploy-0.6.1.2/lmdeploy/pytorch/engine/cache_engine.py\n</code></pre><p></p> <ul> <li>VLLM\u200b\u63a8\u7406\u200b\u6846\u67b6\u200b\u4e2d\u200b\u7684\u200bsleep_mode\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b</li> <li>C++\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bFP16\uff08IEEE754-2008\uff09\u200b\u7c7b\u578b\u200b\uff1f</li> <li>c++\u200b\u4ece\u200b\u4e00\u6b21\u200b\u9759\u6001\u200b\u5e93\u200b\u94fe\u63a5\u200b\u5f15\u53d1\u200b\u7684\u200bdouble free\u200b\u804a\u8d77\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/llm%E4%B8%ADagents%E5%AE%9E%E7%8E%B0%E8%B0%83%E7%A0%94/","title":"LLM\u200b\u4e2d\u200bAgents\u200b\u5b9e\u73b0\u200b\u8c03\u7814","text":""},{"location":"blog/llm%E4%B8%ADagents%E5%AE%9E%E7%8E%B0%E8%B0%83%E7%A0%94/#\u6700\u7b80\u5355\u7684agent\u5143\u7d20\u6784\u6210","title":"\u6700\u200b\u7b80\u5355\u200b\u7684\u200bAgent\u200b\u5143\u7d20\u200b\u6784\u6210","text":"<p>\u200b\u6839\u636e\u200bTiny Agent\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u6700\u200b\u7b80\u5355\u200b\u7684\u200bAgent\u200b\u9700\u8981\u200b\u5982\u4e0b\u200b\u5fc5\u987b\u200b\u7684\u200b\u5143\u7d20\u200b\uff1a</p> <ul> <li>\u200b\u4e00\u4e2a\u200b\u5927\u200b\u6a21\u578b\u200b\uff08\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u5bf9\u8bdd\u200b\u7684\u200b\u65b9\u5f0f\u200b\u4ea4\u6d41\u200b\uff0c\u200b\u63d0\u200b\u95ee\u9898\u200b\uff0c\u200b\u5b83\u200b\u53cd\u9988\u200b\u7ed3\u679c\u200b\u3002\u200b\u9ad8\u7ea7\u200b\u7684\u200bLLM\u200b\u6709\u200b\u601d\u7ef4\u200b\u94fe\u200b\uff0c\u200b\u6bd4\u5982\u200bDeepSeek R1\uff09</li> <li>\u200b\u5f88\u591a\u200b\u4e2a\u200b\u5de5\u5177\u200b\u7c7b\u200b\uff08\u200b\u5305\u62ec\u200b\u4e86\u200b\u5de5\u5177\u200b\u7684\u200b\u63cf\u8ff0\u200b\u4fe1\u606f\u200b\u3001\u200b\u4f7f\u7528\u200b\u53c2\u6570\u200b\uff09</li> <li>\u200b\u91c7\u7528\u200b\u5927\u200b\u6a21\u578b\u200b\u548c\u200b\u5de5\u5177\u200b\u7c7b\u200b\u6784\u9020\u200b\u7684\u200bAgent\uff08\u200b\u5305\u62ec\u200bReAct\u200b\u5f62\u5f0f\u200b\u7684\u200bsystem prompt\uff0c\u200b\u8fd9\u91cc\u200b\u91c7\u7528\u200b\u4e86\u200bReact\u200b\u8303\u5f0f\u200b\u7684\u200bAgent\uff09</li> </ul> <p>\u200b\u5927\u200b\u6a21\u578b\u200b\u7684\u200b\u53cd\u9988\u200b\u884c\u4e3a\u200b\u88ab\u200b\u6211\u4eec\u200b\u7684\u200bsystem prompt\u200b\u6240\u200b\u7ea6\u675f\u200b\uff0c\u200b\u4e00\u65b9\u9762\u200b\u662f\u200b\u5927\u200b\u6a21\u578b\u200b\u7684\u200b\u601d\u8003\u200b\u5982\u4f55\u200b\u89e3\u51b3\u95ee\u9898\u200b\uff0c\u200b\u53e6\u4e00\u65b9\u9762\u200b\uff0c\u200b\u5927\u200b\u6a21\u578b\u200b\u53ef\u4ee5\u200b\u5229\u7528\u200b\u6211\u4eec\u200b\u63d0\u4f9b\u200b\u7684\u200b\u5de5\u5177\u200b\u63cf\u8ff0\u200b\u4fe1\u606f\u200b\uff0c\u200b\u9009\u62e9\u200b\u5408\u9002\u200b\u7684\u200b\u5de5\u5177\u200b\u89e3\u51b3\u95ee\u9898\u200b\u3002\u200b\u6784\u9020\u200b\u4e86\u200b\u6700\u7ec8\u200b\u7b80\u5355\u200b\u7684\u200bAgent\u3002</p> <p>\u200b\u6784\u5efa\u200bReAct\u200b\u5f62\u5f0f\u200b\u7684\u200bsystem prompt\uff1a</p> Text Only<pre><code>Answer the following questions as best you can. You have access to the following tools:\n\ngoogle_search: Call this tool to interact with the \u200b\u8c37\u6b4c\u200b\u641c\u7d22\u200b API. What is the \u200b\u8c37\u6b4c\u200b\u641c\u7d22\u200b API useful for? \u200b\u8c37\u6b4c\u200b\u641c\u7d22\u200b\u662f\u200b\u4e00\u4e2a\u200b\u901a\u7528\u200b\u641c\u7d22\u5f15\u64ce\u200b\uff0c\u200b\u53ef\u200b\u7528\u4e8e\u200b\u8bbf\u95ee\u200b\u4e92\u8054\u7f51\u200b\u3001\u200b\u67e5\u8be2\u200b\u767e\u79d1\u77e5\u8bc6\u200b\u3001\u200b\u4e86\u89e3\u200b\u65f6\u4e8b\u65b0\u95fb\u200b\u7b49\u200b\u3002 Parameters: [{'name': 'search_query', 'description': '\u200b\u641c\u7d22\u200b\u5173\u952e\u8bcd\u200b\u6216\u200b\u77ed\u8bed\u200b', 'required': True, 'schema': {'type': 'string'}}] Format the arguments as a JSON object.\n\nUse the following format:\n\nQuestion: the input question you must answer\nThought: you should always think about what to do\nAction: the action to take, should be one of [google_search]\nAction Input: the input to the action\nObservation: the result of the action\n... (this Thought/Action/Action Input/Observation can be repeated zero or more times)\nThought: I now know the final answer\nFinal Answer: the final answer to the original input question\n\nBegin!\n</code></pre> <p>\u200b\u6574\u4f53\u200b\u8c03\u7528\u200b\u6d41\u7a0b\u200b\uff1a </p> <p>\u200b\u4e00\u6b21\u200b\u5b8c\u6574\u200b\u7684\u200bAgent\u200b\u8c03\u7528\u200b\u4ece\u200brequest\u200b\u53d1\u8d77\u200b\u95ee\u9898\u200b\uff0c\u200b\u5230\u200b\u6536\u5230\u200b\u6700\u7ec8\u200b\u7684\u200bResponse\u3002\u200b\u6574\u4e2a\u200b\u8fc7\u7a0b\u200b\u548c\u200bLLM\u200b\u4ea4\u4e92\u200b\u4e24\u6b21\u200b\uff0c\u200b\u8c03\u7528\u200b\u5de5\u5177\u200b\u51fd\u6570\u200b\u4e00\u6b21\u200b\u3002</p> <ul> <li>\u200b\u7b2c\u4e00\u6b21\u200b\u89e3\u6790\u200b\u7528\u6237\u200b\u7684\u200b\u63d0\u95ee\u200b\uff0c\u200b\u9009\u62e9\u200b\u8c03\u7528\u200b\u7684\u200b\u5de5\u5177\u200b\u548c\u200b\u53c2\u6570\u200b\uff1b</li> <li>\u200b\u7b2c\u4e8c\u6b21\u200b\u5c06\u200b\u5de5\u5177\u200b\u8fd4\u56de\u200b\u7684\u200b\u7ed3\u679c\u200b\u4e0e\u200b\u7528\u6237\u200b\u7684\u200b\u63d0\u95ee\u200b\u6574\u5408\u200b\u3002</li> </ul>"},{"location":"blog/llm%E4%B8%ADagents%E5%AE%9E%E7%8E%B0%E8%B0%83%E7%A0%94/#agent\u7684\u6a21\u5f0freact\u7ed3\u6784","title":"Agent\u200b\u7684\u200b\u6a21\u5f0f\u200bReact\u200b\u7ed3\u6784","text":"<p>ReAct: Synergizing Reasoning and Acting in Language Models</p> <p>\u200b\u867d\u7136\u200b\u5927\u578b\u200b\u8bed\u8a00\u200b\u6a21\u578b\u200b\uff08LLMs\uff09\u200b\u5728\u200b\u8bed\u8a00\u200b\u7406\u89e3\u200b\u548c\u200b\u4ea4\u4e92\u5f0f\u200b\u51b3\u7b56\u200b\u4efb\u52a1\u200b\u4e2d\u200b\u5c55\u73b0\u51fa\u200b\u4e86\u200b\u4ee4\u4eba\u77a9\u76ee\u200b\u7684\u200b\u80fd\u529b\u200b\uff0c\u200b\u4f46\u200b\u5b83\u4eec\u200b\u7684\u200b\u63a8\u7406\u200b\u80fd\u529b\u200b\uff08\u200b\u4f8b\u5982\u200b\u601d\u7ef4\u200b\u94fe\u200b\u63d0\u793a\u200b\uff09\u200b\u548c\u200b\u884c\u52a8\u200b\u80fd\u529b\u200b\uff08\u200b\u4f8b\u5982\u200b\u884c\u52a8\u8ba1\u5212\u200b\u751f\u6210\u200b\uff09\u200b\u4e3b\u8981\u200b\u4f5c\u4e3a\u200b\u72ec\u7acb\u200b\u7684\u200b\u4e3b\u9898\u200b\u8fdb\u884c\u200b\u7814\u7a76\u200b\u3002\u200b\u5728\u200b\u672c\u6587\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u63a2\u7d22\u200b\u4f7f\u7528\u200b LLMs \u200b\u4ee5\u200b\u4ea4\u9519\u200b\u7684\u200b\u65b9\u5f0f\u200b\u751f\u6210\u200b\u63a8\u7406\u200b\u8f68\u8ff9\u200b\u548c\u200b\u7279\u5b9a\u200b\u4efb\u52a1\u200b\u7684\u200b\u884c\u52a8\u200b\uff0c\u200b\u4ece\u800c\u200b\u5728\u200b\u4e24\u8005\u4e4b\u95f4\u200b\u5b9e\u73b0\u200b\u66f4\u5927\u200b\u7684\u200b\u534f\u540c\u200b\u4f5c\u7528\u200b\uff1a\u200b\u63a8\u7406\u200b\u8f68\u8ff9\u200b\u5e2e\u52a9\u200b\u6a21\u578b\u200b\u63a8\u5bfc\u200b\u3001\u200b\u8ddf\u8e2a\u200b\u548c\u200b\u66f4\u65b0\u200b\u884c\u52a8\u8ba1\u5212\u200b\u4ee5\u53ca\u200b\u5904\u7406\u200b\u5f02\u5e38\u60c5\u51b5\u200b\uff0c\u200b\u800c\u200b\u884c\u52a8\u200b\u5219\u200b\u5141\u8bb8\u200b\u5b83\u200b\u4e0e\u200b\u5916\u90e8\u200b\u8d44\u6e90\u200b\uff08\u200b\u5982\u200b\u77e5\u8bc6\u5e93\u200b\u6216\u200b\u73af\u5883\u200b\uff09\u200b\u8fdb\u884c\u200b\u4ea4\u4e92\u200b\u4ee5\u200b\u6536\u96c6\u200b\u989d\u5916\u200b\u4fe1\u606f\u200b\u3002\u200b\u6211\u4eec\u200b\u5c06\u200b\u6211\u4eec\u200b\u7684\u200b\u65b9\u6cd5\u200b\uff08\u200b\u540d\u4e3a\u200b ReAct\uff09\u200b\u5e94\u7528\u200b\u4e8e\u200b\u4e00\u7cfb\u5217\u200b\u4e0d\u540c\u200b\u7684\u200b\u8bed\u8a00\u200b\u548c\u200b\u51b3\u7b56\u200b\u4efb\u52a1\u200b\uff0c\u200b\u5e76\u200b\u5c55\u793a\u200b\u4e86\u200b\u5176\u200b\u76f8\u5bf9\u200b\u4e8e\u200b\u6700\u200b\u5148\u8fdb\u200b\u57fa\u7ebf\u200b\u7684\u200b\u6709\u6548\u6027\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u76f8\u5bf9\u200b\u4e8e\u200b\u6ca1\u6709\u200b\u63a8\u7406\u200b\u6216\u200b\u884c\u52a8\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u65b9\u6cd5\u200b\u5728\u200b\u4eba\u7c7b\u200b\u53ef\u200b\u89e3\u91ca\u6027\u200b\u548c\u200b\u53ef\u4fe1\u5ea6\u200b\u65b9\u9762\u200b\u7684\u200b\u6539\u8fdb\u200b\u3002\u200b\u5177\u4f53\u200b\u800c\u8a00\u200b\uff0c\u200b\u5728\u200b\u95ee\u7b54\u200b\uff08HotpotQA\uff09\u200b\u548c\u200b\u4e8b\u5b9e\u200b\u9a8c\u8bc1\u200b\uff08Fever\uff09\u200b\u65b9\u9762\u200b\uff0cReAct \u200b\u901a\u8fc7\u200b\u4e0e\u200b\u7b80\u5355\u200b\u7684\u200b\u7ef4\u57fa\u767e\u79d1\u200b API \u200b\u4ea4\u4e92\u200b\uff0c\u200b\u514b\u670d\u200b\u4e86\u200b\u601d\u7ef4\u200b\u94fe\u200b\u63a8\u7406\u200b\u4e2d\u200b\u666e\u904d\u5b58\u5728\u200b\u7684\u200b\u5e7b\u89c9\u200b\u548c\u200b\u9519\u8bef\u200b\u4f20\u64ad\u200b\u95ee\u9898\u200b\uff0c\u200b\u5e76\u200b\u751f\u6210\u200b\u4e86\u200b\u6bd4\u200b\u6ca1\u6709\u200b\u63a8\u7406\u200b\u8f68\u8ff9\u200b\u7684\u200b\u57fa\u7ebf\u200b\u66f4\u5177\u200b\u53ef\u200b\u89e3\u91ca\u6027\u200b\u7684\u200b\u7c7b\u4eba\u200b\u4efb\u52a1\u200b\u89e3\u51b3\u200b\u8f68\u8ff9\u200b\u3002\u200b\u5728\u200b\u4e24\u4e2a\u200b\u4ea4\u4e92\u5f0f\u200b\u51b3\u7b56\u200b\u57fa\u51c6\u200b\uff08ALFWorld \u200b\u548c\u200b WebShop\uff09\u200b\u4e0a\u200b\uff0cReAct \u200b\u5206\u522b\u200b\u4ee5\u200b 34%\u200b\u548c\u200b 10%\u200b\u7684\u200b\u7edd\u5bf9\u200b\u6210\u529f\u7387\u200b\u4f18\u4e8e\u200b\u6a21\u4eff\u200b\u548c\u200b\u5f3a\u5316\u200b\u5b66\u4e60\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u540c\u65f6\u200b\u4ec5\u200b\u4f7f\u7528\u200b\u4e00\u4e24\u4e2a\u200b\u4e0a\u4e0b\u6587\u200b\u793a\u4f8b\u200b\u8fdb\u884c\u200b\u63d0\u793a\u200b\u3002</p> <p></p> <p>\u200b\u56fe\u200b1\u200b\u5c55\u793a\u200b\u4e86\u200b\u5728\u200bHotPotQA\u200b\u95ee\u7b54\u200b\u4efb\u52a1\u200b\u548c\u200bAlfWorld\u200b\u6587\u672c\u200b\u6e38\u620f\u200b\u4e2d\u200b\uff0c\u200b\u4e0d\u540c\u200b\u63d0\u793a\u200b\u65b9\u6cd5\u200b\u7684\u200b\u5bf9\u6bd4\u200b\u60c5\u51b5\u200b\uff0c\u200b\u5177\u4f53\u200b\u5982\u4e0b\u200b\uff1a</p> <ol> <li> <p>HotPotQA\u200b\u4efb\u52a1\u200b\uff1a\u200b\u6bd4\u8f83\u200b\u4e86\u200b\u6807\u51c6\u200b\uff08standard\uff09\u3001\u200b\u601d\u7ef4\u200b\u94fe\u200b\uff08CoT\uff0c\u200b\u4ec5\u200b\u63a8\u7406\u200b\uff09\u3001\u200b\u4ec5\u200b\u884c\u52a8\u200b\uff08Act-only\uff09\u200b\u548c\u200bReAct\uff08\u200b\u63a8\u7406\u200b+\u200b\u884c\u52a8\u200b\uff09\u200b\u8fd9\u200b4\u200b\u79cd\u200b\u63d0\u793a\u200b\u65b9\u6cd5\u200b\u3002\u200b\u5728\u200b\u8be5\u200b\u4efb\u52a1\u200b\u4e2d\u200b\uff0c\u200b\u6a21\u578b\u200b\u9700\u8981\u200b\u901a\u8fc7\u200b\u63a8\u7406\u200b\u548c\u200b\u4fe1\u606f\u68c0\u7d22\u200b\u6765\u200b\u56de\u7b54\u200b\u95ee\u9898\u200b\uff0c\u200b\u56fe\u4e2d\u200b\u7701\u7565\u200b\u4e86\u200b\u63d0\u793a\u200b\u4e2d\u200b\u7684\u200b\u4e0a\u4e0b\u6587\u200b\u793a\u4f8b\u200b\uff0c\u200b\u4ec5\u200b\u5c55\u793a\u200b\u4e86\u200b\u6a21\u578b\u200b\u751f\u6210\u200b\u7684\u200b\u4efb\u52a1\u200b\u89e3\u51b3\u200b\u8f68\u8ff9\u200b\uff08\u200b\u5305\u62ec\u200b\u884c\u52a8\u200b\u3001\u200b\u601d\u8003\u200b\u8fc7\u7a0b\u200b\uff09\u200b\u4ee5\u53ca\u200b\u73af\u5883\u200b\u53cd\u9988\u200b\uff08\u200b\u89c2\u5bdf\u200b\u7ed3\u679c\u200b\uff09\u3002\u200b\u4ece\u56fe\u200b\u4e2d\u200b\u53ef\u4ee5\u200b\u76f4\u89c2\u200b\u5730\u200b\u770b\u5230\u200b\u4e0d\u540c\u200b\u65b9\u6cd5\u200b\u5728\u200b\u89e3\u51b3\u95ee\u9898\u200b\u65f6\u200b\u7684\u200b\u5dee\u5f02\u200b\uff0c\u200b\u4f8b\u5982\u200b\u4ec5\u200b\u884c\u52a8\u200b\u65b9\u6cd5\u200b\u53ef\u80fd\u200b\u5728\u200b\u590d\u6742\u200b\u63a8\u7406\u200b\u9700\u6c42\u200b\u4e0b\u200b\u96be\u4ee5\u200b\u751f\u6210\u200b\u6b63\u786e\u200b\u7684\u200b\u6700\u7ec8\u200b\u884c\u52a8\u200b\u6765\u200b\u5b8c\u6210\u200b\u4efb\u52a1\u200b\uff0c\u200b\u800c\u200bReAct\u200b\u65b9\u6cd5\u200b\u901a\u8fc7\u200b\u4ea4\u9519\u200b\u7684\u200b\u63a8\u7406\u200b\u548c\u200b\u884c\u52a8\u200b\u6b65\u9aa4\u200b\uff0c\u200b\u80fd\u591f\u200b\u66f4\u597d\u200b\u5730\u200b\u5229\u7528\u200b\u5916\u90e8\u200b\u4fe1\u606f\u200b\u8fdb\u884c\u200b\u63a8\u7406\u200b\u548c\u200b\u51b3\u7b56\u200b \u3002</p> </li> <li> <p>AlfWorld\u200b\u6e38\u620f\u200b\uff1a\u200b\u5bf9\u6bd4\u200b\u4e86\u200b\u4ec5\u200b\u884c\u52a8\u200b\uff08Act -only\uff09\u200b\u548c\u200bReAct\u200b\u8fd9\u200b\u4e24\u79cd\u200b\u63d0\u793a\u200b\u65b9\u6cd5\u200b\u3002AlfWorld\u200b\u6e38\u620f\u200b\u8981\u6c42\u200b\u667a\u80fd\u200b\u4f53\u5728\u200b\u6a21\u62df\u200b\u7684\u200b\u5bb6\u5ead\u73af\u5883\u200b\u4e2d\u200b\u901a\u8fc7\u200b\u6587\u672c\u200b\u884c\u52a8\u200b\u5b8c\u6210\u200b\u76ee\u6807\u200b\uff0c\u200b\u540c\u6837\u200b\uff0c\u200b\u56fe\u4e2d\u200b\u5448\u73b0\u200b\u4e86\u200b\u4e24\u79cd\u200b\u65b9\u6cd5\u200b\u5728\u200b\u89e3\u51b3\u200b\u6e38\u620f\u200b\u4efb\u52a1\u200b\u65f6\u200b\u7684\u200b\u8f68\u8ff9\u200b\u3002\u200b\u53ef\u4ee5\u200b\u53d1\u73b0\u200b\uff0c\u200b\u4ec5\u200b\u884c\u52a8\u200b\u65b9\u6cd5\u200b\u53ef\u80fd\u200b\u65e0\u6cd5\u200b\u6839\u636e\u200b\u73af\u5883\u200b\u4e0a\u4e0b\u6587\u200b\u51c6\u786e\u200b\u7406\u89e3\u200b\u548c\u200b\u6267\u884c\u200b\u4efb\u52a1\u200b\uff0c\u200b\u51fa\u73b0\u200b\u5982\u200b\u5728\u200b\u672a\u627e\u5230\u200b\u7269\u54c1\u200b\u65f6\u200b\u4ecd\u200b\u91cd\u590d\u200b\u9519\u8bef\u200b\u884c\u52a8\u200b\u7684\u200b\u60c5\u51b5\u200b\uff1b\u200b\u800c\u200bReAct\u200b\u65b9\u6cd5\u200b\u901a\u8fc7\u200b\u63a8\u7406\u200b\u6b65\u9aa4\u200b\uff0c\u200b\u80fd\u200b\u66f4\u597d\u200b\u5730\u200b\u89c4\u5212\u200b\u884c\u52a8\u200b\u987a\u5e8f\u200b\u3001\u200b\u786e\u5b9a\u200b\u7269\u54c1\u200b\u4f4d\u7f6e\u200b\u7b49\u200b\uff0c\u200b\u63d0\u9ad8\u200b\u4efb\u52a1\u200b\u5b8c\u6210\u200b\u7684\u200b\u6210\u529f\u7387\u200b\u3002</p> </li> </ol> <p>\u200b\u56fe\u200b1\u200b\u901a\u8fc7\u200b\u5bf9\u6bd4\u200b\u4e0d\u540c\u200b\u63d0\u793a\u200b\u65b9\u6cd5\u200b\u5728\u200b\u4e24\u79cd\u200b\u4e0d\u540c\u200b\u7c7b\u578b\u200b\u4efb\u52a1\u200b\u4e2d\u200b\u7684\u200b\u8868\u73b0\u200b\uff0c\u200b\u76f4\u89c2\u200b\u5730\u200b\u5c55\u793a\u200b\u4e86\u200bReAct\u200b\u65b9\u6cd5\u200b\u5728\u200b\u7ed3\u5408\u200b\u63a8\u7406\u200b\u548c\u200b\u884c\u52a8\u200b\u65b9\u9762\u200b\u7684\u200b\u4f18\u52bf\u200b\uff0c\u200b\u4e3a\u200b\u540e\u7eed\u200b\u7814\u7a76\u200b\u548c\u200b\u5206\u6790\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u53ef\u89c6\u5316\u200b\u7684\u200b\u4f9d\u636e\u200b\u3002 </p>"},{"location":"blog/llm%E4%B8%ADagents%E5%AE%9E%E7%8E%B0%E8%B0%83%E7%A0%94/#metagpt\u591a\u667a\u80fd\u4f53\u534f\u4f5c\u6846\u67b6","title":"MetaGPT\u200b\u591a\u200b\u667a\u80fd\u200b\u4f53\u200b\u534f\u4f5c\u200b\u6846\u67b6","text":"<p>\u200b\u5728\u200b\u8bba\u6587\u200bMetaGPT: Meta Programming for A Multi-Agent Collaborative Framework\u200b\u4e2d\u200bMetaGPT\u200b\u591a\u200b\u667a\u80fd\u200b\u4f53\u200b\u534f\u4f5c\u200b\u6846\u67b6\u200b\u5f15\u5165\u200b\u4e86\u200bSOPs\uff08\u200b\u6807\u51c6\u200b\u64cd\u4f5c\u7a0b\u5e8f\u200b\uff0cStandardized Operating Procedures\uff09\u3002 MetaGPT \u200b\u5143\u200b\u7f16\u7a0b\u200b\u6846\u67b6\u200b\uff0c\u200b\u5c06\u200b\u4eba\u7c7b\u200b\u5de5\u4f5c\u200b\u6d41\u7a0b\u200b\u878d\u5165\u200b\u57fa\u4e8e\u200b\u5927\u200b\u8bed\u8a00\u200b\u6a21\u578b\u200b\uff08LLMs\uff09\u200b\u7684\u200b\u591a\u200b\u667a\u80fd\u200b\u4f53\u200b\u534f\u4f5c\u200b\u4e2d\u200b\uff0c\u200b\u4ee5\u200b\u89e3\u51b3\u200b\u590d\u6742\u200b\u4efb\u52a1\u200b\u3002\u200b\u4eba\u7c7b\u200b\u5728\u200b\u534f\u4f5c\u200b\u5b9e\u8df5\u200b\u4e2d\u200b\u5f62\u6210\u200b\u7684\u200b\u6807\u51c6\u5316\u200b\u64cd\u4f5c\u200b\u6d41\u7a0b\u200b\uff08SOPs\uff09\u200b\u6709\u52a9\u4e8e\u200b\u4efb\u52a1\u200b\u5206\u89e3\u200b\u4e0e\u200b\u534f\u8c03\u200b\u3002</p>"},{"location":"blog/llm%E4%B8%ADagents%E5%AE%9E%E7%8E%B0%E8%B0%83%E7%A0%94/#metagpt\u5f15\u5165sops","title":"MetaGPT\uff1a\u200b\u5f15\u5165\u200bSOPs","text":"<p>MetaGPT \u200b\u6846\u67b6\u200b\uff1a\u200b\u901a\u8fc7\u200b\u660e\u786e\u200b\u89d2\u8272\u200b\u5206\u5de5\u200b\uff0c\u200b\u5c06\u200b\u590d\u6742\u200b\u4efb\u52a1\u200b\u5206\u89e3\u200b\u4e3a\u200b\u5177\u4f53\u200b\u5b50\u200b\u4efb\u52a1\u200b\uff1b\u200b\u4f9d\u636e\u200b\u8f6f\u4ef6\u5f00\u53d1\u200b SOP \u200b\u5efa\u7acb\u200b\u5de5\u4f5c\u200b\u6d41\u7a0b\u200b\uff0c\u200b\u5404\u200b\u667a\u80fd\u200b\u4f53\u200b\u987a\u5e8f\u200b\u534f\u4f5c\u200b\u3002\u200b\u91c7\u7528\u200b\u7ed3\u6784\u5316\u200b\u901a\u4fe1\u63a5\u53e3\u200b\u548c\u200b\u53d1\u5e03\u200b - \u200b\u8ba2\u9605\u200b\u673a\u5236\u200b\uff0c\u200b\u63d0\u9ad8\u200b\u901a\u4fe1\u200b\u6548\u7387\u200b\u5e76\u200b\u51cf\u5c11\u200b\u4fe1\u606f\u200b\u8fc7\u8f7d\u200b\uff1b\u200b\u5f15\u5165\u200b\u53ef\u200b\u6267\u884c\u200b\u53cd\u9988\u200b\u673a\u5236\u200b\uff0c\u200b\u8fed\u4ee3\u200b\u4f18\u5316\u200b\u4ee3\u7801\u751f\u6210\u200b\u8d28\u91cf\u200b\u3002</p> <p>\u200b\u5f00\u6e90\u200b\u9879\u76ee\u200b\u5730\u5740\u200b\uff1aMetaGPT</p> <p>\u200b\u57fa\u4e8e\u200b\u5927\u578b\u200b\u8bed\u8a00\u200b\u6a21\u578b\u200b\uff08LLM\uff09\u200b\u7684\u200b\u667a\u80fd\u200b\u4f53\u200b\u793e\u4f1a\u200b\u5728\u200b\u81ea\u52a8\u200b\u95ee\u9898\u200b\u89e3\u51b3\u200b\u65b9\u9762\u200b\u53d6\u5f97\u200b\u4e86\u200b\u663e\u8457\u200b\u8fdb\u5c55\u200b\u3002\u200b\u73b0\u6709\u200b\u7684\u200b\u57fa\u4e8e\u200b\u5927\u578b\u200b\u8bed\u8a00\u200b\u6a21\u578b\u200b\uff08LLM\uff09\u200b\u7684\u200b\u591a\u200b\u667a\u80fd\u200b\u4f53\u200b\u7cfb\u7edf\u200b\u5df2\u7ecf\u200b\u80fd\u591f\u200b\u89e3\u51b3\u200b\u7b80\u5355\u200b\u7684\u200b\u5bf9\u8bdd\u200b\u4efb\u52a1\u200b\u3002\u200b\u7136\u800c\u200b\uff0c\u200b\u7531\u4e8e\u200b\u7b80\u5355\u200b\u5730\u200b\u94fe\u63a5\u200b LLM \u200b\u6240\u200b\u5bfc\u81f4\u200b\u7684\u200b\u7ea7\u8054\u200b\u5e7b\u89c9\u200b\u5f15\u8d77\u200b\u7684\u200b\u903b\u8f91\u200b\u4e0d\u200b\u4e00\u81f4\u200b\uff0c\u200b\u66f4\u200b\u590d\u6742\u200b\u4efb\u52a1\u200b\u7684\u200b\u89e3\u51b3\u65b9\u6848\u200b\u53d8\u5f97\u590d\u6742\u200b\u3002\u200b\u5728\u200b\u8fd9\u91cc\u200b\uff0c\u200b\u6211\u4eec\u200b\u5f15\u5165\u200b MetaGPT\uff0c\u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b\u521b\u65b0\u200b\u7684\u200b\u5143\u200b\u7f16\u7a0b\u200b\u6846\u67b6\u200b\uff0c\u200b\u5c06\u200b\u9ad8\u6548\u200b\u7684\u200b\u4eba\u7c7b\u200b\u5de5\u4f5c\u200b\u6d41\u7a0b\u200b\u7eb3\u5165\u200b\u57fa\u4e8e\u200b LLM \u200b\u7684\u200b\u591a\u200b\u667a\u80fd\u200b\u4f53\u200b\u534f\u4f5c\u200b\u4e2d\u200b\u3002MetaGPT \u200b\u5c06\u200b\u6807\u51c6\u5316\u200b\u64cd\u4f5c\u7a0b\u5e8f\u200b\uff08SOPs\uff09\u200b\u7f16\u7801\u200b\u5230\u200b\u63d0\u793a\u200b\u5e8f\u5217\u200b(prompt sequences)\u200b\u4e2d\u200b\uff0c\u200b\u4ee5\u200b\u5b9e\u73b0\u200b\u66f4\u200b\u7cbe\u7b80\u200b\u7684\u200b\u5de5\u4f5c\u200b\u6d41\u7a0b\u200b\uff0c\u200b\u4ece\u800c\u200b\u4f7f\u200b\u5177\u6709\u200b\u7c7b\u4eba\u200b\u9886\u57df\u200b\u4e13\u4e1a\u77e5\u8bc6\u200b\u7684\u200b\u667a\u80fd\u200b\u4f53\u200b\u80fd\u591f\u200b\u9a8c\u8bc1\u200b\u4e2d\u95f4\u200b\u7ed3\u679c\u200b\u5e76\u200b\u51cf\u5c11\u200b\u9519\u8bef\u200b\u3002 MetaGPT \u200b\u91c7\u7528\u200b\u6d41\u6c34\u7ebf\u200b\u8303\u5f0f\u200b\u4e3a\u200b\u5404\u79cd\u200b\u667a\u80fd\u200b\u4f53\u200b\u5206\u914d\u200b\u4e0d\u540c\u200b\u7684\u200b\u89d2\u8272\u200b\uff0c\u200b\u6709\u6548\u200b\u5730\u200b\u5c06\u200b\u590d\u6742\u200b\u4efb\u52a1\u200b\u5206\u89e3\u200b\u4e3a\u200b\u6d89\u53ca\u200b\u8bb8\u591a\u200b\u667a\u80fd\u200b\u4f53\u200b\u5171\u540c\u200b\u5de5\u4f5c\u200b\u7684\u200b\u5b50\u200b\u4efb\u52a1\u200b\u3002\u200b\u5728\u200b\u534f\u4f5c\u200b\u8f6f\u4ef6\u5de5\u7a0b\u200b\u57fa\u51c6\u200b\u6d4b\u8bd5\u200b\u4e2d\u200b\uff0cMetaGPT \u200b\u751f\u6210\u200b\u7684\u200b\u89e3\u51b3\u65b9\u6848\u200b\u6bd4\u200b\u4ee5\u524d\u200b\u57fa\u4e8e\u200b\u804a\u5929\u200b\u7684\u200b\u591a\u200b\u667a\u80fd\u200b\u4f53\u200b\u7cfb\u7edf\u200b\u66f4\u52a0\u200b\u8fde\u8d2f\u200b\u3002</p> <p>\u200b\u591a\u4e2a\u200b\u667a\u80fd\u200b\u4f53\u200b\u534f\u4f5c\u200b\u6784\u6210\u200bsocieties of agents\u3002\u201cagents\u201d \u200b\u901a\u5e38\u200b\u6307\u200b\u7684\u200b\u662f\u200b\u5177\u6709\u200b\u4e00\u5b9a\u200b\u81ea\u4e3b\u6027\u200b\u548c\u200b\u51b3\u7b56\u200b\u80fd\u529b\u200b\u7684\u200b\u4e2a\u4f53\u200b\u6216\u200b\u5b9e\u4f53\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u662f\u200b\u8f6f\u4ef6\u200b\u4ee3\u7406\u200b\u3001\u200b\u673a\u5668\u4eba\u200b\u7b49\u200b\u3002\u201csocieties of agents\u201d \u200b\u63cf\u8ff0\u200b\u7684\u200b\u662f\u200b\u7531\u200b\u591a\u4e2a\u200b\u8fd9\u6837\u200b\u7684\u200b\u667a\u80fd\u200b\u4f53\u200b\u7ec4\u6210\u200b\u7684\u200b\u793e\u4f1a\u200b\u7cfb\u7edf\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u667a\u80fd\u200b\u4f53\u200b\u4e4b\u95f4\u200b\u53ef\u80fd\u200b\u901a\u8fc7\u200b\u4ea4\u4e92\u200b\u3001\u200b\u5408\u4f5c\u200b\u3001\u200b\u7ade\u4e89\u200b\u7b49\u200b\u65b9\u5f0f\u200b\u6765\u200b\u5b9e\u73b0\u200b\u5171\u540c\u200b\u7684\u200b\u76ee\u6807\u200b\u6216\u200b\u5b8c\u6210\u200b\u7279\u5b9a\u200b\u7684\u200b\u4efb\u52a1\u200b\u3002</p> <ul> <li> <p>\u200b\u5bf9\u200b\u8be5\u200b\u6846\u67b6\u200b\u4e2d\u200b\u7684\u200b\u89d2\u8272\u200b\u4e13\u4e1a\u5316\u200b\u3001\u200b\u5de5\u4f5c\u200b\u6d41\u7a0b\u200b\u4ee5\u53ca\u200b\u7ed3\u6784\u5316\u200b\u901a\u4fe1\u200b\u8fdb\u884c\u200b\u4e86\u200b\u89e3\u91ca\u200b\uff0c\u200b\u5e76\u200b\u8bf4\u660e\u200b\u4e86\u200b\u5982\u4f55\u200b\u5728\u200b\u6807\u51c6\u5316\u200b\u64cd\u4f5c\u200b\u6d41\u7a0b\u200b\uff08SOPs\uff09\u200b\u7684\u200b\u80cc\u666f\u200b\u4e0b\u200b\u7ec4\u7ec7\u200b\u4e00\u4e2a\u591a\u200b\u667a\u80fd\u200b\u4f53\u200b\u7cfb\u7edf\u200b\u3002</p> </li> <li> <p>\u200b\u4ecb\u7ecd\u200b\u4e86\u200b\u4e00\u79cd\u200b\u53ef\u200b\u63d0\u9ad8\u200b\u89d2\u8272\u200b\u95f4\u901a\u4fe1\u200b\u6548\u7387\u200b\u7684\u200b\u901a\u4fe1\u534f\u8bae\u200b\u3002\u200b\u6211\u4eec\u200b\u8fd8\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u7ed3\u6784\u5316\u200b\u901a\u4fe1\u63a5\u53e3\u200b\u4ee5\u53ca\u200b\u4e00\u79cd\u200b\u6709\u6548\u200b\u7684\u200b\u53d1\u5e03\u200b - \u200b\u8ba2\u9605\u200b\u673a\u5236\u200b\u3002\u200b\u8fd9\u4e9b\u200b\u65b9\u6cd5\u200b\u4f7f\u200b\u667a\u80fd\u200b\u4f53\u200b\u80fd\u591f\u200b\u4ece\u200b\u5176\u4ed6\u200b\u89d2\u8272\u200b\u5904\u200b\u83b7\u53d6\u200b\u5b9a\u5411\u200b\u4fe1\u606f\u200b\uff0c\u200b\u5e76\u200b\u4ece\u200b\u73af\u5883\u200b\u4e2d\u200b\u83b7\u53d6\u200b\u516c\u5f00\u200b\u4fe1\u606f\u200b\u3002\u200b\u6700\u540e\u200b\u3002</p> </li> <li> <p>\u200b\u5f15\u5165\u200b\u4e86\u200b\u53ef\u200b\u6267\u884c\u200b\u53cd\u9988\u200b\uff0c\u200b\u8fd9\u662f\u200b\u4e00\u79cd\u200b\u7528\u4e8e\u200b\u5728\u200b\u8fd0\u884c\u200b\u65f6\u200b\u8fdb\u4e00\u6b65\u63d0\u9ad8\u200b\u4ee3\u7801\u751f\u6210\u200b\u8d28\u91cf\u200b\u7684\u200b\u81ea\u6211\u200b\u4fee\u6b63\u200b\u673a\u5236\u200b\u3002</p> </li> </ul> <p>\u200b\u901a\u4fe1\u534f\u8bae\u200b\u793a\u4f8b\u200b\uff08\u200b\u5de6\u200b\uff09\u200b\u4ee5\u53ca\u200b\u5e26\u6709\u200b\u53ef\u200b\u6267\u884c\u200b\u53cd\u9988\u200b\u7684\u200b\u8fed\u4ee3\u200b\u7f16\u7a0b\u200b\u793a\u4f8b\u200b\uff08\u200b\u53f3\u200b\uff09\u3002</p> <p></p> <p>\u200b\u5de6\u56fe\u200b\uff1a\u200b\u667a\u80fd\u200b\u4f53\u200b\u4f7f\u7528\u200b\u5171\u4eab\u200b\u6d88\u606f\u200b\u6c60\u6765\u200b\u53d1\u5e03\u200b\u7ed3\u6784\u5316\u200b\u6d88\u606f\u200b\u3002\u200b\u5b83\u4eec\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u6839\u636e\u200b\u81ea\u8eab\u200b\u7684\u200b\u8bbe\u5b9a\u200b\u8ba2\u9605\u200b\u76f8\u5173\u200b\u6d88\u606f\u200b\u3002\u200b\u53f3\u56fe\u200b\uff1a\u200b\u5728\u200b\u751f\u6210\u200b\u521d\u59cb\u200b\u4ee3\u7801\u200b\u540e\u200b\uff0c\u200b\u5de5\u7a0b\u5e08\u200b\u667a\u80fd\u200b\u4f53\u200b\u8fd0\u884c\u200b\u5e76\u200b\u68c0\u67e5\u200b\u662f\u5426\u200b\u5b58\u5728\u200b\u9519\u8bef\u200b\u3002\u200b\u5982\u679c\u200b\u51fa\u73b0\u200b\u9519\u8bef\u200b\uff0c\u200b\u8be5\u200b\u667a\u80fd\u200b\u4f53\u5c06\u200b\u68c0\u67e5\u200b\u5b58\u50a8\u200b\u5728\u200b\u5185\u5b58\u200b\u4e2d\u200b\u7684\u200b\u8fc7\u5f80\u200b\u6d88\u606f\u200b\uff0c\u200b\u5e76\u200b\u5c06\u200b\u8fd9\u4e9b\u200b\u6d88\u606f\u200b\u4e0e\u200b\u4ea7\u54c1\u200b\u9700\u6c42\u200b\u6587\u6863\u200b\uff08PRD\uff09\u3001\u200b\u7cfb\u7edf\u200b\u8bbe\u8ba1\u200b\u4ee5\u53ca\u200b\u4ee3\u7801\u200b\u6587\u4ef6\u200b\u8fdb\u884c\u200b\u5bf9\u6bd4\u200b\u3002</p> <p>\u200b\u4f8b\u5982\u200b\uff1a\u200b\u5728\u200b\u4ea7\u54c1\u5f00\u53d1\u200b\u4f8b\u5b50\u200b\u4e2d\u200b\uff0c\u200b\u5404\u4e2a\u200bAgent(\u200b\u4ea7\u54c1\u200b\u7ecf\u7406\u200b\u3001\u200b\u67b6\u6784\u5e08\u200b\u3001RD\u200b\u5f00\u53d1\u200b\u3001QA\u200b\u6d4b\u8bd5\u200b\u7b49\u200b)\u200b\u76f8\u4e92\u534f\u4f5c\u200b\u7684\u200b\u8fc7\u7a0b\u200b\u3002</p> <p></p> <p>MetaGPT \u200b\u4e2d\u200b\u7684\u200b\u667a\u80fd\u200b\u4f53\u200b\u901a\u8fc7\u200b\u6587\u6863\u200b\u548c\u200b\u56fe\u8868\u200b\uff08\u200b\u7ed3\u6784\u5316\u200b\u8f93\u51fa\u200b\uff09\u200b\u800c\u200b\u975e\u200b\u5bf9\u8bdd\u200b\u6765\u200b\u8fdb\u884c\u200b\u4ea4\u6d41\u200b\u3002\u200b\u8fd9\u4e9b\u200b\u6587\u6863\u200b\u5305\u542b\u200b\u4e86\u200b\u6240\u6709\u200b\u5fc5\u8981\u200b\u7684\u200b\u4fe1\u606f\u200b\uff0c\u200b\u907f\u514d\u200b\u4e86\u200b\u51fa\u73b0\u200b\u4e0d\u200b\u76f8\u5173\u200b\u6216\u200b\u7f3a\u5931\u200b\u7684\u200b\u5185\u5bb9\u200b\u3002</p>"},{"location":"blog/llm%E4%B8%ADagents%E5%AE%9E%E7%8E%B0%E8%B0%83%E7%A0%94/#aflow\u81ea\u52a8\u5316\u6846\u67b6","title":"AFlow\u200b\u81ea\u52a8\u5316\u200b\u6846\u67b6","text":"<p>\u200b\u5728\u200bMetaGPT\u200b\u6700\u65b0\u200b\u7684\u200b\u8bba\u6587\u200bAFlow: Automating Agentic Workflow Generation\u200b\u4e2d\u200b\uff0c\u200b\u4ecb\u7ecd\u200b\u4e86\u200b\u4e00\u79cd\u200b\u540d\u4e3a\u200b AFlow \u200b\u7684\u200b\u81ea\u52a8\u5316\u200b\u6846\u67b6\u200b\uff0c\u200b\u7528\u4e8e\u200b\u4f18\u5316\u200b\u7531\u200b\u4ee3\u7801\u200b\u8868\u793a\u200b\u7684\u200b\u5de5\u4f5c\u200b\u6d41\u200b\uff0c\u200b\u4ee5\u200b\u89e3\u51b3\u200b\u5927\u578b\u200b\u8bed\u8a00\u200b\u6a21\u578b\u200b\uff08LLMs\uff09\u200b\u5de5\u4f5c\u200b\u6d41\u200b\u6784\u5efa\u200b\u4e2d\u200b\u4eba\u529b\u200b\u6210\u672c\u200b\u9ad8\u200b\u3001\u200b\u53ef\u6269\u5c55\u6027\u200b\u548c\u200b\u901a\u7528\u6027\u200b\u53d7\u9650\u200b\u7684\u200b\u95ee\u9898\u200b\u3002</p> <p>\u200b\u5927\u578b\u200b\u8bed\u8a00\u200b\u6a21\u578b\u200b\uff08LLM\uff09\u200b\u5728\u200b\u89e3\u51b3\u200b\u4e0d\u540c\u200b\u9886\u57df\u200b\u7684\u200b\u590d\u6742\u200b\u4efb\u52a1\u200b\u65b9\u9762\u200b\u5c55\u73b0\u51fa\u200b\u4e86\u200b\u663e\u8457\u200b\u7684\u200b\u6f5c\u529b\u200b\uff0c\u200b\u901a\u5e38\u200b\u901a\u8fc7\u200b\u91c7\u7528\u200b\u9075\u5faa\u200b\u8be6\u7ec6\u200b\u6307\u4ee4\u200b\u548c\u200b\u64cd\u4f5c\u200b\u5e8f\u5217\u200b\u7684\u200b\u667a\u80fd\u200b\u5de5\u4f5c\u200b\u6d41\u200b\u6765\u200b\u5b9e\u73b0\u200b\u3002\u200b\u7136\u800c\u200b\uff0c\u200b\u6784\u5efa\u200b\u8fd9\u4e9b\u200b\u5de5\u4f5c\u200b\u6d41\u200b\u9700\u8981\u200b\u5927\u91cf\u200b\u7684\u200b\u4eba\u529b\u200b\u6295\u5165\u200b\uff0c\u200b\u9650\u5236\u200b\u4e86\u200b\u5176\u200b\u53ef\u6269\u5c55\u6027\u200b\u548c\u200b\u901a\u7528\u6027\u200b\u3002\u200b\u6700\u8fd1\u200b\u7684\u200b\u7814\u7a76\u200b\u8bd5\u56fe\u200b\u5b9e\u73b0\u200b\u8fd9\u4e9b\u200b\u5de5\u4f5c\u200b\u6d41\u200b\u7684\u200b\u81ea\u52a8\u200b\u751f\u6210\u200b\u548c\u200b\u4f18\u5316\u200b\uff0c\u200b\u4f46\u200b\u73b0\u6709\u200b\u65b9\u6cd5\u200b\u4ecd\u7136\u200b\u4f9d\u8d56\u4e8e\u200b\u521d\u59cb\u200b\u7684\u200b\u624b\u52a8\u200b\u8bbe\u7f6e\u200b\uff0c\u200b\u65e0\u6cd5\u200b\u5b9e\u73b0\u200b\u5b8c\u5168\u200b\u81ea\u52a8\u5316\u200b\u548c\u200b\u6709\u6548\u200b\u7684\u200b\u5de5\u4f5c\u200b\u6d41\u200b\u751f\u6210\u200b\u3002\u200b\u4e3a\u4e86\u200b\u5e94\u5bf9\u200b\u8fd9\u4e00\u200b\u6311\u6218\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u5de5\u4f5c\u200b\u6d41\u200b\u4f18\u5316\u200b\u91cd\u65b0\u200b\u8868\u8ff0\u200b\u4e3a\u200b\u5bf9\u200b\u4ee3\u7801\u200b\u8868\u793a\u200b\u7684\u200b\u5de5\u4f5c\u200b\u6d41\u200b\u7684\u200b\u641c\u7d22\u200b\u95ee\u9898\u200b\uff0c\u200b\u5176\u4e2d\u200b\u8c03\u7528\u200b LLM \u200b\u7684\u200b\u8282\u70b9\u200b\u901a\u8fc7\u200b\u8fb9\u200b\u8fde\u63a5\u200b\u3002\u200b\u6211\u4eec\u200b\u5f15\u5165\u200b\u4e86\u200b AFlow\uff0c\u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b\u81ea\u52a8\u5316\u200b\u6846\u67b6\u200b\uff0c\u200b\u5b83\u200b\u4f7f\u7528\u200b\u8499\u7279\u5361\u6d1b\u200b\u6811\u200b\u641c\u7d22\u200b\u6709\u6548\u200b\u5730\u200b\u63a2\u7d22\u200b\u8fd9\u4e2a\u200b\u7a7a\u95f4\u200b\uff0c\u200b\u901a\u8fc7\u200b\u4ee3\u7801\u200b\u4fee\u6539\u200b\u3001\u200b\u6811\u72b6\u200b\u7ed3\u6784\u200b\u7ecf\u9a8c\u200b\u548c\u200b\u6267\u884c\u200b\u53cd\u9988\u200b\u8fed\u4ee3\u200b\u5730\u200b\u4f18\u5316\u200b\u5de5\u4f5c\u200b\u6d41\u200b\u3002\u200b\u5728\u200b\u516d\u4e2a\u200b\u57fa\u51c6\u200b\u6570\u636e\u200b\u96c6\u4e0a\u200b\u7684\u200b\u5b9e\u8bc1\u200b\u8bc4\u4f30\u200b\u8bc1\u660e\u200b\u4e86\u200b AFlow \u200b\u7684\u200b\u6709\u6548\u6027\u200b\uff0c\u200b\u4e0e\u200b\u6700\u200b\u5148\u8fdb\u200b\u7684\u200b\u57fa\u7ebf\u200b\u76f8\u6bd4\u200b\u5e73\u5747\u200b\u63d0\u9ad8\u200b\u4e86\u200b 5.7%\u3002\u200b\u6b64\u5916\u200b\uff0cAFlow \u200b\u4f7f\u200b\u8f83\u200b\u5c0f\u200b\u7684\u200b\u6a21\u578b\u200b\u80fd\u591f\u200b\u5728\u200b\u7279\u5b9a\u200b\u4efb\u52a1\u200b\u4e0a\u4ee5\u200b GPT-4o \u200b\u63a8\u7406\u200b\u6210\u672c\u200b\u7684\u200b 4.55%\uff08\u200b\u4ee5\u200b\u7f8e\u5143\u200b\u8ba1\u7b97\u200b\uff09\u200b\u8d85\u8d8a\u200b GPT-4o\u3002</p>"},{"location":"blog/llm%E4%B8%ADagents%E5%AE%9E%E7%8E%B0%E8%B0%83%E7%A0%94/#smolaents\u89e3\u6790","title":"smolaents\u200b\u89e3\u6790","text":"<p>huggingface smolagents\u200b\u6846\u67b6\u200b</p>"},{"location":"blog/llm%E4%B8%ADagents%E5%AE%9E%E7%8E%B0%E8%B0%83%E7%A0%94/#\u4e00\u4e9bagents\u6846\u67b6\u96c6\u5408","title":"\u4e00\u4e9b\u200bagents\u200b\u6846\u67b6\u200b\u96c6\u5408","text":"<p>\u200b\u5728\u200b\u9879\u76ee\u200bawesome-llm-agents\u200b\u4e2d\u200b\u6536\u96c6\u200b\u4e86\u200b\u4e00\u4e9b\u200bagents\u200b\u6846\u67b6\u200b\u3002</p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>DeepSeek-V3_DeepSeekMoE\u200b\u673a\u5236\u200b\u662f\u200b\u4ec0\u4e48\u200b\uff1f</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/llm%E6%8E%A8%E7%90%86vllm%E6%8A%95%E6%9C%BA%E9%87%87%E6%A0%B7%E5%AE%9E%E7%8E%B0/","title":"LLM\u200b\u63a8\u7406\u200b\uff1aVLLM\u200b\u6295\u673a\u200b\u91c7\u6837\u200b\u5b9e\u73b0","text":"<p>vllm\u200b\u6e90\u7801\u200b7464a\u3002</p>"},{"location":"blog/llm%E6%8E%A8%E7%90%86vllm%E6%8A%95%E6%9C%BA%E9%87%87%E6%A0%B7%E5%AE%9E%E7%8E%B0/#\u67b6\u6784","title":"\u67b6\u6784","text":"<p>SpecDecodeWorker + Proposers (ngram, draft model) + Scorer (top-1 scoring) + Verifier (rejection sampling)</p> <p></p> <p>\u200b\u53c2\u8003\u200bA Hacker\u2019s Guide to Speculative Decoding in vLLM\u3002</p>"},{"location":"blog/llm%E6%8E%A8%E7%90%86vllm%E6%8A%95%E6%9C%BA%E9%87%87%E6%A0%B7%E5%AE%9E%E7%8E%B0/#\u8c03\u7528\u6d41\u7a0b","title":"\u8c03\u7528\u200b\u6d41\u7a0b","text":"<ul> <li>\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200bSpecDecodeWorker</li> </ul> Text Only<pre><code>Create a SpecDecodeWorker.\n\nArgs:\n    proposer_worker: A worker that can produce speculative tokens for\n        sequences.\n    scorer_worker: A worker that produces probabilities of speculative\n        tokens according to some base model. Typically a vanilla vLLM\n        Worker.\n    rejection_sampler: A Torch module used to perform modified rejection\n        sampling for speculative decoding.\n</code></pre> <p>\u200b\u6838\u5fc3\u200b\u903b\u8f91\u200b\uff1a </p>Python<pre><code>    @nvtx_range(\"spec_decode_worker._run_speculative_decoding_step\")\n    def _run_speculative_decoding_step(\n            self, execute_model_req: ExecuteModelRequest,\n            num_lookahead_slots: int) -&gt; List[SamplerOutput]:\n        \"\"\"Execute a single step of speculative decoding.\n\n        This invokes the proposer worker to get k speculative tokens for each\n        sequence, then scores each speculative token using the scoring worker.\n\n        Returns a list of SamplerOutput, each containing a single token per\n        sequence.\n        \"\"\"\n        assert num_lookahead_slots == execute_model_req.num_lookahead_slots\n\n        # Generate proposals using draft worker.\n        proposals = self.proposer_worker.get_spec_proposals(execute_model_req)\n\n        proposal_scores = self.scorer.score_proposals(\n            execute_model_req,\n            proposals,\n        )\n\n        # \u200b\u6839\u636e\u200b\u63d0\u8bae\u8005\u200b\u6a21\u578b\u200b\u548c\u200b\u6253\u5206\u200b\u8005\u200b\u6a21\u578b\u200b\uff0c\u200b\u5229\u7528\u200b\u6bcf\u4e2a\u200b\u8bcd\u5143\u200b\u7684\u200b\u6982\u7387\u200b\u6765\u200b\u786e\u5b9a\u200b\u54ea\u4e9b\u200b\u63a8\u6d4b\u200b\u8bcd\u5143\u4f1a\u200b\u88ab\u200b\u63a5\u53d7\u200b\n        accepted_token_ids, target_logprobs = self._verify_tokens(\n            execute_model_req.seq_group_metadata_list, proposal_scores,\n            proposals, execute_model_req.num_lookahead_slots)\n\n        return self._create_output_sampler_list(\n            execute_model_req.seq_group_metadata_list,\n            accepted_token_ids,\n            target_logprobs=target_logprobs,\n            k=execute_model_req.num_lookahead_slots)\n</code></pre><p></p> <p>proposer_worker\u200b\u9605\u8bfb\u200b\u5206\u652f\u200b\u6709\u200b\u4e24\u4e2a\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u5206\u522b\u200b\u662f\u200bn_gram_worker\u200b\u548c\u200bmulti_step_worker\u3002multi_step_worker\u200b\u4e5f\u200b\u5c31\u662f\u200bdraft model proposer\u3002</p> <p></p> <p>get_spec_proposals\u200b\u51fd\u6570\u8c03\u7528\u200b\u7684\u200b\u5c31\u662f\u200bTop1Proposer\u200b\u7684\u200bget_proposals\u200b\u65b9\u6cd5\u200b\u3002</p> <p>_verify_tokens\u200b\u4f1a\u200b\u8c03\u7528\u200b</p> <p></p>Python<pre><code>@nvtx_range(\"spec_decode_worker._verify_tokens\")\n    def _verify_tokens(\n        self,\n        seq_group_metadata_list: List[SequenceGroupMetadata],\n        proposal_scores: SpeculativeScores,\n        proposals: SpeculativeProposals,\n        max_proposal_len: int,\n    ) -&gt; Tuple[torch.Tensor, torch.Tensor]:\n      ...\n      # rejection_sampler\u200b\u662f\u200b\u4e00\u4e2a\u200b\u7528\u4e8e\u200b\u4e3a\u200b\u63a8\u6d4b\u200b\u89e3\u7801\u200b\u6267\u884c\u200b\u6539\u8fdb\u200b\u7684\u200b\u62d2\u7edd\u200b\u91c7\u6837\u200b\u7684\u200bPyTorch\u200b\u6a21\u5757\u200b\u3002\n      accepted_token_ids = self.rejection_sampler(\n          target_probs=proposal_verifier_probs,\n          bonus_token_ids=bonus_token_ids,\n          draft_probs=proposal_probs,\n          draft_token_ids=proposal_token_ids,\n      )\n      ...\n</code></pre> \u200b\u89c1\u200bvllm/model_executor/layers/rejection_sampler.py\u3002<p></p>"},{"location":"blog/llm%E6%8E%A8%E7%90%86vllm%E6%8A%95%E6%9C%BA%E9%87%87%E6%A0%B7%E5%AE%9E%E7%8E%B0/#spec-\u91c7\u6837\u7b97\u6cd5\u5b9e\u73b0","title":"spec \u200b\u91c7\u6837\u200b\u7b97\u6cd5\u200b\u5b9e\u73b0","text":"<p>\u200b\u6765\u6e90\u4e8e\u200b\u3002</p> Python<pre><code>def _get_accepted(\n            self,\n            target_probs: torch.Tensor,  # [batch_size, k, vocab_size]\n            draft_probs: torch.Tensor,  # [batch_size, k, vocab_size]\n            draft_token_ids: torch.Tensor,  # [batch_size, k]\n    ) -&gt; torch.Tensor:\n        r\"\"\"Create bool matrix over the proposed draft tokens. If\n        True, then a token can be accepted, else it should be\n        rejected.\n\n        Given :math:`q(\\hat{x}_{n+1}|x_1, \\dots, x_n)`, the probability of\n        :math:`\\hat{x}_{n+1}` given context :math:`x_1, \\dots, x_n` according\n        to the target model, and :math:`p(\\hat{x}_{n+1}|x_1, \\dots, x_n)`, the\n        same conditional probability according to the draft model, the token\n        is accepted with probability:\n\n        .. math::\n            \\min\\left(1, \\frac{q(\\hat{x}_{n+1}|x_1, \\dots, x_n)}\n                           {p(\\hat{x}_{n+1}|x_1, \\dots, x_n)}\\right)\n\n        This implementation does not apply causality. When using the output,\n        if a token is rejected, subsequent tokens should not be used.\n\n        Returns a bool tensor of shape [batch_size, k] specifying which tokens\n        are accepted.\n        \"\"\"\n        batch_size, k, _ = draft_probs.shape\n        batch_indices = torch.arange(batch_size,\n                                     device=target_probs.device)[:, None]\n        probs_indicies = torch.arange(k, device=target_probs.device)\n\n        # shape [batch_size, k]\n        selected_draft_probs = draft_probs[batch_indices, probs_indicies,\n                                           draft_token_ids]\n\n        # shape [batch_size, k]\n        selected_target_probs = target_probs[batch_indices, probs_indicies,\n                                             draft_token_ids]\n\n        uniform_rand = torch.rand(batch_size,\n                                  k,\n                                  dtype=self.probs_dtype,\n                                  device=target_probs.device)\n        capped_ratio = torch.minimum(\n            selected_target_probs / selected_draft_probs,\n            torch.full((1, ), 1, device=target_probs.device))\n        # \u200b\u5bf9\u5e94\u200b\u8bba\u6587\u200b\u4e2d\u200b\u7b97\u6cd5\u200b\u516c\u5f0f\u200b\uff0c\u200b\u5982\u679c\u200b\u6982\u7387\u200b\u6bd4\u200b\u5c0f\u4e8e\u200b\u6bd4\u503c\u200b\uff0c\u200b\u5219\u200b\u63a5\u53d7\u200b\u8be5\u200b draft token\n        accepted = uniform_rand &lt; capped_ratio\n\n        return accepted\n</code></pre>"},{"location":"blog/llm%E6%8E%A8%E7%90%86vllm%E6%8A%95%E6%9C%BA%E9%87%87%E6%A0%B7%E5%AE%9E%E7%8E%B0/#\u95ee\u9898","title":"\u95ee\u9898\u200b\ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350","text":"<ul> <li>top-1 proposal and scoring \u200b\u548c\u200b Tree-attention \u200b\u7684\u200b\u533a\u522b\u200b\uff1f \u200ctop-1 proposal and scoring\u200c\uff1a\u200b\u57fa\u4e8e\u200b\u8d2a\u5a6a\u200b\u641c\u7d22\u200b(Greedy Search)\u200b\u7b56\u7565\u200b\uff0c\u200b\u6bcf\u200b\u4e00\u6b65\u200b\u53ea\u200b\u9009\u62e9\u200b\u6982\u7387\u200b\u6700\u9ad8\u200b\u7684\u200btoken\u200b\u4f5c\u4e3a\u200b\u8f93\u51fa\u200b\uff0c\u200b\u5c5e\u4e8e\u200b\u5355\u200b\u8def\u5f84\u200b\u89e3\u7801\u200b\u65b9\u5f0f\u200b\u3002 \u200cTree-attention\u200c\uff1a\u200b\u901a\u8fc7\u200b\u591a\u89e3\u200b\u7801\u5934\u200b(Medusa heads)\u200b\u751f\u6210\u200b\u591a\u4e2a\u200b\u5019\u9009\u200btoken\uff0c\u200b\u6784\u5efa\u200b\u6811\u72b6\u200b\u7ed3\u6784\u200b\u8def\u5f84\u200b\uff0c\u200b\u5e76\u200b\u5229\u7528\u200b\u6811\u200b\u6ce8\u610f\u529b\u200b\u673a\u5236\u200b\u5e76\u884c\u200b\u9a8c\u8bc1\u200b\u5019\u9009\u200b\u5e8f\u5217\u200b\uff0c\u200b\u5c5e\u4e8e\u200b\u591a\u8def\u5f84\u200b\u89e3\u7801\u200b\u65b9\u5f0f\u200b\u3002</li> </ul> <ul> <li>LLM\u200b\u63a8\u7406\u200b\uff1atp\u200b\u548c\u200bhead_num\u200b\u6709\u200b\u4ec0\u4e48\u200b\u5173\u7cfb\u200b</li> <li>brpc\u200b\u4e2d\u200b\u7684\u200bprofile\u200b\u5b9e\u73b0\u200b</li> <li>C++\u200b\u5f00\u53d1\u200b\u5982\u4f55\u200b\u6392\u67e5\u200b\u5185\u5b58\u200b\u6cc4\u9732\u200b\uff08\u200b\u589e\u957f\u200b\uff09</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/llm%E6%8E%A8%E7%90%86tp%E5%92%8Chead_num%E6%9C%89%E4%BB%80%E4%B9%88%E5%85%B3%E7%B3%BB/","title":"LLM\u200b\u63a8\u7406\u200b\uff1atp\u200b\u548c\u200bhead_num\u200b\u6709\u200b\u4ec0\u4e48\u200b\u5173\u7cfb","text":"<p>\u200b\u6839\u636e\u200b\u4e00\u4e2a\u200b\u62a5\u9519\u200b\u4fe1\u606f\u200b\uff0c\u200b\u5f15\u5165\u200b\u4e86\u200b\u4e00\u4e2a\u200bhead_num\u200b\u548c\u200btensor_para_size\u200b\u7684\u200b\u5173\u7cfb\u200b\u3002</p> Bash<pre><code>&gt; /usr/local/lib/python3.10/site-packages/lmdeploy/turbomind/deploy/target_model/base.py(75)__init__()                                           \n-&gt; assert self.model_config.head_num % self.tensor_para_size == 0\n(Pdb) p self.model_config\nModelConfig(model_name='', chat_template='', model_arch='InternVLChatModel', head_num=64, kv_head_num=8, hidden_units=8192, vocab_size=151674, embedding_size=151674, num_layer=80, inter_sizenorm_eps=1e-06, attn_bias=1, start_id=0, end_id=151645, size_per_head=128, group_size=64, weight_type='bfloat16', session_len=32768, tp=6, model_format='hf', expert_num=[], expert_inter_size=0, experts_per_token=0, moe_shared_gate=False, norm_topk_prob=False, routed_scale=1.0, topk_group=1, topk_method='greedy', moe_group_num=1, q_lora_rank=0, kv_lora_rank=0, qk_rope_dim=0, v_head_dim=0, tune_layer_num=1)\n</code></pre> <p>\u200b\u5f53\u200b\u6211\u200b\u8bbe\u7f6e\u200btensor_para_size = 6\u200b\u65f6\u200b\uff0c\u200b\u5728\u200b\u4f7f\u7528\u200blmdeploy\u200b\u90e8\u7f72\u200bInternVLChatModel\u200b\u6a21\u578b\u200b\u65f6\u200b\uff0c\u200b\u51fa\u73b0\u200b\u4e86\u200b<code>AssertionError: assert self.model_config.head_num % self.tensor_para_size == 0</code>\u200b\u7684\u200b\u9519\u8bef\u200b\u3002 \u200b\u4e5f\u5c31\u662f\u8bf4\u200b\uff0c<code>self.model_config.head_num</code>\uff0864\uff09\u200b\u4e0d\u80fd\u200b\u88ab\u200b<code>self.tensor_para_size</code>\u200b\u6574\u9664\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u4f7f\u7528\u200bpytorch backend\u200b\u4e5f\u200b\u4f1a\u200b\u62a5\u200b\u7c7b\u4f3c\u200b\u7684\u200b\u9519\u8bef\u200b\u3002</p> <p>\u200b\u4f7f\u7528\u200b\u7684\u200blmdeploy\u200b\u7248\u672c\u200b\uff1a </p>Bash<pre><code>lmdeploy                      0.7.0.post3\n</code></pre><p></p> <p>\u200b\u6a21\u578b\u200b\uff1a </p>Bash<pre><code>InternVL2_5-78B-MPO\n</code></pre><p></p> <p>\u200b\u4e3a\u4ec0\u4e48\u200b\u6709\u200b\u8fd9\u4e2a\u200b\u8981\u6c42\u200b\u5462\u200b\uff1f</p> <p>head_num\uff1a\u200b\u6307\u200b\u7684\u200b\u662f\u200b\u6a21\u578b\u200b\u4e2d\u200b\u6ce8\u610f\u529b\u200b\u673a\u5236\u200b\u7684\u200b\u5934\u200b\u7684\u200b\u6570\u91cf\u200b\u3002\u200b\u591a\u5934\u200b\u6ce8\u610f\u529b\u200b\u673a\u5236\u200b\u5141\u8bb8\u200b\u6a21\u578b\u200b\u5728\u200b\u4e0d\u540c\u200b\u7684\u200b\u5b50\u200b\u7a7a\u95f4\u200b\u4e2d\u200b\u5b66\u4e60\u200b\u4e0d\u540c\u200b\u7684\u200b\u6ce8\u610f\u529b\u200b\u5206\u5e03\u200b\u3002</p> <p>kv_head_num\uff1a\u200b\u6307\u200b\u7684\u200b\u662f\u200b\u952e\u200b\u548c\u200b\u503c\u200b\uff08key-value\uff09\u200b\u7684\u200b\u5934\u200b\u7684\u200b\u6570\u91cf\u200b\uff0c\u200b\u6709\u65f6\u200b\u5728\u200b\u6a21\u578b\u200b\u4f18\u5316\u200b\u65f6\u200b\u4e0e\u200bhead_num\u200b\u4e0d\u540c\u200b\u3002</p> <p>tensor_para_size\uff1a\u200b\u8868\u793a\u200b\u5f20\u91cf\u200b\u5e76\u884c\u200b\u7684\u200b\u5927\u5c0f\u200b\uff0c\u200b\u5373\u200b\u6a21\u578b\u200b\u5728\u200b\u591a\u200b\u8bbe\u5907\u200b\u4e0a\u200b\u5e76\u884c\u200b\u5316\u65f6\u200b\u7684\u200b\u5207\u5206\u200b\u6570\u91cf\u200b\u3002</p> Python<pre><code># head_num is divisble by tp but kv_head_num is not\n# and tp is divisble by kv_head_num\nassert self.model_config.head_num % self.tensor_para_size == 0\nself.repeat_kv = 0\nif (self.tensor_para_size &gt; self.model_config.kv_head_num\n        and self.tensor_para_size % self.model_config.kv_head_num == 0):\n    self.repeat_kv = (self.tensor_para_size // self.model_config.kv_head_num)\n    self.model_config.kv_head_num = self.tensor_para_size\n\nself.model_config.verify()\nassert self.model_config.kv_head_num % self.tensor_para_size == 0\n</code></pre> <p>\u200b\u5728\u200bpytorch backend\u200b\u4e2d\u200b\uff0c\u200b\u4e5f\u200b\u6709\u200b\u68c0\u67e5\u200b\u903b\u8f91\u200b\uff1a </p>Python<pre><code># https://github1s.com/InternLM/lmdeploy/blob/v0.7.1/lmdeploy/pytorch/config.py#L153-L158\n# check for tp\nassert model_config.num_attention_heads % tp == 0\nif model_config.num_key_value_heads &gt;= tp:\n    assert model_config.num_key_value_heads % tp == 0\nelse:\n    assert tp % model_config.num_key_value_heads == 0\n</code></pre><p></p> Bash<pre><code>ModelConfig(hidden_size=8192, num_layers=80, num_attention_heads=64, num_key_value_heads=8, bos_token_id=151643, eos_token_id=151645, head_dim=128, k_head_dim=128, v_head_dim=128, sliding_window=-1, dtype=torch.float16, vocab_size=151674, \n</code></pre> <p>tp\u200b\u7684\u200b\u503c\u200b\u9664\u4e86\u200b\u548c\u200bhead_num\u200b\u6709\u5173\u200b\uff0c\u200b\u548c\u200bkv_head_num\u200b\u4e5f\u200b\u6709\u5173\u200b\u3002</p> <p>\u200b\u5728\u200bTP\u200b\u5e76\u884c\u200b\u573a\u666f\u200b\u4e0b\u200b\uff0chidden_state\u200b\u8f93\u5165\u200b\u4f1a\u200b\u7ecf\u8fc7\u200bQKV\u200b\u6295\u5f71\u200b\u77e9\u9635\u200b\u8fd0\u7b97\u200b\uff0c\u200b\u901a\u8fc7\u200b\u5c06\u200b\u591a\u5934\u200b\u6ce8\u610f\u529b\u200b\u4e2d\u200b\u7684\u200bhead_num\u200b\u7ef4\u5ea6\u200b\u5207\u5206\u200b\u5230\u200b\u4e0d\u540c\u200b\u8ba1\u7b97\u200b\u8bbe\u5907\u200b\u4e0a\u200b\u3002\u200b\u4f8b\u5982\u200b\u5f53\u200bTP_size=8\u200b\u65f6\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u8bbe\u5907\u200b\u4ec5\u200b\u5904\u7406\u200b\u603b\u200b\u5934\u6570\u200b\u7684\u200b1/8\u200b\u90e8\u5206\u200b\u3002\u200b\u7ecf\u8fc7\u200b\u77e9\u9635\u200b\u8fd0\u7b97\u200b\u540e\u200b\uff0c\u200b\u5404\u200b\u8bbe\u5907\u200b\u72ec\u7acb\u200b\u5904\u7406\u200b\u5206\u7247\u200b\u540e\u200b\u7684\u200bQ/K/V\u200b\u77e9\u9635\u200b\uff08shape\u200b\u4e3a\u200b(bs, head_num/8, seq_len, head_dim)\uff09\uff0c\u200b\u6700\u540e\u200b\u901a\u8fc7\u200bAllReduce\u200b\u64cd\u4f5c\u200b\u5408\u5e76\u200b\u5404\u200b\u8bbe\u5907\u200b\u7684\u200b\u8ba1\u7b97\u7ed3\u679c\u200b\u200c</p> <p>\u200b\u6bcf\u4e2a\u200b\u8bbe\u5907\u200b\u5904\u7406\u200b\u76f8\u540c\u200b\u6bd4\u4f8b\u200b\u7684\u200b\u6ce8\u610f\u529b\u200b\u5934\u200b\uff0c\u200b\u907f\u514d\u200b\u4e86\u200b\u663e\u5b58\u200b\u548c\u200b\u7b97\u529b\u200b\u7684\u200b\u4e0d\u200b\u5747\u8861\u200b\u5206\u914d\u200b\u3002</p> <p>https://github1s.com/InternLM/lmdeploy/blob/v0.7.1/lmdeploy/turbomind/deploy/module.py\u200b\u4e2d\u200b\u4f1a\u200b\u8c03\u7528\u200bsave_split\u200b\u51fd\u6570\u200b\uff0c\u200b\u5212\u5206\u200b\u3002</p>"},{"location":"blog/llm%E6%8E%A8%E7%90%86tp%E5%92%8Chead_num%E6%9C%89%E4%BB%80%E4%B9%88%E5%85%B3%E7%B3%BB/#internvl2_5-78b-mpo\u6a21\u578b\u7ed3\u6784","title":"InternVL2_5-78B-MPO\u200b\u6a21\u578b\u200b\u7ed3\u6784\u200b\uff1a","text":"<p>https://huggingface.co/OpenGVLab/InternVL2_5-78B#quick-start</p> <p>\u201cViT-MLP-LLM\u201d\u200b\u67b6\u6784\u200b ViT\uff1aVision Transformer MLP\uff1a\u200b\u591a\u5c42\u200b\u611f\u77e5\u673a\u200b LLM\uff1a\u200b\u5927\u578b\u200b\u8bed\u8a00\u200b\u6a21\u578b\u200b\uff08 InternLM 2.5 \u3001 Qwen 2.5\uff09</p> <p></p> <p>\u200b\u4e0e\u200b\u4e4b\u524d\u200b\u7684\u200b\u7248\u672c\u200b\u4e00\u6837\u200b\uff0c\u200b\u6211\u4eec\u200b\u5e94\u7528\u200b\u4e86\u200bpixel unshuffle operation\uff0c\u200b\u5c06\u200b\u89c6\u89c9\u200btokens\u200b\u7684\u200b\u6570\u91cf\u200b\u51cf\u5c11\u200b\u5230\u200b\u539f\u6765\u200b\u7684\u200b\u56db\u5206\u4e4b\u4e00\u200b\u3002\u200b\u6b64\u5916\u200b\uff0c\u200b\u6211\u4eec\u200b\u91c7\u7528\u200b\u4e86\u200b\u4e0e\u200b InternVL 1.5 \u200b\u7c7b\u4f3c\u200b\u7684\u200b\u52a8\u6001\u200b\u5206\u8fa8\u7387\u200b\u7b56\u7565\u200b\uff0c\u200b\u5c06\u200b\u56fe\u50cf\u200b\u5206\u5272\u200b\u6210\u200b 448\u00d7448 \u200b\u50cf\u7d20\u200b\u7684\u200b\u74e6\u7247\u200b\uff08tiles\uff09\u3002\u200b\u4ece\u200b InternVL 2.0 \u200b\u5f00\u59cb\u200b\u7684\u200b\u5173\u952e\u200b\u533a\u522b\u200b\u5728\u4e8e\u200b\uff0c\u200b\u6211\u4eec\u200b\u8fd8\u200b\u5f15\u5165\u200b\u4e86\u200b\u5bf9\u200b\u591a\u200b\u56fe\u50cf\u200b\u548c\u200b\u89c6\u9891\u200b\u6570\u636e\u200b\u7684\u200b\u652f\u6301\u200b\u3002</p> <p>\u200b\u4e0a\u6587\u200b\u8bb2\u200b\u5230\u200b\uff0cFP8 \u200b\u6a21\u578b\u200b\u4e4b\u6240\u4ee5\u200b\u65e0\u6cd5\u200b TP32 \u200b\u8fd0\u884c\u200b\uff0c\u200b\u4e3b\u8981\u200b\u56e0\u4e3a\u200b DeepSeek R1/V3 \u200b\u6a21\u578b\u200b\u4fdd\u5b58\u200b\u7684\u200b\u53c2\u6570\u200b\u662f\u200b FP8 128x128 \u200b\u91cf\u5316\u200b\u7684\u200b\u3002Attention \u200b\u8fd8\u597d\u200b\uff0c128 \u200b\u4e2a\u5934\u200b\u505a\u200b TP16 \u200b\u6216\u8005\u200b TP32 \u200b\u90fd\u200b\u6ca1\u200b\u95ee\u9898\u200b\uff0c\u200b\u95ee\u9898\u200b\u4e3b\u8981\u200b\u51fa\u200b\u5728\u200b\u4e13\u5bb6\u200b\u7684\u200b\u8ba1\u7b97\u200b\u4e0a\u200b\u3002 https://zhuanlan.zhihu.com/p/1895040317134198573</p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>LLM\u200b\u63a8\u7406\u200b\uff1a\u200b\u91cf\u5316\u200b\u7b97\u6cd5\u200b\u6742\u8bb0\u200b</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> <li>\u200b\u4ece\u200bDeepseek\u200b\u5f00\u6e90\u200b\u5e93\u200b3FS\u200b\u4e2d\u200b\u5b66\u4e60\u200bfuse\u200b\u7684\u200b\u4f7f\u7528\u200b-\u200b\u5982\u4f55\u200b\u5f00\u53d1\u200b\u4e00\u4e2a\u200b\u6587\u4ef6\u7cfb\u7edf\u200b\uff08\u200b\u4e00\u200b\uff09</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> </ul>"},{"location":"blog/llm%E6%8E%A8%E7%90%86%E9%87%87%E7%94%A8%E6%8A%95%E6%9C%BA%E9%87%87%E6%A0%B7%E5%8A%A0%E9%80%9F%E6%8E%A8%E7%90%86%E8%AF%91/","title":"LLM\u200b\u63a8\u7406\u200b\uff1a\u200b\u91c7\u7528\u200b\u6295\u673a\u200b\u91c7\u6837\u200b\u52a0\u901f\u200b\u63a8\u7406\u200b[\u200b\u8bd1\u200b]","text":""},{"location":"blog/llm%E6%8E%A8%E7%90%86%E9%87%87%E7%94%A8%E6%8A%95%E6%9C%BA%E9%87%87%E6%A0%B7%E5%8A%A0%E9%80%9F%E6%8E%A8%E7%90%86%E8%AF%91/#\u63a8\u6d4b\u89e3\u7801","title":"\u63a8\u6d4b\u200b\u89e3\u7801","text":"<p>\u200b\u5173\u4e8e\u200b\u6295\u673a\u200b\u91c7\u6837\u200b\u662f\u200b\u4ec0\u4e48\u200b\u8fd9\u91cc\u200b\u5c31\u200b\u4e0d\u200b\u8d58\u8ff0\u200b\u4e86\u200b\uff0c\u200b\u53c2\u8003\u200b\u8fd9\u7bc7\u200b\u5927\u4f6c\u200b\u7684\u200b\u6587\u7ae0\u200b\u5927\u200b\u6a21\u578b\u200b\u63a8\u7406\u200b\u5999\u62db\u200b\u2014\u200b\u6295\u673a\u200b\u91c7\u6837\u200b\uff08Speculative Decoding\uff09,\u200b\u89e3\u91ca\u200b\u7684\u200b\u5f88\u200b\u6e05\u6670\u200b\u3002</p> <p>vllm\u200b\u6846\u67b6\u200b\u5bf9\u200b\u6295\u673a\u200b\u91c7\u6837\u200b\uff08Speculative Decoding\uff09\u200b\u8fdb\u884c\u200b\u4e86\u200b\u652f\u6301\u200b, \u200b\u89c1\u200bspec_decode\u3002</p> <p>\u200b\u6295\u673a\u200b\u91c7\u6837\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u7ffb\u8bd1\u200b\u4e3a\u200b\u63a8\u6d4b\u200b\u89e3\u7801\u200b\uff0c\u200b\u6211\u200b\u89c9\u5f97\u200b\u63a8\u6d4b\u200b\u89e3\u7801\u200b\u4f1a\u200b\u66f4\u52a0\u200b\u5bb9\u6613\u200b\u7406\u89e3\u200b\u4e00\u4e9b\u200b\uff0c\u200b\u4e0b\u6587\u200b\u91c7\u7528\u200b\u63a8\u6d4b\u200b\u89e3\u7801\u200b\u3002</p> <p>\u200b\u63a8\u6d4b\u200b\u89e3\u7801\u200b\u662f\u200b\u4e00\u79cd\u200b\u63a8\u7406\u200b\u4f18\u5316\u200b\u6280\u672f\u200b\uff0c\u200b\u5b83\u200b\u5728\u200b\u751f\u6210\u200b\u5f53\u524d\u200bToken\u200b\u7684\u200b\u540c\u65f6\u200b\uff0c\u200b\u5bf9\u200b\u672a\u6765\u200b\u7684\u200bToken\u200b\u8fdb\u884c\u200b\u6709\u200b\u6839\u636e\u200b\u7684\u200b\u731c\u6d4b\u200b\uff0c\u200b\u8fd9\u200b\u4e00\u5207\u90fd\u5728\u200b\u4e00\u6b21\u200b\u524d\u5411\u200b\u4f20\u64ad\u200b\u4e2d\u200b\u5b8c\u6210\u200b\u3002\u200b\u5b83\u200b\u878d\u5165\u200b\u4e86\u200b\u4e00\u79cd\u200b\u9a8c\u8bc1\u200b\u673a\u5236\u200b\uff0c\u200b\u4ee5\u200b\u786e\u4fdd\u200b\u8fd9\u4e9b\u200b\u63a8\u6d4b\u200b\u51fa\u200b\u7684\u200bToken\u200b\u7684\u200b\u6b63\u786e\u6027\u200b\uff0c\u200b\u4ece\u800c\u200b\u4fdd\u8bc1\u200b\u63a8\u6d4b\u200b\u89e3\u7801\u200b\u7684\u200b\u6574\u4f53\u200b\u8f93\u51fa\u200b\u4e0e\u200b\u666e\u901a\u200b\u89e3\u7801\u200b\u7684\u200b\u8f93\u51fa\u200b\u76f8\u540c\u200b\u3002\u200b\u4f18\u5316\u200b\u5927\u200b\u8bed\u8a00\u200b\u6a21\u578b\u200b\uff08LLMs\uff09\u200b\u7684\u200b\u63a8\u7406\u200b\u6210\u672c\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u8bf4\u200b\u662f\u200b\u964d\u4f4e\u200b\u751f\u6210\u5f0f\u200b\u4eba\u5de5\u667a\u80fd\u200b\u6210\u672c\u200b\u5e76\u200b\u63d0\u9ad8\u200b\u5176\u200b\u5e94\u7528\u7387\u200b\u7684\u200b\u6700\u200b\u5173\u952e\u56e0\u7d20\u200b\u4e4b\u4e00\u200b\u3002\u200b\u4e3a\u4e86\u200b\u5b9e\u73b0\u200b\u8fd9\u4e00\u200b\u76ee\u6807\u200b\uff0c\u200b\u6709\u200b\u5404\u79cd\u200b\u63a8\u7406\u200b\u4f18\u5316\u200b\u6280\u672f\u200b\u53ef\u7528\u200b\uff0c\u200b\u5305\u62ec\u200b\u81ea\u5b9a\u4e49\u200b\u5185\u6838\u200b\u3001\u200b\u8f93\u5165\u200b\u8bf7\u6c42\u200b\u7684\u200b\u52a8\u6001\u200b\u6279\u5904\u7406\u200b\u4ee5\u53ca\u200b\u5927\u578b\u200b\u6a21\u578b\u200b\u7684\u200b\u91cf\u5316\u200b\u3002</p> <p>\u200b\u53ef\u4ee5\u200b\u8089\u773c\u200b\u4e0a\u200b\u76f4\u89c2\u200b\u89c2\u5bdf\u200b\u54c8\u200b\u6548\u679c\u200b\uff1a </p> <p>\u200b\u5728\u200b\u5b9e\u9a8c\u200b\u4e2d\u200b\uff0c\u200b\u4e0e\u975e\u200b\u63a8\u6d4b\u200b\u89e3\u7801\u200b\u7248\u672c\u200b\u76f8\u6bd4\u200b\uff0c\u200b\u63a8\u6d4b\u200b\u89e3\u7801\u200b\u7248\u672c\u200b\u5728\u200bLlama2 13B\u200b\u804a\u5929\u200b\u6a21\u578b\u200b\u4e0a\u200b\u7684\u200b\u901f\u5ea6\u200b\u5feb\u8fd1\u200b\u4e00\u500d\u200b\uff0c\u200b\u5728\u200bGranite 20B\u200b\u4ee3\u7801\u200b\u6a21\u578b\u200b\u4e0a\u200b\u7684\u200b\u901f\u5ea6\u200b\u5feb\u8fd1\u200b\u4e24\u500d\u200b\u3002</p> <p>\u200b\u63a8\u6d4b\u200b\u89e3\u7801\u200b\u6709\u200b\u4e24\u79cd\u200b\u4e3b\u8981\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u4e00\u79cd\u200b\u662f\u200b\u5229\u7528\u200b\u8f83\u200b\u5c0f\u200b\u7684\u200b\u6a21\u578b\u200b\uff08\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5c06\u200bLlama 7B\u200b\u7528\u4f5c\u200bLlama 70B\u200b\u7684\u200b\u63a8\u6d4b\u200b\u5668\u200b\uff09\uff0c\u200b\u53e6\u200b\u4e00\u79cd\u200b\u662f\u200b\u6dfb\u52a0\u200b\u63a8\u6d4b\u200b\u5934\u200b\uff08\u200b\u5e76\u200b\u5bf9\u200b\u5176\u200b\u8fdb\u884c\u200b\u8bad\u7ec3\u200b\uff09\u3002\u200b\u5728\u200bIBM\u200b\u7684\u200bPyTorch\u200b\u56e2\u961f\u200b\u7684\u200b\u5b9e\u9a8c\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u53d1\u73b0\u200b\u6dfb\u52a0\u200b\u63a8\u6d4b\u200b\u5934\u200b\u7684\u200b\u65b9\u6cd5\u200b\u5728\u200b\u6a21\u578b\u200b\u8d28\u91cf\u200b\u548c\u200b\u5ef6\u8fdf\u200b\u6539\u5584\u200b\u65b9\u9762\u200b\u90fd\u200b\u66f4\u4e3a\u200b\u6709\u6548\u200b\u3002</p>"},{"location":"blog/llm%E6%8E%A8%E7%90%86%E9%87%87%E7%94%A8%E6%8A%95%E6%9C%BA%E9%87%87%E6%A0%B7%E5%8A%A0%E9%80%9F%E6%8E%A8%E7%90%86%E8%AF%91/#\u6548\u7387\u8bf4\u660e","title":"\u6548\u7387\u200b\u8bf4\u660e","text":"<p>\u200b\u589e\u52a0\u200b\u63a8\u6d4b\u200b\u89e3\u7801\u200b\u7684\u200b\u6548\u7387\u200b\u8bf4\u660e\u200b\uff1a</p> <ul> <li> <p>\u200b\u6295\u673a\u8005\u200b\u67b6\u6784\u200b\uff1a\u200b\u76ee\u524d\u200b\u7684\u200b\u65b9\u6cd5\u200b\u5141\u8bb8\u200b\u4fee\u6539\u200b\u5934\u200b\u7684\u200b\u6570\u91cf\u200b\uff0c\u200b\u8fd9\u200b\u5bf9\u5e94\u200b\u4e8e\u200b\u8f93\u51fa\u200b\u7684\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u9009\u62e9\u200b\u7684\u200btoken\u200b\u6570\u91cf\u200b\u3002\u200b\u589e\u52a0\u200b\u5934\u200b\u7684\u200b\u6570\u91cf\u200b\u4e5f\u200b\u4f1a\u200b\u589e\u52a0\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u989d\u5916\u200b\u8ba1\u7b97\u200b\u91cf\u200b\u548c\u200b\u8bad\u7ec3\u200b\u7684\u200b\u590d\u6742\u6027\u200b\u3002\u200b\u5728\u5b9e\u8df5\u4e2d\u200b\uff0c\u200b\u5bf9\u4e8e\u200b\u8bed\u8a00\u200b\u6a21\u578b\u200b\uff0c\u200b\u6211\u4eec\u200b\u53d1\u73b0\u200b3 - 4\u200b\u4e2a\u5934\u200b\u5728\u200b\u5b9e\u9645\u200b\u5e94\u7528\u200b\u4e2d\u200b\u6548\u679c\u200b\u826f\u597d\u200b\uff0c\u200b\u800c\u200b\u4ee3\u7801\u200b\u6a21\u578b\u200b\u5219\u200b\u53ef\u4ee5\u200b\u4ece\u200b6 - 8\u200b\u4e2a\u5934\u200b\u4e2d\u200b\u83b7\u76ca\u200b\u3002</p> </li> <li> <p>\u200b\u8ba1\u7b97\u200b\u91cf\u200b\uff1a\u200b\u589e\u52a0\u200b\u5934\u200b\u7684\u200b\u6570\u91cf\u200b\u4f1a\u200b\u5728\u200b\u4e24\u4e2a\u200b\u7ef4\u5ea6\u200b\u4e0a\u200b\u5bfc\u81f4\u200b\u8ba1\u7b97\u200b\u91cf\u200b\u589e\u52a0\u200b\uff0c\u200b\u4e00\u662f\u200b\u5355\u6b21\u200b\u524d\u200b\u5411\u200b\u4f20\u64ad\u200b\u7684\u200b\u5ef6\u8fdf\u200b\u589e\u52a0\u200b\uff0c\u200b\u4e8c\u662f\u200b\u5904\u7406\u200b\u591a\u4e2a\u200bToken\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u8ba1\u7b97\u200b\u91cf\u200b\u589e\u52a0\u200b\u3002\u200b\u5982\u679c\u200b\u63a8\u6d4b\u200b\u5668\u200b\u5728\u200b\u589e\u52a0\u200b\u5934\u200b\u7684\u200b\u6570\u91cf\u200b\u540e\u200b\u51c6\u786e\u7387\u200b\u4e0d\u9ad8\u200b\uff0c\u200b\u5c31\u200b\u4f1a\u200b\u5bfc\u81f4\u200b\u8ba1\u7b97\u8d44\u6e90\u200b\u6d6a\u8d39\u200b\uff0c\u200b\u589e\u52a0\u200b\u5ef6\u8fdf\u200b\u5e76\u200b\u964d\u4f4e\u200b\u541e\u5410\u91cf\u200b\u3002</p> </li> <li> <p>\u200b\u5185\u5b58\u200b\uff1a\u200b\u6bcf\u6b21\u200b\u524d\u5411\u200b\u4f20\u9012\u200b\u90fd\u200b\u9700\u8981\u200b\u4e0e\u200b\u9ad8\u5e26\u5bbd\u200b\u5185\u5b58\u200b\uff08HBM\uff09\u200b\u8fdb\u884c\u200b\u5f80\u8fd4\u200b\u901a\u4fe1\u200b\uff0c\u200b\u589e\u52a0\u200b\u7684\u200b\u8ba1\u7b97\u200b\u91cf\u200b\u7531\u6b64\u200b\u5f97\u5230\u200b\u62b5\u6d88\u200b\u3002\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u5982\u679c\u200b\u6211\u4eec\u200b\u63d0\u524d\u200b\u6b63\u786e\u200b\u9884\u6d4b\u200b3\u200b\u4e2a\u200bToken\uff0c\u200b\u90a3\u4e48\u200b\u5c31\u200b\u8282\u7701\u200b\u4e86\u200b\u4e09\u6b21\u200b\u4e0e\u200bHBM\u200b\u7684\u200b\u5f80\u8fd4\u200b\u65f6\u95f4\u200b\u3002</p> </li> </ul> <p>\u200b\u6211\u4eec\u200b\u77e5\u9053\u200bdecode\u200b\u9636\u6bb5\u200b\u662f\u200b\u5185\u5b58\u200b\u9650\u5236\u200b\uff08Memory Bound\uff09\u200b\u7684\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u800c\u200b\u63a8\u6d4b\u200b\u89e3\u7801\u200b\uff0c\u200b\u901a\u8fc7\u200b\u663e\u8457\u200b\u63d0\u5347\u200b\u8ba1\u7b97\u200b\u8bbf\u5b58\u200b\u6bd4\u200b\uff0c\u200b\u5e76\u4e14\u200b\u4fdd\u8bc1\u200b\u548c\u200b\u4f7f\u7528\u200b\u539f\u59cb\u200b\u6a21\u578b\u200b\u7684\u200b\u91c7\u6837\u200b\u5206\u5e03\u200b\u5b8c\u5168\u76f8\u540c\u200b\u3002</p>"},{"location":"blog/llm%E6%8E%A8%E7%90%86%E9%87%87%E7%94%A8%E6%8A%95%E6%9C%BA%E9%87%87%E6%A0%B7%E5%8A%A0%E9%80%9F%E6%8E%A8%E7%90%86%E8%AF%91/#\u63a8\u6d4b\u5668\u67b6\u6784","title":"\u63a8\u6d4b\u200b\u5668\u200b\u67b6\u6784","text":"<p>\u200b\u6211\u4eec\u200b\u786e\u5b9a\u200b\u8bed\u8a00\u200b\u6a21\u578b\u200b\u4f7f\u7528\u200b3 - 4\u200b\u4e2a\u200b\u6ce8\u610f\u529b\u200b\u5934\u200b\uff0c\u200b\u4ee3\u7801\u200b\u6a21\u578b\u200b\u4f7f\u7528\u200b6 - 8\u200b\u4e2a\u200b\u6ce8\u610f\u529b\u200b\u5934\u200b\u3002\u200b\u5728\u200b\u4ece\u200b70\u200b\u4ebf\u5230\u200b200\u200b\u4ebf\u200b\u53c2\u6570\u200b\u89c4\u6a21\u200b\u4e0d\u200b\u7b49\u200b\u7684\u200b\u4e0d\u540c\u200b\u6a21\u578b\u200b\u4e2d\u200b\uff0c\u200b\u4e0e\u975e\u200b\u63a8\u6d4b\u200b\u89e3\u7801\u200b\u76f8\u6bd4\u200b\uff0c\u200b\u6211\u4eec\u200b\u89c2\u5bdf\u200b\u5230\u200b\u5ef6\u8fdf\u200b\u663e\u8457\u200b\u6539\u5584\u200b\uff0c\u200b\u4e14\u200b\u6ca1\u6709\u200b\u541e\u5410\u91cf\u200b\u635f\u5931\u200b\u3002\u200b\u6211\u4eec\u200b\u5f00\u59cb\u200b\u6ce8\u610f\u200b\u5230\u200b\uff0c\u200b\u6279\u91cf\u200b\u5927\u5c0f\u200b\u8d85\u8fc7\u200b64\u200b\u65f6\u200b\uff0c\u200b\u541e\u5410\u91cf\u200b\u4f1a\u200b\u4e0b\u964d\u200b\uff0c\u200b\u4f46\u200b\u8fd9\u79cd\u200b\u60c5\u51b5\u200b\u5728\u200b\u5b9e\u9645\u200b\u4e2d\u200b\u5f88\u5c11\u200b\u53d1\u751f\u200b\u3002</p> <p>\u200b\u7f8e\u675c\u838e\u200b\uff08Medusa\uff09\u200b\u63a8\u7406\u200b\u6846\u67b6\u200b\u4f7f\u200b\u63a8\u6d4b\u200b\u89e3\u7801\u200b\u6d41\u884c\u8d77\u6765\u200b\uff1b\u200b\u5176\u200b\u65b9\u6cd5\u200b\u662f\u200b\u5728\u200b\u73b0\u6709\u200b\u6a21\u578b\u200b\u4e0a\u200b\u6dfb\u52a0\u200b\u4e00\u4e2a\u5934\u200b\uff0c\u200b\u7136\u540e\u200b\u5bf9\u200b\u5176\u200b\u8fdb\u884c\u200b\u8bad\u7ec3\u200b\u4ee5\u200b\u8fdb\u884c\u200b\u63a8\u6d4b\u200b\u3002\u200b\u6211\u4eec\u200b\u901a\u8fc7\u200b\u4f7f\u200b\u201c\u200b\u5934\u200b\u201d\u200b\u5448\u200b\u5206\u5c42\u200b\u7ed3\u6784\u200b\u6765\u200b\u4fee\u6539\u200b\u7f8e\u675c\u838e\u200b\u67b6\u6784\u200b\uff0c\u200b\u5176\u4e2d\u200b\u6bcf\u4e2a\u200b\u5934\u200b\u9636\u6bb5\u200b\u9884\u6d4b\u200b\u4e00\u4e2a\u200b\u5355\u4e00\u200b\u7684\u200bToken\uff0c\u200b\u7136\u540e\u200b\u5c06\u200b\u5176\u200b\u8f93\u5165\u200b\u5230\u200b\u4e0b\u200b\u4e00\u4e2a\u5934\u200b\u9636\u6bb5\u200b\u3002\u200b\u8fd9\u4e9b\u200b\u591a\u200b\u9636\u6bb5\u200b\u5934\u200b\u5982\u4e0b\u200b\u56fe\u200b\u6240\u793a\u200b\u3002\u200b\u6211\u4eec\u200b\u6b63\u5728\u200b\u63a2\u7d22\u200b\u901a\u8fc7\u200b\u5728\u200b\u591a\u4e2a\u200b\u9636\u6bb5\u200b\u548c\u200b\u57fa\u7840\u200b\u6a21\u578b\u200b\u4e4b\u95f4\u200b\u5171\u4eab\u200b\u5d4c\u5165\u200b\u8868\u200b\uff08embeddings table\uff09\u200b\u6765\u200b\u6700\u5c0f\u5316\u200b\u5d4c\u5165\u200b\u8868\u200b\u7684\u200b\u65b9\u6cd5\u200b\u3002</p> <p></p> <p></p>"},{"location":"blog/llm%E6%8E%A8%E7%90%86%E9%87%87%E7%94%A8%E6%8A%95%E6%9C%BA%E9%87%87%E6%A0%B7%E5%8A%A0%E9%80%9F%E6%8E%A8%E7%90%86%E8%AF%91/#\u63a8\u7406\u5b9e\u73b0\u65b9\u6cd5","title":"\u63a8\u7406\u200b\u5b9e\u73b0\u200b\u65b9\u6cd5","text":"<p>\u200b\u6211\u4eec\u200b\u5728\u200b\u5185\u90e8\u200b\u751f\u4ea7\u200b\u73af\u5883\u4e2d\u8fd0\u884c\u200bIBM TGIS\uff0c\u200b\u8be5\u200b\u73af\u5883\u200b\u5177\u6709\u200b\u8bf8\u5982\u200b\u8fde\u7eed\u200b\u6279\u5904\u7406\u200b\u3001\u200b\u878d\u5408\u200b\u5185\u6838\u200b\u548c\u200b\u91cf\u5316\u200b\u5185\u6838\u200b\u7b49\u200b\u4f18\u5316\u200b\u63aa\u65bd\u200b\u3002\u200b\u4e3a\u4e86\u200b\u5728\u200bTGIS\u200b\u4e2d\u200b\u5b9e\u73b0\u200b\u63a8\u6d4b\u200b\u89e3\u7801\u200b\uff0c\u200b\u6211\u4eec\u200b\u4fee\u6539\u200b\u4e86\u200b\u6765\u81ea\u200bvLLM\u200b\u7684\u200b\u5206\u9875\u200b\u6ce8\u610f\u529b\u200b\u5185\u6838\u200b\u3002\u200b\u63a5\u4e0b\u6765\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u63cf\u8ff0\u200b\u63a8\u7406\u200b\u5f15\u64ce\u200b\u4e3a\u200b\u5b9e\u73b0\u200b\u63a8\u6d4b\u200b\u89e3\u7801\u200b\u6240\u200b\u505a\u200b\u7684\u200b\u5173\u952e\u200b\u66f4\u6539\u200b\u3002</p> <p>\u200b\u63a8\u6d4b\u200b\u89e3\u7801\u200b\u57fa\u4e8e\u200b\u8fd9\u6837\u200b\u4e00\u4e2a\u200b\u524d\u63d0\u200b\uff0c\u200b\u5373\u200b\u6a21\u578b\u200b\u8db3\u591f\u200b\u5f3a\u5927\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5728\u200b\u5355\u6b21\u200b\u524d\u200b\u5411\u200b\u4f20\u64ad\u200b\u4e2d\u200b\u9884\u6d4b\u200b\u591a\u4e2a\u200bToken\u3002\u200b\u7136\u800c\u200b\uff0c\u200b\u5f53\u524d\u200b\u7684\u200b\u63a8\u7406\u200b\u670d\u52a1\u5668\u200b\u7ecf\u8fc7\u200b\u4f18\u5316\u200b\uff0c\u200b\u6bcf\u6b21\u200b\u53ea\u80fd\u200b\u9884\u6d4b\u200b\u4e00\u4e2a\u200bToken\u3002\u200b\u5728\u200b\u6211\u4eec\u200b\u7684\u200b\u65b9\u6cd5\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5728\u200b\u5927\u200b\u8bed\u8a00\u200b\u6a21\u578b\u200b\uff08LLM\uff09\u200b\u4e0a\u200b\u9644\u52a0\u200b\u591a\u4e2a\u200b\u63a8\u6d4b\u200b\u5934\u200b\uff08\u200b\u9664\u4e86\u200b\u901a\u5e38\u200b\u7684\u200b\u90a3\u4e2a\u200b\uff09\uff0c\u200b\u4ee5\u200b\u9884\u6d4b\u200b\u7b2c\u200bN+1\u3001N+2\u3001N+3\u2026\u2026\u200b\u4e2a\u200bToken\u3002\u200b\u4f8b\u5982\u200b\uff0c3\u200b\u4e2a\u200b\u63a8\u6d4b\u200b\u5934\u200b\u5c06\u200b\u9884\u6d4b\u200b3\u200b\u4e2a\u200b\u989d\u5916\u200b\u7684\u200bToken\u3002\u200b\u5728\u200b\u63a8\u7406\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u5b9e\u73b0\u200b\u6548\u7387\u200b\u548c\u200b\u51c6\u786e\u6027\u200b\u5b58\u5728\u200b\u4e24\u4e2a\u200b\u6311\u6218\u200b\u2014\u2014\u200b\u4e00\u662f\u200b\u5728\u200b\u4e0d\u200b\u590d\u5236\u200b\u952e\u503c\u200b\u7f13\u5b58\u200b\uff08KV-cache\uff09\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u8fdb\u884c\u200b\u9884\u6d4b\u200b\uff0c\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u662f\u200b\u9a8c\u8bc1\u200b\u9884\u6d4b\u200b\u7ed3\u679c\u200b\u662f\u5426\u200b\u4e0e\u200b\u539f\u59cb\u200b\u6a21\u578b\u200b\u7684\u200b\u8f93\u51fa\u200b\u5339\u914d\u200b\u3002</p> <p>\u200b\u5728\u200b\u5178\u578b\u200b\u7684\u200b\u751f\u6210\u200b\u5faa\u73af\u200b\u4e2d\u200b\uff0c\u200b\u63d0\u793a\u200b\u8bcd\u200b\u5728\u200b\u5355\u4e2a\u200b\u524d\u5411\u200b\u6b65\u9aa4\u200b\u4e2d\u200b\u5904\u7406\u5b8c\u6bd5\u200b\u540e\u200b\uff0c\u200b\u957f\u5ea6\u200b\u4e3a\u200b1\u200b\u7684\u200b\u5e8f\u5217\u200b\uff08\u200b\u9884\u6d4b\u200b\u7684\u200b\u4e0b\u200b\u4e00\u4e2a\u200bToken\uff09\u200b\u4f1a\u200b\u4e0e\u200b\u952e\u503c\u200b\u7f13\u5b58\u200b\u4e00\u8d77\u200b\u8f93\u5165\u200b\u5230\u200b\u6a21\u578b\u200b\u7684\u200b\u524d\u200b\u5411\u200b\u4f20\u9012\u200b\u4e2d\u200b\u3002\u200b\u5728\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b\u63a8\u6d4b\u200b\u89e3\u7801\u200b\u5b9e\u73b0\u200b\u4e2d\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u63a8\u6d4b\u200b\u5934\u200b\u90fd\u200b\u4f1a\u200b\u6709\u200b\u81ea\u5df1\u200b\u7684\u200b\u952e\u503c\u200b\u7f13\u5b58\u200b\uff0c\u200b\u4f46\u200b\u6211\u4eec\u200b\u6539\u4e3a\u200b\u4fee\u6539\u200bvLLM\u200b\u9879\u76ee\u200b\u4e2d\u200b\u5f00\u53d1\u200b\u7684\u200b\u5206\u9875\u200b\u6ce8\u610f\u529b\u200b\u5185\u6838\u200b\uff0c\u200b\u4ee5\u200b\u5b9e\u73b0\u200b\u9ad8\u6548\u200b\u7684\u200b\u952e\u503c\u200b\u7f13\u5b58\u200b\u7ef4\u62a4\u200b\u3002\u200b\u8fd9\u200b\u786e\u4fdd\u200b\u4e86\u200b\u5728\u200b\u66f4\u200b\u5927\u200b\u7684\u200b\u6279\u91cf\u200b\u5927\u5c0f\u200b\u4e0b\u200b\u541e\u5410\u91cf\u200b\u4e0d\u4f1a\u200b\u964d\u4f4e\u200b\u3002\u200b\u6b64\u5916\u200b\uff0c\u200b\u6211\u4eec\u200b\u4fee\u6539\u200b\u6ce8\u610f\u529b\u200b\u63a9\u7801\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u5bf9\u200b\u7b2c\u200bN+1\u200b\u4e2a\u200bToken\u200b\u8fdb\u884c\u200b\u9a8c\u8bc1\u200b\uff0c\u200b\u4ece\u800c\u200b\u5728\u200b\u4e0d\u200b\u504f\u79bb\u200b\u539f\u59cb\u200b\u6a21\u578b\u200b\u8f93\u51fa\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u5b9e\u73b0\u200b\u63a8\u6d4b\u200b\u89e3\u7801\u200b\u3002\u200b\u6b64\u200b\u5b9e\u73b0\u200b\u7684\u200b\u8be6\u7ec6\u4fe1\u606f\u200b\u89c1\u200b\u6b64\u5904\u200bfoundation-model-stack/fms-extras\u3002</p>"},{"location":"blog/llm%E6%8E%A8%E7%90%86%E9%87%87%E7%94%A8%E6%8A%95%E6%9C%BA%E9%87%87%E6%A0%B7%E5%8A%A0%E9%80%9F%E6%8E%A8%E7%90%86%E8%AF%91/#\u6295\u673a\u6a21\u578b\u8bad\u7ec3","title":"\u6295\u673a\u200b\u6a21\u578b\u200b\u8bad\u7ec3","text":"<p>\u200b\u51fa\u4e8e\u200b\u6548\u7387\u200b\u8003\u8651\u200b\uff0c\u200b\u6211\u4eec\u200b\u91c7\u7528\u200b\u4e24\u200b\u9636\u6bb5\u200b\u65b9\u6cd5\u200b\u6765\u200b\u8bad\u7ec3\u200b\u63a8\u6d4b\u200b\u5668\u200b\u3002\u200b\u5728\u200b\u7b2c\u4e00\u9636\u6bb5\u200b\uff0c\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b\u957f\u200b\u5e8f\u5217\u200b\u957f\u5ea6\u200b\uff084000\u200b\u4e2a\u200bToken\uff09\u200b\u7684\u200b\u5c0f\u200b\u6279\u6b21\u200b\u6570\u636e\u200b\u8fdb\u884c\u200b\u8bad\u7ec3\u200b\uff0c\u200b\u5e76\u200b\u91c7\u7528\u200b\u6807\u51c6\u200b\u7684\u200b\u56e0\u679c\u200b\u8bed\u8a00\u200b\u6a21\u578b\u200b\u65b9\u6cd5\u200b\u8fdb\u884c\u200b\u8bad\u7ec3\u200b\u3002\u200b\u5728\u200b\u7b2c\u4e8c\u9636\u6bb5\u200b\uff0c\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b\u4ece\u200b\u57fa\u7840\u200b\u6a21\u578b\u200b\u751f\u6210\u200b\u7684\u200b\u77ed\u200b\u5e8f\u5217\u200b\u957f\u5ea6\u200b\uff08256\u200b\u4e2a\u200bToken\uff09\u200b\u7684\u200b\u5927\u6279\u91cf\u200b\u6570\u636e\u200b\u3002\u200b\u5728\u200b\u8fd9\u4e2a\u200b\u8bad\u7ec3\u200b\u9636\u6bb5\u200b\uff0c\u200b\u6211\u4eec\u200b\u8c03\u6574\u200b\u5934\u4ee5\u200b\u5339\u914d\u200b\u57fa\u7840\u200b\u6a21\u578b\u200b\u7684\u200b\u8f93\u51fa\u200b\u3002\u200b\u901a\u8fc7\u200b\u5927\u91cf\u200b\u5b9e\u9a8c\u200b\uff0c\u200b\u6211\u4eec\u200b\u53d1\u73b0\u200b\u7b2c\u4e00\u9636\u6bb5\u200b\u4e0e\u200b\u7b2c\u4e8c\u9636\u6bb5\u200b\u7684\u200b\u6b65\u6570\u200b\u6bd4\u4f8b\u200b\u4e3a\u200b5:2\u200b\u65f6\u200b\u6548\u679c\u200b\u826f\u597d\u200b\u3002\u200b\u6211\u4eec\u200b\u5728\u200b\u4e0b\u56fe\u200b\u4e2d\u200b\u5c55\u793a\u200b\u4e86\u200b\u8fd9\u4e9b\u200b\u9636\u6bb5\u200b\u7684\u200b\u8fdb\u5c55\u200b\u60c5\u51b5\u200b\u3002\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200bPyTorch FSDP\u200b\u548c\u200bIBM FMS\u200b\u6765\u200b\u8bad\u7ec3\u200b\u63a8\u6d4b\u200b\u5668\u200b\u3002</p> <p></p> <p>(\u200b\u672c\u6587\u200b\u8bd1\u81ea\u200bhitchhikers-guide-speculative-decoding)</p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>LLM\u200b\u63a8\u7406\u200b\uff1aVLLM\u200b\u6295\u673a\u200b\u91c7\u6837\u200b\u5b9e\u73b0\u200b</li> <li>C++\u200b\u5f00\u53d1\u200b\u5e38\u89c1\u95ee\u9898\u200b\u4e4b\u200bABI\u200b\u517c\u5bb9\u6027\u95ee\u9898\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/llm%E6%8E%A8%E7%90%86%E9%87%8F%E5%8C%96%E7%AE%97%E6%B3%95%E6%9D%82%E8%AE%B0/","title":"LLM\u200b\u63a8\u7406\u200b\uff1a\u200b\u91cf\u5316\u200b\u7b97\u6cd5\u200b\u6742\u8bb0","text":""},{"location":"blog/llm%E6%8E%A8%E7%90%86%E9%87%8F%E5%8C%96%E7%AE%97%E6%B3%95%E6%9D%82%E8%AE%B0/#llama4","title":"llama4","text":"<p>llama4\u200b\u76ee\u524d\u200b\u652f\u6301\u200b\uff1afbgemm \u200b\u548c\u200b compressed-tensor \u3002</p>"},{"location":"blog/llm%E6%8E%A8%E7%90%86%E9%87%8F%E5%8C%96%E7%AE%97%E6%B3%95%E6%9D%82%E8%AE%B0/#per_channel\u548cper_token\u7684\u533a\u522b","title":"per_channel\u200b\u548c\u200bper_token\u200b\u7684\u200b\u533a\u522b","text":"<p>\u200b\u5c5e\u4e8e\u200b\u4e0d\u540c\u200b\u7684\u200b\u91cf\u5316\u200b\u7b56\u7565\u200b\uff1a </p>Python<pre><code>#https://github.com/neuralmagic/compressed-tensors/blob/83b2e7a969d70606421a76b9a3d112646077c8de/src/compressed_tensors/quantization/quant_args.py#L43-L52\nclass QuantizationStrategy(str, Enum):\n    \"\"\"\n    Enum storing quantization strategy options\n    \"\"\"\n\n    TENSOR = \"tensor\"\n    CHANNEL = \"channel\"\n    GROUP = \"group\"\n    BLOCK = \"block\"\n    TOKEN = \"token\"\n</code></pre><p></p> <p>\u200b\u5c06\u200b\u6a21\u578b\u200b\u7684\u200b\u6743\u200b\u91cd\u91cf\u200b\u5316\u4e3a\u200b 8 \u200b\u4f4d\u200b/channel\uff0c\u200b\u5c06\u200b\u6fc0\u6d3b\u200b\u91cf\u5316\u200b\u4e3a\u200b 8 \u200b\u4f4d\u200b/token\uff08\u200b\u4e5f\u200b\u79f0\u4e3a\u200b fp8 \u200b\u6216\u200b w8a8\uff09\u3002</p> <p>\u200b\u4ee5\u200b\u6fc0\u6d3b\u200bX [Txh]\u200b\u548c\u200b\u6743\u91cd\u200bW [hxh0]\u200b\u7684\u200b\u77e9\u9635\u200b\u76f8\u4e58\u200b\u4e3a\u4f8b\u200b\uff0c\u200b\u7279\u5f81\u200b\u7ef4\u5ea6\u200b\u5c31\u662f\u6307\u200bh\u200b\u8fd9\u4e2a\u200b\u7ef4\u5ea6\u200b\u3002\u200b\u4e0d\u8bba\u662f\u200b per-token\uff08\u200b\u9488\u5bf9\u200b\u6fc0\u6d3b\u200b x \u200b\u800c\u8a00\u200b\uff1a\u200b\u6bcf\u884c\u200b\u5bf9\u5e94\u200b\u4e00\u4e2a\u200b\u91cf\u5316\u200b\u7cfb\u6570\u200b\uff09 \u200b\u8fd8\u662f\u200b per-channel \uff08\u200b\u9488\u5bf9\u200b\u6743\u91cd\u200b w \u200b\u800c\u8a00\u200b\uff1a\u200b\u6bcf\u5217\u200b\u5bf9\u5e94\u200b\u4e00\u4e2a\u200b\u91cf\u5316\u200b\u7cfb\u6570\u200b\uff09\u200b\u91cf\u5316\u200b\uff0c\u200b\u90fd\u200b\u4f1a\u200b\u53d7\u5230\u200b\u8fd9\u4e9b\u200b\u79bb\u7fa4\u200b\u503c\u200b\u7684\u200b\u5f88\u5927\u200b\u5f71\u54cd\u200b\u3002LLM.int8()</p>"},{"location":"blog/llm%E6%8E%A8%E7%90%86%E9%87%8F%E5%8C%96%E7%AE%97%E6%B3%95%E6%9D%82%E8%AE%B0/#llmint8","title":"LLM.int8","text":"<p>LLM.int8()\uff088-bit Matrix Multiplication for Transformers at Scale\uff09\u200b\u662f\u200b\u4e00\u79cd\u200b\u91c7\u7528\u200b\u6df7\u5408\u200b\u7cbe\u5ea6\u200b\u5206\u89e3\u200b\u7684\u200b\u91cf\u5316\u200b\u65b9\u6cd5\u200b\u3002\u200b\u8be5\u200b\u65b9\u6848\u200b\u5148\u200b\u505a\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u77e9\u9635\u200b\u5206\u89e3\u200b\uff0c\u200b\u5bf9\u200b\u7edd\u5927\u90e8\u5206\u200b\u6743\u91cd\u200b\u548c\u200b\u6fc0\u6d3b\u200b\u7528\u200b8bit\u200b\u91cf\u5316\u200b\uff08vector-wise\uff09\u3002\u200b\u5bf9\u200b\u79bb\u7fa4\u200b\u7279\u5f81\u200b\u7684\u200b\u51e0\u4e2a\u200b\u7ef4\u5ea6\u200b\u4fdd\u7559\u200b16bit\uff0c\u200b\u5bf9\u200b\u5176\u200b\u505a\u200b\u9ad8\u7cbe\u5ea6\u200b\u7684\u200b\u77e9\u9635\u200b\u4e58\u6cd5\u200b\u3002</p> <p></p> <p>\u200b\u662f\u200b\u4e00\u79cd\u200boutlier-aware quantization\uff08\u200b\u79bb\u7fa4\u200b\u503c\u200b\u611f\u77e5\u200b\u91cf\u5316\u200b\uff09\u3002</p> <p>\u200b\u4f7f\u7528\u200b\u91cf\u5316\u200b\u5c31\u200b\u4f1a\u200b\u63a8\u7406\u200b\u66f4\u5feb\u200b\u5417\u200b\uff1f\u200b\u9519\u8bef\u200b\u7684\u200b\u3002 LLM.int8() \u200b\u65b9\u6cd5\u200b\u7684\u200b\u4e3b\u8981\u200b\u76ee\u7684\u200b\u662f\u200b\u5728\u200b\u4e0d\u200b\u964d\u4f4e\u200b\u6027\u80fd\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u964d\u4f4e\u200b\u5927\u200b\u6a21\u578b\u200b\u7684\u200b\u5e94\u7528\u200b\u95e8\u69db\u200b\uff0c\u200b\u4f7f\u7528\u200b\u4e86\u200b LLM.int8() \u200b\u7684\u200b BLOOM-176B \u200b\u6bd4\u200b FP16 \u200b\u7248\u672c\u200b\u6162\u200b\u4e86\u200b\u5927\u7ea6\u200b 15% \u200b\u5230\u200b 23%\u3002\u3002\u200b\u6211\u200b\u7406\u89e3\u200b\uff0c\u200b\u4ee5\u200bLLM.in8\u200b\u65b9\u5f0f\u200b\u4e3a\u4f8b\u200b\uff0c\u200b\u5f15\u5165\u200b\u91cf\u5316\u200b\u540e\u200b\uff0c\u200b\u53ea\u662f\u200b\u964d\u4f4e\u200b\u4e86\u200b\u663e\u5b58\u200b\u5360\u7528\u200b\uff0c\u200b\u4f46\u662f\u200b\u8ba1\u7b97\u200b\u6b65\u9aa4\u200b\u589e\u52a0\u200b\uff0c\u200b\u63a8\u7406\u200b\u901f\u5ea6\u200b\u4e5f\u200b\u4f1a\u200b\u53d8\u6162\u200b\u3002</p>"},{"location":"blog/llm%E6%8E%A8%E7%90%86%E9%87%8F%E5%8C%96%E7%AE%97%E6%B3%95%E6%9D%82%E8%AE%B0/#smoothquant-\u91cf\u5316\u65b9\u6848","title":"SmoothQuant \u200b\u91cf\u5316\u200b\u65b9\u6848","text":"<p>\u200b\u7531\u4e8e\u200b\u91cf\u5316\u200b\u524d\u200b\u7684\u200b\u6fc0\u6d3b\u200b\u503c\u200b\u53d8\u5316\u200b\u8303\u56f4\u200b\u8f83\u5927\u200b\uff0c\u200b\u5373\u4f7f\u200b\u5bf9\u4e8e\u200b\u540c\u4e00\u200b token\uff0c\u200b\u4e0d\u540c\u200bchannel\u200b\u6570\u503c\u200b\u5dee\u5f02\u200b\u8f83\u5927\u200b\uff0c\u200b\u5bf9\u200b\u6bcf\u4e2a\u200b token \u200b\u7684\u200b\u91cf\u5316\u200b\u4e5f\u200b\u4f1a\u200b\u9020\u6210\u200b\u7cbe\u5ea6\u200b\u635f\u5931\u200b\uff0c\u200b\u4f46\u662f\u200b\u4e0d\u96be\u770b\u51fa\u200b\u8f83\u5927\u200b\u503c\u200b\u4e00\u822c\u200b\u51fa\u73b0\u200b\u5728\u200b\u540c\u4e00\u200b channel\uff0c\u200b\u56e0\u6b64\u200b\u4f5c\u8005\u200b\u4e5f\u200b\u5206\u6790\u200b\u4e86\u200b\u91c7\u7528\u200b per-channel \u200b\u7684\u200b\u91cf\u5316\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u8fd9\u79cd\u200b\u91cf\u5316\u200b\u65b9\u5f0f\u200b\u80fd\u200b\u5f88\u200b\u597d\u200b\u7684\u200b\u907f\u514d\u200b\u7cbe\u5ea6\u200b\u635f\u5931\u200b\uff0c\u200b\u4f46\u662f\u200b\u786c\u4ef6\u200b\u4e0d\u80fd\u200b\u9ad8\u6548\u200b\u6267\u884c\u200b\uff0c\u200b\u589e\u52a0\u200b\u4e86\u200b\u8ba1\u7b97\u200b\u65f6\u95f4\u200b\uff0c\u200b\u56e0\u6b64\u200b\u5927\u591a\u6570\u200b\u91cf\u5316\u200b\u4ecd\u200b\u91c7\u7528\u200b per-token \u200b\u53ca\u200b per-tensor \u200b\u7684\u200b\u91cf\u5316\u200b\u65b9\u5f0f\u200b\u3002</p>"},{"location":"blog/llm%E6%8E%A8%E7%90%86%E9%87%8F%E5%8C%96%E7%AE%97%E6%B3%95%E6%9D%82%E8%AE%B0/#transformers\u5b9e\u73b0\u7684\u5404\u79cd\u91cf\u5316","title":"transformers\u200b\u5b9e\u73b0\u200b\u7684\u200b\u5404\u79cd\u200b\u91cf\u5316","text":"<p>https://github.com/huggingface/transformers/blob/main/docs/source/en/quantization/fbgemm_fp8.md</p>"},{"location":"blog/llm%E6%8E%A8%E7%90%86%E9%87%8F%E5%8C%96%E7%AE%97%E6%B3%95%E6%9D%82%E8%AE%B0/#w8a8\u548cw4a16","title":"w8a8\u200b\u548c\u200bw4a16\ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350","text":"<p>\u200b\u5728\u200b\u8fc7\u53bb\u200b\u7684\u200b\u90e8\u7f72\u200b\u91cc\u200b\uff0c\u200b\u6211\u4eec\u200b\u5f88\u96be\u200b\u534f\u8c03\u200b\u4e00\u4e2a\u200b\u95ee\u9898\u200b\uff0c\u200b\u5f53\u200b\u7528\u6237\u200b\u7684\u200b\u8f93\u5165\u200b\u548c\u200b\u8f93\u51fa\u200b\u90fd\u200b\u6bd4\u8f83\u200b\u957f\u65f6\u200b\uff0c\u200b\u6211\u4eec\u200b\u5e94\u8be5\u200b\u7ed9\u200b\u7528\u6237\u200b\u63a8\u8350\u200b\u600e\u4e48\u6837\u200b\u7684\u200b\u91cf\u5316\u200b\u65b9\u6848\u200b\uff1fW4A16 \u200b\u6709\u200b\u66f4\u597d\u200b\u7684\u200b Decode \u200b\u6027\u80fd\u200b\uff0c\u200b\u4f46\u4f1a\u200b\u9020\u6210\u200b\u5f88\u957f\u200b\u7684\u200b TTFT\uff08\u200b\u751a\u81f3\u200b\u5927\u4e8e\u200b FP16\uff09\uff1bW8A8 \u200b\u786e\u5b9e\u200b\u53ef\u4ee5\u200b\u66f4\u200b\u5feb\u200b\u5b8c\u6210\u200b Prefill\uff0c\u200b\u4f46\u200b\u65f6\u5ef6\u200b\u5374\u200b\u4e0d\u200b\u4e00\u5b9a\u200b\u77ed\u4e8e\u200b W4A16\uff0c\u200b\u66f4\u957f\u200b\u7684\u200b\u65f6\u5ef6\u200b\u4e5f\u200b\u4e0d\u5229\u4e8e\u200b\u66f4\u5927\u200b\u7684\u200b\u541e\u5410\u200b\u3002\u200b\u6709\u6ca1\u6709\u200b\u53ef\u80fd\u200b\u4e24\u4e2a\u200b\u9636\u6bb5\u200b\u4f7f\u7528\u200b\u4e0d\u540c\u200b\u7684\u200b\u91cf\u5316\u200b\u65b9\u6848\u200b\u5462\u200b\uff1f\u200b\u5728\u200b\u5355\u200b\u90e8\u7f72\u200b\u53ea\u200b\u4fdd\u5b58\u200b\u4e00\u4efd\u200b\u6a21\u578b\u200b\u6743\u91cd\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u8fd9\u200b\u662f\u200b\u505a\u200b\u4e0d\u5230\u200b\u7684\u200b\u3002</p> <p>\u200b\u6240\u5e78\u200b P-D \u200b\u5206\u79bb\u200b\u7ec8\u4e8e\u200b\u4e3a\u200b\u6211\u4eec\u200b\u63d0\u4f9b\u200b\u4e86\u200b Prefill \u200b\u548c\u200b Decode \u200b\u5206\u5f00\u200b\u90e8\u7f72\u200b\u7684\u200b\u65b9\u6848\u200b\u3002\u200b\u57fa\u4e8e\u200b P-D \u200b\u5206\u79bb\u200b\u7684\u200b\u65b9\u6848\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u81ea\u7531\u200b\u5730\u200b\u5728\u200b Prefill \u200b\u673a\u5668\u200b\u90e8\u7f72\u200b FP16 / W8A8 \u200b\u7684\u200b\u6a21\u578b\u200b\u6587\u4ef6\u200b\uff0c\u200b\u6765\u200b\u83b7\u5f97\u200b\u76f8\u5bf9\u200b\u4e0d\u9519\u200b\u7684\u200b Prefill \u200b\u6027\u80fd\u200b\uff1b\u200b\u800c\u200b Decode \u200b\u673a\u5668\u200b\u5219\u200b\u53ef\u4ee5\u200b\u81ea\u7531\u200b\u5730\u200b\u9009\u62e9\u200b W4A16 / W4A8 \u200b\u7684\u200b\u65b9\u6848\u200b\uff0c\u200b\u6765\u200b\u83b7\u5f97\u200b\u6574\u4f53\u200b\u7684\u200b\u66f4\u4f18\u200b\u6027\u80fd\u200b\u3002\u200b\u8fd9\u662f\u200b P-D \u200b\u5206\u79bb\u200b\u5728\u200b\u90e8\u7f72\u200b\u4e0a\u200b\u7684\u200b\u989d\u5916\u200b\u6536\u76ca\u200b\uff0c\u200b\u4e3a\u200b\u90e8\u7f72\u200b\u6a21\u578b\u200b\u7cbe\u5ea6\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u66f4\u200b\u591a\u200b\u7684\u200b\u9009\u62e9\u200b\u3002</p> <p>https://mp.weixin.qq.com/s/Zs61CDerMwI7JKbFyD001Q</p> <ul> <li>DeepSeek-V3_DeepSeekMoE\u200b\u673a\u5236\u200b\u662f\u200b\u4ec0\u4e48\u200b\uff1f</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/llvm%E5%85%A5%E9%97%A8-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%AE%A1%E7%AE%97%E5%99%A8/","title":"LLVM\u200b\u5165\u95e8\u200b-\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u8ba1\u7b97\u5668","text":""},{"location":"blog/llvm%E5%85%A5%E9%97%A8-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%AE%A1%E7%AE%97%E5%99%A8/#\u5982\u4f55\u7f16\u5199\u4e00\u4e2allvm-pass","title":"\u5982\u4f55\u200b\u7f16\u5199\u200b\u4e00\u4e2a\u200bLLVM Pass","text":""},{"location":"blog/llvm%E5%85%A5%E9%97%A8-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%AE%A1%E7%AE%97%E5%99%A8/#llvm\u4ecb\u7ecd","title":"LLVM\u200b\u4ecb\u7ecd","text":"<p>LLVM\uff0c\u200b\u5168\u200b\u79f0\u4e3a\u200b\u4f4e\u7ea7\u200b\u865a\u62df\u673a\u200b\uff08Low-Level Virtual Machine\uff09\uff0c\u200b\u662f\u200b\u4e00\u7ec4\u200b\u6a21\u5757\u5316\u200b\u548c\u200b\u53ef\u200b\u91cd\u7528\u200b\u7684\u200b\u7f16\u8bd1\u5668\u200b\u53ca\u200b\u5de5\u5177\u200b\u94fe\u200b\u6280\u672f\u200b\u3002\u200b\u7531\u4e8e\u200b\u5176\u200b\u7075\u6d3b\u200b\u7684\u200b\u67b6\u6784\u200b\uff0cLLVM\u200b\u5728\u200b\u591a\u4e2a\u200b\u9886\u57df\u200b\u5177\u6709\u200b\u5e7f\u6cdb\u200b\u7684\u200b\u5e94\u7528\u200b\u3002\u200b\u5b83\u200b\u80fd\u591f\u200b\u751f\u6210\u200b\u673a\u5668\u200b\u672c\u5730\u200b\u4ee3\u7801\u200b\uff0c\u200b\u56e0\u6b64\u200b\u88ab\u200b\u7528\u4f5c\u200b\u4e3b\u8981\u200b\u7f16\u7a0b\u8bed\u8a00\u200b\uff08\u200b\u5982\u200bRust\u200b\u548c\u200bSwift\uff09\u200b\u7684\u200b\u540e\u200b\u7aef\u200b\u3002\u200b\u6b64\u5916\u200b\uff0cLLVM\u200b\u8fd8\u200b\u88ab\u200b\u7528\u4e8e\u200b\u5373\u65f6\u200b\u7f16\u8bd1\u200b\uff08JIT\u200b\u7f16\u8bd1\u200b\uff09\u200b\u4ee5\u53ca\u200b\u9759\u6001\u200b\u5206\u6790\u200b\u3001\u200b\u52a8\u6001\u5206\u6790\u200b\u3001\u200b\u7740\u8272\u5668\u200b\u7f16\u8bd1\u200b\u7b49\u200b\u591a\u79cd\u200b\u4efb\u52a1\u200b\u3002</p> <p>LLVM\u200b\u7684\u200b\u8bbe\u8ba1\u200b\u76ee\u6807\u200b\u662f\u200b\u63d0\u4f9b\u200b\u4e00\u4e2a\u200b\u4e2d\u95f4\u200b\u8868\u793a\u200b\uff08IR\uff09\uff0c\u200b\u4ee5\u4fbf\u200b\u4f18\u5316\u200b\u548c\u200b\u751f\u6210\u200b\u9ad8\u6548\u200b\u7684\u200b\u673a\u5668\u200b\u4ee3\u7801\u200b\u3002\u200b\u5b83\u200b\u7684\u200b\u6a21\u5757\u5316\u200b\u8bbe\u8ba1\u200b\u5141\u8bb8\u200b\u5f00\u53d1\u8005\u200b\u6839\u636e\u200b\u9700\u8981\u200b\u589e\u52a0\u200b\u6216\u200b\u66ff\u6362\u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u4ece\u800c\u200b\u5b9e\u73b0\u200b\u7279\u5b9a\u200b\u7684\u200b\u529f\u80fd\u200b\u6216\u200b\u4f18\u5316\u200b\u3002\u200b\u8fd9\u200b\u4f7f\u5f97\u200bLLVM\u200b\u5728\u200b\u5b66\u672f\u754c\u200b\u548c\u200b\u5de5\u4e1a\u754c\u200b\u90fd\u200b\u5f97\u5230\u200b\u4e86\u200b\u5e7f\u6cdb\u200b\u7684\u200b\u5e94\u7528\u200b\u548c\u200b\u652f\u6301\u200b\u3002</p> <p>\u200b\u901a\u8fc7\u200b\u4e0d\u65ad\u200b\u7684\u200b\u53d1\u5c55\u200b\u548c\u200b\u6f14\u5316\u200b\uff0cLLVM\u200b\u5df2\u7ecf\u200b\u6210\u4e3a\u200b\u7f16\u8bd1\u5668\u200b\u6280\u672f\u200b\u9886\u57df\u200b\u7684\u200b\u91cd\u8981\u200b\u7ec4\u6210\u90e8\u5206\u200b\uff0c\u200b\u63a8\u52a8\u200b\u4e86\u200b\u73b0\u4ee3\u200b\u7f16\u7a0b\u8bed\u8a00\u200b\u7684\u200b\u53d1\u5c55\u200b\u548c\u200b\u6027\u80fd\u200b\u63d0\u5347\u200b\u3002</p>"},{"location":"blog/llvm%E5%85%A5%E9%97%A8-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%AE%A1%E7%AE%97%E5%99%A8/#\u4ec0\u4e48\u662f\u7f16\u8bd1\u5668\u5462","title":"\u4ec0\u4e48\u200b\u662f\u200b\u7f16\u8bd1\u5668\u200b\u5462\u200b\uff1f","text":"<p>\u200b\u7f16\u8bd1\u5668\u200b\u662f\u200b\u4e00\u79cd\u200b\u8f6f\u4ef6\u7a0b\u5e8f\u200b\uff0c\u200b\u7528\u4e8e\u200b\u5c06\u200b\u7528\u200b\u9ad8\u7ea7\u200b\u7f16\u7a0b\u8bed\u8a00\u200b\u7f16\u5199\u200b\u7684\u200b\u6e90\u4ee3\u7801\u200b\u7ffb\u8bd1\u6210\u200b\u8ba1\u7b97\u673a\u200b\u5904\u7406\u5668\u200b\u53ef\u4ee5\u200b\u6267\u884c\u200b\u7684\u200b\u5f62\u5f0f\u200b\u3002\u200b\u4e00\u822c\u6765\u8bf4\u200b\uff0c\u200b\u7f16\u8bd1\u5668\u200b\u7531\u200b\u4e09\u4e2a\u200b\u90e8\u5206\u200b\u7ec4\u6210\u200b\uff1a</p> <ol> <li> <p>\u200b\u524d\u7aef\u200b\uff1a\u200b\u7f16\u8bd1\u5668\u200b\u7684\u200b\u524d\u7aef\u200b\u8d1f\u8d23\u200b\u5206\u6790\u200b\u6e90\u4ee3\u7801\u200b\uff0c\u200b\u5e76\u200b\u5c06\u200b\u5176\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u4e00\u79cd\u200b\u4e2d\u95f4\u200b\u8868\u793a\u200b\uff08IR\uff09\u3002\u200b\u8fd9\u79cd\u200b\u4e2d\u95f4\u200b\u8868\u793a\u200b\u901a\u5e38\u200b\u72ec\u7acb\u200b\u4e8e\u6e90\u200b\u7f16\u7a0b\u8bed\u8a00\u200b\u548c\u200b\u76ee\u6807\u200b\u67b6\u6784\u200b\uff0c\u200b\u4f7f\u5f97\u200b\u53ef\u4ee5\u200b\u8fdb\u884c\u200b\u591a\u79cd\u200b\u4f18\u5316\u200b\uff0c\u200b\u5e76\u200b\u63d0\u9ad8\u200b\u4ee3\u7801\u200b\u7684\u200b\u53ef\u79fb\u690d\u6027\u200b\u3002</p> </li> <li> <p>\u200b\u4e2d\u7aef\u200b\uff1a\u200b\u7f16\u8bd1\u5668\u200b\u7684\u200b\u4e2d\u7aef\u200b\u5bf9\u200b\u4e2d\u95f4\u200b\u8868\u793a\u200b\u8fdb\u884c\u200b\u4e0e\u200b\u76ee\u6807\u200bCPU\u200b\u67b6\u6784\u200b\u65e0\u5173\u200b\u7684\u200b\u4f18\u5316\u200b\u3002\u200b\u8fd9\u4e2a\u200b\u9636\u6bb5\u200b\u7684\u200b\u91cd\u70b9\u200b\u662f\u200b\u8fdb\u884c\u200b\u901a\u7528\u200b\u4f18\u5316\u200b\uff0c\u200b\u4ee5\u200b\u63d0\u9ad8\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u6027\u80fd\u200b\u548c\u200b\u6548\u7387\u200b\u3002</p> </li> <li> <p>\u200b\u540e\u200b\u7aef\u200b\uff1a\u200b\u7f16\u8bd1\u5668\u200b\u7684\u200b\u540e\u200b\u7aef\u200b\u5c06\u200b\u4f18\u5316\u200b\u540e\u200b\u7684\u200b\u4e2d\u95f4\u200b\u8868\u793a\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u7279\u5b9a\u200b\u4e8e\u200b\u76ee\u6807\u200b\u67b6\u6784\u200b\u7684\u200b\u673a\u5668\u200b\u4ee3\u7801\u200b\u6216\u200b\u6c47\u7f16\u200b\u4ee3\u7801\u200b\u3002\u200b\u540e\u7aef\u200b\u8fd8\u200b\u8d1f\u8d23\u200b\u5e94\u7528\u200b\u4e0e\u200b\u76ee\u6807\u200b\u786c\u4ef6\u200b\u76f8\u5173\u200b\u7684\u200b\u4f18\u5316\u200b\uff0c\u200b\u4ee5\u200b\u786e\u4fdd\u200b\u751f\u6210\u200b\u7684\u200b\u4ee3\u7801\u200b\u80fd\u200b\u9ad8\u6548\u200b\u5730\u200b\u5728\u200b\u6307\u5b9a\u200b\u786c\u4ef6\u200b\u4e0a\u200b\u8fd0\u884c\u200b\u3002</p> </li> </ol> <p>\u200b\u901a\u8fc7\u200b\u8fd9\u200b\u4e09\u4e2a\u200b\u9636\u6bb5\u200b\uff0c\u200b\u7f16\u8bd1\u5668\u200b\u80fd\u591f\u200b\u5c06\u200b\u4eba\u7c7b\u200b\u53ef\u8bfb\u200b\u7684\u200b\u6e90\u4ee3\u7801\u200b\u8f6c\u5316\u200b\u4e3a\u200b\u8ba1\u7b97\u673a\u200b\u53ef\u4ee5\u200b\u6267\u884c\u200b\u7684\u200b\u9ad8\u6548\u200b\u673a\u5668\u200b\u4ee3\u7801\u200b\u3002</p>"},{"location":"blog/llvm%E5%85%A5%E9%97%A8-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%AE%A1%E7%AE%97%E5%99%A8/#llvm-pass","title":"LLVM Pass","text":"<p>\u200b\u5728\u200bLLVM\u200b\u4e2d\u200b\uff0cPass\u200b\u662f\u200b\u4e00\u79cd\u200b\u6a21\u5757\u5316\u200b\u548c\u200b\u53ef\u200b\u91cd\u7528\u200b\u7684\u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u65e8\u5728\u200b\u5bf9\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u4e2d\u95f4\u200b\u8868\u793a\u200b\uff08IR\uff09\u200b\u8fdb\u884c\u200b\u8f6c\u6362\u200b\u6216\u200b\u5206\u6790\u200b\u3002</p> <p>\u200b\u6839\u636e\u200bLLVM\u200b\u7684\u200b\u5b98\u65b9\u200b\u6587\u6863\u200b\uff0cPass\u200b\u4e3b\u8981\u200b\u5206\u4e3a\u200b\u4e24\u5927\u7c7b\u200b\uff1a\u200b\u5206\u6790\u200bPass\uff08Analysis Passes\uff09\u200b\u548c\u200b\u8f6c\u6362\u200bPass\uff08Transform Passes\uff09\u3002\u200b\u6b64\u5916\u200b\uff0c\u200b\u8fd8\u6709\u200b\u4e00\u79cd\u200b\u88ab\u200b\u79f0\u4e3a\u200b\u5b9e\u7528\u5de5\u5177\u200bPass\uff08Utility Passes\uff09\u200b\u7684\u200b\u7c7b\u522b\u200b\u3002</p> <ol> <li> <p>\u200b\u5206\u6790\u200bPass\uff08Analysis Passes\uff09\uff1a\u200b\u8fd9\u200b\u7c7b\u200bPass\u200b\u7528\u4e8e\u200b\u6536\u96c6\u200b\u4fe1\u606f\u200b\u548c\u200b\u5206\u6790\u200b\u4ee3\u7801\u200b\uff0c\u200b\u800c\u200b\u4e0d\u200b\u5bf9\u200b\u4ee3\u7801\u200b\u8fdb\u884c\u200b\u4efb\u4f55\u200b\u4fee\u6539\u200b\u3002\u200b\u5b83\u4eec\u200b\u5e2e\u52a9\u200b\u7f16\u8bd1\u5668\u200b\u83b7\u53d6\u200b\u6709\u5173\u200b\u7a0b\u5e8f\u7ed3\u6784\u200b\u548c\u200b\u884c\u4e3a\u200b\u7684\u200b\u6570\u636e\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u8fdb\u884c\u200b\u8fdb\u4e00\u6b65\u200b\u7684\u200b\u4f18\u5316\u200b\u548c\u200b\u8f6c\u6362\u200b\u3002</p> </li> <li> <p>\u200b\u8f6c\u6362\u200bPass\uff08Transform Passes\uff09\uff1a\u200b\u8fd9\u200b\u7c7b\u200bPass\u200b\u7528\u4e8e\u200b\u4fee\u6539\u200b\u7a0b\u5e8f\u200b\u7684\u200bIR\uff0c\u200b\u4ee5\u200b\u63d0\u9ad8\u200b\u6027\u80fd\u200b\u3001\u200b\u51cf\u5c11\u200b\u4ee3\u7801\u200b\u4f53\u79ef\u200b\u6216\u200b\u4e3a\u200b\u8fdb\u4e00\u6b65\u200b\u7684\u200b\u4f18\u5316\u200b\u505a\u597d\u200b\u51c6\u5907\u200b\u3002\u200b\u8f6c\u6362\u200bPass\u200b\u76f4\u63a5\u200b\u5bf9\u200b\u4ee3\u7801\u200b\u8fdb\u884c\u200b\u66f4\u6539\u200b\uff0c\u200b\u4ee5\u200b\u5b9e\u73b0\u200b\u66f4\u200b\u9ad8\u6548\u200b\u7684\u200b\u6267\u884c\u200b\u3002</p> </li> </ol> <p>\u200b\u901a\u8fc7\u200b\u8fd9\u4e9b\u200bPass\uff0cLLVM\u200b\u80fd\u591f\u200b\u5b9e\u73b0\u200b\u590d\u6742\u200b\u7684\u200b\u4ee3\u7801\u200b\u5206\u6790\u200b\u548c\u200b\u4f18\u5316\u200b\uff0c\u200b\u4ece\u800c\u200b\u751f\u6210\u200b\u9ad8\u6548\u200b\u7684\u200b\u673a\u5668\u200b\u4ee3\u7801\u200b\u3002</p>"},{"location":"blog/llvm%E5%85%A5%E9%97%A8-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%AE%A1%E7%AE%97%E5%99%A8/#\u5982\u4f55\u7f16\u5199\u4e00\u4e2allvm-pass_1","title":"\u5982\u4f55\u200b\u7f16\u5199\u200b\u4e00\u4e2a\u200bLLVM Pass","text":"<p>\u200b\u7f16\u5199\u200bLLVM Pass\u200b\u9996\u5148\u200b\u9700\u8981\u200b\u51c6\u5907\u200b\u73af\u5883\u200b\uff0c\u200b\u5b89\u88c5\u200b\u4e0a\u200bllvm\u3001clang\u3001cmake\u3002\u200b\u5b89\u88c5\u200b\u65b9\u6cd5\u200b\uff1a</p> Bash<pre><code>#!/bin/bash\nwget https://apt.llvm.org/llvm.sh\nchmod +x llvm.sh\n./llvm.sh 16\n</code></pre> <p>\u200b\u8fd0\u884c\u200b\u547d\u4ee4\u200b\u4f1a\u200b\u5b89\u88c5\u200bllvm-16, clang-16, clang++-16\u200b\u4ee5\u53ca\u200b\u76f8\u5173\u200b\u7684\u200b\u5de5\u5177\u200b\u3002\u200b\u5934\u6587\u4ef6\u200b\u5b89\u88c5\u200b\u5728\u200b\uff1a/usr/include/llvm-16/llvm\u3002</p> <p>LLVM\u200b\u5305\u542b\u200b\u4e24\u79cd\u200bPass\u200b\u7ba1\u7406\u5668\u200b\uff1a\u200b\u65e7\u7248\u200bPass\u200b\u7ba1\u7406\u5668\u200b\uff08legacy PM\uff09\u200b\u548c\u200b\u65b0\u7248\u200bPass\u200b\u7ba1\u7406\u5668\u200b\uff08new PM\uff09\u3002\u200b\u5728\u200b\u4e2d\u7aef\u200b\u9636\u6bb5\u200b\uff0cLLVM\u200b\u4f7f\u7528\u200b\u65b0\u7248\u200bPass\u200b\u7ba1\u7406\u5668\u200b\uff0c\u200b\u800c\u200b\u5728\u200b\u4e0e\u200b\u76ee\u6807\u200b\u67b6\u6784\u200b\u76f8\u5173\u200b\u7684\u200b\u540e\u200b\u7aef\u200b\u4ee3\u7801\u751f\u6210\u200b\u9636\u6bb5\u200b\uff0c\u200b\u5219\u200b\u4f7f\u7528\u200b\u65e7\u7248\u200bPass\u200b\u7ba1\u7406\u5668\u200b\u3002\u200b\u6211\u4eec\u200b\u5728\u200b\u7f16\u5199\u200b\u81ea\u5df1\u200b\u7684\u200bPass\u200b\u65f6\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u9009\u62e9\u200b\u4f7f\u7528\u200b\u65e7\u7248\u200b\u6216\u200b\u65b0\u7248\u200b\u7ba1\u7406\u5668\u200b\u3002\u200b\u5728\u200b\u672c\u6587\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200b\u65b0\u7248\u200bPass\u200b\u7ba1\u7406\u5668\u200b\u3002</p> <p>\u200b\u65b0\u7248\u200bPass\u200b\u7ba1\u7406\u5668\u200b\u76f8\u8f83\u200b\u4e8e\u200b\u65e7\u7248\u200b\uff0c\u200b\u901a\u5e38\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u66f4\u597d\u200b\u7684\u200b\u6027\u80fd\u200b\u548c\u200b\u7075\u6d3b\u6027\u200b\uff0c\u200b\u9002\u5408\u200b\u7528\u4e8e\u200b\u9700\u8981\u200b\u73b0\u4ee3\u200b\u4f18\u5316\u200b\u6280\u672f\u200b\u7684\u200b\u573a\u5408\u200b\u3002\u200b\u901a\u8fc7\u200b\u5229\u7528\u200b\u65b0\u7248\u200bPass\u200b\u7ba1\u7406\u5668\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u66f4\u200b\u6709\u6548\u200b\u5730\u200b\u8fdb\u884c\u200b\u4ee3\u7801\u200b\u5206\u6790\u200b\u548c\u200b\u4f18\u5316\u200b\u3002</p> <p>\u200b\u901a\u8fc7\u200b\u4e0b\u9762\u200b\u7684\u200b\u4f8b\u5b50\u200b\u7f16\u8bd1\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200bPass\uff0c\u200b\u5b9e\u73b0\u200b\u5c06\u200b\u51fd\u6570\u200b\u540d\u200b\u6253\u5370\u200b\u51fa\u6765\u200b\u3002</p> C++<pre><code>#include \"llvm/IR/PassManager.h\"\n#include \"llvm/Passes/PassBuilder.h\"\n#include \"llvm/Passes/PassPlugin.h\"\n#include \"llvm/Support/raw_ostream.h\"\nusing namespace llvm;\n\nnamespace\n{\n  // \u200b\u5728\u200bLLVM\u200b\u4e2d\u200b\uff0c\u200b\u6240\u6709\u200b\u7684\u200bPass\u200b\u90fd\u200b\u5fc5\u987b\u200b\u7ee7\u627f\u200b\u81ea\u200bCRTP\uff08Curiously Recurring Template Pattern\uff09\u200b\u6df7\u5165\u200b\u7c7b\u200bPassInfoMixin\u3002\u200b\u8fd9\u79cd\u200b\u8bbe\u8ba1\u6a21\u5f0f\u200b\u5141\u8bb8\u200bPass\u200b\u901a\u8fc7\u200b\u6a21\u677f\u200b\u673a\u5236\u200b\u6765\u200b\u83b7\u5f97\u200b\u4e0e\u200bPass\u200b\u76f8\u5173\u200b\u7684\u200b\u5143\u200b\u4fe1\u606f\u200b\u3002\n  struct FunctionListerPass : public PassInfoMixin&lt;FunctionListerPass&gt;\n  {\n    // A pass should have a run method\n    PreservedAnalyses run(Function &amp;F, FunctionAnalysisManager &amp;FAM)\n    {\n      // outs() returns a reference to a raw_fd_ostream for standard output.\n      outs() &lt;&lt; F.getName() &lt;&lt; '\\n';\n      return PreservedAnalyses::all();\n    }\n  };\n\n}\n\nPassPluginLibraryInfo getPassPluginInfo()\n{\n  const auto callback = [](PassBuilder &amp;PB)\n  {\n    PB.registerPipelineStartEPCallback(\n        [&amp;](ModulePassManager &amp;MPM, auto)\n        {\n          MPM.addPass(createModuleToFunctionPassAdaptor(FunctionListerPass()));\n          return true;\n        });\n  };\n\n  return {LLVM_PLUGIN_API_VERSION, \"name\", \"0.0.1\", callback};\n};\n\n// \u200b\u5f53\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u52a0\u8f7d\u200b\u4e00\u4e2a\u200b\u63d2\u4ef6\u200b\u65f6\u200b\uff0c\u200b\u5b83\u4f1a\u200b\u8c03\u7528\u200b\u8fd9\u4e2a\u200b\u5165\u53e3\u200b\u70b9\u4ee5\u200b\u83b7\u53d6\u200b\u6709\u5173\u200b\u8be5\u200b\u63d2\u4ef6\u200b\u7684\u200b\u4fe1\u606f\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u6ce8\u518c\u200b\u5176\u200bPass\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002\nextern \"C\" LLVM_ATTRIBUTE_WEAK PassPluginLibraryInfo llvmGetPassPluginInfo()\n{\n  return getPassPluginInfo();\n}\n</code></pre> <p>\u200b\u5c06\u200b\u4e0a\u9762\u200b\u7684\u200bPass\u200b\u4ee3\u7801\u200b\u7f16\u8bd1\u200b\u4e3a\u200b\u4e00\u4e2a\u200b\u52a8\u6001\u94fe\u63a5\u5e93\u200bfunc_lister.so\u3002</p> Bash<pre><code>clang-16 -shared -o func_lister.so func_lister.cpp -fPIC -I /usr/inc\nlude/llvm-c-16/ -I /usr/include/llvm-16/\n</code></pre> <p>\u200b\u7136\u540e\u200b\uff0c\u200b\u4e3a\u4e86\u200b\u9a8c\u8bc1\u200b\u6211\u4eec\u200b\u5f00\u53d1\u200b\u7684\u200bpass\uff0c\u200b\u9700\u8981\u200b\u5199\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200btest.c\u3002 </p>C++<pre><code>// test.c\nvoid testFunctionOne()\n{\n}\n\nvoid testFunctionTwo()\n{\n}\n\nint main()\n{\n  return 0;\n}\n</code></pre><p></p> <p>\u200b\u7f16\u8bd1\u200b\u7684\u200b\u65f6\u5019\u200b\u8981\u200b\u5236\u5b9a\u200b-O1\u200b\u6216\u8005\u200b-O2\u3001-O3\u200b\u4f18\u5316\u200b\u7ea7\u522b\u200b\uff0c\u200b\u5426\u5219\u200b\u4e0d\u4f1a\u200b\u6267\u884c\u200b\u6211\u4eec\u200b\u7684\u200bPass\u3002\u200b\u6307\u5b9a\u200b\u4f18\u5316\u200b\u7ea7\u522b\u200b\uff08\u200b\u4f8b\u5982\u200b\uff0c\u200b\u7528\u200b-O1\uff09\u200b\u662f\u200b\u91cd\u8981\u200b\u7684\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5b83\u200b\u51b3\u5b9a\u200b\u4e86\u200bLLVM\u200b\u7f16\u8bd1\u5668\u200b\u5728\u200b\u7f16\u8bd1\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u4f1a\u200b\u5e94\u7528\u200b\u54ea\u4e9b\u200b\u4f18\u5316\u200b\u9636\u6bb5\u200b\u548c\u200bpasses\u3002\u200b\u4f60\u200b\u4f1a\u200b\u53d1\u73b0\u200b\u4e0d\u200b\u6307\u5b9a\u200b\u4f18\u5316\u200b\u7ea7\u522b\u200b\u65f6\u200b(\u200b\u9ed8\u8ba4\u200b-O0)\uff0c\u200b\u6211\u4eec\u200b\u7684\u200bPass\u200b\u4e0d\u4f1a\u200b\u88ab\u200b\u6267\u884c\u200b\u3002 </p>Bash<pre><code>clang-16 -O1 -fpass-plugin=./func_lister.so test.c -o test\n</code></pre> clang-16\u200b\u7a0b\u5e8f\u200b\u4f1a\u200b\u8f93\u51fa\u200btest.c\u200b\u5b9a\u4e49\u200b\u7684\u200b\u51fd\u6570\u200b\u540d\u200b\uff1a Text Only<pre><code>testFunctionOne\ntestFunctionTwo\nmain\n</code></pre><p></p>"},{"location":"blog/llvm%E5%85%A5%E9%97%A8-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%AE%A1%E7%AE%97%E5%99%A8/#\u53c2\u8003","title":"\u53c2\u8003","text":"<ul> <li> <p>https://llvm.org/docs/WritingAnLLVMNewPMPass.html</p> </li> <li> <p>https://blog.llvm.org/posts/2021-03-26-the-new-pass-manager/</p> </li> <li> <p>https://stackoverflow.com/questions/54447985/how-to-automatically-register-and-load-modern-pass-in-clang</p> </li> <li> <p>https://sh4dy.com/2024/06/29/learning_llvm_01/</p> </li> </ul>"},{"location":"blog/llvm%E5%85%A5%E9%97%A8-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%AE%A1%E7%AE%97%E5%99%A8/#llvm\u5f00\u53d1\u4e2d\u7684\u4e00\u4e9b\u6982\u5ff5","title":"LLVM\u200b\u5f00\u53d1\u200b\u4e2d\u200b\u7684\u200b\u4e00\u4e9b\u200b\u6982\u5ff5","text":""},{"location":"blog/llvm%E5%85%A5%E9%97%A8-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%AE%A1%E7%AE%97%E5%99%A8/#module\u662f\u4ec0\u4e48","title":"Module\u200b\u662f\u200b\u4ec0\u4e48\u200b\uff1f","text":"<p>\u200b\u5728\u200bLLVM\u200b\u4e2d\u200b\uff0cModule\u200b\u662f\u200b\u4e00\u4e2a\u200b\u9876\u5c42\u200b\u5bb9\u5668\u200b\uff0c\u200b\u7528\u4e8e\u200b\u5c01\u88c5\u200b\u4e0e\u200b\u6574\u4e2a\u200b\u7a0b\u5e8f\u200b\u6216\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u91cd\u8981\u200b\u90e8\u5206\u200b\u76f8\u5173\u200b\u7684\u200b\u6240\u6709\u200b\u4fe1\u606f\u200b\u3002\u200b\u5b83\u200b\u662f\u200bLLVM\u200b\u4e2d\u95f4\u200b\u8868\u793a\u200b\uff08IR\uff09\u200b\u5bf9\u8c61\u200b\u7684\u200b\u6700\u9ad8\u7ea7\u522b\u200b\u7684\u200b\u5bb9\u5668\u200b\u3002\u200b\u6bcf\u4e2a\u200bModule\u200b\u5305\u542b\u200b\u4ee5\u4e0b\u5185\u5bb9\u200b\uff1a\u200b\u5168\u5c40\u53d8\u91cf\u200b\u5217\u8868\u200b\u3001 \u200b\u51fd\u6570\u200b\u5217\u8868\u200b\u3001\u200b\u4f9d\u8d56\u200b\u7684\u200b\u5e93\u200b\u6216\u200b\u5176\u4ed6\u200b\u6a21\u5757\u200b\u7684\u200b\u5217\u8868\u200b\u3001\u200b\u7b26\u53f7\u8868\u200b\u3001\u200b\u76ee\u6807\u200b\u7279\u6027\u200b\u5143\u200b\u6570\u636e\u200b\u3002</p> <p>Module\u200b\u5728\u200bLLVM\u200b\u4e2d\u200b\u626e\u6f14\u7740\u200b\u4e00\u4e2a\u200b\u5173\u952e\u200b\u89d2\u8272\u200b\uff0c\u200b\u4f5c\u4e3a\u200b\u6240\u6709\u200b\u76f8\u5173\u200b\u4fe1\u606f\u200b\u7684\u200b\u96c6\u6210\u200b\u70b9\u200b\uff0c\u200b\u7528\u4e8e\u200b\u8868\u793a\u200b\u548c\u200b\u64cd\u4f5c\u200b\u6574\u4e2a\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u7ed3\u6784\u200b\u548c\u200b\u884c\u4e3a\u200b\u3002\u200b\u5b83\u200b\u4e3a\u200bLLVM\u200b\u7684\u200b\u7f16\u8bd1\u200b\u548c\u200b\u4f18\u5316\u200b\u8fc7\u7a0b\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u5fc5\u8981\u200b\u7684\u200b\u4e0a\u4e0b\u6587\u200b\u548c\u200b\u7ec4\u7ec7\u200b\u7ed3\u6784\u200b\u3002</p>"},{"location":"blog/llvm%E5%85%A5%E9%97%A8-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%AE%A1%E7%AE%97%E5%99%A8/#basic-block\u662f\u4ec0\u4e48","title":"Basic Block\u200b\u662f\u200b\u4ec0\u4e48\u200b\uff1f","text":"<p>\u200b\u57fa\u672c\u5757\u200b\uff08Basic Block\uff09\u200b\u662f\u200b\u6307\u200b\u4e00\u7ec4\u200b\u76f4\u7ebf\u200b\u6267\u884c\u200b\u7684\u200b\u6307\u4ee4\u200b\u5e8f\u5217\u200b\uff0c\u200b\u5176\u4e2d\u200b\u6ca1\u6709\u200b\u5206\u652f\u200b\u3002\u200b\u8fd9\u200b\u610f\u5473\u7740\u200b\u6267\u884c\u200b\u4ece\u200b\u4e00\u4e2a\u200b\u5355\u4e00\u200b\u7684\u200b\u5165\u53e3\u200b\u70b9\u200b\u5f00\u59cb\u200b\uff0c\u200b\u6309\u200b\u987a\u5e8f\u200b\u6267\u884c\u200b\u5230\u200b\u4e00\u4e2a\u200b\u5355\u4e00\u200b\u7684\u200b\u51fa\u53e3\u200b\u70b9\u200b\uff0c\u200b\u7136\u540e\u200b\u7ee7\u7eed\u200b\u5230\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u57fa\u672c\u5757\u200b\u3002\u200b\u57fa\u672c\u5757\u200b\u5c5e\u4e8e\u200b\u67d0\u4e2a\u200b\u51fd\u6570\u200b\uff0c\u200b\u5e76\u4e14\u200b\u4e0d\u80fd\u200b\u5728\u200b\u5176\u4e2d\u200b\u95f4\u200b\u63d2\u5165\u200b\u8df3\u8f6c\u200b\uff0c\u200b\u8fd9\u200b\u786e\u4fdd\u200b\u4e86\u200b\u4e00\u65e6\u200b\u5f00\u59cb\u200b\u6267\u884c\u200b\uff0c\u200b\u63a7\u5236\u6d41\u200b\u5c06\u4f1a\u200b\u987a\u5e8f\u200b\u6267\u884c\u200b\u5b8c\u8be5\u200b\u5757\u200b\u4e2d\u200b\u7684\u200b\u6240\u6709\u200b\u6307\u4ee4\u200b\u3002</p> <p>\u200b\u57fa\u672c\u5757\u200b\u7684\u200b\u7279\u70b9\u200b\u5305\u62ec\u200b\uff1a</p> <ol> <li> <p>\u200b\u5355\u4e00\u200b\u5165\u53e3\u200b\u548c\u200b\u51fa\u53e3\u200b\uff1a\u200b\u6bcf\u4e2a\u200b\u57fa\u672c\u5757\u200b\u53ea\u6709\u200b\u4e00\u4e2a\u200b\u5165\u53e3\u200b\u70b9\u200b\u548c\u200b\u4e00\u4e2a\u200b\u51fa\u53e3\u200b\u70b9\u200b\uff0c\u200b\u6ca1\u6709\u200b\u4e2d\u9014\u200b\u8df3\u8f6c\u200b\uff0c\u200b\u8fd9\u200b\u4fdd\u8bc1\u200b\u4e86\u200b\u6307\u4ee4\u200b\u7684\u200b\u7ebf\u6027\u200b\u6267\u884c\u200b\u3002</p> </li> <li> <p>\u200b\u8fde\u8d2f\u6027\u200b\uff1a\u200b\u4e00\u65e6\u200b\u7a0b\u5e8f\u6267\u884c\u200b\u8fdb\u5165\u200b\u57fa\u672c\u5757\u200b\uff0c\u200b\u5b83\u200b\u5c06\u200b\u6309\u200b\u987a\u5e8f\u200b\u6267\u884c\u200b\u8be5\u5757\u200b\u4e2d\u200b\u7684\u200b\u6240\u6709\u200b\u6307\u4ee4\u200b\uff0c\u200b\u76f4\u5230\u200b\u5230\u8fbe\u200b\u51fa\u53e3\u200b\u70b9\u200b\u3002</p> </li> <li> <p>\u200b\u51fd\u6570\u200b\u7684\u200b\u7ec4\u6210\u90e8\u5206\u200b\uff1a\u200b\u57fa\u672c\u5757\u200b\u662f\u200b\u51fd\u6570\u200b\u4e2d\u200b\u7684\u200b\u57fa\u672c\u200b\u6784\u5efa\u200b\u5355\u4f4d\u200b\uff0c\u200b\u51fd\u6570\u200b\u7531\u200b\u4e00\u4e2a\u200b\u6216\u200b\u591a\u4e2a\u200b\u57fa\u672c\u5757\u200b\u7ec4\u6210\u200b\u3002</p> </li> <li> <p>\u200b\u9886\u5bfc\u8005\u200b\u6307\u4ee4\u200b\uff1a\u200b\u57fa\u672c\u5757\u200b\u7684\u200b\u7b2c\u4e00\u6761\u200b\u6307\u4ee4\u200b\u901a\u5e38\u200b\u88ab\u200b\u79f0\u4e3a\u200b\u201c\u200b\u9886\u5bfc\u8005\u200b\u201d\uff08leader\uff09\uff0c\u200b\u56e0\u4e3a\u200b\u5b83\u200b\u662f\u200b\u63a7\u5236\u6d41\u200b\u8fdb\u5165\u200b\u8be5\u200b\u57fa\u672c\u5757\u200b\u65f6\u200b\u9996\u5148\u200b\u6267\u884c\u200b\u7684\u200b\u6307\u4ee4\u200b\u3002</p> </li> </ol> <p>\u200b\u57fa\u672c\u5757\u200b\u7684\u200b\u7ed3\u6784\u200b\u6709\u52a9\u4e8e\u200b\u7b80\u5316\u200b\u63a7\u5236\u6d41\u200b\u5206\u6790\u200b\u548c\u200b\u4f18\u5316\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5b83\u4eec\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u6e05\u6670\u200b\u7684\u200b\u6267\u884c\u200b\u8def\u5f84\u200b\uff0c\u200b\u4fbf\u4e8e\u200b\u7f16\u8bd1\u5668\u200b\u8fdb\u884c\u200b\u4f18\u5316\u200b\u5904\u7406\u200b\uff0c\u200b\u5982\u200b\u5e38\u91cf\u200b\u5408\u5e76\u200b\u3001\u200b\u6307\u4ee4\u200b\u91cd\u65b0\u200b\u6392\u5e8f\u200b\u7b49\u200b\u3002</p>"},{"location":"blog/llvm%E5%85%A5%E9%97%A8-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%AE%A1%E7%AE%97%E5%99%A8/#control-flow-graph-\u662f\u4ec0\u4e48","title":"Control Flow Graph \u200b\u662f\u200b\u4ec0\u4e48\u200b\uff1f","text":"<p>\u200b\u63a7\u5236\u6d41\u200b\u56fe\u200b\uff08Control Flow Graph\uff0cCFG\uff09\u200b\u662f\u200b\u4e00\u4e2a\u200b\u6709\u5411\u56fe\u200b\uff0c\u200b\u5176\u4e2d\u200b\u7684\u200b\u8282\u70b9\u200b\u4ee3\u8868\u200b\u57fa\u672c\u5757\u200b\uff0c\u200b\u8282\u70b9\u200b\u4e4b\u95f4\u200b\u7684\u200b\u8fb9\u200b\u8868\u793a\u200b\u63a7\u5236\u6d41\u200b\u8def\u5f84\u200b\uff0c\u200b\u6307\u793a\u200b\u6267\u884c\u200b\u5982\u4f55\u200b\u4ece\u200b\u4e00\u4e2a\u200b\u57fa\u672c\u5757\u200b\u8f6c\u79fb\u200b\u5230\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u57fa\u672c\u5757\u200b\u3002</p> <p>\u200b\u63a7\u5236\u6d41\u200b\u56fe\u200b\u7684\u200b\u7279\u70b9\u200b\u548c\u200b\u4f5c\u7528\u200b\u5305\u62ec\u200b\uff1a\u200b\u8282\u70b9\u200b\u8868\u793a\u200b\u57fa\u672c\u5757\u200b\uff1a\u200b\u5728\u200bCFG\u200b\u4e2d\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u8282\u70b9\u200b\u5bf9\u5e94\u200b\u4e00\u4e2a\u200b\u57fa\u672c\u5757\u200b\uff0c\u200b\u57fa\u672c\u5757\u200b\u662f\u200b\u7a0b\u5e8f\u200b\u4e2d\u200b\u4e00\u6bb5\u200b\u6ca1\u6709\u200b\u4e2d\u65ad\u200b\u7684\u200b\u6307\u4ee4\u200b\u5e8f\u5217\u200b\u3002\u200b\u8fb9\u200b\u8868\u793a\u200b\u63a7\u5236\u6d41\u200b\uff1a\u200b\u8282\u70b9\u200b\u4e4b\u95f4\u200b\u7684\u200b\u6709\u200b\u5411\u200b\u8fb9\u200b\u8868\u793a\u200b\u7a0b\u5e8f\u200b\u5728\u200b\u6267\u884c\u200b\u65f6\u200b\u53ef\u80fd\u200b\u7684\u200b\u8f6c\u79fb\u200b\u8def\u5f84\u200b\u3002\u200b\u4e5f\u5c31\u662f\u8bf4\u200b\uff0c\u200b\u5982\u679c\u200b\u7a0b\u5e8f\u200b\u5728\u200b\u4e00\u4e2a\u200b\u57fa\u672c\u5757\u200b\u7ed3\u675f\u200b\u540e\u200b\u53ef\u80fd\u200b\u8f6c\u79fb\u200b\u5230\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u57fa\u672c\u5757\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5728\u200bCFG\u200b\u4e2d\u200b\uff0c\u200b\u8fd9\u200b\u4e24\u4e2a\u200b\u57fa\u672c\u5757\u200b\u4e4b\u95f4\u200b\u5c31\u200b\u4f1a\u200b\u6709\u200b\u4e00\u6761\u200b\u8fb9\u200b\u3002</p> <p>CFG\u200b\u662f\u200b\u7f16\u8bd1\u5668\u200b\u8fdb\u884c\u200b\u7a0b\u5e8f\u200b\u5206\u6790\u200b\u548c\u200b\u4f18\u5316\u200b\u7684\u200b\u91cd\u8981\u200b\u5de5\u5177\u200b\u3002\u200b\u901a\u8fc7\u200b\u5206\u6790\u200bCFG\uff0c\u200b\u7f16\u8bd1\u5668\u200b\u53ef\u4ee5\u200b\u4e86\u89e3\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u6267\u884c\u200b\u6d41\u7a0b\u200b\uff0c\u200b\u4ece\u800c\u200b\u8fdb\u884c\u200b\u4f18\u5316\u200b\uff0c\u200b\u4f8b\u5982\u200b\u6b7b\u200b\u4ee3\u7801\u200b\u6d88\u9664\u200b\u3001\u200b\u5faa\u73af\u200b\u4f18\u5316\u200b\u3001\u200b\u8def\u5f84\u5206\u6790\u200b\u7b49\u200b\u3002</p> <p></p> <p></p>"},{"location":"blog/llvm%E5%85%A5%E9%97%A8-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%AE%A1%E7%AE%97%E5%99%A8/#\u901a\u8fc7\u4f8b\u5b50\u5b66\u4e60\u5982\u4f55\u7f16\u5199pass","title":"\u901a\u8fc7\u200b\u4f8b\u5b50\u200b\u5b66\u4e60\u200b\u5982\u4f55\u200b\u7f16\u5199\u200bPass","text":"<p>\u200b\u524d\u9762\u200b\u7684\u200bPass\u200b\u6ce8\u518c\u200b\u4f7f\u7528\u200b\u4e86\u200bregisterPipelineStartEPCallback\uff0c\u200b\u8fd9\u4e2a\u200b\u5c0f\u8282\u200b\u7684\u200b\u4f8b\u5b50\u200b\u6362\u6210\u200bregisterPipelineParsingCallback\u3002</p> C++<pre><code>PassPluginLibraryInfo getPassPluginInfo()\n{\n    const auto callback = [](PassBuilder &amp;PB)\n    {\n        PB.registerPipelineParsingCallback(\n            [&amp;](StringRef name, ModulePassManager &amp;MPM, ArrayRef&lt;PassBuilder::PipelineElement&gt;)\n            {\n                if (name == \"run-pass\")\n                {\n                    MPM.addPass(SomePass());\n                    return true;\n                }\n                return false;\n            });\n    };\n\n    return {LLVM_PLUGIN_API_VERSION, \"SomePass\", LLVM_VERSION_STRING, callback};\n};\n\nextern \"C\" LLVM_ATTRIBUTE_WEAK PassPluginLibraryInfo llvmGetPassPluginInfo()\n{\n    return getPassPluginInfo();\n}\n</code></pre> <p>\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u4e0b\u9762\u200b\u7684\u200b\u547d\u4ee4\u200b\uff0c\u200b\u751f\u6210\u200b\u5305\u542b\u200bLLVM IR\u200b\u7684\u200b.ll \u200b\u6587\u4ef6\u200b\uff0c\u200b\u7136\u540e\u200b\u4f7f\u7528\u200bopt\u200b\u5de5\u5177\u200b\u6267\u884c\u200b\u6211\u4eec\u200b\u7684\u200bPass\u3002</p> Bash<pre><code>clang-16 -S -emit-llvm test.c -o test.ll\nopt-16 -load-pass-plugin ./lib.so -passes=run-pass -disable-output test.ll\n</code></pre> C++<pre><code>struct SomePass: public PassInfoMixin&lt;SomePass&gt;{\n  ...\n  static bool isRequired()\n  {\n    return true;\n  }\n}\n</code></pre> <p>\u200b\u5b8c\u6574\u200b\u53ef\u200b\u7f16\u8bd1\u200b\u4ee3\u7801\u200b\u8bbf\u95ee\u200bKenForever1/llvm_snippet</p>"},{"location":"blog/llvm%E5%85%A5%E9%97%A8-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%AE%A1%E7%AE%97%E5%99%A8/#pass-example1-\u6253\u5370\u5168\u5c40\u53d8\u91cf\u53ca\u5176\u7c7b\u578b","title":"Pass example1: \u200b\u6253\u5370\u200b\u5168\u5c40\u53d8\u91cf\u200b\u53ca\u5176\u200b\u7c7b\u578b","text":"<p>\u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b LLVM \u200b\u4f20\u9012\u200b\uff0c\u200b\u5b83\u4f1a\u200b\u6253\u5370\u200b\u51fa\u200b\u7a0b\u5e8f\u200b\u4e2d\u200b\u7684\u200b\u6240\u6709\u200b\u5168\u5c40\u53d8\u91cf\u200b\u53ca\u5176\u200b\u7c7b\u578b\u200b\u3002\u200b\u4ee3\u7801\u200b\u904d\u5386\u200b\u6240\u6709\u200b\u5168\u5c40\u53d8\u91cf\u200b\uff0c\u200b\u83b7\u53d6\u200b\u5b83\u4eec\u200b\u7684\u200b\u540d\u79f0\u200b\u548c\u200b\u7c7b\u578b\u200b\uff0c\u200b\u5e76\u200b\u5c06\u200b\u5176\u200b\u6253\u5370\u200b\u51fa\u6765\u200b\u3002 </p>C++<pre><code>PreservedAnalyses run(Module &amp;M, ModuleAnalysisManager &amp;MPM)\n{\n  auto globals = M.globals();\n  for(auto itr = globals.begin();itr!=globals.end();itr++){\n    StringRef varName = itr-&gt;getName();\n    Type* ty = itr-&gt;getType();\n    outs()&lt;&lt;\"Variable Name: \"&lt;&lt;varName&lt;&lt;\"\\n\";\n    outs()&lt;&lt;\"Variable Type: \";\n    ty-&gt;print(outs());\n    outs()&lt;&lt;\"\\n\";\n  }\n  return PreservedAnalyses::all();\n}\n</code></pre><p></p> <p>\u200b\u5b8c\u6574\u200b\u4ee3\u7801\u200b\uff1a </p>C++<pre><code>// main.cpp\n#include \"llvm/IR/PassManager.h\"\n#include \"llvm/Passes/PassBuilder.h\"\n#include \"llvm/Passes/PassPlugin.h\"\n#include \"llvm/Support/raw_ostream.h\"\nusing namespace llvm;\n\nnamespace\n{\n  struct GlobalVarsPass : public PassInfoMixin&lt;GlobalVarsPass&gt;\n  {\n    PreservedAnalyses run(Module &amp;M, ModuleAnalysisManager &amp;MPM)\n    {\n      auto globals = M.globals();\n      for(auto itr = globals.begin();itr!=globals.end();itr++){\n        StringRef varName = itr-&gt;getName();\n        Type* ty = itr-&gt;getType();\n        outs()&lt;&lt;\"Variable Name: \"&lt;&lt;varName&lt;&lt;\"\\n\";\n        outs()&lt;&lt;\"Variable Type: \";\n        ty-&gt;print(outs());\n        outs()&lt;&lt;\"\\n\";\n      }\n      return PreservedAnalyses::all();\n    }\n\n    static bool isRequired()\n    {\n      return true;\n    }\n  };\n\n}\n\nPassPluginLibraryInfo getPassPluginInfo()\n{\n  const auto callback = [](PassBuilder &amp;PB)\n  {\n    PB.registerPipelineParsingCallback(\n        [&amp;](StringRef name, ModulePassManager &amp;MPM, ArrayRef&lt;PassBuilder::PipelineElement&gt;)\n        {\n          if (name == \"run-pass\")\n          {\n            MPM.addPass(GlobalVarsPass());\n            return true;\n          }\n          return false;\n        });\n  };\n\n  return {LLVM_PLUGIN_API_VERSION, \"GlobalVarsPass\", LLVM_VERSION_STRING, callback};\n};\n\nextern \"C\" LLVM_ATTRIBUTE_WEAK PassPluginLibraryInfo llvmGetPassPluginInfo()\n{\n  return getPassPluginInfo();\n}\n</code></pre><p></p> <p>test.c\u200b\u4f8b\u5b50\u200b:</p> C++<pre><code>#include&lt;stdio.h&gt;\n\nint varOne = 1337;\nchar* name = \"sh4dy\";\nchar chr;\nfloat num;\n\nvoid testFunction(int x){\n    if(x==1337){\n        puts(\"nice one\");\n    }else{\n        puts(\"sad\");\n    }\n}\n\nint main(){\n    return 0;\n}\n</code></pre> <p>\u200b\u6211\u4eec\u200b\u6765\u770b\u200b\u4e00\u4e0b\u200b\u600e\u4e48\u200b\u7f16\u8bd1\u200b\u6267\u884c\u200b\uff1a </p>Bash<pre><code>#!/bin/bash\nclang-16 -shared -o lib.so main.cpp -fPIC\nclang-16 -S -emit-llvm test.c -o test.ll\nopt-16 -load-pass-plugin ./lib.so -passes=run-pass -disable-output test.ll\n</code></pre><p></p> <p>\u200b\u8fd0\u884c\u200b\u7ed3\u679c\u200b\uff1a </p>Bash<pre><code>Variable Name: varOne\nVariable Type: ptr\nVariable Name: .str\nVariable Type: ptr\nVariable Name: name\nVariable Type: ptr\nVariable Name: .str.1\nVariable Type: ptr\nVariable Name: .str.2\nVariable Type: ptr\nVariable Name: chr\nVariable Type: ptr\nVariable Name: num\nVariable Type: ptr\n</code></pre><p></p>"},{"location":"blog/llvm%E5%85%A5%E9%97%A8-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%AE%A1%E7%AE%97%E5%99%A8/#pass-example2-\u68c0\u6d4b\u6ca1\u6709\u4f7f\u7528\u8fc7\u7684\u5168\u5c40\u53d8\u91cf","title":"Pass example2: \u200b\u68c0\u6d4b\u200b\u6ca1\u6709\u200b\u4f7f\u7528\u200b\u8fc7\u200b\u7684\u200b\u5168\u5c40\u53d8\u91cf","text":"<p>\u200b\u5b9e\u73b0\u200b\u539f\u7406\u200b\uff1a\u200b\u8fd9\u200b\u6bb5\u200b\u4ee3\u7801\u200b\u904d\u5386\u200b\u6240\u6709\u200b\u5168\u5c40\u53d8\u91cf\u200b\u5e76\u200b\u8c03\u7528\u200buse_empty\u200b\u51fd\u6570\u200b\u3002\u200b\u5982\u679c\u200b\u8be5\u503c\u200b\u6ca1\u6709\u200b\u4f7f\u7528\u8005\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u51fd\u6570\u200b\u5c06\u200b\u8fd4\u56de\u200b true\u3002</p> <p></p>C++<pre><code>PreservedAnalyses run(Module &amp;M, ModuleAnalysisManager &amp;MPM)\n{\n  auto globalVars = M.globals();\n  for(GlobalVariable &amp;gvar: globalVars){\n    if(gvar.use_empty()){\n        outs()&lt;&lt;\"Unused global variable: \"&lt;&lt;gvar.getName()&lt;&lt;\"\\n\";\n    }\n  }\n  return PreservedAnalyses::all();\n}\n</code></pre> \u200b\u8fd8\u662f\u200b\u4e0a\u9762\u200b\u7684\u200b\u6267\u884c\u200b\u65b9\u6cd5\u200b\u548c\u200btest.c\u200b\u4f8b\u5b50\u200b\u54c8\u200b\uff0c\u200b\u8fd0\u884c\u200b\u7ed3\u679c\u200b\u5c06\u4f1a\u200b\u662f\u200b\uff1a Bash<pre><code>Unused global variable: varOne\nUnused global variable: name\nUnused global variable: chr\nUnused global variable: num\n</code></pre><p></p>"},{"location":"blog/llvm%E5%85%A5%E9%97%A8-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%AE%A1%E7%AE%97%E5%99%A8/#pass-example3-\u6253\u5370\u51fd\u6570\u5185\u6240\u6709\u57fa\u672c\u5757","title":"Pass example3: \u200b\u6253\u5370\u51fd\u6570\u200b\u5185\u200b\u6240\u6709\u200b\u57fa\u672c\u5757","text":"<p>\u200b\u7f16\u5199\u200b\u4e00\u4e2a\u200b\u7528\u4e8e\u200b\u8ba1\u7b97\u200b\u5e76\u200b\u6253\u5370\u51fd\u6570\u200b\u5185\u200b\u6240\u6709\u200b\u57fa\u672c\u5757\u200b\u7684\u200bLLVM pass\u200b\u6d89\u53ca\u200b\u904d\u5386\u200b\u6a21\u5757\u200b\u4e2d\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u51fd\u6570\u200b\uff0c\u200b\u7136\u540e\u200b\u68c0\u67e5\u200b\u8fd9\u4e9b\u200b\u51fd\u6570\u200b\u4e2d\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u57fa\u672c\u5757\u200b\u3002\u200b\u91cd\u8981\u200b\u7684\u200b\u662f\u200b\u8981\u200b\u68c0\u67e5\u200b\u51fd\u6570\u200b\u662f\u5426\u200b\u53ea\u662f\u200b\u4e00\u4e2a\u200b\u58f0\u660e\u200b\uff0c\u200b\u901a\u8fc7\u200bisDeclaration\u200b\u51fd\u6570\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u6a21\u5757\u200b\u901a\u5e38\u200b\u5305\u542b\u200b\u4ee3\u7801\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u7684\u200b\u5e93\u51fd\u6570\u200b\u7684\u200b\u58f0\u660e\u200b\uff0c\u200b\u4f46\u200b\u5b83\u4eec\u200b\u7684\u200b\u5b8c\u6574\u200b\u5b9e\u73b0\u200b\u5e76\u200b\u4e0d\u200b\u5728\u200b\u8fd9\u4e2a\u200b\u6a21\u5757\u200b\u4e2d\u200b\u3002\u200b\u901a\u8fc7\u200b\u68c0\u67e5\u200b\u58f0\u660e\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u907f\u514d\u200b\u5c1d\u8bd5\u200b\u5206\u6790\u200b\u5728\u200b\u8be5\u200b\u6a21\u5757\u200b\u4e2d\u200b\u6ca1\u6709\u200b\u5b9e\u9645\u200b\u4ee3\u7801\u200b\u7684\u200b\u51fd\u6570\u200b\u3002</p> C++<pre><code>// main.cpp\u200b\u90e8\u5206\u200b\u4ee3\u7801\u200b\nPreservedAnalyses run(Module &amp;M, ModuleAnalysisManager &amp;MPM)\n{\n    for (Function &amp;F : M)\n    {\n        if (!F.isDeclaration())\n        {\n            int nBlocks = 0;\n            outs() &lt;&lt; \"----------------------------------------------------------------------\\n\";\n            outs() &lt;&lt; \"Counting and printing basic blocks in the function \" &lt;&lt; F.getName() &lt;&lt; \"\\n\";\n            for (BasicBlock &amp;BB : F)\n            {\n                BB.print(outs());\n                outs() &lt;&lt; \"\\n\";\n                nBlocks++;\n            }\n            outs() &lt;&lt; \"Number of basic blocks: \" &lt;&lt; nBlocks &lt;&lt; \"\\n\";\n        }\n    }\n    return PreservedAnalyses::all();\n}\n</code></pre> <p>test.c\u200b\u4f8b\u5b50\u200b\uff1a </p>C<pre><code>#include &lt;stdio.h&gt;\n\nvoid testFunction(int x)\n{\n    if (x == 1337)\n    {\n        puts(\"nice one\");\n    }\n    else\n    {\n        puts(\"sad\");\n    }\n}\n\nvoid someFunction()\n{\n    for (int i = 0; i &lt; 10; i++)\n    {\n        printf(\"%d\\n\", i);\n    }\n}\n\nvoid anotherFunction()\n{\n    while (1)\n    {\n        puts(\"abcd\");\n    }\n}\n\nint main()\n{\n    return 0;\n}\n</code></pre><p></p> <p>\u200b\u8fd0\u884c\u200b\u7ed3\u679c\u200b\u592a\u200b\u957f\u200b\uff0c\u200b\u90e8\u95e8\u200b\u5185\u5bb9\u200b\u5982\u4e0b\u200b\uff0c\u200b\u4f1a\u200b\u6253\u5370\u200b\u6bcf\u4e2a\u200b\u51fd\u6570\u200b\u7684\u200b\u57fa\u672c\u5757\u200b\uff1a </p>Bash<pre><code>----------------------------------------------------------------------\nCounting and printing basic blocks in the function main\n\n  %1 = alloca i32, align 4\n  store i32 0, ptr %1, align 4\n  ret i32 0\n\nNumber of basic blocks: 1\n</code></pre><p></p>"},{"location":"blog/llvm%E5%85%A5%E9%97%A8-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%AE%A1%E7%AE%97%E5%99%A8/#pass-example4-\u68c0\u6d4b\u9012\u5f52","title":"Pass example4: \u200b\u68c0\u6d4b\u200b\u9012\u5f52","text":"C++<pre><code>PreservedAnalyses run(Module &amp;M, ModuleAnalysisManager &amp;MPM)\n{\n  for (Function &amp;F : M)\n  {\n    bool recursionDetected = false;\n\n    for (BasicBlock &amp;BB : F)\n    {\n      for (Instruction &amp;instr : BB)\n      {\n        if (instr.getOpcode() == Instruction::Call)\n        {\n          CallInst *callInstr = dyn_cast&lt;CallInst&gt;(&amp;instr);\n          if (callInstr)\n          {\n            Function *calledFunction = callInstr-&gt;getCalledFunction();\n            if (calledFunction &amp;&amp; calledFunction-&gt;getName() == F.getName())\n            {\n              outs() &lt;&lt; \"Recursion detected: \" &lt;&lt; calledFunction-&gt;getName() &lt;&lt; \"\\n\";\n              recursionDetected = true;\n              break;\n            }\n          }\n        }\n      }\n      if (recursionDetected)\n        break;\n    }\n  }\n  return PreservedAnalyses::all();\n}\n</code></pre> <p>test.c\u200b\u4f8b\u5b50\u200b\uff1a </p>C<pre><code>int fib(int n)\n{\n    if (n &lt;= 1)\n        return n;\n    return fib(n - 1) + fib(n - 2);\n}\n\nint testFunction()\n{\n    return 1000;\n}\n\nvoid anotherFunction()\n{\n    while (1)\n        ;\n}\n\nint main()\n{\n    fib(10);\n    return 0;\n}\n</code></pre><p></p> <p>\u200b\u8fd0\u884c\u200b\u7ed3\u679c\u200b\uff1a </p>Bash<pre><code>Recursion detected: fib\n</code></pre><p></p>"},{"location":"blog/llvm%E5%85%A5%E9%97%A8-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%AE%A1%E7%AE%97%E5%99%A8/#pass-example5-\u5bf9\u63a7\u5236\u6d41\u56fe\u8fdb\u884c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22dfs","title":"Pass example5: \u200b\u5bf9\u200b\u63a7\u5236\u6d41\u200b\u56fe\u200b\u8fdb\u884c\u200b\u6df1\u5ea6\u200b\u4f18\u5148\u200b\u641c\u7d22\u200b\uff08DFS\uff09","text":"<p>\u200b\u5bf9\u4e8e\u200b\u6bcf\u4e2a\u200b\u51fd\u6570\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200bF.getEntryBlock()\u200b\u83b7\u53d6\u200b\u7b2c\u4e00\u4e2a\u200b\u57fa\u672c\u5757\u200b\uff0c\u200b\u4e5f\u200b\u79f0\u4e3a\u200b\u5165\u53e3\u200b\u5757\u200b\u3002\u200b\u7136\u540e\u200b\u6211\u4eec\u200b\u8c03\u7528\u200b\u4e0b\u9762\u200b\u63d0\u5230\u200b\u7684\u200bDfs\u200b\u51fd\u6570\u200b\u3002</p> C++<pre><code>void Dfs(BasicBlock *currentBlock)\n{\n  static std::unordered_map&lt;BasicBlock *, bool&gt; visited;\n  visited[currentBlock] = true;\n  currentBlock-&gt;print(outs());\n  for (BasicBlock *bb : successors(currentBlock))\n  {\n    if (!visited[bb])\n    {\n        Dfs(bb);\n    }\n  }\n}\n\nPreservedAnalyses run(Module &amp;M, ModuleAnalysisManager &amp;MPM)\n{\n  for (Function &amp;F : M)\n  {\n    if (!F.isDeclaration())\n    {\n      outs() &lt;&lt; \"----------------------------------------------------------------\\n\";\n      outs() &lt;&lt; \"Running DFS for the function \" &lt;&lt; F.getName() &lt;&lt; \"\\n\";\n      BasicBlock &amp;entryBlock = F.getEntryBlock();\n      Dfs(&amp;entryBlock);\n    }\n  }\n  return PreservedAnalyses::all();\n}\n</code></pre> C++<pre><code>#include &lt;stdio.h&gt;\n\nint testFunction()\n{\n    for (int i = 0; i &lt; 10; i++)\n    {\n        printf(\"%d\\n\", i);\n    }\n    return 1337;\n}\n\nint main()\n{\n    int x = testFunction();\n    if (x &gt; 1000)\n    {\n        puts(\"Yay\");\n    }\n    else\n    {\n        puts(\"Ne\");\n    }\n    return 0;\n}\n</code></pre> Bash<pre><code>----------------------------------------------------------------\nRunning DFS for the function testFunction\n\n  %1 = alloca i32, align 4\n  store i32 0, ptr %1, align 4\n  br label %2\n\n2:                                                ; preds = %8, %0\n  %3 = load i32, ptr %1, align 4\n  %4 = icmp slt i32 %3, 10\n  br i1 %4, label %5, label %11\n\n5:                                                ; preds = %2\n  %6 = load i32, ptr %1, align 4\n  %7 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %6)\n  br label %8\n\n8:                                                ; preds = %5\n  %9 = load i32, ptr %1, align 4\n  %10 = add nsw i32 %9, 1\n  store i32 %10, ptr %1, align 4\n  br label %2, !llvm.loop !6\n\n11:                                               ; preds = %2\n  ret i32 1337\n----------------------------------------------------------------\nRunning DFS for the function main\n\n  %1 = alloca i32, align 4\n  %2 = alloca i32, align 4\n  store i32 0, ptr %1, align 4\n  %3 = call i32 @testFunction()\n  store i32 %3, ptr %2, align 4\n  %4 = load i32, ptr %2, align 4\n  %5 = icmp sgt i32 %4, 1000\n  br i1 %5, label %6, label %8\n\n6:                                                ; preds = %0\n  %7 = call i32 @puts(ptr noundef @.str.1)\n  br label %10\n\n10:                                               ; preds = %8, %6\n  ret i32 0\n\n8:                                                ; preds = %0\n  %9 = call i32 @puts(ptr noundef @.str.2)\n  br label %10\n</code></pre> <p>\u200b\u5728\u200b\u4e0a\u9762\u200b\u7684\u200btest.c\u200b\u4e2d\u200b\u5b58\u5728\u200b\u56db\u4e2a\u200bbasic block\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u547d\u4ee4\u200b\u751f\u6210\u200bdot\u200b\u6587\u4ef6\u200b\uff0c\u200b\u7136\u540e\u200b\u4f7f\u7528\u200bdot\u200b\u5de5\u5177\u200b\u751f\u6210\u200b\u56fe\u7247\u200b\u3002 </p>Bash<pre><code># \u200b\u5b89\u88c5\u200bdot\u200b\u5de5\u5177\u200b\nsudo apt install graphviz\n\n# Generate the LLVM IR\nclang-16 -S -emit-llvm test.c -o test.ll\n\n# Print Control-Flow Graph to 'dot' file.\nopt-16 -dot-cfg -disable-output -enable-new-pm=0 test.ll\n\n# Generate an image from the 'dot' file\ndot -Tpng -o img.png .main.dot\n</code></pre><p></p> <p>main\u200b\u51fd\u6570\u200b\u7684\u200bCFG\u200b\u56fe\u200b\u5982\u56fe\u6240\u793a\u200b\uff1a</p> <p></p> <p>\u200b\u8fd9\u8282\u200b\u6211\u4eec\u200b\u8981\u200b\u5b8c\u6210\u200b\u4e00\u4e2a\u200b\u4ec0\u4e48\u200b\u4e8b\u60c5\u200b\u5462\u200b\uff1f</p> <p>\u200b\u8bfb\u53d6\u200b\u4e00\u4e2a\u200b code.txt \u200b\u6587\u4ef6\u200b\uff0c\u200b\u5206\u6790\u200b\u6bcf\u200b\u4e00\u884c\u200b\u6307\u4ee4\u200b\uff0c\u200b\u6bd4\u5982\u200badd\u3002\u200b\u6bcf\u79cd\u200b\u6307\u4ee4\u200b\u90fd\u200b\u6709\u200b\u751f\u6210\u200b\u5bf9\u5e94\u200b\u7684\u200bLLVM IR\uff0c\u200b\u901a\u8fc7\u200bLLVM JIT\u200b\u7f16\u8bd1\u200b\u6ce8\u518c\u200b\u8fdb\u200bModule\u200b\u7684\u200bIR\uff0c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u6307\u4ee4\u200b\u540d\u79f0\u200b\u67e5\u627e\u200b\u5230\u200b\u5df2\u200b\u7f16\u8bd1\u200b\u7684\u200b\u51fd\u6570\u200b\u7684\u200b\u5165\u53e3\u200b\u70b9\u200b\uff0c\u200b\u8c03\u7528\u200b\u6267\u884c\u200b\uff1a</p> C++<pre><code>add 1,2\nsub 10,5\nmul 10,20\nxor 5,5\nadd 5,10\nxor 10,5\n</code></pre>"},{"location":"blog/llvm%E5%85%A5%E9%97%A8-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%AE%A1%E7%AE%97%E5%99%A8/#llvm-jit\u4ecb\u7ecd","title":"LLVM JIT\u200b\u4ecb\u7ecd","text":""},{"location":"blog/llvm%E5%85%A5%E9%97%A8-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%AE%A1%E7%AE%97%E5%99%A8/#\u4ec0\u4e48\u662fjit","title":"\u4ec0\u4e48\u200b\u662f\u200bJIT\uff1f","text":"<p>JIT\uff08\u200b\u5373\u65f6\u200b\u7f16\u8bd1\u5668\u200b\uff09\u200b\u662f\u200b\u4e00\u79cd\u200b\u5728\u200b\u7a0b\u5e8f\u200b\u5f00\u59cb\u200b\u6267\u884c\u200b\u540e\u200b\u624d\u200b\u52a8\u6001\u200b\u751f\u6210\u200b\u673a\u5668\u200b\u4ee3\u7801\u200b\u7684\u200b\u7f16\u8bd1\u5668\u200b\u3002\u200b\u4e0e\u200b\u4e4b\u200b\u76f8\u5bf9\u200b\u7684\u200b\u662f\u200bAOT\uff08\u200b\u9884\u5148\u200b\u7f16\u8bd1\u5668\u200b\uff09\uff0c\u200b\u5b83\u200b\u5728\u200b\u7a0b\u5e8f\u6267\u884c\u200b\u4e4b\u524d\u200b\u5c06\u200b\u6e90\u4ee3\u7801\u200b\u7ffb\u8bd1\u6210\u200b\u53ef\u200b\u6267\u884c\u200b\u4ee3\u7801\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u53ef\u200b\u6267\u884c\u200b\u4ee3\u7801\u200b\u5b58\u50a8\u200b\u5728\u200b\u7f16\u8bd1\u200b\u540e\u200b\u7684\u200b\u4e8c\u8fdb\u5236\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u3002</p> <p>\u200b\u5177\u4f53\u6765\u8bf4\u200b\uff0cJIT\u200b\u7f16\u8bd1\u5668\u200b\u5728\u200b\u8fd0\u884c\u200b\u65f6\u200b\u5bf9\u200b\u4ee3\u7801\u200b\u8fdb\u884c\u200b\u7f16\u8bd1\u200b\uff0c\u200b\u8fd9\u200b\u610f\u5473\u7740\u200b\u5b83\u200b\u53ef\u4ee5\u200b\u5728\u200b\u7a0b\u5e8f\u6267\u884c\u200b\u7684\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u4f18\u5316\u200b\u4ee3\u7801\u200b\u6027\u80fd\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5b83\u200b\u53ef\u4ee5\u200b\u5229\u7528\u200b\u8fd0\u884c\u200b\u65f6\u200b\u7684\u200b\u4fe1\u606f\u200b\u6765\u200b\u8fdb\u884c\u200b\u66f4\u200b\u6709\u6548\u200b\u7684\u200b\u4f18\u5316\u200b\u3002\u200b\u8fd9\u79cd\u200b\u52a8\u6001\u200b\u7f16\u8bd1\u200b\u7684\u200b\u65b9\u5f0f\u200b\u5141\u8bb8\u200b\u7a0b\u5e8f\u200b\u5728\u200b\u6267\u884c\u200b\u65f6\u200b\u8fdb\u884c\u200b\u8c03\u6574\u200b\uff0c\u200b\u4ece\u800c\u200b\u63d0\u9ad8\u6548\u7387\u200b\u548c\u200b\u6027\u80fd\u200b\u3002</p> <p>\u200b\u76f8\u53cd\u200b\uff0cAOT\u200b\u7f16\u8bd1\u5668\u200b\u5728\u200b\u7a0b\u5e8f\u8fd0\u884c\u200b\u4e4b\u524d\u200b\u5c31\u200b\u5df2\u7ecf\u200b\u5c06\u200b\u4ee3\u7801\u200b\u7f16\u8bd1\u200b\u597d\u200b\u4e86\u200b\u3002\u200b\u8fd9\u6837\u200b\u505a\u200b\u7684\u200b\u597d\u5904\u200b\u662f\u200b\u7a0b\u5e8f\u200b\u542f\u52a8\u200b\u901f\u5ea6\u200b\u66f4\u200b\u5feb\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u53ef\u200b\u6267\u884c\u200b\u4ee3\u7801\u200b\u5df2\u7ecf\u200b\u51c6\u5907\u5c31\u7eea\u200b\u3002\u200b\u7f3a\u70b9\u200b\u662f\u200b\u5728\u200b\u7f16\u8bd1\u200b\u65f6\u200b\u4e0d\u80fd\u200b\u5229\u7528\u200b\u8fd0\u884c\u200b\u65f6\u200b\u4fe1\u606f\u200b\u6765\u200b\u4f18\u5316\u200b\u4ee3\u7801\u200b\u3002</p>"},{"location":"blog/llvm%E5%85%A5%E9%97%A8-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%AE%A1%E7%AE%97%E5%99%A8/#\u4ec0\u4e48\u662forc","title":"\u4ec0\u4e48\u200b\u662f\u200bORC","text":"<p>ORC\uff08On-Request Compilation\uff0c\u200b\u6309\u200b\u9700\u200b\u7f16\u8bd1\u200b\uff09\u200b\u662f\u200bLLVM JIT API\u200b\u7684\u200b\u7b2c\u4e09\u4ee3\u200b\u5b9e\u73b0\u200b\u3002\u200b\u5728\u200bORC\u200b\u4e4b\u524d\u200b\uff0c\u200b\u6709\u200bMCJIT\uff0c\u200b\u518d\u200b\u5f80\u524d\u200b\u5219\u200b\u662f\u200bLegacy JIT\u3002ORC\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e00\u79cd\u200b\u66f4\u200b\u7075\u6d3b\u200b\u548c\u200b\u6a21\u5757\u5316\u200b\u7684\u200b\u65b9\u5f0f\u200b\u6765\u200b\u8fdb\u884c\u200b\u5373\u65f6\u200b\u7f16\u8bd1\u200b\u3002</p> <p>\u200b\u4e0e\u200b\u4e4b\u524d\u200b\u7684\u200bJIT\u200b\u5b9e\u73b0\u200b\u76f8\u6bd4\u200b\uff0cORC\u200b\u7684\u200b\u8bbe\u8ba1\u200b\u76ee\u6807\u200b\u4e4b\u4e00\u200b\u662f\u200b\u63d0\u9ad8\u200b\u7f16\u8bd1\u200b\u8fc7\u7a0b\u200b\u7684\u200b\u7075\u6d3b\u6027\u200b\u548c\u200b\u53ef\u6269\u5c55\u6027\u200b\u3002\u200b\u5b83\u200b\u5141\u8bb8\u200b\u5f00\u53d1\u8005\u200b\u66f4\u200b\u7cbe\u7ec6\u200b\u5730\u200b\u63a7\u5236\u200b\u4ee3\u7801\u751f\u6210\u200b\u548c\u200b\u4f18\u5316\u200b\u8fc7\u7a0b\u200b\uff0c\u200b\u5e76\u200b\u652f\u6301\u200b\u66f4\u200b\u590d\u6742\u200b\u7684\u200b\u7528\u4f8b\u200b\u3002</p> <p>\u200b\u5728\u200b\u4f7f\u7528\u200bORC JIT API\u200b\u65f6\u200b\uff0c\u200b\u5f00\u53d1\u8005\u200b\u53ef\u4ee5\u200b\u52a8\u6001\u200b\u5730\u200b\u751f\u6210\u200b\u673a\u5668\u200b\u4ee3\u7801\u200b\uff0c\u200b\u8fd9\u200b\u5bf9\u4e8e\u200b\u9700\u8981\u200b\u9ad8\u6027\u80fd\u200b\u548c\u200b\u7075\u6d3b\u6027\u200b\u7684\u200b\u5e94\u7528\u200b\u6765\u8bf4\u200b\u975e\u5e38\u200b\u6709\u7528\u200b\u3002\u200b\u6bd4\u5982\u200b\u5728\u200b\u4e00\u4e2a\u200b\u5c0f\u578b\u200b\u8ba1\u7b97\u5668\u200b\u9879\u76ee\u200b\u4e2d\u200b\uff0cORC\u200b\u53ef\u4ee5\u200b\u7528\u6765\u200b\u5728\u200b\u8fd0\u884c\u200b\u65f6\u200b\u5373\u65f6\u200b\u7f16\u8bd1\u200b\u548c\u200b\u6267\u884c\u200b\u7528\u6237\u200b\u8f93\u5165\u200b\u7684\u200b\u8ba1\u7b97\u200b\u8868\u8fbe\u5f0f\u200b\u3002\u200b\u901a\u8fc7\u200bORC API\uff0c\u200b\u5f00\u53d1\u8005\u200b\u53ef\u4ee5\u200b\u7f16\u5199\u7a0b\u5e8f\u200b\uff0c\u200b\u5728\u200b\u9700\u8981\u200b\u65f6\u200b\u52a8\u6001\u200b\u751f\u6210\u200b\u548c\u200b\u6267\u884c\u200b\u9ad8\u6548\u200b\u7684\u200b\u673a\u5668\u200b\u4ee3\u7801\u200b\u3002</p>"},{"location":"blog/llvm%E5%85%A5%E9%97%A8-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%AE%A1%E7%AE%97%E5%99%A8/#llvm\u4e2d\u7684jit","title":"LLVM\u200b\u4e2d\u200b\u7684\u200bJIT","text":"<p>LLVM\u200b\u7684\u200bJIT\uff08\u200b\u5373\u65f6\u200b\u7f16\u8bd1\u200b\uff09\u200b\u529f\u80fd\u200b\u662f\u200b\u4e00\u79cd\u200b\u5f3a\u5927\u200b\u7684\u200b\u673a\u5236\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5728\u200b\u7a0b\u5e8f\u8fd0\u884c\u200b\u65f6\u200b\u52a8\u6001\u200b\u751f\u6210\u200b\u548c\u200b\u4f18\u5316\u200b\u673a\u5668\u200b\u4ee3\u7801\u200b\u3002\u200b\u8fd9\u200b\u5bf9\u4e8e\u200b\u9700\u8981\u200b\u9ad8\u6027\u80fd\u200b\u548c\u200b\u7075\u6d3b\u6027\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u975e\u5e38\u200b\u6709\u7528\u200b\uff0c\u200b\u6bd4\u5982\u200b\u89e3\u91ca\u5668\u200b\u3001\u200b\u52a8\u6001\u200b\u8bed\u8a00\u200b\u8fd0\u884c\u200b\u65f6\u200b\u6216\u200b\u7279\u5b9a\u200b\u573a\u666f\u200b\u7684\u200b\u4f18\u5316\u200b\u4ee3\u7801\u200b\u3002\u200b\u4ee5\u4e0b\u200b\u662f\u200bLLVM JIT\u200b\u7684\u200b\u4e00\u4e9b\u200b\u5173\u952e\u70b9\u200b\u548c\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b\u5b83\u200b\u7684\u200b\u57fa\u672c\u200b\u6b65\u9aa4\u200b\uff1a</p> <ul> <li> <p>LLVM IR\uff1aLLVM\u200b\u7684\u200b\u4e2d\u95f4\u200b\u8868\u793a\u200b\uff0cJIT\u200b\u7f16\u8bd1\u5668\u200b\u4f1a\u200b\u5c06\u200b\u8fd9\u79cd\u200b\u4e2d\u95f4\u200b\u8868\u793a\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u673a\u5668\u200b\u4ee3\u7801\u200b\u3002LLVM IR\u200b\u662f\u200b\u5e73\u53f0\u200b\u65e0\u5173\u200b\u7684\u200b\uff0c\u200b\u5e76\u4e14\u200b\u6613\u4e8e\u200b\u5206\u6790\u200b\u548c\u200b\u4f18\u5316\u200b\u3002</p> </li> <li> <p>ExecutionEngine\uff1a\u200b\u8fd9\u662f\u200bLLVM\u200b\u63d0\u4f9b\u200b\u7684\u200b\u7528\u4e8e\u200b\u6267\u884c\u200bJIT\u200b\u7f16\u8bd1\u200b\u4ee3\u7801\u200b\u7684\u200b\u6838\u5fc3\u200b\u7ec4\u4ef6\u200b\u3002ExecutionEngine\u200b\u8d1f\u8d23\u200b\u5c06\u200bLLVM IR\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u672c\u5730\u200b\u673a\u5668\u200b\u4ee3\u7801\u200b\uff0c\u200b\u5e76\u200b\u5728\u200b\u76ee\u6807\u200b\u5e73\u53f0\u200b\u4e0a\u200b\u6267\u884c\u200b\u3002</p> </li> <li> <p>MCJIT\u200b\u548c\u200bORC\uff1aLLVM\u200b\u4e2d\u6709\u200b\u4e24\u79cd\u200b\u4e3b\u8981\u200b\u7684\u200bJIT\u200b\u5f15\u64ce\u200b\uff1a</p> </li> <li>MCJIT\uff1a\u200b\u4e00\u79cd\u200b\u8f83\u200b\u65e7\u200b\u7684\u200bJIT\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u57fa\u672c\u200b\u7684\u200bJIT\u200b\u7f16\u8bd1\u200b\u529f\u80fd\u200b\u3002</li> <li>ORC\uff08On Request Compilation\uff09\uff1a\u200b\u4e00\u79cd\u200b\u66f4\u200b\u73b0\u4ee3\u200b\u548c\u200b\u6a21\u5757\u5316\u200b\u7684\u200bJIT\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u66f4\u200b\u7075\u6d3b\u200b\u548c\u200b\u5f3a\u5927\u200b\u7684\u200b\u529f\u80fd\u200b\uff0c\u200b\u6bd4\u5982\u200b\u66f4\u597d\u200b\u7684\u200b\u4ee3\u7801\u200b\u5206\u79bb\u200b\u548c\u200b\u5185\u5b58\u200b\u7ba1\u7406\u200b\u3002</li> </ul>"},{"location":"blog/llvm%E5%85%A5%E9%97%A8-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%AE%A1%E7%AE%97%E5%99%A8/#\u4f7f\u7528llvm-jit\u7684\u57fa\u672c\u6b65\u9aa4","title":"\u4f7f\u7528\u200bLLVM JIT\u200b\u7684\u200b\u57fa\u672c\u200b\u6b65\u9aa4","text":"<ol> <li> <p>\u200b\u521b\u5efa\u200bLLVM\u200b\u6a21\u5757\u200b\u548c\u200bIR\uff1a\u200b\u9996\u5148\u200b\uff0c\u200b\u9700\u8981\u200b\u6784\u5efa\u200b\u4e00\u4e2a\u200bLLVM\u200b\u6a21\u5757\u200b\uff0c\u200b\u5e76\u200b\u4f7f\u7528\u200bIR Builder\u200b\u751f\u6210\u200bLLVM IR\u3002\u200b\u8fd9\u200b\u4e00\u6b65\u200b\u901a\u5e38\u200b\u6d89\u53ca\u200b\u5b9a\u4e49\u200b\u51fd\u6570\u200b\u3001\u200b\u57fa\u672c\u5757\u200b\u548c\u200b\u6307\u4ee4\u200b\u3002</p> </li> <li> <p>\u200b\u521d\u59cb\u5316\u200bJIT\u200b\u5f15\u64ce\u200b\uff1a\u200b\u9009\u62e9\u200b\u5e76\u200b\u521d\u59cb\u5316\u200b\u4e00\u4e2a\u200bJIT\u200b\u5f15\u64ce\u200b\uff08MCJIT\u200b\u6216\u200bORC\uff09\u3002\u200b\u8fd9\u200b\u5305\u62ec\u200b\u521b\u5efa\u200bExecutionEngine\u200b\u548c\u200b\u914d\u7f6e\u200b\u76ee\u6807\u200b\u673a\u5668\u200b\u3002</p> </li> <li> <p>\u200b\u6dfb\u52a0\u200b\u6a21\u5757\u200b\u5230\u200b\u5f15\u64ce\u200b\uff1a\u200b\u5c06\u200bLLVM\u200b\u6a21\u5757\u200b\u6dfb\u52a0\u200b\u5230\u200bJIT\u200b\u5f15\u64ce\u200b\u4e2d\u200b\u3002\u200b\u5f15\u64ce\u200b\u4f1a\u200b\u8d1f\u8d23\u200b\u5c06\u200b\u6a21\u5757\u200b\u4e2d\u200b\u7684\u200bIR\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u673a\u5668\u200b\u4ee3\u7801\u200b\u3002</p> </li> <li> <p>\u200b\u67e5\u627e\u200b\u548c\u200b\u6267\u884c\u200b\u51fd\u6570\u200b\uff1a\u200b\u901a\u8fc7\u200b\u5f15\u64ce\u200b\u67e5\u627e\u200b\u5df2\u200b\u7f16\u8bd1\u200b\u7684\u200b\u51fd\u6570\u200b\u7684\u200b\u5165\u53e3\u200b\u70b9\u200b\uff0c\u200b\u7136\u540e\u200b\u901a\u8fc7\u200b\u51fd\u6570\u6307\u9488\u200b\u8c03\u7528\u200b\u5b83\u4eec\u200b\u3002</p> </li> </ol>"},{"location":"blog/llvm%E5%85%A5%E9%97%A8-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%AE%A1%E7%AE%97%E5%99%A8/#\u5b9e\u73b0\u4e00\u4e2a\u8ba1\u7b97\u5668","title":"\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u8ba1\u7b97\u5668","text":""},{"location":"blog/llvm%E5%85%A5%E9%97%A8-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%AE%A1%E7%AE%97%E5%99%A8/#\u4ee3\u7801\u5b9e\u73b0","title":"\u4ee3\u7801\u200b\u5b9e\u73b0","text":"<p>\u200b\u5b9a\u4e49\u200b\u4e86\u200badd, sub, mul, xor\u200b\u56db\u4e2a\u200b\u6307\u4ee4\u200b\uff0c\u200b\u4ece\u200btxt\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u8bfb\u53d6\u200b\uff0c\u200b\u6bcf\u200b\u4e00\u884c\u200b\u90fd\u200b\u662f\u200b\u4e00\u4e2a\u200b\u8bed\u53e5\u200b\u3002</p> <p></p>Text Only<pre><code>add val1, val2  \nsub val1, val2  \nmul val1, val2  \nxor val1, val2  \n</code></pre> \u200b\u5b9a\u4e49\u200b\u4e00\u4e2a\u200b\u7ed3\u6784\u200b\u4f53\u6765\u200b\u4fdd\u5b58\u200b\u6307\u4ee4\u200b\u4fe1\u606f\u200b\uff0c<p></p> C++<pre><code>struct Instruction {\n    std::string name; // add\uff0csub\uff0cmul\uff0cxor\n    int64_t val1;\n    int64_t val2;\n\n    Instruction(const std::string &amp;name, int64_t val1, int64_t val2) \n        : name(name), val1(val1), val2(val2) {}\n};\n</code></pre> <p>\u200b\u4ece\u6587\u4ef6\u200b\u8bfb\u53d6\u200b\u6240\u6709\u200b\u7684\u200b\u6307\u4ee4\u200b\uff0c\u200b\u4fdd\u5b58\u200b\u5230\u200bvector\u200b\u4e2d\u200b\u3002 </p>C++<pre><code>std::vector&lt;std::unique_ptr&lt;Instruction&gt;&gt; GetInstructions(const std::string &amp;file_name) {\n    std::ifstream ifile(file_name);\n    std::string instruction_line;\n    std::vector&lt;std::unique_ptr&lt;Instruction&gt;&gt; instructions;\n\n    if (!ifile.is_open()) {\n        fatal_error(\"Failed to open file: \" + file_name);\n    }\n\n    while (std::getline(ifile, instruction_line)) {\n        std::istringstream stream(instruction_line);\n        std::string instruction_type;\n        int64_t val1, val2;\n        char comma;\n\n        if (stream &gt;&gt; instruction_type &gt;&gt; val1 &gt;&gt; comma &gt;&gt; val2) {\n            instructions.push_back(std::make_unique&lt;Instruction&gt;(instruction_type, val1, val2));\n        } else {\n            fatal_error(\"Invalid instruction format: \" + instruction_line);\n        }\n    }\n    return instructions;\n}\n</code></pre><p></p> <p>\u200b\u73b0\u5728\u200b\u6211\u4eec\u200b\u5df2\u7ecf\u200b\u8986\u76d6\u200b\u4e86\u200b\u57fa\u7840\u77e5\u8bc6\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5f00\u59cb\u200b\u5904\u7406\u200b\u7279\u5b9a\u200b\u4e8e\u200bLLVM\u200b\u7684\u200b\u4efb\u52a1\u200b\u3002\u200b\u5728\u200bJIT\uff08\u200b\u5373\u65f6\u200b\u7f16\u8bd1\u200b\uff09\u200b\u6211\u4eec\u200b\u7684\u200b\u4ee3\u7801\u200b\u4e4b\u524d\u200b\uff0c\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u4e3a\u200b\u6240\u6709\u200b\u5e0c\u671b\u200bJIT\u200b\u7f16\u8bd1\u200b\u7684\u200b\u51fd\u6570\u200b\u751f\u6210\u200b\u76f8\u5e94\u200b\u7684\u200bLLVM IR\uff08\u200b\u4e2d\u95f4\u200b\u8868\u793a\u200b\uff09\u3002\u200b\u8981\u200b\u751f\u6210\u200bLLVM IR\uff0c\u200b\u9996\u5148\u200b\u9700\u8981\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200bLLVM\u200b\u4e0a\u4e0b\u6587\u200b\u3001\u200b\u4e00\u4e2a\u200bLLVM\u200b\u6a21\u5757\u200b\u548c\u200b\u4e00\u4e2a\u200bIR\u200b\u751f\u6210\u5668\u200b\u3002</p> <ul> <li> <p>\u200b\u4e0a\u4e0b\u6587\u200b\uff08Context\uff09\uff1a\u200b\u4e0a\u4e0b\u6587\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5bb9\u5668\u200b\uff0c\u200b\u7528\u4e8e\u200b\u62e5\u6709\u200b\u548c\u200b\u7ba1\u7406\u200bLLVM\u200b\u7279\u5b9a\u200b\u7684\u200b\u6838\u5fc3\u200b\u6570\u636e\u7ed3\u6784\u200b\u3002</p> </li> <li> <p>\u200b\u6a21\u5757\u200b\uff08Module\uff09\uff1aLLVM\u200b\u6a21\u5757\u200b\u662f\u200b\u4e00\u4e2a\u200b\u9876\u7ea7\u200b\u5bb9\u5668\u200b\uff0c\u200b\u8868\u793a\u200b\u4e00\u4e2a\u200b\u7f16\u8bd1\u200b\u5355\u5143\u200b\uff0c\u200b\u5305\u542b\u200b\u51fd\u6570\u200b\u3001\u200b\u5168\u5c40\u53d8\u91cf\u200b\u4ee5\u53ca\u200b\u5176\u4ed6\u200b\u7a0b\u5e8f\u200b\u5143\u7d20\u200b\uff0c\u200b\u6bd4\u5982\u200b\u8be5\u200b\u6a21\u5757\u200b\u4f9d\u8d56\u200b\u7684\u200b\u5e93\u200b\uff08\u200b\u6216\u200b\u5176\u4ed6\u200b\u6a21\u5757\u200b\uff09\u200b\u5217\u8868\u200b\u3001\u200b\u7b26\u53f7\u8868\u200b\u7b49\u200b\u3002</p> </li> <li> <p>\u200b\u57fa\u672c\u5757\u200b\uff08Basic Block\uff09\uff1a\u200b\u57fa\u672c\u5757\u200b\u662f\u200b\u4e00\u7ec4\u200b\u7ebf\u6027\u200b\u987a\u5e8f\u200b\u7684\u200b\u6307\u4ee4\u200b\u5e8f\u5217\u200b\uff0c\u200b\u6ca1\u6709\u200b\u5206\u652f\u200b\uff0c\u200b\u610f\u5473\u7740\u200b\u6267\u884c\u200b\u4ece\u200b\u4e00\u4e2a\u200b\u5355\u4e00\u200b\u5165\u53e3\u200b\u70b9\u200b\u5f00\u59cb\u200b\uff0c\u200b\u6309\u200b\u987a\u5e8f\u200b\u8fdb\u884c\u200b\u5230\u200b\u4e00\u4e2a\u200b\u5355\u4e00\u200b\u51fa\u53e3\u200b\u70b9\u200b\uff0c\u200b\u968f\u540e\u200b\u7ee7\u7eed\u200b\u5230\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u57fa\u672c\u5757\u200b\u3002\u200b\u57fa\u672c\u5757\u200b\u5c5e\u4e8e\u200b\u51fd\u6570\u200b\uff0c\u200b\u4e0d\u80fd\u200b\u5728\u200b\u4e2d\u95f4\u200b\u6709\u200b\u8df3\u8f6c\u200b\uff0c\u200b\u786e\u4fdd\u200b\u4e00\u65e6\u200b\u5f00\u59cb\u200b\u6267\u884c\u200b\uff0c\u200b\u5c31\u200b\u4f1a\u200b\u6309\u200b\u987a\u5e8f\u200b\u6267\u884c\u200b\u5b8c\u8be5\u200b\u5757\u200b\u5185\u200b\u7684\u200b\u6240\u6709\u200b\u6307\u4ee4\u200b\u3002\u200b\u57fa\u672c\u5757\u200b\u7684\u200b\u7b2c\u4e00\u6761\u200b\u6307\u4ee4\u200b\u88ab\u200b\u79f0\u4e3a\u200b\u9886\u5bfc\u8005\u200b\uff08leader\uff09\u3002</p> </li> </ul> <p>\u200b\u6211\u4eec\u200b\u7684\u200b\u76ee\u6807\u200b\u662f\u200b\u4e3a\u200b\u6bcf\u6761\u200b\u6307\u4ee4\u200b\u751f\u6210\u200b\u4e00\u4e2a\u200bLLVM IR\u200b\u5f62\u5f0f\u200b\u7684\u200b\u5355\u72ec\u200b\u51fd\u6570\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u4e0e\u200badd\u200b\u6307\u4ee4\u200b\u5bf9\u5e94\u200b\u7684\u200b\u51fd\u6570\u200b\u5c06\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\uff1a</p> C++<pre><code>define i64 @add(i64 %0, i64 %1) {\nentry:\n  %2 = add i64 %0, %1\n  ret i64 %2\n}\n</code></pre> <p>\u200b\u5199\u200b\u4e00\u4e2a\u200b\u51fd\u6570\u200b\u6765\u200b\u4e3a\u200badd, sun, mul, xor\u200b\u751f\u6210\u200bLLVM IR\uff0c </p>C++<pre><code>void AddFunctionsToIR(llvm::LLVMContext &amp;ctx, llvm::Module *module, const std::string &amp;function_name) {\n    auto int64_type = llvm::Type::getInt64Ty(ctx);\n    std::vector&lt;llvm::Type *&gt; params(2, int64_type);\n    llvm::IRBuilder&lt;&gt; ir_builder(ctx);\n\n    llvm::FunctionType *function_type = llvm::FunctionType::get(int64_type, params, false);\n    llvm::Function *func = llvm::Function::Create(function_type, llvm::Function::ExternalLinkage, function_name, module);\n\n    // Create the entry block for the function\n    llvm::BasicBlock *basic_block = llvm::BasicBlock::Create(ctx, \"entry\", func);\n\n    // Append instructions to the basic block\n    ir_builder.SetInsertPoint(basic_block);\n\n    auto args = func-&gt;args();\n    auto arg_iter = args.begin();\n    llvm::Argument *arg1 = arg_iter++;\n    llvm::Argument *arg2 = arg_iter;\n\n    llvm::Value *result = nullptr;\n\n    if (function_name == \"add\") {\n        result = ir_builder.CreateAdd(arg1, arg2);\n    } else if (function_name == \"sub\") {\n        result = ir_builder.CreateSub(arg1, arg2);\n    } else if (function_name == \"mul\") {\n        result = ir_builder.CreateMul(arg1, arg2);\n    } else if (function_name == \"xor\") {\n        result = ir_builder.CreateXor(arg1, arg2);\n    } else {\n        fatal_error(\"Invalid function name: \" + function_name);\n    }\n\n    // return the value\n    ir_builder.CreateRet(result);\n}\n</code></pre> \u200b\u8fd9\u200b\u6bb5\u200b\u4ee3\u7801\u200b\u4e3a\u200b\u6211\u4eec\u200b\u7684\u200b\u6bcf\u6761\u200b\u6307\u4ee4\u200b\u751f\u6210\u200b\u51fd\u6570\u200b\u3002\u200b\u6bcf\u4e2a\u200b\u51fd\u6570\u200b\u63a5\u53d7\u200b\u4e24\u4e2a\u200b\u53c2\u6570\u200b\uff0c\u200b\u5e76\u200b\u6839\u636e\u200b\u64cd\u4f5c\u200b\u8fd4\u56de\u200b\u4e00\u4e2a\u200b\u503c\u200b\u3002\u200b\u73b0\u5728\u200b\u6211\u4eec\u200b\u5df2\u7ecf\u200b\u521b\u5efa\u200b\u4e86\u200b\u8fd9\u4e2a\u200b\u51fd\u6570\u200b\uff0c\u200b\u8ba9\u200b\u6211\u4eec\u200b\u7ee7\u7eed\u200b\u7f16\u5199\u200b\u4e3b\u200b\u51fd\u6570\u200b\u7684\u200b\u4ee3\u7801\u200b\u3002<p></p> <p>\u200b\u8c03\u7528\u200b\u4e24\u4e2a\u200b\u5173\u952e\u200b\u7684\u200b\u51fd\u6570\u200b\u8fdb\u884c\u200b\u521d\u59cb\u5316\u200b\uff1a </p>C++<pre><code>/*\nInitialize the native target corresponding to the host\n*/\nllvm::InitializeNativeTarget();\n\n\n/* Calling this function is also necessary for code generation.\n It sets up the assembly printer for the native host architecture.\n*/\nllvm::InitializeNativeTargetAsmPrinter();\n</code></pre><p></p> <p>\u200b\u521b\u5efa\u200bctx\u200b\u548c\u200bmodule\u3002 </p>C++<pre><code>llvm::LLVMContext ctx;\nauto module = std::make_unique&lt;llvm::Module&gt;(\"my_module\", ctx);\n</code></pre><p></p> <p>\u200b\u8c03\u7528\u200b\u4e0a\u9762\u200b\u7684\u200bAddFunctionsToIR\u200b\u51fd\u6570\u200b\uff0c\u200b\u4e3a\u200badd, sub, mul, xor\u200b\u751f\u6210\u200bLLVM IR\u3002</p> C++<pre><code>AddFunctionsToIR(ctx, module.get(), \"add\");\nAddFunctionsToIR(ctx, module.get(), \"sub\");\nAddFunctionsToIR(ctx, module.get(), \"mul\");\nAddFunctionsToIR(ctx, module.get(), \"xor\");\n</code></pre> <p>\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b LLJIT \u200b\u751f\u6210\u5668\u200b\u7684\u200b\u5b9e\u4f8b\u200b\u3002LLJIT \u200b\u662f\u200b LLVM \u200b\u7684\u200b ORC\uff08\u200b\u6309\u200b\u9700\u200b\u7f16\u8bd1\u200b\uff09JIT \u200b\u5f15\u64ce\u200b\u7684\u200b\u4e00\u90e8\u5206\u200b\uff0c\u200b\u5b83\u200b\u4e3a\u200b\u5373\u65f6\u200b\u7f16\u8bd1\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u73b0\u4ee3\u200b\u3001\u200b\u7075\u6d3b\u200b\u548c\u200b\u6a21\u5757\u5316\u200b\u7684\u200b\u57fa\u7840\u8bbe\u65bd\u200b\uff0c\u200b\u662f\u200b MCJIT \u200b\u7684\u200b\u5408\u9002\u200b\u66ff\u4ee3\u54c1\u200b\u3002</p> C++<pre><code>auto jit_builder = llvm::orc::LLJITBuilder();\nauto jit = jit_builder.create();\n</code></pre> <p>\u200b\u63a5\u4e0b\u6765\u200b\uff0c\u200b\u5c31\u662f\u200b\u5c06\u200b\u6211\u4eec\u200b\u7684\u200b\u6a21\u5757\u200b\u6dfb\u52a0\u200b\u5230\u200b\u4e3b\u200bJITDylib\uff08\u200b\u4e00\u4e2a\u200bJITDylib\u200b\u4ee3\u8868\u200b\u4e86\u200b\u4e00\u4e2a\u200bJIT\u200b\u7684\u200b\u52a8\u6001\u200b\u5e93\u200b\uff09\u3002</p> C++<pre><code>if (auto err = jit-&gt;get()-&gt;addIRModule(llvm::orc::ThreadSafeModule(std::move(module), std::make_unique&lt;llvm::LLVMContext&gt;()))) {\n    fatal_error(\"Failed to add IR module for JIT compilation: \" + llvm::toString(std::move(err)));\n}\n</code></pre> <p></p>C++<pre><code>llvm::orc::ExecutorAddr GetExecutorAddr(llvm::orc::LLJIT &amp;jit, const std::string &amp;function_name) {\n    auto sym = jit.lookup(function_name).get();\n    if (!sym) {\n        fatal_error(\"Function not found in JIT: \" + function_name);\n    }\n    return sym;\n}\n</code></pre> \u200b\u89e3\u6790\u200bcode.txt\u200b\u6587\u4ef6\u200b\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200b\u6bcf\u200b\u4e00\u884c\u200b\u90fd\u200b\u662f\u200b\u4e00\u6761\u200b\u6307\u4ee4\u200b\u3002\u200b\u6839\u636e\u200b\u6307\u4ee4\u200b\u7684\u200b\u540d\u79f0\u200b\uff0c\u200b\u6bd4\u5982\u200badd\u200b\u53bb\u200b\u83b7\u53d6\u200bllvm::orc::ExecutorAddr\u3002\u200b\u901a\u8fc7\u200b\u5f3a\u5236\u200b\u8f6c\u6362\u200b\u62ff\u5230\u200bfn\uff0c\u200b\u6267\u884c\u200b\u3002 C++<pre><code>// main\nauto instructions = GetInstructions(\"code.txt\");\nstd::unordered_map&lt;std::string, llvm::orc::ExecutorAddr&gt; fn_symbols;\n\nfor (const auto &amp;instruction : instructions) {\n    if (fn_symbols.find(instruction-&gt;name) == fn_symbols.end()) {\n        fn_symbols[instruction-&gt;name] = GetExecutorAddr(*jit-&gt;get(), instruction-&gt;name);\n    }\n\n    auto *fn = reinterpret_cast&lt;int64_t (*)(int64_t, int64_t)&gt;(fn_symbols[instruction-&gt;name].getValue());\n    int64_t value = fn(instruction-&gt;val1, instruction-&gt;val2);\n    std::cout &lt;&lt; value &lt;&lt; std::endl;\n}\n</code></pre><p></p> <p>\u200b\u4e3a\u4e86\u200b\u907f\u514d\u200b\u591a\u6b21\u200b\u83b7\u53d6\u200b\u51fd\u6570\u200b\u5730\u5740\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u51fd\u6570\u200b\u5730\u5740\u200b\u5b58\u50a8\u200b\u5728\u200b\u4e00\u4e2a\u200b\u54c8\u5e0c\u200b\u8868\u4e2d\u200b\u3002\u200b\u8fd9\u6837\u200b\uff0c\u200b\u6bcf\u6b21\u200b\u9700\u8981\u200b\u6267\u884c\u200b\u6307\u4ee4\u200b\u65f6\u200b\uff0c\u200b\u6211\u4eec\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u76f4\u63a5\u200b\u4ece\u200b\u54c8\u5e0c\u200b\u8868\u4e2d\u200b\u83b7\u53d6\u200b\u51fd\u6570\u200b\u5730\u5740\u200b\uff0c\u200b\u800c\u200b\u4e0d\u200b\u9700\u8981\u200b\u6bcf\u6b21\u200b\u90fd\u200b\u901a\u8fc7\u200b JIT \u200b\u67e5\u627e\u200b\u3002</p> C++<pre><code>std::unordered_map&lt;std::string, llvm::orc::ExecutorAddr&gt; fn_symbols;\n</code></pre> <p>\u200b\u5b8c\u6574\u200b\u7684\u200b\u4ee3\u7801\u200b\u5982\u4e0b\u200b\uff1a</p> C++<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;fstream&gt;\n#include &lt;sstream&gt;\n#include &lt;unordered_map&gt;\n#include &lt;vector&gt;\n#include &lt;memory&gt;\n\n#include &lt;llvm/IR/LLVMContext.h&gt;\n#include &lt;llvm/IR/Function.h&gt;\n#include &lt;llvm/IR/Module.h&gt;\n#include &lt;llvm/IR/IRBuilder.h&gt;\n#include &lt;llvm/Support/TargetSelect.h&gt;\n#include &lt;llvm/ExecutionEngine/Orc/LLJIT.h&gt;\n#include &lt;llvm/Support/Error.h&gt;\n#include &lt;llvm/Support/raw_ostream.h&gt;\n\nstruct Instruction {\n    std::string name;\n    int64_t val1;\n    int64_t val2;\n\n    Instruction(const std::string &amp;name, int64_t val1, int64_t val2) \n        : name(name), val1(val1), val2(val2) {}\n};\n\nvoid fatal_error(const std::string &amp;message) {\n    std::cerr &lt;&lt; message &lt;&lt; std::endl;\n    std::exit(1);\n}\n\nstd::vector&lt;std::unique_ptr&lt;Instruction&gt;&gt; GetInstructions(const std::string &amp;file_name) {\n    std::ifstream ifile(file_name);\n    std::string instruction_line;\n    std::vector&lt;std::unique_ptr&lt;Instruction&gt;&gt; instructions;\n\n    if (!ifile.is_open()) {\n        fatal_error(\"Failed to open file: \" + file_name);\n    }\n\n    while (std::getline(ifile, instruction_line)) {\n        std::istringstream stream(instruction_line);\n        std::string instruction_type;\n        int64_t val1, val2;\n        char comma;\n\n        if (stream &gt;&gt; instruction_type &gt;&gt; val1 &gt;&gt; comma &gt;&gt; val2) {\n            instructions.push_back(std::make_unique&lt;Instruction&gt;(instruction_type, val1, val2));\n        } else {\n            fatal_error(\"Invalid instruction format: \" + instruction_line);\n        }\n    }\n    return instructions;\n}\n\nvoid AddFunctionsToIR(llvm::LLVMContext &amp;ctx, llvm::Module *module, const std::string &amp;function_name) {\n    auto int64_type = llvm::Type::getInt64Ty(ctx);\n    std::vector&lt;llvm::Type *&gt; params(2, int64_type);\n    llvm::IRBuilder&lt;&gt; ir_builder(ctx);\n\n    llvm::FunctionType *function_type = llvm::FunctionType::get(int64_type, params, false);\n    llvm::Function *func = llvm::Function::Create(function_type, llvm::Function::ExternalLinkage, function_name, module);\n\n    llvm::BasicBlock *basic_block = llvm::BasicBlock::Create(ctx, \"entry\", func);\n\n    // Append instructions to the basic block\n    ir_builder.SetInsertPoint(basic_block);\n\n    auto args = func-&gt;args();\n    auto arg_iter = args.begin();\n    llvm::Argument *arg1 = arg_iter++;\n    llvm::Argument *arg2 = arg_iter;\n\n    llvm::Value *result = nullptr;\n\n    if (function_name == \"add\") {\n        result = ir_builder.CreateAdd(arg1, arg2);\n    } else if (function_name == \"sub\") {\n        result = ir_builder.CreateSub(arg1, arg2);\n    } else if (function_name == \"mul\") {\n        result = ir_builder.CreateMul(arg1, arg2);\n    } else if (function_name == \"xor\") {\n        result = ir_builder.CreateXor(arg1, arg2);\n    } else {\n        fatal_error(\"Invalid function name: \" + function_name);\n    }\n\n    ir_builder.CreateRet(result);\n }\n\nllvm::orc::ExecutorAddr GetExecutorAddr(llvm::orc::LLJIT &amp;jit, const std::string &amp;function_name) {\n    auto sym = jit.lookup(function_name).get();\n    if (!sym) {\n        fatal_error(\"Function not found in JIT: \" + function_name);\n    }\n    return sym;\n}\n\nint main() {\n    llvm::LLVMContext ctx;\n    llvm::InitializeNativeTarget();\n    llvm::InitializeNativeTargetAsmPrinter();\n\n    auto module = std::make_unique&lt;llvm::Module&gt;(\"neko_module\", ctx);\n\n    AddFunctionsToIR(ctx, module.get(), \"add\");\n    AddFunctionsToIR(ctx, module.get(), \"sub\");\n    AddFunctionsToIR(ctx, module.get(), \"mul\");\n    AddFunctionsToIR(ctx, module.get(), \"xor\");\n\n    auto jit_builder = llvm::orc::LLJITBuilder();\n    auto jit = jit_builder.create();\n    if (!jit) {\n        fatal_error(\"Failed to create JIT: \" + llvm::toString(jit.takeError()));\n    }\n\n    if (auto err = jit-&gt;get()-&gt;addIRModule(llvm::orc::ThreadSafeModule(std::move(module), std::make_unique&lt;llvm::LLVMContext&gt;()))) {\n        fatal_error(\"Failed to add IR module for JIT compilation: \" + llvm::toString(std::move(err)));\n    }\n\n    auto instructions = GetInstructions(\"code.txt\");\n    std::unordered_map&lt;std::string, llvm::orc::ExecutorAddr&gt; fn_symbols;\n\n    for (const auto &amp;instruction : instructions) {\n        if (fn_symbols.find(instruction-&gt;name) == fn_symbols.end()) {\n            fn_symbols[instruction-&gt;name] = GetExecutorAddr(*jit-&gt;get(), instruction-&gt;name);\n        }\n\n        auto *fn = reinterpret_cast&lt;int64_t (*)(int64_t, int64_t)&gt;(fn_symbols[instruction-&gt;name].getValue());\n        int64_t value = fn(instruction-&gt;val1, instruction-&gt;val2);\n        std::cout &lt;&lt; value &lt;&lt; std::endl;\n    }\n\n    return 0;\n}\n</code></pre> <p>\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200bcmake\u200b\u6765\u200b\u7f16\u8bd1\u7a0b\u5e8f\u200b, CMakeLists.txt\u200b\u5185\u5bb9\u200b\u5982\u4e0b\u200b\uff1a </p>C++<pre><code>cmake_minimum_required(VERSION 3.13)\nproject(main)\n\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\nfind_package(LLVM 16 REQUIRED CONFIG)\n\nadd_definitions(${LLVM_DEFINITIONS})\ninclude_directories(${LLVM_INCLUDE_DIRS})\n\nadd_executable(${PROJECT_NAME} main.cpp)\n\nllvm_map_components_to_libnames(\n    llvm_libs\n    core\n    orcjit\n    native\n)\n\ntarget_link_libraries(${PROJECT_NAME} ${llvm_libs})\n</code></pre><p></p> Bash<pre><code>cmake -B build -S .\n\ncmake --build build\n</code></pre> <p>\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200bcode.txt\u200b\u6587\u4ef6\u200b\u7528\u6765\u200b\u6d4b\u8bd5\u200b\uff1a </p>C++<pre><code>add 1,2\nsub 10,5\nmul 10,20\nxor 5,5\nadd 5,10\nxor 10,5\n</code></pre> \u200b\u8fd0\u884c\u200b\u7ed3\u679c\u200b\uff1a Bash<pre><code>3\n5\n200\n0\n15\n15\n</code></pre><p></p> <p>\u200b\u90a3\u4e9b\u200b\u7ecf\u8fc7\u200b\u5373\u65f6\u200b\u7f16\u8bd1\u200b\uff08JIT\uff09\u200b\u7684\u200b\u51fd\u6570\u200b\u7684\u200b\u4ee3\u7801\u200b\u3002\u200b\u8fd9\u4e9b\u200b\u4ee3\u7801\u200b\u5b58\u50a8\u200b\u5728\u200b\u4e00\u4e2a\u200b\u533a\u57df\u200b\u4e2d\u200b\uff0c\u200b\u4e00\u65e6\u200b\u5373\u65f6\u200b\u7f16\u8bd1\u5668\u200b\u5c06\u200b\u4ee3\u7801\u200b\u5199\u5165\u200b\u8be5\u200b\u533a\u57df\u200b\uff0c\u200b\u8be5\u200b\u533a\u57df\u200b\u7684\u200b\u6743\u9650\u200b\u968f\u540e\u200b\u4f1a\u200b\u88ab\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b\u53ef\u8bfb\u200b\u53ef\u200b\u6267\u884c\u200b\u3002</p>"},{"location":"blog/llvm%E5%85%A5%E9%97%A8-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%AE%A1%E7%AE%97%E5%99%A8/#\u53c2\u8003_1","title":"\u53c2\u8003","text":"<ul> <li> <p>https://sh4dy.com/2024/11/24/learning_llvm_03/</p> </li> <li> <p>https://llvm.org/docs/ORCv2.html</p> </li> <li> <p>https://liuyehcf.github.io/2023/07/10/LLVM-JIT/</p> </li> </ul> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>netcap\u200b\u8c03\u8bd5\u200b</li> <li>\u200b\u4ece\u200bDeepseek\u200b\u5f00\u6e90\u200b\u5e93\u200b3FS\u200b\u4e2d\u200b\u5b66\u4e60\u200bfuse\u200b\u7684\u200b\u4f7f\u7528\u200b-\u200b\u5982\u4f55\u200b\u5f00\u53d1\u200b\u4e00\u4e2a\u200b\u6587\u4ef6\u7cfb\u7edf\u200b\uff08\u200b\u4e00\u200b\uff09</li> <li>brpc\u200b\u4e2d\u200b\u7684\u200bprofile\u200b\u5b9e\u73b0\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>\u200b\u4f7f\u7528\u200baya\u200b\u548c\u200bc\u200b\u6df7\u5408\u200b\u7f16\u5199\u200buprobe\u200b\u7a0b\u5e8f\u200b</li> </ul>"},{"location":"blog/ltolink-time-optimization%E8%83%BD%E5%A4%9F%E4%BC%98%E5%8C%96%E9%9D%99%E6%80%81%E5%BA%93%E5%90%97%E5%8A%A8%E6%80%81%E5%BA%93%E5%91%A2%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C/","title":"LTO\uff08Link Time Optimization\uff09\u200b\u80fd\u591f\u200b\u4f18\u5316\u200b\u9759\u6001\u200b\u5e93\u200b\u5417\u200b\uff1f\u200b\u52a8\u6001\u200b\u5e93\u200b\u5462\u200b\u6709\u4f55\u200b\u4e0d\u540c","text":"<p>LTO\uff08\u200b\u94fe\u63a5\u200b\u65f6\u200b\u4f18\u5316\u200b\uff09\u200b\u80cc\u540e\u200b\u7684\u200b\u57fa\u672c\u539f\u7406\u200b\u662f\u200b\uff0c\u200b\u5c06\u200b LLVM \u200b\u7684\u200b\u4e00\u4e9b\u200b\u4f18\u5316\u200b\u8fc7\u7a0b\u200b\u63a8\u8fdf\u200b\u5230\u200b\u94fe\u63a5\u200b\u9636\u6bb5\u200b\u3002\u200b\u4e3a\u4ec0\u4e48\u200b\u662f\u200b\u94fe\u63a5\u200b\u9636\u6bb5\u200b\u5462\u200b\uff1f\u200b\u56e0\u4e3a\u200b\u5728\u200b\u7f16\u8bd1\u200b\u6d41\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u94fe\u63a5\u200b\u9636\u6bb5\u200b\u662f\u200b\u6574\u4e2a\u200b\u7a0b\u5e8f\u200b\uff08\u200b\u5373\u200b\u6574\u5957\u200b\u7f16\u8bd1\u200b\u5355\u5143\u200b\uff09\u200b\u80fd\u591f\u200b\u4e00\u6b21\u6027\u200b\u5168\u90e8\u200b\u83b7\u53d6\u200b\u7684\u200b\u65f6\u523b\u200b\uff0c\u200b\u56e0\u6b64\u200b\u8de8\u200b\u7f16\u8bd1\u200b\u5355\u5143\u200b\u8fb9\u754c\u200b\u7684\u200b\u4f18\u5316\u200b\u6210\u4e3a\u200b\u53ef\u80fd\u200b\u3002</p> <p>The basic principle behind LTO is that some of LLVM\u2019s optimization passes are pushed back to the linking stage. </p> <p>Why the linking stage? Because that is the point in the pipeline where the entire program (i.e. the whole set of compilation units) is available at once and thus optimizations across compilation unit boundaries become possible.</p> <p>\u200b\u6211\u4eec\u200b\u77e5\u9053\u200b\uff0c\u200b\u91c7\u7528\u200b\u9759\u6001\u200b\u5e93\u200b\u7684\u200b\u4ee3\u7801\u200b\u4f1a\u200b\u88ab\u200b\u5b8c\u5168\u200b\u6253\u5305\u200b\u5230\u200b\u6700\u7ec8\u200b\u7a0b\u5e8f\u200b\u4e2d\u200b\u3002\u200b\u5982\u679c\u200b\u91c7\u7528\u200b\u9759\u6001\u200b\u5e93\u200b\uff0c\u200b\u7f16\u8bd1\u5668\u200b\u53ef\u4ee5\u200b\u4f18\u5316\u200b\u9759\u6001\u200b\u5e93\u4e2d\u200b\u7684\u200b\u4ee3\u7801\u200b\u5417\u200b\uff1f\u200b\u6bd4\u5982\u200b\u51fd\u6570\u200b\u5185\u8054\u200b\uff0c\u200b\u6b7b\u200b\u4ee3\u7801\u200b\u6d88\u9664\u200b\u7b49\u200b\u3002</p> <p>\u200b\u7b54\u6848\u200b\u662f\u200b\u53ef\u4ee5\u200b\u7684\u200b\uff0c\u200b\u901a\u8fc7\u200b\u6dfb\u52a0\u200b-flto\u200b\u9009\u9879\u200b\uff0c\u200b\u7f16\u8bd1\u200b\u9759\u6001\u200b\u5e93\u200b\uff0c\u200b\u7f16\u8bd1\u200b\u53ef\u6267\u884c\u6587\u4ef6\u200b\u3002\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u67e5\u770b\u200b\u6c47\u7f16\u200b\uff0c\u200b\u53cd\u6c47\u7f16\u200b\uff0c\u200b\u67e5\u770b\u200b\u7248\u672c\u200b\u7b26\u53f7\u200b\uff0c\u200b\u5bf9\u6bd4\u200b\u53ef\u6267\u884c\u6587\u4ef6\u200b\u5927\u5c0f\u200b\u5bf9\u6bd4\u200b\u4f18\u5316\u200b\u7ed3\u679c\u200b\u3002</p>"},{"location":"blog/ltolink-time-optimization%E8%83%BD%E5%A4%9F%E4%BC%98%E5%8C%96%E9%9D%99%E6%80%81%E5%BA%93%E5%90%97%E5%8A%A8%E6%80%81%E5%BA%93%E5%91%A2%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C/#\u9759\u6001\u5e93\u7684\u4f8b\u5b50","title":"\u9759\u6001\u200b\u5e93\u200b\u7684\u200b\u4f8b\u5b50","text":"Text Only<pre><code>project/\n\u251c\u2500\u2500 math_lib/          # \u200b\u9759\u6001\u200b\u5e93\u200b\u76ee\u5f55\u200b\n\u2502   \u251c\u2500\u2500 square.cpp\n\u2502   \u2514\u2500\u2500 square.h\n\u2514\u2500\u2500 main.cpp           # \u200b\u4e3b\u7a0b\u5e8f\u200b\n</code></pre> C++<pre><code>// math_lib/square.h\n#pragma once\nint square(int x);\n\n// math_lib/square.cpp\n#include \"square.h\"\nint square(int x) {\n    // \u200b\u5f85\u200b\u4f18\u5316\u200b\u7684\u200b\u4ee3\u7801\u200b\u793a\u4f8b\u200b\n    return x * x;\n}\n\n// main.cpp\n#include &lt;iostream&gt;\n#include \"math_lib/square.h\"\nint main() {\n    int result = square(5);\n    std::cout &lt;&lt; \"Square: \" &lt;&lt; result &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre> <p>\u200b\u9884\u671f\u200b\u662f\u200b\uff0c\u200b\u5982\u679c\u200bLTO\u200b\u4f18\u5316\u200b\u4e86\u200b\u9759\u6001\u200b\u5e93\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5728\u200b\u53ef\u6267\u884c\u6587\u4ef6\u200b\u4e2d\u200b\uff0csquare()\u200b\u51fd\u6570\u200b\u7684\u200b\u8c03\u7528\u200b\u5c06\u200b\u88ab\u200b\u5185\u8054\u200b\uff0c\u200b\u76f4\u63a5\u200b\u66ff\u6362\u200b\u4e3a\u200b5*5=25\u200b\u7684\u200b\u5e38\u91cf\u200b\u8ba1\u7b97\u7ed3\u679c\u200b\u3002</p>"},{"location":"blog/ltolink-time-optimization%E8%83%BD%E5%A4%9F%E4%BC%98%E5%8C%96%E9%9D%99%E6%80%81%E5%BA%93%E5%90%97%E5%8A%A8%E6%80%81%E5%BA%93%E5%91%A2%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C/#\u67e5\u770blto\u4f18\u5316\u7ed3\u679c","title":"\u67e5\u770b\u200bLTO\u200b\u4f18\u5316\u200b\u7ed3\u679c","text":""},{"location":"blog/ltolink-time-optimization%E8%83%BD%E5%A4%9F%E4%BC%98%E5%8C%96%E9%9D%99%E6%80%81%E5%BA%93%E5%90%97%E5%8A%A8%E6%80%81%E5%BA%93%E5%91%A2%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C/#lto\u4f18\u5316\u7f16\u8bd1\u540c\u65f6\u5bf9\u6bd4\u53ef\u6267\u884c\u6587\u4ef6\u5927\u5c0f","title":"LTO\u200b\u4f18\u5316\u200b\u7f16\u8bd1\u200b\uff0c\u200b\u540c\u65f6\u5bf9\u6bd4\u200b\u53ef\u6267\u884c\u6587\u4ef6\u200b\u5927\u5c0f","text":"Bash<pre><code>#!/bin/bash\n# build.sh\nset -e\n\n# \u200b\u6e05\u7406\u200b\u65e7\u200b\u6587\u4ef6\u200b\nrm -rf math_lib/*.o *.a main_*\n\n# \u200b\u7f16\u8bd1\u200bLTO\u200b\u7248\u672c\u200b\ncd math_lib\ng++ -c -flto -O2 square.cpp -o square.o\nar cr libmath.a square.o\ncd ..\n\ng++ -flto -O2 main.cpp -Imath_lib -Lmath_lib -lmath -o main_lto\n\n# \u200b\u7f16\u8bd1\u200b\u65e0\u200bLTO\u200b\u7248\u672c\u200b\ncd math_lib\ng++ -c -O2 square.cpp -o square_no_lto.o\nar cr libmath_no_lto.a square_no_lto.o\ncd ..\n\ng++ -O2 main.cpp -Imath_lib -Lmath_lib -lmath_no_lto -o main_no_lto\n\necho \"\u200b\u5bf9\u6bd4\u200b\u53ef\u6267\u884c\u6587\u4ef6\u200b\u5927\u5c0f\u200b:\"\nls -lh main_*\n</code></pre> <p>\u200b\u901a\u8fc7\u200b\u6267\u884c\u200bbuild.sh\u200b\u7f16\u8bd1\u200b\uff0c\u200b\u540c\u65f6\u5bf9\u6bd4\u200b\u53ef\u6267\u884c\u6587\u4ef6\u200b\u5927\u5c0f\u200b\uff1a </p>Bash<pre><code>\u200b\u5bf9\u6bd4\u200b\u53ef\u6267\u884c\u6587\u4ef6\u200b\u5927\u5c0f\u200b:\n-rwxr-xr-x 1 ken ken 16K Mar 30 19:37 main_lto\n-rwxr-xr-x 1 ken ken 17K Mar 30 19:37 main_no_lto\n</code></pre><p></p>"},{"location":"blog/ltolink-time-optimization%E8%83%BD%E5%A4%9F%E4%BC%98%E5%8C%96%E9%9D%99%E6%80%81%E5%BA%93%E5%90%97%E5%8A%A8%E6%80%81%E5%BA%93%E5%91%A2%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C/#\u751f\u6210\u6c47\u7f16\u67e5\u770b\u7248\u672c\u7b26\u53f7","title":"\u751f\u6210\u200b\u6c47\u7f16\u200b\uff0c\u200b\u67e5\u770b\u200b\u7248\u672c\u200b\u7b26\u53f7","text":"Bash<pre><code>#!/bin/bash\n\necho \"\u200b\u67e5\u770b\u200bLTO\u200b\u7248\u672c\u200b\u7b26\u53f7\u200b:\"\n# \u200b\u67e5\u770b\u200bLTO\u200b\u7248\u672c\u200b\u7b26\u53f7\u200b\nnm --demangle main_lto | grep square\n# \u200b\u7406\u60f3\u200b\u7ed3\u679c\u200b\uff1a\u200b\u65e0\u200bsquare\u200b\u7b26\u53f7\u200b\uff08\u200b\u51fd\u6570\u200b\u88ab\u200b\u5185\u8054\u200b\uff09\n\necho \"\u200b\u67e5\u770b\u200bno_LTO\u200b\u7248\u672c\u200b\u7b26\u53f7\u200b:\"\n\n# \u200b\u67e5\u770b\u200b\u65e0\u200bLTO\u200b\u7248\u672c\u200b\u7b26\u53f7\u200b\nnm --demangle main_no_lto | grep square\n# \u200b\u9884\u671f\u200b\u8f93\u51fa\u200b\uff1a\u200b\u5b58\u5728\u200bsquare\u200b\u7b26\u53f7\u200b\n\n\necho \"\u200b\u751f\u6210\u200bLTO\u200b\u6c47\u7f16\u200b:\"\n# \u200b\u751f\u6210\u200b\u5e26\u200bLTO\u200b\u7684\u200b\u6c47\u7f16\u200b\ng++ -flto -O2 -S main.cpp -Imath_lib -Lmath_lib -lmath -o main_lto.s\n\necho \"\u200b\u751f\u6210\u200bno_LTO\u200b\u6c47\u7f16\u200b:\"\n# \u200b\u751f\u6210\u200b\u65e0\u200bLTO\u200b\u7684\u200b\u6c47\u7f16\u200b\ng++ -O2 -S main.cpp -Imath_lib -Lmath_lib -lmath_no_lto -o main_no_lto.s\n</code></pre> <p>\u200b\u901a\u8fc7\u200b\u6267\u884c\u200bshow.sh\uff0c\u200b\u53ef\u4ee5\u200b\u751f\u6210\u200b\u6c47\u7f16\u200b\uff0c\u200b\u67e5\u770b\u200b\u7248\u672c\u200b\u7b26\u53f7\u200b\u662f\u5426\u200b\u5e26\u6709\u200bsquare \u200b\u51fd\u6570\u200b\u3002 </p>Bash<pre><code>bash show.sh\n\u200b\u67e5\u770b\u200bLTO\u200b\u7248\u672c\u200b\u7b26\u53f7\u200b:\n\u200b\u67e5\u770b\u200bno_LTO\u200b\u7248\u672c\u200b\u7b26\u53f7\u200b:\n00000000000012b0 T square(int)\n\u200b\u751f\u6210\u200bLTO\u200b\u6c47\u7f16\u200b:\n\u200b\u751f\u6210\u200bno_LTO\u200b\u6c47\u7f16\u200b:\n</code></pre><p></p>"},{"location":"blog/ltolink-time-optimization%E8%83%BD%E5%A4%9F%E4%BC%98%E5%8C%96%E9%9D%99%E6%80%81%E5%BA%93%E5%90%97%E5%8A%A8%E6%80%81%E5%BA%93%E5%91%A2%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C/#\u53cd\u6c47\u7f16\u67e5\u770b\u4ee3\u7801","title":"\u53cd\u6c47\u7f16\u200b\u67e5\u770b\u200b\u4ee3\u7801","text":"<p>\u200b\u540c\u65f6\u200b\uff0c\u200b\u6211\u4eec\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u53cd\u6c47\u7f16\u200b\u67e5\u770b\u200b\u4ee3\u7801\u200b\uff0c\u200b\u5982\u679c\u200b\u88ab\u200b\u4f18\u5316\u200b\u4e86\u200b\uff0c\u200b\u90a3\u4e48\u200b\u4ee3\u7801\u200b\u4e2d\u200b\u5c31\u200b\u4e0d\u4f1a\u200b\u6709\u200bcall square \u200b\u51fd\u6570\u200b\u7684\u200b\u8c03\u7528\u200b\u3002</p> Bash<pre><code>objdump -dC main_no_lto | grep -A10 '&lt;main&gt;'\n\n# \u200b\u8fd9\u4e2a\u200b\u662f\u200b\u6ca1\u6709\u200b\u4f18\u5316\u200b\u7684\u200b\u7ed3\u679c\u200b\n0000000000001100 &lt;main&gt;:\n    1100:       f3 0f 1e fa             endbr64\n    1104:       55                      push   %rbp\n    1105:       bf 05 00 00 00          mov    $0x5,%edi\n    110a:       53                      push   %rbx\n    110b:       48 83 ec 08             sub    $0x8,%rsp\n    110f:       e8 9c 01 00 00          call   12b0 &lt;square(int)&gt;\n    1114:       48 8d 35 e9 0e 00 00    lea    0xee9(%rip),%rsi        # 2004 &lt;_IO_stdin_used+0x4&gt;\n    111b:       48 8d 3d 1e 2f 00 00    lea    0x2f1e(%rip),%rdi        # 4040 &lt;std::cout@GLIBCXX_3.4&gt;\n    1122:       89 c3                   mov    %eax,%ebx\n</code></pre> <p>\u200b\u8fd9\u4e2a\u200b\u662f\u200b\u67e5\u770b\u200blto\u200b\u4f18\u5316\u200b\u540e\u200b\u7684\u200b\u53cd\u6c47\u7f16\u200b\uff0c\u200b\u53d1\u73b0\u200b\u6ca1\u6709\u200b\u4e86\u200bcall square \u200b\u51fd\u6570\u200b\u7684\u200b\u8c03\u7528\u200b\u3002\u200b\u76f4\u63a5\u200b\u88ab\u200b\u4f18\u5316\u200b\u6210\u200b\u4e86\u200bmov    $0x19,%esi\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200b\u76f4\u63a5\u200b\u8f93\u51fa\u200b\u4e86\u200b16\u200b\u8fdb\u5236\u200b\u7684\u200b0x19\u200b\u5bf9\u5e94\u200b\u4e86\u200b\u5341\u8fdb\u5236\u200b\u6570\u5b57\u200b25\u3002 </p>Bash<pre><code>objdump -dC main_lto | grep -A10 '&lt;main&gt;'\n\n0000000000001100 &lt;main&gt;:\n    1100:       f3 0f 1e fa             endbr64\n    1104:       55                      push   %rbp\n    1105:       48 8d 35 f8 0e 00 00    lea    0xef8(%rip),%rsi        # 2004 &lt;_IO_stdin_used+0x4&gt;\n    110c:       53                      push   %rbx\n    110d:       48 83 ec 08             sub    $0x8,%rsp\n    1111:       48 8b 3d c8 2e 00 00    mov    0x2ec8(%rip),%rdi        # 3fe0 &lt;std::cout@GLIBCXX_3.4&gt;\n    1118:       e8 a3 ff ff ff          call   10c0 &lt;std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::operator&lt;&lt; &lt;std::char_traits&lt;char&gt; &gt;(std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, char const*)@plt&gt;\n    111d:       be 19 00 00 00          mov    $0x19,%esi\n</code></pre><p></p> <p>\u200b\u4f7f\u7528\u200b\u4e86\u200blto\u200b\u5bf9\u200b\u9759\u6001\u200b\u5e93\u200b\u4e5f\u200b\u662f\u200b\u53ef\u4ee5\u200b\u4f18\u5316\u200b\u7684\u200b\uff0c\u200b\u524d\u63d0\u200b\u662f\u200b\u7f16\u8bd1\u200b\u9759\u6001\u200b\u5e93\u200b\u548c\u200b\u53ef\u6267\u884c\u7a0b\u5e8f\u200b\uff0c\u200b\u90fd\u200b\u9700\u8981\u200b\u52a0\u4e0a\u200b-flto\u200b\u9009\u9879\u200b\u3002\u200c</p> <p>lto\u200b\u53ef\u4ee5\u200b\u4f18\u5316\u200b\uff0c\u200b\u51fd\u6570\u200b\u5185\u8054\u200b\u200c\uff0cLTO\u200b\u5141\u8bb8\u200b\u5c06\u200b\u9759\u6001\u200b\u5e93\u4e2d\u200b\u7684\u200bsquare()\u200b\u51fd\u6570\u200b\u5185\u8054\u200b\u5230\u200b\u8c03\u7528\u200b\u5904\u200b\uff0c\u200b\u76f4\u63a5\u200b\u66ff\u6362\u200b\u4e3a\u200b5*5=25\u200b\u7684\u200b\u5e38\u91cf\u200b\u8ba1\u7b97\u7ed3\u679c\u200b\u3002\u200b\u5982\u679c\u200b\u4e3b\u7a0b\u5e8f\u200b\u672a\u200b\u4f7f\u7528\u200b\u67d0\u4e9b\u200b\u5e93\u51fd\u6570\u200b\uff0cLTO\u200b\u53ef\u200b\u5f7b\u5e95\u200b\u79fb\u9664\u200b\u76f8\u5173\u200b\u4ee3\u7801\u200b\uff0c\u200c\u200b\u4e5f\u200b\u5c31\u662f\u200b\u6b7b\u200b\u4ee3\u7801\u200b\u6d88\u9664\u200b\u3002\u200b\u8fd8\u6709\u200b\u5f88\u591a\u200b\u4f18\u5316\u200b\u3002</p>"},{"location":"blog/ltolink-time-optimization%E8%83%BD%E5%A4%9F%E4%BC%98%E5%8C%96%E9%9D%99%E6%80%81%E5%BA%93%E5%90%97%E5%8A%A8%E6%80%81%E5%BA%93%E5%91%A2%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C/#\u9759\u6001\u5e93\u548c\u52a8\u6001\u5e93lto\u4f18\u5316\u7684\u533a\u522b","title":"\u9759\u6001\u200b\u5e93\u200b\u548c\u200b\u52a8\u6001\u200b\u5e93\u200bLTO\u200b\u4f18\u5316\u200b\u7684\u200b\u533a\u522b\u200b\ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350","text":"<ul> <li>\u200c\u200b\u9759\u6001\u200b\u5e93\u200b\u200c</li> </ul> <p>LTO\u200b\u5728\u200b\u94fe\u63a5\u200b\u9636\u6bb5\u200b\u53ef\u200b\u5bf9\u200b\u9759\u6001\u200b\u5e93\u200b\u8fdb\u884c\u200b\u5168\u5c40\u200b\u4f18\u5316\u200b\u3002\u200b\u7531\u4e8e\u200b\u9759\u6001\u200b\u5e93\u200b\u4ee3\u7801\u200b\u5728\u200b\u7f16\u8bd1\u200b\u65f6\u200b\u5df2\u200b\u5b8c\u5168\u200b\u5d4c\u5165\u200b\u53ef\u6267\u884c\u6587\u4ef6\u200b\uff0c\u200b\u94fe\u63a5\u200b\u5668\u80fd\u200b\u8de8\u200b\u6a21\u5757\u200b\u5206\u6790\u200b\u4ee3\u7801\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u51fd\u6570\u200b\u5185\u8054\u200b\u3001\u200b\u6b7b\u200b\u4ee3\u7801\u200b\u6d88\u9664\u200b\u7b49\u200b\u8de8\u200b\u6587\u4ef6\u200b\u4f18\u5316\u200b\u200c\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u9759\u6001\u200b\u5e93\u4e2d\u200b\u7684\u200b\u672a\u200b\u4f7f\u7528\u200b\u51fd\u6570\u200b\u4f1a\u200b\u88ab\u200b\u5f7b\u5e95\u200b\u79fb\u9664\u200b\uff0c\u200b\u51cf\u5c11\u200b\u6700\u7ec8\u200b\u6587\u4ef6\u200b\u4f53\u79ef\u200b\u3002</p> <ul> <li>\u200c\u200b\u52a8\u6001\u200b\u5e93\u200b\u200c</li> </ul> <p>\u200b\u52a8\u6001\u200b\u5e93\u200b\u672c\u8eab\u200b\u662f\u200b\u72ec\u7acb\u200b\u7f16\u8bd1\u200b\u7684\u200b\u4e8c\u8fdb\u5236\u200b\u6587\u4ef6\u200b\uff0cLTO\u200b\u53ea\u80fd\u200b\u5728\u200b\u751f\u6210\u200b\u52a8\u6001\u200b\u5e93\u65f6\u200b\u5bf9\u200b\u5176\u200b\u5185\u90e8\u200b\u4ee3\u7801\u200b\u8fdb\u884c\u200b\u5c40\u90e8\u4f18\u5316\u200b\u3002\u200b\u4e3b\u7a0b\u5e8f\u200b\u94fe\u63a5\u200b\u52a8\u6001\u200b\u5e93\u65f6\u200b\uff0c\u200b\u65e0\u6cd5\u200b\u8de8\u5e93\u200b\u8fb9\u754c\u200b\u8fdb\u884c\u200b\u5168\u5c40\u200b\u4f18\u5316\u200b\uff08\u200b\u5982\u200b\u65e0\u6cd5\u200b\u5185\u8054\u200b\u52a8\u6001\u200b\u5e93\u4e2d\u200b\u7684\u200b\u51fd\u6570\u200b\uff09\u3002\u200b\u52a8\u6001\u200b\u5e93\u200b\u7684\u200b\u4f18\u5316\u200b\u9700\u200b\u4f9d\u8d56\u200b\u5176\u200b\u81ea\u8eab\u200b\u7684\u200b\u7f16\u8bd1\u200b\u53c2\u6570\u200b\uff08\u200b\u5982\u200b\u542f\u7528\u200b-flto\uff09\u3002</p> <ul> <li>\u200b\u4e00\u6587\u200b\u641e\u61c2\u200bc++\u200b\u4e2d\u200brvo\u200b\u8fd4\u56de\u503c\u200b\u4f18\u5316\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/lazy_nvim%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/","title":"Lazy_nvim\u200b\u6e90\u7801\u200b\u9605\u8bfb","text":""},{"location":"blog/lazy_nvim%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#core\u6a21\u5757","title":"Core\u200b\u6a21\u5757","text":""},{"location":"blog/lazy_nvim%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#lazyhandler\u624b\u52a8\u7c7b\u548c\u7ee7\u627f\u673a\u5236\u5b9e\u73b0","title":"LazyHandler\u200b\u624b\u52a8\u200b\u7c7b\u200b\u548c\u200b\u7ee7\u627f\u200b\u673a\u5236\u200b\u5b9e\u73b0","text":"<p>\u200b\u5728\u200b~/lua/lazy/core/handler/init.lua\u200b\u6587\u4ef6\u200b\u4e2d\u200b\uff0c\u200b\u5b9a\u4e49\u200b\u4e86\u200bLazyHandler\u200b\u7c7b\u200b\u3002handler\u200b\u7c7b\u4e2d\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u56db\u4e2a\u200b\u5177\u4f53\u200b\u7684\u200b\u5b50\u200b\u7c7b\u578b\u200b\uff0c\u200b\u5206\u522b\u200b\u662f\u200bkeys\u3001event\u3001cmd\u200b\u548c\u200bft\u3002\u200b\u5206\u522b\u200b\u5728\u200bcmd.lua\u3001event.lua\u3001ft.lua\u200b\u548c\u200bkeys.lua\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u5177\u4f53\u200b\u7684\u200bhandler\u200b\u5b9e\u73b0\u200b\u3002</p> <p>\u200b\u6ce8\u200b\uff1a\u200b\u4ee3\u7801\u200b\u4e2d\u200b\u7684\u200b\u6ce8\u91ca\u200b\u683c\u5f0f\u200b\u5f88\u200b\u597d\u200b\uff0c\u200b\u5728\u200b\u5199\u200blua\u200b\u7a0b\u5e8f\u200b\u65f6\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u6309\u7167\u200b\u8fd9\u79cd\u200b\u6a21\u5f0f\u200b\u3002\u200b\u5b83\u200b\u57fa\u4e8e\u200b Lua \u200b\u7684\u200b\u6587\u6863\u200b\u6ce8\u91ca\u200b\u683c\u5f0f\u200b\uff0c\u200b\u517c\u5bb9\u200b\u591a\u79cd\u200b\u5de5\u5177\u200b\u548c\u200b\u7f16\u8f91\u5668\u200b\u63d2\u4ef6\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u63d0\u5347\u200b\u4ee3\u7801\u200b\u7684\u200b\u53ef\u8bfb\u6027\u200b\u548c\u200b\u63d0\u4f9b\u200b\u7c7b\u578b\u200b\u63d0\u793a\u200b\u3002 </p>Lua<pre><code>---@class LazyHandler\n---@field type LazyHandlerTypes\n---@field extends? LazyHandler\n---@field active table&lt;string,table&lt;string,string&gt;&gt;\n---@field managed table&lt;string,string&gt; mapping handler keys to plugin names\n---@field super LazyHandler\nlocal M = {}\n\n---@enum LazyHandlerTypes\nM.types = {\n  keys = \"keys\",\n  event = \"event\",\n  cmd = \"cmd\",\n  ft = \"ft\",\n}\n\n---@type table&lt;string,LazyHandler&gt;\nM.handlers = {}\n</code></pre><p></p> <p>\u200b\u901a\u8fc7\u200b<code>M.new()</code>\u200b\u51fd\u6570\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200bLazyHandler\u200b\u5b9e\u4f8b\u200b\u3002\u200b\u5728\u200b\u5176\u4e2d\u200b\u8bbe\u7f6e\u200bself.super\u200b\u4e3a\u200b\u5177\u4f53\u200bhandler\u200b\u5b9e\u73b0\u200b\u7c7b\u200b\u7684\u200bextends\u200b\u53d8\u91cf\u200b\u3002\u200b\u5229\u7528\u200blua\u200b\u5143\u8868\u200b\u7684\u200b\u7279\u6027\u200b\uff0c\u200b\u8bbe\u7f6e\u200b\u4e86\u200b__index</p> <p>\u200b\u901a\u8fc7\u200b\u52a8\u6001\u200b\u52a0\u8f7d\u200b\u6a21\u5757\u200b\u548c\u200b\u624b\u52a8\u200b\u8bbe\u7f6e\u200b\u5143\u8868\u200b\uff0c\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e00\u79cd\u200b\u7075\u6d3b\u200b\u7684\u200b\u5bf9\u8c61\u200b\u521b\u5efa\u200b\u548c\u200b\u7ee7\u627f\u200b\u673a\u5236\u200b\u3002\u200b\u57fa\u4e8e\u200b\u5b57\u7b26\u4e32\u200b\u6807\u8bc6\u7b26\u200b\u52a8\u6001\u200b\u9009\u62e9\u200b\u548c\u200b\u52a0\u8f7d\u200b\u4e0d\u540c\u200b\u7684\u200b\u5904\u7406\u5668\u200b\u6a21\u5757\u200b\u3002</p> Lua<pre><code>---@param type LazyHandlerTypes\nfunction M.new(type)\n  ---@type LazyHandler\n  local handler = require(\"lazy.core.handler.\" .. type)\n  local super = handler.extends or M\n  local self = setmetatable({}, { __index = setmetatable(handler, { __index = super }) })\n  self.super = super\n  self.active = {}\n  self.managed = {}\n  self.type = type\n  return self\nend\n</code></pre> <p></p>Lua<pre><code>local self = setmetatable({}, { __index = setmetatable(handler, { __index = super }) })\n</code></pre> \u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u7a7a\u8868\u200b {}\uff0c\u200b\u5e76\u200b\u901a\u8fc7\u200b setmetatable \u200b\u8bbe\u7f6e\u200b\u5176\u5143\u8868\u200b\u3002\u200b\u8fd9\u4e2a\u200b\u5143\u8868\u200b\u7684\u200b __index \u200b\u6307\u5411\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u5143\u8868\u200b\uff0c\u200b\u4e14\u200b\u8be5\u5143\u8868\u200b\u7684\u200b __index \u200b\u6307\u5411\u200b super\uff0c\u200b\u8fd9\u6837\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u591a\u5c42\u6b21\u200b\u7684\u200b\u7ee7\u627f\u200b\u94fe\u200b\u3002\u200b\u8fd9\u79cd\u200b\u8bbe\u7f6e\u200b\u65b9\u5f0f\u200b\u786e\u4fdd\u200b\uff1a\u200b\u5f53\u200b\u5728\u200b self \u200b\u4e2d\u200b\u67e5\u627e\u200b\u67d0\u4e2a\u200b\u65b9\u6cd5\u200b\u6216\u200b\u5c5e\u6027\u200b\u65f6\u200b\uff0c\u200b\u9996\u5148\u200b\u67e5\u627e\u200b handler\uff0c\u200b\u5982\u679c\u200b\u627e\u200b\u4e0d\u5230\u200b\uff0c\u200b\u518d\u200b\u67e5\u627e\u200b super\u3002<p></p>"},{"location":"blog/lazy_nvim%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#\u4ee5ftlua\u4e3a\u4f8b","title":"\u4ee5\u200bft.lua\u200b\u4e3a\u4f8b","text":"<p>\u200b\u5728\u200bft.lua\u200b\u4e2d\u200b\uff0c\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u540d\u4e3a\u200bLazyFiletypeHandler\u200b\u7684\u200b\u7c7b\u200b\uff0c\u200b\u5b83\u200b.extends=Event\u200b\u8868\u793a\u200b\u5b83\u200b\u7ee7\u627f\u200b\u81ea\u200bEvent\u3002</p> Lua<pre><code>---@class LazyFiletypeHandler:LazyEventHandler\nlocal M = {}\nM.extends = Event\n\nfunction M:add(plugin)\n  self.super.add(self, plugin)\n  if plugin.ft then\n    Loader.ftdetect(plugin.dir)\n  end\nend\n\nfunction M:_parse(value)\n  return {\n    id = value,\n    event = \"FileType\",\n    pattern = value,\n  }\nend\n\nreturn M\n</code></pre>"},{"location":"blog/lazy_nvim%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#\u793a\u4f8b\u6269\u5c55lazyfiletypehandler","title":"\u793a\u4f8b\u200b\uff1a\u200b\u6269\u5c55\u200bLazyFiletypeHandler","text":"<p>\u200b\u5982\u679c\u200b\u8981\u200b\u6269\u5c55\u200bLazyFiletypeHandler\u200b\u4ee5\u200b\u6dfb\u52a0\u200b\u989d\u5916\u200b\u7684\u200b\u529f\u80fd\u200b\u6216\u200b\u4fee\u6539\u200b\u73b0\u6709\u200b\u884c\u4e3a\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200bLua\u200b\u6a21\u5757\u200b\uff0c\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\uff1a </p>Lua<pre><code>local Event = require(\"lazy.core.handler.event\")\nlocal Loader = require(\"lazy.core.loader\")\n\n---@class LazyFiletypeHandler:LazyEventHandler\nlocal M = {}\nM.extends = Event\n\n---@param plugin LazyPlugin\nfunction M:add(plugin)\n  self.super.add(self, plugin)\n  if plugin.ft then\n    Loader.ftdetect(plugin.dir)\n  end\nend\n\n---@return LazyEvent\nfunction M:_parse(value)\n  return {\n    id = value,\n    event = \"FileType\",\n    pattern = value,\n  }\nend\n\nreturn M\n</code></pre><p></p>"},{"location":"blog/lazy_nvim%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#\u542f\u7528\u548c\u7981\u7528\u63d2\u4ef6","title":"\u542f\u7528\u200b\u548c\u200b\u7981\u7528\u200b\u63d2\u4ef6","text":"<p>enable\u200b\u548c\u200bdisable\u200b\u51fd\u6570\u200b\u5206\u522b\u200b\u7528\u4e8e\u200b\u542f\u7528\u200b\u548c\u200b\u7981\u7528\u200b\u63d2\u4ef6\u200b\u3002\u200b\u901a\u8fc7\u200b\u904d\u5386\u200b\u63d2\u4ef6\u200b\u7684\u200bhandlers\uff0cadd\u200b\u6216\u200bdel\u200b\u65b9\u6cd5\u200b\u6765\u200b\u5b9e\u73b0\u200b\u3002 </p>Lua<pre><code>---@param plugin LazyPlugin\nfunction M.disable(plugin)\n  for type in pairs(plugin._.handlers or {}) do\n    M.handlers[type]:del(plugin)\n  end\nend\n\n---@param plugin LazyPlugin\nfunction M.enable(plugin)\n  if not plugin._.loaded then\n    if not plugin._.handlers then\n      M.resolve(plugin)\n    end\n    for type in pairs(plugin._.handlers or {}) do\n      M.handlers[type]:add(plugin)\n    end\n  end\nend\n</code></pre><p></p>"},{"location":"blog/lazy_nvim%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#lua\u4e2d\u7684\u5143\u8868","title":"Lua\u200b\u4e2d\u200b\u7684\u200b\u5143\u8868","text":"<p>\u200b\u5143\u8868\u200b\uff08metatable\uff09\uff1a \u200b\u8868\u200b\uff08Table\uff09\uff1a\u200b\u5728\u200b Lua \u200b\u4e2d\u200b\uff0c\u200b\u8868\u662f\u200b\u552f\u4e00\u200b\u7684\u200b\u6570\u636e\u7ed3\u6784\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u7528\u4f5c\u200b\u6570\u7ec4\u200b\u3001\u200b\u5b57\u5178\u200b\u7b49\u200b\u3002 \u200b\u5143\u8868\u200b\uff08Metatable\uff09\uff1a\u200b\u662f\u200b\u4e00\u4e2a\u200b\u8868\u200b\uff0c\u200b\u5b83\u200b\u53ef\u4ee5\u200b\u8d4b\u4e88\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u8868\u200b\u7279\u6b8a\u200b\u7684\u200b\u884c\u4e3a\u200b\u3002\u200b\u901a\u8fc7\u200b\u8bbe\u7f6e\u200b\u4e00\u4e2a\u200b\u8868\u200b\u7684\u200b\u5143\u8868\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u6539\u53d8\u200b\u8be5\u8868\u200b\u7684\u200b\u884c\u4e3a\u200b\u548c\u200b\u64cd\u4f5c\u200b\u65b9\u5f0f\u200b\u3002\u200b\u901a\u8fc7\u200b\u5143\u8868\u200b\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5b9a\u4e49\u200b\u8868\u200b\u7684\u200b\u81ea\u5b9a\u4e49\u200b\u884c\u4e3a\u200b\u3002</p> <ul> <li> <p>__index\uff1a \u200b\u7528\u4e8e\u200b\u5b9a\u4e49\u200b\u5f53\u200b\u8bbf\u95ee\u200b\u8868\u4e2d\u200b\u4e0d\u200b\u5b58\u5728\u200b\u7684\u200b\u952e\u200b\u65f6\u200b\u7684\u200b\u884c\u4e3a\u200b\u3002 \u200b\u53ef\u4ee5\u200b\u662f\u200b\u4e00\u4e2a\u200b\u8868\u200b\u6216\u200b\u4e00\u4e2a\u200b\u51fd\u6570\u200b\u3002 \u200b\u5982\u679c\u200b\u662f\u200b\u8868\u200b\uff0c\u200b\u5219\u200b\u4f1a\u200b\u5728\u200b\u8be5\u8868\u4e2d\u200b\u67e5\u627e\u200b\u952e\u200b\u3002 \u200b\u5982\u679c\u200b\u662f\u200b\u51fd\u6570\u200b\uff0c\u200b\u5219\u200b\u4f1a\u200b\u8c03\u7528\u200b\u8be5\u200b\u51fd\u6570\u200b\uff0c\u200b\u5e76\u200b\u4f20\u9012\u200b\u8868\u548c\u952e\u200b\u4f5c\u4e3a\u200b\u53c2\u6570\u200b\u3002</p> </li> <li> <p>__newindex\uff1a \u200b\u7528\u4e8e\u200b\u5b9a\u4e49\u200b\u5bf9\u8868\u4e2d\u200b\u4e0d\u200b\u5b58\u5728\u200b\u7684\u200b\u952e\u200b\u8fdb\u884c\u200b\u8d4b\u503c\u200b\u65f6\u200b\u7684\u200b\u884c\u4e3a\u200b\u3002 \u200b\u51fd\u6570\u200b\u7c7b\u578b\u200b\uff0c\u200b\u63a5\u6536\u200b\u8868\u200b\u3001\u200b\u952e\u548c\u503c\u200b\u4f5c\u4e3a\u200b\u53c2\u6570\u200b\u3002</p> </li> <li> <p>__tostring\uff1a \u200b\u7528\u4e8e\u200b\u5b9a\u4e49\u200b\u5c06\u8868\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u5b57\u7b26\u4e32\u200b\u65f6\u200b\u7684\u200b\u884c\u4e3a\u200b\uff0c\u200b\u4f8b\u5982\u200b\u5728\u200b print \u200b\u51fd\u6570\u200b\u4e2d\u200b\u3002</p> </li> <li> <p>__call\uff1a \u200b\u4f7f\u5f97\u200b\u8868\u200b\u80fd\u591f\u200b\u50cf\u200b\u51fd\u6570\u200b\u4e00\u6837\u200b\u88ab\u200b\u8c03\u7528\u200b\u3002</p> </li> </ul>"},{"location":"blog/lazy_nvim%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#manage\u6a21\u5757","title":"Manage\u200b\u6a21\u5757","text":""},{"location":"blog/lazy_nvim%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#task\u4e2d\u7684fs\u5b9e\u73b0","title":"task\u200b\u4e2d\u200b\u7684\u200bfs\u200b\u5b9e\u73b0","text":"<p>vim.uv exposes the \u201cluv\u201d Lua bindings for the libUV library that Nvim uses for networking, filesystem, and process management, see luvref.txt.</p> <p>\u200b\u5bf9\u200b\u6587\u4ef6\u7cfb\u7edf\u200b\u7684\u200b\u64cd\u4f5c\u200blua\u200b\u8c03\u7528\u200b\u4e86\u200bvim.uv\uff0c\u200b\u662f\u200b\u5bf9\u200blibuv\u200b\u5e93\u200b\u7684\u200b\u5c01\u88c5\u200b\u3002\u200b\u4f8b\u5982\u200b\uff1a</p> Lua<pre><code>local function rm(dir)\n  local stat = vim.uv.fs_lstat(dir)\n  assert(stat and stat.type == \"directory\", dir .. \" should be a directory!\")\n  Util.walk(dir, function(path, _, type)\n    if type == \"directory\" then\n      vim.uv.fs_rmdir(path)\n    else\n      vim.uv.fs_unlink(path)\n    end\n  end)\n  vim.uv.fs_rmdir(dir)\nend\n</code></pre>"},{"location":"blog/lazy_nvim%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#task-\u5b9e\u73b0","title":"task \u200b\u5b9e\u73b0","text":""},{"location":"blog/lazy_nvim%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#task-\u5f02\u6b65\u56de\u8c03\u6ce8\u518c","title":"task \u200b\u5f02\u6b65\u200b\u56de\u8c03\u200b\u6ce8\u518c","text":"<p>Task\u200b\u7c7b\u200b\u7ee7\u627f\u200b\u4e86\u200bAsync.Async\u200b\u7c7b\u200b\uff0c\u200b\u5e76\u200b\u5b9e\u73b0\u200b\u4e86\u200b_run\u200b\u65b9\u6cd5\u200b\u3002\u200b\u5728\u200b_run\u200b\u4e2d\u200b\u6ce8\u518c\u200b\u4e86\u200bdone\u3001error\u200b\u548c\u200byield\u200b\u4e8b\u4ef6\u200b\u7684\u200b\u5904\u7406\u51fd\u6570\u200b\u3002</p> Lua<pre><code>local Task = setmetatable({}, { __index = Async.Async })\n\n---@param plugin LazyPlugin\n---@param name string\n---@param opts? TaskOptions\n---@param task LazyTaskFn\nfunction Task.new(plugin, name, task, opts)\n  local self = setmetatable({}, { __index = Task })\n  ---@async\n  Task.init(self, function()\n    self:_run(task)\n  end)\n  ......\n  return self\nend\n\n---@async\n---@param task LazyTaskFn\nfunction Task:_run(task)\n  if Config.headless() and Config.options.headless.task then\n    self:log(\"Running task \" .. self.name, vim.log.levels.INFO)\n  end\n\n  self\n    :on(\"done\", function()\n      self:_done()\n    end)\n    :on(\"error\", function(err)\n      self:error(err)\n    end)\n    :on(\"yield\", function(msg)\n      self:log(msg)\n    end)\n  task(self, self._opts)\nend\n</code></pre> <p>\u200b\u5728\u200bAsync.Async\u200b\u7c7b\u4e2d\u200b\uff0con\u200b\u65b9\u6cd5\u200b\u7528\u4e8e\u200b\u6ce8\u518c\u200b\u4e8b\u4ef6\u200b\u7684\u200b\u5904\u7406\u51fd\u6570\u200b\u3002\u200b\u4f8b\u5982\u200b\uff1a</p> Lua<pre><code>---@param event AsyncEvent\n---@param cb async fun(res:any, async:Async)\nfunction Async:on(event, cb)\n  --- _on \u200b\u662f\u200b\u4e00\u4e2a\u200b\u8868\u200b\uff0c\u200b\u7528\u4e8e\u200b\u5b58\u50a8\u200b\u4e8b\u4ef6\u200b\u7684\u200b\u5904\u7406\u51fd\u6570\u200b\u5217\u8868\u200b, \u200b\u4e00\u4e2a\u200b\u4e8b\u4ef6\u200b\u53ef\u4ee5\u200b\u6709\u200b\u591a\u4e2a\u200b\u5904\u7406\u51fd\u6570\u200b\u3002\n  self._on[event] = self._on[event] or {}\n  table.insert(self._on[event], cb)\n  return self\nend\n</code></pre> <p>\u200b\u5728\u200b~/lua/lazy/async.lua, Async.init\u200b\u4e2d\u200b\uff0c\u200b\u901a\u8fc7\u200bcoroutine\u200b\u521b\u5efa\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u534f\u7a0b\u200b\uff0c\u200b\u5e76\u200b\u5728\u200b\u5176\u4e2d\u200b\u8c03\u7528\u200b_fn\u200b\u51fd\u6570\u200b\u3002\u200b\u5982\u679c\u200b\u53d1\u751f\u200b\u9519\u8bef\u200b\uff0c\u200b\u5219\u200b\u89e6\u53d1\u200berror\u200b\u4e8b\u4ef6\u200b\uff1b\u200b\u5426\u5219\u200b\uff0c\u200b\u5728\u200b\u4efb\u52a1\u200b\u5b8c\u6210\u200b\u540e\u200b\u89e6\u53d1\u200bdone\u200b\u4e8b\u4ef6\u200b\u3002 </p>Lua<pre><code>---@param fn async fun()\n---@return Async\nfunction Async:init(fn)\n  self._fn = fn\n  self._on = {}\n  self._co = coroutine.create(function()\n    local ok, err = pcall(self._fn)\n    if not ok then\n      self:_emit(\"error\", err)\n    end\n    self:_emit(\"done\")\n  end)\n  M._threads[self._co] = self\n  return M.add(self)\nend\n\n---@private\n---@param event AsyncEvent\n---@param res any\nfunction Async:_emit(event, res)\n  for _, cb in ipairs(self._on[event] or {}) do\n    cb(res, self)\n  end\nend\n</code></pre><p></p>"},{"location":"blog/lazy_nvim%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#task_done-\u5b9e\u73b0","title":"Task:_done() \u200b\u5b9e\u73b0","text":"<p>\u200b\u5728\u200b\u4e0a\u9762\u200b\u63d0\u5230\u200b\u7684\u200bTask:_run\u200b\u4e2d\u200b\uff0c\u200b\u6ce8\u518c\u200b\u4e86\u200bdone\u200b\u4e8b\u4ef6\u200b\u7684\u200b\u5904\u7406\u51fd\u6570\u200b_done\u3002\u200b\u5728\u200b\u63d2\u4ef6\u200b\u52a0\u8f7d\u200b\u5b8c\u6210\u200b\u540e\u200b\u8c03\u7528\u200b\u6b64\u200b\u65b9\u6cd5\u200b\u3002</p> <p>When running in headless mode, lazy.nvim will log any messages to the terminal. See opts.headless for more info.</p> <p>\u200b\u5728\u200b\u65e0\u5934\u200b\u6a21\u5f0f\u200b\u4e0b\u200b\uff0clazy.nvim\u200b\u4f1a\u200b\u5c06\u200b\u4efb\u4f55\u200b\u6d88\u606f\u200b\u8bb0\u5f55\u200b\u5230\u200b\u7ec8\u7aef\u200b\u3002</p> Lua<pre><code>---@private\nfunction Task:_done()\n  --- \u200b\u5982\u679c\u200b\u5f00\u542f\u200b\u65e0\u5934\u200b\u6a21\u5f0f\u200b\uff0c\u200b\u6253\u5370\u200b\u65e5\u5fd7\u200b\u5230\u200b\u7ec8\u7aef\u200b\n  if Config.headless() and Config.options.headless.task then\n    local ms = math.floor(self:time() + 0.5)\n    self:log(\"Finished task \" .. self.name .. \" in \" .. ms .. \"ms\", vim.log.levels.INFO)\n  end\n  self._ended = vim.uv.hrtime()\n  if self._opts.on_done then\n    self._opts.on_done(self)\n  end\n  --- \u200b\u5237\u65b0\u200b\u754c\u9762\u200b\uff0c\u200b\u624b\u52a8\u200b\u89e6\u53d1\u200b\u6e32\u67d3\u200b\u754c\u9762\u200b\uff0c\u200b\u5e76\u200b\u6267\u884c\u200b\u81ea\u52a8\u200b\u547d\u4ee4\u200b\u3002\n  self:render()\n  -- \u200b\u89e6\u53d1\u200b\u63d2\u4ef6\u200b\u6ce8\u518c\u200b\u7684\u200b\u81ea\u52a8\u200b\u547d\u4ee4\u200b\n  vim.schedule(function()\n    vim.api.nvim_exec_autocmds(\"User\", {\n      pattern = \"LazyPlugin\" .. self.name:sub(1, 1):upper() .. self.name:sub(2),\n      data = { plugin = self.plugin.name },\n    })\n  end)\nend\n</code></pre> <p>nvim_exec_autocmds api\u200b\u5b9a\u4e49\u200b\u3002</p> <p>Task\u200b\u4e2d\u200bself.log\u200b\u5b9e\u73b0\u200b\uff1a </p>Lua<pre><code>  io.write(Terminal.prefix(color and color(msg.msg) or msg.msg, self:prefix()))\n  io.write(\"\\n\")\n</code></pre><p></p>"},{"location":"blog/lazy_nvim%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#render\u51fd\u6570\u5237\u65b0\u754c\u9762","title":"render\u200b\u51fd\u6570\u200b\u5237\u65b0\u200b\u754c\u9762","text":"<p>render\u200b\u51fd\u6570\u200b\u7528\u4e8e\u200b\u5237\u65b0\u200b\u754c\u9762\u200b\uff0c\u200b\u624b\u52a8\u200b\u89e6\u53d1\u200b\u6e32\u67d3\u200b\u754c\u9762\u200b\uff0c\u200b\u5e76\u200b\u6267\u884c\u200b\u81ea\u52a8\u200b\u547d\u4ee4\u200b\u3002\u200b\u5b9e\u73b0\u200b\uff1a </p>Lua<pre><code>function Task:render()\n  vim.schedule(function()\n    vim.api.nvim_exec_autocmds(\"User\", { pattern = \"LazyRender\", modeline = false })\n  end)\nend\n</code></pre> \u200b\u4f1a\u200b\u89e6\u53d1\u200bview\u200b\u4e2d\u200b\u6ce8\u518c\u200b\u7684\u200bautocmds\u3002~/lua/lazy/view/init.lua\u200b\u4e2d\u200b\u6ce8\u518c\u200b\u7684\u200b\u76f8\u5173\u200b\u4ee3\u7801\u200b\u5982\u4e0b\u200b\uff1a Lua<pre><code>  for _, pattern in ipairs({ \"LazyRender\", \"LazyFloatResized\" }) do\n    self:on({ \"User\" }, function()\n      if not (self.buf and vim.api.nvim_buf_is_valid(self.buf)) then\n        return true\n      end\n      self:update()\n    end, { pattern = pattern })\n  end\n</code></pre><p></p>"},{"location":"blog/lazy_nvim%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#task\u5728\u54ea\u513f\u88ab\u4f7f\u7528","title":"task\u200b\u5728\u200b\u54ea\u513f\u200b\u88ab\u200b\u4f7f\u7528","text":"Lua<pre><code>---@param plugin LazyPlugin\n---@param step PipelineStep\n---@return LazyTask?\nfunction Runner:queue(plugin, step)\n  assert(self._running and self._running:running(), \"Runner is not running\")\n  local def = vim.split(step.task, \".\", { plain = true })\n  ---@type LazyTaskDef\n  local task_def = require(\"lazy.manage.task.\" .. def[1])[def[2]]\n  assert(task_def, \"Task not found: \" .. step.task)\n  local opts = step.opts or {}\n  if not (task_def.skip and task_def.skip(plugin, opts)) then\n    return Task.new(plugin, def[2], task_def.run, opts)\n  end\nend\n</code></pre> \u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u5728\u200bRunner:queue\u200b\u4e2d\u200b\uff0c\u200b\u901a\u8fc7\u200brequire\u200b\u5f15\u5165\u200b\u4e86\u200btask\u200b\u7684\u200b\u5b9a\u4e49\u200b\uff0c\u200b\u5e76\u200b\u6267\u884c\u200b\u4e86\u200bTask.new\u3002"},{"location":"blog/lazy_nvim%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#\u57fa\u4e8e\u534f\u7a0b\u7684\u5f02\u6b65runner","title":"\u57fa\u4e8e\u200b\u534f\u7a0b\u200b\u7684\u200b\u5f02\u6b65\u200bRunner","text":"<p>Runner\u200b\u7c7b\u200b\uff0c\u200b\u7528\u4e8e\u200b\u7ba1\u7406\u200b\u5f02\u6b65\u200b\u4efb\u52a1\u200b\u3002\u200b\u5b83\u200b\u5229\u7528\u200blazy.async\u200b\u6a21\u5757\u200b\u63d0\u4f9b\u200b\u7684\u200b\u57fa\u4e8e\u200b\u534f\u7a0b\u200b\u7684\u200b\u5f02\u6b65\u200b\u6a21\u578b\u200b\u6765\u200b\u5904\u7406\u200b\u975e\u200b\u963b\u585e\u200b\u4efb\u52a1\u200b\u6267\u884c\u200b\u3002</p>"},{"location":"blog/lazy_nvim%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#_pipeline\u6807\u51c6\u5316","title":"_pipeline\u200b\u6807\u51c6\u5316","text":"<p>\u200b\u5728\u200bnew\u200b\u51fd\u6570\u200b\u4e2d\u6709\u200b\u4e0b\u9762\u200b\u7684\u200b\u4ee3\u7801\u200b\uff1a </p>Lua<pre><code>---@class TaskOptions: {[string]:any}\n\n\n---@param step string|(TaskOptions|{[1]:string})\nself._pipeline = vim.tbl_map(function(step)\n  return type(step) == \"string\" and { task = step } or { task = step[1], opts = step }\nend, self._opts.pipeline)\n</code></pre> \u200b\u5c06\u200b\u7528\u6237\u200b\u8f93\u5165\u200b\u7684\u200b\u4efb\u52a1\u200b\u914d\u7f6e\u200b\u6807\u51c6\u5316\u200b\u4e3a\u200b\u7edf\u4e00\u200b\u7684\u200b\u683c\u5f0f\u200b\uff0c\u200b\u65b9\u4fbf\u200b\u540e\u7eed\u200b\u5728\u200bRunner\u200b\u7684\u200b\u4efb\u52a1\u200b\u6267\u884c\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u3002\u200b\u901a\u8fc7\u200b\u8fd9\u79cd\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u4efb\u52a1\u200b\u7684\u200b\u540d\u79f0\u200b\u548c\u200b\u9009\u9879\u200b\u53ef\u4ee5\u200b\u88ab\u200b\u4e00\u81f4\u200b\u5730\u200b\u5904\u7406\u200b\uff0c\u200b\u65e0\u8bba\u200b\u7528\u6237\u200b\u8f93\u5165\u200b\u7684\u200b\u662f\u200b\u7b80\u5355\u200b\u7684\u200b\u4efb\u52a1\u200b\u540d\u79f0\u200b\u5b57\u7b26\u4e32\u200b\u8fd8\u662f\u200b\u5305\u542b\u200b\u8be6\u7ec6\u200b\u9009\u9879\u200b\u7684\u200b\u8868\u683c\u200b\u3002<p></p> <p>vim.tbl_map \u200b\u662f\u200b\u4e00\u4e2a\u200b\u9ad8\u9636\u200b\u51fd\u6570\u200b\uff0c\u200b\u5e94\u7528\u200b\u4e8e\u200b\u4e00\u4e2a\u200b\u8868\u683c\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u5143\u7d20\u200b\uff0c\u200b\u5e76\u200b\u5c06\u200b\u7ed3\u679c\u200b\u6536\u96c6\u200b\u6210\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u8868\u683c\u200b\u3002\u200b\u8fd9\u91cc\u200b\u5b83\u200b\u7528\u6765\u200b\u904d\u5386\u200bself._opts.pipeline\u200b\u4e2d\u200b\u7684\u200b\u6bcf\u4e2a\u200bstep\u3002 \u200b\u8f6c\u6362\u65b9\u6cd5\u200b\uff1a \u200b\u5982\u679c\u200bstep\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u4e32\u200b\uff0c\u200b\u76f4\u63a5\u200b\u5c06\u200b\u5176\u200b\u4f5c\u4e3a\u200b\u4efb\u52a1\u200b\u540d\u79f0\u200b\uff0c\u200b\u8fd4\u56de\u200b{ task = step }\u3002\u200b\u5982\u679c\u200bstep\u200b\u662f\u200b\u4e00\u4e2a\u200b\u8868\u683c\u200b\uff0c\u200b\u5047\u5b9a\u200b\u7b2c\u4e00\u4e2a\u200b\u5143\u7d20\u200b\u662f\u200b\u4efb\u52a1\u200b\u540d\u79f0\u200b\uff0c\u200b\u5176\u4ed6\u200b\u5143\u7d20\u200b\u662f\u200b\u9009\u9879\u200b\uff0c\u200b\u8fd4\u56de\u200b{ task = step[1], opts = step }\u3002</p>"},{"location":"blog/lazy_nvim%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#\u6838\u5fc3start\u51fd\u6570","title":"\u6838\u5fc3\u200bstart\u200b\u51fd\u6570\u200b\ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350","text":"<p>_start \u200b\u65b9\u6cd5\u200b\u662f\u200b Runner \u200b\u7c7b\u4e2d\u200b\u7528\u4e8e\u200b\u5f02\u6b65\u200b\u6267\u884c\u200b\u4efb\u52a1\u200b\u7684\u200b\u6838\u5fc3\u200b\u65b9\u6cd5\u200b\u3002\u200b\u5b83\u200b\u8d1f\u8d23\u7ba1\u7406\u200b\u4efb\u52a1\u200b\u7684\u200b\u72b6\u6001\u200b\u3001\u200b\u8c03\u5ea6\u200b\u4efb\u52a1\u200b\u7684\u200b\u6267\u884c\u200b\uff0c\u200b\u5e76\u200b\u5904\u7406\u200b\u4efb\u52a1\u200b\u7684\u200b\u5e76\u53d1\u200b\u548c\u200b\u540c\u6b65\u200b\u3002</p> Lua<pre><code>---@async\nfunction Runner:_start()\n  --- \u200b\u83b7\u53d6\u200b\u6240\u6709\u200b\u63d2\u4ef6\u200b\u7684\u200b\u540d\u79f0\u200b\u5e76\u200b\u8fdb\u884c\u200b\u6392\u5e8f\u200b\n  ---@type string[]\n  local names = vim.tbl_keys(self._plugins)\n  table.sort(names)\n\n  --- \u200b\u521b\u5efa\u200b\u72b6\u6001\u8868\u200b\uff0c\u200b\u7528\u4e8e\u200b\u8ddf\u8e2a\u200b\u6bcf\u4e2a\u200b\u63d2\u4ef6\u200b\u7684\u200b\u4efb\u52a1\u200b\u6267\u884c\u200b\u6b65\u9aa4\u200b\n  ---@type table&lt;string,RunnerTask&gt;\n  local state = {}\n\n  --- active\uff1a\u200b\u5f53\u524d\u200b\u6b63\u5728\u200b\u8fd0\u884c\u200b\u7684\u200b\u4efb\u52a1\u200b\u6570\u91cf\u200b\n  local active = 1\n  --- waiting\uff1a\u200b\u5f53\u524d\u200b\u7b49\u5f85\u200b\u540c\u6b65\u200b\u7684\u200b\u4efb\u52a1\u200b\u6570\u91cf\u200b\n  local waiting = 0\n  ---@type number?\n  --- wait_step\uff1a\u200b\u5f53\u524d\u200b\u9700\u8981\u200b\u540c\u6b65\u200b\u7684\u200b\u6b65\u9aa4\u200b\u6807\u8bc6\u200b\n  local wait_step = nil\n\n  while active &gt; 0 do\n    continue()\n    --- \u200b\u5982\u679c\u200b\u6240\u6709\u200b\u4efb\u52a1\u200b\u90fd\u200b\u5b8c\u6210\u200b\uff08active \u200b\u4e3a\u200b 0\uff09\uff0c\u200b\u4e14\u200b\u5b58\u5728\u200b\u7b49\u5f85\u200b\u4e2d\u200b\u7684\u200b\u4efb\u52a1\u200b\uff0c\u200b\u8c03\u7528\u200b\u540c\u6b65\u200b\u51fd\u6570\u200b\u3002\n    if active == 0 and waiting &gt; 0 then\n      local sync = self._pipeline[wait_step]\n      if sync and sync.opts and type(sync.opts.sync) == \"function\" then\n        sync.opts.sync(self)\n      end\n      continue(true)\n    end\n    --- \u200b\u5982\u679c\u200b\u4ecd\u200b\u6709\u200b\u6d3b\u52a8\u200b\u4efb\u52a1\u200b\uff0c\u200b\u5219\u200b\u6302\u200b\u8d77\u200b\u5f53\u524d\u200b\u534f\u7a0b\u200b\u4ee5\u200b\u7b49\u5f85\u200b\u4efb\u52a1\u200b\u5b8c\u6210\u200b\u3002\n    if active &gt; 0 then\n      self._running:suspend()\n    end\n  end\nend\n</code></pre> <p>conitnue\u200b\u662f\u200b_start\u200b\u51fd\u6570\u200b\u7684\u200b\u5185\u90e8\u200b\u51fd\u6570\u200b\uff0c\u200b\u68c0\u67e5\u200b\u6bcf\u4e2a\u200b\u63d2\u4ef6\u200b\u7684\u200b\u5f53\u524d\u4efb\u52a1\u200b\u72b6\u6001\u200b\uff1a\u200b\u662f\u5426\u200b\u6b63\u5728\u200b\u8fd0\u884c\u200b\u3001\u200b\u662f\u5426\u200b\u6709\u200b\u9519\u8bef\u200b\u3001\u200b\u662f\u5426\u200b\u9700\u8981\u200b\u7b49\u5f85\u200b\u540c\u6b65\u200b\u3002\u200b\u5728\u200b_start\u200b\u51fd\u6570\u200b\u4e2d\u200b\uff0c\u200b\u5faa\u73af\u200b\u8c03\u7528\u200bcontinue\u200b\u51fd\u6570\u200b\uff0c\u200b\u6301\u7eed\u200b\u8c03\u5ea6\u200b\u548c\u200b\u68c0\u67e5\u200b\u4efb\u52a1\u200b\u72b6\u6001\u200b\u3002</p> <ul> <li>\u200b\u5982\u679c\u200b\u4efb\u52a1\u200b\u6b63\u5728\u200b\u8fd0\u884c\u200b\uff0c\u200b\u589e\u52a0\u200b active \u200b\u8ba1\u6570\u200b\u3002</li> <li>\u200b\u5982\u679c\u200b\u9047\u5230\u200b \u201cwait\u201d \u200b\u7c7b\u578b\u200b\u7684\u200b\u4efb\u52a1\u200b\uff0c\u200b\u5e76\u4e14\u200b\u4e0d\u200b\u5728\u200b\u6062\u590d\u200b\u72b6\u6001\u200b\uff0c\u200b\u5219\u200b\u589e\u52a0\u200b waiting \u200b\u8ba1\u6570\u200b\u3002</li> <li>\u200b\u5426\u5219\u200b\uff0c\u200b\u5c06\u200b\u4efb\u52a1\u200b\u52a0\u5165\u200b\u5230\u200b next \u200b\u5217\u8868\u200b\u4e2d\u200b\uff0c\u200b\u51c6\u5907\u200b\u6267\u884c\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u4efb\u52a1\u200b\u3002</li> </ul> <p>\u200b\u7136\u540e\u200b\uff0c\u200b\u904d\u5386\u200bnext\u200b\u8fdb\u884c\u200b\u4efb\u52a1\u8c03\u5ea6\u200b\uff0c\u200b\u904d\u5386\u200b next \u200b\u5217\u8868\u200b\u4e2d\u200b\u7684\u200b\u63d2\u4ef6\u200b\u540d\u79f0\u200b\uff0c\u200b\u8c03\u5ea6\u200b\u548c\u200b\u6267\u884c\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u4efb\u52a1\u200b\u3002\u200b\u68c0\u67e5\u200b\u5e76\u53d1\u200b\u9650\u5236\u200b\uff0c\u200b\u786e\u4fdd\u200b\u4e0d\u4f1a\u200b\u540c\u65f6\u200b\u8fd0\u884c\u200b\u8d85\u8fc7\u200b\u6307\u5b9a\u200b\u6570\u91cf\u200b\u7684\u200b\u4efb\u52a1\u200b\u3002\u200b\u5bf9\u4e8e\u200b\u6bcf\u4e2a\u200b\u63d2\u4ef6\u200b\uff0c\u200b\u5c1d\u8bd5\u200b\u6267\u884c\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u6b65\u9aa4\u200b\uff1a \uff081\uff09\u200b\u5982\u679c\u200b\u6b65\u9aa4\u200b\u662f\u200b \u201cwait\u201d\uff0c\u200b\u5219\u200b\u6807\u8bb0\u200b\u4e3a\u200b\u7b49\u5f85\u200b\u5e76\u200b\u589e\u52a0\u200b waiting \u200b\u8ba1\u6570\u200b\u3002 \uff082\uff09\u200b\u5426\u5219\u200b\uff0c\u200b\u901a\u8fc7\u200b queue \u200b\u65b9\u6cd5\u200b\u5c06\u200b\u4efb\u52a1\u200b\u6392\u961f\u200b\u6267\u884c\u200b\uff0c\u200b\u5e76\u200b\u6807\u8bb0\u200b\u4e3a\u200b\u6b63\u5728\u200b\u5de5\u4f5c\u200b\u3002 </p>Lua<pre><code>  ---@async\n  ---@param resume? boolean\n  local function continue(resume)\n    active = 0\n    waiting = 0\n    wait_step = nil\n    local next = {} ---@type string[]\n\n    -- check running tasks\n    for _, name in ipairs(names) do\n      state[name] = state[name] or { step = 0 }\n      local s = state[name]\n      local is_running = s.task and s.task:running()\n      local step = self._pipeline[s.step]\n\n      --- \u200b\u5982\u679c\u200b\u4efb\u52a1\u200b\u6b63\u5728\u200b\u8fd0\u884c\u200b\uff0c\u200b\u589e\u52a0\u200b active \u200b\u8ba1\u6570\u200b\n      if is_running then\n        -- still running\n        active = active + 1\n      -- selene:allow(empty_if)\n      elseif s.task and s.task:has_errors() then\n        -- don't continue tasks if there are errors\n      --- \u200b\u5982\u679c\u200b\u9047\u5230\u200b \u201cwait\u201d \u200b\u7c7b\u578b\u200b\u7684\u200b\u4efb\u52a1\u200b\uff0c\u200b\u5e76\u4e14\u200b\u4e0d\u200b\u5728\u200b\u6062\u590d\u200b\u72b6\u6001\u200b\uff0c\u200b\u5219\u200b\u589e\u52a0\u200b waiting \u200b\u8ba1\u6570\u200b\n      elseif step and step.task == \"wait\" and not resume then\n        -- waiting for sync\n        waiting = waiting + 1\n        wait_step = s.step\n      --- \u200b\u5426\u5219\u200b\uff0c\u200b\u5c06\u200b\u4efb\u52a1\u200b\u52a0\u5165\u200b\u5230\u200b next \u200b\u5217\u8868\u200b\u4e2d\u200b\uff0c\u200b\u51c6\u5907\u200b\u6267\u884c\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u4efb\u52a1\u200b\n      else\n        next[#next + 1] = name\n      end\n    end\n\n    --- \u200b\u904d\u5386\u200b next \u200b\u5217\u8868\u200b\u4e2d\u200b\u7684\u200b\u63d2\u4ef6\u200b\u540d\u79f0\u200b\uff0c\u200b\u8c03\u5ea6\u200b\u548c\u200b\u6267\u884c\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u4efb\u52a1\u200b\n    -- schedule next tasks\n    for _, name in ipairs(next) do\n      --- \u200b\u68c0\u67e5\u200b\u5e76\u53d1\u200b\u9650\u5236\u200b\uff0c\u200b\u786e\u4fdd\u200b\u4e0d\u4f1a\u200b\u540c\u65f6\u200b\u8fd0\u884c\u200b\u8d85\u8fc7\u200b\u6307\u5b9a\u200b\u6570\u91cf\u200b\u7684\u200b\u4efb\u52a1\u200b\u3002\n      if self._opts.concurrency and active &gt;= self._opts.concurrency then\n        break\n      end\n      local s = state[name]\n      local plugin = self:plugin(name)\n      while s.step &lt;= #self._pipeline do\n        if s.step == #self._pipeline then\n          -- done\n          s.task = nil\n          plugin._.working = false\n          break\n        elseif s.step &lt; #self._pipeline then\n          -- next\n          s.step = s.step + 1\n          local step = self._pipeline[s.step]\n          if step.task == \"wait\" then\n            plugin._.working = false\n            waiting = waiting + 1\n            wait_step = s.step\n            break\n          else\n            s.task = self:queue(plugin, step)\n            plugin._.working = true\n            if s.task then\n              active = active + 1\n              s.task:wake(false)\n              break\n            end\n          end\n        end\n      end\n    end\n  end\n</code></pre><p></p> <ul> <li>\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bneovim\u200b\u63d2\u4ef6\u200b\u8f6c\u6362\u200bunicode\u200b\u5b57\u7b26\u200b\u5230\u200b\u4e2d\u6587\u200b\u663e\u793a\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>C++\u200b\u96f6\u200b\u62f7\u8d1d\u200b\u53cd\u200b\u5e8f\u5217\u5316\u200b\u5e93\u200bcista</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/%E5%87%BD%E6%95%B0hookld_preload%E5%AE%A1%E8%AE%A1%E6%B5%81%E5%8A%AB%E6%8C%81ld_audit%E5%8F%8A%E5%87%BD%E6%95%B0%E6%8F%92%E6%A1%A9/","title":"\u51fd\u6570\u200bHook\uff08LD_PRELOAD\uff09\u3001\u200b\u5ba1\u8ba1\u200b\u6d41\u200b\u52ab\u6301\u200b\uff08LD_AUDIT\uff09\u200b\u53ca\u200b\u51fd\u6570\u200b\u63d2\u6869","text":"<p>Linux\u200b\u4ece\u200b\u7b26\u53f7\u200b\u52ab\u6301\u200b\u5230\u200b\u8fd0\u884c\u200b\u65f6\u200b\u8ffd\u8e2a\u200b\uff1a\u200b\u51fd\u6570\u200bHook\uff08LD_PRELOAD\uff09\u3001\u200b\u5ba1\u8ba1\u200b\u6d41\u200b\u52ab\u6301\u200b\uff08LD_AUDIT\uff09\u200b\u53ca\u200b\u51fd\u6570\u200b\u63d2\u6869\u200b\u3002</p>"},{"location":"blog/%E5%87%BD%E6%95%B0hookld_preload%E5%AE%A1%E8%AE%A1%E6%B5%81%E5%8A%AB%E6%8C%81ld_audit%E5%8F%8A%E5%87%BD%E6%95%B0%E6%8F%92%E6%A1%A9/#ldprload\u65b9\u5f0f\u8fdb\u884chook","title":"LDPRLOAD\u200b\u65b9\u5f0f\u200b\u8fdb\u884c\u200bHook","text":""},{"location":"blog/%E5%87%BD%E6%95%B0hookld_preload%E5%AE%A1%E8%AE%A1%E6%B5%81%E5%8A%AB%E6%8C%81ld_audit%E5%8F%8A%E5%87%BD%E6%95%B0%E6%8F%92%E6%A1%A9/#ldprload\u65b9\u5f0f\u8fdb\u884chook_1","title":"LDPRLOAD\u200b\u65b9\u5f0f\u200b\u8fdb\u884c\u200bHook","text":"<p>LD_PRELOAD\u200b\u5141\u8bb8\u200b\u5728\u200b\u7a0b\u5e8f\u8fd0\u884c\u200b\u65f6\u200b\u4f18\u5148\u200b\u52a0\u8f7d\u200b\u6307\u5b9a\u200b\u7684\u200b\u52a8\u6001\u94fe\u63a5\u5e93\u200b(.so\u200b\u6587\u4ef6\u200b)\uff0c\u200b\u8986\u76d6\u200b\u9ed8\u8ba4\u200b\u7684\u200b\u5e93\u51fd\u6570\u200b\u5b9e\u73b0\u200b\u3002\u200b\u52a8\u6001\u200b\u94fe\u63a5\u200b\u5668\u4f1a\u200b\u4f18\u5148\u200b\u68c0\u67e5\u200bLD_PRELOAD\u200b\u6307\u5b9a\u200b\u7684\u200b\u5e93\u200b\uff0c\u200b\u82e5\u200b\u5176\u4e2d\u200b\u5b58\u5728\u200b\u4e0e\u200b\u7a0b\u5e8f\u200b\u8c03\u7528\u200b\u7684\u200b\u540c\u540d\u200b\u51fd\u6570\u200b\uff0c\u200b\u5219\u200b\u4f7f\u7528\u200b\u8be5\u5e93\u200b\u4e2d\u200b\u7684\u200b\u5b9e\u73b0\u200b\u800c\u200b\u975e\u200b\u7cfb\u7edf\u200b\u9ed8\u8ba4\u200b\u7248\u672c\u200b\u3002\u200b\u51fd\u6570\u200b\u52ab\u6301\u200b\u4e0e\u200bHook\uff0c\u200b\u6bd4\u5982\u200b\u66ff\u6362\u200bmalloc\u200b\u7684\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u66ff\u6362\u200bso\u200b\u5e93\u4e2d\u200b\u7684\u200b\u51fd\u6570\u200b\uff0c\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200bLD_PRELOAD\u200b\u5b9e\u73b0\u200b\u3002</p> <p>\u200b\u4e3e\u4e2a\u200b\u76f8\u5173\u200b\u7684\u200b\u4f7f\u7528\u200b\u4f8b\u5b50\u200b\uff1a + jemalloc\u200b\u7684\u200b\u4f7f\u7528\u200b</p> <p>\u200b\u5728\u200bjemalloc\u200b\u7684\u200b\u4f7f\u7528\u200b\u4e2d\u200b, \u200b\u6709\u200b\u51e0\u79cd\u200b\u65b9\u6cd5\u200b\u53ef\u4ee5\u200b\u5c06\u200bjemalloc\u200b\u96c6\u6210\u200b\u5230\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e2d\u200b\u3002</p> <p>\u200b\u6700\u200b\u7b80\u5355\u200b\u7684\u200b\u5c31\u662f\u200b\uff0c\u200b\u4f7f\u7528\u200bLD_PRELOAD\u200b\u73af\u5883\u53d8\u91cf\u200b\u5728\u200b\u8fd0\u884c\u200b\u65f6\u200b\u5c06\u200bjemalloc\u200b\u6ce8\u5165\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u3002\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u53ea\u6709\u200b\u5f53\u200b\u60a8\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u6ca1\u6709\u200b\u9759\u6001\u200b\u94fe\u63a5\u200bmalloc\u200b\u5b9e\u73b0\u200b\u65f6\u200b\uff0c\u200b\u6b64\u200b\u65b9\u6cd5\u200b\u624d\u200b\u6709\u6548\u200b\u3002</p> <p></p>Bash<pre><code>LD_PRELOAD=`jemalloc-config --libdir`/libjemalloc.so.`jemalloc-config --revision` app\n</code></pre> \u200b\u9664\u4e86\u200b\u8fd9\u79cd\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u5c31\u662f\u200b\u7f16\u8bd1\u200b\u65f6\u200b\u52a8\u6001\u200b\u94fe\u63a5\u200b\u548c\u200b\u9759\u6001\u200b\u94fe\u63a5\u200bjemalloc\u200b\u5230\u200b\u4f60\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u3002 \u200b\u5728\u200b\u5f00\u53d1\u200b\u4e2d\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5229\u7528\u200b\u8fd9\u79cd\u200b\u65b9\u5f0f\u200b\u67e5\u627e\u200b\u5185\u5b58\u200b\u5d29\u6e83\u200b\u7684\u200bBug\u3001\u200b\u5185\u5b58\u200b\u5206\u914d\u60c5\u51b5\u200b\u5206\u6790\u200b\u3001Heap Profiler\u3001\u200b\u89e3\u51b3\u200b\u5185\u5b58\u200b\u6cc4\u9732\u200b\u7b49\u200b\u3002<p></p>"},{"location":"blog/%E5%87%BD%E6%95%B0hookld_preload%E5%AE%A1%E8%AE%A1%E6%B5%81%E5%8A%AB%E6%8C%81ld_audit%E5%8F%8A%E5%87%BD%E6%95%B0%E6%8F%92%E6%A1%A9/#rtld_next\u65b9\u5f0f\u8fdb\u884chook","title":"RTLD_NEXT\u200b\u65b9\u5f0f\u200b\u8fdb\u884c\u200bHook","text":"<p>\u200b\u9664\u4e86\u200bLD_PRELOAD\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u200cdlsym RTLD_NEXT\u200c\u200b\u8fdb\u884c\u200bHook\u3002</p> <p>\u200b\u5982\u679c\u200bdlsym\u200b\u6216\u200bdlvsym\u200b\u51fd\u6570\u200b\u7684\u200b\u7b2c\u4e00\u4e2a\u200b\u53c2\u6570\u200b\u7684\u200b\u503c\u200b\u88ab\u200b\u8bbe\u7f6e\u200b\u4e3a\u200bRTLD_NEXT\uff0c\u200b\u90a3\u4e48\u200b\u8be5\u200b\u51fd\u6570\u200b\u8fd4\u56de\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u5171\u4eab\u200b\u5bf9\u8c61\u200b\u4e2d\u200b\u540d\u4e3a\u200bNAME\u200b\u7684\u200b\u7b26\u53f7\u200b\u7684\u200b\u8fd0\u884c\u200b\u65f6\u200b\u5730\u5740\u200b\uff0c\u200b\u901a\u5e38\u200b\u7528\u4e8e\u200b\u5728\u200bHook\u200b\u4ee3\u7801\u200b\u4e2d\u200b\u8c03\u7528\u200b\u539f\u59cb\u200b\u51fd\u6570\u200b\u3002\u200b\u901a\u8fc7\u200b\u8fd9\u79cd\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u81ea\u5b9a\u4e49\u200bmalloc\u200b\u51fd\u6570\u200b\uff0c\u200b\u901a\u8fc7\u200bRTLD_NEXT\u200b\u62ff\u5230\u200b\u539f\u59cb\u200bmalloc\u200b\u7684\u200b\u6307\u9488\u200b\uff0c\u200b\u4ece\u800c\u200b\u53ef\u4ee5\u200b\u5728\u200b\u81ea\u5b9a\u4e49\u200bmalloc\u200b\u4e2d\u200b\u8c03\u7528\u200b\u539f\u59cb\u200bmalloc\u200b\u51fd\u6570\u200b\u3002\u200b\u8fbe\u5230\u200bHook\u200b\u7684\u200b\u76ee\u7684\u200b\u3002</p> <p>\u200b\u8fd0\u884c\u200b\u65f6\u200b\u7b26\u53f7\u200b\u89e3\u6790\u200b\u51fd\u6570\u200b\uff0c\u200b\u7528\u4e8e\u200b\u5728\u200b\u5df2\u200b\u52a0\u8f7d\u200b\u7684\u200b\u5e93\u94fe\u200b\u4e2d\u200b\u67e5\u627e\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u7b26\u5408\u6761\u4ef6\u200b\u7684\u200b\u7b26\u53f7\u200b\u5b9e\u73b0\u200b\u3002</p> <p>\u200b\u4e3e\u4e2a\u200b\u76f8\u5173\u200b\u7684\u200b\u4f7f\u7528\u200b\u4f8b\u5b50\u200b\uff1a + \u200b\u534f\u7a0b\u200b\u7f51\u7edc\u200b\u5e93\u4e2d\u200bhook</p> <p>\u200b\u57fa\u4e8e\u200b\u534f\u7a0b\u200b\u548c\u200b\u4e8b\u4ef6\u200b\u5faa\u73af\u200b\u7684\u200bc++\u200b\u7f51\u7edc\u200b\u5e93\u4e2d\u200b\uff0c\u200b\u901a\u8fc7\u200bdlsym RTLD_NEXT\u200b\u5b9e\u73b0\u200bhook\u3002\u200b\u5305\u62ec\u200b\u4e86\u200bhook read\u3001recv\u3001send\u3001sleep\u200b\u7b49\u200b\u51fd\u6570\u200b\u3002</p> C++<pre><code>#define DLSYM(name) \\\n        name ## _f = (name ## _t)::dlsym(RTLD_NEXT, #name);\n</code></pre> C++<pre><code>unsigned int sleep(unsigned int seconds) {\n    melon::Processer* processer = melon::Processer::GetProcesserOfThisThread();\n    if (!melon::isHookEnabled()) {\n        // \u200b\u4e0d\u200bhook\u200b\u65f6\u200b\u76f4\u63a5\u200b\u8c03\u7528\u200b\u7cfb\u7edf\u200b\u51fd\u6570\u200b\uff0csleep_f = dlsym(RTLD_NEXT, \"sleep\");\n        return sleep_f(seconds);\n    }\n\n    // hook\u200b\u65f6\u200b\uff0c\u200b\u5c06\u200b\u5f53\u524d\u200b\u534f\u7a0b\u200b\u6302\u200b\u8d77\u200b\uff0c\u200b\u7b49\u5f85\u200bseconds\u200b\u79d2\u200b\u540e\u200b\u7ee7\u7eed\u6267\u884c\u200b\n    melon::Scheduler* scheduler = processer-&gt;getScheduler();\n    assert(scheduler != nullptr);\n    scheduler-&gt;runAt(melon::Timestamp::now() + seconds * melon::Timestamp::kMicrosecondsPerSecond, melon::Coroutine::GetCurrentCoroutine());\n    melon::Coroutine::SwapOut();\n    return 0;\n}\n</code></pre>"},{"location":"blog/%E5%87%BD%E6%95%B0hookld_preload%E5%AE%A1%E8%AE%A1%E6%B5%81%E5%8A%AB%E6%8C%81ld_audit%E5%8F%8A%E5%87%BD%E6%95%B0%E6%8F%92%E6%A1%A9/#ld_audit\u94fe\u63a5\u5668\u76d1\u542c\u673a\u5236","title":"LD_AUDIT\u200b\u94fe\u63a5\u200b\u5668\u200b\u76d1\u542c\u200b\u673a\u5236","text":"<p>\u200b\u901a\u8fc7\u200b\u524d\u9762\u200b\u7684\u200b\u4ecb\u7ecd\u200b\uff0c\u200b\u4f60\u200b\u5bf9\u200bLD_LIBRARY\u3001LD_PRELOAD\u200b\u80af\u5b9a\u200b\u5f88\u200b\u719f\u6089\u200b\u4e86\u200b\u3002LD_AUDIT\u200b\u662f\u200bLinux\u200b\u7cfb\u7edf\u200b\u4e2d\u200bglibc\u200b\u52a8\u6001\u200b\u94fe\u63a5\u200b\u5668\u200b(ld.so)\u200b\u7684\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u73af\u5883\u53d8\u91cf\u200b\uff0c\u200b\u7528\u4e8e\u200b\u6307\u5b9a\u200b\u5ba1\u8ba1\u200b\u5e93\u200b(audit library)\u200b\u7684\u200b\u8def\u5f84\u200b\uff0c\u200b\u4e3b\u8981\u200b\u7528\u4e8e\u200b\u76d1\u63a7\u200b\u548c\u200b\u62e6\u622a\u200b\u52a8\u6001\u94fe\u63a5\u5e93\u200b\u7684\u200b\u52a0\u8f7d\u200b\u8fc7\u7a0b\u200b</p> <p>\u200b\u901a\u8fc7\u200bLD_AUDIT\u200b\u94fe\u63a5\u200b\u5668\u200b\u76d1\u542c\u200b\u673a\u5236\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u64cd\u7eb5\u200bglibc\u200b\u7684\u200b\u52a8\u6001\u200b\u94fe\u63a5\u200b\u8fc7\u7a0b\u200b\uff0c\u200b\u6bd4\u5982\u200b\u53ef\u4ee5\u200b\u62e6\u622a\u200b\u52a8\u6001\u94fe\u63a5\u5e93\u200b\u7684\u200b\u52a0\u8f7d\u200b\u8fc7\u7a0b\u200b\uff0c\u200b\u6216\u8005\u200b\u62e6\u622a\u200b\u52a8\u6001\u94fe\u63a5\u5e93\u200b\u7684\u200b\u7b26\u53f7\u200b\u89e3\u6790\u200b\u8fc7\u7a0b\u200b\u3002\u200b\u5728\u200bxz-sshd\u200b\u6f0f\u6d1e\u200b\u4e2d\u200b\uff0c\u200b\u653b\u51fb\u8005\u200b\u901a\u8fc7\u200bLD_AUDIT\u200b\u52ab\u6301\u200bRSA\u200b\u89e3\u5bc6\u200b\u51fd\u6570\u8c03\u7528\u200b\u94fe\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u6743\u9650\u200b\u63d0\u5347\u200b\u3002</p> <p>\u200b\u770b\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b\u4f8b\u5b50\u200b\uff1a</p> <p></p>C++<pre><code>// audit_example.c\n#define _GNU_SOURCE\n#include &lt;link.h&gt;\n#include &lt;stdio.h&gt;\n\n// \u200b\u5fc5\u987b\u200b\u5b9e\u73b0\u200b\u7684\u200b\u7248\u672c\u200b\u68c0\u67e5\u200b\u51fd\u6570\u200b\nunsigned int la_version(unsigned int version) {\n    printf(\"\u200b\u5ba1\u8ba1\u200b\u5e93\u200b\u7248\u672c\u200b: %u (\u200b\u652f\u6301\u200b\u6700\u9ad8\u200b\u7248\u672c\u200b%u)\\n\", version, LAV_CURRENT);\n    return LAV_CURRENT; // \u200b\u8fd4\u56de\u200b\u652f\u6301\u200b\u7684\u200b\u7248\u672c\u53f7\u200b\n}\n\n// \u200b\u5e93\u200b\u52a0\u8f7d\u200b\u65f6\u200b\u89e6\u53d1\u200b\u7684\u200b\u56de\u8c03\u200b\nunsigned int la_objopen(struct link_map *map, Lmid_t lmid, uintptr_t *cookie) {\n    printf(\"\u200b\u68c0\u6d4b\u200b\u5230\u5e93\u200b\u52a0\u8f7d\u200b: %s (ID: %p)\\n\", map-&gt;l_name, (void*)*cookie);\n    return LA_FLG_BINDTO | LA_FLG_BINDFROM; // \u200b\u5141\u8bb8\u200b\u7b26\u53f7\u200b\u7ed1\u5b9a\u200b\u8ffd\u8e2a\u200b\n}\n\n// \u200b\u7b26\u53f7\u200b\u7ed1\u5b9a\u200b\u524d\u200b\u89e6\u53d1\u200b\u7684\u200b\u56de\u8c03\u200b\nuintptr_t la_symbind64(Elf64_Sym *sym, unsigned int ndx,\n                      uintptr_t *refcook, uintptr_t *defcook,\n                      unsigned int *flags, const char *symname) {\n    printf(\"\u200b\u7b26\u53f7\u200b\u7ed1\u5b9a\u200b: %s (\u200b\u5730\u5740\u200b: %#lx)\\n\", symname, sym-&gt;st_value);\n    return sym-&gt;st_value; // \u200b\u8fd4\u56de\u200b\u539f\u59cb\u200b\u5730\u5740\u200b\uff08\u200b\u53ef\u200b\u4fee\u6539\u200b\uff09\n}\n</code></pre> C++<pre><code>// test_program.c\n#include &lt;stdio.h&gt;\nint main() {\n    printf(\"hello\\n\");\n    return 0;\n}\n// \u200b\u7f16\u8bd1\u200b\u5ba1\u8ba1\u200b\u5e93\u200b\uff1agcc -shared -fPIC audit_example.c -o libaudit.so -ldl\n// \u200b\u7f16\u8bd1\u200b\u6d4b\u8bd5\u7a0b\u5e8f\u200b\uff1agcc test_program.c -o test -ldl\n// \u200b\u8fd0\u884c\u200b\u6d4b\u8bd5\u200b\uff1aLD_AUDIT=./libaudit.so ./test\n</code></pre> \u200b\u6253\u5370\u8f93\u51fa\u200b\uff1a Bash<pre><code>\u200b\u5ba1\u8ba1\u200b\u5e93\u200b\u7248\u672c\u200b: 2 (\u200b\u652f\u6301\u200b\u6700\u9ad8\u200b\u7248\u672c\u200b2)\n\u200b\u68c0\u6d4b\u200b\u5230\u5e93\u200b\u52a0\u8f7d\u200b:  (ID: 0xffff87a2c370)\n\u200b\u68c0\u6d4b\u200b\u5230\u5e93\u200b\u52a0\u8f7d\u200b: /lib/ld-linux-aarch64.so.1 (ID: 0xffff87a2bb88)\n\u200b\u68c0\u6d4b\u200b\u5230\u5e93\u200b\u52a0\u8f7d\u200b: linux-vdso.so.1 (ID: 0xffff87a2c950)\n\u200b\u68c0\u6d4b\u200b\u5230\u5e93\u200b\u52a0\u8f7d\u200b: /lib/aarch64-linux-gnu/libc.so.6 (ID: 0xffff87a1d880)\n\u200b\u7b26\u53f7\u200b\u7ed1\u5b9a\u200b: __libc_start_main (\u200b\u5730\u5740\u200b: 0xffff87597434)\n\u200b\u7b26\u53f7\u200b\u7ed1\u5b9a\u200b: __cxa_finalize (\u200b\u5730\u5740\u200b: 0xffff875ad220)\n\u200b\u7b26\u53f7\u200b\u7ed1\u5b9a\u200b: abort (\u200b\u5730\u5740\u200b: 0xffff8759704c)\n\u200b\u7b26\u53f7\u200b\u7ed1\u5b9a\u200b: puts (\u200b\u5730\u5740\u200b: 0xffff875dae70)\n\u200b\u7b26\u53f7\u200b\u7ed1\u5b9a\u200b: calloc (\u200b\u5730\u5740\u200b: 0xffff875fe460)\n\u200b\u7b26\u53f7\u200b\u7ed1\u5b9a\u200b: free (\u200b\u5730\u5740\u200b: 0xffff875fdbc4)\n\u200b\u7b26\u53f7\u200b\u7ed1\u5b9a\u200b: malloc (\u200b\u5730\u5740\u200b: 0xffff875fd630)\n\u200b\u7b26\u53f7\u200b\u7ed1\u5b9a\u200b: realloc (\u200b\u5730\u5740\u200b: 0xffff875fde20)\n\u200b\u7b26\u53f7\u200b\u7ed1\u5b9a\u200b: _dl_catch_exception (\u200b\u5730\u5740\u200b: 0xffff8769d290)\n\u200b\u7b26\u53f7\u200b\u7ed1\u5b9a\u200b: _dl_signal_exception (\u200b\u5730\u5740\u200b: 0xffff8769d1e4)\n\u200b\u7b26\u53f7\u200b\u7ed1\u5b9a\u200b: __tls_get_addr (\u200b\u5730\u5740\u200b: 0xffff87a00cd0)\n\u200b\u7b26\u53f7\u200b\u7ed1\u5b9a\u200b: _dl_signal_error (\u200b\u5730\u5740\u200b: 0xffff8769d234)\n\u200b\u7b26\u53f7\u200b\u7ed1\u5b9a\u200b: _dl_catch_error (\u200b\u5730\u5740\u200b: 0xffff8769d390)\n\u200b\u7b26\u53f7\u200b\u7ed1\u5b9a\u200b: __tunable_get_val (\u200b\u5730\u5740\u200b: 0xffff87a02d40)\n\u200b\u7b26\u53f7\u200b\u7ed1\u5b9a\u200b: __getauxval (\u200b\u5730\u5740\u200b: 0xffff87655560)\n\u200b\u7b26\u53f7\u200b\u7ed1\u5b9a\u200b: _dl_audit_preinit (\u200b\u5730\u5740\u200b: 0xffff87a03774)\n\u200b\u7b26\u53f7\u200b\u7ed1\u5b9a\u200b: malloc (\u200b\u5730\u5740\u200b: 0xffff875fd630)\n\u200b\u6d4b\u8bd5\u200b\u7a0b\u5e8f\u8fd0\u884c\u200b\u4e2d\u200b...\n</code></pre> \u200b\u4e0d\u540c\u4e8e\u200bLD_PRELOAD\uff08\u200b\u5f3a\u5236\u200b\u9884\u200b\u52a0\u8f7d\u200b\u5e93\u200b\uff09\uff0cLD_AUDIT\u200b\u66f4\u200b\u4fa7\u91cd\u200b\u94fe\u63a5\u200b\u8fc7\u7a0b\u200b\u7684\u200b\u200c\u200b\u4e8b\u4ef6\u200b\u76d1\u63a7\u200b\u200c\u200b\u800c\u200b\u975e\u200b\u76f4\u63a5\u200b\u66ff\u6362\u200b\u51fd\u6570\u200b\u3002\u200b\u5f53\u7136\u200b\uff0c\u200b\u4e5f\u200b\u662f\u200b\u53ef\u4ee5\u200b\u52ab\u6301\u200b\u66ff\u6362\u200b\u51fd\u6570\u200b\u5b9e\u73b0\u200b\u7684\u200b\u3002<p></p> <p>\u200b\u5e94\u7528\u200b\u4f8b\u5b50\u200b\uff0c\u200b\u5728\u200bxz-sshd\u200b\u6f0f\u6d1e\u200b\u53ef\u80fd\u200b\u7684\u200b\u539f\u7406\u200b\u89e3\u8bfb\u200b\u2014\u2014\u200b\u94fe\u63a5\u200b\u5668\u200b\u76d1\u542c\u200b\u673a\u5236\u200b\u4e2d\u200b\uff0c\u200b\u901a\u8fc7\u200bla_symbind64\u200b\u51fd\u6570\u200b\u52ab\u6301\u200bRSA_public_decrypt\uff0c \u200b\u66ff\u6362\u200b\u4e3a\u200b\u81ea\u5df1\u200b\u5b9e\u73b0\u200b\u7684\u200bhijack_RSA_public_decrypt\u200b\u51fd\u6570\u200b\u3002 </p>C++<pre><code>// Called when a symbol is bound\nuintptr_t la_symbind64(Elf64_Sym *sym, unsigned int ndx, uintptr_t *refcook,\n                     uintptr_t *defcook, unsigned int *flags, const char *symname) {\n    printf(\"Symbol bound: %s\\n\", symname);\n    // Perform any custom actions here\n    if (strcmp(symname, \"RSA_public_decrypt\") == 0) {\n        return (uintptr_t)hijack_RSA_public_decrypt;\n    }\n    return sym-&gt;st_value; // Return the symbol's actual address\n}\n</code></pre><p></p>"},{"location":"blog/%E5%87%BD%E6%95%B0hookld_preload%E5%AE%A1%E8%AE%A1%E6%B5%81%E5%8A%AB%E6%8C%81ld_audit%E5%8F%8A%E5%87%BD%E6%95%B0%E6%8F%92%E6%A1%A9/#gcc\u51fd\u6570\u63d2\u6869\u529f\u80fd-finstrument-functions","title":"GCC\u200b\u51fd\u6570\u200b\u63d2\u6869\u200b\u529f\u80fd\u200b\uff08-finstrument-functions\uff09","text":"<p>GCC\u200b\u7684\u200b-finstrument-functions\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5f3a\u5927\u200b\u7684\u200b\u7f16\u8bd1\u200b\u9009\u9879\u200b\uff0c\u200b\u7528\u4e8e\u200b\u5728\u200b\u51fd\u6570\u200b\u5165\u53e3\u200b\u548c\u200b\u51fa\u53e3\u200b\u81ea\u52a8\u200b\u63d2\u5165\u200b\u94a9\u5b50\u200b\u51fd\u6570\u200b\uff0c\u200b\u4e3b\u8981\u200b\u7528\u4e8e\u200b\u6027\u80fd\u200b\u5206\u6790\u200b\u548c\u200b\u8c03\u7528\u200b\u8ffd\u8e2a\u200b\u3002</p> <p>\u200b\u7f16\u8bd1\u200b\u65f6\u200b\u6dfb\u52a0\u200b\u8be5\u200b\u9009\u9879\u200b\u540e\u200b\uff0cGCC\u200b\u4f1a\u200b\u5728\u200b\u6bcf\u4e2a\u200b\u51fd\u6570\u200b\u7684\u200b\u5f00\u59cb\u200b\u63d2\u5165\u200b__cyg_profile_func_enter\uff0c\u200b\u5728\u200b\u51fd\u6570\u200b\u8fd4\u56de\u200b\u524d\u200b\u63d2\u5165\u200b__cyg_profile_func_exit\u3002\u200b\u8fd9\u200b\u4e24\u4e2a\u200b\u94a9\u5b50\u200b\u51fd\u6570\u200b\u7684\u200b\u53c2\u6570\u200b\u5305\u542b\u200b\u5f53\u524d\u200b\u51fd\u6570\u200b\u5730\u5740\u200b\u548c\u200b\u8c03\u7528\u8005\u200b\u5730\u5740\u200b\u3002\u200b\u901a\u8fc7\u200b\u8fd9\u4e2a\u200b\u529f\u80fd\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u7edf\u8ba1\u200b\u51fd\u6570\u200b\u8017\u65f6\u200b\uff0c\u200b\u5b9a\u4f4d\u200b\u6267\u884c\u200b\u5f02\u5e38\u200b\u7684\u200b\u51fd\u6570\u200b\uff0c\u200b\u5206\u6790\u200b\u6027\u80fd\u200b\u74f6\u9888\u200b\u7b49\u200b\uff0c\u200b\u5f53\u7136\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u7528\u200bebpf\u200b\u76f4\u63a5\u200b\u6293\u53d6\u200b\u3002\u200b\u8bb0\u5f55\u200b\u51fd\u6570\u8c03\u7528\u200b\u8def\u5f84\u200b\uff0c\u200b\u8f85\u52a9\u200b\u8c03\u8bd5\u200b\u590d\u6742\u200b\u8c03\u7528\u200b\u5173\u7cfb\u200b\u7b49\u200b\u3002</p> C++<pre><code>// instrument.c\n#define _GNU_SOURCE\n#include &lt;stdio.h&gt;\n#include &lt;dlfcn.h&gt;\n#include &lt;time.h&gt;\n\n// \u200b\u5fc5\u987b\u200b\u7981\u6b62\u200b\u94a9\u5b50\u200b\u51fd\u6570\u200b\u81ea\u8eab\u200b\u88ab\u200b\u63d2\u200b\u6869\u200b\nvoid __attribute__((no_instrument_function))\n__cyg_profile_func_enter(void *func, void *caller) {\n    Dl_info info;\n    dladdr(func, &amp;info);\n    printf(\"\u25b6 ENTER: %s [%p]\\n\", info.dli_sname ? info.dli_sname : \"unknown\", func);\n}\n\nvoid __attribute__((no_instrument_function)) \n__cyg_profile_func_exit(void *func, void *caller) {\n    Dl_info info;\n    dladdr(func, &amp;info);\n    printf(\"\u25c0 EXIT: %s [%p]\\n\", info.dli_sname ? info.dli_sname : \"unknown\", func);\n}\n</code></pre> C++<pre><code>// main.c\n#include &lt;stdio.h&gt;\n\nvoid test_func() {\n    sleep(1); // \u200b\u6a21\u62df\u200b\u8017\u65f6\u200b\u64cd\u4f5c\u200b\n}\n\nint main() {\n    printf(\"Start tracing...\\n\");\n    test_func();\n    printf(\"End tracing\\n\");\n    return 0;\n}\n// gcc -finstrument-functions main.c instrument.c -ldl -rdynamic -o demo\n// ./demo\n</code></pre> <p>\u200b\u8f93\u51fa\u200b\uff1a </p>Bash<pre><code>\u25b6 ENTER: main [0xaaaadcf80bf4]\nStart tracing...\n\u25b6 ENTER: test_func [0xaaaadcf80b94]\n\u25c0 EXIT: test_func [0xaaaadcf80b94]\nEnd tracing\n\u25c0 EXIT: main [0xaaaadcf80bf4]\n</code></pre><p></p> <p>\u200b\u4f7f\u7528\u200b__attribute__((no_instrument_function))\u200b\u907f\u514d\u200b\u94a9\u5b50\u200b\u51fd\u6570\u200b\u81ea\u8eab\u200b\u88ab\u200b\u63d2\u200b\u6869\u200b\u3002\u200b\u9700\u200b\u81ea\u5b9a\u4e49\u200b\u94a9\u5b50\u200b\u51fd\u6570\u200b\uff0c\u200b\u901a\u5e38\u200b\u7ed3\u5408\u200bdladdr\u200b\u89e3\u6790\u200b\u51fd\u6570\u200b\u540d\u200b\u548c\u200b\u6587\u4ef6\u540d\u200b\u3002</p> <p>\u200b\u901a\u8fc7\u200baddr2line\u200b\u5de5\u5177\u200b\u5c06\u200b\u5730\u5740\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u6e90\u4ee3\u7801\u200b\u884c\u53f7\u200b\uff0c\u200b\u7ed3\u5408\u200bperf\u200b\u7b49\u200b\u5de5\u5177\u200b\u5206\u6790\u200b\u6027\u80fd\u200b\u3002</p> <p>\u200b\u8fd9\u4e2a\u200b\u529f\u80fd\u200b\u5177\u4f53\u200b\u548b\u200b\u7528\u200b\u7684\u200b\u5462\u200b\uff1f\u200b\u4e3e\u200b\u4e24\u4e2a\u200b\u4f8b\u5b50\u200b\uff1a</p> <ul> <li>\u200b\u5f00\u6e90\u200b\u5de5\u5177\u200buftrace\u200b\u5c31\u200b\u4f7f\u7528\u200b\u5230\u200b\u4e86\u200b\u8fd9\u4e2a\u200b\u529f\u80fd\u200b\u83b7\u53d6\u6570\u636e\u200b, uftrace\u200b\u662f\u200b\u4e00\u6b3e\u200b\u7528\u4e8e\u200bC\u3001C++\u3001Rust\u200b\u548c\u200bPython\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u51fd\u6570\u8c03\u7528\u200b\u56fe\u200b\u8ffd\u8e2a\u200b\u5de5\u5177\u200b\u3002</li> </ul> <p>User space C/C++/Rust functions, by either dynamically patching functions using -P., or else selective NOP patching using code compiled with -pg, -finstrument-functions or -fpatchable-function-entry=N.</p> <ul> <li>\u200b\u4f7f\u7528\u200bGCC\u200b\u51fd\u6570\u200b\u63d2\u6869\u200b\u529f\u80fd\u200b\u627e\u5230\u200b\u8017\u65f6\u200b\u5f02\u5e38\u200b\u7684\u200b\u51fd\u6570\u200b</li> </ul> <p>\u200b\u8fd9\u200b\u7bc7\u6587\u7ae0\u200b\u901a\u8fc7\u200b\u51fd\u6570\u200b\u63d2\u6869\u200b\uff0c\u200b\u5728\u200b\u51fd\u6570\u200b\u5165\u53e3\u200b\u548c\u200b\u51fa\u53e3\u200b\u81ea\u52a8\u200b\u63d2\u5165\u200b\u94a9\u5b50\u200b\u51fd\u6570\u200b\uff0c\u200b\u7528\u4e8e\u200b\u7edf\u8ba1\u200b\u51fd\u6570\u200b\u8017\u65f6\u200b\u3002\u200b\u5728\u200bcyg_profile_func_enter\u200b\u4e2d\u200b\u8bb0\u5f55\u200b\u51fd\u6570\u200b\u7684\u200b\u5f00\u59cb\u200bticks\uff0c\u200b\u5728\u200bcyg_profile_func_exit\u200b\u4e2d\u200b\u8bb0\u5f55\u200b\u51fd\u6570\u200b\u7684\u200b\u7ed3\u675f\u200bticks\uff0c\u200b\u4e24\u8005\u200b\u76f8\u51cf\u200b\u4fbf\u200b\u5f97\u5230\u200b\u4e86\u200b\u51fd\u6570\u200b\u8fd0\u884c\u200b\u6d88\u8017\u200b\u7684\u200bticks\uff0c\u200b\u518d\u200b\u9664\u4ee5\u200bCPU\u200b\u9891\u7387\u200b\uff08g_cs_hz\uff09\u200b\u5f97\u5230\u200b\u8017\u65f6\u200b\u3002\u200b\u4f7f\u7528\u200bx86\u200b\u6307\u4ee4\u96c6\u200b\u67b6\u6784\u200b\u4e2d\u200b\u7684\u200bRDTSC\uff08Read Time Stamp Counter\uff09\u200b\u6307\u4ee4\u200b\u8bfb\u53d6\u200b\u5904\u7406\u5668\u200b\u7684\u200b\u65f6\u949f\u200b\u5468\u671f\u200b\u8ba1\u6570\u5668\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u8017\u65f6\u200b\u5927\u4e8e\u200b5ms\uff0c\u200b\u4fbf\u200b\u5c06\u200b\u51fd\u6570\u6307\u9488\u200b\u548c\u200b\u8017\u65f6\u200bpush\u200b\u5230\u200b\u4e00\u4e2a\u200b\u6808\u4e2d\u200b\uff0c\u200b\u8bb0\u5f55\u4e0b\u6765\u200b\uff0c\u200b\u540e\u7eed\u200b\u6253\u5370\u200b\u51fa\u6765\u200b\u3002</p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>C++\u200b\u6280\u6cd5\u200b\uff1a\u200b\u5982\u4f55\u200b\u4e3a\u200b\u4e00\u4e2a\u200b\u7c7b\u200b\u52a8\u6001\u200b\u9644\u52a0\u200b\u4efb\u610f\u200b\u7c7b\u578b\u200b\u6570\u636e\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/mpi%E6%98%AF%E4%BB%80%E4%B9%88%E6%9C%89%E5%93%AA%E4%BA%9B%E9%9B%86%E4%BD%93%E9%80%9A%E4%BF%A1%E6%93%8D%E4%BD%9C%E4%BB%A5%E5%8F%8A%E5%9C%A8tensorrt-llm%E4%B8%AD%E5%BA%94%E7%94%A8/","title":"MPI\u200b\u662f\u200b\u4ec0\u4e48\u200b\uff1f\u200b\u6709\u200b\u54ea\u4e9b\u200b\u96c6\u4f53\u200b\u901a\u4fe1\u200b\u64cd\u4f5c\u200b\u4ee5\u53ca\u200b\u5728\u200bTensorRT LLM\u200b\u4e2d\u200b\u5e94\u7528","text":""},{"location":"blog/mpi%E6%98%AF%E4%BB%80%E4%B9%88%E6%9C%89%E5%93%AA%E4%BA%9B%E9%9B%86%E4%BD%93%E9%80%9A%E4%BF%A1%E6%93%8D%E4%BD%9C%E4%BB%A5%E5%8F%8A%E5%9C%A8tensorrt-llm%E4%B8%AD%E5%BA%94%E7%94%A8/#mpi\u4ecb\u7ecd","title":"MPI\u200b\u4ecb\u7ecd","text":"<p>MPI\uff08Message Passing Interface\uff0c\u200b\u6d88\u606f\u4f20\u9012\u200b\u63a5\u53e3\u200b\uff09\u200b\u662f\u200b\u4e00\u79cd\u200b\u200c\u200b\u5e76\u884c\u8ba1\u7b97\u200b\u7684\u200b\u901a\u4fe1\u200b\u6807\u51c6\u200b\u200c\uff0c\u200b\u4e3b\u8981\u200b\u7528\u4e8e\u200b\u5728\u200b\u5206\u5e03\u5f0f\u200b\u5185\u5b58\u200b\u7cfb\u7edf\u200b\u4e2d\u200b\u5b9e\u73b0\u200b\u591a\u200b\u8fdb\u7a0b\u200b\u95f4\u200b\u7684\u200b\u6570\u636e\u4ea4\u6362\u200b\u548c\u200b\u534f\u540c\u200b\u8ba1\u7b97\u200b\u3002\u200b\u5b83\u200b\u662f\u200b\u9ad8\u6027\u80fd\u200b\u8ba1\u7b97\u200b\uff08HPC\uff09\u200b\u9886\u57df\u200b\u7684\u200b\u6838\u5fc3\u200b\u5de5\u5177\u200b\u4e4b\u4e00\u200b\uff0c\u200b\u5c24\u5176\u200b\u9002\u7528\u200b\u4e8e\u200b\u8d85\u7ea7\u8ba1\u7b97\u673a\u200b\u548c\u200b\u96c6\u7fa4\u200b\u73af\u5883\u200b\u3002MPI\u200b\u662f\u200b\u72ec\u7acb\u200b\u4e8e\u200b\u786c\u4ef6\u200b\u548c\u200b\u7f16\u7a0b\u8bed\u8a00\u200b\u7684\u200b\u89c4\u8303\u200b\uff0c\u200b\u4e3b\u6d41\u200b\u5b9e\u73b0\u200b\uff08\u200b\u5982\u200bOpenMPI\u3001MPICH\uff09\u200b\u652f\u6301\u200bC/C++\u3001Fortran\u200b\u7b49\u200b\u8bed\u8a00\u200b\uff0c\u200b\u53ef\u200b\u5728\u200bLinux\u3001Windows\u200b\u7b49\u200b\u7cfb\u7edf\u200b\u8fd0\u884c\u200b\u3002</p> <p>\u200b\u5b66\u4e60\u200b\u5e76\u884c\u200b\u7f16\u7a0b\u200b\uff08parallel programming\uff09\uff0c\u200b\u6216\u8005\u8bf4\u200b\u5206\u5e03\u5f0f\u200b\u7f16\u7a0b\u200b\u3001\u200b\u5e76\u884c\u200b\u7f16\u7a0b\u200b\uff0c\u200b\u5c31\u200b\u9700\u8981\u200b\u5b66\u4e60\u200bMPI\uff0c\u200b\u6bd4\u5982\u200b\u628a\u200b\u70b9\u5bf9\u70b9\u200b\u901a\u4fe1\u200b\u548c\u200b\u96c6\u4f53\u6027\u200b\u901a\u4fe1\u200b\u8fd9\u200b\u4e24\u4e2a\u200b\u673a\u5236\u200b\u5408\u5728\u4e00\u8d77\u200b\u5df2\u7ecf\u200b\u53ef\u4ee5\u200b\u521b\u9020\u200b\u5341\u5206\u590d\u6742\u200b\u7684\u200b\u5e76\u53d1\u7a0b\u5e8f\u200b\u4e86\u200b\u3002\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200bmpitutorial\u200b\u5b66\u4e60\u200b\uff0c\u200b\u6559\u7a0b\u200b\u91c7\u7528\u200b\u4e86\u200bMPICH2\u200b\u5b9e\u73b0\u200b\u76f8\u5173\u200b\u4ee3\u7801\u200b\u3002</p>"},{"location":"blog/mpi%E6%98%AF%E4%BB%80%E4%B9%88%E6%9C%89%E5%93%AA%E4%BA%9B%E9%9B%86%E4%BD%93%E9%80%9A%E4%BF%A1%E6%93%8D%E4%BD%9C%E4%BB%A5%E5%8F%8A%E5%9C%A8tensorrt-llm%E4%B8%AD%E5%BA%94%E7%94%A8/#\u96c6\u4f53\u6027\u901a\u4fe1\u65b9\u5f0f","title":"\u96c6\u4f53\u6027\u200b\u901a\u4fe1\u200b\u65b9\u5f0f","text":"<p>\u200b\u70b9\u5bf9\u70b9\u200b\u901a\u4fe1\u200b\u65b9\u5f0f\u200b\u6bd4\u8f83\u200b\u597d\u200b\u7406\u89e3\u200b\uff0c\u200b\u6bd4\u5982\u200b\u91c7\u7528\u200b<code>MPI_Send</code>\u200b\u548c\u200b<code>MPI_Recv</code>\u200b\u51fd\u6570\u200b\uff0c\u200b\u53d1\u9001\u200b\u65b9\u200b\u53d1\u9001\u6570\u636e\u200b\uff0c\u200b\u63a5\u6536\u200b\u65b9\u200b\u63a5\u6536\u6570\u636e\u200b\u3002</p>"},{"location":"blog/mpi%E6%98%AF%E4%BB%80%E4%B9%88%E6%9C%89%E5%93%AA%E4%BA%9B%E9%9B%86%E4%BD%93%E9%80%9A%E4%BF%A1%E6%93%8D%E4%BD%9C%E4%BB%A5%E5%8F%8A%E5%9C%A8tensorrt-llm%E4%B8%AD%E5%BA%94%E7%94%A8/#\u5e7f\u64ad\u901a\u4fe1mpi_bcast","title":"\u5e7f\u64ad\u200b\u901a\u4fe1\u200b\uff1aMPI_Bcast","text":""},{"location":"blog/mpi%E6%98%AF%E4%BB%80%E4%B9%88%E6%9C%89%E5%93%AA%E4%BA%9B%E9%9B%86%E4%BD%93%E9%80%9A%E4%BF%A1%E6%93%8D%E4%BD%9C%E4%BB%A5%E5%8F%8A%E5%9C%A8tensorrt-llm%E4%B8%AD%E5%BA%94%E7%94%A8/#mpi_scatter","title":"MPI_Scatter","text":"<p>MPI_Bcast \u200b\u7ed9\u200b\u6bcf\u4e2a\u200b\u8fdb\u7a0b\u200b\u53d1\u9001\u200b\u7684\u200b\u662f\u200b\u540c\u6837\u200b\u7684\u200b\u6570\u636e\u200b\uff0c\u200b\u7136\u800c\u200b MPI_Scatter \u200b\u7ed9\u200b\u6bcf\u4e2a\u200b\u8fdb\u7a0b\u200b\u53d1\u9001\u200b\u7684\u200b\u662f\u200b\u4e00\u4e2a\u200b\u6570\u7ec4\u200b\u7684\u200b\u4e00\u90e8\u5206\u200b\u6570\u636e\u200b\u3002</p>"},{"location":"blog/mpi%E6%98%AF%E4%BB%80%E4%B9%88%E6%9C%89%E5%93%AA%E4%BA%9B%E9%9B%86%E4%BD%93%E9%80%9A%E4%BF%A1%E6%93%8D%E4%BD%9C%E4%BB%A5%E5%8F%8A%E5%9C%A8tensorrt-llm%E4%B8%AD%E5%BA%94%E7%94%A8/#mpi_gather","title":"MPI_Gather","text":"<p>MPI_Gather \u200b\u8ddf\u200b MPI_Scatter \u200b\u662f\u200b\u76f8\u53cd\u200b\u7684\u200b\u3002MPI_Gather \u200b\u4ece\u200b\u597d\u591a\u200b\u8fdb\u7a0b\u200b\u91cc\u9762\u200b\u6536\u96c6\u200b\u6570\u636e\u200b\u5230\u200b\u4e00\u4e2a\u200b\u8fdb\u7a0b\u200b\u4e0a\u9762\u200b\u800c\u200b\u4e0d\u662f\u200b\u4ece\u200b\u4e00\u4e2a\u200b\u8fdb\u7a0b\u200b\u5206\u53d1\u200b\u6570\u636e\u200b\u5230\u200b\u591a\u4e2a\u200b\u8fdb\u7a0b\u200b\u3002</p>"},{"location":"blog/mpi%E6%98%AF%E4%BB%80%E4%B9%88%E6%9C%89%E5%93%AA%E4%BA%9B%E9%9B%86%E4%BD%93%E9%80%9A%E4%BF%A1%E6%93%8D%E4%BD%9C%E4%BB%A5%E5%8F%8A%E5%9C%A8tensorrt-llm%E4%B8%AD%E5%BA%94%E7%94%A8/#mpi_allgather","title":"MPI_Allgather","text":"<p>MPI_Allgather\u200b\u4f1a\u200b\u6536\u96c6\u200b\u6240\u6709\u200b\u6570\u636e\u200b\u5230\u200b\u6240\u6709\u200b\u8fdb\u7a0b\u200b\u4e0a\u200b\u3002</p>"},{"location":"blog/mpi%E6%98%AF%E4%BB%80%E4%B9%88%E6%9C%89%E5%93%AA%E4%BA%9B%E9%9B%86%E4%BD%93%E9%80%9A%E4%BF%A1%E6%93%8D%E4%BD%9C%E4%BB%A5%E5%8F%8A%E5%9C%A8tensorrt-llm%E4%B8%AD%E5%BA%94%E7%94%A8/#\u5f52\u7ea6-mpi_reduce","title":"\u5f52\u7ea6\u200b: MPI_Reduce","text":"<p>\u200b\u4e0e\u200b MPI_Gather \u200b\u7c7b\u4f3c\u200b\uff0cMPI_Reduce \u200b\u5728\u200b\u6bcf\u4e2a\u200b\u8fdb\u7a0b\u200b\u4e0a\u200b\u83b7\u53d6\u200b\u4e00\u4e2a\u200b\u8f93\u5165\u200b\u5143\u7d20\u200b\u6570\u7ec4\u200b\uff0c\u200b\u5e76\u200b\u5c06\u200b\u8f93\u51fa\u200b\u5143\u7d20\u200b\u6570\u7ec4\u200b\u8fd4\u56de\u200b\u7ed9\u200b\u6839\u200b\u8fdb\u7a0b\u200b\u3002 </p> <p>MPI \u200b\u5b9a\u4e49\u200b\u7684\u200b\u5f52\u7ea6\u200b\u64cd\u4f5c\u200b\u5305\u62ec\u200b\uff1a</p> <p>MPI_MAX - \u200b\u8fd4\u56de\u200b\u6700\u5927\u200b\u5143\u7d20\u200b\u3002 MPI_MIN - \u200b\u8fd4\u56de\u200b\u6700\u5c0f\u200b\u5143\u7d20\u200b\u3002 MPI_SUM - \u200b\u5bf9\u200b\u5143\u7d20\u200b\u6c42\u548c\u200b\u3002 MPI_PROD - \u200b\u5c06\u200b\u6240\u6709\u200b\u5143\u7d20\u200b\u76f8\u4e58\u200b\u3002 MPI_LAND - \u200b\u5bf9\u200b\u5143\u7d20\u200b\u6267\u884c\u200b\u903b\u8f91\u200b\u4e0e\u200b\u8fd0\u7b97\u200b\u3002 MPI_LOR - \u200b\u5bf9\u200b\u5143\u7d20\u200b\u6267\u884c\u200b\u903b\u8f91\u200b\u6216\u200b\u8fd0\u7b97\u200b\u3002 MPI_BAND - \u200b\u5bf9\u200b\u5143\u7d20\u200b\u7684\u200b\u5404\u4e2a\u200b\u4f4d\u200b\u6309\u4f4d\u200b\u4e0e\u200b\u6267\u884c\u200b\u3002 MPI_BOR - \u200b\u5bf9\u200b\u5143\u7d20\u200b\u7684\u200b\u4f4d\u200b\u6267\u884c\u200b\u6309\u4f4d\u200b\u6216\u200b\u8fd0\u7b97\u200b\u3002 MPI_MAXLOC - \u200b\u8fd4\u56de\u200b\u6700\u5927\u503c\u200b\u548c\u200b\u6240\u5728\u200b\u7684\u200b\u8fdb\u7a0b\u200b\u7684\u200b\u79e9\u200b\u3002 MPI_MINLOC - \u200b\u8fd4\u56de\u200b\u6700\u5c0f\u503c\u200b\u548c\u200b\u6240\u5728\u200b\u7684\u200b\u8fdb\u7a0b\u200b\u7684\u200b\u79e9\u200b\u3002</p> <p></p> <p></p>"},{"location":"blog/mpi%E6%98%AF%E4%BB%80%E4%B9%88%E6%9C%89%E5%93%AA%E4%BA%9B%E9%9B%86%E4%BD%93%E9%80%9A%E4%BF%A1%E6%93%8D%E4%BD%9C%E4%BB%A5%E5%8F%8A%E5%9C%A8tensorrt-llm%E4%B8%AD%E5%BA%94%E7%94%A8/#mpi_allreduce","title":"MPI_Allreduce","text":"<p>\u200b\u8bb8\u591a\u200b\u5e76\u884c\u7a0b\u5e8f\u200b\u4e2d\u200b\uff0c\u200b\u9700\u8981\u200b\u5728\u200b\u6240\u6709\u200b\u8fdb\u7a0b\u200b\u800c\u200b\u4e0d\u662f\u200b\u4ec5\u4ec5\u200b\u5728\u200b\u6839\u200b\u8fdb\u7a0b\u200b\u4e2d\u200b\u8bbf\u95ee\u200b\u5f52\u7ea6\u200b\u7684\u200b\u7ed3\u679c\u200b\u3002 \u200b\u4ee5\u200b\u4e0e\u200b MPI_Gather \u200b\u76f8\u4f3c\u200b\u7684\u200b\u8865\u5145\u200b\u65b9\u5f0f\u200b\uff0cMPI_Allreduce \u200b\u5c06\u200b\u5f52\u7ea6\u200b\u503c\u200b\u5e76\u200b\u5c06\u200b\u7ed3\u679c\u200b\u5206\u914d\u200b\u7ed9\u200b\u6240\u6709\u200b\u8fdb\u7a0b\u200b\u3002</p> <p></p>"},{"location":"blog/mpi%E6%98%AF%E4%BB%80%E4%B9%88%E6%9C%89%E5%93%AA%E4%BA%9B%E9%9B%86%E4%BD%93%E9%80%9A%E4%BF%A1%E6%93%8D%E4%BD%9C%E4%BB%A5%E5%8F%8A%E5%9C%A8tensorrt-llm%E4%B8%AD%E5%BA%94%E7%94%A8/#mpi\u5728\u6a21\u578b\u63a8\u7406\u90e8\u7f72\u4e2d\u7684\u5e94\u7528","title":"MPI\u200b\u5728\u200b\u6a21\u578b\u200b\u63a8\u7406\u200b\u90e8\u7f72\u200b\u4e2d\u200b\u7684\u200b\u5e94\u7528","text":"<p>\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5728\u200bTRT-LLM\u200b\u6846\u67b6\u200b\u4e2d\u591a\u200b\u5b9e\u4f8b\u200b\u652f\u6301\u200b\uff0cTensorRT-LLM \u200b\u540e\u200b\u7aef\u200b\u4f9d\u8d56\u200b MPI \u200b\u5728\u200b\u591a\u4e2a\u200b GPU \u200b\u548c\u200b\u8282\u70b9\u200b\u4e4b\u95f4\u200b\u534f\u8c03\u200b\u6a21\u578b\u200b\u7684\u200b\u6267\u884c\u200b\u3002\u200b\u76ee\u524d\u200b\uff0c\u200b\u6709\u200b\u4e24\u79cd\u200b\u4e0d\u540c\u200b\u7684\u200b\u6a21\u5f0f\u200b\u652f\u6301\u200b\u5728\u200b\u591a\u4e2a\u200b GPU \u200b\u4e0a\u200b\u8fd0\u884c\u200b\u6a21\u578b\u200b\uff0c\u200b\u9886\u5bfc\u8005\u200b\u6a21\u5f0f\u200b\u548c\u200b\u534f\u8c03\u200b\u5668\u200b\u6a21\u5f0f\u200b\u3002</p>"},{"location":"blog/mpi%E6%98%AF%E4%BB%80%E4%B9%88%E6%9C%89%E5%93%AA%E4%BA%9B%E9%9B%86%E4%BD%93%E9%80%9A%E4%BF%A1%E6%93%8D%E4%BD%9C%E4%BB%A5%E5%8F%8A%E5%9C%A8tensorrt-llm%E4%B8%AD%E5%BA%94%E7%94%A8/#leader-mode","title":"Leader Mode","text":"<p>\u200b\u5728\u200b\u9886\u5bfc\u200b\u6a21\u5f0f\u200b\u4e0b\u200b\uff0cTensorRT-LLM \u200b\u540e\u7aef\u200b\u4e3a\u200b\u6bcf\u4e2a\u200b GPU \u200b\u751f\u6210\u200b\u4e00\u4e2a\u200b Triton Server \u200b\u8fdb\u7a0b\u200b\u3002\u200b\u79e9\u4e3a\u200b 0 \u200b\u7684\u200b\u8fdb\u7a0b\u200b\u662f\u200b\u9886\u5bfc\u200b\u8fdb\u7a0b\u200b\u3002\u200b\u5176\u4ed6\u200b Triton Server \u200b\u8fdb\u7a0b\u200b\u4e0d\u4f1a\u200b\u4ece\u200bTRITONBACKEND_ModelInstanceInitialize\u200b\u8c03\u7528\u200b\u4e2d\u200b\u8fd4\u56de\u200b\uff0c\u200b\u4ee5\u200b\u907f\u514d\u200b\u7aef\u53e3\u200b\u51b2\u7a81\u200b\u5e76\u200b\u5141\u8bb8\u200b\u5176\u4ed6\u200b\u8fdb\u7a0b\u200b\u63a5\u6536\u200b\u8bf7\u6c42\u200b\u3002</p>"},{"location":"blog/mpi%E6%98%AF%E4%BB%80%E4%B9%88%E6%9C%89%E5%93%AA%E4%BA%9B%E9%9B%86%E4%BD%93%E9%80%9A%E4%BF%A1%E6%93%8D%E4%BD%9C%E4%BB%A5%E5%8F%8A%E5%9C%A8tensorrt-llm%E4%B8%AD%E5%BA%94%E7%94%A8/#orchestrator-mode","title":"Orchestrator Mode","text":"<p>\u200b\u5728\u200b\u7f16\u6392\u200b\u5668\u200b\u6a21\u5f0f\u200b\u4e0b\u200b\uff0cTensorRT-LLM \u200b\u540e\u7aef\u4f1a\u200b\u751f\u6210\u200b\u4e00\u4e2a\u200b\u5355\u4e00\u200b\u7684\u200b Triton Server \u200b\u8fdb\u7a0b\u200b\uff0c\u200b\u8be5\u200b\u8fdb\u7a0b\u200b\u5145\u5f53\u200b\u7f16\u6392\u200b\u5668\u200b\uff0c\u200b\u5e76\u200b\u4e3a\u200b\u6bcf\u4e2a\u200b\u6a21\u578b\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u6bcf\u4e2a\u200b GPU \u200b\u751f\u6210\u200b\u4e00\u4e2a\u200b Triton Server \u200b\u8fdb\u7a0b\u200b\u3002\u200b\u6b64\u200b\u6a21\u5f0f\u200b\u4e3b\u8981\u200b\u5728\u200b\u4f7f\u7528\u200b TensorRT-LLM \u200b\u540e\u7aef\u200b\u4e3a\u200b\u591a\u4e2a\u200b\u6a21\u578b\u200b\u63d0\u4f9b\u200b\u670d\u52a1\u200b\u65f6\u200b\u4f7f\u7528\u200b\u3002\u200b\u5728\u200b\u6b64\u200b\u6a21\u5f0f\u200b\u4e0b\u200b\uff0cMPI\u200b\u7684\u200bworld size\u200b\u5fc5\u987b\u200b\u4e3a\u200b 1\uff0c\u200b\u56e0\u4e3a\u200b TRT-LLM \u200b\u540e\u7aef\u4f1a\u200b\u6839\u636e\u200b\u9700\u8981\u200b\u81ea\u52a8\u200b\u521b\u5efa\u200b\u65b0\u200b\u7684\u200b\u5de5\u4f5c\u200b\u8fdb\u7a0b\u200b\u3002</p> <p>\u200b\u6b64\u200b\u6a21\u5f0f\u200b\u4f7f\u7528\u200b\u4e86\u200bMPI_Comm_spawn\uff0c\u200b\u76ee\u524d\u200b\u6b64\u200b\u6a21\u5f0f\u200b\u4ec5\u200b\u9002\u7528\u200b\u4e8e\u5355\u200b\u8282\u70b9\u200b\u90e8\u7f72\u200b\u3002</p>"},{"location":"blog/mpi%E6%98%AF%E4%BB%80%E4%B9%88%E6%9C%89%E5%93%AA%E4%BA%9B%E9%9B%86%E4%BD%93%E9%80%9A%E4%BF%A1%E6%93%8D%E4%BD%9C%E4%BB%A5%E5%8F%8A%E5%9C%A8tensorrt-llm%E4%B8%AD%E5%BA%94%E7%94%A8/#\u90e8\u7f72\u533a\u522b","title":"\u90e8\u7f72\u200b\u533a\u522b\u200b\ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350","text":"<p>\u200b\u4e0e\u200b\u5176\u4ed6\u200b Triton \u200b\u540e\u200b\u7aef\u200b\u6a21\u578b\u200b\u4e0d\u540c\u200b\uff0cTensorRT-LLM \u200b\u540e\u7aef\u200b\u4e0d\u200b\u652f\u6301\u200b\u4f7f\u7528\u200binstance_group\u200b\u8bbe\u7f6e\u200b\u6765\u200b\u786e\u5b9a\u200b\u6a21\u578b\u200b\u5b9e\u4f8b\u200b\u5728\u200b\u4e0d\u540c\u200b GPU \u200b\u4e0a\u200b\u7684\u200b\u653e\u7f6e\u200b\u3002\u200b\u9700\u8981\u200b\u4f7f\u7528\u200b\u9886\u5bfc\u8005\u200b\u6a21\u5f0f\u200b\u548c\u200b\u7f16\u6392\u200b\u5668\u200b\u6a21\u5f0f\u200b\u5728\u200b\u4e0d\u540c\u200b GPU \u200b\u4e0a\u200b\u8fd0\u884c\u200b LLaMa \u200b\u6a21\u578b\u200b\u7684\u200b\u591a\u4e2a\u200b\u5b9e\u4f8b\u200b\u3002</p> <p>\u200b\u5047\u8bbe\u200b\u6709\u200b\u56db\u4e2a\u200b GPU\uff0cCUDA \u200b\u8bbe\u5907\u200b ID \u200b\u5206\u522b\u200b\u4e3a\u200b 0\u30011\u30012 \u200b\u548c\u200b 3\u3002\u200b\u542f\u52a8\u200b\u4e24\u4e2a\u200b LLaMa2-7b \u200b\u6a21\u578b\u200b\u7684\u200b\u5b9e\u4f8b\u200b\uff0c\u200b\u5f20\u91cf\u200b\u5e76\u884c\u5ea6\u200b\u4e3a\u200b 2\u3002\u200b\u7b2c\u4e00\u4e2a\u200b\u5b9e\u4f8b\u200b\u5728\u200b GPU 0 \u200b\u548c\u200b 1 \u200b\u4e0a\u200b\u8fd0\u884c\u200b\uff0c\u200b\u7b2c\u4e8c\u4e2a\u200b\u5b9e\u4f8b\u200b\u5728\u200b GPU 2 \u200b\u548c\u200b 3 \u200b\u4e0a\u200b\u8fd0\u884c\u200b\u3002</p> <ul> <li>Leader Mode</li> </ul> <p>\u200b\u5bf9\u4e8e\u200b\u9886\u5bfc\u200b\u6a21\u5f0f\u200b\uff0c\u200b\u5c06\u200b\u542f\u52a8\u200b\u4e24\u4e2a\u200b\u5355\u72ec\u200b\u7684\u200bmpirun\u200b\u547d\u4ee4\u200b\u6765\u200b\u542f\u52a8\u200b\u4e24\u4e2a\u200b\u5355\u72ec\u200b\u7684\u200b Triton \u200b\u670d\u52a1\u5668\u200b\uff0c\u200b\u6bcf\u4e2a\u200b GPU \u200b\u5bf9\u5e94\u200b\u4e00\u4e2a\u200b\u670d\u52a1\u5668\u200b\uff08\u200b\u603b\u5171\u200b\u56db\u4e2a\u200b Triton \u200b\u670d\u52a1\u5668\u200b\u5b9e\u4f8b\u200b\uff09\u3002\u200b\u8fd8\u200b\u9700\u8981\u200b\u5728\u200b\u5b83\u4eec\u200b\u524d\u9762\u200b\u4f7f\u7528\u200b\u53cd\u5411\u200b\u4ee3\u7406\u200b\uff08Nginx\uff09\u200b\u6765\u200b\u5728\u200b\u670d\u52a1\u5668\u4e4b\u95f4\u200b\u5e73\u8861\u200b\u8bf7\u6c42\u200b\u8d1f\u8f7d\u200b\u3002</p> <p>\u200b\u5728\u200bLeader Mode\u200b\u4e0b\u200b\uff0cWorld size = TP * PP \u3002</p> <ul> <li>Orchestrator Mode</li> </ul> <p>\u200b\u5bf9\u4e8e\u200b\u7f16\u6392\u200b\u5668\u200b\u6a21\u5f0f\u200b\uff0c\u200b\u4e0d\u200b\u9700\u8981\u200b\u53cd\u5411\u200b\u4ee3\u7406\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5206\u6210\u200b\u4e24\u4e2a\u200b\u72ec\u7acb\u200b\u6a21\u578b\u200b\uff08\u200b\u5bf9\u5e94\u200b\u9700\u8981\u200bclient\u200b\u8bf7\u6c42\u200b\u4e0d\u540c\u200b\u7684\u200b\u6a21\u578b\u200b\uff09\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200btrion\u200b\u4e2d\u200b\u7684\u200bload balance\u3002</p> <p>mpi\u200b\u5185\u5bb9\u200b\u53ef\u4ee5\u200b\u67e5\u770b\u200btensorrt_llm\u200b\u4e2d\u200b\u5c01\u88c5\u200b\u7684\u200bmpiutils\u200b\u7c7b\u200b\u3002</p> <ul> <li>\u200b\u4f7f\u7528\u200bPytorch\u200b\u4ece\u200b\u96f6\u200b\u6784\u5efa\u200bLlama3\u200b\u5927\u200b\u6a21\u578b\u200b--\u200b\u6df1\u5165\u200b\u4e86\u89e3\u200b\u8f93\u51fa\u6a21\u5757\u200b\u4ee5\u53ca\u200b\u8bad\u7ec3\u200b\u63a8\u7406\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/squid%E6%90%AD%E5%BB%BAhttp%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/","title":"Squid\u200b\u642d\u5efa\u200bHTTP\u200b\u4ee3\u7406\u670d\u52a1\u5668","text":"<p>\u200b\u80cc\u666f\u200b\uff0c\u200b\u6709\u200b\u4e00\u53f0\u200bMac\u200b\u7535\u8111\u200b\u53ef\u4ee5\u200b\u8bbf\u95ee\u200b\u5916\u200b\u7f51\u200b\uff0c\u200b\u4f46\u662f\u200b\u6709\u4e2a\u200b\u5f00\u53d1\u677f\u200b\u901a\u8fc7\u200b\u7f51\u7ebf\u200b\u80fd\u591f\u200b\u548c\u200bMac\u200b\u4e92\u901a\u200bssh\uff0c\u200b\u4f46\u662f\u200b\u677f\u5b50\u200b\u4e0d\u80fd\u200b\u8fde\u63a5\u200b\u5916\u200b\u7f51\u200b\u3002\u200b\u60f3\u8981\u200b\u901a\u8fc7\u200bMac\u200b\u542f\u52a8\u200b\u4e00\u4e2a\u200b\u4ee3\u7406\u670d\u52a1\u5668\u200b\uff0c\u200b\u7136\u540e\u200b\u5f00\u53d1\u677f\u200b\u7684\u200b\u53ef\u4ee5\u200b\u8bbf\u95ee\u200b\u5916\u200b\u7f51\u200b\uff0c\u200b\u5305\u62ec\u200b\u7ec8\u7aef\u200b\u548c\u200bdocker\u200b\u7b49\u200b\u3002</p>"},{"location":"blog/squid%E6%90%AD%E5%BB%BAhttp%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/#1-mac\u5b89\u88c5\u914d\u7f6esquid","title":"1 Mac\u200b\u5b89\u88c5\u200b\u914d\u7f6e\u200bSquid","text":"Bash<pre><code>brew install squid\n</code></pre> <p>\u200b\u4fee\u6539\u200b\u914d\u7f6e\u6587\u4ef6\u200b\uff0c\u200b\u5176\u4ed6\u200b\u9ed8\u8ba4\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u4e86\u200b\uff1a </p>Bash<pre><code>http_access allow !Safe_ports\n\n# Deny CONNECT to other than secure SSL ports\nhttp_access allow CONNECT !SSL_ports\n\n# Only allow cachemgr access from localhost\nhttp_access allow localhost manager\nhttp_access deny manager\n\n# And finally deny all other access to this proxy\nhttp_access allow all\n\n# Squid normally listens to port 3128\nhttp_port 3128\n</code></pre><p></p> <p>\u200b\u5b8c\u6574\u200b\u914d\u7f6e\u6587\u4ef6\u200b\uff0chttp\u200b\u548c\u200bhttps\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u4ee3\u7406\u200b\uff0c\u200b\u4e0d\u200b\u9700\u8981\u200b\u7b7e\u53d1\u200bhttps\u200b\u8bc1\u4e66\u200b\u3002 </p>Bash<pre><code>#\n# Recommended minimum configuration:\n#\n\n# Example rule allowing access from your local networks.\n# Adapt to list your (internal) IP networks from where browsing\n# should be allowed\nacl localnet src 0.0.0.1-0.255.255.255  # RFC 1122 \"this\" network (LAN)\nacl localnet src 10.0.0.0/8     # RFC 1918 local private network (LAN)\nacl localnet src 100.64.0.0/10      # RFC 6598 shared address space (CGN)\nacl localnet src 169.254.0.0/16     # RFC 3927 link-local (directly plugged) machines\nacl localnet src 172.16.0.0/12      # RFC 1918 local private network (LAN)\nacl localnet src 192.168.0.0/16     # RFC 1918 local private network (LAN)\nacl localnet src fc00::/7           # RFC 4193 local private network range\nacl localnet src fe80::/10          # RFC 4291 link-local (directly plugged) machines\n\nacl SSL_ports port 443\nacl Safe_ports port 80      # http\nacl Safe_ports port 21      # ftp\nacl Safe_ports port 443     # https\nacl Safe_ports port 70      # gopher\nacl Safe_ports port 210     # wais\nacl Safe_ports port 1025-65535  # unregistered ports\nacl Safe_ports port 280     # http-mgmt\nacl Safe_ports port 488     # gss-http\nacl Safe_ports port 591     # filemaker\nacl Safe_ports port 777     # multiling http\n\n#\n# Recommended minimum Access Permission configuration:\n#\n# Deny requests to certain unsafe ports\nhttp_access allow !Safe_ports\n\n# Deny CONNECT to other than secure SSL ports\nhttp_access allow CONNECT !SSL_ports\n\n# Only allow cachemgr access from localhost\nhttp_access allow localhost manager\nhttp_access deny manager\n\n# This default configuration only allows localhost requests because a more\n# permissive Squid installation could introduce new attack vectors into the\n# network by proxying external TCP connections to unprotected services.\nhttp_access allow localhost\n\n# The two deny rules below are unnecessary in this default configuration\n# because they are followed by a \"deny all\" rule. However, they may become\n# critically important when you start allowing external requests below them.\n\n# Protect web applications running on the same server as Squid. They often\n# assume that only local users can access them at \"localhost\" ports.\nhttp_access deny to_localhost\n\n# Protect cloud servers that provide local users with sensitive info about\n# their server via certain well-known link-local (a.k.a. APIPA) addresses.\nhttp_access deny to_linklocal\n\n#\n# INSERT YOUR OWN RULE(S) HERE TO ALLOW ACCESS FROM YOUR CLIENTS\n#\n\n# For example, to allow access from your local networks, you may uncomment the\n# following rule (and/or add rules that match your definition of \"local\"):\n# http_access allow localnet\n\n# And finally deny all other access to this proxy\nhttp_access allow all\n\n# Squid normally listens to port 3128\nhttp_port 3128\n\n# Uncomment and adjust the following to add a disk cache directory.\n#cache_dir ufs /opt/homebrew/var/cache/squid 100 16 256\n\n# Leave coredumps in the first cache dir\ncoredump_dir /opt/homebrew/var/cache/squid\n\n#\n# Add any of your own refresh_pattern entries above these.\n#\nrefresh_pattern ^ftp:       1440    20% 10080\nrefresh_pattern -i (/cgi-bin/|\\?) 0 0%  0\nrefresh_pattern .       0   20% 4320\n</code></pre><p></p> <p>\u200b\u542f\u52a8\u200bsquid </p>Bash<pre><code>sudo brew services start squid\n# \u200b\u6216\u8005\u200b\n/opt/homebrew/opt/squid/sbin/squid -f /opt/homebrew/etc/squid.conf\n</code></pre><p></p> <p>\u200b\u67e5\u770b\u200b\u670d\u52a1\u200b\uff0c\u200b\u6d4b\u8bd5\u200b\u4ee3\u7406\u200b </p>Bash<pre><code>sudo brew services list\n\nproxychains4 curl https://www.baidu.com\ncurl -x http://192.168.1.102:3128 http://www.baidu.com\n</code></pre><p></p> <p>http://cooolin.com/scinet/2020/06/21/squid-proxy-simple.html</p>"},{"location":"blog/squid%E6%90%AD%E5%BB%BAhttp%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/#2-proxychains4\u4f7f\u7528\u4ee3\u7406\u670d\u52a1\u5668","title":"2 proxychains4\u200b\u4f7f\u7528\u200b\u4ee3\u7406\u670d\u52a1\u5668","text":"<p>\u200b\u4e0b\u8f7d\u200bproxychains4 deb\u200b\u6587\u4ef6\u200b\uff1a </p>Bash<pre><code>https://packages.debian.org/buster/proxychains4\nsudo dpkg -i *.deb\n</code></pre><p></p> <p>\u200b\u914d\u7f6e\u200bproxychains\uff0cvim /etc/proxychains4.conf </p>Bash<pre><code>[ProxyList]\n# add proxy here ...\n# meanwile\n# defaults set to \"tor\"\n#socks4     127.0.0.1 9050\nhttp 192.168.1.102 3128\n</code></pre><p></p>"},{"location":"blog/squid%E6%90%AD%E5%BB%BAhttp%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/#3-docker\u4f7f\u7528\u4ee3\u7406\u670d\u52a1\u5668","title":"3 docker\u200b\u4f7f\u7528\u200b\u4ee3\u7406\u670d\u52a1\u5668","text":"<p>docker\u200b\u914d\u7f6e\u200b\u4ee3\u7406\u200b\uff1a proxychians\u200b\u5bf9\u200bdocker\u200b\u65e0\u6548\u200b\uff0c\u200b\u56e0\u4e3a\u200bdocker\u200b\u547d\u4ee4\u200b\u6267\u884c\u200b\u65f6\u200b\u53ea\u662f\u200b\u5ba2\u6237\u7aef\u200b\u5de5\u5177\u200b\uff0c\u200b\u5e76\u200b\u6ca1\u6709\u200b\u4ee3\u7406\u200bdocker-daemon\u200b\u7a0b\u5e8f\u200b\u3002\u200b\u53c2\u8003\u200b\uff1a https://yeasy.gitbook.io/docker_practice/advanced_network/http_https_proxy</p>"},{"location":"blog/squid%E6%90%AD%E5%BB%BAhttp%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/#31-\u4e3a-dockerd-\u8bbe\u7f6e\u7f51\u7edc\u4ee3\u7406","title":"3.1 \u200b\u4e3a\u200b dockerd \u200b\u8bbe\u7f6e\u200b\u7f51\u7edc\u200b\u4ee3\u7406","text":"Bash<pre><code>sudo mkdir -p /etc/systemd/system/docker.service.d\n</code></pre> \u200b\u4e3a\u200b dockerd \u200b\u521b\u5efa\u200b HTTP/HTTPS \u200b\u7f51\u7edc\u200b\u4ee3\u7406\u200b\u7684\u200b\u914d\u7f6e\u6587\u4ef6\u200b\uff0c\u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\u662f\u200b /etc/systemd/system/docker.service.d/http-proxy.conf \u3002\u200b\u5e76\u200b\u5728\u200b\u8be5\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u76f8\u5173\u200b\u73af\u5883\u53d8\u91cf\u200b\u3002 Bash<pre><code>[Service]\nEnvironment=\"HTTP_PROXY=http://proxy.example.com:8080/\"\nEnvironment=\"HTTPS_PROXY=http://proxy.example.com:8080/\"\nEnvironment=\"NO_PROXY=localhost,127.0.0.1,.example.com\"\n</code></pre> Bash<pre><code>sudo systemctl daemon-reload\nsudo systemctl restart docker\n</code></pre>"},{"location":"blog/squid%E6%90%AD%E5%BB%BAhttp%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/#32-docker\u5bb9\u5668\u8bbe\u7f6e\u4ee3\u7406","title":"3.2 docker\u200b\u5bb9\u5668\u200b\u8bbe\u7f6e\u200b\u4ee3\u7406","text":"<p>\u200b\u66f4\u6539\u200b docker \u200b\u5ba2\u6237\u7aef\u200b\u914d\u7f6e\u200b\uff1a\u200b\u521b\u5efa\u200b\u6216\u200b\u66f4\u6539\u200b ~/.docker/config.json\uff0c\u200b\u5e76\u200b\u5728\u200b\u8be5\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u76f8\u5173\u200b\u914d\u7f6e\u200b\u3002</p> JSON<pre><code>{\n \"proxies\":\n {\n   \"default\":\n   {\n     \"httpProxy\": \"http://proxy.example.com:8080/\",\n     \"httpsProxy\": \"http://proxy.example.com:8080/\",\n     \"noProxy\": \"localhost,127.0.0.1,.example.com\"\n   }\n }\n}\n</code></pre>"},{"location":"blog/squid%E6%90%AD%E5%BB%BAhttp%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/#33-docker-build\u8bbe\u7f6e\u4ee3\u7406","title":"3.3 docker build\u200b\u8bbe\u7f6e\u200b\u4ee3\u7406","text":"<p>docker\u200b\u5728\u200b\u4f7f\u7528\u200bdocker build\u200b\u65f6\u200b\uff0c\u200b\u603b\u662f\u200b\u62a5\u9519\u200bresolve xxx.com \u200b\u51fa\u9519\u200b\uff0c\u200b\u4e00\u5ea6\u200b\u4ee5\u4e3a\u200b\u662f\u200bdns\u200b\u6ca1\u6709\u200b\u914d\u7f6e\u200b\u5bf9\u200b\u3002\u200b\u5b9e\u9645\u4e0a\u200b\u662f\u200b\u6ca1\u6709\u200b\u4f7f\u7528\u200b\u4e0a\u200b\u4ee3\u7406\u670d\u52a1\u5668\u200b\u3002</p> <p>\u200b\u5c1d\u8bd5\u200b\u4e86\u200b\u89e3\u51b3\u529e\u6cd5\u200b\uff1a</p> <ul> <li>docker\u200b\u914d\u7f6e\u200bdns\uff0c\u200b\u4fee\u6539\u200b/etc/docker/daemon.json\uff0c\u200b\u52a0\u5165\u200bdns\u200b\u9009\u9879\u200b\u3002</li> </ul> JSON<pre><code>{\n  \"data-root\": \"/package/docker_data\",\n  \"registry-mirrors\": [\"https://docker.mirrors.ustc.edu.cn/\",\"https://hub-mirror.c.163.com\",\"https://registry.docker-cn.com\"],\n  \"dns\": [\"8.8.8.8\"]\n}\n</code></pre> <ul> <li>\u200b\u8fd0\u884c\u200bdocker build\u200b\u65f6\u200b\uff0c\u200b\u6307\u5b9a\u200b\u53c2\u6570\u200b\u548c\u200b\u8bbe\u7f6e\u200bbash\u200b\u73af\u5883\u53d8\u91cf\u200b\uff1a</li> </ul> Bash<pre><code>#!/bin/bash\nexport  HTTP_PROXY=\"http://192.168.1.102:3128\"\nexport  HTTPS_PROXY=\"http://192.168.1.102:3128\"\n\nproxychains4 docker build --build-arg \"HTTP_PROXY=http://192.168.1.102:3128/\" --build-arg \"HTTPS_PROXY=http://192.168.1.102:3128/\"  -f ./Dockerfile.example -t xxx_yyy:v1 .\n</code></pre> <p>\u200b\u6b63\u786e\u200b\u89e3\u51b3\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u5728\u200bDockerfile\u200b\u4e2d\u200b\u52a0\u5165\u200b</p> Bash<pre><code>ENV http_proxy=http://192.168.1.102:3128\nENV https_proxy=http://192.168.1.102:3128\n</code></pre>"},{"location":"blog/squid%E6%90%AD%E5%BB%BAhttp%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/#34-apt-update\u62a5\u9519\u65f6\u95f4\u6ca1\u6709\u5bf9\u9f50\u95ee\u9898","title":"3.4 apt update\u200b\u62a5\u9519\u200b\u65f6\u95f4\u200b\u6ca1\u6709\u200b\u5bf9\u9f50\u200b\u95ee\u9898\u200b\ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350","text":"<p>\u200b\u7531\u4e8e\u200b\u5f00\u53d1\u677f\u200b\u4e4b\u524d\u200b\u6ca1\u6709\u200b\u8054\u7f51\u200b\uff0c\u200b\u65f6\u95f4\u200b\u53ef\u80fd\u200b\u548c\u200b\u4e92\u8054\u7f51\u200b\u65f6\u95f4\u200b\u6ca1\u6709\u200b\u5bf9\u9f50\u200b\uff0c\u200b\u4e0d\u80fd\u200bapt update\u3002 \u200b\u89e3\u51b3\u529e\u6cd5\u200b\uff0c\u200b\u5c1d\u8bd5\u200b\u4e86\u200b\u5b89\u88c5\u200bntpdate\u200b\u547d\u4ee4\u200b\u540c\u6b65\u200b\u65f6\u95f4\u200b\uff0c\u200b\u8fd8\u662f\u200b\u4e0d\u884c\u200b\u3002\u200b\u91c7\u7528\u200b\u4e86\u200b\u5982\u4e0b\u200b\u547d\u4ee4\u200b\uff1a</p> Bash<pre><code>apt-get -o Acquire::Check-Valid-Until=false -o Acquire::Check-Date=false update\n</code></pre> <ul> <li>LLM\u200b\u63a8\u7406\u200b\uff1atp\u200b\u548c\u200bhead_num\u200b\u6709\u200b\u4ec0\u4e48\u200b\u5173\u7cfb\u200b</li> <li>\u200b\u4ece\u200bDeepseek\u200b\u5f00\u6e90\u200b\u5e93\u200b3FS\u200b\u4e2d\u200b\u5b66\u4e60\u200bfuse\u200b\u7684\u200b\u4f7f\u7528\u200b-\u200b\u5982\u4f55\u200b\u5f00\u53d1\u200b\u4e00\u4e2a\u200b\u6587\u4ef6\u7cfb\u7edf\u200b\uff08\u200b\u4e00\u200b\uff09</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> </ul>"},{"location":"blog/vllm%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84sleep_mode%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0/","title":"VLLM\u200b\u63a8\u7406\u200b\u6846\u67b6\u200b\u4e2d\u200b\u7684\u200bsleep_mode\u200b\u5982\u4f55\u200b\u5b9e\u73b0","text":""},{"location":"blog/vllm%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84sleep_mode%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0/#vllm-sleep_model-\u7b80\u4ecb","title":"vllm sleep_model \u200b\u7b80\u4ecb","text":"<p>\u200b\u524d\u200b\u6587\u200btorch_memory_saver \u200b\u9ad8\u6027\u80fd\u200b CUDA \u200b\u5185\u5b58\u200b\u7ba1\u7406\u5de5\u5177\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u4ecb\u7ecd\u200b\u4e86\u200b sglang \u200b\u4e2d\u200b\u5229\u7528\u200b\u4e86\u200b\u8be5\u5e93\u200b\u5c06\u200b\u4fdd\u5b58\u200b kv_cache \u200b\u548c\u200b\u6743\u91cd\u200b\u7684\u200b\u663e\u5b58\u200b\u91ca\u653e\u51fa\u6765\u200b\u3002</p> <p>\u200b\u5728\u200b VLLM \u200b\u4e2d\u200b\u4e5f\u200b\u6709\u200b\u540c\u6837\u200b\u7684\u200b\u529f\u80fd\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u5728\u200b VLLM \u200b\u4e2d\u200b\u7684\u200b\u76f4\u63a5\u200b\u5e94\u7528\u200b\u662f\u200b\u201csleep mode\u201d\u3002\u200b\u5c06\u200b\u6a21\u578b\u200b\u6743\u91cd\u200b\u4ece\u200b\u663e\u5b58\u200b\uff08\u200b\u6216\u8005\u200b NPU \u200b\u5185\u5b58\u200b\u4e2d\u200b\uff09\u200b\u5378\u8f7d\u200b\uff0c\u200b\u5e76\u200b\u4e22\u5f03\u200b\u5176\u4e2d\u200b\u7684\u200b KV \u200b\u7f13\u5b58\u200b\u3002</p> <p>\u200b\u4e24\u79cd\u200b level \u200b\u4e0d\u540c\u200b\u7b56\u7565\u200b\uff1a</p> Bash<pre><code>Level 1 Sleep\n\nAction: Offloads model weights and discards the KV cache.\n\nMemory: Model weights are moved to CPU memory; KV cache is forgotten.\n\nUse Case: Suitable when reusing the same model later.\n\nNote: Ensure sufficient CPU memory is available to hold the model weights.\n\nLevel 2 Sleep\n\nAction: Discards both model weights and KV cache.\n\nMemory: The content of both the model weights and kv cache is forgotten.\n\nUse Case: Ideal when switching to a different model or updating the current one.\n</code></pre>"},{"location":"blog/vllm%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84sleep_mode%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0/#\u5982\u4f55\u4f7f\u7528-sleep-\u548c-wake_up","title":"\u5982\u4f55\u200b\u4f7f\u7528\u200b sleep \u200b\u548c\u200b wake_up?","text":"<p>\u200b\u5728\u200b VLLM \u200b\u4e2d\u200b\u901a\u8fc7\u200b CuMemAllocator.get_instance()\u200b\u4f7f\u7528\u200b sleep \u200b\u548c\u200b wake_up \u200b\u65b9\u6cd5\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u91ca\u653e\u200b\u663e\u5b58\u200b\u548c\u200b\u6062\u590d\u200b\u663e\u5b58\u200b\u3002</p> Python<pre><code>def load_model(self) -&gt; None:\n    if self.vllm_config.model_config.enable_sleep_mode:\n        allocator = CuMemAllocator.get_instance()\n        assert allocator.get_current_usage() == 0, (\n            \"Sleep mode can only be \"\n            \"used for one instance per process.\")\n        context = allocator.use_memory_pool(tag=\"weights\")\n    else:\n        from contextlib import nullcontext\n        context = nullcontext()\n    with context:\n        self.model_runner.load_model()\n\nclass Worker():\n\n    def sleep(self, level: int = 1) -&gt; None:\n        free_bytes_before_sleep = torch.cuda.mem_get_info()[0]\n\n        allocator = CuMemAllocator.get_instance()\n        allocator.sleep(offload_tags=(\"weights\", ) if level == 1 else tuple())\n        free_bytes_after_sleep, total = torch.cuda.mem_get_info()\n        freed_bytes = free_bytes_after_sleep - free_bytes_before_sleep\n        used_bytes = total - free_bytes_after_sleep\n        assert freed_bytes &gt;= 0, \"Memory usage increased after sleeping.\"\n        logger.info(\n            \"Sleep mode freed %.2f GiB memory, \"\n            \"%.2f GiB memory is still in use.\", freed_bytes / GiB_bytes,\n            used_bytes / GiB_bytes)\n\n    def wake_up(self, tags: Optional[list[str]] = None) -&gt; None:\n        allocator = CuMemAllocator.get_instance()\n        allocator.wake_up(tags)\n</code></pre> <p>\u200b\u5f53\u200b\u8c03\u7528\u200b sleep \u200b\u65b9\u6cd5\u200b\u65f6\u200b\uff0c\u200b\u6240\u6709\u200b\u5177\u6709\u200b\u6307\u5b9a\u200b\u6807\u7b7e\u200b\u7684\u200b\u5f20\u91cf\u200b\u90fd\u200b\u5c06\u200b\u88ab\u200b\u5378\u8f7d\u200b(offload)\u200b\u5230\u200b CPU \u200b\u5185\u5b58\u200b\u4e2d\u200b\uff0c\u200b\u5176\u4f59\u200b\u5f20\u91cf\u200b\u5c06\u200b\u88ab\u200b\u4e22\u5f03\u200b(discard)\u3002 \u200b\u5f53\u200b\u6211\u4eec\u200b\u8c03\u7528\u200b wake_up \u200b\u65f6\u200b\uff0c\u200b\u4e4b\u524d\u200b\u5378\u8f7d\u200b\u7684\u200b\u6240\u6709\u200b\u5f20\u91cf\u200b\u90fd\u200b\u5c06\u200b\u88ab\u200b\u52a0\u8f7d\u200b\u56de\u200b GPU \u200b\u5185\u5b58\u200b\uff0c\u200b\u5176\u4f59\u200b\u5f20\u91cf\u200b\u4e3a\u7a7a\u200b\u3002</p>"},{"location":"blog/vllm%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84sleep_mode%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0/#sleep-\u548c-wake_up-\u5b9e\u73b0","title":"sleep \u200b\u548c\u200b wake_up \u200b\u5b9e\u73b0","text":"<p>cuda \u200b\u5b9e\u73b0\u200b\u9488\u5bf9\u200b NVIDIA GPU, npu \u200b\u5b9e\u73b0\u200b\u9488\u5bf9\u200b\u534e\u4e3a\u200b Ascend NPU\u3002</p>"},{"location":"blog/vllm%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84sleep_mode%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0/#cuda-\u5b9e\u73b0","title":"cuda \u200b\u5b9e\u73b0","text":"<p>cuda \u200b\u5b9e\u73b0\u200b\u91c7\u7528\u200b CuMemAllocator \u200b\u7c7b\u200b\u5b9e\u73b0\u200b\u3002pointer_to_data \u200b\u4e2d\u200b\u4fdd\u5b58\u200b\u4e86\u200b ptr \u200b\u548c\u200b\u5143\u200b\u6570\u636e\u200b\u3002</p> <p>sleep \u200b\u65b9\u6cd5\u200b\u5c31\u662f\u200b\u5c06\u200boffload_tags\u200b\u4e2d\u200b\u7684\u200b\u6570\u636e\u200b\u5148\u200boffload\u200b\u5230\u200bcpu\uff0c\u200b\u5373\u200b\u8c03\u7528\u200b cudaMemcpy DeviceToHost \u200b\u62f7\u8d1d\u5230\u200b cpu \u200b\u5185\u5b58\u200b\u4e2d\u200b\u3002\u200b\u5e76\u4e14\u200b\u8bb0\u5f55\u200b\u4e0b\u200b cpu_backup_tensor\uff0c\u200b\u4f9b\u200b wakeup \u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u5c06\u200b cpu \u200b\u5185\u5b58\u200b\u4e2d\u200b\u7684\u200b\u6570\u636e\u200b\u62f7\u8d1d\u200b\u56de\u200b gpu \u200b\u5185\u5b58\u200b\u4e2d\u200b\u3002</p> <p>\u200b\u5bf9\u4e8e\u200b\u6ca1\u6709\u200b\u5728\u200b offload_tags \u200b\u4e2d\u200b\u7684\u200b\u6570\u636e\u200b\uff0csleep \u200b\u65b9\u6cd5\u200b\u4f1a\u200b\u76f4\u63a5\u200b\u4e22\u5f03\u200b\u6570\u636e\u200b\uff0c\u200b\u91ca\u653e\u200b\u663e\u5b58\u200b\u3002\u200b\u8c03\u7528\u200b unmap_and_release\u200b\u5b9e\u73b0\u200b\u3002\u200b\u4e3b\u8981\u200b\u662f\u200b\u4fdd\u6301\u200b\u7528\u6237\u200b\u4f7f\u7528\u200b\u7684\u200b\u865a\u62df\u5730\u5740\u200b\u4e0d\u53d8\u200b\uff0c\u200b\u6682\u505c\u200b\u540e\u200b\u91ca\u653e\u200b\u663e\u5b58\u200b\uff0c\u200b\u6062\u590d\u200b\u91cd\u65b0\u5206\u914d\u200b\u663e\u5b58\u200b\uff0c\u200b\u7ed1\u5b9a\u200b\u5230\u200b\u865a\u62df\u5730\u5740\u200b\u4e0a\u200b\u3002</p> Python<pre><code>def sleep(\n            self,\n            offload_tags: Optional[Union[tuple[str, ...],\n                                         str]] = None) -&gt; None:\n    if offload_tags is None:\n        # by default, allocated tensors are offloaded\n        # when the allocator sleeps\n        offload_tags = (CuMemAllocator.default_tag, )\n    elif isinstance(offload_tags, str):\n        offload_tags = (offload_tags, )\n\n    assert isinstance(offload_tags, tuple)\n\n    for ptr, data in self.pointer_to_data.items():\n        handle = data.handle\n        if data.tag in offload_tags:\n            size_in_bytes = handle[1]\n            cpu_backup_tensor = torch.empty(\n                size_in_bytes,\n                dtype=torch.uint8,\n                device='cpu',\n                pin_memory=is_pin_memory_available())\n            cpu_ptr = cpu_backup_tensor.data_ptr()\n            libcudart.cudaMemcpy(cpu_ptr, ptr, size_in_bytes)\n            data.cpu_backup_tensor = cpu_backup_tensor\n        unmap_and_release(handle)\n\n    gc.collect()\n    torch.cuda.empty_cache()\n</code></pre> <p>wake_up \u200b\u65b9\u6cd5\u200b\u5219\u200b\u662f\u200b\u8c03\u7528\u200b create_and_map(handle)\u200b\u5b9e\u73b0\u200b\u91cd\u65b0\u5206\u914d\u200b\u663e\u5b58\u200b\uff0c\u200b\u5e76\u200b\u7ed1\u5b9a\u200b\u5230\u200b\u865a\u62df\u5730\u5740\u200b\u4e0a\u200b\u3002\u200b\u5c06\u200b offload \u200b\u7684\u200b\u6570\u636e\u200b\u4ece\u200b cpu \u200b\u62f7\u8d1d\u5230\u200b gpu \u200b\u4e2d\u200b\u3002</p> Python<pre><code>def wake_up(self, tags: Optional[list[str]] = None) -&gt; None:\n    for ptr, data in self.pointer_to_data.items():\n        if tags is None or data.tag in tags:\n            handle = data.handle\n            create_and_map(handle)\n            if data.cpu_backup_tensor is not None:\n                cpu_backup_tensor = data.cpu_backup_tensor\n                if cpu_backup_tensor is not None:\n                    size_in_bytes = cpu_backup_tensor.numel(\n                    ) * cpu_backup_tensor.element_size()\n                    cpu_ptr = cpu_backup_tensor.data_ptr()\n                    libcudart.cudaMemcpy(ptr, cpu_ptr, size_in_bytes)\n                    data.cpu_backup_tensor = None\n</code></pre> <p>pointer_to_data \u200b\u5143\u200b\u6570\u636e\u200b\uff1a</p> Python<pre><code># py_device, py_alignedSize, py_d_mem (\u200b\u4fdd\u5b58\u200b\u7684\u200b\u7528\u6237\u200b\u4f7f\u7528\u200b\u7684\u200b\u6307\u9488\u200b), py_p_memHandle\uff08\u200b\u5185\u5b58\u200bmmap\u200b\u7684\u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26\u200b\uff09\nHandleType = tuple[int, int, int, int]\n\n@dataclasses.dataclass\nclass AllocationData:\n    handle: HandleType\n    tag: str\n    cpu_backup_tensor: Optional[torch.Tensor] = None # offload\u200b\u5230\u200bcpu\u200b\u7684\u200btensor\n</code></pre> <p>python \u200b\u8c03\u7528\u200b\u5e95\u5c42\u200b c++\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u548c\u200btorch_memory_saver\u200b\u539f\u7406\u200b\u5b8c\u5168\u4e00\u81f4\u200b\u3002</p> Python<pre><code>def create_and_map(allocation_handle: HandleType) -&gt; None:\n    python_create_and_map(*allocation_handle)\n\n\ndef unmap_and_release(allocation_handle: HandleType) -&gt; None:\n    python_unmap_and_release(*allocation_handle)\n</code></pre> <p>c++\u200b\u5b9e\u73b0\u200b\u67e5\u770b\u200bcumem_allocator.cpp\u3002</p>"},{"location":"blog/vllm%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6%E4%B8%AD%E7%9A%84sleep_mode%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0/#ascend-npu-\u7684\u5b9e\u73b0","title":"Ascend NPU \u200b\u7684\u200b\u5b9e\u73b0\u200b\ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350","text":"<p>\u200b\u4e3b\u8981\u200b\u901a\u8fc7\u200bCaMemAllocator \u200b\u7c7b\u200b\u5b9e\u73b0\u200b\u3002python \u200b\u8c03\u7528\u200b\u5e95\u5c42\u200b c++\u200b\u5b9e\u73b0\u200b\u3002\u200b\u548c\u200b cuda \u200b\u5b9e\u73b0\u200b\u7684\u200b\u533a\u522b\u200b\u5c31\u662f\u200b sleep \u200b\u4e2d\u200b\u7684\u200b unmap_and_release \u200b\u51fd\u6570\u200b\u3001wake_up \u200b\u4e2d\u200b\u7684\u200b create_and_map \u200b\u51fd\u6570\u200b\u5b9e\u73b0\u200b\u4e0d\u200b\u4e00\u6837\u200b\u3002</p> <p>\u200b\u5177\u4f53\u200b\u5b9e\u73b0\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200bcamem_allocator.cpp\uff0c\u200b\u4f7f\u7528\u200b Ascend NPU \u200b\u7684\u200b aclrt \u200b\u5b9e\u73b0\u200b\u4e86\u200b\u4fdd\u5b58\u200b\u6307\u9488\u200b aclrtReserveMemAddress\u3001\u200b\u5185\u5b58\u200b\u6620\u5c04\u200b\u7b49\u200b API\u3002</p> C++<pre><code>void create_and_map(unsigned long long device, ssize_t size, void* d_mem,\n                    aclrtDrvMemHandle* p_memHandle) {\n  ensure_context(device);\n  // Define memory allocation properties\n  aclrtPhysicalMemProp prop = {};\n  prop.handleType = ACL_MEM_HANDLE_TYPE_NONE ;\n  prop.allocationType = ACL_MEM_ALLOCATION_TYPE_PINNED;\n  prop.memAttr = ACL_HBM_MEM_HUGE;\n  prop.location.id = device;\n  prop.location.type = ACL_MEM_LOCATION_TYPE_DEVICE;\n  prop.reserve = 0;\n\n  // Allocate memory using aclrtMallocPhysical\n  aclError error_code = aclrtMallocPhysical(p_memHandle, size, &amp;prop, 0);\n  if (error_code != 0) {\n    std::cerr &lt;&lt; \"acl Error, code: \" &lt;&lt; error_code &lt;&lt; \" at \" &lt;&lt; __FILE__ &lt;&lt; \":\" \\\n            &lt;&lt; __LINE__ &lt;&lt; std::endl;\n    return;\n  }\n  error_code = aclrtMapMem(d_mem, size, 0, *p_memHandle, 0);\n  if (error_code != 0) {\n    std::cerr &lt;&lt; \"acl Error, code: \" &lt;&lt; error_code &lt;&lt; \" at \" &lt;&lt; __FILE__ &lt;&lt; \":\" \\\n            &lt;&lt; __LINE__ &lt;&lt; std::endl;\n    return;\n  }\n}\n\nvoid unmap_and_release(unsigned long long device, ssize_t size,\n                       void* d_mem,\n                       aclrtDrvMemHandle* p_memHandle) {\n  // std::cout &lt;&lt; \"unmap_and_release: device=\" &lt;&lt; device &lt;&lt; \", size=\" &lt;&lt; size &lt;&lt;\n  // \", d_mem=\" &lt;&lt; d_mem &lt;&lt; \", p_memHandle=\" &lt;&lt; p_memHandle &lt;&lt; std::endl;\n  ensure_context(device);\n  aclError error_code = aclrtUnmapMem(d_mem);\n  if (error_code != 0) {\n    std::cerr &lt;&lt; \"acl Error, code: \" &lt;&lt; error_code &lt;&lt; \" at \" &lt;&lt; __FILE__ &lt;&lt; \":\" \\\n            &lt;&lt; __LINE__ &lt;&lt; std::endl;\n    return;\n  }\n  error_code = aclrtFreePhysical(*p_memHandle);\n  if (error_code != 0) {\n    std::cerr &lt;&lt; \"acl Error, code: \" &lt;&lt; error_code &lt;&lt; \" at \" &lt;&lt; __FILE__ &lt;&lt; \":\" \\\n            &lt;&lt; __LINE__ &lt;&lt; std::endl;\n    return;\n  }\n}\n</code></pre> <p>\u200b\u901a\u8fc7\u200b pytorch \u200b\u63d2\u4ef6\u200b\u6ce8\u518c\u200b\u4e86\u200b NPU \u200b\u7684\u200b\u81ea\u5b9a\u4e49\u200b my_malloc \u200b\u548c\u200b my_free \u200b\u51fd\u6570\u200b\u3002</p> Python<pre><code>def get_pluggable_allocator(\n    python_malloc_fn: Callable[[tuple[int, int, int, int]], None],\n    python_free_func: Callable[[int], tuple[int, int, int, int]]\n) -&gt; torch.npu.memory.NPUPluggableAllocator:\n    init_module(python_malloc_fn, python_free_func)\n    new_alloc = torch.npu.memory.NPUPluggableAllocator(lib_name, 'my_malloc',\n                                                       'my_free')\n    return new_alloc\n\n@contextmanager\ndef use_memory_pool_with_allocator(\n        python_malloc_fn: Callable[[tuple[int, int, int, int]], None],\n        python_free_func: Callable[[int], tuple[int, int, int, int]]):\n    new_alloc = get_pluggable_allocator(python_malloc_fn, python_free_func)\n    mem_pool = torch.npu.memory.MemPool(new_alloc._allocator)\n    with torch.npu.memory.use_mem_pool(mem_pool):\n        yield mem_pool, new_alloc\n</code></pre> <p>torch_memory_saver \u200b\u7684\u200b\u5b9e\u73b0\u200b\u548c\u200b vllm \u200b\u4e2d\u200b sleep_mode \u200b\u7528\u5230\u200b\u7684\u200b CuMemAllocator \u200b\u5b9e\u73b0\u200b\u662f\u200b\u4e00\u6837\u200b\u7684\u200b\uff0c\u200b\u9664\u6b64\u4e4b\u5916\u200b vllm \u200b\u9488\u5bf9\u200b npu \u200b\u5b9e\u73b0\u200b\u4e86\u200b CaMemAllocator\uff0c\u200b\u8c03\u7528\u200b\u7684\u200b aclrt \u200b\u5b9e\u73b0\u200b\u3002 vllm \u200b\u7684\u200b sleep_mode \u200b\u9664\u4e86\u200b\u5c06\u200b gpu \u200b\u5185\u5b58\u200b\u91ca\u653e\u200b\uff0c\u200b\u8fd8\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u6839\u636e\u200b offload_tags offload \u200b\u5230\u200b cpu\uff08\u200b\u4e3b\u8981\u200b\u662f\u200b\u6743\u91cd\u200b\uff09\u3002</p> <ul> <li>GPU\u200b\u7684\u200bpin_memory\u200b\u662f\u200b\u4ec0\u4e48\u200b\uff1f</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/vim%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/","title":"Vim\u200b\u6709\u200b\u4ec0\u4e48\u200b\u5947\u6280\u6deb\u5de7\u200b\uff1f","text":"<p>\u200b\u670b\u53cb\u200b\u4eec\u200b\uff0c\u200b\u4f60\u4eec\u597d\u200b\u5440\u200b\uff01</p> <p>\u200b\u4e0d\u7ba1\u200b\u662f\u200bVim\u200b\u8fd8\u662f\u200bNvim\uff0c\u200b\u5927\u5bb6\u200b\u80af\u5b9a\u200b\u90fd\u200b\u4f1a\u200b\u7528\u5230\u200b\u5427\u200b\uff01\u200b\u5728\u200b\u81ea\u5df1\u200b\u7684\u200b\u5f00\u53d1\u200b\u673a\u4e0a\u200b\u4f60\u200b\u7684\u200bvim\u200b\u6216\u8bb8\u200b\u7279\u522b\u200b\u81ea\u5b9a\u4e49\u200b\u6539\u88c5\u200b\u8fc7\u200b\u4e86\u200b\u3002\u200b\u4f46\u662f\u200b\u5076\u5c14\u200b\u6211\u4eec\u200b\u4e5f\u200b\u4f1a\u200b\u53bb\u200b\u4e00\u4e2a\u200b\u4e34\u65f6\u200b\u670d\u52a1\u5668\u200b\uff0c\u200b\u88c5\u200b\u4e00\u4e2a\u200b\u6700\u200b\u7b80\u5355\u200b\u7684\u200b\u539f\u751f\u200bvim\u200b\u4f7f\u7528\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u4f60\u200b\u719f\u6089\u200b\u4e86\u89e3\u200bVim\u200b\u7684\u200b\u4e00\u4e9b\u200b\u5c0f\u200b\u6280\u5de7\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u63d0\u9ad8\u200b\u4f60\u200b\u7684\u200b\u6548\u7387\u200b\u5462\u200b\u3002\u200b\u90a3\u4e48\u200b\uff0cVim\u200b\u6709\u200b\u4ec0\u4e48\u200b\u5947\u6280\u6deb\u5de7\u200b\uff1f\u200b\u4e00\u8d77\u200b\u770b\u770b\u200b\u4f5c\u8005\u200b\u5e73\u65f6\u200b\u5e38\u7528\u200b\u5230\u200b\u7684\u200b\u4e00\u4e9b\u200b\u5c0f\u200b\u6280\u5de7\u200b\u3002</p> <p>\u200b\u6b22\u8fce\u200b\u5404\u4f4d\u670b\u53cb\u200b\u5206\u4eab\u200b\u8865\u5145\u200b\u4f60\u200b\u7528\u5230\u200b\u7684\u200b\u5c0f\u200b\u6280\u5de7\u200b\uff01</p>"},{"location":"blog/vim%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/#\u8df3\u8f6c","title":"\u8df3\u8f6c","text":"<ul> <li> <p>:jumps \u200b\u67e5\u770b\u200b\u8df3\u8dc3\u200b\u5217\u8868\u200b</p> </li> <li> <p>&lt;C-o&gt; \u200b\u8df3\u8f6c\u200b\u5230\u200b\u4e0a\u200b\u4e00\u4e2a\u200b\u4f4d\u7f6e\u200b\uff0co\u200b\u53ef\u4ee5\u200b\u7406\u89e3\u200b\u4e3a\u200bold</p> </li> <li>&lt;C-i&gt; \u200b\u548c\u200b&lt;C-o&gt;\u200b\u76f8\u5bf9\u200b\u5e94\u200b\u914d\u5408\u200b\u4f7f\u7528\u200b\uff0c\u200b\u8df3\u8f6c\u200b\u65b9\u5411\u200b\u76f8\u53cd\u200b</li> </ul>"},{"location":"blog/vim%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/#\u5728\u63d2\u5165\u6a21\u5f0f\u4e0b","title":"\u5728\u200b\u63d2\u5165\u200b\u6a21\u5f0f\u200b\u4e0b","text":"<p>\uff081\uff09\u200b\u5728\u200b\u63d2\u5165\u200b\u6a21\u5f0f\u200b\u4e0b\u200b\uff0c\u200b\u4e3a\u4e86\u200b\u5feb\u901f\u200b\u5220\u9664\u200b\uff0c\u200b\u5220\u9664\u200bword\uff0c\u200b\u5220\u9664\u200b\u5230\u200b\u884c\u9996\u200b\u7b49\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\uff1a</p> <ul> <li>&lt;C-u&gt; \u200b\u5220\u9664\u200b\u5230\u200b\u884c\u9996\u200b</li> <li>&lt;C-w&gt; \u200b\u5411\u524d\u200b\u5220\u9664\u200b\u4e00\u4e2a\u200bword</li> <li>&lt;C-h&gt; \u200b\u56de\u9000\u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u200b</li> </ul> <p>\uff082\uff09\u200b\u5feb\u901f\u200b\u63d2\u5165\u200b\u5bc4\u5b58\u5668\u200b\u5185\u5bb9\u200b\uff1a + &lt;C-r&gt;\u200b\u52a0\u4e0a\u200b\u5bc4\u5b58\u5668\u200b\u7684\u200b\u540d\u5b57\u200b\uff0c\u200b\u6bd4\u5982\u200b\uff1a&lt;C-r&gt;a</p> <p>\uff083\uff09\u200b\u5feb\u901f\u200b\u8ba1\u7b97\u200b</p> <p>\u200b\u6bd4\u5982\u200b\u7f16\u5199\u200b\u56fe\u7247\u200b\u5904\u7406\u7a0b\u5e8f\u200b\uff0c\u200b\u9700\u8981\u200b\u8ba1\u7b97\u200b1080 * 1920 * 3\u200b\u7684\u200b\u503c\u200b\uff0c\u200b\u662f\u4e0d\u662f\u200b\u8981\u200b\u6253\u5f00\u200b\u4e00\u4e2a\u200b\u8ba1\u7b97\u5668\u200b\uff0c\u200b\u7136\u540e\u200b\u8ba1\u7b97\u200b\u590d\u5236\u7c98\u8d34\u200b\uff0c\u200b\u8fd9\u6837\u200b\u592a\u200b\u9ebb\u70e6\u200b\u4e86\u200b\u3002</p> <p>\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b &lt;C-r&gt;= \uff0c\u200b\u7136\u540e\u200b\u63d0\u793a\u200b\u4f60\u200b\u8f93\u5165\u200b\u4e00\u4e2a\u200b\u8868\u8fbe\u5f0f\u200b\u6bd4\u5982\u200b\uff1a1920 * 1080 * 3\uff0c\u200b\u5c31\u200b\u4f1a\u200b\u81ea\u52a8\u200b\u63d2\u5165\u200b\u8ba1\u7b97\u7ed3\u679c\u200b\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200bpow\u200b\u51fd\u6570\u200b\u7b49\u200b\u8ba1\u7b97\u200b\u6b21\u65b9\u200b\u3002</p>"},{"location":"blog/vim%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/#\u5728ex\u6a21\u5f0f\u5feb\u901f\u63d2\u5165","title":"\u5728\u200bEx\u200b\u6a21\u5f0f\u200b\u5feb\u901f\u200b\u63d2\u5165","text":"<p>\u200b\u5728\u200bEx\u200b\u6a21\u5f0f\u200b\u4e0b\u200b\uff0c\u200b\u5982\u679c\u200b\u9700\u8981\u200b\u5c06\u200b\u5149\u6807\u200b\u4f4d\u7f6e\u200b\u7684\u200b\u957f\u200b\u5b57\u7b26\u4e32\u200b\u63d2\u5165\u200bEx\u200b\u8f93\u5165\u200b\u4e2d\u200b\uff0c \u200b\u6267\u884c\u200b\uff1a </p>Text Only<pre><code># C\u200b\u8868\u793a\u200b\u6309\u200bCtrl\u200b\u952e\u200b\uff0c&lt;C-r&gt;\u200b\u8868\u793a\u200b\u540c\u65f6\u200b\u6309\u200bCtrl\u200b\u52a0\u200br\u200b\u952e\u200b\n&lt;C-r&gt;&lt;C-w&gt;\n</code></pre><p></p>"},{"location":"blog/vim%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/#\u5feb\u901f\u6253\u5f00\u7ec8\u7aef","title":"\u5feb\u901f\u200b\u6253\u5f00\u200b\u7ec8\u7aef","text":"<ul> <li> <p>&lt;C-z&gt;\u200b\u914d\u5408\u200bfg\u200b\u547d\u4ee4\u200b\u4f7f\u7528\u200b</p> </li> <li> <p>vim\u200b\u6267\u884c\u200b:ter\uff0c\u200b\u6253\u5f00\u200b\u4e00\u4e2a\u200b\u7ec8\u7aef\u200b\uff0c\u200b\u7136\u540e\u200bexit\u200b\u9000\u51fa\u200b</p> </li> <li> <p>vim\u200b\u6267\u884c\u200b:sh\uff0c\u200b\u6253\u5f00\u200b\u4e00\u4e2a\u200b\u7ec8\u7aef\u200b\uff0c\u200b\u7136\u540e\u200bexit\u200b\u9000\u51fa\u200b</p> </li> </ul> <p>\u200b\u5728\u200bterm\u200b\u4e2d\u200b\u6267\u884c\u200b\u4e86\u200b\u547d\u4ee4\u200b\uff0c\u200b\u6bd4\u5982\u200bcmake\uff0c\u200b\u53d1\u73b0\u200b\u6253\u5370\u200b\u4e86\u200b\u5f88\u591a\u200b\u5185\u5bb9\u200b\uff0c\u200b\u73b0\u5728\u200b\u5982\u4f55\u200bscroll up\uff0c\u200b\u67e5\u770b\u200b\u4e0a\u65b9\u200b\u7684\u200b\u5185\u5bb9\u200b\u5462\u200b\uff1f\u200b\u8fd9\u65f6\u200b\u53ef\u4ee5\u200b\u6309\u200b&lt;C-w&gt;&lt;S-n&gt;\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u9f20\u6807\u200b\u4ee5\u53ca\u200bhjkl\u200b\u79fb\u52a8\u200b\u67e5\u770b\u200b\u7ec8\u7aef\u200b\u5185\u5bb9\u200b\u4e86\u200b\u3002\u200b\u6700\u540e\u200b\u6309\u200b i \u200b\u8fd4\u56de\u200b\u7ee7\u7eed\u200b\u8f93\u5165\u200b\u547d\u4ee4\u200b\u3002</p>"},{"location":"blog/vim%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/#quickfix\u7a97\u53e3","title":"quickfix\u200b\u7a97\u53e3","text":"<ul> <li>:ccl[ose] \u200b\u547d\u4ee4\u200b\u5173\u95ed\u200b\u7a97\u53e3\u200b</li> <li>:copen \u200b\u547d\u4ee4\u200b\u6253\u5f00\u200b\u7a97\u53e3\u200b</li> </ul>"},{"location":"blog/vim%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/#ex\u6a21\u5f0f\u63d0\u793a\u8f93\u5165","title":"Ex\u200b\u6a21\u5f0f\u200b\u63d0\u793a\u200b\u8f93\u5165","text":"<p>\u200b\u5728\u200bEx\u200b\u6a21\u5f0f\u200b\u8f93\u5165\u200b\u4e00\u90e8\u5206\u200b\u5b57\u7b26\u200b\u540e\u200b\uff0c\u200b\u5fd8\u8bb0\u200b\u4e86\u200b\u547d\u4ee4\u200b\uff0c\u200b\u6216\u8005\u200b\u9700\u8981\u200b\u63d0\u793a\u200b\uff0c\u200b\u6309\u200b&lt;C-d&gt;\u200b\u4f1a\u200b\u51fa\u73b0\u200b\u63d0\u793a\u200b\u3002</p>"},{"location":"blog/vim%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/#\u6587\u4ef6\u8df3\u8f6c","title":"\u6587\u4ef6\u200b\u8df3\u8f6c","text":"<ul> <li> <p>\u200b\u5728\u200bex\u200b\u6a21\u5f0f\u200b\uff0c\u200b\u6267\u884c\u200b :r !pwd \u200b\u53ef\u4ee5\u200b\u5728\u200b\u5149\u6807\u200b\u4f4d\u7f6e\u200b\u8f93\u5165\u200b\u5f53\u524d\u200b\u8def\u5f84\u200b\u3002</p> </li> <li> <p>\u200b\u5728\u200bnormal\u200b\u6a21\u5f0f\u200b\uff0c\u200b\u6572\u51fb\u200b gf \u200b\u53ef\u4ee5\u200b\u8df3\u8f6c\u200b\u6253\u5f00\u200b\u6587\u4ef6\u200b\uff0c\u200b\u5982\u679c\u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\u6709\u200b\u7a7a\u683c\u200b\uff0c\u200b\u5148\u200b&lt;S-v&gt;\u200b\u9009\u4e2d\u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\uff0c\u200b\u518d\u200b\u4f7f\u7528\u200bgf\u3002\u200b\u5f53\u7136\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b&lt;C-w&gt;f \u200b\u5728\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u7a97\u53e3\u200b\u6253\u5f00\u200b\u6587\u4ef6\u200b\u3002</p> </li> </ul>"},{"location":"blog/vim%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/#\u6253\u5f00\u6587\u4ef6\u7684\u4e0d\u540c\u65b9\u5f0f","title":"\u6253\u5f00\u200b\u6587\u4ef6\u200b\u7684\u200b\u4e0d\u540c\u200b\u65b9\u5f0f","text":"<ul> <li> <p>vim -o * \u200b\u4f7f\u7528\u200bn\u200b\u4e2a\u200b\u6a2a\u5411\u200b\u7a97\u53e3\u200b\u6253\u5f00\u200b\u6587\u4ef6\u200b</p> </li> <li> <p>vim -O * \u200b\u4f7f\u7528\u200bn\u200b\u4e2a\u200b\u7eb5\u5411\u200b\u7a97\u53e3\u200b\uff08vertically\uff09\u200b\u6253\u5f00\u200b\u6587\u4ef6\u200b</p> </li> <li> <p>vim -p * \u200b\u5c06\u200b\u591a\u4e2a\u200b\u6587\u4ef6\u200b\u6309\u7167\u200b\u591a\u4e2a\u200btab\u200b\u6253\u5f00\u200b</p> </li> </ul>"},{"location":"blog/vim%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/#\u81ea\u5e26\u7684\u81ea\u52a8\u8865\u5168","title":"\u81ea\u5e26\u200b\u7684\u200b\u81ea\u52a8\u200b\u8865\u5168","text":"<ul> <li> <p>&lt;C-n&gt; \u200b\u6b63\u5e8f\u200b\u904d\u5386\u200b\u63d0\u793a\u200b\u9879\u200b</p> </li> <li> <p>&lt;C-p&gt; \u200b\u5012\u5e8f\u200b\u904d\u5386\u200b\u63d0\u793a\u200b\u9879\u200b</p> </li> </ul>"},{"location":"blog/vim%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/#\u641c\u7d22","title":"\u641c\u7d22","text":"<ul> <li> <p>/ </p> </li> <li> <p>\uff1f</p> </li> <li> <p>n next\uff0cp previous</p> </li> <li>q/ \u200b\u4f1a\u200b\u6253\u5f00\u200b\u641c\u7d22\u200b\u5386\u53f2\u8bb0\u5f55\u200b\u5217\u8868\u200b\uff0c\u200b\u7136\u540e\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u5feb\u901f\u200b\u9009\u62e9\u200b\u641c\u7d22\u200b\u9879\u200b\uff0c\u200b\u518d\u6b21\u200b\u641c\u7d22\u200b\u3002</li> </ul>"},{"location":"blog/vim%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/#\u52a0\u5bc6\u6587\u4ef6","title":"\u52a0\u5bc6\u200b\u6587\u4ef6","text":"<p>vim -x file.txt \u200b\u952e\u5165\u200b\u4e24\u6b21\u200b\u5bc6\u7801\u200b\u786e\u8ba4\u200b\uff0c\u200b\u7136\u540e\u200b\u52a0\u5bc6\u200b\u6587\u4ef6\u200b\u3002</p> <p>\u200b\u6216\u8005\u200b\u5728\u200bex\u200b\u6a21\u5f0f\u200b\uff0c:X \uff08\u200b\u6ce8\u610f\u200b\u662f\u200b\u5927\u5199\u200bX\uff09\u200b\u52a0\u5bc6\u200b\u6587\u4ef6\u200b\uff0c\u200b\u6216\u8005\u200b\u4e24\u6b21\u200b\u56de\u8f66\u200b\u89e3\u5bc6\u200b\u6587\u4ef6\u200b\uff0c\u200b\u7136\u540e\u200b:wq\u200b\u4fdd\u5b58\u200b\u3002</p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>unicode\u200b\u7f16\u7801\u200b\u548c\u200butf-8\u200b\u8f6c\u6362\u200b\u4e0d\u540c\u200b\u8bed\u8a00\u200b\u5b9e\u73b0\u200b\u7684\u200b\u5dee\u522b\u200b\uff1f\u200b\u4ee5\u53ca\u200blocale\u200b\u6742\u8c08\u200b</li> <li>cista\u200b\u96f6\u200b\u62f7\u8d1d\u200b\u53cd\u200b\u5e8f\u5217\u5316\u200b\u5e93\u200b\u5b9e\u73b0\u200b\u4e4b\u200bswiss_table\u200b\u54c8\u5e0c\u200b\u8868\u200b\u5b9e\u73b0\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/bitnet%E4%B8%ADint2%E5%92%8Cint8%E7%9A%84%E4%BD%BF%E7%94%A8/","title":"bitnet\u200b\u4e2d\u200bint2\u200b\u548c\u200bint8\u200b\u7684\u200b\u4f7f\u7528","text":""},{"location":"blog/bitnet%E4%B8%ADint2%E5%92%8Cint8%E7%9A%84%E4%BD%BF%E7%94%A8/#bitnet\u4e2dint2\u548cint8\u7684\u4f7f\u7528","title":"bitnet\u200b\u4e2d\u200bint2\u200b\u548c\u200bint8\u200b\u7684\u200b\u4f7f\u7528","text":"<p>W2A8\u200c\uff082-bit\u200b\u6743\u91cd\u200b + 8-bit\u200b\u6fc0\u6d3b\u200b\uff09\u200b\u662f\u200b\u4e00\u79cd\u200b\u6781\u4f4e\u200b\u7cbe\u5ea6\u200b\u91cf\u5316\u200b\u65b9\u6848\u200b\uff0c\u200b\u65e8\u5728\u200b\u901a\u8fc7\u200b\u727a\u7272\u200b\u90e8\u5206\u200b\u6a21\u578b\u200b\u7cbe\u5ea6\u200b\u6362\u53d6\u200b\u663e\u8457\u200b\u7684\u200b\u5b58\u50a8\u200b\u548c\u200b\u8ba1\u7b97\u200b\u6548\u7387\u200b\u63d0\u5347\u200b\u3002\u200b\u9002\u7528\u200b\u4e8e\u200b\u8ba1\u7b97\u8d44\u6e90\u200b\u53d7\u9650\u200b\u7684\u200b\u573a\u666f\u200b\u8fb9\u7f18\u200b\u8bbe\u5907\u200b\u90e8\u7f72\u200b\u200c\uff0c\u200b\u5982\u200b\u79fb\u52a8\u200b\u7aef\u200b\u6216\u200b\u5d4c\u5165\u5f0f\u200b\u8bbe\u5907\u200b\u200c\u3002</p>"},{"location":"blog/bitnet%E4%B8%ADint2%E5%92%8Cint8%E7%9A%84%E4%BD%BF%E7%94%A8/#gpu\u7248\u672c\u63a8\u7406","title":"gpu\u200b\u7248\u672c\u200b\u63a8\u7406","text":"<p>\u200b\u53c2\u8003\u200breadme\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u7684\u200b BitNet-b1.58-2B-4T\u200b\u6a21\u578b\u200b\u3002</p> <p>\u200b\u6743\u91cd\u200bweight\u200b\u91c7\u7528\u200bint2\u200b\u5b58\u50a8\u200b\uff0c\u200b\u6fc0\u6d3b\u200bactivation\u200b\u91c7\u7528\u200bint8\u200b\u5b58\u50a8\u200b\u3002\u200b\u81ea\u5b9a\u4e49\u200b\u4e86\u200b\u4e2a\u200bcuda kernel\u200b\u51fd\u6570\u200b\uff0c\u200b\u7528\u4e8e\u200b\u8ba1\u7b97\u200bint2\u200b\u548c\u200bint8\u200b\u7684\u200b\u4e58\u6cd5\u200b\u3002</p> <ul> <li> <p>\u200b\u5728\u200b\u8f6c\u6362\u200bcheckpoint\u200b\u65f6\u200b\uff0c\u200b\u5c06\u200bint8\u200b\u6743\u91cd\u200b\u8f6c\u4e3a\u200bint2\uff08convert_weight_int8_to_int2\uff09\uff0c\u200b\u5e76\u4e14\u200b\u5bf9\u200b\u6743\u91cd\u200b\u8fdb\u884c\u200b\u4e86\u200b\u5212\u5206\u200b\u4e3a\u200b16\u00d732 blocks\u200b\u548c\u200b\u91cd\u6392\u200b\uff0c\u200b\u4fbf\u4e8e\u200bgpu\u200b\u7684\u200b\u9ad8\u6548\u200b\u8fd0\u7b97\u200b\u3002</p> </li> <li> <p>\u200b\u81ea\u5b9a\u4e49\u200bkernel\u200b\u51fd\u6570\u200bladder_int8xint2_kernel\uff0c\u200b\u91c7\u7528\u200bgpu dp4a\u200b\u6307\u4ee4\u200b(__dp4a)\u200b\u8fdb\u884c\u200b\u4f4e\u200b\u7cbe\u5ea6\u200b\u7684\u200b\u70b9\u79ef\u200b\u64cd\u4f5c\u200b\u3002</p> </li> </ul> <p></p> <p>\u200b\u5728\u200bprefill\u200b\u65f6\u200b\uff0c\u200b\u4f7f\u7528\u200bfp16\uff1b\u200b\u5728\u200bdecode\u200b\u65f6\u200b\uff0c\u200b\u4f7f\u7528\u200bint2\uff0c\u200b\u91c7\u7528\u200b\u81ea\u5b9a\u4e49\u200bcuda kernel\u200b\u51fd\u6570\u200b\u8fdb\u884c\u200bint2\u200b\u548c\u200bint8\u200b\u7684\u200b\u4e58\u6cd5\u200b\u3002 </p>Python<pre><code># \\gpu\\generate.py\nmodel_args_prefill = fast.ModelArgs(use_kernel=False)\nmodel_args_decode = fast.ModelArgs(use_kernel=True)\ntokenizer = Tokenizer(\"./tokenizer.model\")\n\nprefill_model = fast.Transformer(model_args_prefill)\ndecode_model = fast.Transformer(model_args_decode)\n\nfp16_ckpt_path = str(Path(ckpt_dir) / \"model_state_fp16.pt\")\nfp16_checkpoint = torch.load(fp16_ckpt_path, map_location=\"cpu\")\nint2_ckpt_path = str(Path(ckpt_dir) / \"model_state_int2.pt\")\nint2_checkpoint = torch.load(int2_ckpt_path, map_location=\"cpu\")\nprefill_model.load_state_dict(fp16_checkpoint, strict=True)\ndecode_model.load_state_dict(int2_checkpoint, strict=True)\n</code></pre> ladder_int8xint2_kernel\u200b\u6838\u200b\u51fd\u6570\u200b\u7528\u4e8e\u200b\u8ba1\u7b97\u200bint2\u200b\u4e58\u200bint8\u200b\u7684\u200b\u5411\u91cf\u200b\u4e58\u6cd5\u200b\u3002 C++<pre><code>template &lt;int M, int N, int K, int ws_num, int K_block_size, int N_block_size&gt;\n__global__ void __launch_bounds__(128) ladder_int8xint2_kernel(int8_t* __restrict__ A, int8_t* __restrict__ B, __nv_bfloat16* __restrict__ dtype_transform, __nv_bfloat16* __restrict__ s, __nv_bfloat16* __restrict__ ws) {\n  constexpr int K_per_loop = 16;\n  constexpr int wmma_K = 32;\n  constexpr int wmma_N = 16;\n  int in_thread_C_local[1];\n  signed char A_local[K_per_loop];\n  int B_reshape_local[1];\n  signed char B_decode_local[K_per_loop];\n  int red_buf0[1];\n  in_thread_C_local[0] = 0;\n  #pragma unroll\n  for (int k_0 = 0; k_0 &lt; K/(K_per_loop * K_block_size); ++k_0) {\n    *(int4*)(A_local + 0) = *(int4*)(A + ((k_0 * K_per_loop * K_block_size) + (((int)threadIdx.x) * K_per_loop)));\n    B_reshape_local[0] = *(int*)(B + \n      (((int)blockIdx.x) * N_block_size * K / 4) + \n      (k_0 * K_block_size * K_per_loop * wmma_N / 4) +\n      ((((int)threadIdx.x) &gt;&gt; 1) * wmma_K * wmma_N / 4) +\n      ((((int)threadIdx.y) &gt;&gt; 3) * (wmma_K * wmma_N / 2) / 4) + \n      ((((int)threadIdx.x) &amp; 1) * (wmma_K * wmma_N / 4) / 4) + \n      ((((int)threadIdx.y) &amp; 7) * (wmma_K / 2) / 4)\n      );\n    decode_i2s_to_i8s(B_reshape_local, B_decode_local, 16);\n    #pragma unroll\n    for (int k_2_0 = 0; k_2_0 &lt; 4; ++k_2_0) {\n      in_thread_C_local[0] = __dp4a(*(int *)&amp;A_local[((k_2_0 * 4))],*(int *)&amp;B_decode_local[((k_2_0 * 4))], in_thread_C_local[0]);\n    }\n  }\n  red_buf0[0] = in_thread_C_local[0];\n  #pragma unroll\n  for (int offset = K_block_size/2; offset &gt; 0; offset /= 2) {\n    red_buf0[0] += __shfl_down_sync(__activemask(), red_buf0[0], offset, K_block_size);\n  }\n  int out_idx = ((((int)blockIdx.x) * N_block_size) + ((int)threadIdx.y));\n  int ws_idx = out_idx / (N / ws_num);\n  if (threadIdx.x == 0)\n    dtype_transform[out_idx] = (__nv_bfloat16)(((float)red_buf0[0])/(float)s[0]*(float)ws[ws_idx]);\n}\n</code></pre><p></p> <p>\u200b\u81ea\u5b9a\u4e49\u200bkernel NVIDIA GeForce RTX 4050\u200b\u6027\u80fd\u200b\u6d4b\u8bd5\u8fd0\u884c\u200b\u7ed3\u679c\u200b\uff1a </p>Text Only<pre><code>custom == np True\nShape(2560, 2560), W2A8: 54.40us, torch BF16: 73.39us\ncustom == np True\nShape(3840, 2560), W2A8: 22.66us, torch BF16: 75.50us\ncustom == np True\nShape(13824, 2560), W2A8: 39.99us, torch BF16: 364.94us\ncustom == np True\nShape(2560, 6912), W2A8: 48.95us, torch BF16: 221.11us\ncustom == np True\nShape(3200, 3200), W2A8: 45.98us, torch BF16: 128.34us\ncustom == np True\nShape(4800, 3200), W2A8: 25.54us, torch BF16: 171.50us\ncustom == np True\nShape(3200, 10240), W2A8: 37.18us, torch BF16: 342.03us\ncustom == np True\nShape(20480, 3200), W2A8: 74.29us, torch BF16: 805.49us\n</code></pre><p></p>"},{"location":"blog/bitnet%E4%B8%ADint2%E5%92%8Cint8%E7%9A%84%E4%BD%BF%E7%94%A8/#cpu\u7248\u672c\u63a8\u7406","title":"cpu\u200b\u7248\u672c\u200b\u63a8\u7406","text":"<p>cpu\u200b\u63a8\u7406\u200b\u57fa\u4e8e\u200bllama.cpp\u200b\u9879\u76ee\u200b\uff0c\u200b\u91c7\u7528\u200bT-MAC(\u200b\u67e5\u627e\u200b\u8868\u200b)\u200b\u7b97\u6cd5\u200b\u63d0\u9ad8\u200b\u4e86\u200b\u63a8\u7406\u200b\u6027\u80fd\u200b\u3002</p> <p>\u200b\u4f20\u7edf\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u9700\u8981\u200b\u628a\u200b\u6743\u91cd\u200b\u53cd\u200b\u91cf\u5316\u200b\u4e3a\u200b\u6d6e\u70b9\u6570\u200b\uff0c\u200b\u7136\u540e\u200b\u548c\u200b\u6fc0\u6d3b\u200b\u8fdb\u884c\u200b\u8ba1\u7b97\u200b\u3002\u200b\u91c7\u7528\u200b\u67e5\u627e\u200b\u8868\u200b\u5c31\u662f\u200b\uff0c\u200b\u628a\u200b1bit\u200b\u7684\u200b\u5404\u79cd\u200b\u8ba1\u7b97\u200b\u53ef\u80fd\u200b\u63d0\u524d\u200b\u8ba1\u7b97\u200b\u597d\u200b\u5b58\u50a8\u200b\u5230\u200b\u4e00\u4e2a\u200b\u67e5\u627e\u200b\u8868\u4e2d\u200b\uff0c\u200b\u7136\u540e\u200b\u901a\u8fc7\u200b\u7d22\u5f15\u200b\u8fdb\u884c\u200b\u67e5\u627e\u200b\u5b8c\u6210\u200b\u8ba1\u7b97\u200b\u3002</p>"},{"location":"blog/bitnet%E4%B8%ADint2%E5%92%8Cint8%E7%9A%84%E4%BD%BF%E7%94%A8/#simd\u8ba1\u7b97int2\u548cint8\u7684\u5411\u91cf\u70b9\u79ef","title":"SIMD\u200b\u8ba1\u7b97\u200bint2\u200b\u548c\u200bint8\u200b\u7684\u200b\u5411\u91cf\u200b\u70b9\u79ef","text":"<p>bitnet\u200b\u7684\u200b\u5b9e\u73b0\u200b\u5206\u4e3a\u200bintel\u200b\u7684\u200bAVX \u200b\u548c\u200b ARM \u200b\u7684\u200b neon \u200b\u6307\u4ee4\u200b\uff0c \u200b\u8fd9\u91cc\u200b\u5bf9\u200bAVX\u200b\u6307\u4ee4\u200b\u7248\u672c\u200b\u8fdb\u884c\u200b\u4ecb\u7ecd\u200b\u3002</p> <p>\u200b\u5c06\u200b\u91cf\u5316\u200b\u540e\u200b\u7684\u200b i2 \u200b\u6570\u636e\u200b\u4e0e\u200b i8 \u200b\u6570\u636e\u200b\u505a\u70b9\u79ef\u200b\uff0c\u200b\u5229\u7528\u200b\u5e73\u53f0\u200b SIMD \u200b\u6307\u4ee4\u200b\u505a\u200b\u5e76\u884c\u200b\u52a0\u901f\u200b\u3002 \u200b\u4e3a\u4e86\u200b\u9ad8\u6548\u200b\u5904\u7406\u200b\uff0c\u200b\u6570\u636e\u200b\u6309\u200b\u7ec4\u5206\u200b\u5757\u200b\uff0c\u200b\u6bcf\u7ec4\u200b\u505a\u200b\u5e76\u884c\u5904\u7406\u200b\uff0c\u200b\u6700\u540e\u200b\u5408\u5e76\u200b\u7ed3\u679c\u200b\u3002 \u200b\u9488\u5bf9\u200b\u4e0d\u540c\u200b\u5e73\u53f0\u200b\u5206\u522b\u200b\u4f18\u5316\u200b\uff08AVX2/NEON\uff09\u3002 </p>C++<pre><code>for each block of 32 groups:\n    for each group in block:\n        1. \u200b\u63d0\u53d6\u200b2-bit\u200b\u6570\u636e\u200b\n        2. \u200b\u8f7d\u5165\u200b8-bit\u200b\u6570\u636e\u200b\n        3. \u200b\u505a\u200b\u4e58\u6cd5\u200b\u7d2f\u52a0\u200b\uff08SIMD\u200b\u5e76\u884c\u200b\uff09\n    \u200b\u7d2f\u52a0\u200b\u6240\u6709\u200b\u7ec4\u200b\u7684\u200b\u7ed3\u679c\u200b\n\u200b\u6700\u540e\u200b\u5408\u5e76\u200b\u6240\u6709\u200b\u5757\u200b\u7684\u200b\u7ed3\u679c\u200b\uff0c\u200b\u8f93\u51fa\u200b\u70b9\u79ef\u200b\n</code></pre><p></p> <p></p>C++<pre><code>// 1. \u200b\u521d\u59cb\u5316\u200b\u63a9\u7801\u200b\u548c\u200b\u7d2f\u52a0\u5668\u200b\n// mask = _mm256_set1_epi8(0x03); \u200b\u7528\u4e8e\u200b\u63d0\u53d6\u200b2-bit\u200b\u6570\u636e\u200b\u3002\n// accu = _mm256_setzero_si256(); \u200b\u7528\u4e8e\u200b\u7d2f\u52a0\u200b\u7ed3\u679c\u200b\u3002\n// 2. \u200b\u5206\u7ec4\u200b\u5904\u7406\u200b\n// \u200b\u5916\u5c42\u200b\u5faa\u73af\u200b\uff1a\u200b\u6bcf\u6b21\u200b\u5904\u7406\u200b32\u200b\u7ec4\u200b\u3002\n// \u200b\u5185\u5c42\u200b\u5faa\u73af\u200b\uff1a\u200b\u904d\u5386\u200b\u6bcf\u7ec4\u200b\u4e2d\u200b\u7684\u200b32\u200b\u4e2a\u200b\u5143\u7d20\u200b\u3002\n// \u200b\u5bf9\u200b\u6bcf\u200b\u4e00\u7ec4\u200b\u6570\u636e\u200b\uff0c\u200b\u5206\u522b\u200b\u53d6\u51fa\u200b2-bit\u200b\u5e76\u200b\u4e0e\u200b8-bit\u200b\u6570\u636e\u200b\u505a\u200b\u4e58\u6cd5\u200b\u7d2f\u52a0\u200b\uff08\u200b\u70b9\u79ef\u200b\uff09\u3002\n// 3. \u200b\u6570\u636e\u200b\u89e3\u7801\u200b\n// 2-bit\u200b\u6570\u636e\u200b\u62c6\u6210\u200b4\u200b\u4e2a\u200bbit\u200b\u7ec4\u200b\uff08shift\u200b\u548c\u200bmask\u200b\u64cd\u4f5c\u200b\uff09\u3002\n// 8-bit\u200b\u76f4\u63a5\u200b\u8f7d\u5165\u200b\u3002\n// \u200b\u4f7f\u7528\u200b _mm256_maddubs_epi16 \u200b\u6307\u4ee4\u200b\u505a\u200b\u4e58\u6cd5\u200b\u7d2f\u52a0\u200b\u3002\n// 4. \u200b\u7d2f\u52a0\u200b\u6240\u6709\u200b\u7ed3\u679c\u200b\n// \u200b\u4f7f\u7528\u200b _mm256_add_epi16 \u200b\u548c\u200b _mm256_add_epi32 \u200b\u6307\u4ee4\u200b\u5408\u5e76\u200b\u7ed3\u679c\u200b\u3002\n// \u200b\u6700\u540e\u200b\u7528\u200b hsum_i32_8 \u200b\u5bf9\u200b SIMD \u200b\u7d2f\u52a0\u200b\u7ed3\u679c\u200b\u6c42\u548c\u200b\uff0c\u200b\u5f97\u5230\u200b\u6700\u7ec8\u200b\u70b9\u79ef\u200b\u3002\n\n*s = (float)sumi;\uff0c\u200b\u5c06\u200b\u7ed3\u679c\u200b\u8d4b\u503c\u200b\u7ed9\u200b\u8f93\u51fa\u200b\u6307\u9488\u200b\u3002\n\n#include &lt;vector&gt;\n#include &lt;type_traits&gt;\n\n// #include \"ggml-bitnet.h\"\n// #include \"ggml-quants.h\"\n#include &lt;cmath&gt;\n#include &lt;cstring&gt;\n\n#define QK_I2_S 128\n#define QK_I2 128\n\n#include &lt;immintrin.h&gt;\n#include &lt;cstdint&gt;\n#include &lt;cstdio&gt;\n#include &lt;iostream&gt;\n// horizontally add 8 int32_t\nstatic inline int hsum_i32_8(const __m256i a) {\n    const __m128i sum128 = _mm_add_epi32(_mm256_castsi256_si128(a), _mm256_extractf128_si256(a, 1));\n    const __m128i hi64 = _mm_unpackhi_epi64(sum128, sum128);\n    const __m128i sum64 = _mm_add_epi32(hi64, sum128);\n    const __m128i hi32  = _mm_shuffle_epi32(sum64, _MM_SHUFFLE(2, 3, 0, 1));\n    return _mm_cvtsi128_si32(_mm_add_epi32(sum64, hi32));\n}\n\n\nvoid print_m256i(__m256i vec) {\n    uint8_t bytes[32];\n    _mm256_storeu_si256((__m256i*)bytes, vec);\n    for (int i = 0; i &lt; 32; ++i) {\n        printf(\"%02x \", bytes[i]);\n        if ((i + 1) % 16 == 0) printf(\"\\n\");\n    }\n}\n\n// x \u200b\u6307\u5411\u200b 2-bit \u200b\u91cf\u5316\u200b\u6570\u636e\u200b\uff0cy \u200b\u6307\u5411\u200b 8-bit \u200b\u6570\u636e\u200b\u3002\n// \u200b\u6570\u636e\u200b\u88ab\u200b\u5206\u6210\u200b\u591a\u4e2a\u200b\u7ec4\u200b\uff0c\u200b\u4fbf\u4e8e\u200b\u540e\u9762\u200b\u7684\u200b SIMD \u200b\u5e76\u884c\u5904\u7406\u200b\u3002\n// \u200b\u4e3b\u8981\u200b\u53d8\u91cf\u200b\uff1a\n// QK_I2_S \u200b\u901a\u5e38\u200b\u4e3a\u200b 128\uff0c\u200b\u8868\u793a\u200b\u6bcf\u7ec4\u200b\u7684\u200b\u5143\u7d20\u200b\u6570\u200b\u3002\n// nb = n / QK_I2_S\uff0c\u200b\u7ec4\u6570\u200b\u3002\n// group32_num = nb / 32\uff0c\u200b\u6bcf\u200b 32 \u200b\u7ec4\u4e3a\u200b\u4e00\u5927\u200b\u7ec4\u200b\u3002\n// la_num = nb % 32\uff0c\u200b\u5269\u4f59\u200b\u7ec4\u6570\u200b\u3002\nvoid ggml_vec_dot_i2_i8_s(int n, float * s, size_t bs, const void * vx, size_t bx, const void * vy, size_t by, int nrc) {\n    const uint8_t *    x = (uint8_t *)vx;\n    const int8_t  *    y = (int8_t *)vy;\n\n    const int nb = n / QK_I2_S;\n    const int group32_num = nb / 32;\n    const int la_num = nb % 32;\n    const int groupla_num = nb % 32 != 0 ? 1 : 0;\n\n    // n : 128 nb : 1 group32_num : 0 la_num : 1 groupla_num : 1\n    std::cout &lt;&lt; \"n : \" &lt;&lt; n\n              &lt;&lt; \" nb : \" &lt;&lt; nb\n              &lt;&lt; \" group32_num : \" &lt;&lt; group32_num\n              &lt;&lt; \" la_num : \" &lt;&lt; la_num\n              &lt;&lt; \" groupla_num : \" &lt;&lt; groupla_num\n              &lt;&lt; std::endl;\n\n    __m256i mask = _mm256_set1_epi8(0x03);\n    __m256i accu = _mm256_setzero_si256();\n\n    for (int i=0; i &lt; group32_num; i++){\n        std::cout &lt;&lt; \"i : \" &lt;&lt; i &lt;&lt; std::endl;\n        __m256i accu32 = _mm256_setzero_si256();\n        for (int j=0; j &lt; 32; j++) {\n        // 128 index\n        __m256i xq8_3 = _mm256_loadu_si256((const __m256i*)(x + i * 32 * 32 + j * 32));\n        __m256i xq8_2 = _mm256_srli_epi16(xq8_3, 2);\n        __m256i xq8_1 = _mm256_srli_epi16(xq8_3, 4);\n        __m256i xq8_0 = _mm256_srli_epi16(xq8_3, 6);\n\n        // each 32 index\n        xq8_3 = _mm256_and_si256(xq8_3, mask);\n        xq8_2 = _mm256_and_si256(xq8_2, mask);\n        xq8_1 = _mm256_and_si256(xq8_1, mask);\n        xq8_0 = _mm256_and_si256(xq8_0, mask);\n\n        // each 32 index\n        __m256i yq8_0 = _mm256_loadu_si256((const __m256i*)(y + i * 128 * 32 + j * 128 + 0));\n        __m256i yq8_1 = _mm256_loadu_si256((const __m256i*)(y + i * 128 * 32 + j * 128 + 32));\n        __m256i yq8_2 = _mm256_loadu_si256((const __m256i*)(y + i * 128 * 32 + j * 128 + 64));\n        __m256i yq8_3 = _mm256_loadu_si256((const __m256i*)(y + i * 128 * 32 + j * 128 + 96));\n\n        // 128 index accumulation add\n        // split into 32 accumulation block\n        // each block each 128 index accumulated 4index\n        // each index maximum 256\n        // each block maximum 4 * 256\n        // each block accumulation maximum 127 * 256\n        // each 32 group index (128 index in one group) needs cast to int32\n        xq8_0 = _mm256_maddubs_epi16(xq8_0, yq8_0);\n        xq8_1 = _mm256_maddubs_epi16(xq8_1, yq8_1);\n        xq8_2 = _mm256_maddubs_epi16(xq8_2, yq8_2);\n        xq8_3 = _mm256_maddubs_epi16(xq8_3, yq8_3);\n\n        accu32 = _mm256_add_epi16(accu32, _mm256_add_epi16(xq8_0, xq8_1));\n        accu32 = _mm256_add_epi16(accu32, _mm256_add_epi16(xq8_2, xq8_3));\n        }\n        accu = _mm256_add_epi32(_mm256_madd_epi16(accu32, _mm256_set1_epi16(1)), accu);\n    }\n\n    for (int i = 0; i &lt; groupla_num; i++){\n        __m256i accula = _mm256_setzero_si256();\n        for (int j = 0; j &lt; la_num; j++) {\n        // 128 index\n        // \u200b\u4f8b\u5b50\u200b\u4e2d\u200b\u7684\u200b128\u200b\u4e2a\u200bint2\uff0c\u200b\u5206\u6210\u200b4\u200b\u7ec4\u200b\uff0c\u200b\u6bcf\u7ec4\u200b32\u200b\u4e2a\u200bint2\n        // 128\u200b\u4e2a\u200bint2\n        // xx1 xx2 xx3 xx4 xx5 xx6 xx7 xx8 (int 16)\n        // 00  xx1 xx2 xx3 xx4 xx5 xx6 xx7 (shift right 2bit)\n        // 00  00  xx1 xx2 xx3 xx4 xx5 xx6 (shift right 4bit)\n        // 00  00  00  xx1 xx2 xx3 xx4 xx5 (shift right 6bit)\n        __m256i xq8_3 = _mm256_loadu_si256((const __m256i*)(x + group32_num * 32 * 32 + j * 32));\n        __m256i xq8_2 = _mm256_srli_epi16(xq8_3, 2);\n        __m256i xq8_1 = _mm256_srli_epi16(xq8_3, 4);\n        __m256i xq8_0 = _mm256_srli_epi16(xq8_3, 6);\n\n        // each 32 index\n        // mask: 00000011 00000011\n        // --  --  --  xx4 -- -- -- xx8 (int 16)\n        // 00  --  --  xx3 -- -- -- xx7 (shift right 2bit)\n        // 00  00  --  xx2 -- -- -- xx6 (shift right 4bit)\n        // 00  00  00  xx1 -- -- -- xx5 (shift right 6bit)\n        // int2\u200b\u901a\u8fc7\u200b\u79fb\u52a8\u200bbit\u200b\u4f4d\u7f6e\u200b\u548c\u200bmask\uff0c\u200b\u62c6\u200b\u5206\u6210\u200b\u4e86\u200bint8\u200b\u8868\u793a\u200b\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u76f4\u63a5\u200b\u548c\u200bint8\u200b\u8fdb\u884c\u200b\u8fd0\u7b97\u200b\u4e86\u200b\n        xq8_3 = _mm256_and_si256(xq8_3, mask);\n        xq8_2 = _mm256_and_si256(xq8_2, mask);\n        xq8_1 = _mm256_and_si256(xq8_1, mask);\n        xq8_0 = _mm256_and_si256(xq8_0, mask);\n\n\n        print_m256i(xq8_3);\n        printf(\"-----\\n\");\n        print_m256i(xq8_2);\n        printf(\"-----\\n\");\n        print_m256i(xq8_1);\n        printf(\"-----\\n\");\n        print_m256i(xq8_0);\n        printf(\"-----\\n\");\n\n        // x\u200b\u4e2d\u200b\u7684\u200bint2\u200b\u6bcf\u200b\u95f4\u9694\u200b4\u200b\u4e2a\u200b\u6570\u5b57\u200b\u4e3a\u200b\u4e00\u7ec4\u200b\n        // 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 \n        // 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 \n        // -----\n        // 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 \n        // 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 \n        // -----\n        // 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 \n        // 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 \n        // -----\n        // 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \n        // 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n\n\n        // each 32 index\n        // \u200b\u4f8b\u5b50\u200b\u4e2d\u200b\u7684\u200b128\u200b\u4e2a\u200bint8\u200b\u6570\u636e\u200b\uff0c\u200b\u5206\u6210\u200b4\u200b\u7ec4\u200b\uff0c\u200b\u6bcf\u7ec4\u200b32\u200b\u4e2a\u200bint8\u200b\u6570\u636e\u200b\n        // xx1 xx2\n        __m256i yq8_0 = _mm256_loadu_si256((const __m256i*)(y + group32_num * 128 * 32 + j * 128 + 0));\n        __m256i yq8_1 = _mm256_loadu_si256((const __m256i*)(y + group32_num * 128 * 32 + j * 128 + 32));\n        __m256i yq8_2 = _mm256_loadu_si256((const __m256i*)(y + group32_num * 128 * 32 + j * 128 + 64));\n        __m256i yq8_3 = _mm256_loadu_si256((const __m256i*)(y + group32_num * 128 * 32 + j * 128 + 96));\n\n        print_m256i(yq8_0);\n        printf(\"-----\\n\");\n        print_m256i(yq8_1);\n        printf(\"-----\\n\");\n        print_m256i(yq8_2);\n        printf(\"-----\\n\");\n        print_m256i(yq8_3);\n\n        // \u200b\u6309\u200b\u987a\u5e8f\u5b58\u50a8\u200b\uff0c\u200b\u76f8\u90bb\u200b\u7684\u200b32\u200b\u4e2a\u200bint8\u200b\u4e3a\u200b\u4e00\u7ec4\u200b\n        // -----\n        // 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f \n        // 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f \n        // -----\n        // 20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f \n        // 30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f \n        // -----\n        // 40 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f \n        // 50 51 52 53 54 55 56 57 58 59 5a 5b 5c 5d 5e 5f \n        // -----\n        // 60 61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f \n        // 70 71 72 73 74 75 76 77 78 79 7a 7b 7c 7d 7e 7f\n\n\n        // 128 index accumulation add\n        // split into 32 accumulation block\n        // each block each 128 index accumulated 4index\n        // each index maximum 256\n        // each block maximum 4 * 256\n        // each block accumulation maximum 127 * 256\n        // each 32 group index (128 index in one group) needs cast to int32\n        // \u200b\u4e58\u52a0\u200b\u8fd0\u7b97\u200b\n        // xx1, xx5 (16bit)\n        // yy1, yy2 (16bit)\n        // res = xx1 * yy1  + xx5 * yy2\n        xq8_0 = _mm256_maddubs_epi16(xq8_0, yq8_0);\n        xq8_1 = _mm256_maddubs_epi16(xq8_1, yq8_1);\n        xq8_2 = _mm256_maddubs_epi16(xq8_2, yq8_2);\n        xq8_3 = _mm256_maddubs_epi16(xq8_3, yq8_3);\n\n        // printf(\"-----\\n\");\n        // print_m256i(xq8_3);\n        // printf(\"-----\\n\");\n        // print_m256i(xq8_2);\n        // printf(\"-----\\n\");\u3001\n        // \u200b\u6253\u5370\u200b\u7b2c\u200b1\u200b\u7ec4\u4e58\u52a0\u200b\u8ba1\u7b97\u7ed3\u679c\u200b\n        print_m256i(xq8_1);\n        printf(\"-----\\n\");\n        // print_m256i(xq8_0);\n        // printf(\"-----\\n\");\n\n\n        // 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 \n        // 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01\n        // \u200b\u4e58\u52a0\u200b\u8ba1\u7b97\u200b\n        // 20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f \n        // 30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f\n        // \u200b\u7ed3\u679c\u200b\n        // 41 00 45 00 49 00 4d 00 51 00 55 00 59 00 5d 00 \n        // 61 00 65 00 69 00 6d 00 71 00 75 00 79 00 7d 00\n\n\n        accula = _mm256_add_epi16(accula, _mm256_add_epi16(xq8_0, xq8_1));\n        accula = _mm256_add_epi16(accula, _mm256_add_epi16(xq8_2, xq8_3));\n        }\n        accu = _mm256_add_epi32(accu, _mm256_madd_epi16(accula, _mm256_set1_epi16(1)));\n    }\n    int sumi = hsum_i32_8(accu);\n    *s = (float)sumi;\n}\n</code></pre> \u200b\u6d4b\u8bd5\u4ee3\u7801\u200b\uff1a C++<pre><code>// g++ int2_int8.cpp  -mavx2\n// cat /proc/cpuinfo | grep avx\nint main()\n{\n    bool is_debug = false;\n\n    // \u200b\u8bbe\u5b9a\u200b\u5411\u91cf\u200b\u957f\u5ea6\u200b\u4e3a\u200b128\uff08\u200b\u4e00\u4e2a\u200bblock\uff09\n    int n = QK_I2_S;\n    uint8_t i2_data[QK_I2_S / 4]; // \u200b\u6bcf\u200b4\u200b\u4e2a\u200b2bit\u200b\u538b\u7f29\u6210\u200b1\u200b\u5b57\u8282\u200b\uff0c128\u200b\u4e2a\u200bint2, \u200b\u4e5f\u200b\u5c31\u662f\u200b_mm256_loadu_si256\u200b\u4e00\u6b21\u200bload256bit\uff0c\u200b\u8981\u200bload 1\u200b\u6b21\u200b\uff0c\u200b\u4e00\u6b21\u200bload 128\u200b\u4e2a\u200bint2\u200b\u6570\u5b57\u200b\uff0c\u200b\u518d\u200b\u901a\u8fc7\u200b\u504f\u79fb\u91cf\u200b\u5206\u6210\u200b32\u200b\u4e2a\u200bint2\u200b\u4e00\u7ec4\u200b\uff0c\u200b\u5206\u6210\u200b4\u200b\u7ec4\u200b\n    int8_t i8_data[QK_I2_S]; // 128\u200b\u4e2a\u200bint8\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200b_mm256_loadu_si256\u200b\u4e00\u6b21\u200bload256bit,\u200b\u8981\u200bload 4\u200b\u6b21\u200b\uff0c\u200b\u6bcf\u6b21\u200bload32\u200b\u4e2a\u200bint8\u200b\u6570\u5b57\u200b\n\n    // _mm256_maddubs_epi16\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u4e00\u6b21\u200b\u8ba1\u7b97\u200b32\u200b\u4e2a\u200bint8\u200b\u6570\u5b57\u200b\u548c\u200bint2\u200b\u6570\u5b57\u200b\n\n    // \u200b\u6784\u9020\u200b\u7b80\u5355\u200b\u6570\u636e\u200b\uff1ai2\u200b\u5168\u90e8\u200b\u4e3a\u200b1\uff0ci8\u200b\u5168\u90e8\u200b\u4e3a\u200b1\n    // 2bit\u200b\u7f16\u7801\u200b\uff1a2bit\u200b\u53ef\u200b\u8868\u793a\u200b4\u200b\u79cd\u200b\u72b6\u6001\u200b\uff0800, 01, 10, 11\uff09\uff0c\u200b\u82e5\u200b\u91c7\u7528\u200b\u5e26\u7b26\u53f7\u200b\u6574\u6570\u200b\u8868\u793a\u200b\uff0c\u200b\u8303\u56f4\u200b\u4e3a\u200b-2\u200b\u5230\u200b1\uff1b\u200b\u65e0\u200b\u7b26\u53f7\u200b\u6574\u6570\u200b\u8303\u56f4\u200b\u4e3a\u200b0\u200b\u5230\u200b3\n    for (int i = 0; i &lt; QK_I2_S / 4; ++i) {\n        if (!is_debug){\n            // \u200b\u6bcf\u200b\u5b57\u8282\u200b\u586b\u5145\u200b\u4e3a\u200b 0x55 (01010101) \u200b\u5373\u200b\u6bcf\u4e2a\u200b2bit\u200b\u4e3a\u200b\"1\"\n            i2_data[i] = 0x55;\n        }else{\n            // 00 01 10 11\n            i2_data[i] = 0x1B;\n        }\n    }\n    for (int i = 0; i &lt; QK_I2_S; ++i) {\n        if (!is_debug){\n            i8_data[i] = 1;\n        }else{\n            i8_data[i] = i;\n        }\n    }\n\n    float result = 0.0f;\n    ggml_vec_dot_i2_i8_s(n, &amp;result, 0, i2_data, 0, i8_data, 0, 0);\n\n    std::cout &lt;&lt; \"\u200b\u6d4b\u8bd5\u200b\u7ed3\u679c\u200b: \" &lt;&lt; result &lt;&lt; std::endl;\n\n    // \u200b\u7406\u8bba\u200b\u4e0a\u200b\uff0c\u200b\u5982\u679c\u200bi2\u200b\u90fd\u200b\u89e3\u7801\u200b\u4e3a\u200b1\uff0ci8\u200b\u90fd\u200b\u4e3a\u200b1\uff0c\u200b\u70b9\u79ef\u200b\u5e94\u4e3a\u200b128\n    if (result == 128.0f) {\n        std::cout &lt;&lt; \"\u200b\u901a\u8fc7\u200b\" &lt;&lt; std::endl;\n    } else {\n        std::cout &lt;&lt; \"\u200b\u672a\u200b\u901a\u8fc7\u200b\" &lt;&lt; std::endl;\n    }\n    return 0;\n}\n</code></pre><p></p> <p>\u200b\u4ee3\u7801\u200b\u4f3c\u4e4e\u200b\u6ca1\u6709\u200b\u5b8c\u5168\u200b\u5f00\u6e90\u200b\uff0c\u200b\u6bd4\u5982\u200b\u6ca1\u6709\u200b\u5728\u200b\u4ee3\u7801\u200b\u4e2d\u200b\u770b\u5230\u200b\u5982\u4e0b\u200b\u5185\u5bb9\u200b\uff1a + T-MAC\u200b\u7684\u200b\u5b9e\u73b0\u200b\u548c\u200b\u5e94\u7528\u200b\uff1f + ggml_vec_dot_i2_i8_s\u200b\u5982\u4f55\u200b\u88ab\u200b\u8c03\u7528\u200b\u4e0a\u200b\u7684\u200b\uff1f</p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>C++20\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u57fa\u4e8e\u200b\u5c5e\u6027\u200b\u6d4b\u8bd5\u200b\u7684\u200bquickcheck-cpp\u200b\u5e93\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/brpc%E4%B8%AD%E7%9A%84profile%E5%AE%9E%E7%8E%B0/","title":"brpc\u200b\u4e2d\u200b\u7684\u200bprofile\u200b\u5b9e\u73b0","text":""},{"location":"blog/brpc%E4%B8%AD%E7%9A%84profile%E5%AE%9E%E7%8E%B0/#brpc\u7684cpu-profile","title":"brpc\u200b\u7684\u200bcpu profile","text":"<p>\u200b\u4f7f\u7528\u200b\u4e86\u200bgperftools\u200b\u5e93\u200b\u3002</p> <p>butil/gperftools_profiler.h</p> <p></p>C++<pre><code>/* All this code should be usable from within C apps. */\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/* Start profiling and write profile info into fname, discarding any\n * existing profiling data in that file.\n *\n * This is equivalent to calling ProfilerStartWithOptions(fname, NULL).\n */\nBRPC_DLL_DECL int ProfilerStart(const char* fname);\n\n    ......\n}\n</code></pre> \u200b\u5b9e\u73b0\u200b\u5728\u200bgperftools\u200b\u4e2d\u200b\uff1a<p></p> C++<pre><code>extern \"C\" PERFTOOLS_DLL_DECL int ProfilerStart(const char* fname) {\n  return CpuProfiler::instance_.Start(fname, NULL);\n}\n</code></pre>"},{"location":"blog/brpc%E4%B8%AD%E7%9A%84profile%E5%AE%9E%E7%8E%B0/#brpc\u7684heap-profile","title":"brpc\u200b\u7684\u200bheap profile","text":"<p>https://brpc.apache.org/docs/builtin-services/heap_profiler/</p> <p>\u200b\u5728\u200bservice\u200b\u4e2d\u200b\uff0cheap profile\u200b\u7684\u200b\u5b9e\u73b0\u200b\u65b9\u5f0f\u200b\u6709\u200b\u4e24\u79cd\u200b\uff1a </p>C++<pre><code>void PProfService::heap(\n    ::google::protobuf::RpcController* controller_base,\n    const ::brpc::ProfileRequest* /*request*/,\n    ::brpc::ProfileResponse* /*response*/,\n    ::google::protobuf::Closure* done) {\n    ClosureGuard done_guard(done);\n    Controller* cntl = static_cast&lt;Controller*&gt;(controller_base);\n\n    if (HasJemalloc()) {\n        JeControlProfile(cntl);\n        return;\n    }\n\n    MallocExtension* malloc_ext = MallocExtension::instance();\n    ...\n    std::string obj;\n    malloc_ext-&gt;GetHeapSample(&amp;obj);\n    cntl-&gt;http_response().set_content_type(\"text/plain\");\n    cntl-&gt;response_attachment().append(obj);    \n}\n</code></pre><p></p> <p>\u200b\u65b9\u5f0f\u200b\u4e00\u200b\uff1aJeControlProfile(cntl); \u200b\u65b9\u5f0f\u200b\u4e8c\u200b\uff1amalloc_ext-&gt;GetHeapSample(&amp;obj);</p>"},{"location":"blog/brpc%E4%B8%AD%E7%9A%84profile%E5%AE%9E%E7%8E%B0/#jemalloc-profile","title":"jemalloc profile","text":"<p>jemalloc profile\u200b\u539f\u7406\u200b\u662f\u200b\u4f7f\u7528\u200b\u4e86\u200bjeMalloc\u200b\u7684\u200bmallctl\u200b\u63a5\u53e3\u200b\u548c\u200bmalloc_stats_print\u200b\u63a5\u53e3\u200b\u83b7\u53d6\u200b\u5185\u5b58\u200b\u5206\u914d\u200b\u4fe1\u606f\u200b\u3002</p> C++<pre><code>extern \"C\" {\n// weak symbol: resolved at runtime by the linker if we are using jemalloc, nullptr otherwise\nint BAIDU_WEAK mallctl(const char*, void*, size_t*, void*, size_t);\nvoid BAIDU_WEAK malloc_stats_print(void (*write_cb)(void *, const char *), void *cbopaque, const char *opts);\n}\n</code></pre> <p>mallocctl\u200b\u7684\u200b\u4f7f\u7528\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200b\u4f8b\u5b50\u200b\uff1a </p>C++<pre><code>// https://github.com/jemalloc/jemalloc/wiki/Use-Case:-Introspection-Via-mallctl*()\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;stdint.h&gt;\n#include &lt;jemalloc/jemalloc.h&gt;\n\nvoid\ndo_something(size_t i)\n{\n\n        // Leak some memory.\n        malloc(i * 100);\n}\n\nint\nmain(int argc, char **argv)\n{\n        size_t i, sz;\n\n        for (i = 0; i &lt; 100; i++) {\n                do_something(i);\n\n                // Update the statistics cached by mallctl.\n                uint64_t epoch = 1;\n                sz = sizeof(epoch);\n                mallctl(\"epoch\", &amp;epoch, &amp;sz, &amp;epoch, sz);\n\n                // Get basic allocation statistics.  Take care to check for\n                // errors, since --enable-stats must have been specified at\n                // build time for these statistics to be available.\n                size_t sz, allocated, active, metadata, resident, mapped;\n                sz = sizeof(size_t);\n                if (mallctl(\"stats.allocated\", &amp;allocated, &amp;sz, NULL, 0) == 0\n                    &amp;&amp; mallctl(\"stats.active\", &amp;active, &amp;sz, NULL, 0) == 0\n                    &amp;&amp; mallctl(\"stats.metadata\", &amp;metadata, &amp;sz, NULL, 0) == 0\n                    &amp;&amp; mallctl(\"stats.resident\", &amp;resident, &amp;sz, NULL, 0) == 0\n                    &amp;&amp; mallctl(\"stats.mapped\", &amp;mapped, &amp;sz, NULL, 0) == 0) {\n                        fprintf(stderr,\n                            \"Current allocated/active/metadata/resident/mapped: %zu/%zu/%zu/%zu/%zu\\n\",\n                            allocated, active, metadata, resident, mapped);\n                }\n        }\n\n        return (0);\n}\n</code></pre><p></p> <p>The mallctl() function provides a general interface for introspecting the memory allocator, as well as setting modifiable parameters and triggering actions. The period-separated name argument specifies a location in a tree-structured namespace; see the MALLCTL NAMESPACE section for documentation on the tree contents. To read a value, pass a pointer via oldp to adequate space to contain the value, and a pointer to its length via oldlenp; otherwise pass NULL and NULL. Similarly, to write a value, pass a pointer to the value via newp, and its length via newlen; otherwise pass NULL and 0.</p> <p>\u200b\u6e90\u7801\u200b\u5b9e\u73b0\u200bbrpc/details/jemalloc_profiler.h </p>C++<pre><code>\n</code></pre><p></p>"},{"location":"blog/brpc%E4%B8%AD%E7%9A%84profile%E5%AE%9E%E7%8E%B0/#tc_malloc-profile","title":"tc_malloc profile\ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350","text":"<p>\u200b\u901a\u8fc7\u200bMallocExtension\u200b\u62bd\u8c61\u7c7b\u200b\u63a5\u53e3\u200b\uff0c\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u83b7\u53d6\u200b\u5185\u5b58\u200b\u4fe1\u606f\u200b\u7684\u200b\u865a\u200b\u51fd\u6570\u200b\u3002\u200b\u5728\u200bbrpc\u200b\u7684\u200b\u5b9e\u73b0\u200b\u4e2d\u200b\u91c7\u7528\u200b\u4e86\u200bdlsym\u200b\u6253\u5f00\u200b\u52a8\u6001\u200b\u5e93\u4e2d\u200b\u7684\u200b\u5b9e\u73b0\u200b\u3002</p> C++<pre><code>static void InitGetInstanceFn() {\n    g_get_instance_fn = (GetInstanceFn)dlsym(\n        RTLD_NEXT, \"_ZN15MallocExtension8instanceEv\");\n}\n\nMallocExtension* BAIDU_WEAK MallocExtension::instance() {\n    // On fedora 26, this weak function is NOT overriden by the one in tcmalloc\n    // which is dynamically linked.The same issue can't be re-produced in\n    // Ubuntu and the exact cause is unknown yet. Using dlsym to get the\n    // function works around the issue right now. Note that we can't use dlsym\n    // to fully replace the weak-function mechanism since our code are generally\n    // not compiled with -rdynamic which writes symbols to the table that\n    // dlsym reads.\n    pthread_once(&amp;g_get_instance_fn_once, InitGetInstanceFn);\n    if (g_get_instance_fn) {\n        return g_get_instance_fn();\n    }\n    return NULL;\n}\n</code></pre> <p>\u200b\u901a\u8fc7\u200binstance\u200b\u7684\u200b\u6ce8\u91ca\u200b\u53ef\u4ee5\u200b\u770b\u51fa\u200b\u4e3a\u4ec0\u4e48\u200b\u8981\u200b\u901a\u8fc7\u200bdlsym\u200b\u65b9\u5f0f\u200b\u3002</p> <p>\u200b\u5728\u200bFedora 26\u200b\u7cfb\u7edf\u200b\u4e2d\u200b\uff0c\u200b\u8be5\u5f31\u200b\u51fd\u6570\u200b\u4e0d\u4f1a\u200b\u88ab\u200b\u52a8\u6001\u200b\u94fe\u63a5\u200b\u7684\u200btcmalloc\u200b\u4e2d\u200b\u7684\u200b\u540c\u540d\u200b\u51fd\u6570\u200b\u8986\u76d6\u200b\uff0c\u200b\u800c\u200b\u5728\u200bUbuntu\u200b\u7cfb\u7edf\u200b\u4e2d\u200b\u4e0d\u4f1a\u200b\u51fa\u73b0\u200b\u8fd9\u4e2a\u200b\u95ee\u9898\u200b\uff0c\u200b\u76ee\u524d\u200b\u786e\u5207\u200b\u539f\u56e0\u200b\u5c1a\u200b\u4e0d\u200b\u660e\u786e\u200b\u3002\u200b\u5f53\u4e0b\u200b\u901a\u8fc7\u200b\u4f7f\u7528\u200bdlsym\u200b\u51fd\u6570\u200b\u6765\u200b\u83b7\u53d6\u200b\u6240\u200b\u9700\u200b\u51fd\u6570\u200b\uff0c\u200b\u4ee5\u6b64\u200b\u7ed5\u8fc7\u200b\u8fd9\u4e2a\u200b\u95ee\u9898\u200b\u3002\u200b\u4f46\u200b\u8981\u200b\u6ce8\u610f\u200b\uff0c\u200b\u4e0d\u80fd\u200b\u5b8c\u5168\u200b\u7528\u200bdlsym\u200b\u66ff\u4ee3\u200b\u5f31\u200b\u51fd\u6570\u200b\u673a\u5236\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u4ee3\u7801\u200b\u901a\u5e38\u200b\u6ca1\u6709\u200b\u4f7f\u7528\u200b -rdynamic\u200b\u8fdb\u884c\u200b\u7f16\u8bd1\u200b\uff0c -rdynamic\u200b\u4f1a\u200b\u5c06\u200b\u7b26\u53f7\u200b\u5199\u5165\u200bdlsym\u200b\u8bfb\u53d6\u200b\u7684\u200b\u8868\u4e2d\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5728\u200b\u5b9e\u9645\u200b\u5f00\u53d1\u200b\u4e2d\u200b\uff0c\u200b\u5f53\u200b\u5728\u200bFedora 26\u200b\u7cfb\u7edf\u200b\u4e0b\u200b\u8fd0\u884c\u200b\u76f8\u5173\u200b\u4ee3\u7801\u200b\u65f6\u200b\uff0c\u200b\u53d1\u73b0\u200b\u5f31\u200b\u51fd\u6570\u200b\u6ca1\u6709\u200b\u5982\u200b\u9884\u671f\u200b\u88ab\u200btcmalloc\u200b\u4e2d\u200b\u7684\u200b\u51fd\u6570\u200b\u8986\u76d6\u200b\uff0c\u200b\u8fdb\u800c\u200b\u5bfc\u81f4\u200b\u529f\u80fd\u200b\u5f02\u5e38\u200b\uff0c\u200b\u4f7f\u7528\u200bdlsym\u200b\u83b7\u53d6\u200b\u51fd\u6570\u200b\u540e\u200b\uff0c\u200b\u529f\u80fd\u200b\u5f97\u4ee5\u200b\u6b63\u5e38\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u4f46\u200b\u56e0\u4e3a\u200b\u4ee3\u7801\u200b\u7f16\u8bd1\u200b\u65f6\u672a\u200b\u4f7f\u7528\u200b -rdynamic\uff0c\u200b\u6240\u4ee5\u200b\u4e0d\u80fd\u200b\u5b8c\u5168\u200b\u4f9d\u8d56\u200bdlsym\u200b\u6765\u200b\u66ff\u4ee3\u200b\u5f31\u200b\u51fd\u6570\u200b\u673a\u5236\u200b\u3002 </p> <p>\u200b\u6e90\u7801\u200b\u5b9e\u73b0\u200bbrpc/details/tcmalloc_extension.h</p> <p>\u200b\u6765\u6e90\u4e8e\u200b\uff1agperftools/malloc_extension.h</p> <ul> <li>C++\u200b\u5f00\u53d1\u200b\u6280\u6cd5\u200b\uff1a\u200b\u7528\u200bPIMPL\u200b\u6a21\u5f0f\u200b\u5f7b\u5e95\u200b\u9690\u85cf\u200b\u7c7b\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u7f16\u8bd1\u200b\u901f\u5ea6\u200b\u98de\u5347\u200b</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>zip\u200b\u538b\u7f29\u200b\u683c\u5f0f\u200b\u4e3a\u4ec0\u4e48\u200b\u662f\u4ece\u200b\u540e\u200b\u5f80\u524d\u200b\u5f00\u59cb\u200b\u89e3\u6790\u200b\u7684\u200b\uff1f</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/bvar%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%AB%98%E6%80%A7%E8%83%BD%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%9F%E8%AE%A1%E8%AE%A1%E6%95%B0%E5%99%A8/","title":"bvar\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u9ad8\u6027\u80fd\u200b\u591a\u7ebf\u7a0b\u200b\u7edf\u8ba1\u200b\u8ba1\u6570\u5668","text":""},{"location":"blog/bvar%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%AB%98%E6%80%A7%E8%83%BD%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%9F%E8%AE%A1%E8%AE%A1%E6%95%B0%E5%99%A8/#bvar\u662f\u4ec0\u4e48","title":"bvar\u200b\u662f\u200b\u4ec0\u4e48\u200b\uff1f","text":"<p>bvar\u200b\u662f\u200b\u767e\u5ea6\u200b\u5f00\u6e90\u200b\u8d21\u732e\u200b\u7ed9\u200bApache\u200b\u7684\u200b\u591a\u7ebf\u7a0b\u200b\u73af\u5883\u200b\u4e0b\u200b\u7684\u200b\u8ba1\u6570\u5668\u200b\u5e93\u200b\u3002 \u200b\u901a\u8fc7\u200b\u5b83\u200b\u53ef\u4ee5\u200b\u7edf\u8ba1\u200b\u8ba1\u6570\u5668\u200b\u3001\u200b\u6700\u5927\u503c\u200b\u3001\u200b\u6700\u5c0f\u503c\u200b\u3001windows\u200b\u4e00\u6bb5\u65f6\u95f4\u200b\u7d2f\u52a0\u200b\u3001\u200b\u9664\u4ee5\u200b\u79d2\u6570\u200b\u5c31\u662f\u200b\u6bcf\u79d2\u200b\uff0c\u200b\u8fd8\u6709\u200b\u65f6\u5ef6\u200b\u3001\u200b\u5206\u4f4d\u200b\u503c\u200b\u7b49\u7b49\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u4f60\u200b\u4f7f\u7528\u200bbrpc\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u542f\u52a8\u200b\u4e00\u4e2a\u200bserver\uff0c\u200b\u76f4\u63a5\u200b\u8bbf\u95ee\u200bhttp\u200b\u7f51\u5740\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u56fe\u5f62\u5316\u200b\u3001\u200b\u754c\u9762\u200b\u5316\u200b\u67e5\u770b\u200b\uff0c\u200b\u7f8e\u89c2\u200b\u6e05\u6670\u200b\u53c8\u200b\u65b9\u4fbf\u200b\u3002\u200b\u5f53\u7136\u200b\u4e0d\u662f\u200b\u6253\u5e7f\u544a\u200b\u54c8\u200b\uff01\uff01\uff01 \u200b\u5355\u200b\u7ef4\u5ea6\u200b\u7b80\u5355\u200b\u770b\u770b\u200b\u4e0b\u9762\u200b\u7684\u200b\u56fe\u200b\u5427\u200b\uff01</p>"},{"location":"blog/bvar%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%AB%98%E6%80%A7%E8%83%BD%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%9F%E8%AE%A1%E8%AE%A1%E6%95%B0%E5%99%A8/#bvar\u7684\u7b80\u5355\u7528\u6cd5","title":"bvar\u200b\u7684\u200b\u7b80\u5355\u200b\u7528\u6cd5","text":"<p>\u200b\u770b\u200b\u4e86\u200b\u534a\u5929\u200b\uff0c\u200b\u5230\u5e95\u200b\u5230\u200b\u4f60\u200b\u7684\u200b\u9879\u76ee\u200b\u91cc\u9762\u200b\u6709\u6ca1\u6709\u200b\u5e2e\u52a9\u200b\uff0c\u200b\u600e\u4e48\u200b\u7528\u200b\u5462\u200b\uff1f \u200b\u8fd9\u91cc\u200b\u770b\u200b\u4e00\u4e0b\u200b\u5b98\u65b9\u200b\u6587\u6863\u200b\u7684\u200b\u7b80\u5355\u200b\u4f8b\u5b50\u200b\uff1a</p> C++<pre><code>#include&lt;bvar/bvar.h&gt;\n\nbvar::Adder&lt;int&gt; value;\nvalue &lt;&lt; 1 &lt;&lt; 2 &lt;&lt; 3 &lt;&lt; -4;\nCHECK_EQ(2, value.get_value());\n\nbvar::Maxer&lt;int&gt; value;\nvalue &lt;&lt; 1 &lt;&lt; 2 &lt;&lt; 3 &lt;&lt; -4;\nCHECK_EQ(3, value.get_value());\n\n// \u200b\u83b7\u5f97\u200b\u4e4b\u524d\u200b\u4e00\u6bb5\u65f6\u95f4\u200b\u5185\u200b\u5e73\u5747\u200b\u6bcf\u79d2\u200b\u7684\u200b\u7edf\u8ba1\u200b\u503c\u200b\u3002\nbvar::Adder&lt;int&gt; sum;\n// sum_per_second.get_value()\u200b\u662f\u200bsum\u200b\u5728\u200b\u4e4b\u524d\u200b60\u200b\u79d2\u200b\u5185\u200b*\u200b\u5e73\u5747\u200b\u6bcf\u79d2\u200b*\u200b\u7684\u200b\u7d2f\u52a0\u200b\u503c\u200b\uff0c\u200b\u7701\u7565\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u65f6\u95f4\u200b\u7a97\u53e3\u200b\u7684\u8bdd\u200b\u9ed8\u8ba4\u200b\u4e3a\u200bbvar_dump_interval\u3002\nbvar::PerSecond&lt;bvar::Adder&lt;int&gt; &gt; sum_per_second(&amp;sum, 60);\n\n// \u200b\u8ba1\u7b97\u200b\u5ef6\u8fdf\u200b\nLatencyRecorder write_latency(\"table2_my_table_write\");  // produces 4 variables:\n                                                         //   table2_my_table_write_latency\n                                                         //   table2_my_table_write_max_latency\n                                                         //   table2_my_table_write_qps\n                                                         //   table2_my_table_write_count\n// In your write function\nwrite_latency &lt;&lt; the_latency_of_write;\n</code></pre> <p>\u200b\u8be6\u7ec6\u200b\u7528\u6cd5\u200b\u8bf7\u200b\u79fb\u6b65\u200b\uff1abvar_c++</p>"},{"location":"blog/bvar%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%AB%98%E6%80%A7%E8%83%BD%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%9F%E8%AE%A1%E8%AE%A1%E6%95%B0%E5%99%A8/#\u804a\u4e00\u804a\u539f\u7406","title":"\u804a\u4e00\u804a\u200b\u539f\u7406","text":"<p>\u200b\u5355\u7ebf\u7a0b\u200b\u5b9e\u73b0\u200b\u7edf\u8ba1\u200b\u5f88\u200b\u7b80\u5355\u200b\uff0c\u200b\u5bf9\u200b\u4e00\u4e2a\u200b\u7edf\u8ba1\u200b\u7684\u200b\u53d8\u91cf\u200b\u52a0\u51cf\u200b\u7b49\u200b\u64cd\u4f5c\u200b\u90fd\u200b\u6ca1\u6709\u200b\u7ade\u4e89\u200b\u3002\u200b\u591a\u7ebf\u7a0b\u200b\u5b58\u5728\u200b\u7ade\u4e89\u200b\uff0c\u200b\u5982\u679c\u200b\u662f\u200b\u590d\u6742\u200b\u6570\u636e\u7ed3\u6784\u200b\u5c31\u8981\u200b\u52a0\u9501\u200b\uff0c\u200b\u6216\u8005\u200b\u4f7f\u7528\u200block-free\u3001wait-free\u200b\u7b49\u200b\u6570\u636e\u7ed3\u6784\u200b\u5b9e\u73b0\u200b\u3002 \u200b\u666e\u901a\u200b\u6570\u636e\u7c7b\u578b\u200b\uff0cint\u3001bool\u200b\u7b49\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u539f\u5b50\u200b\u53d8\u91cf\u200b\uff0c\u200b\u6bd4\u5982\u200bstd::atomic\u200b\u7b49\u200b\u3002\u200b\u4f7f\u7528\u200b\u539f\u5b50\u200b\u53d8\u91cf\u200b\u4e5f\u200b\u8981\u200b\u6ce8\u610f\u200b\uff0c\u200b\u7b2c\u4e00\u200b\u5b83\u200b\u53ef\u80fd\u200b\u6ca1\u6709\u200b\u60f3\u8c61\u200b\u4e2d\u200b\u7684\u200b\u6ca1\u200b\u90a3\u4e48\u200b\u5feb\u200b\uff0c\u200b\u7b2c\u4e8c\u200b\u7531\u4e8e\u200b\u7f16\u8bd1\u5668\u200b\u3001cpu\u200b\u7684\u200b\u91cd\u200b\u6392\u5e8f\u200b\u53ef\u80fd\u200b\u5bfc\u81f4\u200b\u8fd0\u884c\u200b\u903b\u8f91\u200b\u4e0d\u662f\u200b\u4ee3\u7801\u200b\u903b\u8f91\u200b\uff0c\u200b\u4f1a\u200b\u5f15\u8d77\u200b\u7a0b\u5e8f\u200b\u5d29\u6e83\u200b\u3002</p> <p>cacheline\u200b\u662f\u200bcpu\u200b\u540c\u6b65\u200b\u7684\u200b\u6700\u5c0f\u200b\u5355\u4f4d\u200b\uff0c\u200b\u4e00\u822c\u200b64\u200b\u5b57\u8282\u200b\u3002\u200b\u6211\u4eec\u200b\u90fd\u200b\u77e5\u9053\u200bcpu cache\u200b\u5206\u4e3a\u200b\u4e09\u7ea7\u200b\uff0c\u200b\u4e00\u7ea7\u200bcache\uff08\u200b\u5206\u4e3a\u200b\u6307\u4ee4\u548c\u6570\u636e\u200b\u7684\u200b\uff09\u200b\u662f\u200bcpu\u200b\u6838\u200b\u79c1\u6709\u200b\u7684\u200b\uff0c\u200b\u4e8c\u7ea7\u200b\u548c\u200b\u4e09\u7ea7\u200b\u662f\u200b\u5171\u4eab\u200b\u7684\u200b\u3002\u200b\u4e00\u65e6\u200b\u6570\u636e\u200b\u66f4\u6539\u200b\u4e86\u200b\uff0c\u200b\u5176\u5b83\u200b\u6838\u8981\u200b\u770b\u89c1\u200b\uff0c\u200b\u5c31\u200b\u4f1a\u200b\u901a\u8fc7\u200bcache\u200b\u4e00\u81f4\u6027\u200b\u534f\u8bae\u200b\u540c\u6b65\u200b\u6570\u636e\u200b\uff0c\u200b\u5bf9\u4e8e\u200b\u7edf\u8ba1\u200b\u8ba1\u6570\u200b\u9891\u7e41\u200b\u66f4\u6539\u200b\u7684\u200b\u503c\u200b\uff0c\u200b\u540c\u6b65\u200b\u8fc7\u7a0b\u200b\u5f88\u200b\u8017\u65f6\u200b\u3002cacheline\u200b\u5e38\u89c1\u200b\u7684\u200b\u95ee\u9898\u200b\u6709\u200bcache bouncing\u3001cache\u200b\u4f2a\u200b\u5171\u4eab\u200b\u95ee\u9898\u200b\uff08\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u5bf9\u9f50\u200bcacheline\u200b\u907f\u514d\u200b\uff09\u3002 \u200b\u8981\u200b\u63d0\u9ad8\u200b\u6027\u80fd\u200b\uff0c\u200b\u5c31\u8981\u200b\u907f\u514d\u200b\u8ba9\u200bCPU\u200b\u9891\u7e41\u200b\u540c\u6b65\u200bcacheline\u3002</p> <p>bvar\u200b\u7684\u200b\u6838\u5fc3\u200b\u539f\u7406\u200b\u5c31\u662f\u200b\uff1a \u200b\u8ba9\u200b\u6bcf\u4e2a\u200b\u7ebf\u7a0b\u200b\u4fee\u6539\u200bthread-local\u200b\u53d8\u91cf\u200b\uff0c\u200b\u5728\u200b\u9700\u8981\u200b\u65f6\u200b\u518d\u200b\u5408\u5e76\u200b\u6240\u6709\u200b\u7ebf\u7a0b\u200b\u4e2d\u200b\u7684\u200b\u503c\u200b\u3002</p> <p>\u200b\u5f53\u200b\u5f88\u200b\u591a\u7ebf\u7a0b\u200b\u90fd\u200b\u5728\u200b\u7d2f\u52a0\u200b\u4e00\u4e2a\u200b\u8ba1\u6570\u5668\u200b\u65f6\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u7ebf\u7a0b\u200b\u53ea\u200b\u7d2f\u52a0\u200b\u79c1\u6709\u200b\u7684\u200b\u53d8\u91cf\u200b\u800c\u200b\u4e0d\u200b\u53c2\u4e0e\u200b\u5168\u5c40\u200b\u7ade\u4e89\u200b\uff0c\u200b\u5728\u200b\u8bfb\u53d6\u200b\u65f6\u200b\u7d2f\u52a0\u200b\u6240\u6709\u200b\u7ebf\u7a0b\u200b\u7684\u200b\u79c1\u6709\u200b\u53d8\u91cf\u200b\u3002\u200b\u867d\u7136\u200b\u8bfb\u6bd4\u200b\u4e4b\u524d\u200b\u6162\u591a\u200b\u4e86\u200b\uff0c\u200b\u4f46\u200b\u7531\u4e8e\u200b\u8fd9\u200b\u7c7b\u200b\u8ba1\u6570\u5668\u200b\u7684\u200b\u8bfb\u200b\u591a\u200b\u4e3a\u200b\u4f4e\u9891\u200b\u7684\u200b\u8bb0\u5f55\u200b\u548c\u200b\u5c55\u73b0\u200b\uff0c\u200b\u6162\u70b9\u200b\u65e0\u6240\u8c13\u200b\u3002\u200b\u800c\u200b\u5199\u200b\u5c31\u200b\u5feb\u200b\u591a\u200b\u4e86\u200b\uff0c\u200b\u6781\u5c0f\u200b\u7684\u200b\u5f00\u9500\u200b\u4f7f\u5f97\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u65e0\u200b\u987e\u8651\u200b\u5730\u200b\u4f7f\u7528\u200bbvar\u200b\u76d1\u63a7\u200b\u7cfb\u7edf\u200b\uff0c\u200b\u8fd9\u200b\u4fbf\u662f\u200b\u6211\u4eec\u200b\u8bbe\u8ba1\u200bbvar\u200b\u7684\u200b\u76ee\u7684\u200b\u3002 \u200b\u4e5f\u5c31\u662f\u8bf4\u200b\u8bfb\u53d6\u200b\u7684\u200b\u65f6\u5019\u200b\u5408\u5e76\u200b\u591a\u4e2a\u200b\u7ebf\u7a0b\u200b\u7684\u200bthread-local\u200b\u53d8\u91cf\u200b\uff1b\u200b\u4fee\u6539\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u7ebf\u7a0b\u200b\u4fee\u6539\u200b\u81ea\u5df1\u200b\u4fdd\u5b58\u200b\u7684\u200bthread-local\u200b\u53d8\u91cf\u200b\u3002\u200b\u56e0\u4e3a\u200b\u7edf\u8ba1\u200b\u8ba1\u6570\u200b\u662f\u200b\u5199\u200b\u591a\u200b\u8bfb\u5c11\u200b\u7684\u200b\u573a\u666f\u200b\uff0c\u200b\u8ba1\u6570\u200b\u7ed3\u679c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u65e5\u5fd7\u200bdump\u200b\u4e0b\u6765\u200b\u3002</p> <p>\u200b\u53c2\u8003\u200b\uff1abvar.md</p> <p>Cacheline\u200b\u7684\u200b\u539f\u7406\u200b\u5f15\u7528\u200b\u4e00\u6bb5\u200bbvar\u200b\u9879\u76ee\u200b\u4e2d\u200b\u7684\u200b\u4ecb\u7ecd\u200b\uff0c\u200b\u611f\u5174\u8da3\u200b\u7684\u200b\u670b\u53cb\u200b\uff0c\u200b\u9605\u8bfb\u200b\u539f\u200b\u5730\u5740\u200b\uff1a</p> <p>\u200b\u6ca1\u6709\u200b\u4efb\u4f55\u200b\u7ade\u4e89\u200b\u6216\u200b\u53ea\u200b\u88ab\u200b\u4e00\u4e2a\u200b\u7ebf\u7a0b\u200b\u8bbf\u95ee\u200b\u7684\u200b\u539f\u5b50\u200b\u64cd\u4f5c\u200b\u662f\u200b\u6bd4\u8f83\u200b\u5feb\u200b\u7684\u200b\uff0c\u201c\u200b\u7ade\u4e89\u200b\u201d\u200b\u6307\u200b\u7684\u200b\u662f\u200b\u591a\u4e2a\u200b\u7ebf\u7a0b\u200b\u540c\u65f6\u200b\u8bbf\u95ee\u200b\u540c\u4e00\u4e2a\u200bcacheline\u3002\u200b\u73b0\u4ee3\u200bCPU\u200b\u4e3a\u4e86\u200b\u4ee5\u4f4e\u200b\u4ef7\u683c\u200b\u83b7\u5f97\u200b\u9ad8\u6027\u80fd\u200b\uff0c\u200b\u5927\u91cf\u200b\u4f7f\u7528\u200b\u4e86\u200bcache\uff0c\u200b\u5e76\u200b\u628a\u200bcache\u200b\u5206\u200b\u4e86\u200b\u591a\u7ea7\u200b\u3002\u200b\u767e\u5ea6\u200b\u5185\u200b\u5e38\u89c1\u200b\u7684\u200bIntel E5-2620\u200b\u62e5\u6709\u200b32K\u200b\u7684\u200bL1 dcache\u200b\u548c\u200bicache\uff0c256K\u200b\u7684\u200bL2 cache\u200b\u548c\u200b15M\u200b\u7684\u200bL3 cache\u3002\u200b\u5176\u4e2d\u200bL1\u200b\u548c\u200bL2 cache\u200b\u4e3a\u200b\u6bcf\u4e2a\u200b\u6838\u5fc3\u200b\u72ec\u6709\u200b\uff0cL3\u200b\u5219\u200b\u6240\u6709\u200b\u6838\u5fc3\u200b\u5171\u4eab\u200b\u3002\u200b\u4e00\u4e2a\u200b\u6838\u5fc3\u200b\u5199\u5165\u200b\u81ea\u5df1\u200b\u7684\u200bL1 cache\u200b\u662f\u200b\u6781\u5feb\u200b\u7684\u200b(4 cycles, ~2ns)\uff0c\u200b\u4f46\u200b\u5f53\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u6838\u5fc3\u200b\u8bfb\u200b\u6216\u200b\u5199\u200b\u540c\u200b\u4e00\u5904\u200b\u5185\u5b58\u200b\u65f6\u200b\uff0c\u200b\u5b83\u200b\u5f97\u200b\u786e\u8ba4\u200b\u770b\u5230\u200b\u5176\u4ed6\u200b\u6838\u5fc3\u200b\u4e2d\u200b\u5bf9\u5e94\u200b\u7684\u200bcacheline\u3002\u200b\u5bf9\u4e8e\u200b\u8f6f\u4ef6\u200b\u6765\u8bf4\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u8fc7\u7a0b\u200b\u662f\u200b\u539f\u5b50\u200b\u7684\u200b\uff0c\u200b\u4e0d\u80fd\u200b\u5728\u200b\u4e2d\u95f4\u200b\u7a7f\u63d2\u200b\u5176\u4ed6\u200b\u4ee3\u7801\u200b\uff0c\u200b\u53ea\u80fd\u200b\u7b49\u5f85\u200bCPU\u200b\u5b8c\u6210\u200b\u4e00\u81f4\u6027\u200b\u540c\u6b65\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u590d\u6742\u200b\u7684\u200b\u786c\u4ef6\u200b\u7b97\u6cd5\u200b\u4f7f\u5f97\u200b\u539f\u5b50\u200b\u64cd\u4f5c\u200b\u4f1a\u200b\u53d8\u5f97\u200b\u5f88\u200b\u6162\u200b\uff0c\u200b\u5728\u200bE5-2620\u200b\u4e0a\u200b\u7ade\u4e89\u200b\u6fc0\u70c8\u200b\u65f6\u200bfetch_add\u200b\u4f1a\u200b\u8017\u8d39\u200b700\u200b\u7eb3\u79d2\u200b\u5de6\u53f3\u200b\u3002\u200b\u8bbf\u95ee\u200b\u88ab\u200b\u591a\u4e2a\u200b\u7ebf\u7a0b\u200b\u9891\u7e41\u200b\u5171\u4eab\u200b\u7684\u200b\u5185\u5b58\u200b\u5f80\u5f80\u200b\u662f\u200b\u6bd4\u8f83\u6162\u200b\u7684\u200b\u3002\u200b\u6bd4\u5982\u200b\u50cf\u200b\u4e00\u4e9b\u200b\u573a\u666f\u200b\u4e34\u754c\u200b\u533a\u200b\u770b\u7740\u200b\u5f88\u5c0f\u200b\uff0c\u200b\u4f46\u200b\u4fdd\u62a4\u200b\u5b83\u200b\u7684\u200bspinlock\u200b\u6027\u80fd\u200b\u4e0d\u4f73\u200b\uff0c\u200b\u56e0\u4e3a\u200bspinlock\u200b\u4f7f\u7528\u200b\u7684\u200bexchange, fetch_add\u200b\u7b49\u200b\u6307\u4ee4\u200b\u5fc5\u987b\u200b\u7b49\u5f85\u200b\u6700\u65b0\u200b\u7684\u200bcacheline\uff0c\u200b\u770b\u4e0a\u53bb\u200b\u53ea\u6709\u200b\u51e0\u6761\u200b\u6307\u4ee4\u200b\uff0c\u200b\u82b1\u8d39\u200b\u82e5\u5e72\u200b\u5fae\u79d2\u200b\u5e76\u200b\u4e0d\u200b\u5947\u602a\u200b\u3002 \u200b\u8981\u200b\u63d0\u9ad8\u200b\u6027\u80fd\u200b\uff0c\u200b\u5c31\u8981\u200b\u907f\u514d\u200b\u8ba9\u200bCPU\u200b\u9891\u7e41\u200b\u540c\u6b65\u200bcacheline\u3002\u200b\u8fd9\u200b\u4e0d\u5355\u200b\u548c\u200b\u539f\u5b50\u200b\u6307\u4ee4\u200b\u672c\u8eab\u200b\u7684\u200b\u6027\u80fd\u200b\u6709\u5173\u200b\uff0c\u200b\u8fd8\u4f1a\u200b\u5f71\u54cd\u200b\u5230\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u6574\u4f53\u200b\u6027\u80fd\u200b\u3002\u200b\u6700\u200b\u6709\u6548\u200b\u7684\u200b\u89e3\u51b3\u200b\u65b9\u6cd5\u200b\u5f88\u200b\u76f4\u767d\u200b\uff1a\u200b\u5c3d\u91cf\u907f\u514d\u200b\u5171\u4eab\u200b\u3002</p> <p>\u200b\u53c2\u8003\u200b\uff1aatomic_instructions</p> <p>\u200b\u5b9e\u73b0\u200bpython\u200b\u7248\u672c\u200b\u7684\u200b\u4e5f\u200b\u5f88\u200b\u7b80\u5355\u200b\uff0c\u200b\u53ea\u8981\u200b\u8ddf\u7740\u200b\u5b9e\u73b0\u200b\u5bf9\u5e94\u200b\u7684\u200bAPI\u3002\u200b\u800c\u4e14\u200b\u56e0\u4e3a\u200bpython\u200b\u5b58\u5728\u200b\u4e00\u4e2a\u200b\u53eb\u505a\u200b\u5168\u5c40\u200b\u89e3\u91ca\u5668\u200b\uff08GIL\uff09\u200b\u9501\u200b\u7684\u200b\u4e1c\u4e1c\u200b\uff0c\u200b\u6240\u4ee5\u200b\u4e0d\u200b\u9700\u8981\u200bthread-local\u200b\u5904\u7406\u200b\u3002GIL\u200b\u5c31\u662f\u200bpython\u200b\u89e3\u91ca\u5668\u200b\u8fd0\u884c\u200bpython\u200b\u4ee3\u7801\u200b\u65f6\u200b\uff0c\u200b\u591a\u7ebf\u7a0b\u200b\u4f1a\u52a0\u200b\u4e00\u628a\u200b\u5927\u9501\u200b\uff0c\u200b\u867d\u7136\u200b\u6027\u80fd\u200b\u4f4e\u200b\uff0c\u200b\u4f46\u662f\u200b\u907f\u514d\u200b\u4e86\u200b\u51b2\u7a81\u200b\u548c\u200b\u540c\u6b65\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0cpython\u200b\u8fd0\u884c\u200b\u5927\u91cf\u200b\u8ba1\u7b97\u200b\u7a0b\u5e8f\u200b\uff0c\u200b\u8981\u200b\u7528\u200bmulti-process\uff0c\u200b\u591a\u200b\u8fdb\u7a0b\u200b\u3002</p> <p>\u200b\u804a\u5230\u200b\u8fd9\u91cc\u200b\u4e86\u200b\u5c31\u662f\u200b\uff0c\u200b\u8fd8\u6709\u200bFFI\u200b\u7ed1\u5b9a\u200b\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200b\u6bd4\u5982\u200bc\u200b\u6216\u8005\u200bC++\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u591a\u7ebf\u7a0b\u200b\u7684\u200bcpu\u200b\u5927\u91cf\u200b\u8ba1\u7b97\u200b\u7a0b\u5e8f\u200b\uff0c\u200b\u901a\u8fc7\u200bctypes\u3001Pybind\u200b\u7b49\u200b\u65b9\u5f0f\u200b\u7ed1\u5b9a\u200b\u4e86\u200b\u63a5\u53e3\u200b\u3002\u200b\u90a3\u4e48\u200b\u662f\u200b\u4e0d\u200b\u9700\u8981\u200b\u8003\u8651\u200bGIL\u200b\u7684\u200b\uff0c\u200b\u56e0\u4e3a\u200bc++\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u591a\u4e2a\u200b\u7ebf\u7a0b\u200b\u7684\u200b\u8ba1\u7b97\u200b\uff0c\u200b\u6ca1\u6709\u200bGIL\u200b\u8fd9\u4e2a\u200b\u5927\u9501\u200b\u54c8\u200b\u3002</p>"},{"location":"blog/bvar%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%AB%98%E6%80%A7%E8%83%BD%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%9F%E8%AE%A1%E8%AE%A1%E6%95%B0%E5%99%A8/#\u7814\u8bfb\u4e00\u4e0b\u6e90\u7801\u54ea\u5929\u4f60\u4e5f\u53ef\u4ee5\u9020\u8f6e\u5b50","title":"\u7814\u8bfb\u200b\u4e00\u4e0b\u200b\u6e90\u7801\u200b\uff0c\u200b\u54ea\u5929\u200b\u4f60\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u9020\u200b\u8f6e\u5b50","text":"<p>\u200b\u4e86\u89e3\u200b\u4e86\u200bbvar\u200b\u7684\u200b\u529f\u80fd\u200b\u3001\u200b\u539f\u7406\u200b\u3001API\u200b\u4ecb\u7ecd\u200b\uff0c\u200b\u5230\u200b\u8fd9\u4e2a\u200b\u7a0b\u5ea6\u200b\uff0c\u200b\u4f60\u200b\u5df2\u7ecf\u200b\u719f\u6089\u200b\u4e86\u200b\u8fd9\u4e2a\u200b\u5e93\u200b\u4e86\u200b\u3002\u200b\u518d\u200b\u8e29\u200b\u8e29\u200b\u5751\u200b\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u5728\u200b\u9879\u76ee\u200b\u4e2d\u200b\u719f\u7ec3\u200b\u4f7f\u7528\u200b\u4e86\u200b\u3002\u200b\u53c8\u200b\u591a\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u5c60\u9f99\u200b\u6280\u200b\u3002 \u200b\u63a5\u4e0b\u6765\u200b\uff0c\u200b\u5256\u6790\u200b\u4e00\u4e0b\u200b\u7f8e\u5999\u200b\u7684\u200b\u6e90\u7801\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u6709\u200b\u4e00\u5929\u200b\u4f60\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u53ef\u4ee5\u200b\u9020\u200b\u51fa\u200b\u6f02\u4eae\u200b\u7684\u200b\u6539\u53d8\u200b\u4e16\u754c\u200b\u7684\u200b\u8f6e\u5b50\u200b\u3002</p> <p>\u200b\u9605\u8bfb\u200b\u6e90\u7801\u200b\u5c0f\u5999\u200b\u62db\u200b\uff1a (1) \u200b\u53ef\u4ee5\u200b\u6253\u5f00\u200bgithub1s.com\u200b\u7f51\u5740\u200b, \u200b\u4e0d\u7528\u200bclone\u200b\u5c31\u200b\u611f\u53d7\u200bvscode  (2) \u200b\u53ef\u4ee5\u200b\u914d\u5408\u200bfd\u200b\u548c\u200bgrep\u200b\u547d\u4ee4\u884c\u200b\u5de5\u5177\u200b\u4f7f\u7528\u200b\uff0c\u200b\u8ffd\u8e2a\u200b\u4ee3\u7801\u200b\u8c03\u7528\u200b</p>"},{"location":"blog/bvar%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%AB%98%E6%80%A7%E8%83%BD%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%9F%E8%AE%A1%E8%AE%A1%E6%95%B0%E5%99%A8/#agentgroup\u7c7b\u7ef4\u62a4thread_local\u6570\u7ec4","title":"AgentGroup\u200b\u7c7b\u200b\uff08\u200b\u7ef4\u62a4\u200bthread_local\u200b\u6570\u7ec4\u200b\uff09","text":"<p>AgentGroup\u200b\u7c7b\u200b\u662f\u200bbvar\u200b\u5b9e\u73b0\u200b\u4e2d\u200b\u4e00\u4e2a\u200b\u7279\u522b\u200b\u91cd\u8981\u200b\u7684\u200b\u7c7b\u200b\uff0c\u200b\u5b83\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u7edf\u8ba1\u6570\u636e\u200b\u4e2d\u200bthread_local\u200b\u53d8\u91cf\u200b\u7684\u200b\u4fdd\u5b58\u200b\u3002\u200b\u5b83\u200b\u63d0\u4f9b\u200b\u4e86\u200bthread_local\u200b\u53d8\u91cf\u200b\u7684\u200b\u521b\u5efa\u200b\u3001\u200b\u67e5\u8be2\u200b\u7b49\u200b\u529f\u80fd\u200b\u3002 \u200b\u4e0b\u9762\u200b\u4f1a\u200b\u63d0\u5230\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u7c7b\u200bAgentCombiner, \u200b\u5728\u200b\u8bfb\u53d6\u200b\u7edf\u8ba1\u200b\u503c\u65f6\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u7c7b\u4f1a\u200b\u8c03\u7528\u200bAgentGroup\u200b\u7684\u200bAPI\u200b\u53bb\u200b\u67e5\u8be2\u200b\u7136\u540e\u200b\u5408\u5e76\u200b\u6240\u6709\u200b\u7684\u200bthread_local\u200b\u53d8\u91cf\u200b\u3002 \u200b\u5728\u200b\u5176\u5b83\u200b\u4e00\u4e9b\u200bIntRecorder\u200b\u7c7b\u4e2d\u200b\uff0c\u200b\u9700\u8981\u200b\u5199\u5165\u200b\u7edf\u8ba1\u200b\u503c\u65f6\u200b\uff0c\u200b\u5c31\u200b\u4f1a\u200b\u8c03\u7528\u200bAgentGroup\u200b\u7684\u200bAPI\u200b\u53bb\u200b\u521b\u5efa\u200bthread_local\u200b\u53d8\u91cf\u200b\u548c\u200b\u4fee\u6539\u200b\u503c\u200b\u3002 \u200b\u7b80\u5355\u200b\u7406\u89e3\u200b\u8d77\u6765\u200b\uff0cAgentGroup\u200b\u50cf\u4e0d\u50cf\u200b\u4e00\u4e2a\u200b\u6570\u636e\u4e2d\u5fc3\u200b\uff0c\u200b\u7533\u8bf7\u200b\u5185\u5b58\u200b\u7ba1\u7406\u200b\u6240\u6709\u200b\u7684\u200bthread_local\u200b\u53d8\u91cf\u200b\u3001\u200b\u4ee5\u53ca\u200b\u5728\u6790\u200b\u6784\u65f6\u200b\u91ca\u653e\u200b\u5185\u5b58\u200b\u3001clear\u200b\u548c\u200breset thread_local\u200b\u53d8\u91cf\u200b\u7b49\u200b\u3002</p> <p></p>"},{"location":"blog/bvar%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%AB%98%E6%80%A7%E8%83%BD%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%9F%E8%AE%A1%E8%AE%A1%E6%95%B0%E5%99%A8/#thread_local\u53d8\u91cf\u5982\u4f55\u4fdd\u5b58\u4ee5\u53ca\u5b9a\u4e49\u7684","title":"thread_local\u200b\u53d8\u91cf\u200b\u5982\u4f55\u200b\u4fdd\u5b58\u200b\u4ee5\u53ca\u200b\u5b9a\u4e49\u200b\u7684","text":"<p>\u200b\u8be6\u7ec6\u200b\u7684\u200b\u53d8\u91cf\u200b\u548c\u200b\u6210\u5458\u200b\u53d8\u91cf\u200b\u6ce8\u91ca\u200b\uff0c\u200b\u4e3a\u4e86\u200b\u6e05\u6670\u200b\uff0c\u200b\u8865\u5145\u200b\u5230\u200b\u4ee3\u7801\u200b\u6ce8\u91ca\u200b\u4e2d\u200b\u4e86\u200b\uff0c\u200b\u5982\u4e0b\u200b\uff1a </p>C++<pre><code>template &lt;typename Agent&gt;\nclass AgentGroup {\n    // \u200b\u4fdd\u5b58\u200b\u7edf\u8ba1\u200b\u53d8\u91cf\u200b\uff0c\u200b\u6309\u7167\u200bBLOCK_SIZE\u200b\u8fdb\u884c\u200b\u5206\u5757\u200b\uff0c\u200b\u4e00\u5757\u200b\u662f\u200bThreadBlock *\uff0c\u200b\u5f88\u591a\u200b\u5757\u200b\u5c31\u662f\u200bstd::vector&lt;ThreadBlock *&gt;\n    // \u200b\u5373\u200b\u662f\u200b\uff1astatic __thread std::vector&lt;ThreadBlock *&gt;  *_s_tls_blocks;\n        const static size_t RAW_BLOCK_SIZE = 4096;\n    // \u200b\u6839\u636e\u200bAgent\u200b\u7c7b\u578b\u200b\u5224\u65ad\u200b\u4e00\u4e2a\u200bBLOCK\u200b\u4e2d\u6709\u200b\u591a\u5c11\u200b\u4e86\u200bELEMENT\u200b\u5143\u7d20\u200b\uff0c\u200b\u6bd4\u5982\u200bAgent\u200b\u662f\u200bInt\uff0csizeof(Agent)\u200b\u5c31\u662f\u200b4\n    const static size_t ELEMENTS_PER_BLOCK =\n        (RAW_BLOCK_SIZE + sizeof(Agent) - 1) / sizeof(Agent);\n\n\npublic:\n    typedef Agent   agent_type;\n    static pthread_mutex_t                      _s_mutex;\n    static AgentId                              _s_agent_kinds;\n    static std::deque&lt;AgentId&gt;                  *_s_free_ids;\n    static __thread std::vector&lt;ThreadBlock *&gt;  *_s_tls_blocks;\n};\n</code></pre><p></p> <p></p> <p>\u200b\u5728\u200bAgentGroup\u200b\u4e2d\u200b_s_tls_blocks\uff0c\u200b\u58f0\u660e\u200b\u4e3a\u200b__thread, \u200b\u5c31\u662f\u200bthread_lock\u200b\u53d8\u91cf\u200b\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200b\u5728\u200b\u591a\u7ebf\u7a0b\u200b\u73af\u5883\u200b\u4e2d\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u7ebf\u7a0b\u200b\u90fd\u200b\u5355\u72ec\u200b\u4fdd\u5b58\u200b\u4e86\u200b\u4e00\u4efd\u200b\u3002\u200b\u6bcf\u4e2a\u200b\u7ebf\u7a0b\u200b\u5199\u200b\u7edf\u8ba1\u200b\u53d8\u91cf\u200b\u5c31\u662f\u200b\u5199\u200b\u5230\u200b\u6bcf\u4e2a\u200b\u7ebf\u7a0b\u200b\u81ea\u5df1\u200b\u7684\u200b_s_tls_blocks\u200b\u4e2d\u200b\uff0c\u200b\u8bfb\u53d6\u200b\u5c31\u200b\u4f1a\u200b\u53bb\u200b\u6839\u636e\u200bID\u200b\u627e\u5230\u200b\u6240\u6709\u200b\u7684\u200b_s_tls_blocks\u200b\u4e2d\u200b\u7684\u200bAgent\uff0c\u200b\u7136\u540e\u200b\u5408\u5e76\u200b\u6570\u636e\u200b\u3002\u200b\u6bd4\u5982\u200bIntRecorder\u200b\u5c31\u662f\u200b\u628a\u200b\u6240\u6709\u200b\u7684\u200b\u52a0\u200b\u8d77\u6765\u200b\u3002</p> <p>\u200b\u901a\u8fc7\u200bID\u200b\u53bb\u200b\u627e\u200b\u540e\u9762\u200b\u4f1a\u200b\u63d0\u5230\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u7edf\u8ba1\u200b\u91cf\u200b\u6709\u200b\u4e2a\u200bID\uff0c\u200b\u5bf9\u5e94\u200b\u6bcf\u4e2a\u200b\u7ebf\u7a0b\u200b\u4e2d\u200b\u4fdd\u5b58\u200b\u7684\u200b\u6570\u636e\u200b\u5c31\u662f\u200bNode\uff0c\u200b\u901a\u8fc7\u200b\u94fe\u8868\u200b\u8bb0\u5f55\u200b\u3002\u200b\u591a\u200b\u4e00\u4e2a\u200b\u7ebf\u7a0b\u200b\u7533\u8bf7\u200b\u7edf\u8ba1\u200b\u5c31\u200b\u4f1a\u200b\u591a\u200b\u4e00\u4e2a\u200bNode\uff0c\u200b\u5408\u5e76\u200b\u65f6\u200b\u904d\u5386\u200bNode\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u627e\u5230\u200b\u7edf\u8ba1\u200b\u91cf\u200b\u7684\u200b\u6240\u6709\u200bthread_local\u200b\u53d8\u91cf\u200b\u4e86\u200b\u3002</p> <p>ThreadBlock\u200b\u7c7b\u200b\uff0c\u200b\u4fdd\u5b58\u200b\u4e86\u200bAgent\u200b\u6570\u7ec4\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u63d0\u4f9b\u200bat\u200b\u51fd\u6570\u200b\u83b7\u53d6\u200b\u503c\u200b\u3002</p> <p></p>C++<pre><code>    struct BAIDU_CACHELINE_ALIGNMENT ThreadBlock {\n        inline Agent* at(size_t offset) { return _agents + offset; };\n\n    private:\n        Agent _agents[ELEMENTS_PER_BLOCK];\n    };\n</code></pre> BAIDU_CACHELINE_ALIGNMENT\u200b\u5b8f\u200b\u5b9a\u4e49\u200b\u5b9e\u9645\u4e0a\u200b\u662f\u200b\u4f7f\u7528\u200b\u4e86\u200b__attribute__((aligned(byte_alignment)))\u3002 C++<pre><code>#if defined(COMPILER_MSVC)\n# define ALIGNAS(byte_alignment) __declspec(align(byte_alignment))\n#elif defined(COMPILER_GCC)\n# define ALIGNAS(byte_alignment) __attribute__((aligned(byte_alignment)))\n#endif\n</code></pre><p></p> <p>\u200b\u90a3\u200b\u6211\u4eec\u200b\u8981\u200b\u6839\u636e\u200bid\u200b\u83b7\u53d6\u200bAgent\u200b\u5c31\u200b\u9700\u8981\u200b\u901a\u8fc7\u200b\u8ba1\u7b97\u200b\u5148\u200b\u83b7\u53d6\u200b\u5728\u200bvector\u200b\u91cc\u200b\u7684\u200b\u54ea\u4e2a\u200bBLOCK\uff0c\u200b\u7136\u540e\u200b\u6839\u636e\u200b\u504f\u79fb\u91cf\u200b\u83b7\u53d6\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u7684\u200bAgent\u3002 </p>C++<pre><code>inline static Agent* get_tls_agent(AgentId id) {\n    if (__builtin_expect(id &gt;= 0, 1)) {\n        if (_s_tls_blocks) {\n            const size_t block_id = (size_t)id / ELEMENTS_PER_BLOCK;\n            if (block_id &lt; _s_tls_blocks-&gt;size()) {\n                ThreadBlock* const tb = (*_s_tls_blocks)[block_id];\n                if (tb) {\n                    return tb-&gt;at(id - block_id * ELEMENTS_PER_BLOCK);\n                }\n            }\n        }\n    }\n    return NULL;\n}\n</code></pre><p></p>"},{"location":"blog/bvar%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%AB%98%E6%80%A7%E8%83%BD%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%9F%E8%AE%A1%E8%AE%A1%E6%95%B0%E5%99%A8/#agent\u6a21\u677f\u53c2\u6570","title":"Agent\u200b\u6a21\u677f\u200b\u53c2\u6570","text":"<p>Agent\u200b\u6a21\u677f\u200b\u53c2\u6570\u200b\u662f\u200b\u4f20\u5165\u200b\u7684\u200b\u4e00\u4e2a\u200b\u6570\u636e\u7c7b\u578b\u200b\uff0c\u200b\u6bd4\u5982\u200bint\u3001float\u200b\u7b49\u7b49\u200b\uff0c\u200b\u6240\u4ee5\u200bAgentGroup\u200b\u7c7b\u200b\u5c31\u662f\u200b\u5206\u914d\u200b\u4e00\u5757\u200b\u5185\u5b58\u200b\u53bb\u200b\u7ba1\u7406\u200bAgent\u200b\u6570\u636e\u200b\uff0c\u200b\u5e76\u4e14\u200b\u63d0\u4f9b\u200b\u63a5\u53e3\u200b\u53bb\u200b\u67e5\u8be2\u200b\u3001\u200b\u4fee\u6539\u200b\u5b83\u200b\u3002</p>"},{"location":"blog/bvar%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%AB%98%E6%80%A7%E8%83%BD%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%9F%E8%AE%A1%E8%AE%A1%E6%95%B0%E5%99%A8/#agentcombiner\u7c7b\u5408\u5e76\u8bfb\u53d6\u6570\u636e","title":"AgentCombiner\u200b\u7c7b\u200b\uff08\u200b\u5408\u5e76\u200b\u8bfb\u53d6\u6570\u636e\u200b\uff09","text":""},{"location":"blog/bvar%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%AB%98%E6%80%A7%E8%83%BD%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%9F%E8%AE%A1%E8%AE%A1%E6%95%B0%E5%99%A8/#agentcombiner\u5b9a\u4e49","title":"AgentCombiner\u200b\u5b9a\u4e49","text":"<p>AgentCombiner\u200b\u662f\u200b\u4e2a\u200b\u6a21\u677f\u200b\u7c7b\u200b\uff0c\u200b\u5728\u200bbvar\u200b\u4e2d\u6709\u200b\u591a\u4e2a\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u7684\u200b\u4f8b\u5b50\u200b\u3002 \u200b\u5b9a\u4e49\u200b\u4e86\u200b_id, \u200b\u5728\u200b\u540e\u6587\u200b\u7684\u200bget_or_create_tls_agent\u200b\u51fd\u6570\u200b\u4e2d\u200b\u5c31\u200b\u4f1a\u200b\u901a\u8fc7\u200b\u8be5\u200b_id\u200b\u53bb\u200b\u67e5\u8be2\u200b\u5404\u4e2a\u200b\u7ebf\u7a0b\u200b\u4e0a\u200b\u4fdd\u5b58\u200b\u7684\u200bthread_local\u200b\u53d8\u91cf\u200b\u3002\u200b\u62ff\u5230\u200b\u4ee5\u540e\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u5bf9\u200b\u53d8\u91cf\u200b\u8fdb\u884c\u200b\u5199\u200b\u66f4\u65b0\u200b\u4e86\u200b\u3002 \u200b\u901a\u8fc7\u200b\u94fe\u8868\u200b\u4fdd\u5b58\u200b\u7684\u200b\u6240\u6709\u200b\u7684\u200bAgent\uff0c\u200b\u4e5f\u200b\u662f\u200b\u8981\u200b\u5408\u5e76\u200b\u7684\u200b\u76ee\u6807\u503c\u200b\u3002\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u5408\u5e76\u200b\u65f6\u200b\u7684\u200bop\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u6bd4\u5982\u200bbar::detail::AddTo\u200b\u51fd\u6570\u200b\u3002</p> <p></p> C++<pre><code>template &lt;typename ResultTp, typename ElementTp, typename BinaryOp&gt;\nclass AgentCombiner {\npublic:\n    typedef ResultTp result_type;\n    typedef ElementTp element_type;\n    typedef AgentCombiner&lt;ResultTp, ElementTp, BinaryOp&gt; self_type;\nprivate:\n    explicit AgentCombiner(const ResultTp result_identity = ResultTp(),\n                           const ElementTp element_identity = ElementTp(),\n                           const BinaryOp&amp; op = BinaryOp())\n        : _id(AgentGroup::create_new_agent())\n        , _op(op)\n        , _global_result(result_identity)\n        , _result_identity(result_identity)\n        , _element_identity(element_identity) {\n    }\n    // \u200b\u6839\u636e\u200b\u8fd9\u4e2a\u200bID\u200b\u53bb\u200b\u533a\u5206\u200b\u4e00\u4e2a\u200b\u7edf\u8ba1\u200b\u91cf\u200b(Agent)\uff0c\u200b\u901a\u8fc7\u200b\u8be5\u200bID\u200b\u53bb\u200b\u67e5\u8be2\u200bAgentGroup\u200b\u4e2d\u200b\u4fdd\u5b58\u200b\u7684\u200b\u5404\u4e2a\u200b\u7ebf\u7a0b\u200b\u66f4\u65b0\u200b\u7684\u200bthread_local Agent\n    AgentId                                     _id;\n    // \u200b\u5408\u5e76\u200b\u65f6\u200b\u7684\u200bop\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u6bd4\u5982\u200bbar::detail::AddTo&lt;long&gt;\u200b\u51fd\u6570\u200b\n    BinaryOp                                    _op;\n    mutable butil::Lock                          _lock;\n    ResultTp                                    _global_result;\n    ResultTp                                    _result_identity;\n    ElementTp                                   _element_identity;\n    // \u200b\u901a\u8fc7\u200b\u94fe\u8868\u200b\u4fdd\u5b58\u200b\u7684\u200b\u6240\u6709\u200b\u7684\u200bAgent\uff0c\u200b\u4e5f\u200b\u662f\u200b\u8981\u200b\u5408\u5e76\u200b\u7684\u200b\u76ee\u6807\u503c\u200b\n    butil::LinkedList&lt;Agent&gt;                     _agents;\n};\n</code></pre> <p>\u200b\u4e24\u4e2a\u200b\u91cd\u8981\u200b\u51fd\u6570\u200b\uff1a</p>"},{"location":"blog/bvar%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%AB%98%E6%80%A7%E8%83%BD%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%9F%E8%AE%A1%E8%AE%A1%E6%95%B0%E5%99%A8/#combine_agents\u51fd\u6570","title":"combine_agents\u200b\u51fd\u6570","text":"<p>\u200b\u6bd4\u5982\u200bIntRecorder\u200b\u7c7b\u200b\u7684\u200baverage()\u3001get_value()\u200b\u51fd\u6570\u200b\uff0c\u200b\u83b7\u53d6\u200b\u503c\u200b\u6216\u8005\u200b\u6c42\u200b\u5e73\u5747\u503c\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u5c31\u200b\u4f1a\u200b\u8c03\u7528\u200bAgentCombiner\u200b\u7684\u200bcombine_agents\u200b\u51fd\u6570\u200b\u3002\u200b\u8be5\u200b\u51fd\u6570\u200b\u904d\u5386\u200b\u6240\u6709\u200b\u7684\u200bagents\uff0c\u200b\u83b7\u53d6\u200btls_value\u200b\u6267\u884c\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u65f6\u200b\u4f20\u5165\u200b\u7684\u200bop\u3002\u200b\u6267\u884c\u200b\u5408\u5e76\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u8fd4\u56de\u200b\u7ed3\u679c\u200b\u3002 \u200b\u6ce8\u610f\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u53ef\u4ee5\u200b\u5728\u200b\u4efb\u610f\u200b\u5730\u65b9\u200b\u88ab\u200b\u8c03\u7528\u200b\uff0c\u200b\u904d\u5386\u200b\u94fe\u8868\u200b\u9700\u8981\u200b\u52a0\u9501\u200b\u3002 </p>C++<pre><code>    // [Threadsafe] May be called from anywhere\n    ResultTp combine_agents() const {\n        ElementTp tls_value;\n        butil::AutoLock guard(_lock);\n        ResultTp ret = _global_result;\n        for (butil::LinkNode&lt;Agent&gt;* node = _agents.head();\n             node != _agents.end(); node = node-&gt;next()) {\n            node-&gt;value()-&gt;element.load(&amp;tls_value);\n            call_op_returning_void(_op, ret, tls_value);\n        }\n        return ret;\n    }\n</code></pre><p></p>"},{"location":"blog/bvar%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%AB%98%E6%80%A7%E8%83%BD%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%9F%E8%AE%A1%E8%AE%A1%E6%95%B0%E5%99%A8/#get_or_create_tls_agent\u51fd\u6570","title":"get_or_create_tls_agent\u200b\u51fd\u6570","text":"<p>\u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b\u5173\u4e8e\u200b\u83b7\u53d6\u200bvalue\u200b\u6307\u9488\u200b\uff0c\u200b\u5373\u200bAgent*\uff0c\u200b\u7136\u540e\u200b\u5199\u200b\u7edf\u8ba1\u200b\u53d8\u91cf\u200b\u7684\u200b\u91cd\u8981\u200b\u51fd\u6570\u200b\u3002 \u200b\u8fd8\u662f\u200b\u4ee5\u200bIntRecorder\u200b\u7c7b\u200b\u4e3e\u4f8b\u200b\uff0cIntRecoreder\u200b\u7c7b\u200b\u91cd\u8f7d\u200b\u4e86\u200b &lt;&lt; \u200b\u8fd0\u7b97\u7b26\u200b\uff0c\u200b\u4f1a\u200b\u8c03\u7528\u200bget_or_create_tls_agent\u200b\u51fd\u6570\u200b\u3002</p> <p>\u200b\u5728\u200bbvar\u200b\u4e2d\u200b\u5f88\u591a\u200b\u91cd\u8f7d\u200b\u7684\u200b&lt;&lt;\u200b\u8fd0\u7b97\u7b26\u200b\u7684\u200b\u4f8b\u5b50\u200b\uff0c\u200b\u6bd4\u5982\u200bAdder\u200b\u7684\u200b&lt;&lt;\u200b\u5c31\u662f\u200b+\u200b\u52a0\u53f7\u200b\uff0c3 + 4 + 5 \u200b\u5982\u4e0b\u200b\uff1a </p>Text Only<pre><code>Adder&lt;int&gt; a;\na &lt;&lt; 3 &lt;&lt; 4 &lt;&lt; 5;\n</code></pre><p></p> <p></p>C++<pre><code> // We need this function to be as fast as possible.\n    inline Agent* get_or_create_tls_agent() {\n        Agent* agent = AgentGroup::get_tls_agent(_id);\n        if (!agent) {\n            // Create the agent\n            agent = AgentGroup::get_or_create_tls_agent(_id);\n            if (NULL == agent) {\n                LOG(FATAL) &lt;&lt; \"Fail to create agent\";\n                return NULL;\n            }\n        }\n        if (agent-&gt;combiner) {\n            return agent;\n        }\n        agent-&gt;reset(_element_identity, this);\n        // TODO: Is uniqueness-checking necessary here?\n        {\n            butil::AutoLock guard(_lock);\n            _agents.Append(agent);\n        }\n        return agent;\n    }\n</code></pre> IntRecoreder\u200b\u7c7b\u200b\u91cd\u8f7d\u200b\u4e86\u200b &lt;&lt; \u200b\u8fd0\u7b97\u7b26\u200b\u903b\u8f91\u200b\u5982\u4e0b\u200b\uff1a C++<pre><code>inline IntRecorder&amp; IntRecorder::operator&lt;&lt;(int64_t sample) {\n    agent_type* agent = _combiner.get_or_create_tls_agent();\n    if (BAIDU_UNLIKELY(!agent)) {\n        LOG(FATAL) &lt;&lt; \"Fail to create agent\";\n        return *this;\n    }\n    uint64_t n;\n    agent-&gt;element.load(&amp;n);\n    const uint64_t complement = _get_complement(sample);\n    uint64_t num;\n    uint64_t sum;\n    do {\n        num = _get_num(n);\n        sum = _get_sum(n);\n        if (BAIDU_UNLIKELY((num + 1 &gt; MAX_NUM_PER_THREAD) ||\n                           _will_overflow(_extend_sign_bit(sum), sample))) {\n            // Although agent-&gt;element might have been cleared at this \n            // point, it is just OK because the very value is 0 in\n            // this case\n            agent-&gt;combiner-&gt;commit_and_clear(agent);\n            sum = 0;\n            num = 0;\n            n = 0;\n        }\n    } while (!agent-&gt;element.compare_exchange_weak(\n                 n, _compress(num + 1, sum + complement)));\n    return *this;\n}\n</code></pre><p></p>"},{"location":"blog/bvar%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%AB%98%E6%80%A7%E8%83%BD%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%9F%E8%AE%A1%E8%AE%A1%E6%95%B0%E5%99%A8/#intrecorder\u7c7b-\u66f4\u65b0\u5199\u7edf\u8ba1\u91cf\u6570\u636e","title":"IntRecorder\u200b\u7c7b\u200b \uff08\u200b\u66f4\u65b0\u200b/\u200b\u5199\u200b\u7edf\u8ba1\u200b\u91cf\u200b\u6570\u636e\u200b\uff09","text":"<p>\u200b\u4e0a\u9762\u200b\u5df2\u7ecf\u200b\u5f88\u200b\u591a\u6b21\u200b\u8c08\u5230\u200b\u4e86\u200bIntRecorder\u200b\u7c7b\u200b\u4e86\u200b\uff0c\u200b\u5728\u200b\u4ecb\u7ecd\u200b\u8bfb\u200b\u548c\u200b\u5199\u200bthread_local\u200b\u53d8\u91cf\u200b\u65f6\u200b\uff0c\u200b\u6700\u4e0a\u5c42\u200b\u7684\u200b\u8c03\u7528\u200b\u90fd\u200b\u662f\u4ece\u200b\u8fd9\u4e2a\u200b\u4f8b\u5b50\u200b\u51fa\u53d1\u200b\u7684\u200b\u3002</p> <p></p>"},{"location":"blog/bvar%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%AB%98%E6%80%A7%E8%83%BD%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%9F%E8%AE%A1%E8%AE%A1%E6%95%B0%E5%99%A8/#intrecoreder\u5b9a\u4e49","title":"IntRecoreder\u200b\u5b9a\u4e49","text":"<p>IntRecoreder\u200b\u4e2d\u200b\u8bb0\u5f55\u200b\u4e86\u200bnum\u200b\u548c\u200bsum\uff0cnum\u200b\u5c31\u662f\u200b\u4e00\u5171\u200b\u7edf\u8ba1\u200b\u4e86\u200b\u591a\u5c11\u200b\u4e86\u200b\u6570\u200b\uff0csum\u200b\u5c31\u662f\u200b\u6240\u6709\u200b\u6570\u200b\u7684\u200b\u7d2f\u8ba1\u200b\u548c\u200b\u3002 \u200b\u4fdd\u5b58\u200b\u6570\u636e\u200b\u901a\u8fc7\u200b\u81ea\u5b9a\u4e49\u200b\u7684\u200bCompressing format\uff0c20bit\u200b\u4fdd\u5b58\u200bnum\uff0c44bit\u200b\u4fdd\u5b58\u200bsum\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200b\u7528\u200bint64_t\u200b\u5c31\u200b\u4fdd\u5b58\u200b\u4e86\u200b\u8fd9\u200b\u4e24\u4e2a\u200b\u6570\u200b\u3002 </p>C++<pre><code>// For calculating average of numbers.\n// Example:\n//   IntRecorder latency;\n//   latency &lt;&lt; 1 &lt;&lt; 3 &lt;&lt; 5;\n//   CHECK_EQ(3, latency.average());\nclass IntRecorder : public Variable {\n    // Compressing format:\n    // | 20 bits (unsigned) | sign bit | 43 bits |\n    //       num                   sum\n    const static size_t SUM_BIT_WIDTH=44;\n    const static uint64_t MAX_SUM_PER_THREAD = (1ul &lt;&lt; SUM_BIT_WIDTH) - 1;\n    const static uint64_t MAX_NUM_PER_THREAD = (1ul &lt;&lt; (64ul - SUM_BIT_WIDTH)) - 1;\npublic:\nint64_t average() const;\nStat get_value() const;\nprivate:\n    combiner_type           _combiner;\n    sampler_type*           _sampler;\n    std::string             _debug_name;\n};\n\n// \u200b\u91cd\u8f7d\u200boperator&lt;&lt;\ninline IntRecorder&amp; IntRecorder::operator&lt;&lt;(int64_t sample){\n    ...\n};\n</code></pre><p></p> <p></p> <p>IntRecoreder\u200b\u5411\u4e0a\u200b\u63d0\u4f9b\u200b\u4e86\u200bget_value()\u3001average()\u200b\u7b49\u200b\u51fd\u6570\u200b\u63a5\u53e3\u200b\uff0c\u200b\u88ab\u200bLatencyRecorder\u3001Window\u200b\u7b49\u200b\u8c03\u7528\u200b\uff0c\u200b\u7528\u4e8e\u200b\u8ba1\u7b97\u200b\u7edf\u8ba1\u200b\u503c\u200b\u3002</p> <p>\u200b\u9664\u4e86\u200bIntRecorder\u200b\u7c7b\u200b\uff0c\u200b\u8fd8\u6709\u200b\u5f88\u591a\u200bMaxer\u3001Adder\u3001PassiveStatus\u200b\u7b49\u200b\u7c7b\u200b\uff0c\u200b\u5b83\u4eec\u200b\u90fd\u200b\u7ee7\u627f\u200b\u81ea\u200bVariable\u200b\u7c7b\u200b\u3002</p> <p></p> <p>\u200b\u76f8\u4fe1\u200b\u4ee5\u4e0a\u200b\u7684\u200b\u8bb2\u89e3\u200b\uff0c\u200b\u5927\u81f4\u200b\u7406\u6e05\u200b\u4e86\u200bbvar\u200b\u6e90\u7801\u200b\u5b9e\u73b0\u200b\u7684\u200b\u8109\u7edc\u200b\u3002\u200b\u6211\u4eec\u200b\u901a\u8fc7\u200b\u4e00\u4e2a\u4e2a\u200b\u5b9e\u73b0\u200b\u4f8b\u5b50\u200b\uff0c\u200b\u81ea\u200b\u5e95\u5411\u4e0a\u200b\uff0c\u200b\u5206\u6790\u200b\u4e86\u200b\u4ece\u200bthread_local\u200b\u53d8\u91cf\u200b\u7684\u200b\u7533\u8bf7\u200b\uff0c\u200b\u5230\u200bIntRecorder\u200b\u7684\u200b\u5b9e\u73b0\u200b\u3002 \u200b\u611f\u8c22\u60a8\u200b\u7684\u200b\u9605\u8bfb\u200b\uff0c\u200b\u611f\u5174\u8da3\u200b\u7684\u200b\u670b\u53cb\u200b\u53ef\u4ee5\u200b\u7ed3\u5408\u200b\u6587\u7ae0\u200b\u9605\u8bfb\u200bapache/brpc\u200b\u4e2d\u200bbvar\u200b\u6e90\u7801\u200b\u6548\u679c\u200b\u66f4\u4f73\u200b\u3002</p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>C++20\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u57fa\u4e8e\u200b\u5c5e\u6027\u200b\u6d4b\u8bd5\u200b\u7684\u200bquickcheck-cpp\u200b\u5e93\u200b</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/c%E5%BC%80%E5%8F%91%E6%8A%80%E6%B3%95%E7%94%A8pimpl%E6%A8%A1%E5%BC%8F%E5%BD%BB%E5%BA%95%E9%9A%90%E8%97%8F%E7%B1%BB%E5%AE%9E%E7%8E%B0%E7%BC%96%E8%AF%91%E9%80%9F%E5%BA%A6%E9%A3%9E%E5%8D%87/","title":"C++\u200b\u5f00\u53d1\u200b\u6280\u6cd5\u200b\uff1a\u200b\u7528\u200bPIMPL\u200b\u6a21\u5f0f\u200b\u5f7b\u5e95\u200b\u9690\u85cf\u200b\u7c7b\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u7f16\u8bd1\u200b\u901f\u5ea6\u200b\u98de\u5347","text":""},{"location":"blog/c%E5%BC%80%E5%8F%91%E6%8A%80%E6%B3%95%E7%94%A8pimpl%E6%A8%A1%E5%BC%8F%E5%BD%BB%E5%BA%95%E9%9A%90%E8%97%8F%E7%B1%BB%E5%AE%9E%E7%8E%B0%E7%BC%96%E8%AF%91%E9%80%9F%E5%BA%A6%E9%A3%9E%E5%8D%87/#c\u5f00\u53d1\u6280\u6cd5\u7528pimpl\u6a21\u5f0f\u5f7b\u5e95\u9690\u85cf\u7c7b\u5b9e\u73b0\u7f16\u8bd1\u901f\u5ea6\u98de\u5347","title":"C++\u200b\u5f00\u53d1\u200b\u6280\u6cd5\u200b\uff1a\u200b\u7528\u200bPIMPL\u200b\u6a21\u5f0f\u200b\u5f7b\u5e95\u200b\u9690\u85cf\u200b\u7c7b\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u7f16\u8bd1\u200b\u901f\u5ea6\u200b\u98de\u5347","text":""},{"location":"blog/c%E5%BC%80%E5%8F%91%E6%8A%80%E6%B3%95%E7%94%A8pimpl%E6%A8%A1%E5%BC%8F%E5%BD%BB%E5%BA%95%E9%9A%90%E8%97%8F%E7%B1%BB%E5%AE%9E%E7%8E%B0%E7%BC%96%E8%AF%91%E9%80%9F%E5%BA%A6%E9%A3%9E%E5%8D%87/#\u4ec0\u4e48\u662fpimpl\u6280\u6cd5","title":"\u4ec0\u4e48\u200b\u662f\u200bPIMPL\u200b\u6280\u6cd5\u200b\uff1f","text":"<p>PIMPL\u200c\uff08Pointer to IMPLementation\uff0c\u200b\u6307\u5411\u200b\u5b9e\u73b0\u200b\u7684\u200b\u6307\u9488\u200b\uff09\uff08\u200b\u4e5f\u200b\u53eb\u200b\u201dopaque pointer\u201d\uff09\u200b\u662f\u200b\u4e00\u79cd\u200b C++ \u200b\u7f16\u7a0b\u200b\u60ef\u7528\u200b\u6cd5\u200b\uff0c\u200b\u7528\u4e8e\u200b\u200c\u200b\u9690\u85cf\u200b\u7c7b\u200b\u7684\u200b\u5b9e\u73b0\u200b\u7ec6\u8282\u200b\u200c\uff0c\u200b\u51cf\u5c11\u200b\u7f16\u8bd1\u200b\u4f9d\u8d56\u200b\uff0c\u200b\u63d0\u5347\u200b\u4ee3\u7801\u200b\u5c01\u88c5\u200b\u6027\u200b\u548c\u200b\u4e8c\u8fdb\u5236\u200b\u517c\u5bb9\u6027\u200b\u3002</p>"},{"location":"blog/c%E5%BC%80%E5%8F%91%E6%8A%80%E6%B3%95%E7%94%A8pimpl%E6%A8%A1%E5%BC%8F%E5%BD%BB%E5%BA%95%E9%9A%90%E8%97%8F%E7%B1%BB%E5%AE%9E%E7%8E%B0%E7%BC%96%E8%AF%91%E9%80%9F%E5%BA%A6%E9%A3%9E%E5%8D%87/#\u54eapimpl\u6709\u4ec0\u4e48\u7528\u9014\u5462","title":"\u54ea\u200bPIMPL\u200b\u6709\u200b\u4ec0\u4e48\u200b\u7528\u9014\u200b\u5462\u200b\uff1f","text":"<p>\u200b\u5b66\u5230\u200b\u4e00\u4e2a\u200b\u6280\u6cd5\u200b\uff0c\u200b\u603b\u200b\u8981\u200b\u5e94\u7528\u200b\u5230\u200b\u5f00\u53d1\u200b\u5b9e\u8df5\u200b\u4e2d\u200b\uff0c\u200b\u90a3\u200b\u4f60\u200b\u80af\u5b9a\u200b\u4f1a\u200b\u95ee\u200b\uff0c\u200b\u6211\u200b\u5b66\u4f1a\u200b\u4e86\u200b\u8fd9\u4e2a\u200b\u6709\u200b\u5565\u200b\u7528\u200b\u5462\u200b\uff1f</p> <ul> <li> <p>\u200b\u5e93\u200b\u5f00\u53d1\u200b\u200c\uff1a\u200b\u4fdd\u6301\u200b ABI \u200b\u517c\u5bb9\u6027\u200b\uff0c\u200b\u9690\u85cf\u200b\u5b9e\u73b0\u200b\u7ec6\u8282\u200b\u3002 \u200b\u6bd4\u5982\u200b\u4f60\u200b\u7684\u200b\u5de5\u4f5c\u200b\u662f\u200b\u63d0\u4f9b\u200bsdk\u200b\u7ed9\u200b\u4f60\u200b\u7684\u200b\u7528\u6237\u200b\uff0c\u200b\u90a3\u4e48\u200b\u4f60\u200b\u80af\u5b9a\u200b\u4e0d\u200b\u5e0c\u671b\u200b\u63a5\u53e3\u7c7b\u200b\u589e\u52a0\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u6210\u5458\u200b\u53d8\u91cf\u200b\uff0c\u200b\u5c31\u8981\u200b\u91cd\u65b0\u200b\u5bfc\u51fa\u200b\u5934\u6587\u4ef6\u200b\uff08\u200b\u5e76\u200b\u66f4\u65b0\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u52a8\u6001\u94fe\u63a5\u5e93\u200bso\uff09\uff0c\u200b\u4f60\u200b\u7684\u200b\u7528\u6237\u200b\u53ef\u6267\u884c\u7a0b\u5e8f\u200b\u4e5f\u200b\u8981\u200b\u91cd\u65b0\u200b\u7f16\u8bd1\u200b\u4e00\u6b21\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u4fdd\u8bc1\u200b\u4e8c\u8fdb\u5236\u200b\u517c\u5bb9\u6027\u200b\u3002 \u200b\u800c\u200b\u91c7\u7528\u200bPIMPL\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u4f60\u200b\u4e0d\u7528\u200b\u4fee\u6539\u200b\u63a5\u53e3\u200b\uff0c\u200b\u53ea\u200b\u9700\u8981\u200b\u4fee\u6539\u200b\u63a5\u53e3\u200b\u6307\u5411\u200b\u7684\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u4f60\u200b\u5c31\u200b\u53ea\u200b\u9700\u8981\u200b\u63d0\u4f9b\u200b\u4e00\u4e2a\u200b\u52a8\u6001\u94fe\u63a5\u5e93\u200b\u7ed9\u200b\u7528\u6237\u200b\uff0c\u200b\u7528\u6237\u200b\u4e0d\u200b\u9700\u8981\u200b\u66ff\u6362\u200b\u5934\u6587\u4ef6\u200b\uff0c\u200b\u91cd\u65b0\u200b\u7f16\u8bd1\u200b\u53ef\u6267\u884c\u6587\u4ef6\u200b\u4e86\u200b\u3002</p> </li> <li> <p>\u200c\u200b\u5927\u578b\u9879\u76ee\u200b\u200c\uff1a\u200b\u51cf\u5c11\u200b\u7f16\u8bd1\u200b\u65f6\u95f4\u200b\uff0c\u200b\u52a0\u901f\u200b\u589e\u91cf\u200b\u6784\u5efa\u200b\u3002 \u200b\u6b63\u5982\u200b\u524d\u9762\u200b\u5e93\u200b\u5f00\u53d1\u200b\u7684\u200b\u4f8b\u5b50\u200b\u8c08\u5230\u200b\u7684\u200b\uff0c\u200b\u6211\u4eec\u200b\u662f\u4e0d\u662f\u200b\u53ea\u7528\u200b\u7f16\u8bd1\u200b\u90e8\u5206\u200bso\uff0c\u200b\u76f8\u6bd4\u200b\u4e8e\u200b\u5168\u90e8\u200b\u7f16\u8bd1\u200b\uff0c\u200b\u5728\u200b\u5927\u578b\u9879\u76ee\u200b\u4e2d\u200b\u5c31\u200b\u51cf\u5c11\u200b\u4e86\u200b\u7f16\u8bd1\u200b\u65f6\u95f4\u200b\u3002\u200b\u56e0\u6b64\u200bPIMPL\u200b\u8fd8\u6709\u200b\u4e2a\u200b\u8bf4\u6cd5\u200b\uff0c\u200b\u53eb\u200b\u201dCompilation Firewall\u201d\u200b\u7f16\u8bd1\u200b\u9632\u706b\u5899\u200b\u3002</p> </li> </ul> <p>\u200c+ \u200b\u63a5\u53e3\u200b\u7a33\u5b9a\u6027\u200b\u8981\u6c42\u200b\u9ad8\u200b\u200c\uff1a\u200b\u516c\u6709\u200b\u5934\u6587\u4ef6\u200b\u9700\u8981\u200b\u957f\u671f\u200b\u4fdd\u6301\u7a33\u5b9a\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u603b\u7ed3\u200b\u4e00\u4e0b\u200bPIMPL\u200b\u7684\u200b\u4f18\u70b9\u200b\uff1a\u200c\u200b\u51cf\u5c11\u200b\u7f16\u8bd1\u200b\u4f9d\u8d56\u200b\u200c\uff0c\u200b\u4fee\u6539\u200b Impl \u200b\u4e0d\u4f1a\u200b\u89e6\u53d1\u200b\u4f9d\u8d56\u200b\u4e3b\u7c7b\u200b\u5934\u6587\u4ef6\u200b\u7684\u200b\u4ee3\u7801\u200b\u91cd\u65b0\u200b\u7f16\u8bd1\u200b\u3002\u200c\u200b\u63a5\u53e3\u200b\u7a33\u5b9a\u200b\uff0c\u200b\u516c\u6709\u200b\u63a5\u53e3\u200b\u4fdd\u6301\u200b\u4e0d\u53d8\u200b\u65f6\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u53ef\u200b\u81ea\u7531\u200b\u4fee\u6539\u200b\u3002\u200c\u200b\u4e8c\u8fdb\u5236\u200b\u517c\u5bb9\u6027\u200b\u200c\uff0c\u200b\u4fdd\u6301\u200b\u7c7b\u200b\u5e03\u5c40\u200b\u7a33\u5b9a\u200b\uff0c\u200b\u907f\u514d\u200b ABI \u200b\u7834\u574f\u200b\u3002\u200b\u9690\u85cf\u200b\u7b2c\u4e09\u65b9\u200b\u4f9d\u8d56\u200b\u200c\uff0c\u200b\u907f\u514d\u200b\u5728\u200b\u5934\u6587\u4ef6\u200b\u4e2d\u200b\u66b4\u9732\u200b\u5916\u90e8\u200b\u5e93\u200b\u5934\u6587\u4ef6\u200b\u3002</p> <p>\u200b\u5f53\u7136\u200b\u4e5f\u200b\u6709\u200b\u7f3a\u70b9\u200b\u4e86\u200b\u200c\uff0c\u200b\u6bd4\u5982\u200b\u5b83\u200b\u589e\u52a0\u200b\u4e86\u200b\u95f4\u63a5\u200b\u8bbf\u95ee\u200b\u5f00\u9500\u200b\u200c\uff0c\u200b\u901a\u8fc7\u200b\u6307\u9488\u200b\u8bbf\u95ee\u200b\u6210\u5458\u200b\uff0c\u200b\u53ef\u80fd\u200b\u6709\u200b\u8f7b\u5fae\u200b\u6027\u80fd\u200b\u635f\u5931\u200b\u3002\u200c\u200b\u76f8\u6bd4\u200b\u4f60\u200b\u76f4\u63a5\u200b\u4fee\u6539\u200b\u4e3b\u7c7b\u200b\uff0c\u200b\u63d0\u5347\u200b\u4e86\u200b\u4ee3\u7801\u200b\u590d\u6742\u5ea6\u200b\u200c\uff0c\u200b\u8fd8\u200b\u9700\u8981\u200b\u7ef4\u62a4\u200b\u4e00\u4e2a\u200b\u5b9e\u73b0\u200b\u7c7b\u200b\u3002\u200b\u7531\u4e8e\u200b\u662f\u200b\u52a8\u6001\u5185\u5b58\u200b\u5206\u914d\u200b\u200c\uff0cImpl \u200b\u901a\u5e38\u200b\u5b58\u50a8\u200b\u5728\u200b\u5806\u200b\u4e0a\u200b\uff0c\u200b\u53ef\u80fd\u200b\u5f71\u54cd\u200b\u5185\u5b58\u200b\u5c40\u90e8\u6027\u200b\u3002</p>"},{"location":"blog/c%E5%BC%80%E5%8F%91%E6%8A%80%E6%B3%95%E7%94%A8pimpl%E6%A8%A1%E5%BC%8F%E5%BD%BB%E5%BA%95%E9%9A%90%E8%97%8F%E7%B1%BB%E5%AE%9E%E7%8E%B0%E7%BC%96%E8%AF%91%E9%80%9F%E5%BA%A6%E9%A3%9E%E5%8D%87/#\u4e00\u8d77\u6765\u770b\u770b\u600e\u4e48\u5b9e\u73b0","title":"\u4e00\u200b\u8d77\u6765\u200b\u770b\u770b\u200b\u600e\u4e48\u200b\u5b9e\u73b0","text":"<p>\u200b\u524d\u9762\u200b\u8bb2\u200b\u7684\u200b\u90fd\u200b\u504f\u200b\u6982\u5ff5\u200b\u4e86\u200b\uff0c\u200b\u63a5\u4e0b\u6765\u200b\u770b\u4e00\u770b\u200b\u600e\u4e48\u200b\u5b9e\u73b0\u200b\u7684\u200b\u3002\u200b\u901a\u8fc7\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b\u51fa\u53d1\u200b\uff1a</p> <p></p>C++<pre><code>// public.h\nclass Book\n{\npublic:\n  void print();\nprivate:\n  std::string  m_Contents;\n}\n</code></pre> \u200b\u6211\u4eec\u200b\u6709\u4e2a\u200bBook\u200b\u7684\u200b\u7c7b\u200b\uff0c\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e00\u4e2a\u200bprint\u200b\u51fd\u6570\u200b\u7ed9\u200b\u7528\u6237\u200b\u3002\u200b\u8bd5\u60f3\u200b\u4e00\u4e0b\u200b\uff0c\u200b\u6211\u4eec\u200b\u8981\u200b\u7ed9\u200bBook\u200b\u7c7b\u200b\u589e\u52a0\u200b\u4fe1\u606f\u200b\uff0c\u200b\u5047\u5982\u200b\u60f3\u200b\u589e\u52a0\u200b\u4e00\u4e2a\u200b\u4e66\u540d\u200b\u6210\u5458\u200b\u53d8\u91cf\u200b\uff0c\u200b\u7528\u6237\u200b\u5e76\u200b\u4e0d\u200bcare\u3002 C++<pre><code>// public.h\nclass Book\n{\npublic:\n  void print();\nprivate:\n  std::string  m_Contents;\n  std::string  m_Title;\n}\n</code></pre> \u200b\u4f46\u662f\u200b\u6211\u4eec\u200b\u6539\u52a8\u200b\u4e86\u200b\u8fd9\u4e2a\u200b\u63a5\u53e3\u200b\uff0c\u200b\u5bfc\u81f4\u200b\u53ef\u6267\u884c\u6587\u4ef6\u200b\u9700\u8981\u200b\u91cd\u65b0\u200b\u7f16\u8bd1\u200b\u4e86\u200b\u3002\u200b\u6765\u200b\u770b\u770b\u200bPIMPL\u200b\u6280\u6cd5\u200b\u662f\u200b\u5982\u4f55\u200b\u89e3\u51b3\u200b\u8fd9\u4e2a\u200b\u95ee\u9898\u200b\u7684\u200b\uff1f<p></p> C++<pre><code>/* public.h */\nclass Book\n{\npublic:\n  Book();\n  ~Book();\n  void print();\nprivate:\n  class BookImpl;\n  BookImpl* const m_p;\n}\n</code></pre> C++<pre><code>/* private.h */\n#include \"public.h\"\n#include &lt;iostream&gt;\nclass Book::BookImpl\n{\npublic:\n  void print();\nprivate:\n  std::string  m_Contents;\n  std::string  m_Title;\n}\n</code></pre> <p>\u200b\u6539\u52a8\u200b\u4e86\u200bBook\u200b\u7c7b\u200b, \u200b\u901a\u8fc7\u200bBookImpl*\u200b\u7684\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u62c6\u5206\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u5185\u90e8\u200b\u7c7b\u200b\u3002\u200b\u5c06\u200bBook\u200b\u7684\u200b\u5177\u4f53\u200b\u5b9e\u73b0\u200b\u7ec6\u8282\u200b\u79fb\u52a8\u200b\u5230\u200b\u4e86\u200bBookImpl\u200b\u4e2d\u200b\uff0c\u200b\u5728\u200bBook\u200b\u7c7b\u4e2d\u200b\u53ea\u200b\u4fdd\u7559\u200b\u4e86\u200bprint()\u200b\u51fd\u6570\u200b\u63a5\u53e3\u200b\u3002</p> <p></p>C++<pre><code>#include \"private.h\"\n// book.cpp\nBook::Book(): m_p(new BookImpl())\n{\n}\n\nBook::~Book()\n{\n  delete m_p;\n}\n\nvoid Book::print()\n{\n  m_p-&gt;print();\n}\n\n/* then BookImpl functions */\n\nvoid Book::BookImpl::print()\n{\n  std::cout &lt;&lt; \"print from BookImpl\" &lt;&lt; std::endl;\n}\n</code></pre> main\u200b\u51fd\u6570\u200b\u6a21\u62df\u200b\u53ef\u6267\u884c\u7a0b\u5e8f\u200b\u6267\u884c\u200b\uff1a C++<pre><code>#include \"public.h\"\n\nint main()\n{\n  Book b;\n  b.print();\n}\n</code></pre><p></p> <p>\u200b\u5177\u4f53\u200b\u7684\u200b\u4ee3\u7801\u200b\u5b9e\u73b0\u200bKenForever1/cpp_idioms/pimpl\u3002</p> <p>\u200b\u4f60\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b std::unique_ptr \u200b\u6216\u200b\u7c7b\u4f3c\u200b\u7684\u200b\u65b9\u6cd5\u200b\u6765\u200b\u7ba1\u7406\u200b\u5185\u90e8\u200b\u6307\u9488\u200b\u3002</p>"},{"location":"blog/c%E5%BC%80%E5%8F%91%E6%8A%80%E6%B3%95%E7%94%A8pimpl%E6%A8%A1%E5%BC%8F%E5%BD%BB%E5%BA%95%E9%9A%90%E8%97%8F%E7%B1%BB%E5%AE%9E%E7%8E%B0%E7%BC%96%E8%AF%91%E9%80%9F%E5%BA%A6%E9%A3%9E%E5%8D%87/#\u9879\u76ee\u4e2d\u7684\u5e94\u7528","title":"\u9879\u76ee\u200b\u4e2d\u200b\u7684\u200b\u5e94\u7528","text":"<ul> <li>NVIDIA/TensorRT-LLM \u200b\u4e2d\u200bexecutor</li> </ul> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>brpc\u200b\u4e2d\u200b\u7684\u200bprofile\u200b\u5b9e\u73b0\u200b</li> <li>Fast PIMPL \u200b\u53c8\u200b\u662f\u200b\u4ec0\u4e48\u200b\u6280\u6cd5\u200b\uff1f</li> <li>C++\u200b\u5f00\u53d1\u200b\u5e38\u89c1\u95ee\u9898\u200b\u4e4b\u200bABI\u200b\u517c\u5bb9\u6027\u95ee\u9898\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/fast-pimpl-%E5%8F%88%E6%98%AF%E4%BB%80%E4%B9%88%E6%8A%80%E6%B3%95/","title":"Fast PIMPL \u200b\u53c8\u200b\u662f\u200b\u4ec0\u4e48\u200b\u6280\u6cd5\u200b\uff1f","text":""},{"location":"blog/fast-pimpl-%E5%8F%88%E6%98%AF%E4%BB%80%E4%B9%88%E6%8A%80%E6%B3%95/#fast-pimpl-\u53c8\u662f\u4ec0\u4e48\u6280\u6cd5","title":"Fast PIMPL \u200b\u53c8\u200b\u662f\u200b\u4ec0\u4e48\u200b\u6280\u6cd5\u200b\uff1f","text":"<p>\u200b\u524d\u9762\u200b\u6211\u4eec\u200b\u8bb2\u89e3\u200b\u4e86\u200bPIMPL\u200b\u6280\u6cd5\u200b\uff0c\u200b\u73b0\u5728\u200b\u53c8\u200b\u6765\u200b\u4e00\u4e2a\u200bFast PIMPL\uff0c\u200b\u8fd9\u200b\u53c8\u200b\u662f\u200b\u4ec0\u4e48\u200b\u4e1c\u4e1c\u200b\uff01\u200b\u4ece\u200b\u5b57\u9762\u200b\u610f\u601d\u200b\u731c\u200b\uff0c\u200b\u8fd9\u200b\u80af\u5b9a\u200b\u662f\u200bPIMPL\u200b\u7684\u200b\u5347\u7ea7\u7248\u200b\u6539\u8fdb\u7248\u200b\u52d2\u200b\uff0c\u200b\u80af\u5b9a\u200b\u89e3\u51b3\u200b\u4e86\u200b\u4e00\u4e9b\u200bPIMPL\u200b\u6280\u6cd5\u200b\u5b58\u5728\u200b\u7684\u200b\u95ee\u9898\u200b\u3002</p> <p>\u200b\u606d\u559c\u200b\u4f60\u200b\uff0c\u200b\u7b54\u5bf9\u200b\u4e86\u200b\uff01\uff01\uff01</p> <p>\u200cFast Pimpl\u200c \u200b\u662f\u200b PIMPL \u200b\u6a21\u5f0f\u200b\u7684\u200b\u4e00\u79cd\u200b\u4f18\u5316\u200b\u5b9e\u73b0\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u662f\u200b\u4e3a\u4e86\u200b\u89e3\u51b3\u200b\u4f20\u7edf\u200b PIMPL \u200b\u6a21\u5f0f\u200b\u4e2d\u56e0\u200b\u52a8\u6001\u5185\u5b58\u200b\u5206\u914d\u200b\uff08\u200b\u5982\u200b std::unique_ptr\uff09\u200b\u5bfc\u81f4\u200b\u7684\u200b\u6027\u80fd\u200b\u5f00\u9500\u200b\u95ee\u9898\u200b\u3002\u200b\u901a\u8fc7\u200b\u8fd9\u79cd\u200b\u65b9\u5f0f\u200b\u51cf\u5c11\u200b\u5806\u200b\u5185\u5b58\u200b\u5206\u914d\u200b\u6b21\u6570\u200b\u6216\u200b\u4f18\u5316\u200b\u5185\u5b58\u200b\u5e03\u5c40\u200b\uff0c\u200b\u63d0\u5347\u200b\u8bbf\u95ee\u200b\u6548\u7387\u200b\u200c\u3002</p> <p>\u200b\u524d\u9762\u200b\u63d0\u5230\u200b\u7684\u200bPIMPL\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u65e0\u8bba\u662f\u200b\u539f\u59cb\u200b\u6307\u9488\u200b\u7684\u200b\u65b9\u5f0f\u200b\u3001\u200b\u8fd8\u662f\u200bunique_ptr\u200b\u7684\u200b\u65b9\u5f0f\u200b\u90fd\u200b\u662f\u200b\u52a8\u6001\u5185\u5b58\u200b\u5206\u914d\u200b\u7684\u200b\u3002</p> <p>\u200b\u8981\u200b\u89e3\u51b3\u200b\u8fd9\u4e2a\u200b\u95ee\u9898\u200b\u5c31\u200b\u9700\u8981\u200b\uff1a + \u200b\u907f\u514d\u200b\u52a8\u6001\u5185\u5b58\u200b\u5206\u914d\u200b\u200c\uff1aPIMPL \u200b\u9700\u8981\u200b\u4e3a\u200b Impl \u200b\u5bf9\u8c61\u200b\u52a8\u6001\u200b\u5206\u914d\u5185\u5b58\u200b\uff0c\u200b\u800c\u200b Fast Pimpl \u200b\u53ef\u80fd\u200b\u901a\u8fc7\u200b\u6808\u200b\u5206\u914d\u200b\u6216\u200b\u5185\u5b58\u200b\u6c60\u200b\u6280\u672f\u200b\u964d\u4f4e\u200b\u5f00\u9500\u200b\u200c\u3002 + \u200c\u200b\u5185\u5b58\u200b\u5e03\u5c40\u200b\u4f18\u5316\u200b\u200c\uff1a\u200b\u5c06\u200b Impl \u200b\u5bf9\u8c61\u200b\u76f4\u63a5\u200b\u5d4c\u5165\u200b\u4e3b\u7c7b\u200b\u6216\u200b\u901a\u8fc7\u200b\u56fa\u5b9a\u200b\u5927\u5c0f\u200b\u7684\u200b\u7f13\u51b2\u533a\u200b\u5b58\u50a8\u200b\uff0c\u200b\u51cf\u5c11\u200b\u6307\u9488\u200b\u95f4\u63a5\u200b\u8bbf\u95ee\u200b\u7684\u200b\u5f00\u9500\u200b\u200c\u3002</p> <p>Fast PIMPL\u200b\u8fd9\u79cd\u200b\u6a21\u5f0f\u200b\u5728\u200b\u9ad8\u6027\u80fd\u200b\u6216\u200b\u5185\u5b58\u200b\u53d7\u9650\u200b\u7684\u200b\u73af\u5883\u200b\u4e2d\u200b\u7ecf\u5e38\u200b\u88ab\u200b\u4f7f\u7528\u200b\uff0c\u200b\u7528\u4e8e\u200b\u89e3\u200b\u8026\u200b\u3001\u200b\u9690\u85cf\u200b\u5b9e\u73b0\u200b\u7ec6\u8282\u200b\u3002</p>"},{"location":"blog/fast-pimpl-%E5%8F%88%E6%98%AF%E4%BB%80%E4%B9%88%E6%8A%80%E6%B3%95/#\u5982\u4f55\u5b9e\u73b0\u5462","title":"\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u5462\u200b\uff1f","text":"C++<pre><code>// Wrapper.hpp\nstruct Wrapper {\n    Wrapper();\n    ~Wrapper();\n\n    // deprecated in C++23\n    // \u200b\u5206\u914d\u200b\u56fa\u5b9a\u200bsize\u200b\u7684\u200b\u5185\u5b58\u200b\uff08\u200b\u8fd9\u91cc\u200b\u53ea\u662f\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b32\uff0c\u200b\u5177\u4f53\u200b\u7c7b\u200b\u9700\u8981\u200b\u6307\u5b9a\u200b\u5177\u4f53\u200bSize\uff09\n    // \u200b\u5bf9\u200b\u5176\u200b\u8981\u6c42\u200b\uff0calignof(std::max_align_t) = 16\uff0c\u200b\u6240\u6709\u200b\u7684\u200bscalar type\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u6309\u7167\u200b\u8fd9\u4e2a\u200b\u503c\u200b\u5bf9\u200b\u5176\u200b\n    std::aligned_storage_t&lt;32, alignof(std::max_align_t)&gt; storage;\n\n    struct Wrapped; // forward declaration\n    Wrapped* handle;\n};\n</code></pre> C++<pre><code>// Wrapper.cpp\nstruct Wrapper::Wrapped {\n};\n\nWrapper::Wrapper() {\n    static_assert(sizeof(Wrapped) &lt;= sizeof(this-&gt;storage) , \"Object can't fit into local storage\");\n    // \u200b\u91c7\u7528\u200bplacement new\u200b\u6784\u9020\u200bWrapped\n    this-&gt;handle = new (&amp;this-&gt;storage) Wrapped();\n}\n\nWrapper::~Wrapper() {\n    // \u200b\u663e\u793a\u200b\u7684\u200b\u6790\u6784\u200b\n    handle-&gt;~Wrapped();\n}\n</code></pre> <p>\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u4e0d\u200b\u9700\u8981\u200b\u6307\u5411\u200b\u5305\u88c5\u200b\u7c7b\u200b\u5b9e\u4f8b\u200b\u7684\u200b\u53e5\u67c4\u200b\u3002\u200b\u4e3a\u4e86\u200b\u51cf\u5c11\u200b\u5185\u5b58\u200b\u5360\u7528\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u8f85\u52a9\u200b\u51fd\u6570\u200b\u8bbf\u95ee\u200b\u5305\u88c5\u200b\u7c7b\u200b\u3002</p> C++<pre><code>static Wrapper::Wrapped* get_wrapped(Wrapper* wrapper) {\n    // c++17 compatible\n    return std::launder(reinterpret_cast&lt;Wrapper::Wrapped*&gt;(&amp;wrapper-&gt;storage));\n}\n</code></pre> <p>\u200b\u5b8c\u6574\u200b\u4ee3\u7801\u200b\u8bbf\u95ee\u200bKenForever1/cpp_idioms/fast_pimpl</p> <p>\u200b\u4f60\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u67e5\u770b\u200bsqjk/pimpl_ptr\u3002</p> <p>\u200b\u6ce8\u610f\u200b\u7684\u200b\u662f\u200b\uff0c\u200b\u4e0e\u200b\u4efb\u4f55\u200b\u5176\u4ed6\u200b\u4f18\u5316\u200b\u4e00\u6837\u200b\uff0c\u200b\u53ea\u6709\u200b\u5728\u200b\u5206\u6790\u200b\u548c\u200b\u7ecf\u9a8c\u200b\u8bc1\u660e\u200b\u5728\u200b\u4f60\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u786e\u5b9e\u200b\u9700\u8981\u200b\u989d\u5916\u200b\u7684\u200b\u6027\u80fd\u200b\u63d0\u5347\u200b\u65f6\u200b\uff0c\u200b\u624d\u200b\u4f7f\u7528\u200b\u8fd9\u4e2a\u200b\u65b9\u6cd5\u200b\u3002</p>"},{"location":"blog/fast-pimpl-%E5%8F%88%E6%98%AF%E4%BB%80%E4%B9%88%E6%8A%80%E6%B3%95/#\u989d\u5916\u77e5\u8bc6\u6269\u5145","title":"\u989d\u5916\u200b\u77e5\u8bc6\u200b\u6269\u5145","text":""},{"location":"blog/fast-pimpl-%E5%8F%88%E6%98%AF%E4%BB%80%E4%B9%88%E6%8A%80%E6%B3%95/#alignment-\u5bf9\u5176\u8981\u6c42","title":"alignment \u200b\u5bf9\u200b\u5176\u200b\u8981\u6c42","text":"<p>\u200b\u6bcf\u4e2a\u200b\u7c7b\u578b\u200b\u5728\u200b\u5185\u5b58\u200b\u4e2d\u200b\u90fd\u200b\u6709\u200b\u5bf9\u200b\u5176\u200b\u8981\u6c42\u200b\uff0c\u200b\u8868\u793a\u200b\u6b64\u200b\u7c7b\u578b\u200b\u7684\u200b\u5bf9\u8c61\u200b\u53ef\u4ee5\u200b\u88ab\u200b\u5206\u914d\u200b\u7684\u200b\u8fde\u7eed\u200b\u5730\u5740\u200b\u4e4b\u95f4\u200b\u7684\u200b\u5b57\u8282\u6570\u200b\u3002\u200b\u6bd4\u5982\u200b\uff1a</p> C++<pre><code>#include &lt;iostream&gt;\n\n// objects of type S can be allocated at any address\n// because both S.a and S.b can be allocated at any address\nstruct S\n{\n    char a; // size: 1, alignment: 1\n    char b; // size: 1, alignment: 1\n}; // size: 2, alignment: 1\n\n// objects of type X must be allocated at 4-byte boundaries\n// because X.n must be allocated at 4-byte boundaries\n// because int's alignment requirement is (usually) 4\nstruct X\n{\n    int n;  // size: 4, alignment: 4\n    char c; // size: 1, alignment: 1\n    // three bytes of padding bits\n}; // size: 8, alignment: 4 \n\nint main()\n{\n    std::cout &lt;&lt; \"alignof(S) = \" &lt;&lt; alignof(S) &lt;&lt; '\\n'\n              &lt;&lt; \"sizeof(S)  = \" &lt;&lt; sizeof(S) &lt;&lt; '\\n'\n              &lt;&lt; \"alignof(X) = \" &lt;&lt; alignof(X) &lt;&lt; '\\n'\n              &lt;&lt; \"sizeof(X)  = \" &lt;&lt; sizeof(X) &lt;&lt; '\\n';\n}\n// alignof(S) = 1\n// sizeof(S)  = 2\n// alignof(X) = 4\n// sizeof(X)  = 8\n</code></pre>"},{"location":"blog/fast-pimpl-%E5%8F%88%E6%98%AF%E4%BB%80%E4%B9%88%E6%8A%80%E6%B3%95/#\u9884\u5148\u5206\u914d\u9759\u6001\u5185\u5b58placement-new\u539f\u5730\u6784\u9020","title":"\u9884\u5148\u200b\u5206\u914d\u200b\u9759\u6001\u200b\u5185\u5b58\u200b\uff0cplacement new\u200b\u539f\u5730\u200b\u6784\u9020\u200b\ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350","text":"<p>\u200b\u901a\u8fc7\u200b\u524d\u9762\u200b\u7684\u200bstd::aligned_storage_t\u200b\u53ef\u4ee5\u200b\u9884\u5148\u200b\u5206\u914d\u200bSize\u200b\u548c\u200bAlign\u200b\u8981\u6c42\u200b\u7684\u200b\u4e00\u6bb5\u200b\u9759\u6001\u200b\u5185\u5b58\u200b\u3002\u200b\u5206\u914d\u200b\u7684\u200b\u5185\u5b58\u200b\u8981\u6c42\u200b\u662f\u200bAlign\u200b\u7684\u200b\u7ea6\u6570\u200b.</p> <p>c++\u200b\u7684\u200bstd::aligned_storage_t\u200b\u76f8\u5f53\u4e8e\u200b\uff1a </p>C++<pre><code>template&lt;std::size_t Len, std::size_t Align = /* default alignment not implemented */&gt;\nstruct aligned_storage\n{\n    struct type\n    {\n        alignas(Align) unsigned char data[Len];\n    };\n};\n</code></pre><p></p> <p></p>C++<pre><code>#include &lt;cstddef&gt;\n#include &lt;iostream&gt;\n#include &lt;new&gt;\n#include &lt;string&gt;\n#include &lt;type_traits&gt;\n\ntemplate&lt;class T, std::size_t N&gt;\nclass static_vector\n{\n    // Properly aligned uninitialized storage for N T's\n    std::aligned_storage_t&lt;sizeof(T), alignof(T)&gt; data[N];\n    std::size_t m_size = 0;\n\npublic:\n    // Create an object in aligned storage\n    template&lt;typename ...Args&gt; void emplace_back(Args&amp;&amp;... args)\n    {\n        if (m_size &gt;= N) // Possible error handling\n            throw std::bad_alloc{};\n\n        // Construct value in memory of aligned storage using inplace operator new\n        ::new(&amp;data[m_size]) T(std::forward&lt;Args&gt;(args)...);\n        ++m_size;\n    }\n\n    // Access an object in aligned storage\n    const T&amp; operator[](std::size_t pos) const\n    {\n        // Note: std::launder is needed after the change of object model in P0137R1\n        return *std::launder(reinterpret_cast&lt;const T*&gt;(&amp;data[pos]));\n    }\n\n    // Destroy objects from aligned storage\n    ~static_vector()\n    {\n        for (std::size_t pos = 0; pos &lt; m_size; ++pos)\n            // Note: std::launder is needed after the change of object model in P0137R1\n            std::destroy_at(std::launder(reinterpret_cast&lt;T*&gt;(&amp;data[pos])));\n    }\n};\n\nint main()\n{\n    static_vector&lt;std::string, 10&gt; v1;\n    v1.emplace_back(5, '*');\n    v1.emplace_back(10, '*');\n    std::cout &lt;&lt; v1[0] &lt;&lt; '\\n' &lt;&lt; v1[1] &lt;&lt; '\\n';\n}\n// output\n// *****\n// **********\n</code></pre> \u200b\u5728\u6790\u6784\u200b\u51fd\u6570\u200b\u4e2d\u200b\uff0cstd::launder \u200b\u662f\u200b C++17 \u200b\u5f15\u5165\u200b\u7684\u200b\u4f4e\u7ea7\u200b\u5de5\u5177\u200b\uff0c\u200b\u7528\u4e8e\u200b\u200c\u200b\u663e\u5f0f\u200b\u544a\u77e5\u200b\u7f16\u8bd1\u5668\u200b\u5185\u5b58\u200b\u4e2d\u200b\u67d0\u200b\u5730\u5740\u200b\u5904\u200b\u7684\u200b\u5bf9\u8c61\u200b\u5df2\u200b\u5408\u6cd5\u200b\u5b58\u5728\u200b\u200c\uff0c\u200b\u89e3\u51b3\u200b\u56e0\u200b\u7f16\u8bd1\u5668\u200b\u4f18\u5316\u200b\u6216\u200b\u9690\u5f0f\u200b\u5bf9\u8c61\u200b\u751f\u547d\u5468\u671f\u200b\u7ba1\u7406\u200b\u5bfc\u81f4\u200b\u7684\u200b\u672a\u5b9a\u4e49\u200b\u884c\u4e3a\u200b\uff08UB\uff09\u200b\u95ee\u9898\u200b\u200c\u3002<p></p> <ul> <li>C++20\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u57fa\u4e8e\u200b\u5c5e\u6027\u200b\u6d4b\u8bd5\u200b\u7684\u200bquickcheck-cpp\u200b\u5e93\u200b</li> <li>C++\u200b\u5e38\u89c1\u200b\u9519\u8bef\u200b\uff1a\u200b\u7aa5\u63a2\u200bstd::Sort\u200b\u7684\u200bcmp\u200b\u51fd\u6570\u200b\u7528\u9519\u200b\uff0c\u200b\u5bfc\u81f4\u200b\u7684\u200b\u7a0b\u5e8f\u200babort\u200b\u5206\u6790\u200b</li> <li>C++\u200b\u5f00\u53d1\u200b\u5e38\u89c1\u95ee\u9898\u200b\u4e4b\u200bABI\u200b\u517c\u5bb9\u6027\u95ee\u9898\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/c%E4%BB%8E%E4%B8%80%E6%AC%A1%E9%9D%99%E6%80%81%E5%BA%93%E9%93%BE%E6%8E%A5%E5%BC%95%E5%8F%91%E7%9A%84double-free%E8%81%8A%E8%B5%B7/","title":"c++\u200b\u4ece\u200b\u4e00\u6b21\u200b\u9759\u6001\u200b\u5e93\u200b\u94fe\u63a5\u200b\u5f15\u53d1\u200b\u7684\u200bdouble free\u200b\u804a\u8d77","text":""},{"location":"blog/c%E4%BB%8E%E4%B8%80%E6%AC%A1%E9%9D%99%E6%80%81%E5%BA%93%E9%93%BE%E6%8E%A5%E5%BC%95%E5%8F%91%E7%9A%84double-free%E8%81%8A%E8%B5%B7/#\u4ece\u4e00\u4e2a\u4f8b\u5b50\u8bf4\u8d77","title":"\u4ece\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b\u8bf4\u8d77","text":"<p>\u200b\u5728\u200b\u8fd9\u4e2a\u200b\u4f8b\u5b50\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u53ef\u6267\u884c\u7a0b\u5e8f\u200b <code>A</code>\uff0c\u200b\u5b83\u200b\u4f7f\u7528\u200b\u52a8\u6001\u94fe\u63a5\u5e93\u200b <code>C</code>\uff0c\u200b\u800c\u200b <code>C</code> \u200b\u672c\u8eab\u200b\u53c8\u200b\u4f9d\u8d56\u4e8e\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u52a8\u6001\u94fe\u63a5\u5e93\u200b <code>D</code>\u3002</p> <p>\u200b\u5e93\u200b <code>C</code> \u200b\u548c\u200b <code>D</code> \u200b\u90fd\u200b\u94fe\u63a5\u200b\u4e86\u200b\u5e93\u200b <code>E</code>\uff0c\u200b\u5176\u4e2d\u200b\u5e93\u200b <code>E</code> \u200b\u5305\u542b\u200b\u4e00\u4e2a\u200b\u4f7f\u7528\u200b <code>extern</code> \u200b\u58f0\u660e\u200b\u548c\u200b\u5b9e\u73b0\u200b\u7684\u200b <code>const std::string</code> \u200b\u5168\u5c40\u53d8\u91cf\u200b\u3002</p>"},{"location":"blog/c%E4%BB%8E%E4%B8%80%E6%AC%A1%E9%9D%99%E6%80%81%E5%BA%93%E9%93%BE%E6%8E%A5%E5%BC%95%E5%8F%91%E7%9A%84double-free%E8%81%8A%E8%B5%B7/#\u6587\u4ef6\u5185\u5bb9","title":"\u6587\u4ef6\u200b\u5185\u5bb9","text":"<p>\u200b\u6587\u4ef6\u200b\u7684\u200b\u76ee\u5f55\u200b\u7ed3\u6784\u200b\u5982\u4e0b\u200b</p> Bash<pre><code>/project\n    /src\n        main.cpp             // \u200b\u53ef\u6267\u884c\u7a0b\u5e8f\u200b A \u200b\u7684\u200b\u6e90\u6587\u4ef6\u200b\n        libC.cpp             // \u200b\u52a8\u6001\u200b\u5e93\u200b C \u200b\u7684\u200b\u6e90\u6587\u4ef6\u200b\n        libD.cpp             // \u200b\u52a8\u6001\u200b\u5e93\u200b D \u200b\u7684\u200b\u6e90\u6587\u4ef6\u200b\n        libE.cpp             // \u200b\u52a8\u6001\u200b\u5e93\u200b E \u200b\u7684\u200b\u6e90\u6587\u4ef6\u200b\n        libE.h               // \u200b\u52a8\u6001\u200b\u5e93\u200b E \u200b\u7684\u200b\u5934\u6587\u4ef6\u200b\n    /build\n</code></pre>"},{"location":"blog/c%E4%BB%8E%E4%B8%80%E6%AC%A1%E9%9D%99%E6%80%81%E5%BA%93%E9%93%BE%E6%8E%A5%E5%BC%95%E5%8F%91%E7%9A%84double-free%E8%81%8A%E8%B5%B7/#libeh","title":"libE.h","text":"C++<pre><code>#ifndef LIBE_H\n#define LIBE_H\n\n#include &lt;string&gt;\n\nextern const std::string global_message;\n\nvoid printMessage();\n\n#endif // LIBE_H\n</code></pre>"},{"location":"blog/c%E4%BB%8E%E4%B8%80%E6%AC%A1%E9%9D%99%E6%80%81%E5%BA%93%E9%93%BE%E6%8E%A5%E5%BC%95%E5%8F%91%E7%9A%84double-free%E8%81%8A%E8%B5%B7/#libecpp","title":"libE.cpp","text":"C++<pre><code>#include \"libE.h\"\n#include &lt;iostream&gt;\n\nconst std::string global_message = \"Hello from library E!\";\n\nvoid printMessage() {\n    std::cout &lt;&lt; global_message &lt;&lt; \" (Address: \" &lt;&lt; &amp;global_message &lt;&lt; \")\" &lt;&lt; std::endl;\n}\n</code></pre>"},{"location":"blog/c%E4%BB%8E%E4%B8%80%E6%AC%A1%E9%9D%99%E6%80%81%E5%BA%93%E9%93%BE%E6%8E%A5%E5%BC%95%E5%8F%91%E7%9A%84double-free%E8%81%8A%E8%B5%B7/#libdcpp","title":"libD.cpp","text":"C++<pre><code>#include \"libE.h\"\n\nvoid callPrintMessageFromD() {\n    printMessage();\n}\n</code></pre>"},{"location":"blog/c%E4%BB%8E%E4%B8%80%E6%AC%A1%E9%9D%99%E6%80%81%E5%BA%93%E9%93%BE%E6%8E%A5%E5%BC%95%E5%8F%91%E7%9A%84double-free%E8%81%8A%E8%B5%B7/#libccpp","title":"libC.cpp","text":"C++<pre><code>#include \"libE.h\"\n\nextern void callPrintMessageFromD();\n\nvoid callPrintMessageFromC() {\n    printMessage();\n    callPrintMessageFromD();\n}\n</code></pre>"},{"location":"blog/c%E4%BB%8E%E4%B8%80%E6%AC%A1%E9%9D%99%E6%80%81%E5%BA%93%E9%93%BE%E6%8E%A5%E5%BC%95%E5%8F%91%E7%9A%84double-free%E8%81%8A%E8%B5%B7/#maincpp","title":"main.cpp","text":"C++<pre><code>extern void callPrintMessageFromC();\n\nint main() {\n    callPrintMessageFromC();\n    return 0;\n}\n</code></pre>"},{"location":"blog/c%E4%BB%8E%E4%B8%80%E6%AC%A1%E9%9D%99%E6%80%81%E5%BA%93%E9%93%BE%E6%8E%A5%E5%BC%95%E5%8F%91%E7%9A%84double-free%E8%81%8A%E8%B5%B7/#\u91c7\u7528cmake\u6784\u5efa","title":"\u91c7\u7528\u200bcmake\u200b\u6784\u5efa","text":"<p>CMakeLists.txt\u200b\u6587\u4ef6\u200b\u5982\u4e0b\u200b\uff1a</p> C++<pre><code>cmake_minimum_required(VERSION 3.10)\nproject(a_demo)\n\nadd_library(e STATIC libe.cpp)\ntarget_compile_options(e PUBLIC -fPIC)\nadd_library(c SHARED libc.cpp)\n\ntarget_link_libraries(c \ne\n)\n\nadd_library(d SHARED libd.cpp)\ntarget_link_libraries(d\ne\n)\n\nadd_executable(main \n    main.cpp\n)\ntarget_link_libraries(main\n    c\n    d\n)\n</code></pre> Bash<pre><code>$ nm -CD libc.so | grep global_message\n00000000000040a0 B global_message[abi:cxx11]\n$ ~/a_demo/build# nm -CD libd.so | grep global_message\n00000000000040a0 B global_message[abi:cxx11]\n</code></pre>"},{"location":"blog/c%E4%BB%8E%E4%B8%80%E6%AC%A1%E9%9D%99%E6%80%81%E5%BA%93%E9%93%BE%E6%8E%A5%E5%BC%95%E5%8F%91%E7%9A%84double-free%E8%81%8A%E8%B5%B7/#\u8fd0\u884c","title":"\u8fd0\u884c","text":"<p>\u200b\u6309\u7167\u200b\u6b63\u5e38\u200b\u7684\u200b\u903b\u8f91\u200b\uff0c\u200b\u7a0b\u5e8f\u8fd0\u884c\u200b\u65f6\u200b\uff0c\u200b\u8f93\u51fa\u200b\u5e94\u8be5\u200b\u662f\u200b\u4e0b\u9762\u200b\u8fd9\u6837\u200b\u7684\u200b\uff1a</p> Bash<pre><code>Hello from library E!\nHello from library E!\n</code></pre> <p>\u200b\u7136\u800c\u200b\uff0c\u200b\u5f53\u200b\u4f60\u200b\u8fd0\u884c\u200b\u7a0b\u5e8f\u200b\u65f6\u200b\uff0c\u200b\u8f93\u51fa\u200b\u5374\u662f\u200b\u3002\u200b\u62a5\u9519\u200b\u4e86\u200b\uff01\uff01\uff01\u200b\u4f60\u200b\u77e5\u9053\u200b\u4e3a\u4ec0\u4e48\u200b\u4f1a\u200b\u8fd9\u6837\u200b\u5417\u200b\uff1f\u200b\u4f60\u200b\u6709\u200b\u60f3\u5230\u200b\u8fd9\u4e2a\u200b\u7ed3\u5c40\u200b\u5417\u200b\uff01</p> Bash<pre><code>Hello from library E! (Address: 0x7fc90c3740a0)\nHello from library E! (Address: 0x7fc90c3740a0)\nfree(): double free detected in tcache 2\nAborted (core dumped)\n</code></pre>"},{"location":"blog/c%E4%BB%8E%E4%B8%80%E6%AC%A1%E9%9D%99%E6%80%81%E5%BA%93%E9%93%BE%E6%8E%A5%E5%BC%95%E5%8F%91%E7%9A%84double-free%E8%81%8A%E8%B5%B7/#\u4e00\u8d77\u770b\u4e00\u770b","title":"\u4e00\u8d77\u200b\u770b\u4e00\u770b","text":"<p><code>global_message</code> \u200b\u662f\u200b\u4e00\u4e2a\u200b\u5728\u200b\u5e93\u200b <code>E</code> \u200b\u4e2d\u200b\u5b9a\u4e49\u200b\u7684\u200b <code>const std::string</code>\uff0c\u200b\u5e76\u200b\u5728\u200b\u5e93\u200b <code>C</code> \u200b\u548c\u200b <code>D</code> \u200b\u4e2d\u200b\u4f7f\u7528\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u5c06\u200b libE \u200b\u7f16\u8bd1\u200b\u4e3a\u200b\u9759\u6001\u200b\u5e93\u800c\u200b\u4e0d\u662f\u200b\u52a8\u6001\u200b\u5e93\u200b\uff0c\u200b\u5e76\u4e14\u200b libC \u200b\u548c\u200b libD \u200b\u90fd\u200b\u9759\u6001\u200b\u94fe\u63a5\u200b libE\uff0c\u200b\u90fd\u200b\u5305\u542b\u200b\u4e00\u4efd\u200bglobal_message \u200b\u5b9e\u4f8b\u200b\uff0c\u200b\u4f46\u662f\u200b\u89c2\u5bdf\u200b\u53d1\u73b0\u200b\u8fd9\u200b\u4e24\u4e2a\u200b\u5b9e\u4f8b\u200b\u7684\u200b\u5730\u5740\u200b\u662f\u200b\u4e00\u6837\u200b\u7684\u200b\uff0c\u200b\u6790\u6784\u200b\u4e24\u6b21\u200b\uff0c\u200b\u5bfc\u81f4\u200b global_message \u200b\u7684\u200b double_free \u200b\u95ee\u9898\u200b\u3002</p> <p>\u200b\u68c0\u67e5\u200b\u7b26\u53f7\u8868\u200b</p> <p></p>Bash<pre><code># \u200b\u67e5\u770b\u200b\u52a8\u6001\u200b\u5e93\u4e2d\u200b\u7684\u200b global_message \u200b\u7b26\u53f7\u200b\nnm -CD libc.so | grep global_message\nnm -CD libd.so | grep global_message\n</code></pre> \u200b\u663e\u793a\u200b\u4e24\u4e2a\u200b\u52a8\u6001\u200b\u5e93\u5747\u200b\u5305\u542b\u200b global_message \u200b\u6253\u5370\u200b\u5730\u5740\u200b\uff0c\u200b\u5728\u200b libe.cpp \u200b\u4e2d\u200b\u6253\u5370\u200b\u7684\u200bglobal_message\u200b\u5730\u5740\u200b\u662f\u200b\u76f8\u540c\u200b\u7684\u200b\uff1a C++<pre><code>void printMessage() {\n    std::cout &lt;&lt; global_message &lt;&lt; \" (Address: \" &lt;&lt; &amp;global_message &lt;&lt; \")\" &lt;&lt; std::endl;\n}\n</code></pre><p></p> <p>\u200b\u4e3a\u4ec0\u4e48\u200b\u9759\u6001\u200b\u5e93\u4f1a\u200b\u5bfc\u81f4\u200b\u91cd\u590d\u200b\u5b9a\u4e49\u200b\uff1f</p> <p>\u200b\u9759\u6001\u200b\u5e93\u200b\u7684\u200b\u672c\u8d28\u200b\u200c\uff1a\u200b\u4e00\u7ec4\u200b .o \u200b\u6587\u4ef6\u200b\u7684\u200b\u96c6\u5408\u200b\u3002\u200b\u94fe\u63a5\u200b\u65f6\u200b\uff0c\u200b\u94fe\u63a5\u200b\u5668\u4ec5\u200b\u63d0\u53d6\u200b\u88ab\u200b\u5f15\u7528\u200b\u7684\u200b\u76ee\u6807\u200b\u6587\u4ef6\u200b\u3002</p> <p>\u200b\u52a8\u6001\u200b\u5e93\u200b\u94fe\u63a5\u200b\u9759\u6001\u200b\u5e93\u200b\u200c\uff1a\u200b\u6bcf\u4e2a\u200b\u52a8\u6001\u200b\u5e93\u200b\u72ec\u7acb\u200b\u94fe\u63a5\u200b\u9759\u6001\u200b\u5e93\u65f6\u200b\uff0c\u200b\u4f1a\u200b\u5c06\u200b\u6240\u200b\u9700\u200b\u7684\u200b .o \u200b\u6587\u4ef6\u200b\u590d\u5236\u5230\u200b\u81ea\u8eab\u200b\uff0c\u200b\u5bfc\u81f4\u200b\u591a\u4efd\u200b\u6570\u636e\u200b\u526f\u672c\u200b\u3002</p>"},{"location":"blog/c%E4%BB%8E%E4%B8%80%E6%AC%A1%E9%9D%99%E6%80%81%E5%BA%93%E9%93%BE%E6%8E%A5%E5%BC%95%E5%8F%91%E7%9A%84double-free%E8%81%8A%E8%B5%B7/#\u5982\u4f55\u89e3\u51b3\u5462","title":"\u5982\u4f55\u200b\u89e3\u51b3\u200b\u5462\u200b\uff1f","text":"<p>\u200b\u6709\u200b\u4e09\u79cd\u200b\u65b9\u6cd5\u200b\u53ef\u4ee5\u200b\u89e3\u51b3\u200b\u8fd9\u4e2a\u200b\u95ee\u9898\u200b\uff0c\u200b\u4e0b\u9762\u200b\u4e00\u8d77\u200b\u6765\u770b\u200b\u4e00\u4e0b\u200b\uff1a</p>"},{"location":"blog/c%E4%BB%8E%E4%B8%80%E6%AC%A1%E9%9D%99%E6%80%81%E5%BA%93%E9%93%BE%E6%8E%A5%E5%BC%95%E5%8F%91%E7%9A%84double-free%E8%81%8A%E8%B5%B7/#\u5c06-libe-\u6539\u4e3a\u52a8\u6001\u5e93","title":"\u200c\u200b\u5c06\u200b libe \u200b\u6539\u4e3a\u200b\u52a8\u6001\u200b\u5e93\u200b\u200c","text":"<p>\u200b\u7f16\u8bd1\u200b libe \u200b\u4e3a\u200b\u52a8\u6001\u200b\u5e93\u200b\uff1a </p>Bash<pre><code>g++ -shared -fPIC libe.cpp -o libe.so\n</code></pre><p></p> <p>\u200b\u6216\u8005\u200b\u5c06\u200b\u4e0a\u8ff0\u200bCMakeLists.txt\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u7684\u200bSTATIC\u200b\u6539\u4e3a\u200bSHARED\u3002\u200b\u8ba9\u200b libc.so \u200b\u548c\u200b libd.so \u200b\u94fe\u63a5\u200b\u52a8\u6001\u200b\u5e93\u200b libe.so\uff0c\u200b\u800c\u200b\u975e\u200b\u9759\u6001\u200b\u5e93\u200b libe.a\u3002\u200b\u6548\u679c\u200b\u200c\uff1a\u200b\u5168\u5c40\u53d8\u91cf\u200b\u4ec5\u200b\u6709\u200b\u4e00\u4efd\u200b\u5b9e\u4f8b\u200b\uff0c\u200b\u907f\u514d\u200b\u4e86\u200b\u91cd\u590d\u200b\u6790\u6784\u200b\u3002</p>"},{"location":"blog/c%E4%BB%8E%E4%B8%80%E6%AC%A1%E9%9D%99%E6%80%81%E5%BA%93%E9%93%BE%E6%8E%A5%E5%BC%95%E5%8F%91%E7%9A%84double-free%E8%81%8A%E8%B5%B7/#\u4f7f\u7528\u5355\u4f8b\u6a21\u5f0f\u91cd\u6784\u5168\u5c40\u53d8\u91cf","title":"\u4f7f\u7528\u200b\u5355\u4f8b\u200b\u6a21\u5f0f\u200b\u91cd\u6784\u200b\u5168\u5c40\u53d8\u91cf\u200b\u200c","text":"<p>\u200b\u4fee\u6539\u200b libe.h \u200b\u548c\u200b libe.cpp\uff1a</p> C++<pre><code>// libe.h\n#include &lt;string&gt;\nconst std::string&amp; get_global_message();  // \u200b\u8fd4\u56de\u200b\u5f15\u7528\u200b\u800c\u200b\u975e\u200b extern \u200b\u53d8\u91cf\u200b\nvoid printMessage();\n\n// libe.cpp\n#include \"libe.h\"\n#include &lt;iostream&gt;\n\nconst std::string&amp; get_global_message() {\n    static const std::string instance = \"Hello from library E!\";  // \u200b\u5c40\u90e8\u200b\u9759\u6001\u200b\u53d8\u91cf\u200b\n    return instance;\n}\n\nvoid printMessage() {\n    std::cout &lt;&lt; get_global_message() &lt;&lt; std::endl;\n}\n</code></pre> <p>\u200b\u539f\u7406\u200b\u200c\uff1a\u200b\u5229\u7528\u200b\u5c40\u90e8\u200b\u9759\u6001\u200b\u53d8\u91cf\u200b\u7684\u200b\u7ebf\u7a0b\u200b\u5b89\u5168\u200b\u521d\u59cb\u5316\u200b\uff08C++11 \u200b\u8d77\u200b\uff09\uff0c\u200b\u786e\u4fdd\u200b\u5168\u5c40\u200b\u552f\u4e00\u200b\u5b9e\u4f8b\u200b\u3002</p>"},{"location":"blog/c%E4%BB%8E%E4%B8%80%E6%AC%A1%E9%9D%99%E6%80%81%E5%BA%93%E9%93%BE%E6%8E%A5%E5%BC%95%E5%8F%91%E7%9A%84double-free%E8%81%8A%E8%B5%B7/#\u91c7\u7528inline","title":"\u91c7\u7528\u200binline\ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350","text":"C++<pre><code>inline const std::string global_message = \"Hello from library E!\";\n</code></pre> <p>\u200b\u6dfb\u52a0\u200binline\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u89e3\u51b3\u200b\u3002\u200b\u6dfb\u52a0\u200binline\u200b\u540e\u200b\u91cd\u65b0\u200b\u7f16\u8bd1\u200b\uff0c\u200b\u67e5\u770b\u200b\u7b26\u53f7\u8868\u200b\uff1a</p> Bash<pre><code>$ nm -CD libd.so | grep global_message\n00000000000040a0 u global_message[abi:cxx11]\n0000000000004088 u guard variable for global_message[abi:cxx11]\n</code></pre> <p>guard variable\u200b\u5728\u200b\u591a\u200b\u7f16\u8bd1\u200b\u5355\u5143\u200b\u573a\u666f\u200b\u4e0b\u4ec5\u200b\u88ab\u200b\u521d\u59cb\u5316\u200b\u4e00\u6b21\u200b\uff0c\u200b\u907f\u514d\u200b\u91cd\u590d\u200b\u6784\u9020\u200b\u6216\u200b\u7ade\u4e89\u200b\u6761\u4ef6\u200b</p> <p>Inline const variables at namespace scope have external linkage by default (unlike the non-inline non-volatile const-qualified variables). (since C++17) </p> <p>https://en.cppreference.com/w/cpp/language/inline</p> <ul> <li>C++\u200b\u5e38\u89c1\u200b\u9677\u9631\u200b\uff1a\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b\u4e86\u89e3\u200bconst\u200b\u4f7f\u7528\u200b</li> <li>C++20\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u57fa\u4e8e\u200b\u5c5e\u6027\u200b\u6d4b\u8bd5\u200b\u7684\u200bquickcheck-cpp\u200b\u5e93\u200b</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/c%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8mix-in%E6%A8%A1%E5%BC%8F%E7%81%B5%E6%B4%BB%E5%8F%AF%E6%89%A9%E5%B1%95%E7%9A%84%E7%BB%84%E5%90%88%E5%8A%9F%E8%83%BD/","title":"c++\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200bMix-in\u200b\u6a21\u5f0f\u200b\u7075\u6d3b\u200b\u53ef\u200b\u6269\u5c55\u200b\u7684\u200b\u7ec4\u5408\u200b\u529f\u80fd","text":""},{"location":"blog/c%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8mix-in%E6%A8%A1%E5%BC%8F%E7%81%B5%E6%B4%BB%E5%8F%AF%E6%89%A9%E5%B1%95%E7%9A%84%E7%BB%84%E5%90%88%E5%8A%9F%E8%83%BD/#mix-in-\u662f\u4ec0\u4e48","title":"Mix-in \u200b\u662f\u200b\u4ec0\u4e48\u200b\uff1f","text":"<p>\u200b\u5728\u200b\u8ba8\u8bba\u200b mix-in \u200b\u662f\u200b\u4ec0\u4e48\u200b\u4e4b\u524d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5148\u770b\u200b\u5b83\u200b\u8bd5\u56fe\u200b\u89e3\u51b3\u200b\u4ec0\u4e48\u200b\u95ee\u9898\u200b\uff1f</p> <p>\u200b\u5047\u8bbe\u200b\u4f60\u200b\u5728\u200b\u5f00\u53d1\u200b\u4e00\u6b3e\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u6709\u200b\u4e00\u5806\u200b\u60f3\u6cd5\u200b\u6216\u200b\u6982\u5ff5\u200b\u8981\u200b\u5efa\u6a21\u200b\u3002\u200b\u5b83\u4eec\u200b\u53ef\u80fd\u200b\u5728\u200b\u67d0\u79cd\u7a0b\u5ea6\u200b\u4e0a\u200b\u76f8\u5173\u200b\uff0c\u200b\u4f46\u200b\u5728\u200b\u5f88\u5927\u200b\u7a0b\u5ea6\u200b\u4e0a\u200b\u662f\u200b\u6b63\u4ea4\u200b\u7684\u200b\u2014\u2014\u200b\u8fd9\u200b\u610f\u5473\u7740\u200b\u5b83\u4eec\u200b\u53ef\u4ee5\u200b\u72ec\u7acb\u200b\u5b58\u5728\u200b\u3002 \u200b\u4f60\u200b\u6709\u200b\u4ee5\u4e0b\u200b\u65b9\u5f0f\u200b\u9009\u62e9\u200b\uff1a</p> <ul> <li> <p>\u200b\u73b0\u5728\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u7ee7\u627f\u200b\u6765\u200b\u5efa\u6a21\u200b\uff0c\u200b\u5e76\u200b\u8ba9\u200b\u8fd9\u4e9b\u200b\u6982\u5ff5\u200b\u4e2d\u200b\u7684\u200b\u6bcf\u200b\u4e00\u4e2a\u200b\u90fd\u200b\u4ece\u200b\u67d0\u4e2a\u200b\u516c\u5171\u200b\u63a5\u53e3\u7c7b\u200b\u6d3e\u751f\u200b\u3002\u200b\u7136\u540e\u200b\u5728\u200b\u5b9e\u73b0\u200b\u8be5\u200b\u63a5\u53e3\u200b\u7684\u200b\u6d3e\u751f\u7c7b\u200b\u4e2d\u200b\u63d0\u4f9b\u200b\u5177\u4f53\u65b9\u6cd5\u200b\u3002\u200b\u8fd9\u79cd\u200b\u65b9\u6cd5\u200b\u7684\u200b\u95ee\u9898\u200b\u662f\u200b\uff0c\u200b\u8fd9\u79cd\u200b\u8bbe\u8ba1\u200b\u6ca1\u6709\u200b\u63d0\u4f9b\u200b\u4efb\u4f55\u200b\u6e05\u6670\u200b\u76f4\u89c2\u200b\u7684\u200b\u65b9\u6cd5\u200b\u6765\u200b\u5c06\u200b\u8fd9\u4e9b\u200b\u5177\u4f53\u200b\u7684\u200b\u7c7b\u200b\u7ec4\u5408\u200b\u5728\u200b\u4e00\u8d77\u200b\u3002</p> </li> <li> <p>mix-in \u200b\u7684\u200b\u65b9\u5f0f\u200b\u3002mix-in \u200b\u7684\u200b\u60f3\u6cd5\u200b\u662f\u200b\u63d0\u4f9b\u200b\u4e00\u5806\u200b\u539f\u59cb\u200b\u7c7b\u200b\uff0c\u200b\u5176\u4e2d\u200b\u6bcf\u4e2a\u200b\u7c7b\u200b\u90fd\u200b\u5bf9\u200b\u4e00\u4e2a\u200b\u57fa\u672c\u200b\u7684\u200b\u6b63\u4ea4\u200b\u6982\u5ff5\u200b\u8fdb\u884c\u200b\u5efa\u6a21\u200b\uff0c\u200b\u5e76\u4e14\u200b\u80fd\u591f\u200b\u5c06\u200b\u5b83\u4eec\u200b\u7ec4\u5408\u200b\u5728\u200b\u4e00\u8d77\u200b\uff0c\u200b\u4ee5\u4ec5\u200b\u4f7f\u7528\u200b\u4f60\u200b\u60f3\u8981\u200b\u7684\u200b\u529f\u80fd\u200b\u7ec4\u6210\u200b\u66f4\u200b\u590d\u6742\u200b\u7684\u200b\u7c7b\u200b\u2014\u2014\u200b\u6709\u70b9\u50cf\u200b\u4e50\u9ad8\u200b\u79ef\u6728\u200b\u3002\u200b\u539f\u59cb\u200b\u7c7b\u200b\u672c\u8eab\u200b\u65e8\u5728\u200b\u7528\u4f5c\u200b\u6784\u5efa\u200b\u5757\u200b\u3002\u200b\u8fd9\u200b\u662f\u200b\u53ef\u200b\u6269\u5c55\u200b\u7684\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u4ee5\u540e\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5728\u200b\u4e0d\u200b\u5f71\u54cd\u200b\u73b0\u6709\u200b\u7c7b\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u5411\u200b\u96c6\u5408\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u5176\u4ed6\u200b\u539f\u59cb\u200b\u7c7b\u200b\u3002</p> </li> </ul>"},{"location":"blog/c%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8mix-in%E6%A8%A1%E5%BC%8F%E7%81%B5%E6%B4%BB%E5%8F%AF%E6%89%A9%E5%B1%95%E7%9A%84%E7%BB%84%E5%90%88%E5%8A%9F%E8%83%BD/#mix-in-\u5982\u4f55\u5b9e\u73b0","title":"Mix-in \u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\uff1f","text":"<p>Mix-in \u200b\u901a\u5e38\u200b\u4ee5\u200b\u6a21\u677f\u200b\u7c7b\u200b\u7684\u200b\u5f62\u5f0f\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u5728\u200b\u7f16\u8bd1\u200b\u65f6\u200b\u5c06\u200b\u529f\u80fd\u200b\u6df7\u5165\u200b\u5230\u200b\u76ee\u6807\u200b\u7c7b\u4e2d\u200b\u3002\u200b\u5b83\u200b\u5141\u8bb8\u200b\u589e\u52a0\u200b\u7c7b\u200b\u7684\u200b\u529f\u80fd\u200b\u800c\u200b\u4e0d\u200b\u9700\u8981\u200b\u4fee\u6539\u200b\u7c7b\u200b\u5c42\u6b21\u7ed3\u6784\u200b\u3002 \u200b\u5e38\u7528\u200b\u4e8e\u200b\u5b9e\u73b0\u200b\u7c7b\u4f3c\u200b\u4e8e\u200b\u591a\u91cd\u200b\u7ee7\u627f\u200b\u7684\u200b\u529f\u80fd\u200b\uff0c\u200b\u4f46\u200b\u907f\u514d\u200b\u4e86\u200b\u591a\u91cd\u200b\u7ee7\u627f\u200b\u7684\u200b\u590d\u6742\u6027\u200b\u3002</p> <p>\u200b\u5728\u200b C++\u200b\u7684\u200b\u5b9e\u73b0\u200b\u4e2d\u200b\uff0c\u200b\u4e00\u79cd\u200b\u5b9e\u73b0\u200b\u65b9\u5f0f\u200b\u662f\u200b\u4f7f\u7528\u200b\u6a21\u677f\u200b\u548c\u200b\u7ee7\u627f\u200b\u3002\u200b\u8fd9\u91cc\u200b\u7684\u200b\u57fa\u672c\u200b\u601d\u60f3\u200b\u662f\u200b\u901a\u8fc7\u200b\u6a21\u677f\u200b\u53c2\u6570\u200b\u63d0\u4f9b\u200b\u8fd9\u4e9b\u200b\u6784\u5efa\u200b\u5757\u200b\uff0c\u200b\u4ece\u800c\u200b\u5c06\u200b\u5b83\u4eec\u200b\u8fde\u63a5\u200b\u5728\u200b\u4e00\u8d77\u200b\u3002\u200b\u7136\u540e\u200b\uff0c\u200b\u4f8b\u5982\u200b\u901a\u8fc7\u200b typedef \u200b\u5c06\u200b\u5b83\u4eec\u200b\u94fe\u63a5\u200b\u5728\u200b\u4e00\u8d77\u200b\uff0c\u200b\u4ee5\u200b\u5f62\u6210\u200b\u4e00\u4e2a\u200b\u5305\u542b\u200b\u6240\u200b\u9700\u200b\u529f\u80fd\u200b\u7684\u200b\u65b0\u200b\u7c7b\u578b\u200b\u3002</p> <p>\u200b\u4ee5\u200b\u4f60\u200b\u7684\u200b\u793a\u4f8b\u200b\u4e3a\u4f8b\u200b\uff0c\u200b\u5047\u8bbe\u200b\u6211\u4eec\u200b\u8981\u200b\u5728\u200b\u5176\u200b\u4e4b\u4e0a\u200b\u6dfb\u52a0\u200b\u91cd\u505a\u200b\u529f\u80fd\u200b\u3002\u200b\u5b83\u200b\u53ef\u80fd\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\uff1a</p> <p>\u200b\u4ee5\u200b\u5728\u200b Number \u200b\u7c7b\u4e0a\u200b\uff0c\u200b\u6dfb\u52a0\u200b Undo\uff08\u200b\u64a4\u9500\u200b\u529f\u80fd\u200b\uff09\u200b\u548c\u200b Redo\uff08\u200b\u518d\u200b\u505a\u200b\u4e00\u6b21\u200b\uff09\u200b\u4e3a\u4f8b\u200b\uff0c\u200b\u4f8b\u5b50\u200b\u6765\u6e90\u4e8e\u200bwhat-are-mixins-as-a-concept\u3002\u200b\u5b9e\u73b0\u200b\u5982\u4e0b\u200b\uff1a</p> C++<pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct Number\n{\n  typedef int value_type;\n  int n;\n  void set(int v) { n = v; }\n  int get() const { return n; }\n};\n\ntemplate &lt;typename BASE, typename T = typename BASE::value_type&gt;\nstruct Undoable : public BASE\n{\n  typedef T value_type;\n  T before;\n  void set(T v) { before = BASE::get(); BASE::set(v); }\n  void undo() { BASE::set(before); }\n};\n\ntemplate &lt;typename BASE, typename T = typename BASE::value_type&gt;\nstruct Redoable : public BASE\n{\n  typedef T value_type;\n  T after;\n  void set(T v) { after = v; BASE::set(v); }\n  void redo() { BASE::set(after); }\n};\n\ntypedef Redoable&lt; Undoable&lt;Number&gt; &gt; ReUndoableNumber;\n\nint main()\n{\n  ReUndoableNumber mynum;\n  mynum.set(42); mynum.set(84);\n  cout &lt;&lt; mynum.get() &lt;&lt; '\\n';  // 84\n  mynum.undo();\n  cout &lt;&lt; mynum.get() &lt;&lt; '\\n';  // 42\n  mynum.redo();\n  cout &lt;&lt; mynum.get() &lt;&lt; '\\n';  // back to 84\n}\n</code></pre> <p>\u200b\u8fd9\u91cc\u200b\u53ea\u662f\u200b\u4e3e\u4f8b\u8bf4\u660e\u200b mix-in \u200b\u7684\u200b\u7528\u6cd5\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u4f8b\u5b50\u200b\u5b9e\u9645\u200b\u4f7f\u7528\u200b\u9700\u8981\u200b\u8003\u8651\u200b\u8fb9\u754c\u200b\u60c5\u51b5\u200b\u548c\u200b\u7279\u6b8a\u200b\u7528\u6cd5\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5728\u200b\u4ece\u672a\u200b\u8bbe\u7f6e\u200b\u6570\u5b57\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u6267\u884c\u200b undo \u200b\u64cd\u4f5c\u200b\u53ef\u80fd\u200b\u4e0d\u4f1a\u200b\u50cf\u200b\u4f60\u200b\u671f\u671b\u200b\u7684\u200b\u90a3\u6837\u200b\u8868\u73b0\u200b\u3002</p>"},{"location":"blog/c%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8mix-in%E6%A8%A1%E5%BC%8F%E7%81%B5%E6%B4%BB%E5%8F%AF%E6%89%A9%E5%B1%95%E7%9A%84%E7%BB%84%E5%90%88%E5%8A%9F%E8%83%BD/#\u901a\u8fc7\u7c7b\u7ee7\u627f\u7684\u65b9\u5f0f\u5b9e\u73b0\u7684-mix-in-\u7684\u4e00\u79cd\u65b9\u6cd5","title":"\u901a\u8fc7\u200b\u7c7b\u200b\u7ee7\u627f\u200b\u7684\u200b\u65b9\u5f0f\u200b\u5b9e\u73b0\u200b\u7684\u200b mix-in \u200b\u7684\u200b\u4e00\u79cd\u200b\u65b9\u6cd5","text":"<p>Mixin(Mix in) \u200b\u662f\u200b\u4e00\u79cd\u200b\u5c06\u200b\u82e5\u5e72\u200b\u529f\u80fd\u200b\u72ec\u7acb\u200b\u7684\u200b\u7c7b\u200b\u901a\u8fc7\u200b\u7ee7\u627f\u200b\u7684\u200b\u65b9\u5f0f\u200b\u5b9e\u73b0\u200b\u6a21\u5757\u200b\u590d\u7528\u200b\u7684\u200b C++\u200b\u6a21\u677f\u200b\u7f16\u7a0b\u200b\u6280\u5de7\u200b\u3002</p> Text Only<pre><code>template&lt;typename... Mixins&gt;\nclass MixinClass : public Mixins... {\n  public:\n    MixinClass() :  Mixins...() {}\n  // ...\n};\n</code></pre> <p>\u200b\u901a\u8fc7\u200b\u8fd9\u79cd\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u591a\u4e2a\u200b\u529f\u80fd\u200b\u72ec\u7acb\u200b\u7684\u200b\u7c7b\u200b\u7ec4\u5408\u6210\u200b\u4e00\u4e2a\u200b\u7c7b\u200b\uff0c\u200b\u4ece\u800c\u200b\u5b9e\u73b0\u200b\u6a21\u5757\u200b\u590d\u7528\u200b\u3002</p> C++<pre><code>// point_example.cpp\n\n#include &lt;string&gt;\n#include &lt;iostream&gt;\n\n\ntemplate &lt;typename... Mixins&gt;\nclass Point : public Mixins... {\n public:\n  double x, y;\n  Point() : Mixins()..., x(0.0), y(0.0) {}\n  Point(double x, double y) : Mixins()..., x(x), y(y) {}\n};\n\nclass Label {\n public:\n  std::string label;\n  Label() : label(\"\") {}\n};\n\nclass Color {\n public:\n  unsigned char red = 0, green = 0, blue = 0;\n};\n\nusing MyPoint = Point&lt;Label, Color&gt;;\n\nint main(){\n  MyPoint p(1.0, 2.0);\n\n  p.label = \"MyPoint\";\n  p.red = 255;\n  p.green = 0;\n  p.blue = 0;\n\n  std::cout &lt;&lt; p.label &lt;&lt; std::endl;\n  std::cout &lt;&lt; \"(\" &lt;&lt; p.x &lt;&lt; \", \" &lt;&lt; p.y &lt;&lt; \")\" &lt;&lt; std::endl;\n  std::cout &lt;&lt; \"Color: (\" &lt;&lt; (int)p.red &lt;&lt; \", \" &lt;&lt; (int)p.green &lt;&lt; \", \" &lt;&lt; (int)p.blue &lt;&lt; \")\" &lt;&lt;std::endl;\n  return 0;\n}\n\n// MyPoint\n// (1, 2)\n// Color: (255, 0, 0)\n</code></pre> <p>\u200b\u4e0a\u9762\u200b\u7684\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u5728\u200b Point \u200b\u7684\u200b\u529f\u80fd\u200b\u57fa\u7840\u200b\u4e0a\u200b\uff0c\u200b\u52a0\u5165\u200b\u4e86\u200b Label \u200b\u548c\u200b Color \u200b\u7684\u200b\u529f\u80fd\u200b\u3002\u200b\u9664\u6b64\u4e4b\u5916\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u52a0\u5165\u200b\u5176\u4ed6\u200b\u529f\u80fd\u200b\u3002</p> <p>\u200b\u4f8b\u5b50\u200b\u53c2\u8003\u200b\u4e86\u200bC++\u200b\u7f16\u7a0b\u200b\u6280\u5de7\u200b\uff1aMixin</p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>C++\u200b\u6280\u6cd5\u200b\uff1a\u200b\u5982\u4f55\u200b\u4e3a\u200b\u4e00\u4e2a\u200b\u7c7b\u200b\u52a8\u6001\u200b\u9644\u52a0\u200b\u4efb\u610f\u200b\u7c7b\u578b\u200b\u6570\u636e\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/c%E9%9D%99%E6%80%81%E5%BA%93%E5%92%8C%E5%8A%A8%E6%80%81%E5%BA%93%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C/","title":"c++\u200b\u9759\u6001\u200b\u5e93\u200b\u548c\u200b\u52a8\u6001\u200b\u5e93\u200b\u5168\u5c40\u53d8\u91cf\u200b\u521d\u59cb\u5316\u200b\u6709\u4f55\u200b\u4e0d\u540c\u200b\uff1f","text":"<p>\u200b\u91c7\u7528\u200b\u52a8\u6001\u94fe\u63a5\u5e93\u200b\u7684\u200b\u95ee\u9898\u200b\uff1a\u200b\u7248\u672c\u5347\u7ea7\u200b\uff0c\u200b\u8c03\u7528\u200b\u52a8\u6001\u200b\u5e93\u200b\u7684\u200b\u7a0b\u5e8f\u200b\u9700\u4e0d\u9700\u8981\u200b\u91cd\u65b0\u200b\u7f16\u8bd1\u200b\uff0c\u200b\u9700\u8981\u200b\u8003\u8651\u200b\u52a8\u6001\u94fe\u63a5\u5e93\u200b\u4e8c\u8fdb\u5236\u200bABI\u200b\u517c\u5bb9\u6027\u95ee\u9898\u200b\uff0c\u200b\u6bd4\u5982\u200b\u662f\u5426\u200b\u66f4\u6539\u200b\u4e86\u200b\u5934\u6587\u4ef6\u200b\u4e2d\u200b\u7684\u200b\u7ed3\u6784\u200b\u4f53\u200b\uff0c\u200b\u66f4\u6539\u200b\u4e86\u200b\u63a5\u53e3\u51fd\u6570\u200b\uff0c\u200b\u6dfb\u52a0\u200b\u4e86\u200b\u865a\u200b\u51fd\u6570\u200b\u3002\u200b\u52a8\u6001\u94fe\u63a5\u5e93\u200b\u53d8\u66f4\u200b\u4ee5\u540e\u200b\uff0c\u200b\u5982\u679c\u200b\u6ca1\u6709\u200b\u70ed\u200b\u66f4\u65b0\u200bso\uff0c\u200b\u9700\u8981\u200b\u66ff\u6362\u200bso\uff0c\u200b\u91cd\u542f\u200b\u53ef\u6267\u884c\u7a0b\u5e8f\u200b\u3002</p> <p>\u200b\u9759\u6001\u200b\u5e93\u200b\u7684\u200b\u95ee\u9898\u200b\uff0c\u200b\u8003\u8651\u200b\u662f\u5426\u200b\u5b58\u5728\u200b\u8d44\u6e90\u200b\u52a0\u8f7d\u200b\u591a\u6b21\u200b\u7684\u200b\u95ee\u9898\u200b\u3002</p>"},{"location":"blog/c%E9%9D%99%E6%80%81%E5%BA%93%E5%92%8C%E5%8A%A8%E6%80%81%E5%BA%93%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C/#1-\u9759\u6001\u5e93\u521d\u59cb\u5316\u4e24\u6b21","title":"1 \u200b\u9759\u6001\u200b\u5e93\u200b\u521d\u59cb\u5316\u200b\u4e24\u6b21","text":"C++<pre><code>#include\u00a0&lt;cstdio&gt;\n\n#include\u00a0\"A.h\"\n\n#include\u00a0\"iBackend.h\"\n\nClassA\u00a0A1;\u00a0\u00a0\u00a0\u00a0//\u00a0\u200b\u6211\u4eec\u200b\u5728\u200b\u8fd9\u91cc\u200b\uff0c\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u5168\u5c40\u53d8\u91cf\u200b\n\nClassA::ClassA()\u00a0{\n\n\u00a0\u00a0\u00a0\u00a0printf(\"ClassA\\n\");\n\n}\n\nClassA::~ClassA()\u00a0{\n\n\u00a0\u00a0\u00a0\u00a0printf(\"~ClassA\\n\");\n\n}\n\nvoid\u00a0ClassA::test()\u00a0{}\n\nREGISTER_BACKEND(A)\u00a0//\u00a0\u200b\u6211\u4eec\u200b\u5728\u200b\u8fd9\u91cc\u200b\uff0c\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u5168\u5c40\u53d8\u91cf\u200b\n</code></pre> C++<pre><code>#include\u00a0&lt;cstdio&gt;\n\n#include\u00a0\"A.h\"\n\n#include\u00a0\"B.h\"\n\nint\u00a0main()\u00a0{\n\n\u00a0\u00a0\u00a0\u00a0printf(\"main()\\n\");\n\n\u00a0\u00a0\u00a0\u00a0ClassA::test();\u00a0\u00a0\u00a0\u00a0//\u00a0\u200b\u672c\u884c\u200b\u4fdd\u8bc1\u200b\u548c\u200bA\u200b\u591f\u200b\u6210\u200b\u94fe\u63a5\u200b\u5173\u7cfb\u200b\n\n\u00a0\u00a0\u00a0\u00a0ClassB\u00a0b;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0\u200b\u672c\u884c\u200b\u4fdd\u8bc1\u200b\u548c\u200bB\u200b\u6784\u6210\u200b\u94fe\u63a5\u200b\u5173\u7cfb\u200b\n\n\u00a0\u00a0\u00a0\u00a0printf(\"main:\u00a0END\\n\");\n\n\u00a0\u00a0\u00a0\u00a0return\u00a00;\n\n}\n</code></pre> Text Only<pre><code>ClassA\n\ncall\u00a0Register\u00a0:\u00a0A\n\nClassA\n\ncall\u00a0Register\u00a0:\u00a0A\n\nmain()\n\nClassB\n\nmain:\u00a0END\n\n~ClassB\n\n~ClassA\n\n~ClassA\n</code></pre>"},{"location":"blog/c%E9%9D%99%E6%80%81%E5%BA%93%E5%92%8C%E5%8A%A8%E6%80%81%E5%BA%93%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C/#2-\u9759\u6001\u5e93\u4e0d\u521d\u59cb\u5316\u5168\u5c40\u53d8\u91cf","title":"2 \u200b\u9759\u6001\u200b\u5e93\u200b\u4e0d\u200b\u521d\u59cb\u5316\u200b\u5168\u5c40\u53d8\u91cf","text":"<p>\u200b\u94fe\u63a5\u200b\u5668\u200b\u5e76\u200b\u6ca1\u6709\u200b\u751f\u6210\u200b\u8fd9\u4e2a\u200b\u81ea\u52a8\u200b\u521d\u59cb\u5316\u200b\u7684\u200b\u4ee3\u7801\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u94fe\u63a5\u200b\u5668\u200b\u89c9\u5f97\u200b\u8fd9\u200b\u51e0\u4e2a\u200b\u201c\u200b\u6ca1\u6709\u200b\u201d\u200b\u88ab\u200b\u4f7f\u7528\u200b\u7684\u200b\u5168\u5c40\u200b\u5bf9\u8c61\u200b\u4e0d\u200b\u9700\u8981\u200b\uff0c\u200b\u6240\u4ee5\u200b\u5c31\u200b\u6ca1\u200b\u751f\u6210\u200b\u3002</p> <p>https://www.cppblog.com/kevinlynx/archive/2010/01/17/105885.aspx</p> C++<pre><code>#include\u00a0&lt;cstdio&gt;\n\n#include\u00a0\"A.h\"\n\n#include\u00a0\"B.h\"\n\nint\u00a0main()\u00a0{\n\n\u00a0\u00a0\u00a0\u00a0printf(\"main()\\n\");\n\n\u00a0\u00a0\u00a0\u00a0//\u00a0ClassA::test();\u00a0\u00a0\u00a0\u00a0//\u00a0\u200b\u672c\u884c\u200b\u4fdd\u8bc1\u200b\u548c\u200bA\u200b\u591f\u200b\u6210\u200b\u94fe\u63a5\u200b\u5173\u7cfb\u200b\n\n\u00a0\u00a0\u00a0\u00a0//\u00a0ClassB\u00a0b;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0\u200b\u672c\u884c\u200b\u4fdd\u8bc1\u200b\u548c\u200bB\u200b\u6784\u6210\u200b\u94fe\u63a5\u200b\u5173\u7cfb\u200b\n\n\u00a0\u00a0\u00a0\u00a0printf(\"main:\u00a0END\\n\");\n\n\u00a0\u00a0\u00a0\u00a0return\u00a00;\n\n}\n</code></pre> Bash<pre><code>main()\n\nmain:\u00a0END\n</code></pre> <p>\u200b\u89e3\u51b3\u200b\u65b9\u6cd5\u200b\uff1a</p> <p>\u200b\u4e3b\u8981\u200b\u5305\u62ec\u200b\u4e24\u79cd\u200b\uff0c\u200b\u5b9a\u4e49\u200bdummy\u200b\u51fd\u6570\u200b\u52a0\u200bstatic\u200b\u5c40\u90e8\u53d8\u91cf\u200b\uff0c\u200b\u7531\u200b\u5916\u90e8\u200b\u663e\u793a\u200b\u8c03\u7528\u200b\u3002\u200b\u6216\u8005\u200b\u901a\u8fc7\u200b\u94fe\u63a5\u200b.a\u200b\u65f6\u200b\u8bbe\u7f6e\u200b-Wl,-whole-archive\u200b\u6807\u5fd7\u200b\u3002</p> <p>https://litaotju.github.io/c++/2020/07/24/Whole-Archive-in-static-lib/\ufeff</p> <p>\u200b\u5982\u679c\u200b\u53ef\u6267\u884c\u7a0b\u5e8f\u200b\u6216\u8005\u200b\u52a8\u6001\u94fe\u63a5\u5e93\u200b\u52a0\u5165\u200b\u4e86\u200b-Wl,-whole-archive\u200b\u94fe\u63a5\u200b.a\u200b\u6587\u4ef6\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u62a5\u9519\u200b.a\u200b\u7528\u5230\u200b\u7684\u200bxxx\u200b\u7b49\u5e93\u200b\u672a\u5b9a\u4e49\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u8003\u8651\u200b\u4ea4\u6362\u200b\u94fe\u63a5\u200b\u987a\u5e8f\u200b\u3002 </p>Bash<pre><code>#\u00a0add_definitions(\"-Wl,-u,needed_symbol\")\n\n#\u00a0add_definitions(\"-Wl,--whole-archive\")\n\nadd_library(app\u00a0SHARED\u00a0${AI_SRC})\n\ntarget_link_libraries(app\u00a0PUBLIC\n\n\u00a0\u00a0\u00a0\u00a0-Wl,-whole-archive\n\n\u00a0\u00a0\u00a0\u00a0xxx.a\n\n\u00a0\u00a0\u00a0\u00a0-Wl,-no-whole-archive\n\n\u00a0\u00a0\u00a0\u00a0GTest::gtest_main\n\n\u00a0\u00a0\u00a0\u00a0yyy\n\n\u00a0\u00a0\u00a0\u00a0dl)\n\ninstall\u00a0(TARGETS\u00a0app\n\n\u00a0\u00a0\u00a0\u00a0RUNTIME\u00a0DESTINATION\u00a0lib\u00a0\u00a0\u00a0\u00a0\n\n)\n</code></pre><p></p>"},{"location":"blog/c%E9%9D%99%E6%80%81%E5%BA%93%E5%92%8C%E5%8A%A8%E6%80%81%E5%BA%93%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C/#3-\u52a8\u6001\u5e93\u4e0d\u521d\u59cb\u5316\u5168\u5c40\u53d8\u91cf","title":"3 \u200b\u52a8\u6001\u200b\u5e93\u200b\u4e0d\u200b\u521d\u59cb\u5316\u200b\u5168\u5c40\u53d8\u91cf","text":"C++<pre><code>#include\u00a0&lt;cstdio&gt;\n\n#include\u00a0\"A.h\"\n\n#include\u00a0\"B.h\"\n\nint\u00a0main()\u00a0{\n\n\u00a0\u00a0\u00a0\u00a0printf(\"main()\\n\");\n\n\u00a0\u00a0\u00a0\u00a0//\u00a0ClassA::test();\u00a0\u00a0\u00a0\u00a0//\u00a0\u200b\u672c\u884c\u200b\u4fdd\u8bc1\u200b\u548c\u200bA\u200b\u591f\u200b\u6210\u200b\u94fe\u63a5\u200b\u5173\u7cfb\u200b\n\n\u00a0\u00a0\u00a0\u00a0//\u00a0ClassB\u00a0b;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0\u200b\u672c\u884c\u200b\u4fdd\u8bc1\u200b\u548c\u200bB\u200b\u6784\u6210\u200b\u94fe\u63a5\u200b\u5173\u7cfb\u200b\n\n\u00a0\u00a0\u00a0\u00a0printf(\"main:\u00a0END\\n\");\n\n\u00a0\u00a0\u00a0\u00a0return\u00a00;\n\n}\n</code></pre> Text Only<pre><code>main()\n\nmain:\u00a0END\n</code></pre>"},{"location":"blog/c%E9%9D%99%E6%80%81%E5%BA%93%E5%92%8C%E5%8A%A8%E6%80%81%E5%BA%93%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C/#4-\u52a8\u6001\u5e93\u521d\u59cb\u5316\u4e00\u6b21\u5168\u5c40\u53d8\u91cf","title":"4 \u200b\u52a8\u6001\u200b\u5e93\u200b\u521d\u59cb\u5316\u200b\u4e00\u6b21\u200b\u5168\u5c40\u53d8\u91cf","text":"C++<pre><code>#include\u00a0&lt;cstdio&gt;\n\n#include\u00a0\"A.h\"\n\n#include\u00a0\"B.h\"\n\nint\u00a0main()\u00a0{\n\n\u00a0\u00a0\u00a0\u00a0printf(\"main()\\n\");\n\n\u00a0\u00a0\u00a0\u00a0ClassA::test();\u00a0\u00a0\u00a0\u00a0//\u00a0\u200b\u672c\u884c\u200b\u4fdd\u8bc1\u200b\u548c\u200bA\u200b\u591f\u200b\u6210\u200b\u94fe\u63a5\u200b\u5173\u7cfb\u200b\n\n\u00a0\u00a0\u00a0\u00a0ClassB\u00a0b;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//\u00a0\u200b\u672c\u884c\u200b\u4fdd\u8bc1\u200b\u548c\u200bB\u200b\u6784\u6210\u200b\u94fe\u63a5\u200b\u5173\u7cfb\u200b\n\n\u00a0\u00a0\u00a0\u00a0printf(\"main:\u00a0END\\n\");\n\n\u00a0\u00a0\u00a0\u00a0return\u00a00;\n\n}\n</code></pre> Text Only<pre><code>ClassA\n\ncall\u00a0Register\u00a0:\u00a0A\n\nmain()\n\nClassB\n\nmain:\u00a0END\n\n~ClassB\n\n~ClassA\n</code></pre> <p>\u200b\u8bb0\u200b\u4e00\u6b21\u200bBUG\u200b\u8c03\u8bd5\u200b\u2014\u2014\u200b\u9759\u6001\u200b\u94fe\u63a5\u5e93\u200b\u4e2d\u200b\u5168\u5c40\u53d8\u91cf\u200b/\u200b\u9759\u6001\u200b\u53d8\u91cf\u200b\u88ab\u200b\u91cd\u590d\u200b\u521d\u59cb\u5316\u200b</p> <p>https://cloud.tencent.com/developer/ask/sof/97688</p>"},{"location":"blog/c%E9%9D%99%E6%80%81%E5%BA%93%E5%92%8C%E5%8A%A8%E6%80%81%E5%BA%93%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C/#5-\u4e24\u4e2a\u52a8\u6001\u5e93\u52a0\u8f7d\u540c\u4e00\u4e2a\u9759\u6001\u5e93","title":"5 \u200b\u4e24\u4e2a\u200b\u52a8\u6001\u200b\u5e93\u200b\u52a0\u8f7d\u200b\u540c\u4e00\u4e2a\u200b\u9759\u6001\u200b\u5e93","text":"<p>\u200b\u90a3\u4e2a\u200b\u4e24\u4e2a\u200b\u52a8\u6001\u200b\u5e93\u200b\u5f15\u7528\u200b\u540c\u4e00\u4e2a\u200b\u9759\u6001\u200b\u5e93\u200b\u95ee\u9898\u200b\uff1f - \u200b\u77e5\u4e4e\u200b</p> <p>\u200b\u5982\u679c\u200b\u4e0d\u200b\u8d70\u200bdlopen\u3001dlsym\uff0c\u200b\u800c\u662f\u200b\u5728\u200bg++\u200b\u547d\u4ee4\u200b\u91cc\u200b\u663e\u5f0f\u200b\u94fe\u63a5\u200b\u7684\u8bdd\u200b \uff08g++ -o main main.cpp -L./ -lsingleton_lib -ldyn_test_1 -ldyn_test_2\uff09\uff0c\u200b\u53c8\u200b\u662f\u200b\u53ea\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200bsingleton_test\u200b\u5b9e\u4f8b\u200b</p> <p>\u200b\u4e3a\u4ec0\u4e48\u200b\u9759\u6001\u200b\u5c40\u90e8\u53d8\u91cf\u200b\u662f\u200b\u5171\u7528\u200b\u7684\u200b\u4e00\u4efd\u200b\uff1f</p> <p><code>dlopen</code>\u200b\u4f20\u5165\u200b\u7684\u200b<code>flag</code>\uff0c<code>RTLD_LOCAL</code>\u200b\u5207\u6362\u200b\u4e3a\u200b<code>RTLD_GLOBAL</code>\uff0c\u200b\u8f93\u51fa\u200b\u5c31\u200b\u4e0d\u200b\u4e00\u6837\u200b\u4e86\u200b\u3002</p> <p>https://cloud.tencent.com/developer/article/1179871</p> <p>\u200b\u591a\u4e2a\u200bc/c++\u200b\u52a8\u6001\u200b\u5e93\u51fd\u6570\u200b\u540c\u540d\u200b\u51b2\u7a81\u200b\u89e3\u51b3\u200b\u65b9\u6cd5\u200b_c++\u200b\u540c\u540d\u200b\u51fd\u6570\u200b\u51b2\u7a81\u200b-CSDN\u200b\u535a\u5ba2\u200b</p> <p>https://www.cnblogs.com/oloroso/p/6273295.html</p> <p>\u200b\u4e0d\u540c\u200b\u7684\u200b\u7f16\u8bd1\u200b\u9009\u9879\u200b\uff0c\u200b\u4e0d\u540c\u200b\u7684\u200b\u94fe\u63a5\u200b\u5668\u200b\uff0c\u200b\u91c7\u7528\u200b\u4e0d\u540c\u200b\u52a0\u8f7d\u200bso\u200b\u7684\u200b\u65b9\u5f0f\u200b\uff08\u200b\u7f16\u8bd1\u200b\u548c\u200bdlopen\uff09\uff0c\u200b\u4e0d\u540c\u200b\u7684\u200b\u7f16\u8bd1\u5668\u200b\uff08gcc\u3001clang\uff09\u200b\u53ef\u80fd\u200b\u7ed3\u679c\u200b\u90fd\u200b\u4e0d\u200b\u4e00\u6837\u200b\uff0c</p> <p>\u200b\u5728\u200b\u9759\u6001\u200b\u5e93\u4e2d\u200b\u6700\u597d\u200b\u4e0d\u8981\u200b\u53bb\u200b\u5b58\u653e\u200b\u5168\u5c40\u53d8\u91cf\u200b\uff0c\u200b\u4e5f\u200b\u4e0d\u8981\u200b\u5728\u200b\u8fd9\u91cc\u200b\u521b\u5efa\u200b\u5355\u4f8b\u200b\u5bf9\u8c61\u200b\u7b49\u200b\u3002</p> <p>https://joydig.com/research-global-variables-desctruction-behavior-in-cpp/</p>"},{"location":"blog/c%E9%9D%99%E6%80%81%E5%BA%93%E5%92%8C%E5%8A%A8%E6%80%81%E5%BA%93%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C/#6-\u4ea4\u53c9\u7f16\u8bd1\u4e2d\u5ffd\u7565so\u4e2d\u7684undefined-xxx","title":"6 \u200b\u4ea4\u53c9\u200b\u7f16\u8bd1\u200b\u4e2d\u200b\u5ffd\u7565\u200bso\u200b\u4e2d\u200b\u7684\u200bundefined xxx","text":"Text Only<pre><code>target_link_options(xxx PRIVATE \"-Wl,--unresolved-symbols=ignore-in-shared-libs\")\n</code></pre>"},{"location":"blog/c%E9%9D%99%E6%80%81%E5%BA%93%E5%92%8C%E5%8A%A8%E6%80%81%E5%BA%93%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C/#\u5176\u5b83","title":"\u5176\u5b83","text":"Text Only<pre><code># \u200b\u4e3a\u4e86\u200b\u4f7f\u200bx86\u200b\u5e73\u53f0\u200b\u4e0a\u200bso\u200b\u4e2d\u200b\u7684\u200bstatic\u200b\u53d8\u91cf\u200b\u548c\u200bdemo\u200b\u4f7f\u7528\u200b\u540c\u4e00\u4e2a\u200b\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -O0 -rdynamic\")\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -O0 -rdynamic\")\n</code></pre> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>C++\u200b\u5f00\u53d1\u200b\u5e38\u89c1\u95ee\u9898\u200b\u4e4b\u200bABI\u200b\u517c\u5bb9\u6027\u95ee\u9898\u200b</li> <li>C++\u200b\u96f6\u200b\u62f7\u8d1d\u200b\u53cd\u200b\u5e8f\u5217\u5316\u200b\u5e93\u200bcista</li> <li>cpp\u200b\u5f00\u53d1\u200b\u4e2d\u200b\u4e00\u4e9b\u200b\u7f16\u8bd1\u200b\u9009\u9879\u200b\u7684\u200b\u7528\u5904\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u7528\u200bcmake\u200b\u8bbe\u7f6e\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/cista%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%BA%93%E5%AE%9E%E7%8E%B0%E4%B9%8Bswiss_table--group%E5%8C%B9%E9%85%8D%E4%BD%8D%E8%BF%90%E7%AE%97/","title":"cista\u200b\u96f6\u200b\u62f7\u8d1d\u200b\u53cd\u200b\u5e8f\u5217\u5316\u200b\u5e93\u200b\u5b9e\u73b0\u200b\u4e4b\u200bswiss_table--group\u200b\u5339\u914d\u200b\u4f4d\u200b\u8fd0\u7b97","text":""},{"location":"blog/cista%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%BA%93%E5%AE%9E%E7%8E%B0%E4%B9%8Bswiss_table--group%E5%8C%B9%E9%85%8D%E4%BD%8D%E8%BF%90%E7%AE%97/#swiss-table\u4e2dgroup\u7684\u5b9e\u73b0\u89e3\u6790","title":"Swiss Table\u200b\u4e2d\u200bGroup\u200b\u7684\u200b\u5b9e\u73b0\u200b\u89e3\u6790","text":"<p>\u200b\u8fd9\u4e2a\u200b<code>group</code>\u200b\u7ed3\u6784\u200b\u4f53\u662f\u200bSwiss Table\u200b\u5b9e\u73b0\u200b\u4e2d\u200b\u7684\u200b\u6838\u5fc3\u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u7528\u4e8e\u200b\u9ad8\u6548\u200b\u5904\u7406\u200b\u54c8\u5e0c\u200b\u8868\u200b\u63a7\u5236\u200b\u4f4d\u200b\u7684\u200b\u6279\u91cf\u200b\u64cd\u4f5c\u200b\u3002</p> <p>\u200b\u5b9a\u4e49\u200b\u6838\u5fc3\u200b\u5e38\u91cf\u200b\uff0c\u200b\u7528\u4e8e\u200b\u4f4d\u200b\u8fd0\u7b97\u200b\uff1a </p>C++<pre><code>static constexpr auto MSBS = 0x8080808080808080ULL;  // \u200b\u6bcf\u4e2a\u200b\u5b57\u8282\u200b\u7684\u200b\u6700\u9ad8\u200b\u4f4d\u200b\u63a9\u7801\u200b\nstatic constexpr auto LSBS = 0x0101010101010101ULL;  // \u200b\u6bcf\u4e2a\u200b\u5b57\u8282\u200b\u7684\u200b\u6700\u4f4e\u200b\u4f4d\u200b\u63a9\u7801\u200b\nstatic constexpr auto GAPS = 0x00FEFEFEFEFEFEFEULL;  // \u200b\u7528\u4e8e\u200b\u8ba1\u7b97\u200b\u524d\u5bfc\u200b\u7a7a\u4f4d\u200b\u7684\u200b\u63a9\u7801\u200b\n</code></pre> \u200b\u6784\u9020\u51fd\u6570\u200b\uff1a C++<pre><code>using group_t = std::uint64_t;\nusing h2_t = std::uint8_t;\n\nexplicit group(ctrl_t const* pos) noexcept {\n  std::memcpy(&amp;ctrl_, pos, WIDTH);\n#if defined(CISTA_BIG_ENDIAN)\n  ctrl_ = endian_swap(ctrl_);\n#endif\n}\n</code></pre> * \u200b\u4ece\u200b\u6307\u5b9a\u200b\u4f4d\u7f6e\u200b\u62f7\u8d1d\u200b8\u200b\u4e2a\u200b\u63a7\u5236\u200b\u5b57\u8282\u200b\u5230\u200b<code>ctrl_</code>\u200b\u6210\u5458\u200b * \u200b\u5927\u200b\u7aef\u7cfb\u7edf\u200b\u9700\u8981\u200b\u505a\u200b\u5b57\u8282\u200b\u5e8f\u200b\u8f6c\u6362\u200b<p></p>"},{"location":"blog/cista%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%BA%93%E5%AE%9E%E7%8E%B0%E4%B9%8Bswiss_table--group%E5%8C%B9%E9%85%8D%E4%BD%8D%E8%BF%90%E7%AE%97/#\u5173\u952e\u5339\u914d\u65b9\u6cd5","title":"\u5173\u952e\u200b\u5339\u914d\u200b\u65b9\u6cd5","text":""},{"location":"blog/cista%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%BA%93%E5%AE%9E%E7%8E%B0%E4%B9%8Bswiss_table--group%E5%8C%B9%E9%85%8D%E4%BD%8D%E8%BF%90%E7%AE%97/#match\u65b9\u6cd5---\u5339\u914d\u7279\u5b9ah2\u503c","title":"<code>match</code>\u200b\u65b9\u6cd5\u200b - \u200b\u5339\u914d\u200b\u7279\u5b9a\u200bh2\u200b\u503c","text":"C++<pre><code>bit_mask match(h2_t const hash) const noexcept {\n  auto const x = ctrl_ ^ (LSBS * hash);\n  return bit_mask{(x - LSBS) &amp; ~x &amp; MSBS};\n}\n</code></pre> * \u200b\u901a\u8fc7\u200b\u4f4d\u200b\u8fd0\u7b97\u200b\u540c\u65f6\u200b\u68c0\u67e5\u200b8\u200b\u4e2a\u200b\u63a7\u5236\u200b\u5b57\u8282\u200b\u662f\u5426\u200b\u5339\u914d\u200b\u7ed9\u5b9a\u200b\u7684\u200bh2\u200b\u503c\u200b * \u200b\u7b97\u6cd5\u200b\u539f\u7406\u200b\uff1a   1. <code>LSBS * hash</code>\uff1a\u200b\u5c06\u200bh2\u200b\u503c\u200b\u590d\u5236\u5230\u200b\u6bcf\u4e2a\u200b\u5b57\u8282\u200b   2. <code>ctrl_ ^ ...</code>\uff1a\u200b\u5f02\u6216\u200b\u64cd\u4f5c\u200b\u627e\u51fa\u200b\u5339\u914d\u200b\u7684\u200b\u5b57\u8282\u200b   3. <code>(x - LSBS) &amp; ~x &amp; MSBS</code>\uff1a\u200b\u7cbe\u786e\u5b9a\u4f4d\u200b\u5339\u914d\u200b\u7684\u200b\u5b57\u8282"},{"location":"blog/cista%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%BA%93%E5%AE%9E%E7%8E%B0%E4%B9%8Bswiss_table--group%E5%8C%B9%E9%85%8D%E4%BD%8D%E8%BF%90%E7%AE%97/#\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u6765\u7406\u89e3match","title":"\u901a\u8fc7\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b\u6765\u200b\u7406\u89e3\u200b<code>match</code>\uff1a","text":"<p>\u200b\u76f8\u5173\u200b\u4f8b\u5b50\u200b\u5b9e\u73b0\u200b\u6e90\u7801\u200bKenForever1/cpp_idioms\u3002</p> <p>\u200b\u8ba9\u200b\u6211\u4eec\u200b\u901a\u8fc7\u200b\u4e00\u4e2a\u200b\u5177\u4f53\u200b\u4f8b\u5b50\u200b\u6765\u200b\u8bf4\u660e\u200bmatch\u200b\u65b9\u6cd5\u200b\u7684\u200b\u4f4d\u200b\u8fd0\u7b97\u200b\u8fc7\u7a0b\u200b\u3002\u200b\u5047\u8bbe\u200b\uff1a</p> <p>\u200b\u5f53\u524d\u200bgroup\u200b\u7684\u200b8\u200b\u4e2a\u200b\u63a7\u5236\u200b\u5b57\u8282\u200b\u4e3a\u200b\uff1a[0x12, 0x34, 0x56, 0x78, 0x12, 0x9A, EMPTY, DELETED]</p> <p>\u200b\u5bf9\u5e94\u200bctrl_\u200b\u503c\u200b\uff1a0xFE80129A78563412 (\u200b\u5c0f\u7aef\u5e8f\u200b)</p> <p>EMPTY = 0x80, DELETED = 0xFE</p> <p>\u200b\u8981\u200b\u5339\u914d\u200b\u7684\u200bh2\u200b\u503c\u4e3a\u200b\uff1a0x12</p> C++<pre><code>=== \u200b\u5f00\u59cb\u200b\u5339\u914d\u200b\u8fc7\u7a0b\u200b ===\n\u200b\u63a7\u5236\u200b\u5b57\u8282\u200b(ctrl_) (0xff809a1278563412): 0x12 0x34 0x56 0x78 0x12 0x9a 0x80 0xff \n\u200b\u5339\u914d\u200b\u7684\u200bh2\u200b\u503c\u200b: 0x12\nLSBS * hash (0x1212121212121212): 0x12 0x12 0x12 0x12 0x12 0x12 0x12 0x12 \nx = ctrl_ ^ (LSBS*hash) (0xed9288006a442600): 0x00 0x26 0x44 0x6a 0x00 0x88 0x92 0xed \nx - LSBS (0xec9186ff694324ff): 0xff 0x24 0x43 0x69 0xff 0x86 0x91 0xec \n~x (0x126d77ff95bbd9ff): 0xff 0xd9 0xbb 0x95 0xff 0x77 0x6d 0x12 \n(x - LSBS) &amp; ~x (0x000106ff010300ff): 0xff 0x00 0x03 0x01 0xff 0x06 0x01 0x00 \n\u200b\u6700\u7ec8\u200b\u7ed3\u679c\u200b mask (0x0000008000000080): 0x80 0x00 0x00 0x00 0x80 0x00 0x00 0x00 \n\n=== \u200b\u5339\u914d\u200b\u7ed3\u679c\u200b ===\n\u200b\u5339\u914d\u200b\u63a9\u7801\u200b (0x0000008000000080): 0x80 0x00 0x00 0x00 0x80 0x00 0x00 0x00 \n\u200b\u5339\u914d\u200b\u7684\u200b\u5b57\u8282\u200b\u4f4d\u7f6e\u200b: 0 4 \n</code></pre>"},{"location":"blog/cista%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%BA%93%E5%AE%9E%E7%8E%B0%E4%B9%8Bswiss_table--group%E5%8C%B9%E9%85%8D%E4%BD%8D%E8%BF%90%E7%AE%97/#match_empty\u65b9\u6cd5---\u5339\u914d\u7a7a\u69fd\u4f4d","title":"<code>match_empty</code>\u200b\u65b9\u6cd5\u200b - \u200b\u5339\u914d\u200b\u7a7a\u69fd\u200b\u4f4d","text":"C++<pre><code>bit_mask match_empty() const noexcept {\n  return bit_mask{(ctrl_ &amp; (~ctrl_ &lt;&lt; 6U)) &amp; MSBS};\n}\n</code></pre> <ul> <li> <p>\u200b\u901a\u8fc7\u200b\u4f4d\u200b\u8fd0\u7b97\u200b\u627e\u51fa\u200bEMPTY(-128)\u200b\u63a7\u5236\u200b\u5b57\u8282\u200b</p> </li> <li> <p>\u200b\u5229\u7528\u200b\u4e86\u200bEMPTY\u200b\u7684\u200b\u7279\u6b8a\u200b\u4f4d\u200b\u6a21\u5f0f\u200b(10000000)</p> </li> </ul>"},{"location":"blog/cista%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%BA%93%E5%AE%9E%E7%8E%B0%E4%B9%8Bswiss_table--group%E5%8C%B9%E9%85%8D%E4%BD%8D%E8%BF%90%E7%AE%97/#\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u6765\u7406\u89e3match_empty","title":"\u901a\u8fc7\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b\u6765\u200b\u7406\u89e3\u200b<code>match_empty</code>","text":"<p>\u200b\u5047\u8bbe\u200b\u6211\u4eec\u200b\u6709\u200b\u4ee5\u4e0b\u200b\u63a7\u5236\u200b\u5b57\u8282\u200b\u7ec4\u200b\uff08\u200b\u5c0f\u7aef\u5e8f\u200b\u6392\u5217\u200b\uff09\uff1a [0x12, 0x34, EMPTY, 0x56, DELETED, EMPTY, 0x78, END]</p> <p>EMPTY = 0x80</p> <p>DELETED = 0xFE</p> <p>END = 0xFF</p> <p>\u200b\u5bf9\u5e94\u200b\u7684\u200b 64 \u200b\u4f4d\u200b ctrl_ \u200b\u503c\u4e3a\u200b\uff1a0xFF8078FE56803412</p> C++<pre><code>=== match_empty() \u200b\u793a\u4f8b\u200b ===\n\u200b\u539f\u59cb\u200b\u63a7\u5236\u200b\u5b57\u8282\u200b (0xff7880fe56803412): 0x12 0x34 0x80 0x56 0xfe 0x80 0x78 0xff \n~ctrl_ (0x00877f01a97fcbed): 0xed 0xcb 0x7f 0xa9 0x01 0x7f 0x87 0x00 \n~ctrl_ &lt;&lt; 6 (0x21dfc06a5ff2fb40): 0x40 0xfb 0xf2 0x5f 0x6a 0xc0 0xdf 0x21 \nctrl_ &amp; (~ctrl_ &lt;&lt; 6) (0x2158806a56803000): 0x00 0x30 0x80 0x56 0x6a 0x80 0x58 0x21 \n\u200b\u6700\u7ec8\u200b\u7ed3\u679c\u200b mask (0x0000800000800000): 0x00 0x00 0x80 0x00 0x00 0x80 0x00 0x00 \n\n\u200b\u5339\u914d\u200b\u7684\u200bEMPTY\u200b\u4f4d\u7f6e\u200b: 2 5 \n</code></pre>"},{"location":"blog/cista%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%BA%93%E5%AE%9E%E7%8E%B0%E4%B9%8Bswiss_table--group%E5%8C%B9%E9%85%8D%E4%BD%8D%E8%BF%90%E7%AE%97/#match_empty_or_deleted\u65b9\u6cd5","title":"<code>match_empty_or_deleted</code>\u200b\u65b9\u6cd5","text":"C++<pre><code>bit_mask match_empty_or_deleted() const noexcept {\n  return bit_mask{(ctrl_ &amp; (~ctrl_ &lt;&lt; 7U)) &amp; MSBS};\n}\n</code></pre> <ul> <li> <p>\u200b\u7c7b\u4f3c\u200b<code>match_empty</code>\u200b\u4f46\u200b\u5339\u914d\u200bEMPTY\u200b\u6216\u200bDELETED\u200b\u72b6\u6001\u200b</p> </li> <li> <p>\u200b\u5229\u7528\u200b\u4e86\u200b\u8fd9\u200b\u4e24\u79cd\u200b\u72b6\u6001\u200b\u7684\u200b\u9ad8\u4f4d\u200b\u90fd\u200b\u662f\u200b1\u200b\u7684\u200b\u7279\u6027\u200b</p> </li> </ul>"},{"location":"blog/cista%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%BA%93%E5%AE%9E%E7%8E%B0%E4%B9%8Bswiss_table--group%E5%8C%B9%E9%85%8D%E4%BD%8D%E8%BF%90%E7%AE%97/#\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u6765\u7406\u89e3match_empty_or_deleted","title":"\u901a\u8fc7\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b\u6765\u200b\u7406\u89e3\u200b<code>match_empty_or_deleted</code>","text":"<p>\u200b\u5047\u8bbe\u200b\u6211\u4eec\u200b\u6709\u200b\u4ee5\u4e0b\u200b\u63a7\u5236\u200b\u5b57\u8282\u200b\u7ec4\u200b\uff08\u200b\u5c0f\u7aef\u5e8f\u200b\u6392\u5217\u200b\uff09\uff1a [0x12, 0x34, EMPTY, 0x56, DELETED, EMPTY, 0x78, END]</p> C++<pre><code>shift_pos: 7\n=== match_empty() \u200b\u793a\u4f8b\u200b ===\n\u200b\u539f\u59cb\u200b\u63a7\u5236\u200b\u5b57\u8282\u200b (0xff7880fe56803412): 0x12 0x34 0x80 0x56 0xfe 0x80 0x78 0xff \n~ctrl_ (0x00877f01a97fcbed): 0xed 0xcb 0x7f 0xa9 0x01 0x7f 0x87 0x00 \n~ctrl_ &lt;&lt; $shift_pos$ (0x43bf80d4bfe5f680): 0x80 0xf6 0xe5 0xbf 0xd4 0x80 0xbf 0x43 \nctrl_ &amp; (~ctrl_ &lt;&lt; $shift_pos$) (0x433880d416803400): 0x00 0x34 0x80 0x16 0xd4 0x80 0x38 0x43 \n\u200b\u6700\u7ec8\u200b\u7ed3\u679c\u200b mask (0x0000808000800000): 0x00 0x00 0x80 0x00 0x80 0x80 0x00 0x00 \n\n\u200b\u5339\u914d\u200b\u7684\u200bEMPTY\u200b\u4f4d\u7f6e\u200b: 2 4 5\n</code></pre>"},{"location":"blog/cista%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%BA%93%E5%AE%9E%E7%8E%B0%E4%B9%8Bswiss_table--group%E5%8C%B9%E9%85%8D%E4%BD%8D%E8%BF%90%E7%AE%97/#count_leading_empty_or_deleted\u65b9\u6cd5","title":"<code>count_leading_empty_or_deleted</code>\u200b\u65b9\u6cd5","text":"C++<pre><code>std::size_t count_leading_empty_or_deleted() const noexcept {\n  return (trailing_zeros(((~ctrl_ &amp; (ctrl_ &gt;&gt; 7U)) | GAPS) + 1U) + 7U) &gt;&gt; 3U;\n}\n</code></pre> <ul> <li> <p>\u200b\u8ba1\u7b97\u200b\u524d\u5bfc\u200b\u7684\u200bEMPTY\u200b\u6216\u200bDELETED\u200b\u69fd\u200b\u4f4d\u200b\u6570\u91cf\u200b</p> </li> <li> <p>\u200b\u7528\u4e8e\u200b\u63a2\u6d4b\u200b\u5e8f\u5217\u200b\u4e2d\u200b\u5feb\u901f\u200b\u8df3\u8fc7\u200b\u8fde\u7eed\u200b\u65e0\u6548\u200b\u69fd\u200b\u4f4d\u200b</p> </li> </ul> <p>\u200b\u4f7f\u7528\u200b\u65b9\u6cd5\u200b\uff1a </p>C++<pre><code>void skip_empty_or_deleted() noexcept {\n    while (is_empty_or_deleted(*ctrl_)) {\n        auto const shift = group{ctrl_}.count_leading_empty_or_deleted();\n        ctrl_ += shift;\n        entry_ += shift;\n    }\n}\n</code></pre><p></p> <p></p>C++<pre><code>=== \u200b\u793a\u4f8b\u200b1 ===\n\u200b\u539f\u59cb\u200b\u63a7\u5236\u200b\u5b57\u8282\u200b (0xff788056fe803412): 0x12 0x34 0x80 0xfe 0x56 0x80 0x78 0xff \nctrl_ &gt;&gt; 7 (0x01fef100adfd0068): 0x68 0x00 0xfd 0xad 0x00 0xf1 0xfe 0x01 \n~ctrl_ (0x00877fa9017fcbed): 0xed 0xcb 0x7f 0x01 0xa9 0x7f 0x87 0x00 \n~ctrl_ &amp; (ctrl_ &gt;&gt; 7) (0x00867100017d0068): 0x68 0x00 0x7d 0x01 0x00 0x71 0x86 0x00 \n| GAPS (0x00fefffefffffefe): 0xfe 0xfe 0xff 0xff 0xfe 0xff 0xfe 0x00 \n+ 1 (0x00fefffefffffeff): 0xff 0xfe 0xff 0xff 0xfe 0xff 0xfe 0x00 \ntrailing_zeros: 0\n\u200b\u524d\u5bfc\u200bEMPTY/DELETED\u200b\u6570\u91cf\u200b: 0\n\n=== \u200b\u793a\u4f8b\u200b2 ===\n\u200b\u539f\u59cb\u200b\u63a7\u5236\u200b\u5b57\u8282\u200b (0xffbc9a785680fe80): 0x80 0xfe 0x80 0x56 0x78 0x9a 0xbc 0xff \nctrl_ &gt;&gt; 7 (0x01ff7934f0ad01fd): 0xfd 0x01 0xad 0xf0 0x34 0x79 0xff 0x01 \n~ctrl_ (0x00436587a97f017f): 0x7f 0x01 0x7f 0xa9 0x87 0x65 0x43 0x00 \n~ctrl_ &amp; (ctrl_ &gt;&gt; 7) (0x00436104a02d017d): 0x7d 0x01 0x2d 0xa0 0x04 0x61 0x43 0x00 \n| GAPS (0x00fffffefeffffff): 0xff 0xff 0xff 0xfe 0xfe 0xff 0xff 0x00 \n+ 1 (0x00fffffeff000000): 0x00 0x00 0x00 0xff 0xfe 0xff 0xff 0x00 \ntrailing_zeros: 24\n\u200b\u524d\u5bfc\u200bEMPTY/DELETED\u200b\u6570\u91cf\u200b: 3\n</code></pre> \u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\uff0c\u200b\u4e3a\u4e86\u200b\u91c7\u7528\u200b\u4f4d\u200b\u8fd0\u7b97\u200b\uff0c\u200b\u52a0\u5feb\u200b\u8ba1\u7b97\u901f\u5ea6\u200b\uff0c\u200b\u5728\u200b\u63a7\u5236\u200b\u5b57\u8282\u200b\u4e2d\u200b\uff0cEMPTY = 0x80\uff0cDELETED = 0xFE\uff0cEND = 0xFF\u200b\u7684\u200b\u6570\u503c\u200b\u90fd\u200b\u662f\u200b\u7ecf\u8fc7\u200b\u7279\u6b8a\u200b\u8bbe\u8ba1\u200b\u7684\u200b\u3002<p></p>"},{"location":"blog/cista%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%BA%93%E5%AE%9E%E7%8E%B0%E4%B9%8Bswiss_table--group%E5%8C%B9%E9%85%8D%E4%BD%8D%E8%BF%90%E7%AE%97/#bit_mask\u7ed3\u6784\u89e3\u6790","title":"bit_mask\u200b\u7ed3\u6784\u200b\u89e3\u6790","text":"<p><code>bit_mask</code>\u200b\u662f\u200bSwiss Table\u200b\u4e2d\u200b\u7528\u4e8e\u200b\u9ad8\u6548\u200b\u5904\u7406\u200b\u4f4d\u200b\u63a9\u7801\u200b\u7684\u200b\u8f85\u52a9\u200b\u7ed3\u6784\u200b\uff0c\u200b\u4e3b\u8981\u200b\u529f\u80fd\u200b\u662f\u200b\u8fed\u4ee3\u200b\u548c\u200b\u64cd\u4f5c\u200b64\u200b\u4f4d\u200b\u63a9\u7801\u200b\u4e2d\u200b\u7684\u200b\u5339\u914d\u200b\u4f4d\u200b\u3002</p> <p></p>C++<pre><code>group_t mask_;  // 64\u200b\u4f4d\u200b\u63a9\u7801\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u5b57\u8282\u200b\u4ee3\u8868\u200b\u4e00\u4e2a\u200b\u63a7\u5236\u200b\u5b57\u8282\u200b\u7684\u200b\u72b6\u6001\u200b\nstatic constexpr auto const SHIFT = 3U;  // \u200b\u7528\u4e8e\u200b\u5b57\u8282\u200b\u7d22\u5f15\u200b\u4f4d\u79fb\u200b(8=2^3)\n</code></pre> \u200b\u8fed\u4ee3\u200b\u5668\u200b\u548c\u200b\u63a9\u7801\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u7c7b\u4f3c\u200b\u8fed\u4ee3\u200b\u5668\u200b\u7684\u200b\u63a5\u53e3\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5728\u200b\u8303\u56f4\u200bfor\u200b\u5faa\u73af\u200b\u4e2d\u200b\u4f7f\u7528\u200b\uff1a C++<pre><code>bit_mask&amp; operator++() noexcept {\n  mask_ &amp;= (mask_ - 1U);  // \u200b\u6e05\u9664\u200b\u6700\u4f4e\u200b\u4f4d\u200b\u7684\u200b1\n  return *this;\n}\n\nsize_type operator*() const noexcept { \n  return trailing_zeros();  // \u200b\u8fd4\u56de\u200b\u5f53\u524d\u200b\u6700\u4f4e\u200b\u4f4d\u200b1\u200b\u7684\u200b\u5b57\u8282\u200b\u4f4d\u7f6e\u200b\n}\n\nexplicit operator bool() const noexcept { \n  return mask_ != 0U;  // \u200b\u5224\u65ad\u200b\u662f\u5426\u200b\u6709\u200b\u5339\u914d\u200b\n}\n\nbit_mask begin() const noexcept { return *this; }\nbit_mask end() const noexcept { return bit_mask{0}; }\n</code></pre><p></p>"},{"location":"blog/cista%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%BA%93%E5%AE%9E%E7%8E%B0%E4%B9%8Bswiss_table--group%E5%8C%B9%E9%85%8D%E4%BD%8D%E8%BF%90%E7%AE%97/#\u4f4d\u64cd\u4f5c","title":"\u4f4d\u64cd\u4f5c","text":"<ul> <li> <p><code>trailing_zeros</code>: \u200b\u8ba1\u7b97\u200b\u6700\u4f4e\u200b\u4f4d\u200b1\u200b\u7684\u200b\u4f4d\u7f6e\u200b(\u200b\u4ee5\u200b\u5b57\u8282\u200b\u4e3a\u200b\u5355\u4f4d\u200b)</p> </li> <li> <p><code>leading_zeros</code>: \u200b\u8ba1\u7b97\u200b\u6700\u9ad8\u200b\u4f4d\u200b1\u200b\u7684\u200b\u4f4d\u7f6e\u200b(\u200b\u4ee5\u200b\u5b57\u8282\u200b\u4e3a\u200b\u5355\u4f4d\u200b)</p> </li> <li> <p>\u200b\u90fd\u200b\u4f7f\u7528\u200b\u4e86\u200b\u4f4d\u200b\u8fd0\u7b97\u200b\u4f18\u5316\u200b\uff0c\u200b\u901a\u8fc7\u200b\u4f4d\u79fb\u200b\u8f6c\u6362\u200b\u4f4d\u200b\u7d22\u5f15\u200b\u5230\u200b\u5b57\u8282\u200b\u7d22\u5f15\u200b</p> </li> </ul> C++<pre><code>size_type trailing_zeros() const noexcept {\n  // ::cista::trailing_zeros(mask_) \u200b\u8fd4\u56de\u200b\u7684\u200b\u662f\u200b\u6700\u4f4e\u200b\u4f4d\u200b1\u200b\u7684\u200b\u4f4d\u7f6e\u200b(\u200b\u4ee5\u200bbit\u200b\u4e3a\u200b\u5355\u4f4d\u200b)\n  // \u200b\u8fd9\u91cc\u200b &gt;&gt; SHIFT \u200b\u662f\u200b\u5c06\u200bbit\u200b\u7d22\u5f15\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u5b57\u8282\u200b\u7d22\u5f15\u200b\n  return ::cista::trailing_zeros(mask_) &gt;&gt; SHIFT;\n}\n\nsize_type leading_zeros() const noexcept {\n  constexpr int total_significant_bits = 8 &lt;&lt; SHIFT;  // 64\n  constexpr int extra_bits = sizeof(group_t) * 8 - total_significant_bits;\n  return ::cista::leading_zeros(mask_ &lt;&lt; extra_bits) &gt;&gt; SHIFT;\n}\n\n//         00000000 000000000 00000000 00000000\n// bit\u200b\u7d22\u5f15\u200b\uff1a 1-8 9-16 17-24 25-32\n// \u200b\u5b57\u8282\u200b\u7d22\u5f15\u200b\uff1a 1 2 3 4\n</code></pre> C++<pre><code>template &lt;typename T&gt;\nconstexpr unsigned trailing_zeros(T t) noexcept {\n    if constexpr (sizeof(T) == 8U) {\n        return static_cast&lt;unsigned&gt;(__builtin_ctzll(t));\n    } else if constexpr (sizeof(T) == 4U) {  // 32bit\n        return static_cast&lt;unsigned&gt;(__builtin_ctz(t));\n    }\n}\n</code></pre> <p>\u200b\u8fd9\u4e2a\u200b\u51fd\u6570\u200b\u4f5c\u7528\u200b\u662f\u200b\u8fd4\u56de\u200b\u8f93\u5165\u200b\u6570\u200b\u4e8c\u8fdb\u5236\u200b\u8868\u793a\u200b\u4ece\u200b\u6700\u4f4e\u200b\u4f4d\u200b\u5f00\u59cb\u200b(\u200b\u53f3\u8d77\u200b)\u200b\u7684\u200b\u8fde\u7eed\u200b\u7684\u200b0\u200b\u7684\u200b\u4e2a\u6570\u200b\uff1b\u200b\u5982\u679c\u200b\u4f20\u5165\u200b0\u200b\u5219\u200b\u884c\u4e3a\u200b\u672a\u5b9a\u4e49\u200b\u3002\u200b\u901a\u8fc7\u200b__builtin_ctzll\u200b\u5b9e\u73b0\u200b\u3002</p> C++<pre><code>template &lt;typename T&gt;\nconstexpr unsigned leading_zeros(T t) noexcept {\n    if constexpr (sizeof(T) == 8U) {\n        return static_cast&lt;unsigned&gt;(__builtin_clzll(t));\n    } else if constexpr (sizeof(T) == 4U) {  // 32bit\n        return static_cast&lt;unsigned&gt;(__builtin_clz(t));\n    }\n}\n</code></pre> <p>\u200b\u8fd9\u4e2a\u200b\u51fd\u6570\u200b\u4f5c\u7528\u200b\u662f\u200b\u8fd4\u56de\u200b\u8f93\u5165\u200b\u6570\u200b\u4e8c\u8fdb\u5236\u200b\u8868\u793a\u200b\u4ece\u200b\u6700\u9ad8\u200b\u4f4d\u200b\u5f00\u59cb\u200b(\u200b\u5de6\u8d77\u200b)\u200b\u7684\u200b\u8fde\u7eed\u200b\u7684\u200b0\u200b\u7684\u200b\u4e2a\u6570\u200b\uff1b\u200b\u5982\u679c\u200b\u4f20\u5165\u200b0\u200b\u5219\u200b\u884c\u4e3a\u200b\u672a\u5b9a\u4e49\u200b\u3002\u200b\u901a\u8fc7\u200b__builtin_clzll\u200b\u5b9e\u73b0\u200b\u3002</p>"},{"location":"blog/cista%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%BA%93%E5%AE%9E%E7%8E%B0%E4%B9%8Bswiss_table--group%E5%8C%B9%E9%85%8D%E4%BD%8D%E8%BF%90%E7%AE%97/#\u603b\u7ed3","title":"\u603b\u7ed3","text":"<p>\u200b\u901a\u8fc7\u200b\u4f4d\u200b\u8fd0\u7b97\u200b\u5e76\u884c\u5904\u7406\u200b\uff0c\u200b\u867d\u7136\u200b\u672a\u200b\u4f7f\u7528\u200b\u5b9e\u9645\u200bSIMD\u200b\u6307\u4ee4\u200b\uff0c\u200b\u4f46\u200b\u901a\u8fc7\u200b64\u200b\u4f4d\u200b\u6574\u6570\u200b\u8fd0\u7b97\u200b\u6a21\u62df\u200b\u4e86\u200b\u5e76\u884c\u5904\u7406\u200b8\u200b\u4e2a\u200b\u63a7\u5236\u200b\u5b57\u8282\u200b\u7684\u200b\u6548\u679c\u200b\u3002\u200b\u6240\u6709\u200b\u64cd\u4f5c\u200b\u90fd\u200b\u901a\u8fc7\u200b\u7cbe\u5fc3\u8bbe\u8ba1\u200b\u7684\u200b\u4f4d\u200b\u8fd0\u7b97\u200b\u5b8c\u6210\u200b\uff0c\u200b\u907f\u514d\u200b\u4e86\u200b\u5206\u652f\u200b\u548c\u200b\u5faa\u73af\u200b\u3002\u200b\u5185\u5b58\u200b\u5c40\u90e8\u6027\u200b\uff1a\u200b\u63a7\u5236\u200b\u5b57\u8282\u200b\u8fde\u7eed\u200b\u5b58\u50a8\u200b\uff0c\u200b\u5145\u5206\u5229\u7528\u200bCPU\u200b\u7f13\u5b58\u200b\u3002\u200b\u72b6\u6001\u200b\u5feb\u901f\u200b\u5224\u65ad\u200b\uff1a\u200b\u53ef\u4ee5\u200b\u4e00\u6b21\u6027\u200b\u5224\u65ad\u200b\u6574\u4e2a\u200bgroup\u200b\u7684\u200b\u72b6\u6001\u200b(\u200b\u5168\u7a7a\u200b/\u200b\u90e8\u5206\u200b\u5339\u914d\u200b\u7b49\u200b)\u3002\u200b\u901a\u8fc7\u200b\u8fd9\u4e9b\u200b\u8bbe\u8ba1\u200b\uff0c\u200b\u4f7f\u5f97\u200bSwiss Table\u200b\u5728\u200b\u67e5\u627e\u200b\u3001\u200b\u63d2\u5165\u200b\u7b49\u200b\u64cd\u4f5c\u200b\u4e0a\u200b\u83b7\u5f97\u200b\u9ad8\u200b\u541e\u5410\u91cf\u200b\u3002</p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>C++\u200b\u6280\u6cd5\u200b\uff1a\u200b\u5982\u4f55\u200b\u4e3a\u200b\u4e00\u4e2a\u200b\u7c7b\u200b\u52a8\u6001\u200b\u9644\u52a0\u200b\u4efb\u610f\u200b\u7c7b\u578b\u200b\u6570\u636e\u200b</li> <li>C++20\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u57fa\u4e8e\u200b\u5c5e\u6027\u200b\u6d4b\u8bd5\u200b\u7684\u200bquickcheck-cpp\u200b\u5e93\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/cista%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%BA%93%E5%AE%9E%E7%8E%B0%E4%B9%8Bswiss_table%E5%93%88%E5%B8%8C%E8%A1%A8%E5%AE%9E%E7%8E%B0/","title":"cista\u200b\u96f6\u200b\u62f7\u8d1d\u200b\u53cd\u200b\u5e8f\u5217\u5316\u200b\u5e93\u200b\u5b9e\u73b0\u200b\u4e4b\u200bswiss_table\u200b\u54c8\u5e0c\u200b\u8868\u200b\u5b9e\u73b0","text":"<p>\u200b\u670b\u53cb\u200b\u4eec\u200b\uff0c\u200b\u5927\u5bb6\u200b\u597d\u200b\uff01\u200b\u4e0a\u6587\u200b\u6211\u4eec\u200b\u4ecb\u7ecd\u200b\u4e86\u200bC++\u200b\u96f6\u200b\u62f7\u8d1d\u200b\u53cd\u200b\u5e8f\u5217\u5316\u200b\u5e93\u200b cista\uff0c\u200b\u4eca\u5929\u200b\u63a5\u7740\u200b\u4ecb\u7ecd\u200b\u4e00\u4e0b\u200b cista \u200b\u5e93\u200b\u7684\u200b\u5b9e\u73b0\u200b\u3002</p>"},{"location":"blog/cista%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%BA%93%E5%AE%9E%E7%8E%B0%E4%B9%8Bswiss_table%E5%93%88%E5%B8%8C%E8%A1%A8%E5%AE%9E%E7%8E%B0/#swiss_table\u5b9e\u73b0\u539f\u7406","title":"swiss_table\u200b\u5b9e\u73b0\u200b\u539f\u7406","text":"<p>\u200b\u53ef\u4ee5\u200b\u4ece\u200bcista\u200b\u5e93\u200b\u7684\u200b\u4ecb\u7ecd\u200b\u4e2d\u200b\u770b\u5230\u200b\u5982\u4e0b\u200b\u5185\u5bb9\u200b\uff1a</p> <p>Comes with a serializable high-performance hash map and hash set implementation based on Google\u2019s Swiss Table technique.</p> <p>swiss table\u200b\u7684\u200b\u5b9e\u73b0\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200b\u7b80\u5355\u200b\u4e86\u89e3\u200b\u4e0b\u200b\u6700\u8fd1\u200b\u6b63\u706b\u200b\u7684\u200bSwissTable\uff0c\u200b\u8bb2\u89e3\u200b\u7684\u200b\u5f88\u200b\u6e05\u6670\u200b\u3002</p> <p>\u200b\u672c\u200b\u5c0f\u8282\u200b\u5927\u591a\u6570\u200b\u5185\u5bb9\u200b\u662f\u200b\u7ad9\u200b\u5728\u200b\u5de8\u4eba\u200b\u80a9\u8180\u200b\u4e0a\u200b\uff0c\u200b\u5f15\u7528\u200b\u7b80\u5355\u200b\u4e86\u89e3\u200b\u4e0b\u200b\u6700\u8fd1\u200b\u6b63\u706b\u200b\u7684\u200bSwissTable\uff0c\u200b\u52a0\u4e0a\u200b\u4f5c\u8005\u200b\u7ed3\u5408\u200bcista\u200b\u5e93\u200b\u7684\u200b\u4ecb\u7ecd\u200b\u3002</p> <p>\u200b\u4ee5\u200b\u4e09\u79cd\u200b\u5b9e\u73b0\u200bhashmap\u200b\u7684\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u770b\u200b\u4f18\u7f3a\u70b9\u200b\uff1a</p> <ul> <li> <p>\u200b\u94fe\u8868\u200b\u6cd5\u200b\uff1a\u200b\u6307\u9488\u200b\u7a33\u5b9a\u6027\u200b\uff0c\u200b\u80fd\u200b\u91c7\u53d6\u200b\u6269\u5bb9\u200b\u4e4b\u5916\u200b\u7684\u200b\u624b\u6bb5\u200b\u963b\u6b62\u200b\u67e5\u8be2\u200b\u6027\u80fd\u200b\u9000\u5316\u200b\uff0c\u200b\u6bd4\u5982\u200b\u628a\u200b\u8fc7\u957f\u200b\u94fe\u8868\u200b\u8f6c\u6362\u6210\u200b\u641c\u7d22\u200b\u6811\u200b\u3002\u200b\u7f3a\u70b9\u200b\uff1a\u200b\u7f13\u5b58\u200b\u4e0d\u591f\u200b\u53cb\u597d\u200b\uff0c\u200b\u51b2\u7a81\u200b\u8f83\u200b\u591a\u200b\u7684\u200b\u65f6\u5019\u200b\u7f13\u5b58\u200b\u547d\u4e2d\u7387\u200b\u8f83\u200b\u4f4e\u200b\u4ece\u800c\u200b\u5f71\u54cd\u200b\u6027\u80fd\u200b\u3002</p> </li> <li> <p>\u200b\u7ebf\u6027\u200b\u63a2\u6d4b\u200b\u6cd5\u200b\uff1a\u200b\u7f13\u5b58\u200b\u53cb\u597d\u200b\uff0c\u200b\u52a0\u4e0a\u200b\u51b2\u7a81\u200b\u4f1a\u200b\u6709\u200b\u8fde\u9501\u200b\u5f71\u54cd\u200b\uff0c\u200b\u6ca1\u6709\u200b\u6307\u9488\u200b\u7a33\u5b9a\u6027\u200b\u3002</p> </li> </ul> <p>swiss table\u200b\u662f\u200b\u4e3a\u4e86\u200b\u6539\u8fdb\u200b\u54c8\u5e0c\u200b\u8868\u200b\u672c\u8eab\u200b\u7684\u200b\u7ed3\u6784\u200b\u529b\u6c42\u200b\u5728\u200b\u7f13\u5b58\u200b\u53cb\u597d\u200b\u3001\u200b\u6027\u80fd\u200b\u548c\u200b\u5185\u5b58\u200b\u7528\u91cf\u200b\u4e0a\u200b\u627e\u5230\u200b\u5e73\u8861\u200b\u3002</p> <p>swisstable\u200b\u62e5\u6709\u200b\u60ca\u4eba\u200b\u6027\u80fd\u200b\u7684\u200b\u4e3b\u8981\u200b\u539f\u56e0\u200b\uff1a\u200b\u5b83\u200b\u5c3d\u91cf\u907f\u514d\u200b\u7ebf\u6027\u200b\u63a2\u6d4b\u200b\u6cd5\u200b\u5bfc\u81f4\u200b\u7684\u200b\u5927\u91cf\u200b\u7b49\u503c\u200b\u6bd4\u8f83\u200b\u548c\u200b\u94fe\u8868\u200b\u6cd5\u4f1a\u200b\u5e26\u6765\u200b\u7684\u200b\u7f13\u5b58\u200b\u547d\u4e2d\u7387\u200b\u4f4e\u4e0b\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u5728\u200b\u5355\u4f4d\u200b\u65f6\u95f4\u200b\u5185\u200b\u5b83\u200b\u80fd\u200b\u540c\u65f6\u200b\u8fc7\u6ee4\u200bN\u200b\u4e2a\u200b\uff08\u200b\u901a\u5e38\u200b\u4e3a\u200b16\uff0c\u200b\u56e0\u4e3a\u200b16x8=128\uff0c\u200b\u662f\u200b\u5927\u591a\u6570\u200b\u5e73\u53f0\u200b\u4e0a\u200bSIMD\u200b\u6307\u4ee4\u200b\u4e13\u7528\u200b\u7684\u200b\u5411\u91cf\u200b\u5bc4\u5b58\u5668\u200b\u7684\u200b\u5927\u5c0f\u200b\uff09\u200b\u5143\u7d20\u200b\uff0c\u200b\u4e14\u200b\u53ef\u4ee5\u200b\u7528\u4f4d\u200b\u8fd0\u7b97\u200b\u4ee3\u66ff\u200b\u5bf9\u200b\u6570\u636e\u200b\u7684\u200b\u904d\u5386\u200b\u3002\u200b\u8fd9\u4f1a\u200b\u4e3a\u200b\u54c8\u5e0c\u200b\u8868\u200b\u7684\u200b\u541e\u5410\u91cf\u200b\u5e26\u6765\u200b\u8d28\u200b\u7684\u200b\u98de\u8dc3\u200b\u3002</p> <ul> <li> <p>\u200b\u6539\u8fdb\u200b\u7684\u200b\u7ebf\u6027\u200b\u63a2\u6d4b\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u5206\u200bgroup\u200b\u5904\u7406\u200b\uff0c\u200b\u53ef\u4ee5\u200bSIMD\u200b\u6307\u4ee4\u200b\u52a0\u901f\u200b\u5904\u7406\u200b\u3002</p> </li> <li> <p>swiss table\u200b\u91c7\u7528\u200b\u4e86\u200b control\u200b\u63a7\u5236\u200b\u4fe1\u606f\u200b \u200b\u548c\u200b slot\u200b\u5b58\u50a8\u200b\u6570\u636e\u200b \u200b\u5206\u79bb\u200b\u7684\u200b\u65b9\u5f0f\u200b\u8fdb\u884c\u200b\u5b58\u50a8\u200b\u3002\u200b\u76f8\u6bd4\u200b\u94fe\u5f0f\u200b\uff0c\u200b\u6570\u636e\u200b\u5c40\u90e8\u6027\u200b\u66f4\u597d\u200b\u3002</p> </li> <li> <p>hash\u200b\u4e00\u5171\u200b64\u200b\u4f4d\u200b\uff0c57\u200b\u4f4d\u4e3a\u200bh1\uff0c\u200b\u7528\u4e8e\u200b\u9501\u5b9a\u200b\u662f\u200bslot\u200b\u4f4d\u7f6e\u200b\u30027\u200b\u4f4d\u4e3a\u200bh2\uff0c\u200b\u4f5c\u4e3a\u200bkey\u3002</p> </li> <li> <p>resize\u200b\u6269\u5bb9\u200b2\u200b\u500d\u200b\u3002</p> </li> </ul> <p>\u200b\u63a7\u5236\u200b\u4fe1\u606f\u200bcontrl\u200b\u4e2d\u200b\uff0c\u200b\u4e0b\u9762\u200b\u7684\u200b\u5b9a\u4e49\u200b\uff0c\u200b\u8868\u793a\u200b\u4e86\u200b\u4e09\u79cd\u200b\u72b6\u6001\u200b\uff0c\u200b\u90fd\u200b\u662f\u200b1\u200b\u5f00\u5934\u200b\u3002\u200b\u5982\u679c\u200b\u662f\u200b0\u200b\u5f00\u5934\u200b\uff0c\u200b\u540e\u9762\u200b\u5c31\u662f\u200b7\u200b\u4f4d\u200bh2\u200b\u6570\u636e\u200b\u3002</p> C++<pre><code>enum ctrl_t : int8_t {\n    EMPTY = -128,  // 10000000\n    DELETED = -2,  // 11111110\n    END = -1  // 11111111\n  };\n</code></pre> <p>abseil\u200b\u7684\u200b\u5b9e\u73b0\u200b\u4e2d\u200b\uff0c\u200b\u6587\u7ae0\u200b\u91cc\u200b\u4e5f\u200b\u63d0\u5230\u200b\u4e86\u200b\uff0c\u200b\u91c7\u7528\u200b\u4e86\u200bSSE\uff08SIMD\u200b\u6307\u4ee4\u200b\uff09\u200b\u8fdb\u884c\u200b\u52a0\u901f\u200b\uff0c\u200b\u4e00\u6b21\u200b\u540c\u65f6\u200b\u6bd4\u8f83\u200b\u4e00\u4e2a\u200bGroup\uff0816\u200b\u4e2a\u200bslot\uff09\u3002\u200b\u5728\u200bcista\u200b\u4e2d\u200b\uff0c\u200b\u6ca1\u6709\u200b\u5b9e\u73b0\u200bSSE\u3002</p> <p>\u200b\u5f15\u7528\u200b\u6587\u7ae0\u200b\u4e2d\u200b\u7684\u200b\u4e00\u5f20\u200b\u56fe\u200b\u8bf4\u660e\u200bswiss_table\u200b\u5b58\u50a8\u200b\u5e03\u5c40\u200b\uff1a</p> <p></p> <p>\u200b\u5728\u200bcista\u200b\u4e2d\u200b\u901a\u8fc7\u200b\u4f4d\u200b\u8fd0\u7b97\u200b\u5e76\u884c\u5904\u7406\u200b\uff0c\u200b\u867d\u7136\u200b\u672a\u200b\u4f7f\u7528\u200b\u5b9e\u9645\u200bSIMD\u200b\u6307\u4ee4\u200b\uff0c\u200b\u4f46\u200b\u901a\u8fc7\u200b64\u200b\u4f4d\u200b\u6574\u6570\u200b\u8fd0\u7b97\u200b\u6a21\u62df\u200b\u4e86\u200b\u5e76\u884c\u5904\u7406\u200b8\u200b\u4e2a\u200b\u63a7\u5236\u200b\u5b57\u8282\u200b\u7684\u200b\u6548\u679c\u200b\u3002 + \u200b\u6240\u6709\u200b\u64cd\u4f5c\u200b\u90fd\u200b\u901a\u8fc7\u200b\u7cbe\u5fc3\u8bbe\u8ba1\u200b\u7684\u200b\u4f4d\u200b\u8fd0\u7b97\u200b\u5b8c\u6210\u200b\uff0c\u200b\u907f\u514d\u200b\u4e86\u200b\u5206\u652f\u200b\u548c\u200b\u5faa\u73af\u200b\u3002</p> <ul> <li> <p>\u200b\u5185\u5b58\u200b\u5c40\u90e8\u6027\u200b\uff1a\u200b\u63a7\u5236\u200b\u5b57\u8282\u200b\u8fde\u7eed\u200b\u5b58\u50a8\u200b\uff0c\u200b\u5145\u5206\u5229\u7528\u200bCPU\u200b\u7f13\u5b58\u200b\u3002</p> </li> <li> <p>\u200b\u72b6\u6001\u200b\u5feb\u901f\u200b\u5224\u65ad\u200b\uff1a\u200b\u53ef\u4ee5\u200b\u4e00\u6b21\u6027\u200b\u5224\u65ad\u200b\u6574\u4e2a\u200bgroup\u200b\u7684\u200b\u72b6\u6001\u200b(\u200b\u5168\u7a7a\u200b/\u200b\u90e8\u5206\u200b\u5339\u914d\u200b\u7b49\u200b)\u3002</p> </li> </ul> <p>\u200b\u901a\u8fc7\u200b\u8fd9\u4e9b\u200b\u8bbe\u8ba1\u200b\uff0c\u200b\u4f7f\u5f97\u200bSwiss Table\u200b\u5728\u200b\u67e5\u627e\u200b\u3001\u200b\u63d2\u5165\u200b\u7b49\u200b\u64cd\u4f5c\u200b\u4e0a\u200b\u83b7\u5f97\u200b\u9ad8\u200b\u541e\u5410\u91cf\u200b\u3002\u200b\u5728\u200bhashmap\u200b\u7684\u200b\u5b9e\u73b0\u200b\u4e2d\u200b\uff0c\u200b\u54c8\u5e0c\u200b\u51fd\u6570\u200b\u7684\u200b\u7b97\u6cd5\u200b\u4e5f\u200b\u5f88\u200b\u91cd\u8981\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u66f4\u52a0\u200b\u9ad8\u6548\u200b\u201c\u200b\u5b8c\u7f8e\u200b\u54c8\u5e0c\u200b\u51fd\u6570\u200b\u201d\uff0c\u200b\u53ef\u4ee5\u200b\u51cf\u5c11\u200b\u51b2\u7a81\u200b\uff0c\u200b\u51cf\u5c11\u200b\u7b49\u503c\u200b\u6bd4\u8f83\u200b\uff0c\u200b\u63d0\u9ad8\u200b\u6027\u80fd\u200b\u3002</p>"},{"location":"blog/cista%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%BA%93%E5%AE%9E%E7%8E%B0%E4%B9%8Bswiss_table%E5%93%88%E5%B8%8C%E8%A1%A8%E5%AE%9E%E7%8E%B0/#cista\u4e2dswiss_table\u54c8\u5e0c\u8868\u5b9e\u73b0","title":"cista\u200b\u4e2d\u200bswiss_table\u200b\u54c8\u5e0c\u200b\u8868\u200b\u5b9e\u73b0","text":""},{"location":"blog/cista%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%BA%93%E5%AE%9E%E7%8E%B0%E4%B9%8Bswiss_table%E5%93%88%E5%B8%8C%E8%A1%A8%E5%AE%9E%E7%8E%B0/#find\u67e5\u627e\u5b9e\u73b0","title":"find\u200b\u67e5\u627e\u200b\u5b9e\u73b0","text":"<p>find_impl\u200b\u5b9e\u73b0\u200b\u5982\u4e0b\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u901a\u8fc7\u200bh1\u200b\u786e\u5b9a\u200b\u67e5\u627e\u200b\u7684\u200bgroup\uff0c\u200b\u7136\u540e\u200b\u901a\u8fc7\u200bh2\u200b\u8fdb\u884c\u200b\u5339\u914d\u200b\uff0c\u200b\u5224\u65ad\u200bkey\u200b\u76f8\u7b49\u200b\uff0c\u200b\u8fd4\u56de\u200biterator\u3002 </p>C++<pre><code>template &lt;typename Key&gt;\niterator find_impl(Key&amp;&amp; key) {\n    auto const hash = compute_hash(key);\n    for (auto seq = probe_seq{h1(hash), capacity_}; true; seq.next()) {\n        group g{ctrl_ + seq.offset_};\n        for (auto const i : g.match(h2(hash))) {\n        if (Eq{}(GetKey()(entries_[seq.offset(i)]), key)) {\n            return iterator_at(seq.offset(i));\n        }\n        }\n        if (g.match_empty()) {\n        return end();\n        }\n    }   \n}\n</code></pre> \u200b\u7531\u4e8e\u200bcontrol\u200b\u4fe1\u606f\u200b\u548c\u200bslot\u200b\u4fe1\u606f\u200b\u7684\u200bindex\u200b\u662f\u200b\u4e00\u4e00\u5bf9\u5e94\u200b\u7684\u200b\uff0c\u200b\u56e0\u6b64\u200biterator\u200b\u4e2d\u200b\u4fdd\u6301\u200b\u7684\u200bctrl\u200b\u548c\u200bentry\u200b\u7684\u200b\u6307\u9488\u200b\uff0c\u200b\u83b7\u53d6\u200bvalue\uff0c\u200b\u5c31\u662f\u200b*entry_\u3002 C++<pre><code>struct iterator {\n    reference operator*() const noexcept { return *entry_; }\n    ctrl_t* ctrl_{nullptr};\n    T* entry_{nullptr};\n}\n</code></pre><p></p> <p>\u200b\u5220\u9664\u200b\u3001\u200b\u63d2\u5165\u200b\u64cd\u4f5c\u200b\u7684\u200b\u903b\u8f91\u200b\u611f\u5174\u8da3\u200b\u7684\u200b\u670b\u53cb\u200b\u63a8\u8350\u200b\u9605\u8bfb\u200bcista hashstorage\u200b\u6e90\u7801\u200b\uff0c\u200b\u5e0c\u671b\u200b\u672c\u6587\u200b\u53ef\u4ee5\u200b\u5e2e\u52a9\u200b\u4f60\u200b\u66f4\u52a0\u200b\u5feb\u901f\u200b\u7406\u89e3\u200b\u5b9e\u73b0\u200b\u3002</p>"},{"location":"blog/cista%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%BA%93%E5%AE%9E%E7%8E%B0%E4%B9%8Bswiss_table%E5%93%88%E5%B8%8C%E8%A1%A8%E5%AE%9E%E7%8E%B0/#\u6838\u5fc3\u5b58\u50a8\u7ed3\u6784\u7684\u521d\u59cb\u5316","title":"\u6838\u5fc3\u200b\u5b58\u50a8\u200b\u7ed3\u6784\u200b\u7684\u200b\u521d\u59cb\u5316\u200b\ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350","text":"<p>\u200b\u6838\u5fc3\u200b\u5b58\u50a8\u200b\u7ed3\u6784\u200bentries_\u200b\u7684\u200b\u521d\u59cb\u5316\u200b\u4ee3\u7801\u200b\u5982\u4e0b\u200b\uff0c\u200b\u4fdd\u5b58\u200b\u4e86\u200bslot\u200b\u6570\u636e\u200b\u548c\u200bcontrol\u200b\u6570\u636e\u200b\u3002WIDTH\u200b\u4e3a\u200b8\uff0cALIGNMENT\u200b\u4e3a\u200balignof(T)\u3002</p> C++<pre><code>  static constexpr size_type const WIDTH = 8U;\n  static constexpr std::size_t const ALIGNMENT = alignof(T);\n\n  void initialize_entries() {\n    self_allocated_ = true;\n    // capacity_ * sizeof(T)  \u200b\u4fdd\u5b58\u200bslot\u200b\u6570\u636e\u200b\n    // (capacity_ + 1U + WIDTH) * sizeof(ctrl_t) \u200b\u4fdd\u5b58\u200bcontrol\u200b\u4fe1\u606f\u200b\uff0c\u200b\u52a0\u4e0a\u200b\u540e\u9762\u200b\u7684\u200bpadding\u200b\u5bf9\u9f50\u200b\n    auto const size = static_cast&lt;size_type&gt;(\n        capacity_ * sizeof(T) + (capacity_ + 1U + WIDTH) * sizeof(ctrl_t));\n    entries_ = reinterpret_cast&lt;T*&gt;(\n        CISTA_ALIGNED_ALLOC(ALIGNMENT, static_cast&lt;std::size_t&gt;(size)));\n    if (entries_ == nullptr) {\n      throw_exception(std::bad_alloc{});\n    }\n#if defined(CISTA_ZERO_OUT)\n    std::memset(entries_, 0, size);\n#endif\n    ctrl_ = reinterpret_cast&lt;ctrl_t*&gt;(\n        reinterpret_cast&lt;std::uint8_t*&gt;(ptr_cast(entries_)) +\n        capacity_ * sizeof(T));\n    reset_ctrl();\n    reset_growth_left();\n  }\n</code></pre> <p>\u200b\u4e0b\u200b\u7bc7\u6587\u7ae0\u200b\uff0c\u200b\u6211\u200b\u5c06\u200b\u8be6\u7ec6\u200b\u4ecb\u7ecd\u200bSwiss Table\u200b\u4e2d\u200bGroup\u200b\u7684\u200b\u4ee3\u7801\u200b\u5b9e\u73b0\u200b\uff0cgroup\u200b\u5339\u914d\u200b\u4f4d\u200b\u8fd0\u7b97\u200b\u3002</p> <ul> <li>C++\u200b\u96f6\u200b\u62f7\u8d1d\u200b\u53cd\u200b\u5e8f\u5217\u5316\u200b\u5e93\u200bcista</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/cpp%E5%BC%80%E5%8F%91%E4%B8%AD%E4%B8%80%E4%BA%9B%E7%BC%96%E8%AF%91%E9%80%89%E9%A1%B9%E7%9A%84%E7%94%A8%E5%A4%84%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E7%94%A8cmake%E8%AE%BE%E7%BD%AE/","title":"cpp\u200b\u5f00\u53d1\u200b\u4e2d\u200b\u4e00\u4e9b\u200b\u7f16\u8bd1\u200b\u9009\u9879\u200b\u7684\u200b\u7528\u5904\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u7528\u200bcmake\u200b\u8bbe\u7f6e","text":""},{"location":"blog/cpp%E5%BC%80%E5%8F%91%E4%B8%AD%E4%B8%80%E4%BA%9B%E7%BC%96%E8%AF%91%E9%80%89%E9%A1%B9%E7%9A%84%E7%94%A8%E5%A4%84%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E7%94%A8cmake%E8%AE%BE%E7%BD%AE/#\u5982\u4f55\u63a7\u5236\u9759\u6001\u5e93\u548c\u52a8\u6001\u5e93\u94fe\u63a5\u884c\u4e3a","title":"\u5982\u4f55\u200b\u63a7\u5236\u200b\u9759\u6001\u200b\u5e93\u200b\u548c\u200b\u52a8\u6001\u200b\u5e93\u200b\u94fe\u63a5\u200b\u884c\u4e3a","text":"<p>\u200b\u4f60\u200b\u5728\u200b\u7f16\u8bd1\u200b\u5f00\u53d1\u200b\u4e00\u4e2a\u200b\u9879\u76ee\u200b\u65f6\u200b\uff0c\u200b\u6709\u200b\u9047\u5230\u200b\u8fc7\u200b\u6307\u5b9a\u200b\u4e86\u200b\u94fe\u63a5\u5e93\u200b\uff0c\u200b\u4f46\u662f\u200b\u8fd0\u884c\u200b\u65f6\u200b\uff0c\u200b\u5374\u200b\u62a5\u9519\u200b\uff1a\u200b\u672a\u5b9a\u4e49\u200b\u67d0\u4e2a\u200b\u7b26\u53f7\u200b\u5417\u200b\uff1fundefined xxx\u3002</p> <p>\u200b\u5728\u200b\u5f00\u53d1\u200b\u4e2d\u200b\u9047\u5230\u200b\u7684\u200bxxx\u200b\u62a5\u9519\u200b\uff0c\u200b\u662f\u200b\u7ecf\u8fc7\u200bmangle\u200b\u4e86\u200b\u7684\u200b\uff0c\u200b\u4e0d\u200b\u65b9\u4fbf\u200b\u770b\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u91c7\u7528\u200bc++filt\u200b\u5de5\u5177\u200b\u67e5\u770b\u200b\u539f\u59cb\u200b\u7b26\u53f7\u200b\uff0c\u200b\u547d\u4ee4\u200b\uff1a c++filt xxx \u3002</p> <p>\u200b\u4e0b\u9762\u200b\u4ecb\u7ecd\u200b\u5982\u4f55\u200b\u63a7\u5236\u200b\u94fe\u63a5\u200b\u5668\u200b\u884c\u4e3a\u200b\u7684\u200b \uff0c\u200b\u8fd9\u91cc\u200b\u7528\u200bGCC\uff08GNU Compiler Collection\uff09\u200b\u9009\u9879\u200b\u4e3e\u4f8b\u200b\uff0c\u200b\u5176\u4ed6\u200b\u7f16\u8bd1\u5668\u200b\u53ef\u80fd\u200b\u6709\u200b\u7ec6\u5fae\u5dee\u522b\u200b\uff0c\u200b\u7279\u522b\u200b\u662f\u200b\u5728\u200b\u4f7f\u7528\u200b <code>ld</code> \u200b\u94fe\u63a5\u200b\u5668\u65f6\u200b\u5bf9\u200b\u94fe\u63a5\u200b\u8fc7\u7a0b\u200b\u8fdb\u884c\u200b\u66f4\u200b\u7cbe\u7ec6\u200b\u7684\u200b\u63a7\u5236\u200b\u3002\u200b\u5b83\u4eec\u200b\u901a\u8fc7\u200b <code>-Wl,</code> \u200b\u524d\u7f00\u200b\u4f20\u9012\u200b\u7ed9\u200b\u94fe\u63a5\u200b\u5668\u200b\u3002</p>"},{"location":"blog/cpp%E5%BC%80%E5%8F%91%E4%B8%AD%E4%B8%80%E4%BA%9B%E7%BC%96%E8%AF%91%E9%80%89%E9%A1%B9%E7%9A%84%E7%94%A8%E5%A4%84%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E7%94%A8cmake%E8%AE%BE%E7%BD%AE/#-wl--whole-archive\u5bf9\u9759\u6001\u5e93\u7684\u6548\u679c","title":"<code>-Wl,--whole-archive</code>\u200b\u5bf9\u200b\u9759\u6001\u200b\u5e93\u200b\u7684\u200b\u6548\u679c","text":"<p>\u200b\u5728\u200b GCC \u200b\u7f16\u8bd1\u200b\u4e2d\u200b\uff0c-Wl,\u2013whole-archive \u200b\u548c\u200b -Wl,\u2013no-whole-archive \u200b\u662f\u200b\u7528\u4e8e\u200b\u63a7\u5236\u200b\u9759\u6001\u200b\u5e93\u200b\u94fe\u63a5\u200b\u884c\u4e3a\u200b\u7684\u200b\u9009\u9879\u200b\uff0c\u200b\u5176\u200b\u6838\u5fc3\u4f5c\u7528\u200b\u5982\u4e0b\u200b\uff1a</p> <ul> <li>-Wl,\u2013whole-archive\u200c</li> </ul> <p>\u200b\u5f3a\u5236\u200b\u5305\u542b\u200b\u9759\u6001\u200b\u5e93\u200b\u6240\u6709\u200b\u7b26\u53f7\u200b\u200c\uff1a\u200b\u94fe\u63a5\u200b\u5668\u4f1a\u200b\u5c06\u200b\u540e\u7eed\u200b\u6307\u5b9a\u200b\u7684\u200b\u9759\u6001\u200b\u5e93\u200b\uff08.a \u200b\u6587\u4ef6\u200b\uff09\u200b\u4e2d\u200b\u6240\u6709\u200b\u76ee\u6807\u200b\u6587\u4ef6\u200b\uff08.o \u200b\u6587\u4ef6\u200b\uff09\u200b\u5305\u542b\u200b\u5230\u200b\u6700\u7ec8\u200b\u8f93\u51fa\u200b\u6587\u4ef6\u200b\u4e2d\u200b\uff0c\u200b\u5373\u4f7f\u200b\u8fd9\u4e9b\u200b\u7b26\u53f7\u200b\u672a\u200b\u88ab\u200b\u663e\u5f0f\u200b\u5f15\u7528\u200b\u200c\u3002\u200b\u89e3\u51b3\u200b\u56e0\u200b\u9759\u6001\u200b\u5e93\u672a\u200b\u88ab\u200b\u5b8c\u5168\u200b\u94fe\u63a5\u200b\u5bfc\u81f4\u200b\u7684\u200b\u201c\u200b\u672a\u5b9a\u4e49\u200b\u7b26\u53f7\u200b\u201d\u200b\u95ee\u9898\u200b\uff0c\u200b\u5982\u200b\u6784\u9020\u51fd\u6570\u200b/\u200b\u6790\u6784\u200b\u51fd\u6570\u200b\u672a\u200b\u88ab\u200b\u8c03\u7528\u200b\u3001\u200b\u672a\u200b\u4f7f\u7528\u200b\u7684\u200b\u51fd\u6570\u200b\u88ab\u200b\u4f18\u5316\u200b\u7b49\u200b\u3002</p> <ul> <li>-Wl,\u2013no-whole-archive\u200c</li> </ul> <p>\u200b\u91cd\u7f6e\u200b\u94fe\u63a5\u200b\u884c\u4e3a\u200b\u200c\uff0c\u200b\u5173\u95ed\u200b \u2013whole-archive \u200b\u7684\u200b\u5f3a\u5236\u200b\u5305\u542b\u200b\u6548\u679c\u200b\uff0c\u200b\u6062\u590d\u200b\u94fe\u63a5\u200b\u5668\u200b\u9ed8\u8ba4\u200b\u884c\u4e3a\u200b\uff08\u200b\u4ec5\u200b\u5305\u542b\u200b\u88ab\u200b\u5f15\u7528\u200b\u7684\u200b\u7b26\u53f7\u200b\uff09\u200c\u3002\u200b\u907f\u514d\u200b\u540e\u7eed\u200b\u5176\u4ed6\u200b\u9759\u6001\u200b\u5e93\u200b\u88ab\u200b\u610f\u5916\u200b\u5f3a\u5236\u200b\u5305\u542b\u200b\uff0c\u200b\u5bfc\u81f4\u200b\u8f93\u51fa\u200b\u6587\u4ef6\u200b\u4f53\u79ef\u200b\u81a8\u80c0\u200b\u200c\u3002</p> <p>\u200b\u4ee5\u4e0b\u200b Makefile \u200b\u7247\u6bb5\u200b\u6f14\u793a\u200b\u4e86\u200b\u5982\u4f55\u200b\u5f3a\u5236\u200b\u94fe\u63a5\u200b libtest.a \u200b\u7684\u200b\u5168\u90e8\u5185\u5bb9\u200b\uff1a</p> Bash<pre><code>LDFLAGS += -Wl,--whole-archive -ltest -Wl,--no-whole-archive\n</code></pre> <p>\u200b\u6b64\u200b\u914d\u7f6e\u200b\u786e\u4fdd\u200b libtest.a \u200b\u4e2d\u200b\u6240\u6709\u200b\u7b26\u53f7\u200b\u88ab\u200b\u5305\u542b\u200b\uff0c\u200b\u800c\u200b\u540e\u7eed\u200b\u5176\u4ed6\u200b\u5e93\u200b\u4ecd\u200b\u6309\u200b\u9ed8\u8ba4\u200b\u89c4\u5219\u200b\u94fe\u63a5\u200b\u200c\u3002</p> <p>-Wl,\u2013whole-archive \u200b\u548c\u200b -Wl,\u2013no-whole-archive \u200b\u4e3b\u8981\u200b\u7528\u4e8e\u200b\u7cbe\u7ec6\u5316\u200b\u63a7\u5236\u200b\u9759\u6001\u200b\u5e93\u200b\u7684\u200b\u94fe\u63a5\u200b\u884c\u4e3a\u200b\uff0c\u200b\u89e3\u51b3\u200b\u7b26\u53f7\u200b\u672a\u200b\u5305\u542b\u200b\u6216\u200b\u4f9d\u8d56\u200b\u95ee\u9898\u200b\u3002\u200c</p>"},{"location":"blog/cpp%E5%BC%80%E5%8F%91%E4%B8%AD%E4%B8%80%E4%BA%9B%E7%BC%96%E8%AF%91%E9%80%89%E9%A1%B9%E7%9A%84%E7%94%A8%E5%A4%84%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E7%94%A8cmake%E8%AE%BE%E7%BD%AE/#-wl--as-needed\u5bf9\u52a8\u6001\u5e93\u7684\u6548\u679c","title":"<code>-Wl,--as-needed</code>\u200b\u5bf9\u200b\u52a8\u6001\u200b\u5e93\u200b\u7684\u200b\u6548\u679c","text":"<ul> <li><code>-Wl,--as-needed</code></li> </ul> <p>\u200b\u8fd9\u4e2a\u200b\u9009\u9879\u200b\u544a\u8bc9\u200b\u94fe\u63a5\u200b\u5668\u200b\u53ea\u200b\u5728\u200b\u5b9e\u9645\u200b\u9700\u8981\u200b\u65f6\u624d\u200b\u94fe\u63a5\u200b\u52a8\u6001\u200b\u5e93\u200b\u3002\u200b\u5b83\u200b\u53ef\u4ee5\u200b\u51cf\u5c11\u200b\u6700\u7ec8\u200b\u53ef\u6267\u884c\u6587\u4ef6\u200b\u7684\u200b\u4f9d\u8d56\u200b\u9879\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u53ea\u6709\u200b\u90a3\u4e9b\u200b\u771f\u6b63\u200b\u4f7f\u7528\u200b\u5230\u200b\u7684\u200b\u5171\u4eab\u200b\u5e93\u624d\u200b\u4f1a\u200b\u88ab\u200b\u5305\u542b\u200b\u3002</p> Bash<pre><code>gcc -o myapp main.o -Wl,--as-needed -lmylib\n</code></pre> <ul> <li><code>-Wl,--no-as-needed</code></li> </ul> <p>\u200b\u4f7f\u7528\u200b\u6b64\u200b\u9009\u9879\u200b\u5173\u95ed\u200b <code>--as-needed</code> \u200b\u884c\u4e3a\u200b\u3002\u200b\u6307\u5b9a\u200b\u8be5\u200b\u9009\u9879\u200b\u540e\u200b\uff0c\u200b\u94fe\u63a5\u200b\u5668\u4f1a\u200b\u5c06\u200b\u6240\u6709\u200b\u5217\u51fa\u200b\u7684\u200b\u5171\u4eab\u200b\u5e93\u200b\u94fe\u63a5\u200b\u5230\u200b\u8f93\u51fa\u200b\u6587\u4ef6\u200b\u4e2d\u200b\uff0c\u200b\u65e0\u8bba\u200b\u662f\u5426\u200b\u5728\u200b\u7a0b\u5e8f\u200b\u4e2d\u200b\u5b9e\u9645\u200b\u4f7f\u7528\u200b\u3002\u200b\u8fd9\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5bfc\u81f4\u200b\u66f4\u5927\u200b\u7684\u200b\u4e8c\u8fdb\u5236\u200b\u6587\u4ef6\u200b\u548c\u200b\u4e0d\u5fc5\u8981\u200b\u7684\u200b\u4f9d\u8d56\u200b\u3002</p>"},{"location":"blog/cpp%E5%BC%80%E5%8F%91%E4%B8%AD%E4%B8%80%E4%BA%9B%E7%BC%96%E8%AF%91%E9%80%89%E9%A1%B9%E7%9A%84%E7%94%A8%E5%A4%84%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E7%94%A8cmake%E8%AE%BE%E7%BD%AE/#\u901a\u8fc7\u771f\u5b9e\u4f8b\u5b50\u770b\u4e00\u770b","title":"\u901a\u8fc7\u200b\u771f\u5b9e\u200b\u4f8b\u5b50\u200b\u770b\u4e00\u770b","text":""},{"location":"blog/cpp%E5%BC%80%E5%8F%91%E4%B8%AD%E4%B8%80%E4%BA%9B%E7%BC%96%E8%AF%91%E9%80%89%E9%A1%B9%E7%9A%84%E7%94%A8%E5%A4%84%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E7%94%A8cmake%E8%AE%BE%E7%BD%AE/#\u4f8b\u5982absl\u662f\u9759\u6001\u5e93","title":"\u4f8b\u5982\u200babsl\u200b\u662f\u200b\u9759\u6001\u200b\u5e93","text":"<p>\u200b\u5728\u200bCMakeLists.txt\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u8fd9\u6837\u200b\u6307\u5b9a\u200b\u4e86\u200b\uff1a</p> C++<pre><code>file(GLOB ABSEIL_LIBS $ENV{THIRD_PARTY}/lib*/libabsl*.a)\n# find_package(absl REQUIRED)\nadd_library(xxx SHARED\n    xxx.cpp   \n)\n\ntarget_link_libraries(xxx PRIVATE\n    aaa\n    -Wl,--whole-archive\n    ${ABSEIL_LIBS}\n    -Wl,--no-whole-archive\n    yyy\n    -ldl\n    -lpthread\n)\n</code></pre>"},{"location":"blog/cpp%E5%BC%80%E5%8F%91%E4%B8%AD%E4%B8%80%E4%BA%9B%E7%BC%96%E8%AF%91%E9%80%89%E9%A1%B9%E7%9A%84%E7%94%A8%E5%A4%84%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E7%94%A8cmake%E8%AE%BE%E7%BD%AE/#\u4f8b\u5982\u6709\u4e2a\u52a8\u6001\u5e93","title":"\u4f8b\u5982\u200b\u6709\u4e2a\u200b\u52a8\u6001\u200b\u5e93","text":"<p>\u200b\u4f46\u662f\u200b\u7f16\u8bd1\u200b\u65f6\u200b\u4e0d\u200b\u9700\u8981\u200b\u6307\u5b9a\u200b\u8fd9\u4e2a\u200b\u52a8\u6001\u200b\u5e93\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u7f16\u8bd1\u200b\u901a\u8fc7\u200b\uff0c\u200b\u4f46\u662f\u200b\u8fd0\u884c\u200b\u65f6\u200b\u9700\u8981\u200b\u52a0\u8f7d\u200b\u5b83\u200b\uff0c\u200b\u5982\u679c\u200b\u4e0d\u200b\u91c7\u7528\u200bdlopen\u200b\u7684\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u5f3a\u5236\u200b\u94fe\u63a5\u200b\u8fd9\u4e2a\u200b\u52a8\u6001\u200b\u5e93\u200b\u3002</p> <p>\u200b\u4ec0\u4e48\u6837\u200b\u7684\u200b\u60c5\u666f\u200b\u5462\u200b\uff1f</p> <p>\u200b\u56e0\u4e3a\u200b\u5728\u200bC++\u200b\u7684\u200b\u4ee3\u7801\u200b\u4e2d\u200b\uff0c\u200b\u5f88\u591a\u200b\u6ce8\u518c\u200b\u673a\u5236\u200b\uff0c\u200b\u90fd\u200b\u662f\u200b\u901a\u8fc7\u200b\u52a8\u6001\u200b\u5e93\u6765\u200b\u5b9e\u73b0\u200b\u7684\u200b\u3002\u200b\u9700\u8981\u200b\u52a0\u8f7d\u200b\u52a8\u6001\u200b\u5e93\u200b\uff0c\u200b\u5728\u200b\u8fd0\u884c\u200b\u65f6\u200b\u624d\u80fd\u200b\u5b8c\u6210\u200b\u6ce8\u518c\u200b\u3002Register\u200b\u7684\u200b\u539f\u7406\u200b\u4e00\u822c\u200b\u662f\u200b\u5728\u200bSO\u200b\u5b9e\u73b0\u200b\u4e2d\u200b\u52a0\u5165\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u9759\u6001\u200b\u5168\u5c40\u53d8\u91cf\u200b\uff0c\u200b\u5982\u679c\u200bso\u200b\u88ab\u200b\u52a0\u8f7d\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u5168\u5c40\u53d8\u91cf\u200b\u5c31\u200b\u4f1a\u200b\u88ab\u200b\u521d\u59cb\u5316\u200b\uff0c\u200b\u8c03\u7528\u200b\u6784\u9020\u51fd\u6570\u200b\u4e2d\u200b\u5b9e\u73b0\u200b\u7684\u200b\u6ce8\u518c\u200b\u903b\u8f91\u200b\uff0c\u200b\u4ece\u800c\u200b\u5b8c\u6210\u200b\u6ce8\u518c\u200b\u3002</p> <p>\u200b\u4e3a\u4e86\u200b\u89e3\u51b3\u200b\u8fd9\u4e2a\u200b\u9700\u8981\u200b\u5f3a\u5236\u200b\u94fe\u63a5\u200b\u52a8\u6001\u200b\u5e93\u200b\u7684\u200b\u95ee\u9898\u200b\uff1b </p>C++<pre><code>add_library(${PROJECT_NAME} SHARED\n    ${CMAKE_CURRENT_SOURCE_DIR}/src/xxx.cc\n    ${CMAKE_CURRENT_SOURCE_DIR}/src/yyy.cc\n)\n\ntarget_include_directories(${PROJECT_NAME} PRIVATE\n    xx/include\n)\n\ntarget_link_libraries(${PROJECT_NAME} PRIVATE\n    xxx-lib\n    -Wl,--no-as-needed\n    depend-lib\n    -Wl,--as-needed\n    yyy-lib\n    ${GLOG_LIBS}\n)\n</code></pre><p></p>"},{"location":"blog/cpp%E5%BC%80%E5%8F%91%E4%B8%AD%E4%B8%80%E4%BA%9B%E7%BC%96%E8%AF%91%E9%80%89%E9%A1%B9%E7%9A%84%E7%94%A8%E5%A4%84%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E7%94%A8cmake%E8%AE%BE%E7%BD%AE/#\u7b2c\u4e09\u65b9\u5e93\u7248\u672c\u4e0d\u4e00\u81f4\u5934\u6587\u4ef6\u63a5\u53e3\u5b9a\u4e49\u4e0d\u517c\u5bb9","title":"\u7b2c\u4e09\u65b9\u200b\u5e93\u200b\u7248\u672c\u200b\u4e0d\u200b\u4e00\u81f4\u200b\uff0c\u200b\u5934\u6587\u4ef6\u200b\u63a5\u53e3\u5b9a\u4e49\u200b\u4e0d\u200b\u517c\u5bb9","text":"<p>\u200b\u5728\u200b\u7f16\u8bd1\u200b\u53ef\u6267\u884c\u6587\u4ef6\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u5f88\u591a\u200b\u52a8\u6001\u94fe\u63a5\u5e93\u200b\u65f6\u200b\uff0c\u200b\u4e00\u5b9a\u200b\u8981\u200b\u4fdd\u8bc1\u200b\u5934\u6587\u4ef6\u200b\u662f\u200b\u4e00\u81f4\u200b\u7684\u200b\uff0c\u200b\u5305\u62ec\u200b\u516c\u5171\u200b\u5e93\u200b\uff0c\u200b\u6bd4\u5982\u200bglog\uff0cabsl\u200b\u7b49\u200b\u3002</p> <p>\u200b\u4f8b\u5982\u200b\u5b58\u5728\u200b\u4e24\u4efd\u200bglog\uff0c\u200b\u4e00\u4efd\u200b\u5728\u200b\u7cfb\u7edf\u200b/3rdparty\u200b\u4e0b\u200b\uff0c\u200b\u4e00\u4efd\u200b\u5728\u200b\u9879\u76ee\u200b\u5185\u90e8\u200b\uff0c\u200b\u90a3\u4e48\u200b\u7f16\u8bd1\u200b\u65f6\u200b\uff0c\u200b\u5982\u679c\u200b\u4e0d\u200b\u4e00\u6837\u200b\u3002\u200b\u90a3\u4e48\u200bso\u200b\u548c\u200b\u53ef\u6267\u884c\u6587\u4ef6\u200b\uff0c\u200b\u5c31\u200b\u4f1a\u200b\u56e0\u4e3a\u200b\u4e8c\u8fdb\u5236\u200b\u4e0d\u200b\u517c\u5bb9\u200b\uff0c\u200b\u5bfc\u81f4\u200b\u8fd0\u884c\u200b\u65f6\u200b\u5d29\u6e83\u200b\u3002</p> <p>\u200b\u62a5\u9519\u200b\u73b0\u8c61\u200b\u8fd8\u200b\u4e0d\u200b\u5bb9\u6613\u200b\u6392\u67e5\u200b\u5230\u200b\uff0c\u200b\u5f80\u5f80\u200b\u662f\u200b\u8dd1\u200b\u5230\u200b\u4e00\u4e2a\u200b\u968f\u610f\u200b\u7684\u200b\u4f4d\u7f6e\u200b\uff0c\u200b\u89e6\u53d1\u200b\u4e86\u200b\u6bb5\u200b\u9519\u8bef\u200b\u6216\u8005\u200bstack smashing detected\u200b\u7b49\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u7f16\u8bd1\u5668\u200b\u7248\u672c\u200b\u4e0d\u200b\u4e00\u6837\u200b\uff0c\u200b\u8fd8\u200b\u53ef\u80fd\u200b\u5bfc\u81f4\u200bABI\u200b\u51b2\u7a81\u200b\u3002</p>"},{"location":"blog/cpp%E5%BC%80%E5%8F%91%E4%B8%AD%E4%B8%80%E4%BA%9B%E7%BC%96%E8%AF%91%E9%80%89%E9%A1%B9%E7%9A%84%E7%94%A8%E5%A4%84%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E7%94%A8cmake%E8%AE%BE%E7%BD%AE/#\u7f16\u8bd1\u65f6\u5ffd\u7565\u672a\u5b9a\u4e49\u7684\u7b26\u53f7\u8fd0\u884c\u65f6\u627e\u5f97\u5230\u5c31\u884c","title":"\u7f16\u8bd1\u200b\u65f6\u200b\u5ffd\u7565\u200b\u672a\u5b9a\u4e49\u200b\u7684\u200b\u7b26\u53f7\u200b\uff0c\u200b\u8fd0\u884c\u200b\u65f6\u200b\u627e\u200b\u5f97\u5230\u200b\u5c31\u884c","text":"<p>\u200b\u5982\u679c\u200b\u60f3\u8981\u200b\u5728\u200b\u7f16\u8bd1\u200b\u65f6\u200b\uff0c\u200b\u5ffd\u7565\u200b\u672a\u5b9a\u4e49\u200b\u7684\u200b\u7b26\u53f7\u200b\uff0c\u200b\u8ba9\u200b\u7f16\u8bd1\u200b\u901a\u8fc7\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u5982\u4e0b\u200b\u9009\u9879\u200b\uff1a </p>C++<pre><code>target_link_options(${PROJECT_NAME} PRIVATE \"-Wl,--unresolved-symbols=ignore-all\")\n</code></pre><p></p>"},{"location":"blog/cpp%E5%BC%80%E5%8F%91%E4%B8%AD%E4%B8%80%E4%BA%9B%E7%BC%96%E8%AF%91%E9%80%89%E9%A1%B9%E7%9A%84%E7%94%A8%E5%A4%84%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E7%94%A8cmake%E8%AE%BE%E7%BD%AE/#\u68c0\u67e5\u67d0\u4e9b\u51fd\u6570\u8fd4\u56de\u503c\u672a\u6ca1\u6709\u8fd4\u56de","title":"\u68c0\u67e5\u200b\u67d0\u4e9b\u200b\u51fd\u6570\u200b\u8fd4\u56de\u503c\u200b\u672a\u200b\u6ca1\u6709\u200b\u8fd4\u56de","text":"<p>\u200b\u5728\u200b\u6709\u4e9b\u200b\u7f16\u8bd1\u5668\u200b\u4e0a\u200b\u53ef\u80fd\u200b\u4e0d\u4f1a\u200b\u62a5\u9519\u200b\uff0c\u200b\u4f46\u662f\u200b\u6709\u4e9b\u200b\u7f16\u8bd1\u5668\u200b\u8fd0\u884c\u200b\u65f6\u4f1a\u200b\u62a5\u200b\u4e00\u4e9b\u200b\u5185\u5b58\u200b\u9519\u8bef\u200b\uff0c\u200b\u8ba9\u200b\u4eba\u200b\u6478\u4e0d\u7740\u5934\u8111\u200b\u3002\u200b\u5f88\u96be\u200b\u5b9a\u4f4d\u200b\u3002\u200b\u8fd9\u65f6\u200b\u53ef\u4ee5\u200b\u6dfb\u52a0\u200b\u7f16\u8bd1\u200b\u9009\u9879\u200b\uff1a </p>C++<pre><code>add_compile_options(-Wreturn-type -Werror=return-type)\n</code></pre><p></p>"},{"location":"blog/cpp%E5%BC%80%E5%8F%91%E4%B8%AD%E4%B8%80%E4%BA%9B%E7%BC%96%E8%AF%91%E9%80%89%E9%A1%B9%E7%9A%84%E7%94%A8%E5%A4%84%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E7%94%A8cmake%E8%AE%BE%E7%BD%AE/#\u6392\u67e5\u5185\u5b58\u95ee\u9898\u65f6\u4f7f\u7528\u5de5\u5177","title":"\u6392\u67e5\u200b\u5185\u5b58\u200b\u95ee\u9898\u200b\u65f6\u200b\u4f7f\u7528\u200b\u5de5\u5177","text":""},{"location":"blog/cpp%E5%BC%80%E5%8F%91%E4%B8%AD%E4%B8%80%E4%BA%9B%E7%BC%96%E8%AF%91%E9%80%89%E9%A1%B9%E7%9A%84%E7%94%A8%E5%A4%84%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E7%94%A8cmake%E8%AE%BE%E7%BD%AE/#\u5728\u8c03\u8bd5\u5185\u5b58\u95ee\u9898\u65f6\u53ef\u4ee5\u4f7f\u7528valgrind","title":"\u5728\u200b\u8c03\u8bd5\u200b\u5185\u5b58\u200b\u95ee\u9898\u200b\u65f6\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200bvalgrind","text":"<p>\u200b\u4f7f\u7528\u200b\u793a\u4f8b\u200b\uff0c\u200b\u5b83\u200b\u53ef\u4ee5\u200b\u5e2e\u52a9\u200b\u6211\u4eec\u200b\u68c0\u67e5\u200b\u5185\u5b58\u200b\u6cc4\u6f0f\u200b\uff0c\u200b\u672a\u200b\u521d\u59cb\u5316\u200b\u7684\u200b\u5185\u5b58\u200b\uff0c\u200b\u8d8a\u754c\u200b\u8bbf\u95ee\u200b\u7b49\u200b\u95ee\u9898\u200b\u3002 </p>Bash<pre><code>export GLOG_v=1\nvalgrind --leak-check=full --show-leak-kinds=all --log-file=valgrind_output.txt  ./hello\n</code></pre><p></p>"},{"location":"blog/cpp%E5%BC%80%E5%8F%91%E4%B8%AD%E4%B8%80%E4%BA%9B%E7%BC%96%E8%AF%91%E9%80%89%E9%A1%B9%E7%9A%84%E7%94%A8%E5%A4%84%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E7%94%A8cmake%E8%AE%BE%E7%BD%AE/#\u7f16\u8bd1\u65f6\u52a0\u4e0a--g-asan\u4f7f\u7528asanitizer\u5de5\u5177","title":"\u7f16\u8bd1\u200b\u65f6\u200b\u52a0\u4e0a\u200b -g\uff0c asan\u200b\u4f7f\u7528\u200basanitizer\u200b\u5de5\u5177\u200b\ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350","text":"<p>cmakelists.txt\u200b\u4e2d\u200b\u52a0\u5165\u200b\uff1a </p>C++<pre><code>set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG}  -fsanitize=address -g -O0 -fno-omit-frame-pointer \")\n</code></pre><p></p> <ul> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>C++20\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u57fa\u4e8e\u200b\u5c5e\u6027\u200b\u6d4b\u8bd5\u200b\u7684\u200bquickcheck-cpp\u200b\u5e93\u200b</li> <li>c++\u200b\u9759\u6001\u200b\u5e93\u200b\u548c\u200b\u52a8\u6001\u200b\u5e93\u200b\u5168\u5c40\u53d8\u91cf\u200b\u521d\u59cb\u5316\u200b\u6709\u4f55\u200b\u4e0d\u540c\u200b\uff1f</li> <li>\u200b\u4f7f\u7528\u200baya\u200b\u548c\u200bc\u200b\u6df7\u5408\u200b\u7f16\u5199\u200buprobe\u200b\u7a0b\u5e8f\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> </ul>"},{"location":"blog/fish%E5%A6%82%E4%BD%95%E5%A2%9E%E5%8A%A0%E5%92%8C%E5%88%A0%E9%99%A4%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8Fpath%E4%B8%BA%E4%BB%80%E4%B9%88%E6%B2%A1%E6%9C%89fish_remove_path%E6%96%B9%E6%B3%95%E5%88%A0%E9%99%A4%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/","title":"fish\u200b\u5982\u4f55\u200b\u589e\u52a0\u200b\u548c\u200b\u5220\u9664\u200b\u73af\u5883\u53d8\u91cf\u200bPATH\uff1f\u200b\u4e3a\u4ec0\u4e48\u200b\u6ca1\u6709\u200bfish_remove_path\u200b\u65b9\u6cd5\u200b\u5220\u9664\u200b\u73af\u5883\u53d8\u91cf","text":"<p>fish\u200b\u5982\u4f55\u200b\u589e\u52a0\u200b\u548c\u200b\u5220\u9664\u200b\u73af\u5883\u53d8\u91cf\u200bPATH\uff1ffish\u200b\u4e3a\u4ec0\u4e48\u200b\u6ca1\u6709\u200bfish_remove_path\u200b\u65b9\u6cd5\u200b\u5220\u9664\u200b\u73af\u5883\u53d8\u91cf\u200b\u3002</p>"},{"location":"blog/fish%E5%A6%82%E4%BD%95%E5%A2%9E%E5%8A%A0%E5%92%8C%E5%88%A0%E9%99%A4%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8Fpath%E4%B8%BA%E4%BB%80%E4%B9%88%E6%B2%A1%E6%9C%89fish_remove_path%E6%96%B9%E6%B3%95%E5%88%A0%E9%99%A4%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/#fish\u5982\u4f55\u8bbe\u7f6e\u73af\u5883\u53d8\u91cfpath","title":"fish\u200b\u5982\u4f55\u200b\u8bbe\u7f6e\u200b\u73af\u5883\u53d8\u91cf\u200bPATH","text":"<p>\u200b\u7b54\u6848\u200b\u662f\u200b\uff1afish_add_path\u200b\u547d\u4ee4\u200b\u3002</p> <p>\u200b\u9ed8\u8ba4\u200b\u662f\u200buniversal variable\u3002\u200b\u5c06\u200b\u53d8\u91cf\u200b\u589e\u52a0\u200b\u5230\u200b\u901a\u7528\u200b\u53d8\u91cf\u200bfish_user_paths\u200b\u4e2d\u200b\u3002\u200b\u9664\u975e\u200b\u6307\u5b9a\u200b-P\u200b\u6216\u8005\u200b\u2013path\u200b\u91c7\u7528\u200b\u4fee\u6539\u200b$PATH\u200b\u73af\u5883\u53d8\u91cf\u200b\u3002</p> Bash<pre><code>$ fish_add_path\n-g or --global\nUse a global fish_user_paths.\n\n-U or --universal\nUse a universal fish_user_paths - this is the default if it doesn\u2019t already exist.\n\n-P or --path\nManipulate PATH directly.\n</code></pre> Bash<pre><code>ken@LAPTOP-44OC4FG2 ~ [1]&gt; echo $fish_user_paths\n/opt/nvim-linux64/bin /opt/helix-24.07-x86_64-linux\n\nken@LAPTOP-44OC4FG2 ~&gt; fish_add_path /home/ken/tmp/\n\nken@LAPTOP-44OC4FG2 ~&gt; echo $fish_user_paths\n/home/ken/tmp /opt/nvim-linux64/bin /opt/helix-24.07-x86_64-linux\n</code></pre>"},{"location":"blog/fish%E5%A6%82%E4%BD%95%E5%A2%9E%E5%8A%A0%E5%92%8C%E5%88%A0%E9%99%A4%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8Fpath%E4%B8%BA%E4%BB%80%E4%B9%88%E6%B2%A1%E6%9C%89fish_remove_path%E6%96%B9%E6%B3%95%E5%88%A0%E9%99%A4%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/#fish\u53d8\u91cf\u7684\u4f5c\u7528\u8303\u56f4","title":"fish\u200b\u53d8\u91cf\u200b\u7684\u200b\u4f5c\u7528\u200b\u8303\u56f4\u200b\u3002","text":"<p>fish\u200b\u53d8\u91cf\u200b\u6709\u200b\u56db\u79cd\u200b\uff0c\u200b\u5206\u522b\u200b\u662f\u200b\u901a\u7528\u200b\u53d8\u91cf\u200b(universal variable)\u3001\u200b\u5168\u5c40\u53d8\u91cf\u200b(global variable)\u3001\u200b\u51fd\u6570\u200b\u53d8\u91cf\u200b(function)\u200b\u548c\u200b\u5c40\u90e8\u53d8\u91cf\u200b(local)\u3002</p> <ul> <li> <p>\u200b\u901a\u7528\u200b\u53d8\u91cf\u200b\u5728\u200b\u7528\u6237\u200b\u5728\u200b\u4e00\u53f0\u200b\u8ba1\u7b97\u673a\u200b\u4e0a\u200b\u8fd0\u884c\u200b\u7684\u200b\u6240\u6709\u200bfish session\u200b\u4e4b\u95f4\u200b\u5171\u4eab\u200b\u3002\u200b\u5b83\u4eec\u200b\u5b58\u50a8\u200b\u5728\u200b\u78c1\u76d8\u200b\u4e0a\u200b\uff0c\u200b\u5373\u4f7f\u200b\u5728\u200b\u91cd\u65b0\u542f\u52a8\u200b\u540e\u200b\u4e5f\u200b\u4f1a\u200b\u4fdd\u7559\u200b\u3002\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u201c-U\u201d\u200b\u6216\u200b\u201c\u2013universal\u201d\u200b\u6307\u5b9a\u200b\u3002</p> </li> <li> <p>\u200b\u5168\u5c40\u53d8\u91cf\u200b(global variable)\u200b\u7279\u5b9a\u200b\u4e8e\u200b\u5f53\u524d\u200b\u7684\u200bfish session\u3002\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u6267\u884c\u200b\u201cset -e\u201d\u200b\u547d\u4ee4\u200b\u6765\u200b\u6e05\u9664\u200b\u5b83\u4eec\u200b\uff0ce\u200b\u5c31\u662f\u200berase\u200b\u7684\u200b\u610f\u601d\u200b\u3002\u200b\u4f7f\u7528\u200b\u201c-g\u201d\u200b\u6216\u200b\u201c\u2013global\u201d\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b\u5168\u5c40\u53d8\u91cf\u200b\u3002</p> </li> <li> <p>\u200b\u51fd\u6570\u200b\u53d8\u91cf\u200b\u7279\u5b9a\u200b\u4e8e\u200b\u5f53\u524d\u200b\u6b63\u5728\u200b\u6267\u884c\u200b\u7684\u200b\u51fd\u6570\u200b\u3002\u200b\u5f53\u200b\u51fd\u6570\u200b\u7ed3\u675f\u200b\u65f6\u200b\uff0c\u200b\u8d85\u51fa\u200b\u4f5c\u7528\u57df\u200b\u5c06\u200b\u88ab\u200b\u6e05\u9664\u200b\u3002\u200b\u5728\u200b\u51fd\u6570\u200b\u5916\u90e8\u200b\uff0c\u200b\u5b83\u4eec\u200b\u4e0d\u4f1a\u200b\u8d85\u51fa\u200b\u4f5c\u7528\u57df\u200b\u3002\u200b\u4f7f\u7528\u200b\u201c-f\u201d\u200b\u6216\u200b\u201c\u2013function\u201d\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b\u51fd\u6570\u200b\u4f5c\u7528\u57df\u200b\u53d8\u91cf\u200b\u3002</p> </li> <li> <p>\u200b\u5c40\u90e8\u53d8\u91cf\u200b\u7279\u5b9a\u200b\u4e8e\u200b\u5f53\u524d\u200b\u7684\u200b\u547d\u4ee4\u200b\u5757\u200b\uff0c\u200b\u5e76\u4e14\u200b\u5f53\u200b\u7279\u5b9a\u200b\u7684\u200b\u5757\u200b\u8d85\u51fa\u200b\u4f5c\u7528\u57df\u200b\u65f6\u4f1a\u200b\u81ea\u52a8\u200b\u88ab\u200b\u6e05\u9664\u200b\u3002\u200b\u547d\u4ee4\u200b\u5757\u200b\u662f\u200b\u4e00\u7cfb\u5217\u200b\u4ee5\u200b\u201cfor\u201d\u3001\u201cwhile\u201d\u3001\u201cif\u201d\u3001\u201cfunction\u201d\u3001\u201cbegin\u201d\u200b\u6216\u200b\u201cswitch\u201d\u200b\u4e2d\u200b\u7684\u200b\u4e00\u4e2a\u200b\u547d\u4ee4\u200b\u5f00\u5934\u200b\uff0c\u200b\u5e76\u200b\u4ee5\u200b\u201cend\u201d\u200b\u547d\u4ee4\u200b\u7ed3\u5c3e\u200b\u7684\u200b\u547d\u4ee4\u200b\u3002\u200b\u5728\u200b\u5757\u200b\u5916\u90e8\u200b\uff0c\u200b\u8fd9\u200b\u4e0e\u200b\u51fd\u6570\u200b\u4f5c\u7528\u57df\u200b\u76f8\u540c\u200b\u3002\u200b\u4f7f\u7528\u200b\u201c-l\u201d\u200b\u6216\u200b\u201c\u2013local\u201d\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b\u5f53\u524d\u200b\u5757\u200b\u7684\u200b\u5c40\u90e8\u53d8\u91cf\u200b\u3002</p> </li> </ul> <p>\u200b\u53ef\u4ee5\u200b\u6709\u200b\u5f88\u591a\u200b\u540d\u79f0\u200b\u76f8\u540c\u200b\u4f46\u200b\u4f5c\u7528\u57df\u200b\u4e0d\u540c\u200b\u7684\u200b\u53d8\u91cf\u200b\u3002\u200b\u5f53\u200b\u4f60\u200b\u201c\u200b\u4f7f\u7528\u200b\u53d8\u91cf\u200b\u201d\u200b\u65f6\u200b\uff0c\u200b\u5c06\u200b\u4f7f\u7528\u200b\u5177\u6709\u200b\u8be5\u200b\u540d\u79f0\u200b\u7684\u200b\u4f5c\u7528\u57df\u200b\u6700\u5c0f\u200b\u7684\u200b\u53d8\u91cf\u200b\u3002\u200b\u6bd4\u5982\u200b\u540c\u65f6\u200b\u5b58\u5728\u200b\u5c40\u90e8\u53d8\u91cf\u200b\u3001\u200b\u5168\u5c40\u53d8\u91cf\u200b\u3001\u200b\u901a\u7528\u200b\u53d8\u91cf\u200b\u540d\u79f0\u200b\u90fd\u200b\u53eb\u200b\u201dXX\u201d\uff0c\u200b\u5c06\u4f1a\u200b\u4f7f\u7528\u200b\u5c40\u90e8\u53d8\u91cf\u200b\u201dXX\u201d\u3002</p>"},{"location":"blog/fish%E5%A6%82%E4%BD%95%E5%A2%9E%E5%8A%A0%E5%92%8C%E5%88%A0%E9%99%A4%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8Fpath%E4%B8%BA%E4%BB%80%E4%B9%88%E6%B2%A1%E6%9C%89fish_remove_path%E6%96%B9%E6%B3%95%E5%88%A0%E9%99%A4%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/#universal\u5927\u5bb6\u901a\u7528\u7684\u53d8\u91cf","title":"universal(\u200b\u5927\u5bb6\u200b\u901a\u7528\u200b\u7684\u200b\u53d8\u91cf\u200b)","text":"<p>\u200b\u4ec0\u4e48\u200b\u662f\u200buniversal variables\uff1f universal variables\u200b\u5c31\u662f\u200b\u4f60\u200b\u4f5c\u4e3a\u200b\u7528\u6237\u200b\uff0c\u200b\u4f60\u200b\u7684\u200b\u6240\u6709\u200b\u7684\u200bfish session\u200b\u4f1a\u8bdd\u200b\u4e4b\u95f4\u200b\u5171\u4eab\u200b\u7684\u200b\u53d8\u91cf\u200b\u3002Fish \u200b\u5c06\u200b\u5176\u200b\u8bb8\u591a\u200b\u914d\u7f6e\u200b\u9009\u9879\u200b\u5b58\u50a8\u200b\u4e3a\u200b\u901a\u7528\u200b\u53d8\u91cf\u200b\u3002\u200b\u8fd9\u200b\u610f\u5473\u7740\u200b\u4e3a\u4e86\u200b\u66f4\u6539\u200b fish \u200b\u8bbe\u7f6e\u200b\uff0c\u200b\u4f60\u200b\u53ea\u200b\u9700\u8981\u200b\u66f4\u6539\u200b\u4e00\u6b21\u200b\u53d8\u91cf\u503c\u200b\uff0c\u200b\u5b83\u200b\u5c06\u200b\u81ea\u52a8\u200b\u4e3a\u200b\u6240\u6709\u200b\u4f1a\u8bdd\u200b\u66f4\u65b0\u200b\uff0c\u200b\u5e76\u200b\u5728\u200b\u8ba1\u7b97\u673a\u200b\u91cd\u65b0\u542f\u52a8\u200b\u4ee5\u53ca\u200b\u767b\u5f55\u200b/\u200b\u6ce8\u9500\u200b\u65f6\u200b\u4fdd\u7559\u200b\u3002</p> <p>\u200b\u800c\u200b\u6211\u4eec\u200b\u8fd9\u200b\u7bc7\u6587\u7ae0\u200b\u8c08\u5230\u200b\u7684\u200bfish_user_paths\u200b\u5c31\u662f\u200buniversal variable\u3002 </p>Bash<pre><code>fish_user_paths\na list of directories that are prepended to PATH. This can be a universal variable.\n</code></pre><p></p>"},{"location":"blog/fish%E5%A6%82%E4%BD%95%E5%A2%9E%E5%8A%A0%E5%92%8C%E5%88%A0%E9%99%A4%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8Fpath%E4%B8%BA%E4%BB%80%E4%B9%88%E6%B2%A1%E6%9C%89fish_remove_path%E6%96%B9%E6%B3%95%E5%88%A0%E9%99%A4%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/#fish\u5982\u4f55\u5220\u9664path\u5462","title":"fish\u200b\u5982\u4f55\u200b\u5220\u9664\u200bpath\u200b\u5462\u200b\uff1f","text":"<p>\u200b\u6211\u4eec\u200b\u4e0a\u9762\u200b\u63d0\u5230\u200b\u4e86\u200b\uff0c\u200b\u9ed8\u8ba4\u200b\u662f\u200b\u52a0\u5230\u200bfish_user_paths\u200b\u901a\u7528\u200b\u53d8\u91cf\u200b\u4e2d\u200b\u4e86\u200b\u5bf9\u200b\u5427\u200b\uff1f\u200b\u90a3\u4e48\u200b\u6211\u4eec\u200b\u600e\u4e48\u200b\u5220\u9664\u200b\u5462\u200b\uff1f \u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u67e5\u627e\u200bfish_user_paths\u200b\u8fd9\u4e2a\u200blist\u200b\u4e2d\u200b\u7684\u200b\u4e0b\u6807\u200b\u4f4d\u7f6e\u200b\uff0c\u200b\u7136\u540e\u200b\u8fdb\u884c\u200berase\u200b\u79fb\u9664\u200b\uff0c\u200b\u5c31\u662f\u200b\u4e0b\u9762\u200b\u7684\u200b\u65b9\u6cd5\u200b\uff1a </p>Bash<pre><code>set -l index (contains -i -- /my/path/to/remove $PATH)\nand set -e PATH[$index]\n# or replace PATH with fish_user_paths\n</code></pre><p></p> <p>\u200b\u5f53\u7136\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u81ea\u5b9a\u4e49\u200b\u4e00\u4e2a\u200b\u65b9\u6cd5\u200b\uff1a </p>Bash<pre><code>function remove_path\n  if set -l index (contains -i \"$argv\" $fish_user_paths)\n    set -e fish_user_paths[$index]\n    echo \"Removed $argv from the path\"\n  end\nend\n</code></pre><p></p>"},{"location":"blog/fish%E5%A6%82%E4%BD%95%E5%A2%9E%E5%8A%A0%E5%92%8C%E5%88%A0%E9%99%A4%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8Fpath%E4%B8%BA%E4%BB%80%E4%B9%88%E6%B2%A1%E6%9C%89fish_remove_path%E6%96%B9%E6%B3%95%E5%88%A0%E9%99%A4%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/#\u4e3a\u5565fish\u4e0d\u6dfb\u52a0\u4e00\u4e2afish_remove_path\u65b9\u6cd5\u5462","title":"\u4e3a\u5565\u200bfish\u200b\u4e0d\u200b\u6dfb\u52a0\u200b\u4e00\u4e2a\u200bfish_remove_path\u200b\u65b9\u6cd5\u200b\u5462\u200b\uff1f","text":"<p>\u200b\u90a3\u4e48\u200b\u4e3a\u4ec0\u4e48\u200b\u4e0d\u80fd\u200b\u6709\u200bfish_remove_path\uff1f\u200b\u56e0\u4e3a\u200b\u5bf9\u200b\u521d\u5b66\u8005\u200b\uff0c\u200b\u7528\u200b\u4e00\u4e2a\u200b\u547d\u4ee4\u884c\u200b\u4e0d\u662f\u200b\u66f4\u52a0\u200b\u7b80\u5355\u200b\u5417\u200b\uff1f\u200b\u4e3a\u5565\u200b\u8fd8\u8981\u200b\u8fd9\u4e48\u200b\u9ebb\u70e6\u200b\u53bb\u200b\u5199\u200b\u4e00\u4e2a\u200b\u811a\u672c\u200b\uff0c\u200b\u6216\u8005\u200b\u4e24\u53e5\u200b\u8bed\u53e5\u200b\u3002</p> <p>\u200b\u9996\u5148\u200b\uff0c$PATH \u200b\u662f\u4ece\u200b\u7236\u200b\u8fdb\u7a0b\u200b\u7ee7\u627f\u200b\u7684\u200b\uff0c\u200b\u6ca1\u6709\u200b\u529e\u6cd5\u200b\u6c38\u4e45\u200b\u5730\u200b\u4ece\u200b\u5176\u4e2d\u200b\u5220\u9664\u200b\u67d0\u4e2a\u200b\u4e1c\u897f\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u6bcf\u6b21\u200b\u5b83\u200b\u90fd\u200b\u4f1a\u200b\u88ab\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b\u4e00\u4e2a\u200b\u65b0\u503c\u200b\u3002 \u200b\u4f5c\u8005\u200b\u8ba4\u4e3a\u200b\u6dfb\u52a0\u200b\u4e00\u4e2a\u200bfish_remove_path\u200b\u547d\u4ee4\u200b\u4f1a\u200b\u5f88\u200b\u6df7\u4e71\u200b\u3002</p> <p>\u200b\u539f\u6587\u200b\u662f\u200b\uff1a \u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u505a\u200b\u4e00\u4e2a\u200b fish_remove_path\uff0c\u200b\u5b83\u200b\u53ef\u4ee5\u200b\u4ece\u200b $fish_user_paths \u200b\u4e2d\u200b\u5220\u9664\u200b\u4f60\u200b\u7684\u200b\u8def\u5f84\u200b\uff0c\u200b\u4f46\u200b\u5982\u679c\u200b\u8def\u5f84\u200b\u4e0d\u662f\u200b\u5728\u200b\u8fd9\u91cc\u200b\u6dfb\u52a0\u200b\u7684\u200b\uff0c\u200b\u90a3\u200b\u5c31\u200b\u4f1a\u200b\u5f88\u200b\u6df7\u4e71\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5b83\u200b\u770b\u8d77\u6765\u200b\u4ec0\u4e48\u200b\u4e5f\u200b\u6ca1\u200b\u505a\u200b\u3002 \u200b\u6216\u8005\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u6dfb\u52a0\u200b\u4e00\u4e2a\u200b\u4ece\u200b $PATH \u200b\u4e2d\u200b\u5220\u9664\u200b\u5b83\u200b\u7684\u200b\uff0c\u200b\u4f46\u200b\u5982\u679c\u200b\u7a0d\u540e\u200b\u518d\u6b21\u200b\u6dfb\u52a0\u200b\u5b83\u200b\uff0c\u200b\u90a3\u200b\u5c31\u200b\u4f1a\u200b\u5f88\u200b\u6df7\u4e71\u200b\u3002 \u200b\u552f\u4e00\u200b\u771f\u6b63\u200b\u7684\u200b\u89e3\u51b3\u65b9\u6848\u200b\u662f\u200b\u4e00\u200b\u5f00\u59cb\u200b\u5c31\u200b\u4e0d\u8981\u200b\u6dfb\u52a0\u200b\u8fd9\u4e2a\u200b\u8def\u5f84\u200b\u3002</p> <p>We could do a fish_remove_path that would remove your path from $fish_user_paths, but that would be confusing if that\u2019s not where the path is added, because it would appear to do nothing.Or we could add one that removes it from $PATH, but that would be confusing if it was added again later.</p> <p>\u200b\u53c2\u8003\u200b:fish_remove_path or equivalent, or documentation update.</p> <p>\u200b\u6709\u4e2a\u200bcommit\u200b\u63d0\u4ea4\u200b\u7ed9\u200b\uff0cfish_add_path\u200b\u589e\u52a0\u200b\u4e86\u200b\u4e00\u4e2a\u200b-r/\u2013remove\u200b\u9009\u9879\u200b\uff0c\u200b\u6307\u5b9a\u200b\u5220\u9664\u200bpath\u3002</p> <p>\u200b\u4f5c\u8005\u200b\u5426\u5b9a\u200b\u4e86\u200b:</p> <p>\u200b\u8fd9\u6709\u200b\u4e00\u4e9b\u200b\u6211\u200b\u8ba4\u4e3a\u200b\u4e0d\u53ef\u200b\u63a5\u53d7\u200b\u7684\u200b\u6743\u8861\u200b\u53d6\u820d\u200b\u3002 This has trade-offs that I find unacceptable.</p> <p>\u200b\u53c2\u8003\u200b\uff1aAdd \u2013remove to fish_add_path</p> <p>\u200b\u901a\u8fc7\u200b\uff0c\u200b\u672c\u6587\u200b\u6211\u4eec\u200b\u5b66\u4f1a\u200b\u4e86\u200bfish\u200b\u5982\u4f55\u200b\u8bbe\u7f6e\u200b\u73af\u5883\u53d8\u91cf\u200b$PATH, \u200b\u4ee5\u53ca\u200b\u53d8\u91cf\u200b\u7684\u200b\u4f5c\u7528\u200b\u8303\u56f4\u200b\u3002\u200b\u4e3a\u4ec0\u4e48\u200b\u6ca1\u6709\u200bfish_remove_path\u200b\u547d\u4ee4\u200b\uff0c\u200b\u4f5c\u8005\u200b\u7684\u200b\u8003\u8651\u200b\u662f\u200b\u4ec0\u4e48\u200b\u3002</p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>\u200b\u4f18\u96c5\u200b\u5f00\u53d1\u200b\u7bc7\u200b\uff1agit worktree\u200b\u5e76\u884c\u200b\u5206\u652f\u200b\u5f00\u53d1\u200b\uff0c\u200b\u53ca\u200b\u4e00\u4e2a\u200b\u6d4b\u91cf\u200b\u4e8c\u200b\u8fdb\u7a0b\u200b\u81a8\u80c0\u200b\u7684\u200brust\u200b\u5de5\u5177\u200b\u5e94\u7528\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/%E4%BC%98%E9%9B%85%E5%BC%80%E5%8F%91%E7%AF%87git-worktree%E5%B9%B6%E8%A1%8C%E5%88%86%E6%94%AF%E5%BC%80%E5%8F%91%E5%8F%8A%E4%B8%80%E4%B8%AA%E6%B5%8B%E9%87%8F%E4%BA%8C%E8%BF%9B%E7%A8%8B%E8%86%A8%E8%83%80%E7%9A%84rust%E5%B7%A5%E5%85%B7%E5%BA%94%E7%94%A8/","title":"\u4f18\u96c5\u200b\u5f00\u53d1\u200b\u7bc7\u200b\uff1agit worktree\u200b\u5e76\u884c\u200b\u5206\u652f\u200b\u5f00\u53d1\u200b\uff0c\u200b\u53ca\u200b\u4e00\u4e2a\u200b\u6d4b\u91cf\u200b\u4e8c\u200b\u8fdb\u7a0b\u200b\u81a8\u80c0\u200b\u7684\u200brust\u200b\u5de5\u5177\u200b\u5e94\u7528","text":""},{"location":"blog/%E4%BC%98%E9%9B%85%E5%BC%80%E5%8F%91%E7%AF%87git-worktree%E5%B9%B6%E8%A1%8C%E5%88%86%E6%94%AF%E5%BC%80%E5%8F%91%E5%8F%8A%E4%B8%80%E4%B8%AA%E6%B5%8B%E9%87%8F%E4%BA%8C%E8%BF%9B%E7%A8%8B%E8%86%A8%E8%83%80%E7%9A%84rust%E5%B7%A5%E5%85%B7%E5%BA%94%E7%94%A8/#git-worktree-\u662f\u4ec0\u4e48","title":"git worktree \u200b\u662f\u200b\u4ec0\u4e48\u200b\uff1f","text":"<p>Git Worktree \u200b\u662f\u200b Git \u200b\u63d0\u4f9b\u200b\u7684\u200b\u4e00\u4e2a\u200b\u5f3a\u5927\u200b\u529f\u80fd\u200b\uff0c\u200b\u5141\u8bb8\u200b\u4f60\u200b\u5728\u200b\u540c\u4e00\u4e2a\u200b\u4ed3\u5e93\u200b\u4e2d\u200b\u521b\u5efa\u200b\u591a\u4e2a\u200b\u72ec\u7acb\u200b\u7684\u200b\u5de5\u4f5c\u200b\u76ee\u5f55\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u76ee\u5f55\u200b\u53ef\u4ee5\u200b\u5173\u8054\u200b\u4e0d\u540c\u200b\u7684\u200b\u5206\u652f\u200b\uff08\u200b\u6216\u8005\u200b commit\uff09\uff0c\u200b\u4ece\u800c\u200b\u5b9e\u73b0\u200b\u5e76\u884c\u200b\u5f00\u53d1\u200b\u800c\u200b\u65e0\u9700\u200b\u9891\u7e41\u200b\u5207\u6362\u200b\u5206\u652f\u200b\u6216\u200b\u4f9d\u8d56\u200b git stash \u200b\u6682\u5b58\u200b\u4ee3\u7801\u200b \u200c\u3002</p> <p></p>"},{"location":"blog/%E4%BC%98%E9%9B%85%E5%BC%80%E5%8F%91%E7%AF%87git-worktree%E5%B9%B6%E8%A1%8C%E5%88%86%E6%94%AF%E5%BC%80%E5%8F%91%E5%8F%8A%E4%B8%80%E4%B8%AA%E6%B5%8B%E9%87%8F%E4%BA%8C%E8%BF%9B%E7%A8%8B%E8%86%A8%E8%83%80%E7%9A%84rust%E5%B7%A5%E5%85%B7%E5%BA%94%E7%94%A8/#\u53ef\u4ee5\u89e3\u51b3\u4ec0\u4e48\u95ee\u9898","title":"\u53ef\u4ee5\u200b\u89e3\u51b3\u200b\u4ec0\u4e48\u200b\u95ee\u9898\u200b\uff1f","text":"<p>\u200b\u6ca1\u6709\u200b\u4f7f\u7528\u200b worktree \u200b\u7684\u200b\u540c\u5b66\u200b\uff0c\u200b\u5047\u8bbe\u200b\u5728\u200b dev \u200b\u5206\u652f\u200b\u4e0a\u200b\u5f00\u53d1\u200b\uff0c\u200b\u5f00\u53d1\u200b\u4e86\u200b\u4e00\u534a\u200b\uff0c\u200b\u9700\u8981\u200b\u5207\u6362\u200b\u5230\u200b release \u200b\u5206\u652f\u200b\u4fee\u590d\u200b bug\uff0c\u200b\u90a3\u4e48\u200b\u9700\u8981\u200b\uff1a</p> <ol> <li>\u200b\u4fdd\u5b58\u200b\u5f53\u524d\u200b\u5206\u652f\u200b\u7684\u200b\u72b6\u6001\u200b\uff0c\u200b\u6bd4\u5982\u200b git commit \u200b\u6216\u8005\u200b git stash\u3002</li> <li>\u200b\u5207\u6362\u200b\u5230\u200b release \u200b\u5206\u652f\u200b\uff0c\u200b\u5207\u200b\u4e00\u4e2a\u200b hotfix \u200b\u5206\u652f\u200b\uff0c\u200b\u4fee\u590d\u200b bug\uff0c\u200b\u63d0\u4ea4\u200b\u3002</li> <li>\u200b\u5207\u6362\u200b\u56de\u6765\u200b\u7ee7\u7eed\u200b\u5f00\u53d1\u200b\u3002</li> </ol> <p>\u200b\u6216\u8005\u200b\uff1a</p> <ol> <li>git clone repo \u200b\u5230\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u76ee\u5f55\u200b\uff0c\u200b\u4fee\u590d\u200b bug\u3002</li> <li>\u200b\u5207\u6362\u200b\u56de\u539f\u200b\u76ee\u5f55\u200b\uff0c\u200b\u7ee7\u7eed\u200b\u5f00\u53d1\u200b\u3002</li> </ol> <p>\u200b\u7f3a\u70b9\u200b\u5c31\u662f\u200b\uff1a</p> <p>\u200b\u7b2c\u4e00\u200b\uff0c\u200b\u8fd9\u6837\u200b\u5f88\u200b\u9ebb\u70e6\u200b\uff0c\u200b\u5207\u6765\u5207\u200b\u53bb\u200b\u3002</p> <p>\u200b\u7b2c\u4e8c\u200b\uff0c\u200b\u5360\u200b\u5730\u65b9\u200b\uff0c\u200b\u591a\u4e2a\u200b repo \u200b\u62f7\u8d1d\u200b\u5360\u200b\u78c1\u76d8\u7a7a\u95f4\u200b\u3002</p> <p>\u200b\u7b2c\u4e09\u200b\uff0c\u200b\u5982\u679c\u200b 2 \u200b\u4e2a\u200b\u7248\u672c\u200b\u5206\u652f\u200b\u7684\u200b\u5de5\u7a0b\u200b\u4f9d\u8d56\u200b\u73af\u5883\u200b\u5dee\u5f02\u200b\u8f83\u5927\u200b\uff0c\u200b\u5bfc\u81f4\u200b\u6bcf\u6b21\u200b\u5207\u6362\u200b\u5206\u652f\u200b\u540e\u200b\uff0c\u200b\u5de5\u7a0b\u200b\u90fd\u200b\u90fd\u200b\u9700\u8981\u200b\u91cd\u65b0\u5b89\u88c5\u200b\u4f9d\u8d56\u200b\u4ee5\u53ca\u200b\u505a\u200b\u5168\u91cf\u200b\u7f16\u8bd1\u200b\u2014\u2014\u200b\u8fd9\u200b\u65e0\u7591\u200b\u589e\u52a0\u200b\u4e86\u200b\u7f16\u8bd1\u200b\u65f6\u95f4\u200b\uff0c\u200b\u5bfc\u81f4\u200b\u5f00\u53d1\u200b\u6548\u7387\u200b\u4e0b\u964d\u200b\u3002</p>"},{"location":"blog/%E4%BC%98%E9%9B%85%E5%BC%80%E5%8F%91%E7%AF%87git-worktree%E5%B9%B6%E8%A1%8C%E5%88%86%E6%94%AF%E5%BC%80%E5%8F%91%E5%8F%8A%E4%B8%80%E4%B8%AA%E6%B5%8B%E9%87%8F%E4%BA%8C%E8%BF%9B%E7%A8%8B%E8%86%A8%E8%83%80%E7%9A%84rust%E5%B7%A5%E5%85%B7%E5%BA%94%E7%94%A8/#\u6709\u4ec0\u4e48\u4f18\u52bf","title":"\u6709\u200b\u4ec0\u4e48\u200b\u4f18\u52bf\u200b\uff1f","text":"<p>\u200b\u9488\u5bf9\u200b\u8fd9\u4e2a\u200b\u75db\u70b9\u200b\uff0c Git Worktree \u200b\u51fa\u73b0\u200b\u4e86\u200b, \u200b\u5b83\u200b\u5177\u6709\u200b\u4e0b\u9762\u200b\u7684\u200b\u4f18\u52bf\u200b\uff1a</p> <ol> <li>\u200b\u4e0d\u200b\u9700\u8981\u200b\u63d0\u4ea4\u200b\u6216\u8005\u200b\u6682\u5b58\u200b\u4ee3\u7801\u200b\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u5207\u6362\u200b\u5206\u652f\u200b\u3002\u200b\u9762\u5bf9\u200b\u591a\u4e2a\u200b\u5206\u652f\u200b\u7684\u200b\u4ee3\u7801\u200b\u4e0d\u200b\u9700\u8981\u200b\u9891\u7e41\u200b\u5207\u6362\u200b\u3002</li> <li>\u200b\u6bcf\u4e2a\u200b\u5de5\u4f5c\u200b\u533a\u200b\u5171\u4eab\u200b\u540c\u4e00\u4e2a\u200b\u7248\u672c\u200b\u4ed3\u5e93\u200b\u4fe1\u606f\u200b\uff0c\u200b\u66f4\u200b\u8282\u7701\u200b\u786c\u76d8\u7a7a\u95f4\u200b\u3002</li> <li>\u200b\u5404\u4e2a\u200b\u5de5\u4f5c\u200b\u533a\u200b\u4e4b\u95f4\u200b\u7684\u200b\u66f4\u65b0\u200b\u540c\u6b65\u200b\u66f4\u200b\u5feb\u200b\uff0cgit clone \u200b\u65b9\u5f0f\u200b\u4e0b\u200b\uff0cA \u200b\u5de5\u4f5c\u200b\u533a\u200b\u548c\u200b B \u200b\u5de5\u4f5c\u200b\u533a\u200b\u9700\u8981\u200b A commit-&gt; A push -&gt; B pull\u3002git worktree \u200b\u65b9\u5f0f\u200b\u4e0b\u200b\uff0cA \u200b\u5de5\u4f5c\u200b\u533a\u200b\u53ea\u8981\u200b\u672c\u5730\u200b\u63d0\u4ea4\u200b\u66f4\u65b0\u200b\u540e\u200b\uff0c\u200b\u5176\u4ed6\u200b\u5de5\u4f5c\u200b\u533a\u200b\u5c31\u200b\u80fd\u200b\u7acb\u5373\u200b\u6536\u5230\u200b\uff08\u200b\u56e0\u4e3a\u200b\u5b83\u4eec\u200b\u5171\u4eab\u200b\u540c\u4e00\u4e2a\u200b\u7248\u672c\u200b\u4ed3\u5e93\u200b\uff09\u3002</li> </ol>"},{"location":"blog/%E4%BC%98%E9%9B%85%E5%BC%80%E5%8F%91%E7%AF%87git-worktree%E5%B9%B6%E8%A1%8C%E5%88%86%E6%94%AF%E5%BC%80%E5%8F%91%E5%8F%8A%E4%B8%80%E4%B8%AA%E6%B5%8B%E9%87%8F%E4%BA%8C%E8%BF%9B%E7%A8%8B%E8%86%A8%E8%83%80%E7%9A%84rust%E5%B7%A5%E5%85%B7%E5%BA%94%E7%94%A8/#\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u5b66\u4e60\u4f7f\u7528-git-worktree","title":"\u901a\u8fc7\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b\u5b66\u4e60\u200b\u4f7f\u7528\u200b git worktree","text":""},{"location":"blog/%E4%BC%98%E9%9B%85%E5%BC%80%E5%8F%91%E7%AF%87git-worktree%E5%B9%B6%E8%A1%8C%E5%88%86%E6%94%AF%E5%BC%80%E5%8F%91%E5%8F%8A%E4%B8%80%E4%B8%AA%E6%B5%8B%E9%87%8F%E4%BA%8C%E8%BF%9B%E7%A8%8B%E8%86%A8%E8%83%80%E7%9A%84rust%E5%B7%A5%E5%85%B7%E5%BA%94%E7%94%A8/#git-worktree\u5982\u4f55\u4f7f\u7528","title":"git worktree\u200b\u5982\u4f55\u200b\u4f7f\u7528","text":"<p>\u200b\u5047\u8bbe\u200b\u6211\u4eec\u200b\u6709\u4e2a\u200b helloworld \u200b\u7684\u200b\u4ed3\u5e93\u200b\uff1ahttps://github.com/KenForever1/helloworld\u3002</p> <p>\u200b\u5f53\u524d\u5de5\u4f5c\u200b\u5728\u200b dev \u200b\u5206\u652f\u200b\u4e0a\u200b\uff0c\u200b\u60f3\u8981\u200b\u5728\u200b release \u200b\u5206\u652f\u200b\u4fee\u590d\u200b bug\uff0c\u200b\u90a3\u4e48\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b git worktree\uff0c\u200b\u800c\u200b\u65e0\u9700\u200b\u5207\u6362\u200b\u5206\u652f\u200b\u3002</p> <p>\u200b\u4e3a\u200brelease\u200b\u5206\u652f\u200b\u589e\u52a0\u200b\u4e00\u4e2a\u200bworktree\uff1a</p> Bash<pre><code>cd /workspace/helloworld\ngit worktree add ../release-branch release\n</code></pre> <p>\u200b\u8fdb\u5165\u200brelease\u200b\u5206\u652f\u200b\u7684\u200bworktree\u200b\u76ee\u5f55\u200b\uff0c\u200b\u4fee\u590d\u200bbug: </p>Bash<pre><code>cd ../release-branch\n// fix your bug here\n</code></pre><p></p> <p>\u200b\u67e5\u770b\u200b\u5f53\u524d\u200b worktree \u200b\u5217\u8868\u200b\uff1a</p> Bash<pre><code>git worktree list\n/workspace/helloworld [main]\n/workspace/release-branch [release-branch]\n</code></pre> <p>\u200b\u5207\u6362\u200b\u56de\u200b dev \u200b\u5206\u652f\u200b\uff0c\u200b\u5220\u9664\u200b release \u200b\u5206\u652f\u200b\uff1a</p> Bash<pre><code>cd ../dev-branch\ngit worktree remove release-branch\n</code></pre>"},{"location":"blog/%E4%BC%98%E9%9B%85%E5%BC%80%E5%8F%91%E7%AF%87git-worktree%E5%B9%B6%E8%A1%8C%E5%88%86%E6%94%AF%E5%BC%80%E5%8F%91%E5%8F%8A%E4%B8%80%E4%B8%AA%E6%B5%8B%E9%87%8F%E4%BA%8C%E8%BF%9B%E7%A8%8B%E8%86%A8%E8%83%80%E7%9A%84rust%E5%B7%A5%E5%85%B7%E5%BA%94%E7%94%A8/#\u5176\u4ed6\u547d\u4ee4","title":"\u5176\u4ed6\u200b\u547d\u4ee4","text":"<ol> <li>\u200b\u5220\u9664\u200b\u9664\u4e86\u200b remove \u200b\u547d\u4ee4\u200b\uff0c\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u624b\u52a8\u200b\u5220\u9664\u200b\u76ee\u5f55\u200b\uff0c\u200b\u7136\u540e\u200b git worktree \u200b\u4f1a\u200b\u81ea\u52a8\u200b\u6e05\u7406\u200b</li> </ol> Bash<pre><code>rm -rf ../release-branch\ngit worktree prune\n</code></pre> <ol> <li>\u200b\u9501\u5b9a\u200b\u4e0e\u200b\u89e3\u9501\u200b \u200c</li> </ol> Bash<pre><code>git worktree lock releas-branch --reason \"\u200b\u7ef4\u62a4\u200b\u4e2d\u200b\"\n# \u200b\u89e3\u9501\u200b\u200c\ngit worktree unlock releas-branch\n</code></pre> <p>\u200b\u9501\u5b9a\u200b\u4e86\u200b\u4ee5\u540e\u200b\uff0cgit worktree remove \u200b\u4f1a\u200b\u62a5\u9519\u200b\uff0c\u200b\u9700\u8981\u200b\u5148\u200b\u89e3\u9501\u200b\u3002</p>"},{"location":"blog/%E4%BC%98%E9%9B%85%E5%BC%80%E5%8F%91%E7%AF%87git-worktree%E5%B9%B6%E8%A1%8C%E5%88%86%E6%94%AF%E5%BC%80%E5%8F%91%E5%8F%8A%E4%B8%80%E4%B8%AA%E6%B5%8B%E9%87%8F%E4%BA%8C%E8%BF%9B%E7%A8%8B%E8%86%A8%E8%83%80%E7%9A%84rust%E5%B7%A5%E5%85%B7%E5%BA%94%E7%94%A8/#\u4e00\u4e2a\u6d4b\u91cf\u4e8c\u8fdb\u5236\u81a8\u80c0\u7684-rust-\u5c0f\u5de5\u5177","title":"\u4e00\u4e2a\u200b\u6d4b\u91cf\u200b\u4e8c\u8fdb\u5236\u200b\u81a8\u80c0\u200b\u7684\u200b rust \u200b\u5c0f\u200b\u5de5\u5177","text":""},{"location":"blog/%E4%BC%98%E9%9B%85%E5%BC%80%E5%8F%91%E7%AF%87git-worktree%E5%B9%B6%E8%A1%8C%E5%88%86%E6%94%AF%E5%BC%80%E5%8F%91%E5%8F%8A%E4%B8%80%E4%B8%AA%E6%B5%8B%E9%87%8F%E4%BA%8C%E8%BF%9B%E7%A8%8B%E8%86%A8%E8%83%80%E7%9A%84rust%E5%B7%A5%E5%85%B7%E5%BA%94%E7%94%A8/#\u8bbe\u8ba1\u539f\u7406","title":"\u8bbe\u8ba1\u200b\u539f\u7406","text":"<p>\u200b\u4e0b\u9762\u200b\u4ecb\u7ecd\u200b\u7684\u200b\u4e00\u4e2a\u200b rust \u200b\u5de5\u5177\u200b\u6d4b\u91cf\u200b\u4e8c\u8fdb\u5236\u200b\u81a8\u80c0\u200b\uff08Measures bloat\uff09\u200b\u7684\u200b\u5c0f\u200b\u5de5\u5177\u200b\uff1a facet-rs/limpid</p> <p>\u200b\u4e00\u4e2a\u200b\u662f\u200b\u5f53\u524d\u200b HEAD\uff08\u200b\u76ee\u524d\u200b\u5f00\u53d1\u200b\u7684\u200b\u65b0\u200b\u7279\u6027\u200b\uff09\uff0c\u200b\u4e00\u4e2a\u200b\u662f\u200b main \u200b\u5206\u652f\u200b\uff08\u200b\u5df2\u7ecf\u200b\u53d1\u5e03\u200b\u7684\u200b\u7248\u672c\u200b\uff09\u3002\u200b\u76ee\u7684\u200b\u662f\u200b\u60f3\u200b\u5bf9\u6bd4\u200b\u5206\u6790\u200b\u4e24\u4e2a\u200b\u76ee\u5f55\u200b\u4e0b\u200b\u7684\u200b\u7f16\u8bd1\u200b\u6784\u5efa\u200b\u8017\u65f6\u200b\uff0c\u200b\u4e8c\u8fdb\u5236\u200b\u5927\u5c0f\u200b\u5dee\u5f02\u200b\u7b49\u200b\u3002 \u200b\u4e3a\u4e86\u200b\u5b9e\u73b0\u200b\u8fd9\u4e2a\u200b\u529f\u80fd\u200b\uff0c\u200b\u9488\u5bf9\u200b HEAD \u200b\u5f00\u53d1\u200b\u76ee\u5f55\u200b\uff0c\u200b\u521b\u5efa\u200b\u4e86\u200b\u4e00\u4e2a\u200b worktree \u200b\u76ee\u5f55\u200b\uff0c\u200b\u547d\u540d\u200b\u4e3a\u200b main\u3002\u200b\u5bf9\u6bd4\u200b\u5206\u6790\u200b\u5b8c\u6210\u200b\u540e\u200b\uff0c\u200b\u5220\u9664\u200b worktree \u200b\u76ee\u5f55\u200b\u3002</p> <p>\u200b\u56e0\u4e3a\u200b\u5bf9\u6bd4\u200b\u7684\u200b\u4ed3\u5e93\u200bfacet-rs/facet\uff0c\u200b\u662f\u200b\u4e00\u4e2a\u200b rust \u200b\u5e8f\u5217\u5316\u200b\u5e93\u200b crate\uff0c\u200b\u53ef\u4ee5\u200b\u7406\u89e3\u200b\u548c\u200b serde \u200b\u5dee\u4e0d\u591a\u200b\u3002 \u200b\u5728\u200b limpid \u200b\u5de5\u5177\u200b\u4e2d\u200b\uff0c\u200b\u5305\u62ec\u200b\u4e86\u200b\u521b\u5efa\u200b worktree \u200b\u548c\u200b\u7f16\u8bd1\u200b\u7edf\u8ba1\u200b\u4fe1\u606f\u200b\u7684\u200b\u4ee3\u7801\u200b\uff0c\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u5c31\u662f\u200b\u4f7f\u7528\u200b facet \u200b\u5e93\u200b\u7684\u200b\u4f8b\u5b50\u200b\uff0c\u200b\u91c7\u7528\u200b\u76f8\u5bf9\u200b\u76ee\u5f55\u200b\u5f15\u7528\u200b facet\u3002\u200b\u6240\u4ee5\u200b\u53ea\u8981\u200b\u4fdd\u6301\u200b\u5c42\u7ea7\u200b\u4e00\u81f4\u200b\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u4e0d\u540c\u200b\u5206\u652f\u200b\u7684\u200b facet \u200b\u5e93\u200b\u3002</p> <p>\u200b\u5de5\u4f5c\u200b\u76ee\u5f55\u200b\u7684\u200b\u7ed3\u6784\u200b\u5982\u4e0b\u200b\uff1a</p> Bash<pre><code>facet/ # facet\u200b\u5e93\u200bHEAD\u200b\u5206\u652f\u200b\n  facet/\n    Cargo.toml\n  facet-core/\n    Cargo.toml\n  facet-reflect/\n    Cargo.toml\nlimpid/ # limpid\u200b\u5de5\u5177\u200b\n  limpid/ # limpid\u200b\u5de5\u5177\u200b\n    Cargo.toml # this tool\n  kitchensink/ # \u200b\u4f7f\u7528\u200bfacet\u200b\u5e93\u200b\u7684\u200b\u4f8b\u5b50\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u7f16\u8bd1\u6210\u200b\u4e8c\u8fdb\u5236\u200b\u7a0b\u5e8f\u200b\n    ks-facet/\n      Cargo.toml # \u200b\u76f8\u5bf9\u200b\u76ee\u5f55\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u5f15\u7528\u200b../facet\u200b\u5e93\u200b\n    ks-serde/\n      Cargo.toml\n    ks-facet-json-read/\n    # etc.\n</code></pre> <p>\u200b\u5bf9\u6bd4\u200b\u7684\u200b main worktree \u200b\u76ee\u5f55\u200b\u3002</p> Bash<pre><code>/tmp/\n  limpid-main-workspace/\n    facet/       # worktree from facet repo at main branch\n      facet/\n      facet-core/\n      facet-reflect/\n    limpid/      # worktree from limpid repo at current HEAD\n      limpid/\n      kitchensink/\n        ks-facet/\n        ks-serde/\n        ks-facet-json-read/\n        # etc.\n</code></pre> <p>\u200b\u901a\u8fc7\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u5de5\u5177\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u5b66\u4e60\u200b worktree \u200b\u7684\u200b\u7528\u6cd5\u200b\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u5b66\u4e60\u200b\u5230\u200b\u4e00\u4e9b\u200b\u5de5\u5177\u200b\u7684\u200b\u8bbe\u8ba1\u200b\u7406\u5ff5\u200b\u3002\u200b\u4e0e\u200b\u8bed\u8a00\u200b\u65e0\u5173\u200b\uff0c\u200b\u4f60\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u7528\u200b python \u200b\u6216\u200b c++\u200b\u4ee5\u53ca\u200b\u5176\u4ed6\u200b\u8bed\u8a00\u200b\u5b9e\u73b0\u200b\u3002</p>"},{"location":"blog/%E4%BC%98%E9%9B%85%E5%BC%80%E5%8F%91%E7%AF%87git-worktree%E5%B9%B6%E8%A1%8C%E5%88%86%E6%94%AF%E5%BC%80%E5%8F%91%E5%8F%8A%E4%B8%80%E4%B8%AA%E6%B5%8B%E9%87%8F%E4%BA%8C%E8%BF%9B%E7%A8%8B%E8%86%A8%E8%83%80%E7%9A%84rust%E5%B7%A5%E5%85%B7%E5%BA%94%E7%94%A8/#\u6742\u8c08","title":"\u6742\u8c08\u200b\ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350","text":"<p>\u200b\u8fd9\u4e2a\u200b\u4f8b\u5b50\u200b\u5982\u679c\u200b\u4f60\u200b\u60f3\u200b\u5b66\u4e60\u200b rust \u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200b\uff0c\u200b\u91cc\u9762\u200b\u6709\u200b\u5f88\u591a\u200b\u5e38\u7528\u200b\u7684\u200b\u4e0d\u9519\u200b\u7684\u200b crate \u200b\u4f7f\u7528\u200b\uff0c\u200b\u6bd4\u5982\u200b\uff1a</p> Bash<pre><code>anyhow = \"1.0\" # \u200b\u7528\u4e8e\u200b\u9519\u8bef\u5904\u7406\u200b\nsubstance = \"0.7.1\" # https://github.com/fasterthanlime/substance.git\uff0c\u200b\u68c0\u67e5\u200b\u4e8c\u8fdb\u5236\u200b\u6587\u4ef6\u200b\u7684\u200b\u7b26\u53f7\u200b\u3001\u200b\u5206\u6790\u200b\u4e8c\u8fdb\u5236\u200b\u6587\u4ef6\u200b\u7684\u200b\u5927\u5c0f\u200b\u6784\u6210\u200b\nowo-colors = \"4.0\" # \u200b\u7528\u4e8e\u200b\u547d\u4ee4\u884c\u200b\u8f93\u51fa\u200b\u5f69\u8272\u200b\u5b57\u200b\nindicatif = \"0.17\" # \u200b\u8fdb\u5ea6\u6761\u200b\ncamino = \"1.1.10\" # Utf8\u200b\u8def\u5f84\u200b\u652f\u6301\u200b\uff0cPath\u200b\u548c\u200bPathBuf\u200b\u66f4\u597d\u200b\u7684\u200b\u5305\u88c5\u200b\npico-args = \"0.5.0\" # \u200b\u547d\u4ee4\u884c\u200b\u53c2\u6570\u200b\u89e3\u6790\u200b\uff0c\u200b\u6bd4\u200bclap\u200b\u66f4\u200b\u8f7b\u91cf\u200b\n</code></pre> <p>\u200b\u987a\u4fbf\u200b\u63d0\u200b\u4e00\u53e5\u200b\uff0c\u200b\u9488\u5bf9\u200b\u521a\u521a\u200b\u63d0\u5230\u200b\u7684\u200b substance rust \u200b\u5de5\u5177\u200b\uff0cgoogle \u200b\u4e5f\u200b\u6709\u200b\u4e2a\u200b c++\u200b\u5de5\u5177\u200bBloaty\u3002\u200b\u53ef\u4ee5\u200b\u89e3\u51b3\u200b\u662f\u200b\u4ec0\u4e48\u200b\u8ba9\u200b\u4f60\u200b\u7684\u200b\u4e8c\u8fdb\u5236\u200b\u6587\u4ef6\u200b\u53d8\u5f97\u200b\u8fd9\u4e48\u200b\u5927\u200b\uff1fBloaty \u200b\u4f1a\u4e3a\u200b\u4f60\u200b\u5c55\u793a\u200b\u4e8c\u8fdb\u5236\u200b\u6587\u4ef6\u200b\u7684\u200b\u5927\u5c0f\u200b\u5206\u5e03\u200b\uff0c\u200b\u8fd9\u6837\u200b\u4f60\u200b\u5c31\u200b\u80fd\u200b\u4e86\u89e3\u200b\u5176\u4e2d\u200b\u662f\u200b\u4ec0\u4e48\u200b\u5360\u7528\u200b\u4e86\u200b\u7a7a\u95f4\u200b\u3002</p> <ul> <li>fish\u200b\u5982\u4f55\u200b\u589e\u52a0\u200b\u548c\u200b\u5220\u9664\u200b\u73af\u5883\u53d8\u91cf\u200bPATH\uff1f\u200b\u4e3a\u4ec0\u4e48\u200b\u6ca1\u6709\u200bfish_remove_path\u200b\u65b9\u6cd5\u200b\u5220\u9664\u200b\u73af\u5883\u53d8\u91cf\u200b</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> <li>c++\u200b\u9759\u6001\u200b\u5e93\u200b\u548c\u200b\u52a8\u6001\u200b\u5e93\u200b\u5168\u5c40\u53d8\u91cf\u200b\u521d\u59cb\u5316\u200b\u6709\u4f55\u200b\u4e0d\u540c\u200b\uff1f</li> <li>C++20\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u57fa\u4e8e\u200b\u5c5e\u6027\u200b\u6d4b\u8bd5\u200b\u7684\u200bquickcheck-cpp\u200b\u5e93\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> </ul>"},{"location":"blog/git%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%A4%9A%E4%B8%AA%E4%BF%AE%E6%94%B9%E5%88%86%E5%A4%9A%E4%B8%AAcommit%E4%BF%AE%E6%94%B9/","title":"git\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b\uff1f\u200b\u591a\u4e2a\u200b\u4fee\u6539\u200b\u5206\u200b\u591a\u4e2a\u200bcommit\u200b\u4fee\u6539","text":""},{"location":"blog/git%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%A4%9A%E4%B8%AA%E4%BF%AE%E6%94%B9%E5%88%86%E5%A4%9A%E4%B8%AAcommit%E4%BF%AE%E6%94%B9/#\u4e00\u4e2a\u6587\u4ef6\u591a\u5904\u4fee\u6539\u5206\u591a\u4e2acommit\u63d0\u4ea4","title":"\u4e00\u4e2a\u200b\u6587\u4ef6\u200b\u591a\u5904\u200b\u4fee\u6539\u200b\u5206\u200b\u591a\u4e2a\u200bcommit\u200b\u63d0\u4ea4","text":"<p>\u200b\u5728\u200b\u9879\u76ee\u200b\u5f00\u53d1\u200b\u4e2d\u200b\u5f88\u200b\u5e38\u7528\u200b\u7684\u200b\u5de5\u4f5c\u200b\u6d41\u200b\uff0c\u200b\u5c06\u200b\u4fee\u6539\u200b\u62c6\u200b\u5206\u4e3a\u200b\u591a\u4e2a\u200b\u6e05\u6670\u200b\u7684\u200b\u63d0\u4ea4\u200b\uff0c\u200b\u8fd9\u6837\u200b\u5728\u200b\u56de\u9000\u200b\u548c\u200b\u6392\u67e5\u200b\u95ee\u9898\u200b\u65f6\u200b\u4e5f\u200b\u66f4\u52a0\u200b\u5bb9\u6613\u200b\uff0c\u200b\u4ee3\u7801\u200breview\u200b\u4e5f\u200b\u66f4\u52a0\u200b\u597d\u200b\u7406\u89e3\u200b\u3002</p> <p>\u200b\u91c7\u7528\u200bgit add -p, \u200b\u6839\u636e\u200b\u63d0\u793a\u200b\u5206\u6210\u200b\u591a\u4e2a\u200b\u5c0f\u200b\u5757\u200badd\u200b\u4fee\u6539\u200b\u3002</p> <p>git add -p\u200b\u7684\u200b\u63d0\u793a\u200b\u547d\u4ee4\u200b\u6709\u200b\uff1a s: split\uff0c\u200b\u5c06\u200b\u5f53\u524d\u200b\u4fee\u6539\u200b\u62c6\u200b\u5206\u4e3a\u200b\u591a\u4e2a\u200b\u5c0f\u200b\u5757\u200b\uff1b e: edit\uff0c\u200b\u8fdb\u5165\u200b\u7f16\u8f91\u200b\u6a21\u5f0f\u200b\u624b\u52a8\u200b\u641e\u200b\uff0c\u200b\u5982\u679c\u200bsplit\u200b\u4e0d\u200b\u6210\u529f\u200b\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u91c7\u7528\u200b\u8fd9\u4e2a\u200b\u624b\u52a8\u200b\u89e3\u51b3\u200b\uff1b</p> <p>\u200b\u6bd4\u5982\u200b\u4e0b\u9762\u200b\u7684\u200b\u60c5\u51b5\u200b\u662f\u200bsplit\u200b\u5212\u5206\u200b\u4e0d\u4e86\u200b\u7684\u200b\uff0c\u200b\u9700\u8981\u200bedit\u200b\u6a21\u5f0f\u200b\u89e3\u51b3\u200b\u3002 e\u200b\u6a21\u5f0f\u200b\u4e0b\u200b\uff0c </p>Text Only<pre><code>-11\n-22\n-33\n+1\n+2\n+3\n\n+4\n</code></pre><p></p> <p>\u200b\u5982\u679c\u200b\u4f60\u200b\u53ea\u200b\u60f3\u200badd: </p>Text Only<pre><code>+4\n</code></pre> \u200b\u90a3\u4e48\u200b\u5728\u200be\u200b\u6309\u4e0b\u200b\u540e\u200b\uff0c\u200b\u7f16\u8f91\u200b\u6a21\u5f0f\u200b\u4e0b\u200b\u9700\u8981\u200b\u505a\u200b\u7684\u200b\u7f16\u8f91\u200b\u66f4\u6539\u200b\u662f\u200b\uff0c\u200b\u5220\u9664\u200b\u4e0d\u200b\u9700\u8981\u200badd\u200b\u7684\u200b\u2019+\u2019\u200b\u53f7\u884c\u200b\uff0c\u200b\u5c06\u200b\u51cf\u53f7\u200b\u2019-\u2018\u200b\u884c\u200b\u6362\u6210\u200b\u2019 \u2018\u200b\u7a7a\u683c\u200b\u3002\u200b\u6ce8\u91ca\u200b\u662f\u200b\u6362\u6210\u200b\u7a7a\u683c\u200b\u4e0d\u662f\u200b\u5220\u9664\u200b\u51cf\u53f7\u200b\uff0c\u200b\u5426\u5219\u200b\u4f1a\u200b\u63d0\u793a\u200b\u4f60\u200b\u4fee\u6539\u200b\u4e0d\u200b\u901a\u8fc7\u200b\uff0c\u200b\u7ee7\u7eed\u200b\u91cd\u65b0\u200b\u4fee\u6539\u200b\u3002 Text Only<pre><code> 11\n 22\n 33\n\n+4\n</code></pre> \u200b\u8fd9\u6837\u200b\u5c31\u200b\u53ea\u200badd\u200b\u4e86\u200b\u201c+ 4\u201d\u200b\u7684\u200b\u4fee\u6539\u200b\u3002\u200b\u5269\u4e0b\u200b\u7684\u200b\u4fee\u6539\u200b\u5982\u4e0b\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u4e0b\u6b21\u200b\u518d\u200badd\u200b\u5230\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u63d0\u4ea4\u200b\u3002 Text Only<pre><code>-11\n-22\n-33\n+1\n+2\n+3\n</code></pre><p></p> <p>\u200b\u4e0b\u9762\u200b\u8fd9\u200b\u7bc7\u6587\u7ae0\u200b\u8bb2\u200b\u7684\u200b\u5f88\u200b\u8be6\u7ec6\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200b\uff1a\u200b\u540c\u4e00\u4e2a\u200b\u6587\u4ef6\u200b\u4fee\u6539\u200b\u4e86\u200b\u591a\u5904\u200b\u5982\u4f55\u200b\u5206\u200b\u4f5c\u200b\u591a\u4e2a\u200b\u63d0\u4ea4\u200b\u3002</p>"},{"location":"blog/git%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%A4%9A%E4%B8%AA%E4%BF%AE%E6%94%B9%E5%88%86%E5%A4%9A%E4%B8%AAcommit%E4%BF%AE%E6%94%B9/#\u4fee\u6539git\u9ed8\u8ba4\u7f16\u8f91\u5668","title":"\u4fee\u6539\u200bgit\u200b\u9ed8\u8ba4\u200b\u7f16\u8f91\u5668","text":"<p>git\u200b\u9ed8\u8ba4\u200b\u7684\u200b\u662f\u200bnano\u200b\u7f16\u8f91\u5668\u200b\uff0c\u200b\u6211\u7528\u200b\u7684\u200b\u4e0d\u5927\u200b\u4e60\u60ef\u200b\uff0c\u200b\u914d\u7f6e\u200b\u6210\u200bvim\u3002 </p>Bash<pre><code>git config --global core.editor vim\n</code></pre><p></p>"},{"location":"blog/git%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%A4%9A%E4%B8%AA%E4%BF%AE%E6%94%B9%E5%88%86%E5%A4%9A%E4%B8%AAcommit%E4%BF%AE%E6%94%B9/#\u64a4\u9500git-add\u91cd\u65b0\u63d0\u4ea4","title":"\u64a4\u9500\u200bgit add\uff0c\u200b\u91cd\u65b0\u200b\u63d0\u4ea4","text":"<p>\u200b\u5f53\u200b\u6211\u4eec\u200bgit add\u200b\u51fa\u9519\u200b\u65f6\u200b\uff0c\u200b\u60f3\u8981\u200b\u56de\u5230\u200b\u539f\u6765\u200b\u7684\u200b\u4fee\u6539\u200b\u72b6\u6001\u200b\uff0c\u200b\u7136\u540e\u200b\u91cd\u65b0\u200bgit add\u3002 </p>Bash<pre><code>git reset &lt;file&gt;\n</code></pre><p></p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>\u200b\u4f18\u96c5\u200b\u5f00\u53d1\u200b\u7bc7\u200b\uff1agit worktree\u200b\u5e76\u884c\u200b\u5206\u652f\u200b\u5f00\u53d1\u200b\uff0c\u200b\u53ca\u200b\u4e00\u4e2a\u200b\u6d4b\u91cf\u200b\u4e8c\u200b\u8fdb\u7a0b\u200b\u81a8\u80c0\u200b\u7684\u200brust\u200b\u5de5\u5177\u200b\u5e94\u7528\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/helix-gpt%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0ai-code%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95/","title":"helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?","text":""},{"location":"blog/helix-gpt%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0ai-code%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95/#helix-gpt\u5982\u4f55\u5b9e\u73b0ai\u7f16\u7801\u529f\u80fd\u7684","title":"helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bai\u200b\u7f16\u7801\u200b\u529f\u80fd\u200b\u7684\u200b\uff1f","text":"<p>helix-gpt\u200b\u662f\u200b\u4e2a\u200blanguage server\uff0c\u200b\u901a\u8fc7\u200b\u8c03\u7528\u200b\u5927\u200b\u8bed\u8a00\u200b\u6a21\u578b\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u5bf9\u200b\u4ee3\u7801\u200b\u7684\u200b\u667a\u80fd\u200b\u63d0\u793a\u200b\u548c\u200b\u7f16\u8f91\u200b\uff0c\u200b\u7531\u4e8e\u200b\u662f\u200b\u4f7f\u7528\u200b\u5927\u200b\u6a21\u578b\u200b\u5904\u7406\u200b\uff0c\u200b\u6240\u6709\u200b\u548c\u200b\u8bed\u8a00\u200b\u65e0\u5173\u200b\uff0c\u200b\u6240\u6709\u200b\u8bed\u8a00\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u3002helix\u200b\u672c\u8eab\u200b\u5185\u7f6e\u200blanguageserver\u200b\u534f\u8bae\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u90fd\u200b\u91c7\u7528\u200b\u4e86\u200blsp\u200b\u534f\u8bae\u200b\u3002\u200b\u5176\u5b9e\u200bvim\u3001vscode\u200b\u4e5f\u200b\u662f\u200b\u53ef\u4ee5\u200b\u7528\u200b\u7684\u200b\uff0c\u200b\u6211\u4eec\u200b\u770b\u5230\u200b\u7684\u200bGithub Copilot\u3001\u200b\u6587\u5fc3\u200b\u5feb\u7801\u200b\u3001\u200b\u901a\u4e49\u200b\u7075\u7801\u200b\u7b49\u200b\u5e94\u7528\u200b\u90fd\u200b\u662f\u200b\u8fd9\u6837\u200b\u5b9e\u73b0\u200b\u7684\u200b\u3002</p> <p>\u200b\u4f5c\u4e3a\u200bclient\u200b\u548c\u200bserver\u200b\u6c9f\u901a\u200b\u597d\u200b\u4ee5\u540e\u200b\uff0c\u200b\u5305\u62ec\u200bserver\u200b\u544a\u8bc9\u200bclient\uff0c\u200b\u6211\u200b\u652f\u6301\u200b\u54ea\u4e9b\u200b\u529f\u80fd\u200b\u554a\u200b\uff0c\u200b\u6bd4\u5982\u200b\u5c06\u200b\u6ce8\u91ca\u200b\u7ffb\u8bd1\u200b\u4e3a\u200b\u4ee3\u7801\u200b\u3001\u200b\u6839\u636e\u200b\u4ee3\u7801\u200b\u7eed\u5199\u200b\u3001\u200b\u5199\u200b\u5355\u6d4b\u200b\u3002\u200b\u90a3\u4e48\u200bclient\u200b\u6536\u5230\u200b\u4e86\u200b\u4ee5\u540e\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u5728\u200b\u754c\u9762\u200b\u4e0a\u200b\u663e\u793a\u200b\u51fa\u200b\u6309\u94ae\u200b\uff0c\u200b\u6211\u70b9\u200b\u90a3\u4e2a\u200b\u529f\u80fd\u200b\uff0c\u200b\u5c31\u200b\u53d1\u9001\u200b\u4e00\u4e2a\u200b\u5bf9\u5e94\u200b\u7684\u200baction request\u200b\u7ed9\u200bserver\u3002 \u200b\u6bd4\u5982\u200b\u4ee3\u7801\u200b\u7eed\u5199\u200b\uff0c\u200b\u60f3\u4e00\u60f3\u200b\u9700\u8981\u200b\u4ec0\u4e48\u200b\u4fe1\u606f\u200b\u5462\u200b\uff1f\u200b\u80af\u5b9a\u200b\u9700\u8981\u200b\u628a\u200b\u5f53\u524d\u200b\u4ee3\u7801\u200b\u7684\u200b\u4f4d\u7f6e\u200b\uff0cpos\uff08row\uff0c col\uff09\u200b\u4ee5\u53ca\u200b\u90a3\u4e2a\u200b\u6587\u4ef6\u200b/home/test.ts, \u200b\u8fd8\u6709\u200baction\uff0c\u200b\u4e00\u8d77\u200b\u53d1\u9001\u7ed9\u200bserver\u3002language server\u200b\u6536\u5230\u200b\u540e\u200b\uff0c\u200b\u6839\u636e\u200b\u6587\u4ef6\u200b\u548c\u200b\u4f4d\u7f6e\u200b\u8bfb\u53d6\u200b\u4e0a\u4e0b\u6587\u200b\uff0c\u200b\u6bd4\u5982\u200b\u524d\u9762\u200b200\u200b\u4e2a\u200b\u5b57\u8282\u200b\uff0c\u200b\u540e\u9762\u200b100\u200b\u4e2a\u200b\u5b57\u8282\u200b\uff0c\u200b\u7136\u540e\u200b\u901a\u8fc7\u200b\u5927\u200b\u6a21\u578b\u200b\u8c03\u7528\u200b\u63a5\u53e3\u200b\uff0c\u200b\u8c03\u7528\u200b\u5927\u200b\u6a21\u578b\u200b\u3002</p> <p>\u200b\u6bd4\u5982\u200b, \u200b\u5f53\u7136\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u8f93\u5165\u200b\u4e2d\u6587\u200b\u7ed9\u200b\u5230\u200b\u4e2d\u6587\u200b\u6a21\u578b\u200b\uff1a </p>JSON<pre><code>    const messages = [\n      {\n        \"content\": `You are an AI programming assistant.\\nWhen asked for your name, you must respond with \\\"GitHub Copilot\\\".\\nFollow the user's requirements carefully &amp; to the letter.\\n- Each code block starts with \\`\\`\\` and // FILEPATH.\\n- You always answer with ${languageId} code.\\n- When the user asks you to document something, you must answer in the form of a ${languageId} code block.\\nYour expertise is strictly limited to software development topics.\\nFor questions not related to software development, simply give a reminder that you are an AI programming assistant.\\nKeep your answers short and impersonal.`,\n        \"role\": \"system\"\n      },\n      {\n        \"content\": `I have the following code in the selection:\\n\\`\\`\\`${languageId}\\n// FILEPATH: ${filepath.replace('file://', '')}\\n${contents}`,\n        \"role\": \"user\"\n      },\n      {\n        \"content\": request,\n        \"role\": \"user\"\n      }\n    ]\n</code></pre> \u200b\u7136\u540e\u200b\u5927\u200b\u6a21\u578b\u200b\u8fd4\u56de\u200b\u7ed3\u679c\u200b\uff0c\u200b\u518d\u200b\u53d1\u9001\u7ed9\u200bclient\uff0c\u200b\u5199\u200b\u5230\u200b\u7f16\u8f91\u5668\u200b\u91cc\u9762\u200b\u3002 \u200b\u4e0b\u9762\u200b\u7684\u200b\u4f8b\u5b50\u200b\u662f\u200bopenai\u200b\u7684\u200b\u63a5\u53e3\u200b\uff0c\u200b\u5176\u5b83\u200b\u5e73\u53f0\u200b\u6709\u200b\u5bf9\u5e94\u200b\u7684\u200b\u63a5\u53e3\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u4e0d\u540c\u200b\u7684\u200b\u5904\u7406\u200b\u903b\u8f91\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u4e86\u200b\u3002 JSON<pre><code>{\n        \"choices\": [\n          {\n            \"index\": 0,\n            \"message\": {\n              \"role\": \"assistant\",\n              \"content\": \"const name: string = \\\"John\\\";\\nconsole.log(\\\"Hello, \\\" + name);\"\n            },\n          },\n          {\n            \"index\": 1,\n            \"message\": {\n              \"role\": \"assistant\",\n              \"content\": \"console.log(\\\"Hello, world!\\\");\"\n            },\n          },\n          {\n            \"index\": 2,\n            \"message\": {\n              \"role\": \"assistant\",\n              \"content\": \"const name: string = \\\"John\\\";\\nconsole.log(\\\"Hello, \\\" + name);\"\n            },\n          }\n        ],\n      }\n</code></pre> \u200b\u8fd9\u79cd\u200b\u65b9\u5f0f\u200b\u53ea\u200b\u9488\u5bf9\u200b\u5355\u4e00\u200b\u6587\u4ef6\u200b\u4e0a\u4e0b\u6587\u200b\uff0c\u200b\u90a3\u4e48\u200b\u66f4\u200b\u590d\u6742\u200b\u7684\u200b\u6bd4\u5982\u200b\u9700\u8981\u200b\u6574\u4e2a\u200b\u9879\u76ee\u200b\u7684\u200b\u4e0a\u4e0b\u6587\u200b\uff0c\u200b\u90a3\u200b\u80af\u5b9a\u200b\u9700\u8981\u200b\u63d0\u4f9b\u200b\u66f4\u200b\u591a\u200b\u7684\u200b\u5173\u952e\u200b\u4fe1\u606f\u200b\u652f\u6301\u200bgpt\u200b\u8fd4\u56de\u200b\u63d0\u793a\u4fe1\u606f\u200b\u548c\u200b\u5904\u7406\u200b\u4fe1\u606f\u200b\u3002Cursor\u200b\u7b49\u200bAI\u200b\u7f16\u8f91\u5668\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u9488\u5bf9\u200b\u9879\u76ee\u5206\u6790\u200b\u7684\u200b\u529f\u80fd\u200b\u3002<p></p>"},{"location":"blog/helix-gpt%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0ai-code%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95/#language-server\u548cclient\u7684\u901a\u4fe1\u673a\u5236","title":"language server\u200b\u548c\u200bclient\u200b\u7684\u200b\u901a\u4fe1\u200b\u673a\u5236","text":""},{"location":"blog/helix-gpt%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0ai-code%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95/#event\u4e8b\u4ef6","title":"Event\u200b\u4e8b\u4ef6","text":"Text Only<pre><code>export enum Event {\n  DidOpen = \"textDocument/didOpen\",\n  DidChange = \"textDocument/didChange\",\n  Completion = \"textDocument/completion\",\n  CodeAction = \"textDocument/codeAction\",\n  ApplyEdit = \"workspace/applyEdit\",\n  ExecuteCommand = \"workspace/executeCommand\",\n  Initialize = \"initialize\",\n  Shutdown = \"shutdown\",\n  Exit = \"exit\",\n  PublishDiagnostics = \"textDocument/publishDiagnostics\",\n}\n</code></pre>"},{"location":"blog/helix-gpt%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0ai-code%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95/#initialize-event\u4ea4\u6362\u4fe1\u606f","title":"initialize Event\u200b\u4ea4\u6362\u200b\u4fe1\u606f","text":"<p>\u200b\u521d\u59cb\u200b\u9636\u6bb5\u200b\uff0cclient\u200b\u548c\u200bserver\u200b\u901a\u4fe1\u200b\u4ea4\u6362\u200b\u4fe1\u606f\u200b\u3002 </p>Text Only<pre><code>Client --- initalize request          ---&gt; Server\nClient &lt;--- response with capabilities---- Server\n</code></pre><p></p>"},{"location":"blog/helix-gpt%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0ai-code%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95/#shutdown","title":"ShutDown","text":"<p>client\u200b\u8981\u200b\u5173\u95ed\u200b\u65f6\u200b\uff0c\u200b\u6bd4\u5982\u200b\u6211\u200b\u5173\u95ed\u200b\u4e86\u200b\u7f16\u8f91\u5668\u200b\uff0c\u200b\u53d1\u9001\u200b\u4e00\u4e2a\u200bshutdown request\u200b\u7ed9\u200bserver\uff0cserver\u200b\u76f4\u63a5\u200b\u5c31\u200b\u5173\u95ed\u200b\u670d\u52a1\u200b\uff0c\u200b\u6b63\u5e38\u200b\u9000\u51fa\u200b\u3002\u200b\u6bd4\u5982\u200b\uff1a </p>TypeScript<pre><code>this.on(Event.Shutdown, () =&gt; {\n    log(\"received shutdown request\")\n    process.exit(0)\n})\n</code></pre><p></p> <p>\u200b\u8fd9\u91cc\u200b\u4ee5\u200bInitialize\u200b\u9636\u6bb5\u200b\u770b\u770b\u200bClient\u200b\u548c\u200bServer\u200b\u662f\u200b\u5982\u4f55\u200b\u901a\u4fe1\u200b\u7684\u200b\u3002</p>"},{"location":"blog/helix-gpt%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0ai-code%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95/#initialize-\u8bf7\u6c42\u64cd\u4f5c\u7684\u5904\u7406\u662f\u600e\u6837\u7684","title":"Initialize \u200b\u8bf7\u6c42\u200b\u64cd\u4f5c\u200b\u7684\u200b\u5904\u7406\u200b\u662f\u200b\u600e\u6837\u200b\u7684\u200b\uff1f","text":""},{"location":"blog/helix-gpt%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0ai-code%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95/#initialize-request","title":"initialize request","text":"<p>\u200b\u4e0b\u9762\u200b\u7684\u200b\u6253\u5370\u4fe1\u606f\u200b\u662f\u200bserver\u200b\u6536\u5230\u200b\u4e86\u200brequest\uff0c\u200b\u7136\u540e\u200b\u53d1\u9001\u200b\u4e86\u200b\u4e00\u4e2a\u200bresponse\u200b\u4fe1\u606f\u200b\uff0cresponse\u200b\u5305\u62ec\u200b\u4e86\u200bcapabilities\uff0c\u200b\u5305\u62ec\u200b\u4e86\u200bcommands\uff0c\u200b\u6bd4\u5982\u200b\uff1a[\u201cresolveDiagnostics\u201d,\u201dgenerateDocs\u201d,\u201dimproveCode\u201d,\u201drefactorFromComment\u201d,\u201dwriteTest\u201d]\uff0c\u200b\u751f\u6210\u200b\u6587\u6863\u200b\u3001\u200b\u4f18\u5316\u200b\u4ee3\u7801\u200b\u3001\u200b\u6839\u636e\u200b\u6ce8\u91ca\u200b\u5199\u200b\u4ee3\u7801\u200b\u3001\u200b\u5199\u200b\u5355\u6d4b\u200b\u7b49\u200b\u3002 </p>Bash<pre><code>APP 2024-09-16T13:21:56.244Z --&gt; triggerCharacters: | [\"{\",\"(\",\" \"]\n\nAPP 2024-09-16T13:21:56.253Z --&gt; received request: | {\"id\":\"20dcc99c-b053-49a1-b972-e360366538d9\",\"params\":{\"capabilities\":{},\"processId\":298598,\"rootPath\":null,\"rootUri\":null,\"workspaceFolders\":null},\"method\":\"initialize\",\"jsonrpc\":\"2.0\"}\n\nAPP 2024-09-16T13:21:56.253Z --&gt; this.cap  | [object Object]\n\nAPP 2024-09-16T13:21:56.253Z --&gt; sent request | {\"jsonrpc\":\"2.0\",\"id\":\"20dcc99c-b053-49a1-b972-e360366538d9\",\"result\":{\"capabilities\":{\"codeActionProvider\":true,\"executeCommandProvider\":{\"commands\":[\"resolveDiagnostics\",\"generateDocs\",\"improveCode\",\"refactorFromComment\",\"writeTest\"]},\"completionProvider\":{\"resolveProvider\":false,\"triggerCharacters\":[\"{\",\"(\",\" \"]},\"textDocumentSync\":{\"change\":1,\"openClose\":true}}}}\n</code></pre><p></p> <p>\u200b\u5ba2\u6237\u7aef\u200b\u6536\u5230\u200b\u7684\u200b\u8bf7\u6c42\u200b\u662f\u200b\u600e\u4e48\u6837\u200b\u7684\u200b\u5462\u200b\uff1f\u200b\u5305\u62ec\u200b\u4e86\u200bContent-Length\u200b\u548c\u200bjson\u200b\u5185\u5bb9\u200b\uff0c\u200b\u91c7\u7528\u200bjsonrpc2.0\u200b\u534f\u8bae\u200b\u3002 </p>Bash<pre><code> b'Content-Length: 369\\r\\n\\r\\n{\"jsonrpc\":\"2.0\",\"id\":\"0a419853-3d6a-4236-8694-9d351b40ea28\",\"result\":{\"capabilities\":{\"codeActionProvider\":true,\"executeCommandProvider\":{\"commands\":[\"resolveDiagnostics\",\"generateDocs\",\"improveCode\",\"refactorFromComment\",\"writeTest\"]},\"completionProvider\":{\"resolveProvider\":false,\"triggerCharacters\":[\"{\",\"(\",\" \"]},\"textDocumentSync\":{\"change\":1,\"openClose\":true}}}}'\n</code></pre><p></p> <p>\u200b\u5728\u200b\u5f00\u53d1\u200b\u4e2d\u200b\u9047\u5230\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u95ee\u9898\u200b\uff0c\u200b\u5728\u200bserver\u200b\u91cc\u200b\u6dfb\u52a0\u200b\u6253\u5370\u200b\u540e\u200b\uff0c\u200b\u53d1\u73b0\u200b\u6253\u5370\u200b\u5185\u5bb9\u200b\u4e5f\u200b\u53d1\u9001\u7ed9\u200b\u4e86\u200b\u5ba2\u6237\u7aef\u200b\uff0c\u200b\u8fd9\u200b\u5e94\u8be5\u200b\u662f\u200b\u8f93\u51fa\u200b\u91cd\u5b9a\u5411\u200b\u7684\u200b\u95ee\u9898\u200b\uff1f \u200b\u8fd9\u65f6\u200b\u5ba2\u6237\u7aef\u200b\u6536\u5230\u200b\u7684\u200b\u662f\u200b\u8fd9\u6837\u200b\u7684\u200b: </p>Bash<pre><code>b'values :  [Object: null prototype] {\\n  handler: \"qianwen\",\\n ... ... ollamaTimeout: \"60000\"\\n}\\n Content-Length: 369\\r\\n\\r\\n{\"jsonrpc\":\"2.0\",\"id\":\"d2742aeb-379e-4cbb-959b-09da7ed9dfdc\",\"result\":{\"capabilities\":{\"codeActionProvider\":true,\"executeCommandProvider\":{\"commands\":[\"resolveDiagnostics\",\"generateDocs\",\"improveCode\",\"refactorFromComment\",\"writeTest\"]},\"completionProvider\":{\"resolveProvider\":false,\"triggerCharacters\":[\"{\",\"(\",\" \"]},\"textDocumentSync\":{\"change\":1,\"openClose\":true}}}}'\n</code></pre> \u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u5728\u200bContent-Length\u200b\u524d\u9762\u200b\u591a\u200b\u4e86\u200b\u4e9b\u200b\u5185\u5bb9\u200b\uff0c\u200b\u8fd9\u200b\u6b63\u662f\u200b\u6211\u4eec\u200blanguage-server log\u200b\u6253\u5370\u200b\u7684\u200b\u5185\u5bb9\u200b\u3002\u200b\u5bfc\u81f4\u200bpython client\u200b\u6b63\u5219\u8868\u8fbe\u5f0f\u200b\u5339\u914d\u200b\u89e3\u6790\u200b\u4e0d\u4e86\u200b\u3002\u200b\u8fd8\u200b\u4ee5\u4e3a\u200b\u662f\u200b\u6ca1\u6709\u200b\u6536\u5230\u200b\u8fd4\u56de\u200bResponce\u3002 pygls json_rpc.py: Python<pre><code>MESSAGE_PATTERN = re.compile(\n    rb\"^(?:[^\\r\\n]+\\r\\n)*\"\n    + rb\"Content-Length: (?P&lt;length&gt;\\d+)\\r\\n\"\n    + rb\"(?:[^\\r\\n]+\\r\\n)*\\r\\n\"\n    + rb\"(?P&lt;body&gt;{.*)\",\n    re.DOTALL,\n)\n\n# Look for the body of the message\nmessage = b\"\".join(self._message_buf)\nprint(\"wt message, \", message)\nfound = JsonRPCProtocol.MESSAGE_PATTERN.fullmatch(message)\n</code></pre><p></p>"},{"location":"blog/helix-gpt%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0ai-code%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95/#\u5982\u4f55\u901a\u8fc7pytest-lsp-client\u8c03\u8bd5server","title":"\u5982\u4f55\u200b\u901a\u8fc7\u200bpytest-lsp client\u200b\u8c03\u8bd5\u200bserver","text":"<p>\u200b\u5176\u5b9e\u200b\u901a\u8fc7\u200bclient\u200b\u8c03\u8bd5\u200bserver\uff0c\u200b\u5c31\u662f\u200b\u7528\u200bclient\u200b\u6a21\u62df\u200b\u4e86\u200b\u6211\u4eec\u200b\u7684\u200b\u7f16\u8f91\u5668\u200b\uff0c\u200b\u6bd4\u5982\u200bvscode\u3001vim\u3001helix\u200b\u7b49\u7b49\u200b\uff0c\u200b\u8fd9\u6837\u200b\u5c31\u200b\u4e0d\u7528\u200b\u8003\u8651\u200b\u7f16\u8f91\u5668\u200b\u7684\u200b\u590d\u6742\u6027\u200b\uff0c\u200b\u53ea\u7528\u200b\u5173\u6ce8\u200bclient\u200b\u548c\u200bserver\u200b\u7684\u200b\u901a\u4fe1\u200b\u3002</p> <p>pytest-lsp\u200b\u5c31\u662f\u200bpython\u200b\u5b9e\u73b0\u200b\u7684\u200b\u6d4b\u8bd5\u5de5\u5177\u200b\u3002\u200b\u5148\u200b\u6765\u770b\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b\uff1a \u200b\u5199\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200bpython\u200b\u5b9e\u73b0\u200b\u7684\u200bserver\uff0c\u200b\u4f7f\u7528\u200bpytest-lsp\u200b\u6d4b\u8bd5\u200b\uff0c\u200b\u901a\u8fc7\u200b\u4e86\u200b\u518d\u200b\u628a\u200bserve\u200b\u66ff\u6362\u6210\u200b\u6211\u4eec\u200b\u7684\u200bserver\u200b\u4e0d\u200b\u5c31\u200bok\u200b\u4e86\u200b\u3002\u200b\u5f00\u5e72\u200b\uff01</p>"},{"location":"blog/helix-gpt%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0ai-code%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95/#pytest-lsp-\u4f7f\u7528\u65b9\u6cd5","title":"pytest-lsp \u200b\u4f7f\u7528\u200b\u65b9\u6cd5","text":"<p>\u200b\u5148\u5199\u200b\u4e2a\u200bserver.py\uff0c\u200b\u5f88\u200b\u7b80\u5355\u200b\u5427\u200b\u3002 </p>Python<pre><code>from lsprotocol.types import TEXT_DOCUMENT_COMPLETION, CompletionItem, CompletionParams\nfrom pygls.server import LanguageServer\n\nserver = LanguageServer(\"hello-world\", \"v1\")\n\n\n@server.feature(TEXT_DOCUMENT_COMPLETION)\ndef completion(ls: LanguageServer, params: CompletionParams):\n    return [\n        CompletionItem(label=\"hello\"),\n        CompletionItem(label=\"world\"),\n    ]\n\nif __name__ == \"__main__\":\n    server.start_io()\n</code></pre><p></p> <p>\u200b\u7136\u540e\u200b\u5199\u4e2a\u200bClient\uff0ctest_server.py, </p>Python<pre><code>import sys\n\nimport pytest\nimport pytest_lsp\nfrom lsprotocol.types import (\n    ClientCapabilities,\n    CompletionList,\n    CompletionParams,\n    InitializeParams,\n    Position,\n    TextDocumentIdentifier,\n)\nfrom pytest_lsp import ClientServerConfig, LanguageClient\n\n\n@pytest_lsp.fixture(\n    # \u200b\u8c03\u7528\u200bpython\u200b\u5b9e\u73b0\u200b\u7684\u200bserver.py \n    config=ClientServerConfig(server_command=[sys.executable, \"server.py\"]),\n\n    # \u200b\u8c03\u7528\u200bhelix-gpt\u200b\u5b9e\u73b0\u200b\u7684\u200bserver\n    # config=ClientServerConfig(server_command=[\"/usr/bin/helix-gpt\", \"--handler\", \"qianwen\", \"--logFile\", \"/home/ken/helix-gpt-1.log\"]),\n)\nasync def client(lsp_client: LanguageClient):\n    # Setup\n    params = InitializeParams(capabilities=ClientCapabilities())\n    print(params)\n    print(\" Initializing session...\")\n    await lsp_client.initialize_session(params)\n\n    print(' Init Done!')\n\n\n    yield\n\n    # Teardown\n    await lsp_client.shutdown_session()\n\n@pytest.mark.asyncio\nasync def test_completions(client: LanguageClient):\n    \"\"\"Ensure that the server implements completions correctly.\"\"\"\n\n    print(\"Completion test\")\n    results = await client.text_document_completion_async(\n        params=CompletionParams(\n            position=Position(line=1, character=0),\n            text_document=TextDocumentIdentifier(uri=\"file:///home/ken/test.ts\"),\n        )\n    )\n    assert results is not None\n    print(\"results\", results)\n\n    if isinstance(results, CompletionList):\n        items = results.items\n    else:\n        items = results\n\n    labels = [item.label for item in items]\n    assert labels == [\"hello\", \"world\"]\n</code></pre><p></p> <p>\u200b\u8fd0\u884c\u200b\u6d4b\u8bd5\u200b\uff1a </p>Text Only<pre><code>python3 -m pip install pytest-lsp\n\n# $work_dir\u200b\u662f\u200btest_server.py\u200b\u5b58\u5728\u200b\u7684\u200b\u76ee\u5f55\u200b\ncd $work_dir\npytest -s\n</code></pre><p></p>"},{"location":"blog/helix-gpt%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0ai-code%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95/#\u4f7f\u7528pytest-lsp\u6d4b\u8bd5helix-gpt-server","title":"\u4f7f\u7528\u200bpytest-lsp\u200b\u6d4b\u8bd5\u200bhelix-gpt server","text":""},{"location":"blog/helix-gpt%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0ai-code%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95/#\u7f16\u8bd1helix-gpt","title":"\u7f16\u8bd1\u200bhelix-gpt","text":"<p>helix-gpt\u200b\u662f\u200b\u4f7f\u7528\u200btypescript\u200b\u5f00\u53d1\u200b\u7684\u200b\u9879\u76ee\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200bbun\u200b\u548c\u200bdeno\u200b\u8fdb\u884c\u200b\u7f16\u8bd1\u200b\u8fd0\u884c\u200b\u3002bun\u200b\u548c\u200bdemo\u200b\u662f\u200bjavascript runtime\uff0cbun\u200b\u662f\u200bzig\u200b\u5f00\u53d1\u200b\u7684\u200b\uff0cdeno\u200b\u662f\u200brust\u200b\u5f00\u53d1\u200b\u7684\u200b\uff0c\u200b\u548c\u200bnodejs\u200b\u5bf9\u6807\u200b\u3002bun\u200b\u5b58\u5728\u200bbug\uff0c\u200b\u8fd9\u91cc\u200b\u91c7\u7528\u200bdeno\u200b\u7f16\u8bd1\u200b\uff1a </p>Bash<pre><code>deno compile --output helix-gpt --no-check --allow-env --allow-net --allow-write ./src/app.ts\n</code></pre><p></p> <p>\u200b\u6362\u6210\u200b\u6211\u4eec\u200b\u7684\u200bhelix-gpt server\u200b\u8bd5\u8bd5\u200b\uff1a </p>Python<pre><code>@pytest_lsp.fixture(\n    # \u200b\u8c03\u7528\u200bpython\u200b\u5b9e\u73b0\u200b\u7684\u200bserver.py \n    # config=ClientServerConfig(server_command=[sys.executable, \"server.py\"]),\n\n    # \u200b\u8c03\u7528\u200bhelix-gpt\u200b\u5b9e\u73b0\u200b\u7684\u200bserver\n    config=ClientServerConfig(server_command=[\"/usr/bin/helix-gpt\", \"--handler\", \"qianwen\", \"--logFile\", \"/home/ken/helix-gpt-1.log\"]),\n)\n</code></pre><p></p> Bash<pre><code># -s \u200b\u662f\u200b\u4e3a\u4e86\u200b\u5728\u200bpython\u200b\u6267\u884c\u200btest\u200b\u65f6\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200bprint\u200b\u51fd\u6570\u200b\u8f93\u51fa\u200b\npytest -s\n</code></pre>"},{"location":"blog/helix-gpt%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0ai-code%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95/#\u589e\u52a0\u901a\u4e49\u5343\u95ee\u652f\u6301","title":"\u589e\u52a0\u200b\u901a\u4e49\u200b\u5343\u95ee\u200b\u652f\u6301","text":"<p>\u200b\u901a\u4e49\u200b\u5343\u95ee\u200b\u652f\u6301\u200b\u4e24\u79cd\u200bapi\uff0cOPENAI\u200b\u517c\u5bb9\u200b\u548c\u200bDashScope\uff0c\u200b\u8fd9\u91cc\u200b\u4ee5\u200bOPENAI\u200b\u517c\u5bb9\u200bAPI\u200b\u4e3a\u4f8b\u200b\uff1a \u200b\u589e\u52a0\u200b\u53c2\u6570\u200b\uff1a </p>TypeScript<pre><code>qianwenKey: {\n  type: 'string',\n  default: Bun.env.QIANWEN_API_KEY?? \"xxx\"\n},\nqianwenContext: {\n  type: 'string',\n  default: Bun.env.QIANWEN_CONTEXT?.length ? Bun.env.QIANWEN_CONTEXT : context.qianwen\n},\nqianwenModel: {\n  type: 'string',\n  default: Bun.env.QIANWEN_MODEL ?? \"qwen1.5-1.8b-chat\"\n},\nqianwenMaxTokens: {\n  type: 'string',\n  default: Bun.env.QIANWEN_MAX_TOKENS ?? \"2000\"\n},\nqianwenEndpoint: {\n  type: 'string',\n  default: Bun.env.QIANWEN_ENDPOINT ?? 'https://dashscope.aliyuncs.com/'\n},\n</code></pre> \u200b\u5b9e\u73b0\u200bqianwen provider,\u200b\u8be6\u7ec6\u200bAPI\u200b\u53c2\u8003\u200bAPI\u200b\u901a\u4e49\u200b\u5343\u95ee\u200b\u3002 TypeScript<pre><code>export default class Qianwen extends ApiBase {\n\n  constructor() {\n    super({\n      url: config.qianwenEndpoint as string,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${config.qianwenKey}`\n      }\n    })\n  }\n\nasync completion(contents: any, filepath: string, languageId: string, suggestions = 3): Promise&lt;types.Completion&gt; {\n    const messages = [\n      {\n        role: \"system\",\n        content: config.qianwenContext?.replace(\"&lt;languageId&gt;\", languageId) + \"\\n\\n\" + `End of file context:\\n\\n${contents.contentAfter}`\n      },\n      {\n        role: \"user\",\n        content: `Start of file context:\\n\\n${contents.contentBefore}`\n      }\n    ]\n\n    const body = {\n      model: config.qianwenModel,\n      max_tokens: parseInt(config.qianwenMaxTokens as string),\n      n: suggestions,\n      temperature: suggestions &gt; 1 ? 0.4 : 0,\n      frequency_penalty: 1,\n      presence_penalty: 2,\n      messages\n    }\n    log(\"qianwen request completion : \", body)\n\n    const data = await this.request({\n      method: \"POST\",\n      body,\n      endpoint: \"/compatible-mode/v1/chat/completions\"\n    })\n\n    return types.Completion.fromResponse(data)\n  }\n}\n</code></pre> ai\u200b\u7f16\u7a0b\u200b\u63d0\u793a\u200b\u7684\u200b\u6548\u679c\u200b\uff0c\u200b\u548c\u200b\u6a21\u578b\u200b\u7684\u200b\u76f8\u5173\u6027\u200b\u7279\u522b\u200b\u9ad8\u200b\uff0c\u200b\u6bd4\u5982\u200b\u6536\u8d39\u200b\u6a21\u578b\u200b\u201dqwen-max\u201d\u200b\u76f8\u5bf9\u200b\u201dqwen1.5-1.8b-chat\u201d\u200b\u7684\u200b\u63d0\u793a\u200b\u662f\u200b\u53c8\u200b\u5feb\u53c8\u51c6\u200b\u3002<p></p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>\u200b\u7528\u200b\u4e24\u53e5\u200b\u547d\u4ee4\u884c\u200b\u914d\u7f6e\u200b\u4e86\u200b\u4e00\u4e2a\u200bai\u200b\u7f16\u7801\u200b\u7684\u200bvim\u200b\u7f16\u8f91\u5668\u200b</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> <li>git\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b\uff1f\u200b\u591a\u4e2a\u200b\u4fee\u6539\u200b\u5206\u200b\u591a\u4e2a\u200bcommit\u200b\u4fee\u6539\u200b</li> </ul>"},{"location":"blog/libcurl%E5%A4%9A%E5%B0%91%E4%BA%86%E8%A7%A3%E4%B8%80%E7%82%B9/","title":"libcurl\u200b\u591a\u5c11\u200b\u4e86\u89e3\u200b\u4e00\u70b9\u200b\uff1f","text":""},{"location":"blog/libcurl%E5%A4%9A%E5%B0%91%E4%BA%86%E8%A7%A3%E4%B8%80%E7%82%B9/#libcurl\u591a\u5c11\u4e86\u89e3\u4e00\u70b9","title":"libcurl\u200b\u591a\u5c11\u200b\u4e86\u89e3\u200b\u4e00\u70b9\u200b\uff1f","text":"<p>\u200b\u6211\u4eec\u200b\u7ecf\u5e38\u200b\u7528\u200b\u4e00\u4e2a\u200b\u5de5\u5177\u200b\u53eb\u505a\u200bcurl\uff0c\u200b\u4f60\u200b\u77e5\u9053\u200blibcurl\u200b\u548c\u200bcurl\u200b\u7684\u200b\u533a\u522b\u200b\u5417\u200b\uff1f \u200b\u4f60\u200b\u77e5\u9053\u200b\u600e\u4e48\u200b\u5b89\u88c5\u200b\u548c\u200b\u4f7f\u7528\u200blibcurl\u200b\u5417\u200b\uff1f</p> <p>curl\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5f88\u200b\u5e38\u7528\u200b\u7684\u200b\u7f51\u7edc\u5de5\u5177\u200b\uff0c\u200b\u6bd4\u5982\u200b\u6211\u8981\u200b\u4e0b\u8f7d\u200b\u6587\u4ef6\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u7528\u200bwget\u3001curl\u200b\u7b49\u200b\u3002\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u652f\u6301\u200bRange\uff0c\u200b\u6309\u7167\u200b\u7ed9\u5b9a\u200bHeader\u200b\u4e2d\u200b\u8303\u56f4\u200b\u4e0b\u8f7d\u200b\uff0c\u200b\u6bd4\u5982\u200b\u4e0b\u8f7d\u200b\u6587\u4ef6\u200b0-999\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200b1000bytes\u3002</p> <p>libcurl\u200b\u662f\u200b\u4e00\u4e2a\u200bc\u200b\u8bed\u8a00\u200b\u5b9e\u73b0\u200b\u7f51\u7edc\u200b\u5e93\u200b\uff0c\u200b\u4f60\u200b\u80fd\u200b\u60f3\u5230\u200b\u7f51\u7edc\u200b\u76f8\u5173\u200b\u7684\u200bFTP\u3001HTTP2\u3001SSL\u200b\u7b49\u7b49\u200b\uff0c\u200b\u90fd\u200b\u6709\u200b\u652f\u6301\u200b\u5b9e\u73b0\u200b\u3002\u200b\u6bd4\u5982\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200blibcurl\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bhttp\u200b\u7684\u200b\u5e93\u200b\uff0c\u200b\u652f\u6301\u200bGET\u3001POST\u200b\u7b49\u200b\uff0c\u200b\u7136\u540e\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5728\u200b\u6b64\u57fa\u7840\u200b\u4e0a\u200b\u5b9e\u73b0\u200bOpenAI\u200b\u5e94\u7528\u200b\u3001\u200b\u804a\u5929\u5de5\u5177\u200b\u7b49\u7b49\u200b\u3002</p> <p>\u200b\u770b\u4e2a\u200b\u5c0f\u200b\u4f8b\u5b50\u200b\uff0c\u200b\u600e\u4e48\u200b\u4f7f\u7528\u200b\uff1a </p>Text Only<pre><code>#include &lt;curl/curl.h&gt;\n</code></pre><p></p> <p>\u200b\u5b89\u88c5\u200bcurl\uff0c\u200b\u624d\u200b\u5f00\u59cb\u200b\u4f7f\u7528\u200b\u4f60\u200b\u4e5f\u8bb8\u200b\u4f1a\u200b\u7591\u60d1\u200b\uff0c\u200b\u6211\u200b\u600e\u4e48\u200b\u5b89\u88c5\u200b\u5462\u200b\uff1f </p>Bash<pre><code>apt install curl\n</code></pre> \u200b\u4e0d\u5de7\u200b\uff0c\u200b\u4f60\u200b\u5b89\u88c5\u200b\u7684\u200b\u662f\u200bcurl\u200b\u5de5\u5177\u200b\uff0c\u200b\u4e0d\u662f\u200blibcurl\u3002<p></p> Text Only<pre><code>apt install libcurl4-openssl-dev\n</code></pre> <p>\u200b\u6709\u200b\u591a\u4e2a\u200bssl\u200b\u7248\u672c\u200b\uff0c\u200b\u6bd4\u5982\u200b gnu\uff0cgpl\u200b\u5f00\u6e90\u200b\u534f\u8bae\u200b\uff0c\u200b\u5c31\u662f\u200b\u4f60\u200b\u7684\u200b\u5e94\u7528\u200b\u9700\u8981\u200b\u5f00\u53d1\u200b\u6e90\u7801\u200b\uff0c\u200b\u548c\u200blinux\u200b\u7b49\u200b\u4e00\u6837\u200b\u3002 \u200b\u4f01\u4e1a\u200b\u66f4\u200b\u591a\u200b\u4f7f\u7528\u200bopenssl, apache\u200b\u5f00\u6e90\u200b\u534f\u8bae\u200b\uff0c\u200b\u548c\u200bMIT\u200b\u7b49\u200b\u4e00\u6837\u200b\uff0c\u200b\u6bd4\u8f83\u200b\u5f31\u200b\uff0c\u200b\u4f60\u200b\u4f7f\u7528\u200bapache\u200b\u5f00\u6e90\u200b\u9879\u76ee\u200b\u5f00\u53d1\u200b\u7684\u200b\u5e94\u7528\u200b\u4e0d\u7528\u200b\u5f00\u6e90\u200b\u6e90\u7801\u200b\u3002 rults\uff0c\u200b\u7eaf\u200brust\u200b\u5f00\u53d1\u200b\u3002</p> C<pre><code>GET baidu.com\n</code></pre>"},{"location":"blog/libcurl%E5%A4%9A%E5%B0%91%E4%BA%86%E8%A7%A3%E4%B8%80%E7%82%B9/#\u56de\u8c03\u51fd\u6570","title":"\u56de\u8c03\u200b\u51fd\u6570","text":"<p>\u200b\u8bbe\u7f6e\u200b\u56de\u8c03\u200b\u51fd\u6570\u200b\uff0c</p> <p>\u200b\u901a\u8fc7\u200bDATA,\u200b\u4f20\u9012\u200b\u7528\u6237\u200b\u56de\u8c03\u200b\u51fd\u6570\u6307\u9488\u200b</p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>C++20\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u57fa\u4e8e\u200b\u5c5e\u6027\u200b\u6d4b\u8bd5\u200b\u7684\u200bquickcheck-cpp\u200b\u5e93\u200b</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/lmdeploy%E6%8E%A8%E7%90%86do_sample%E5%B4%A9%E6%BA%83%E9%97%AE%E9%A2%98/","title":"lmdeploy\u200b\u63a8\u7406\u200bdo_sample\u200b\u5d29\u6e83\u200b\u95ee\u9898","text":"<p>\u200b\u91c7\u7528\u200bserver\u200b\u65b9\u5f0f\u200b\u63a8\u7406\u200b\u4e00\u4e2a\u200b\u6a21\u578b\u200b\uff0c\u200b\u4f1a\u200b\u5d29\u6e83\u200b\u3002</p> <p>\u200b\u91c7\u7528\u200bpipeline\u200b\u65b9\u5f0f\u200b\u63a8\u7406\u200b\u4e00\u4e2a\u200b\u6a21\u578b\u200b\uff0c\u200b\u4e0d\u4f1a\u200b\u5d29\u6e83\u200b\u3002</p> <p>\u200b\u4e0d\u7ba1\u200b\u662f\u200bserver\u200b\u8fd8\u662f\u200bpipeline\uff0c\u200b\u90fd\u200b\u8c03\u7528\u200b\u4e86\u200b\u540c\u6837\u200b\u7684\u200bgenerate()\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u4f46\u662f\u200b\u4e3a\u4ec0\u4e48\u200b\u4f1a\u200b\u4ea7\u751f\u200b\u4e0d\u540c\u200b\u7684\u200b\u7ed3\u679c\u200b\uff1f\u200b\u4f20\u9012\u200b\u7684\u200b\u53c2\u6570\u200b\u4e0d\u540c\u200b\u3002</p> <p>\u200b\u6bd4\u5982\u200bserver\u200b\u8c03\u7528\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u5982\u4e0b\u200b\uff1a</p> <p></p>Python<pre><code>~/lmdeploy/serve/openai/api_server.py\n@router.post('/v1/completions', dependencies=[Depends(check_api_key)])\nasync def completions_v1(request: CompletionRequest,\n                         raw_request: Request = None):\n\n                         ...\n    gen_config = GenerationConfig(\n        max_new_tokens=request.max_tokens if request.max_tokens else 512,\n        do_sample=True,\n        logprobs=request.logprobs,\n        top_k=request.top_k,\n        top_p=request.top_p,\n        temperature=request.temperature,\n        repetition_penalty=request.repetition_penalty,\n        ignore_eos=request.ignore_eos,\n        stop_words=request.stop,\n        skip_special_tokens=request.skip_special_tokens,\n        random_seed=random_seed,\n        spaces_between_special_tokens=request.spaces_between_special_tokens)\n    generators = []\n    for i in range(len(request.prompt)):\n        result_generator = VariableInterface.async_engine.generate(\n            request.prompt[i],\n            request.session_id + i,\n            gen_config=gen_config,\n            stream_response=True,  # always use stream to enable batching\n            sequence_start=True,\n            sequence_end=True,\n            do_preprocess=False,\n            adapter_name=adapter_name)\n        generators.append(result_generator)\n                         ...\n</code></pre> \u200b\u53ef\u4ee5\u200b\u770b\u5230\u200bdo_sample=True\u3002<p></p> Python<pre><code>async def _async_infer(self, requests: AsyncIterator[Dict],\n                        **kwargs) -&gt; AsyncIterator[AsyncIterator[Response]]:\n    async for req in requests:\n        gen = self.generate(**req, **kwargs)\n        yield gen\n\nasync def generate(\n        self,\n        messages,\n        session_id: int,\n        gen_config: Optional[GenerationConfig] = None,\n        tools: Optional[List[object]] = None,\n        stream_response: bool = True,\n        sequence_start: bool = True,\n        sequence_end: bool = True,  # no interactive mode by default\n        step: int = 0,\n        do_preprocess: bool = True,\n        adapter_name: Optional[str] = None,\n        skip_stop_tokens: bool = True,\n        rewind_stop_tokens: bool = False,\n        input_ids: Optional[List] = None,\n        **kwargs):\n        \"\"\"Generate responses.\n\n        Args:\n            messages (str | List): chat history or prompt\n            session_id (int): the session id\n            gen_config (GenerationConfig | None): a instance of\n                GenerationConfig. Default to None.\n            stream_response (bool): whether return responses streamingly\n            sequence_start (bool): indicator for starting a sequence\n            sequence_end (bool): indicator for ending a sequence\n            step (int): the offset of the k/v cache\n            do_preprocess (bool): whether pre-process the messages. Default to\n                True, which means chat_template will be applied.\n        \"\"\"\n</code></pre> <p>\u200b\u65ad\u70b9\u200b\u5bf9\u6bd4\u200b\u4e86\u200bgenerate()\u200b\u65b9\u6cd5\u200b\u4e2d\u200b\u7684\u200bgen_config\u200b\u53c2\u6570\u200b\uff0c</p> Python<pre><code># \u200b\u65ad\u70b9\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b:\nimport pdb\npdb.set_trace()\n</code></pre> <p>\u200b\u53d1\u73b0\u200bserver\u200b\u4e2d\u200b\u9ed8\u8ba4\u200bdo_sapmle=True\u3002pipelie\u200b\u4e2d\u200bdo_sample=False\u3002</p> <p>do_sample=True\u200b\u65f6\u200b\uff0c\u200b\u4f1a\u200b\u5d29\u6e83\u200b\u3002do_sample\u200b\u4f1a\u200b\u5f71\u54cd\u200btop_k\u3001top_p\u3001temperature\u200b\u53c2\u6570\u200b\u3002 \u200b\u4ee3\u7801\u200b\u5982\u4e0b\u200b\uff1a </p>Python<pre><code>        if not gen_config.do_sample:\n            logger.warning(f'GenerationConfig: {gen_config}')\n            logger.warning(\n                'Since v0.6.0, lmdeploy add `do_sample` in '\n                'GenerationConfig. It defaults to False, meaning greedy '\n                'decoding. Please set `do_sample=True` if sampling '\n                ' decoding is needed')\n            # greedy decode\n            gen_config.top_k = 1\n            # avoid unnecessary process\n            gen_config.temperature = 1.0\n            gen_config.repetition_penalty = 1.0\n</code></pre><p></p> <p>\u200b\u5982\u679c\u200bdo_sample=False, \u200b\u91c7\u7528\u200b\u7684\u200bgreedy \u200b\u8d2a\u5a6a\u200b\u641c\u7d22\u200b(\u200b\u4e3b\u8981\u200b\u662f\u200btop_k = 1)\uff0c\u200b\u4e0d\u4f1a\u200b\u5d29\u6e83\u200b\u3002 do_sample=True\u200b\u65f6\u200b\uff0c\u200b\u91c7\u7528\u200b\u7684\u200b\u662f\u200b\u91c7\u6837\u200b\u65b9\u6cd5\u200b(top_k &gt; 1)\uff0c\u200b\u6bd4\u5982\u200btop_k = 40, \u200b\u4f1a\u200b\u5d29\u6e83\u200b\u3002</p> <p></p>Python<pre><code>~/lmdeploy/pytorch/engine/logits_process.py\nclass FusedLogitsProcessor(LogitsWarper):\n    \"\"\"Custom logits processor.\"\"\"\n    @torch.inference_mode()\n    def sampling(self, logits: torch.Tensor):\n        \"\"\"sampling.\"\"\"\n\n        sampling_inputs = self.sampling_inputs\n\n        # \u200b\u4e0d\u540c\u200b\u7684\u200btop_k\u200b\u503c\u200b\uff0c\u200b\u4f1a\u200b\u8c03\u7528\u200b\u4e0d\u540c\u200b\u7684\u200b\u91c7\u6837\u200b\u65b9\u6cd5\u200b\u3002\n        if sampling_inputs.max_top_k == 1:\n            return logits.argmax(-1)\n        else:\n            # sort logits is too slow. and we only need topk logits\n            max_topk = sampling_inputs.max_top_k\n            if max_topk &lt;= 0:\n                scores, indices = logits.sort(1, descending=True)\n            else:\n                scores, indices = logits.topk(max_topk, dim=1)\n            # \u200b\u53d1\u751f\u200b\u9519\u8bef\u200b\u7684\u200b\u5206\u652f\u200b\u903b\u8f91\u200b\n            return __random_sampling(scores, indices)\n</code></pre> \u200b\u6267\u884c\u200bscores.softmax(1)\uff0c\u200b\u5c06\u200binf\u200b\u53d8\u6210\u200b\u4e86\u200bnan\uff0c\u200b\u5bfc\u81f4\u200b\u5d29\u6e83\u200b\u3002 Bash<pre><code>(Pdb) p logits\ntensor([[-inf, -inf, -inf,  ..., inf, -inf, inf]], device='npu:0',\n       dtype=torch.float16)\n(Pdb) p logits.shape\ntorch.Size([1, 64007])\n(Pdb) p logits.argmax(-1)\ntensor([7], device='npu:0')\n(Pdb) p logits[0][7]\ntensor(inf, device='npu:0', dtype=torch.float16)\n(Pdb) p logits.topk(40, dim=1)\ntorch.return_types.topk(\nvalues=tensor([[inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf,\n         inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf]],\n       device='npu:0', dtype=torch.float16),\nindices=tensor([[ 7, 18, 32, 35, 37, 38, 41, 47, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59,\n         61, 62, 65, 67, 68, 70, 71, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84,\n         85, 86, 88, 89]], device='npu:0'))\n(Pdb) p scores.softmax(1)\ntensor([[nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,\n         nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan]],\n       device='npu:0', dtype=torch.float16)\n</code></pre><p></p> <p>\u200b\u7531\u4e8e\u200b\u662f\u200b\u4f7f\u7528\u200b\u7684\u200bpytorch\u200b\u7684\u200beager\u200b\u6a21\u5f0f\u200b\uff0c\u200b\u91c7\u7528\u200bdlinfer\u200b\u8c03\u7528\u200b\u7684\u200bAscend npu\u200b\u63a8\u7406\u200b\u3002\u200b\u8ddf\u8e2a\u200b\u5230\u200b\u4e86\u200b\u4e0b\u9762\u200b\u7684\u200b\u7b97\u5b50\u200bmultinomial_sampling\u200b\u5d29\u6e83\u200b\u4e86\u200b\u3002</p> Python<pre><code>~/lmdeploy/pytorch/engine/logits_process.py\ndef _multinomial_sampling(scores: torch.Tensor,\n                          seeds: torch.LongTensor,\n                          offsets: torch.LongTensor,\n                          indices: torch.LongTensor = None):\n    \"\"\"sampling.\"\"\"\n    from lmdeploy.pytorch.nn.multinomial_sampling import multinomial_sampling\n    return multinomial_sampling(scores, seeds, offsets, indices)\n</code></pre> <p>\u200b\u6839\u636e\u200b\u4e0d\u540c\u200b\u7684\u200bbackend\uff0c\u200b\u6bd4\u5982\u200bAscend npu\u3001GPU\u200b\u7b49\u200b\uff0cmultinomial_sampling\u200b\u7684\u200b\u5b9e\u73b0\u200b\u4e0d\u540c\u200b\u3002 </p>Python<pre><code>~/lmdeploy/pytorch/nn/multinomial_sampling.py\nimport torch\n\nfrom ..backends import OpType, get_backend\n\n\ndef multinomial_sampling(scores: torch.Tensor,\n                         seeds: torch.LongTensor,\n                         offsets: torch.LongTensor,\n                         indices: torch.Tensor = None):\n    \"\"\"multinomial sampling op.\"\"\"\n    impl_builder = get_backend().get_layer_impl_builder(\n        OpType.MultinomialSampling)\n    return impl_builder.build().forward(scores, seeds, offsets, indices)\n</code></pre><p></p> <p>\u200b\u641c\u7d22\u200bOpType.MultinomialSampling\uff0c\u200b\u53ef\u4ee5\u200b\u627e\u5230\u200bdefault\u200b\u5b9e\u73b0\u200b\u3002 </p>Python<pre><code>~/lmdeploy/pytorch/backends/default/multinomial_sampling.py\n</code></pre><p></p> Text Only<pre><code>(Pdb) p scores\ntensor([[nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan,nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan]],device='npu:0', dtype=torch.float16)\n(Pdb) p seeds\ntensor([2281162171], device='npu:0')\n(Pdb) p offsets\ntensor([0], device='npu:0')\n(Pdb) p indices\ntensor([[ 7, 18, 32, 35, 37, 38, 41, 47, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59,\n         61, 62, 65, 67, 68, 70, 71, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84,\n         85, 86, 88, 89]], device='npu:0')\n</code></pre> <p>\u200b\u5199\u4e2a\u200b\u4f8b\u5b50\u200b\u6d4b\u8bd5\u200b\u4e0b\u200b\uff1a \u200b\u53c2\u8003\u200bhttps://github.com/Ascend/pytorch </p>Python<pre><code>import torch\nimport torch_npu\n\n# \u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u5305\u542b\u200bNaN\u200b\u7684\u200b\u5f20\u91cf\u200b\nnan_tensor = torch.full((1, 40), float('nan'), dtype=torch.float16)\n\n# \u200b\u5c06\u200b\u5f20\u91cf\u200b\u79fb\u52a8\u200b\u5230\u200bNPU\u200b\u8bbe\u5907\u200b\nnan_tensor = nan_tensor.npu()\n\nprint(nan_tensor)\n\nsampled_index = torch.multinomial(nan_tensor,\n                                num_samples=1,\n                                replacement=True)\nprint(sampled_index)\n</code></pre> \u200b\u4e0a\u9762\u200b\u7684\u200b\u4f8b\u5b50\u200b\u5c31\u662f\u200b\u590d\u73b0\u200b\u95ee\u9898\u200b\u7684\u200b\u6700\u5c0f\u200bdemo\u3002<p></p> Text Only<pre><code>torch-npu 2.1.0.post6\ntorch 2.1.0\n</code></pre> <p>\u200b\u53e6\u200b\u4e00\u79cd\u200b\u4fee\u6539\u200b\u65b9\u5f0f\u200b\u662f\u200b\uff0c\u200b\u5224\u65ad\u200b\u524d\u9762\u200b\u5982\u679c\u200b\u662f\u200binf\uff0c\u200b\u5c31\u200b\u4e0d\u80fd\u200b\u505a\u200bsoftmax\u3002</p> <p>\u200b\u6216\u8005\u200b\u5c06\u200binf\u200b\u6362\u6210\u200b\u4e00\u4e2a\u200b\u6bd4\u8f83\u200b\u5927\u200b\u7684\u200b\u6570\u200b\uff0c\u200b\u6bd4\u5982\u200b1e5\u3002 </p>Python<pre><code># \u200b\u66ff\u6362\u200b `inf` \u200b\u4e3a\u200b\u4e00\u4e2a\u200b\u5927\u200b\u6570\u503c\u200b, \u200b\u4f8b\u5982\u200b\uff1a\u200b\u6700\u5927\u200b\u6709\u9650\u200b\u503c\u200b\ntensor = torch.where(torch.isinf(tensor), torch.tensor(1e10), tensor)\n</code></pre><p></p> Python<pre><code>import torch\n\n# \u200b\u793a\u4f8b\u200b scores \u200b\u5f20\u91cf\u200b\nscores = torch.tensor([[1.0, float('inf'), 3.0], [float('-inf'), 1.0, 2.0]], dtype=torch.float32)\n\n# \u200b\u68c0\u67e5\u200b\u5e76\u200b\u5904\u7406\u200b inf \u200b\u503c\u200b\nif torch.isinf(scores).any():\n    # \u200b\u83b7\u53d6\u200b scores \u200b\u7684\u200b\u6570\u636e\u7c7b\u578b\u200b\n    dtype = scores.dtype\n\n    # \u200b\u6839\u636e\u200b\u6570\u636e\u7c7b\u578b\u200b\u9009\u62e9\u200b\u66ff\u6362\u200b inf \u200b\u7684\u200b\u503c\u200b\n    if dtype in [torch.float16, torch.float32, torch.float64]:\n        max_finite_value = torch.finfo(dtype).max\n        min_finite_value = torch.finfo(dtype).min\n    elif dtype in [torch.int8, torch.int16, torch.int32, torch.int64]:\n        max_finite_value = torch.iinfo(dtype).max\n        min_finite_value = torch.iinfo(dtype).min\n    else:\n        raise TypeError(\"Unsupported data type\")\n\n    # \u200b\u66ff\u6362\u200b\u6b63\u200b inf \u200b\u4e3a\u200b\u6700\u5927\u200b\u6709\u9650\u200b\u503c\u200b\uff0c\u200b\u8d1f\u200b inf \u200b\u4e3a\u200b\u6700\u5c0f\u200b\u6709\u9650\u200b\u503c\u200b\n    scores = torch.where(scores == float('inf'), torch.tensor(max_finite_value, dtype=dtype), scores)\n    scores = torch.where(scores == float('-inf'), torch.tensor(min_finite_value, dtype=dtype), scores)\n\n# \u200b\u8ba1\u7b97\u200b softmax\nsoftmax_scores = scores.softmax(dim=1)\n\nprint(softmax_scores)\n</code></pre> Python<pre><code># if score has inf, replace it with max or min finite value, then do softmax\ndef _softmax_scores(scores: torch.Tensor):\n    \"\"\"softmax scores.\"\"\"\n    # \u200b\u68c0\u67e5\u200b\u5e76\u200b\u5904\u7406\u200b inf \u200b\u503c\u200b\n    if torch.isinf(scores).any():\n        # \u200b\u83b7\u53d6\u200b scores \u200b\u7684\u200b\u6570\u636e\u7c7b\u578b\u200b\n        dtype = scores.dtype\n\n        # \u200b\u6839\u636e\u200b\u6570\u636e\u7c7b\u578b\u200b\u9009\u62e9\u200b\u66ff\u6362\u200b inf \u200b\u7684\u200b\u503c\u200b\n        if dtype in [torch.float16, torch.float32, torch.float64]:\n            max_finite_value = torch.finfo(dtype).max\n            min_finite_value = torch.finfo(dtype).min\n        elif dtype in [torch.int8, torch.int16, torch.int32, torch.int64]:\n            max_finite_value = torch.iinfo(dtype).max\n            min_finite_value = torch.iinfo(dtype).min\n        else:\n            raise TypeError(\"Unsupported data type\")\n\n        # \u200b\u83b7\u53d6\u200b\u5f20\u91cf\u200b\u6240\u5728\u200b\u7684\u200b\u8bbe\u5907\u200b\n        device = scores.device\n\n        # \u200b\u66ff\u6362\u200b\u6b63\u200b inf \u200b\u4e3a\u200b\u6700\u5927\u200b\u6709\u9650\u200b\u503c\u200b\uff0c\u200b\u8d1f\u200b inf \u200b\u4e3a\u200b\u6700\u5c0f\u200b\u6709\u9650\u200b\u503c\u200b\n        scores = torch.where(scores == float('inf'), torch.tensor(max_finite_value, dtype=dtype, device=device), scores)\n        scores = torch.where(scores == float('-inf'), torch.tensor(min_finite_value, dtype=dtype, device=device), scores)\n    softmax_scores = scores.softmax(dim=1)\n    return softmax_scores\n</code></pre> <p>example: </p>Python<pre><code>import torch\nimport torch_npu\n\n#inf_tensor = torch.full((1, 10), float('inf'), dtype=torch.float16)\n# or\ninf_tensor = torch.tensor([[1, 2, 3, 4, float('inf')]], dtype=torch.float16)\n\ninf_tensor = inf_tensor.npu()\nprint(inf_tensor)\n\n#res_nan = inf_tensor.softmax(1)\n#print(res_nan)\n\n# fix buy replacing inf with max value\nres = _softmax_scores(nan_tensor)\nprint(res)\n\n# error occurred\n#sampled_index = torch.multinomial(res_nan,\n#                                num_samples=1,\n#                                replacement=True)\n#print(sampled_index)\n</code></pre><p></p>"},{"location":"blog/lmdeploy%E6%8E%A8%E7%90%86do_sample%E5%B4%A9%E6%BA%83%E9%97%AE%E9%A2%98/#\u53c2\u6570\u652f\u6301top_k\u8bbe\u7f6e","title":"\u53c2\u6570\u200b\u652f\u6301\u200btop_k\u200b\u8bbe\u7f6e","text":"<p>\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b api\u200b\u4e0d\u200b\u652f\u6301\u200btop_k\u200b\u7684\u200b\u8bbe\u7f6e\u200b\uff0c\u200b\u9700\u8981\u200b\u4fee\u6539\u200b\u6e90\u4ee3\u7801\u200b\u3002</p> Python<pre><code>~/lmdeploy/serve/openai/api_client.py\ndef chat_completions_v1(self,\n                        model: str,\n                        messages: Union[str, List[Dict[str, str]]],\n                        temperature: Optional[float] = 0.7,\n                        top_p: Optional[float] = 1.0,\n                        logprobs: Optional[bool] = False,\n                        top_logprobs: Optional[int] = 0,\n                        n: Optional[int] = 1,\n                        max_tokens: Optional[int] = None,\n                        stop: Optional[Union[str, List[str]]] = None,\n                        stream: Optional[bool] = False,\n                        presence_penalty: Optional[float] = 0.0,\n                        frequency_penalty: Optional[float] = 0.0,\n                        user: Optional[str] = None,\n                        repetition_penalty: Optional[float] = 1.0,\n                        session_id: Optional[int] = -1,\n                        ignore_eos: Optional[bool] = False,\n                        skip_special_tokens: Optional[bool] = True,\n                        **kwargs):\n    \"\"\"Chat completion v1.\n</code></pre> <p>\u200b\u4ece\u200b\u4e0a\u9762\u200b\u7684\u200b\u4ee3\u7801\u200b\u5206\u6790\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u77e5\u9053\u200bdo_sample = False, \u200b\u5c31\u662f\u200b\u91c7\u7528\u200bgreedy\u200b\u7b56\u7565\u200b\u91c7\u6837\u200b\u3002\u200b\u7b49\u4ef7\u200b\u4e8e\u200b\u8bbe\u7f6e\u200b\u4e0b\u9762\u200b\u7684\u200b\u53c2\u6570\u200b\uff1a </p>Text Only<pre><code>gen_config.top_k = 1\n# avoid unnecessary process\ngen_config.temperature = 1.0\ngen_config.repetition_penalty = 1.0\n</code></pre><p></p> <p>completions_v1 \u200b\u63a5\u53e3\u200b\u76ee\u524d\u200b\u652f\u6301\u200btop_k\u200b\u7684\u200b\u8bbe\u7f6e\u200b\uff0c\u200b\u4f46\u662f\u200b\u548c\u200bchat_completions_v1\u200b\u8fd8\u662f\u200b\u6709\u200b\u533a\u522b\u200b\u7684\u200b\u3002\u200b\u76f4\u63a5\u200b\u66ff\u6362\u200b\u8c03\u7528\u200b\uff0c\u200b\u5e76\u200b\u4e0d\u80fd\u200b\u6210\u529f\u200b\u3002 + \u200b\u53c2\u6570\u200bmessages\u200b\u9700\u8981\u200b\u66ff\u6362\u6210\u200bprompt</p> <p>\u200b\u8fd8\u6709\u200b\u4e00\u79cd\u200b\u6539\u200b\u6cd5\u200b\uff0c\u200b\u5c06\u200btemperature\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b\u4e00\u4e2a\u200b\u975e\u200b0\u200b\u503c\u200b\uff0ctemperature\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b0\u200b\u65f6\u200b\uff0c\u200b\u4e0b\u9762\u200b\u7684\u200btemperature=1e-6\uff0c\u200b\u6240\u4ee5\u200bscores\u200b\u4f1a\u200b\u53d8\u6210\u200b\u65e0\u7a77\u5927\u200b\u3002</p> Python<pre><code>def _process_temperature_(scores: torch.Tensor, temperature: torch.Tensor):\n    \"\"\"process temperature.\"\"\"\n    temperature = temperature.to(scores.dtype)\n    scores.div_(temperature[:, None])\n    return scores\n</code></pre> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>CUTLASS\u200b\u5e93\u4e2d\u200b\u7684\u200b\u5c3e\u58f0\u200b\u878d\u5408\u200b(Epilogue Fusion)\u200b\u548c\u200bEpilogue Visitor Trees</li> <li>cista\u200b\u96f6\u200b\u62f7\u8d1d\u200b\u53cd\u200b\u5e8f\u5217\u5316\u200b\u5e93\u200b\u5b9e\u73b0\u200b\u4e4b\u200bswiss_table--group\u200b\u5339\u914d\u200b\u4f4d\u200b\u8fd0\u7b97\u200b</li> <li>C++20\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u57fa\u4e8e\u200b\u5c5e\u6027\u200b\u6d4b\u8bd5\u200b\u7684\u200bquickcheck-cpp\u200b\u5e93\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/netcap%E8%B0%83%E8%AF%95/","title":"netcap\u200b\u8c03\u8bd5","text":""},{"location":"blog/netcap%E8%B0%83%E8%AF%95/#rust\u5b9e\u8df5","title":"rust\u200b\u5b9e\u8df5","text":"<ul> <li>https://github.com/jeremychone/rust-genai \u200b\u4e00\u4e2a\u200brust\u200b\u6bd4\u8f83\u200b\u597d\u200b\u7684\u200b\u5e93\u200b\uff0c\u200b\u5bf9\u200b\u9519\u8bef\u5904\u7406\u200b\u3001\u200b\u5305\u200b\u7ba1\u7406\u200b\u7b49\u200b\u6709\u200b\u5f88\u200b\u597d\u200b\u7684\u200b\u793a\u4f8b\u200b\u3002</li> </ul>"},{"location":"blog/netcap%E8%B0%83%E8%AF%95/#\u5b9e\u73b0","title":"\u5b9e\u73b0","text":"<p>tcpdump\u200b\u662f\u200bip\u200b\u5c42\u200b\u6293\u200b\u5305\u200b\u5de5\u5177\u200b\uff0c\u200b\u901a\u8fc7\u200bnetcap\u200b\u4f7f\u7528\u200bxdp\u200b\u7684\u200b\u65b9\u5f0f\u200b\u53ef\u4ee5\u200b\u6293\u53d6\u200b\u66f4\u52a0\u200b\u5e95\u5c42\u200b\u7684\u200b\u5305\u200b\u3002</p> <p>tcpdump \u200b\u6293\u200b\u5305\u70b9\u200b\u4f4d\u7f6e\u200b\u56fa\u5b9a\u200b\uff1a\u200b\u5165\u200b\u5411\u200b\u662f\u200b xdp \u200b\u4e4b\u540e\u200b\uff0ctc \u200b\u4e4b\u524d\u200b\uff1b\u200b\u51fa\u5411\u200b\u662f\u200b tc \u200b\u4e4b\u540e\u200b\u3002\u200b\u5982\u679c\u200b\u7f51\u7edc\u200b\u5305\u200b\u901a\u8fc7\u200b\u5176\u4ed6\u200b\u65b9\u5f0f\u200b\u8fdb\u884c\u200b\u8def\u5f84\u200b\u4f18\u5316\u200b\u540e\u200b\uff0c\u200b\u4e0d\u200b\u7ecf\u8fc7\u200b\u8fd9\u200b\u51e0\u4e2a\u200b\u4f4d\u7f6e\u200b\uff0c\u200b\u90a3\u4e48\u200b tcpdump \u200b\u5c31\u200b\u6293\u200b\u4e0d\u5230\u200b\u4e86\u200b\uff0c\u200b\u53e6\u5916\u200b tcpdump \u200b\u8fd8\u200b\u65e0\u6cd5\u200b\u652f\u6301\u200b\u8fdb\u7a0b\u200b\u540d\u200b\uff0cpid\uff0cnamespace id \u200b\u7b49\u200b\u5176\u4ed6\u200b\u8fc7\u6ee4\u200b\u6761\u4ef6\u200b\u3002</p> <p>tcpdump\u200b\u5c06\u200bpcap filter\u200b\u8fc7\u6ee4\u200b\u63cf\u8ff0\u200b\u8bed\u6cd5\u200b\uff0c\u200b\u8f6c\u6362\u6210\u200bclassic bpf\u200b\u5bf9\u5305\u200b\u8fdb\u884c\u200b\u8fc7\u6ee4\u200b\uff0c\u200b\u5982\u679c\u200b\u8fd4\u56de\u200b0\u200b\u5c31\u200b\u4e22\u5f03\u200b\u8be5\u5305\u200b\uff0c\u200b\u8fd4\u56de\u200b1\u200b\u5c31\u200b\u4fdd\u7559\u200b\u8be5\u5305\u200b\u3002 + \u200b\u590d\u7528\u200bpcap\u200b\u7684\u200bfilter\u200b\u8bed\u6cd5\u200b\uff0clibpcap\u200b\u53ef\u4ee5\u200b\u5c06\u200bfilter\u200b\u8f6c\u6362\u200b\u6210\u4e3a\u200bclassic bpf\u3002 + \u200b\u518d\u200b\u901a\u8fc7\u200b\u5c06\u200bclassic bpf\u200b\u8f6c\u6362\u200b\u6210\u4e3a\u200bc\uff0cc\u200b\u8f6c\u6362\u200b\u6210\u4e3a\u200bebpf\uff0c\u200b\u7f16\u8bd1\u6210\u200b\u4e8c\u8fdb\u5236\u200b\u3002 + \u200b\u6216\u8005\u200b\u76f4\u63a5\u200b\u6839\u636e\u200bclassic bpf\u200b\u6307\u4ee4\u200b\u548c\u200bebpf\u200b\u6307\u4ee4\u200b\u7684\u200b\u89c4\u5219\u200b\uff0c\u200b\u5c06\u200bclassic bpf\u200b\u8f6c\u6362\u6210\u200bebpf\u3002</p> <p>\u200b\u901a\u8fc7\u200b\u5c06\u200bebpf\u200b\u7a0b\u5e8f\u200b\u6ce8\u5165\u200b\u5185\u6838\u200b\uff0c\u200b\u901a\u8fc7\u200bmap\u200b\u6216\u8005\u200bbuffer\u200b\u5c06\u200b\u5185\u6838\u200b\u5305\u200b\u6570\u636e\u200b\u4f20\u9012\u200b\u5230\u200b\u7528\u6237\u200b\u6001\u200b\uff0c\u200b\u7136\u540e\u200b\u5c06\u200b\u6570\u636e\u200b\u8fdb\u884c\u200b\u89e3\u6790\u200b\u3002\u200b\u5bf9\u200b\u6570\u636e\u200b\u89e3\u6790\u200b\u7684\u200b\u90e8\u5206\u200b\u901a\u8fc7\u200b\u8d77\u200b\u4e00\u4e2a\u200btcpdump -r\u200b\u7684\u200b\u8fdb\u7a0b\u200b\uff0c\u200b\u89e3\u6790\u200bpcap\u200b\u5305\u200b\u3002</p>"},{"location":"blog/netcap%E8%B0%83%E8%AF%95/#\u76f8\u5173\u5e93\u548c\u539f\u7406","title":"\u76f8\u5173\u200b\u5e93\u200b\u548c\u200b\u539f\u7406","text":""},{"location":"blog/netcap%E8%B0%83%E8%AF%95/#golang","title":"golang","text":"<ul> <li>libpcap \u200b\u5c06\u200bfilter\u200b\u8f6c\u6362\u6210\u200bclassic bpf</li> <li>cloudflare/cbpfc \u200b\u5c06\u200bclassic bpf\u200b\u8f6c\u6362\u6210\u200bc\uff08c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200bllvm\u200b\u7f16\u8bd1\u6210\u200bebpf\uff09, \u200b\u6216\u8005\u200b\u5c06\u200bclassic bpf\u200b\u8f6c\u6362\u6210\u200bebpf</li> <li>cilium/ebpf \u200b\u63d0\u4f9b\u200b\u4e86\u200bebpf\u200b\u76f8\u5173\u200b\u6307\u4ee4\u200b\u7c7b\u200b</li> <li>iovisor/gobpf </li> </ul>"},{"location":"blog/netcap%E8%B0%83%E8%AF%95/#rust","title":"rust","text":"<p>https://github.com/mmisono/rust-cbpf/tree/master https://github1s.com/polachok/bpfjit/blob/master/src/lib.rs https://github.com/qmonnet/rbpf</p>"},{"location":"blog/netcap%E8%B0%83%E8%AF%95/#golang-rust-ffi","title":"golang-rust ffi","text":"<p>\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u5728\u200bebpf\u200b\u9886\u57df\u200b\uff0cgolang\u200b\u6709\u200b\u826f\u597d\u200b\u7684\u200b\u751f\u6001\u200b\uff0c\u200b\u5305\u62ec\u200b\u4e86\u200b\u4e30\u5bcc\u200b\u7684\u200b\u5e93\u200b\u3002\u200b\u5982\u679c\u200brust\u200b\u8981\u200b\u4f7f\u7528\u200b\u9664\u4e86\u200b\u91cd\u5199\u200b\u4ee5\u5916\u200b\uff0c\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200bgolang-rust ffi\u200b\u8fdb\u884c\u200b\u590d\u7528\u200b\u3002\u200b\u5728\u200b\u9879\u76ee\u200b\u4e2d\u200b\u4e5f\u200b\u662f\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u590d\u7528\u200b\u5176\u5b83\u200b\u8bed\u8a00\u200b\u5f00\u53d1\u200b\u7684\u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u7136\u540e\u200b\u9010\u6b65\u200b\u66ff\u6362\u200b\u3002</p> <p>https://www.ihcblog.com/rust2go/</p>"},{"location":"blog/netcap%E8%B0%83%E8%AF%95/#\u53c2\u8003","title":"\u53c2\u8003","text":"<ul> <li> <p>xcap\uff1a\u200b\u57fa\u4e8e\u200b eBPF \u200b\u6280\u672f\u200b\u7684\u200b\u4e0b\u4e00\u4ee3\u200b\u5185\u6838\u200b\u7f51\u7edc\u200b\u6293\u5305\u200b\u5de5\u5177\u200b</p> </li> <li> <p>https://blog.cloudflare.com/xdpcap</p> </li> </ul> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>\u200b\u4f7f\u7528\u200baya\u200b\u548c\u200bc\u200b\u6df7\u5408\u200b\u7f16\u5199\u200buprobe\u200b\u7a0b\u5e8f\u200b</li> <li>\u200b\u4ece\u200bDeepseek\u200b\u5f00\u6e90\u200b\u5e93\u200b3FS\u200b\u4e2d\u200b\u5b66\u4e60\u200bfuse\u200b\u7684\u200b\u4f7f\u7528\u200b-\u200b\u5982\u4f55\u200b\u5f00\u53d1\u200b\u4e00\u4e2a\u200b\u6587\u4ef6\u7cfb\u7edf\u200b\uff08\u200b\u4e00\u200b\uff09</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>git\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b\uff1f\u200b\u591a\u4e2a\u200b\u4fee\u6539\u200b\u5206\u200b\u591a\u4e2a\u200bcommit\u200b\u4fee\u6539\u200b</li> </ul>"},{"location":"blog/pyo3%E5%AE%9E%E7%8E%B0python%E5%92%8Crust%E8%B7%A8%E8%AF%AD%E8%A8%80%E8%B0%83%E7%94%A8/","title":"pyo3\u200b\u5b9e\u73b0\u200bpython\u200b\u548c\u200brust\u200b\u8de8\u200b\u8bed\u8a00\u200b\u8c03\u7528","text":""},{"location":"blog/pyo3%E5%AE%9E%E7%8E%B0python%E5%92%8Crust%E8%B7%A8%E8%AF%AD%E8%A8%80%E8%B0%83%E7%94%A8/#pyo3\u662f\u4ec0\u4e48","title":"pyo3\u200b\u662f\u200b\u4ec0\u4e48\u200b\uff1f","text":"<p>pyo3\u200b\u662f\u200b\u4e00\u4e2a\u200bRust\u200b\u5e93\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5b9e\u73b0\u200bpython\u200b\u548c\u200brust\u200b\u4e4b\u95f4\u200b\u7684\u200b\u76f8\u4e92\u200b\u8c03\u7528\u200b\u3002\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200bRust\u200b\u4e3a\u200bPython\u200b\u7f16\u5199\u200b\u6269\u5c55\u200b\u3002 \u200b\u6559\u7a0b\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200bpyo3 getting-started\u3002</p> <p>\u200b\u5c31\u884c\u200b\uff0cpybind11\u200b\u4e00\u6837\u200b\uff0cpybind11\u200b\u662f\u200b\u4e00\u4e2a\u200bc++\u200b\u5e93\u200b\uff0c\u200b\u63d0\u4f9b\u200b\u4e86\u200bc++\u200b\u548c\u200bpython\u200b\u4e4b\u95f4\u200b\u7684\u200b\u76f8\u4e92\u200b\u8c03\u7528\u200b\u3002</p>"},{"location":"blog/pyo3%E5%AE%9E%E7%8E%B0python%E5%92%8Crust%E8%B7%A8%E8%AF%AD%E8%A8%80%E8%B0%83%E7%94%A8/#ffi\u9700\u8981\u8003\u8651\u4ec0\u4e48\u95ee\u9898","title":"FFI\u200b\u9700\u8981\u200b\u8003\u8651\u200b\u4ec0\u4e48\u200b\u95ee\u9898\u200b\uff1f","text":"<p>python\u200b\u548c\u200brust\u200b\u4e4b\u95f4\u200b\u7684\u200b\u76f8\u4e92\u200b\u8c03\u7528\u200b\uff0c\u200b\u9700\u8981\u200b\u8003\u8651\u200b\u7684\u200b\u95ee\u9898\u200b\u6709\u200b\uff1a \u200b\u7ebf\u7a0b\u200b\u5b89\u5168\u200b\uff0c\u200b\u7ebf\u7a0b\u200b\u95f4\u200b\u7ade\u4e89\u200b\u3002pyo3\u200b\u9488\u5bf9\u200b\u4e0d\u540c\u200b\u7684\u200bpython\u200b\u7248\u672c\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u4e86\u200bGIL\u200b\u548c\u200bno GIL\u3002 \u200b\u6570\u636e\u7ed3\u6784\u200b\u7684\u200b\u751f\u547d\u5468\u671f\u200b\uff0cpyo3\u200b\u5c01\u88c5\u200b\u4e86\u200b\u667a\u80fd\u200b\u6307\u9488\u200b\uff0c\u200b\u901a\u8fc7\u200b\u8fc7\u7a0b\u200b\u5b8f\u200b\u751f\u6210\u200b\u51fd\u6570\u200b</p>"},{"location":"blog/pyo3%E5%AE%9E%E7%8E%B0python%E5%92%8Crust%E8%B7%A8%E8%AF%AD%E8%A8%80%E8%B0%83%E7%94%A8/#python\u7684no-gil","title":"python\u200b\u7684\u200bno GIL","text":"<p>GIL\u200b\u5c31\u662f\u200bPython\u200b\u7684\u200b\u5168\u5c40\u200b\u89e3\u91ca\u5668\u200b\u9501\u200b\uff0c\u200b\u56e0\u6b64\u200bpython\u200b\u7684\u200b\u591a\u7ebf\u7a0b\u200b\u5b9e\u9645\u200b\u662f\u200b\u4f2a\u200b\u591a\u7ebf\u7a0b\u200b\uff0c\u200b\u4e0d\u80fd\u200b\u50cf\u200bc++\u200b\u7b49\u200b\u5176\u5b83\u200b\u8bed\u8a00\u200b\u7684\u200b\u591a\u7ebf\u7a0b\u200b\u4e00\u6837\u200b\u771f\u6b63\u200b\u7684\u200b\u5b9e\u73b0\u200b\u5e76\u53d1\u200b\u3002</p> <p>python\u200b\u7684\u200bno GIL\u200b\u662f\u200bCPython 3.14\u200b\u63d0\u51fa\u200b\u7684\u200b\u4e0d\u518d\u200b\u4f9d\u8d56\u200b\u5168\u5c40\u200b\u89e3\u91ca\u5668\u200b\u9501\u200b\u7684\u200b\u591a\u7ebf\u7a0b\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u63d0\u5347\u200b\u5e76\u53d1\u200b\u3002</p> <p>CPython 3.14 declared support for the \u201cfree-threaded\u201d build of CPython that does not rely on the global interpreter lock (often referred to as the GIL) for thread safety. </p>"},{"location":"blog/pyo3%E5%AE%9E%E7%8E%B0python%E5%92%8Crust%E8%B7%A8%E8%AF%AD%E8%A8%80%E8%B0%83%E7%94%A8/#\u5982\u4f55\u7f16\u8bd1\u4e00\u4e2a\u591a\u4e2a\u7248\u672c\u90fd\u53ef\u4ee5\u4f7f\u7528\u7684wheel\u5305\u4e0e\u4ec0\u4e48\u7279\u6027\u6709\u5173","title":"\u5982\u4f55\u200b\u7f16\u8bd1\u200b\u4e00\u4e2a\u200b\u591a\u4e2a\u200b\u7248\u672c\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u7684\u200bwheel\u200b\u5305\u200b\uff1f\u200b\u4e0e\u200b\u4ec0\u4e48\u200b\u7279\u6027\u200b\u6709\u5173\u200b\uff1f","text":"<p>\u200b\u6211\u4eec\u200b\u5e73\u65f6\u200b\u4f7f\u7528\u200bpython\u200b\u4f9d\u8d56\u200b\u5b89\u88c5\u5305\u200b\u65f6\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u6ce8\u610f\u200b\u5230\u200b\uff0c\u200b\u6709\u4e9b\u200bwheel\u200b\u6587\u4ef6\u200b\u547d\u540d\u200b\u4e0a\u200b\u662f\u200b\u6307\u660e\u200b\u4e86\u200bpython\u200b\u7248\u672c\u200b\u8981\u6c42\u200b\u7684\u200b\uff0c\u200b\u6bd4\u5982\u200bpython3.8\u200b\u7684\u200bwheel\u200b\u5305\u200b\u548c\u200bpython3.10\u200b\u7b49\u200b\u662f\u200b\u4e0d\u540c\u200b\u7684\u200b\u6587\u4ef6\u200b\u3002</p> <p>\u200b\u6807\u51c6\u200bPython ABI\u200b\u901a\u5e38\u200b\u8981\u6c42\u200b\u6a21\u5757\u200b\u9488\u5bf9\u200b\u7279\u5b9a\u200bPython\u200b\u7248\u672c\u200b\u7f16\u8bd1\u200b\uff0c\u200b\u800c\u200bABI3\u200b\u901a\u8fc7\u200b\u51bb\u7ed3\u200b\u5173\u952e\u200b\u4e8c\u8fdb\u5236\u200b\u63a5\u53e3\u200b\u5b9e\u73b0\u200b\u8de8\u200b\u7248\u672c\u200b\u517c\u5bb9\u200b\uff0c\u200b\u964d\u4f4e\u200b\u4e86\u200b\u7ef4\u62a4\u200b\u6210\u672c\u200b\u3002</p> <p>\u200b\u9ed8\u8ba4\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0cPython\u200b\u6269\u5c55\u200b\u6a21\u5757\u200b\u53ea\u80fd\u200b\u4e0e\u200b\u7f16\u8bd1\u200b\u5b83\u4eec\u200b\u65f6\u6240\u200b\u9488\u5bf9\u200b\u7684\u200bPython\u200b\u7248\u672c\u200b\u4e00\u8d77\u200b\u4f7f\u7528\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u4e3a\u200bPython 3.5\u200b\u6784\u5efa\u200b\u7684\u200b\u6269\u5c55\u200b\u6a21\u5757\u200b\u65e0\u6cd5\u200b\u5728\u200bPython 3.8\u200b\u4e2d\u200b\u5bfc\u5165\u200b\u3002PEP 384\u200b\u5f15\u5165\u200b\u4e86\u200b\u6709\u9650\u200bPython API\u200b\u7684\u200b\u6982\u5ff5\u200b\uff0c\u200b\u8be5\u200bAPI\u200b\u5c06\u200b\u5177\u6709\u200b\u7a33\u5b9a\u200b\u7684\u200bABI\uff0c\u200b\u4f7f\u200b\u4f7f\u7528\u200b\u5b83\u200b\u6784\u5efa\u200b\u7684\u200b\u6269\u5c55\u200b\u6a21\u5757\u200b\u80fd\u591f\u200b\u5728\u200b\u591a\u4e2a\u200bPython\u200b\u7248\u672c\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u3002\u200b\u8fd9\u200b\u4e5f\u200b\u88ab\u200b\u79f0\u4e3a\u200babi3\u3002</p> <p>\u200b\u5176\u200b\u7f3a\u70b9\u200b\u662f\u200b\uff0cPyO3\u200b\u65e0\u6cd5\u200b\u4f7f\u7528\u200b\u90a3\u4e9b\u200b\u4f9d\u8d56\u4e8e\u200b\u9488\u5bf9\u200b\u5df2\u77e5\u200b\u786e\u5207\u200bPython\u200b\u7248\u672c\u200b\u8fdb\u884c\u200b\u7f16\u8bd1\u200b\u7684\u200b\u4f18\u5316\u200b\u3002pyo3\u200b\u4ec5\u200b\u8c03\u7528\u200b\u5c5e\u4e8e\u200b\u7a33\u5b9a\u200bAPI\u200b\u7684\u200bPython C-API\u200b\u51fd\u6570\u200b\u3002</p> <p>\u200b\u7531\u4e8e\u200b\u5355\u4e2a\u200babi3\u200b\u8f6e\u5305\u200b\u53ef\u200b\u7528\u4e8e\u200b\u591a\u4e2a\u200b\u4e0d\u540c\u200b\u7684\u200bPython\u200b\u7248\u672c\u200b\uff0cPyO3\u200b\u63d0\u4f9b\u200b\u4e86\u200babi3-py37\u3001abi3-py38\u3001abi3-py39\u200b\u7b49\u200b\u529f\u80fd\u200b\u6807\u5fd7\u200b\uff0c\u200b\u7528\u4e8e\u200b\u4e3a\u200b\u60a8\u200b\u7684\u200babi3\u200b\u8f6e\u5305\u200b\u8bbe\u7f6e\u200b\u6700\u4f4e\u200b\u6240\u200b\u9700\u200b\u7684\u200bPython\u200b\u7248\u672c\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5982\u679c\u200b\u60a8\u200b\u8bbe\u7f6e\u200b\u4e86\u200babi3-py37\u200b\u529f\u80fd\u200b\uff0c\u200b\u60a8\u200b\u7684\u200b\u6269\u5c55\u200b\u8f6e\u5305\u200b\u53ef\u200b\u7528\u4e8e\u200b\u4ece\u200bPython 3.7\u200b\u53ca\u200b\u66f4\u200b\u9ad8\u200b\u7248\u672c\u200b\u7684\u200b\u6240\u6709\u200bPython 3\u200b\u7248\u672c\u200b\u3002maturin\u200b\u548c\u200bsetuptools-rust\u200b\u4f1a\u200b\u7ed9\u200b\u8f6e\u5305\u200b\u547d\u540d\u200b\u4e3a\u200b\u7c7b\u4f3c\u200bmy-extension-1.0-cp37-abi3-manylinux2020_x86_64.whl\u200b\u7684\u200b\u540d\u79f0\u200b\u3002</p>"},{"location":"blog/pyo3%E5%AE%9E%E7%8E%B0python%E5%92%8Crust%E8%B7%A8%E8%AF%AD%E8%A8%80%E8%B0%83%E7%94%A8/#\u4e00\u4e2apython\u5305\u5982\u4f55\u6d4b\u8bd5\u591a\u4e2a\u7248\u672c","title":"\u4e00\u4e2a\u200bpython\u200b\u5305\u200b\uff0c\u200b\u5982\u4f55\u200b\u6d4b\u8bd5\u200b\u591a\u4e2a\u200b\u7248\u672c\u200b\uff1f","text":"<p>nox\uff0c\u200b\u53ef\u4ee5\u200b\u81ea\u52a8\u5316\u200b\u7684\u200b\u5728\u200b\u591a\u4e2a\u200bpython\u200b\u7248\u672c\u200b\u4e0b\u200b\u8fd0\u884c\u200b\u6d4b\u8bd5\u200b\u3002\u200b\u901a\u8fc7\u200bpy\u200b\u811a\u672c\u200b\u914d\u7f6e\u200b\u3002</p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>rust-facet\u200b\u5e93\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u8fd0\u884c\u200b\u65f6\u200b\u53cd\u5c04\u200b</li> <li>\u200b\u4f7f\u7528\u200baya\u200b\u548c\u200bc\u200b\u6df7\u5408\u200b\u7f16\u5199\u200buprobe\u200b\u7a0b\u5e8f\u200b</li> <li>C++\u200b\u5f00\u53d1\u200b\u5e38\u89c1\u95ee\u9898\u200b\u4e4b\u200bABI\u200b\u517c\u5bb9\u6027\u95ee\u9898\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> </ul>"},{"location":"blog/python%E5%A6%82%E4%BD%95%E5%88%86%E5%8F%91dev%E7%8E%AF%E5%A2%83%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E6%9C%AC%E5%9C%B0whl%E5%8C%85/","title":"python\u200b\u5982\u4f55\u200b\u5206\u53d1\u200bdev\u200b\u73af\u5883\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u5b89\u88c5\u200b\u672c\u5730\u200bwhl\u200b\u5305","text":"<p>\u200b\u5728\u200b\u5e73\u65f6\u200b\u7684\u200b\u5f00\u53d1\u200b\u5de5\u4f5c\u200b\u4e2d\u200b\uff0c\u200b\u5982\u679c\u200b\u4f60\u200b\u8981\u200b\u628a\u200bpython\u200b\u73af\u5883\u200b\u6253\u5305\u200b\u7ed9\u200b\u5bf9\u65b9\u200b\uff0c\u200b\u4f60\u200b\u4f1a\u200b\u600e\u4e48\u200b\u505a\u200b\u5462\u200b\uff1f \u200b\u5206\u200b\u4e24\u79cd\u200b\u60c5\u51b5\u200b\uff1a \uff081\uff09\u200b\u5bf9\u65b9\u200b\u53ea\u200b\u9700\u8981\u200b\u5f88\u591a\u200bwhl\u200b\u7684\u200b\u5b89\u88c5\u6587\u4ef6\u200b\uff0c\u200b\u4f60\u200b\u7ed9\u200b\u5bf9\u65b9\u200b\u5199\u4e2a\u200b\u811a\u672c\u200b\u8fd0\u884c\u200b\u5b89\u88c5\u200b\uff0c\u200b\u53ea\u8981\u200b\u786e\u4fdd\u200b\u5b89\u88c5\u200b\u7684\u200b\u662f\u200b\u4f60\u200b\u63d0\u4f9b\u200b\u7684\u200b\u76ee\u5f55\u200b\u4e0b\u200b\u7684\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u4e86\u200b\u3002 \uff082\uff09\u200b\u628a\u200bpython\u200b\u8fd0\u884c\u200b\u73af\u5883\u200b\u5305\u62ec\u200b\u89e3\u91ca\u5668\u200b\uff0c\u200b\u6bd4\u5982\u200b3.8\u30013.10\u200b\u8fd9\u4e9b\u200b\u7248\u672c\u200b\u548c\u200bwhl\u200b\u90fd\u200b\u9700\u8981\u200b\u6253\u5305\u200b\u7ed9\u200b\u5bf9\u65b9\u200b\u3002</p>"},{"location":"blog/python%E5%A6%82%E4%BD%95%E5%88%86%E5%8F%91dev%E7%8E%AF%E5%A2%83%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E6%9C%AC%E5%9C%B0whl%E5%8C%85/#\u7f16\u5199\u811a\u672c\u6253\u5305whl\u6587\u4ef6","title":"\u7f16\u5199\u200b\u811a\u672c\u200b\uff0c\u200b\u6253\u5305\u200bwhl\u200b\u6587\u4ef6","text":"<p>\u200b\u5148\u200b\u770b\u770b\u200b\uff0c\u200b\u7ed9\u200b\u5bf9\u65b9\u200b\u7684\u200binstall.sh\u200b\u6587\u4ef6\u200b\u4e2d\u6709\u200b\u54ea\u4e9b\u200b\u5185\u5bb9\u200b\uff1f \u200b\u7528\u200b\u672c\u5730\u200b\u7684\u200bpip\u200b\u914d\u7f6e\u6587\u4ef6\u200b\uff0c\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u6307\u5b9a\u200b\u4e86\u200b\u4f7f\u7528\u200b\u672c\u5730\u200b\u7684\u200bpip\u200b\u6e90\u200b</p> Bash<pre><code>export PIP_CONFIG_FILE=$PWD/pip.conf\n</code></pre> <p>pip.conf\u200b\u6587\u4ef6\u200b\u7684\u200b\u5185\u5bb9\u200b\uff1a </p>Text Only<pre><code>[global]\nno-index = true\nfind-links =\n    /workspace/packages\n</code></pre> /workspace/packages\u200b\u76ee\u5f55\u200b\u4e0b\u200b\u5c31\u662f\u200b\u4f60\u200b\u5b58\u653e\u200bwhl\u200b\u6587\u4ef6\u200b\u7684\u200b\u5730\u65b9\u200b\u3002<p></p> <p>\u200b\u901a\u8fc7\u200b\u4e0b\u9762\u200b\u7684\u200b\u65b9\u5f0f\u200b\u5b89\u88c5\u200bpython whl\uff1a </p>Text Only<pre><code>python3 -m pip install xxx.whl --force-reinstall --no-cache-dir --no-index --no-deps\n</code></pre> \u200b\u8fd9\u4e2a\u200b\u547d\u4ee4\u200b\u5c06\u200b\u5f3a\u5236\u200b\u91cd\u65b0\u5b89\u88c5\u200b\u5f53\u524d\u76ee\u5f55\u200b\u4e0b\u200b\u7684\u200b\u6240\u6709\u200b\u00a0<code>.whl</code>\u00a0\u200b\u6587\u4ef6\u200b\uff0c\u200b\u4e0d\u200b\u4f7f\u7528\u200b\u7f13\u5b58\u200b\uff0c\u200b\u4e5f\u200b\u4e0d\u200b\u4ece\u200b PyPI \u200b\u4e0b\u8f7d\u200b\u4efb\u4f55\u200b\u5305\u200b\uff0c\u200b\u540c\u65f6\u200b\u5ffd\u7565\u200b\u8fd9\u4e9b\u200b\u5305\u200b\u7684\u200b\u4f9d\u8d56\u200b\u9879\u200b\u3002<p></p> <ul> <li><code>--force-reinstall</code>\uff1a\u200b\u8fd9\u4e2a\u200b\u9009\u9879\u200b\u5f3a\u5236\u200b\u91cd\u65b0\u5b89\u88c5\u200b\u6307\u5b9a\u200b\u7684\u200b\u5305\u200b</li> <li><code>--no-cache-dir</code>\uff1a\u200b\u6b64\u200b\u9009\u9879\u200b\u544a\u8bc9\u200b\u00a0<code>pip</code>\u00a0\u200b\u4e0d\u8981\u200b\u4f7f\u7528\u200b\u7f13\u5b58\u200b\u76ee\u5f55\u200b\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200b\u5728\u200b\u5b89\u88c5\u200b\u65f6\u200b\u4e0d\u200b\u4f7f\u7528\u200b\u4e4b\u524d\u200b\u4e0b\u8f7d\u200b\u7684\u200b\u5305\u200b\u3002</li> <li><code>--no-index</code>\uff1a\u200b\u8fd9\u4e2a\u200b\u9009\u9879\u200b\u7981\u6b62\u200b\u00a0<code>pip</code>\u00a0\u200b\u4ece\u200b Python Package Index (PyPI) \u200b\u4e0b\u8f7d\u200b\u5305\u200b\uff0c\u200b\u4ec5\u200b\u4f7f\u7528\u200b\u672c\u5730\u200b\u63d0\u4f9b\u200b\u7684\u200b\u6587\u4ef6\u200b\u3002</li> <li><code>--no-deps</code>\uff1a\u200b\u6b64\u200b\u9009\u9879\u200b\u544a\u8bc9\u200b\u00a0<code>pip</code>\u00a0\u200b\u4e0d\u200b\u5b89\u88c5\u5305\u200b\u7684\u200b\u4f9d\u8d56\u200b\u9879\u200b\u3002\u200b\u901a\u5e38\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c<code>pip</code>\u00a0\u200b\u4f1a\u200b\u81ea\u52a8\u200b\u67e5\u627e\u200b\u5e76\u200b\u5b89\u88c5\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u4f9d\u8d56\u200b\u9879\u200b\uff0c\u200b\u4f46\u200b\u5982\u679c\u200b\u4f60\u200b\u660e\u786e\u200b\u6307\u5b9a\u200b\u4e86\u200b\u8fd9\u4e2a\u200b\u9009\u9879\u200b\uff0c\u200b\u5b83\u200b\u5c06\u200b\u53ea\u200b\u5b89\u88c5\u200b\u4f60\u200b\u63d0\u4f9b\u200b\u7684\u200b\u5305\u200b\uff0c\u200b\u800c\u200b\u4e0d\u200b\u5904\u7406\u200b\u4f9d\u8d56\u200b\u5173\u7cfb\u200b\u3002</li> </ul> <p>\u200b\u4e5f\u200b\u5c31\u662f\u200b\u4f60\u200b\u9700\u8981\u200b\u63d0\u4f9b\u200b\u7684\u200b\u538b\u7f29\u5305\u200b\u4e2d\u200b\u7684\u200b\u7269\u6599\u200b\u5c31\u662f\u200b\uff1a + \u200b\u4e00\u4e2a\u200bpackages.tar.gz\u200b\u538b\u7f29\u5305\u200b\u6709\u200b\u5f88\u591a\u200bwhl\u200b\u6587\u4ef6\u200b\uff0c\u200b\u5b83\u4f1a\u200b\u89e3\u538b\u200b\u5230\u200b/workspace/packages\u200b\u6587\u4ef6\u5939\u200b\u4e2d\u200b + \u200b\u4e00\u4e2a\u200bpip.conf\u200b\u6587\u4ef6\u200b\u6307\u5b9a\u200b\u4e86\u200b\u4ece\u200b/workspace/packages\u200b\u4e2d\u200b\u5b89\u88c5\u200b + \u200b\u4e00\u4e2a\u200binstall.sh\uff0c\u200b\u7528\u6237\u200b\u8fd0\u884c\u200b</p> <p>install.sh\u200b\u5185\u5bb9\u200b\u5305\u62ec\u200b: </p>Bash<pre><code>#!/bin/bash\nexport PIP_CONFIG_FILE=$PWD/pip.conf\npython3 -m pip install xxx.whl --force-reinstall --no-cache-dir --no-index --no-deps\n</code></pre><p></p>"},{"location":"blog/python%E5%A6%82%E4%BD%95%E5%88%86%E5%8F%91dev%E7%8E%AF%E5%A2%83%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E6%9C%AC%E5%9C%B0whl%E5%8C%85/#conda-pack\u5de5\u5177\u6253\u5305conda\u73af\u5883","title":"conda pack\u200b\u5de5\u5177\u200b\u6253\u5305\u200bconda\u200b\u73af\u5883","text":"<p>\u200b\u7b80\u5355\u200b\u7684\u200b\u573a\u666f\u200b\u7528\u200b\u4e0a\u9762\u200b\u5206\u53d1\u200b\u4f60\u200b\u7684\u200bpython\u200b\u73af\u5883\u200b\u548c\u200b\u4f9d\u8d56\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u4e86\u200b\u3002\u200b\u8fd8\u6709\u200b\u4e2a\u200bconda pack\u200b\u5de5\u5177\u200b\u3002</p> <p><code>conda-pack</code>\u00a0\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5de5\u5177\u200b\uff0c\u200b\u7528\u4e8e\u200b\u5c06\u200b Conda \u200b\u73af\u5883\u200b\u6253\u5305\u200b\u6210\u200b\u4e00\u4e2a\u200b\u72ec\u7acb\u200b\u7684\u200b\u5f52\u6863\u6587\u4ef6\u200b\uff08\u200b\u5982\u200b\u00a0<code>.tar.gz</code>\uff09\uff0c\u200b\u4ece\u800c\u200b\u53ef\u4ee5\u200b\u5728\u200b\u4e0d\u200b\u4f9d\u8d56\u200b Conda \u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u5728\u200b\u5176\u4ed6\u200b\u8ba1\u7b97\u673a\u200b\u4e0a\u200b\u4f7f\u7528\u200b\u8be5\u200b\u73af\u5883\u200b\u3002\u200b\u8fd9\u200b\u5bf9\u4e8e\u200b\u9700\u8981\u200b\u5728\u200b\u4e0d\u540c\u200b\u673a\u5668\u200b\u4e4b\u95f4\u200b\u79fb\u52a8\u200b\u73af\u5883\u200b\u6216\u200b\u5728\u200b\u6ca1\u6709\u200b Conda \u200b\u7684\u200b\u7cfb\u7edf\u200b\u4e0a\u200b\u8fd0\u884c\u200b\u4ee3\u7801\u200b\u975e\u5e38\u200b\u6709\u7528\u200b\u3002</p> <p>\u200b\u611f\u5174\u8da3\u200b\u7684\u200b\u670b\u53cb\u200b\u53ef\u4ee5\u200b\u770b\u5b98\u200b\u7f51\u6709\u200b\u4e2a\u200b\u89c6\u9891\u200b\uff1a</p> Text Only<pre><code>https://conda.github.io/conda-pack/\n</code></pre>"},{"location":"blog/python%E5%A6%82%E4%BD%95%E5%88%86%E5%8F%91dev%E7%8E%AF%E5%A2%83%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E6%9C%AC%E5%9C%B0whl%E5%8C%85/#\u5bfc\u51fa\u5bb9\u5668\u6253\u5305docker\u955c\u50cf","title":"\u5bfc\u51fa\u200b\u5bb9\u5668\u200b\uff0c\u200b\u6253\u5305\u200bdocker\u200b\u955c\u50cf\u200b\ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350","text":"<p>\u200b\u53e6\u5916\u200b\u7684\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u5c31\u662f\u200b\u901a\u8fc7\u200b\u5bb9\u5668\u200b\u5bfc\u51fa\u200b\u4e00\u4e2a\u200bdocker\u200b\u955c\u50cf\u200b\u5206\u53d1\u200b\u73af\u5883\u200b\u4e86\u200b\u3002 </p>Text Only<pre><code>docker commit &lt;container_id&gt; &lt;image_name&gt;:&lt;tag&gt;\ndocker save -o &lt;output_file.tar&gt; &lt;image_name&gt;:&lt;tag&gt;\n</code></pre> \u200b\u5bf9\u65b9\u200b\u6536\u5230\u200btar\u200b\u6587\u4ef6\u200b\u540e\u200b\u4f7f\u7528\u200b\uff1a Text Only<pre><code>docker load -i &lt;output_file.tar&gt;\n</code></pre><p></p> <ul> <li>pyo3\u200b\u5b9e\u73b0\u200bpython\u200b\u548c\u200brust\u200b\u8de8\u200b\u8bed\u8a00\u200b\u8c03\u7528\u200b</li> <li>cpp\u200b\u5f00\u53d1\u200b\u4e2d\u200b\u4e00\u4e9b\u200b\u7f16\u8bd1\u200b\u9009\u9879\u200b\u7684\u200b\u7528\u5904\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u7528\u200bcmake\u200b\u8bbe\u7f6e\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/rust-facet%E5%BA%93%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8F%8D%E5%B0%84/","title":"rust-facet\u200b\u5e93\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u8fd0\u884c\u200b\u65f6\u200b\u53cd\u5c04","text":""},{"location":"blog/rust-facet%E5%BA%93%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8F%8D%E5%B0%84/#\u4ecefacet-\u53cd\u5c04\u5b9e\u73b0","title":"\u4ece\u200bfacet \u200b\u53cd\u5c04\u200b\u5b9e\u73b0","text":""},{"location":"blog/rust-facet%E5%BA%93%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8F%8D%E5%B0%84/#\u4ece\u4f8b\u5b50\u770bfacet\u53cd\u5c04\u7684\u4e24\u5927\u529f\u80fd","title":"\u4ece\u200b\u4f8b\u5b50\u200b\u770b\u200bfacet\u200b\u53cd\u5c04\u200b\u7684\u200b\u4e24\u5927\u200b\u529f\u80fd","text":"<p>\u200b\u4e3a\u200b\u5e8f\u5217\u5316\u200b\u548c\u200b\u53cd\u200b\u5e8f\u5217\u5316\u200b\uff0c\u200b\u6bd4\u5982\u200bjson\u3001yaml\u200b\u670d\u52a1\u200b\u3002</p>"},{"location":"blog/rust-facet%E5%BA%93%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8F%8D%E5%B0%84/#partial\u529f\u80fd\u4ecb\u7ecd","title":"Partial\u200b\u529f\u80fd\u200b\u4ecb\u7ecd","text":"<p>\u200b\u7528\u4e8e\u200b\u6784\u5efa\u200b\u503c\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u7528\u4e8e\u200b\u6839\u636e\u200bjson\u3001yaml\u200b\u7b49\u200b\u683c\u5f0f\u200b\uff0c\u200b\u53cd\u200b\u5e8f\u5217\u5316\u200b\u6784\u5efa\u200brust\u200b\u7c7b\u578b\u200b\u4ee5\u53ca\u200b\u8bbe\u7f6e\u200b\u6210\u5458\u200b\u7684\u200b\u503c\u200b\u3002\u200b\u5148\u200b\u901a\u8fc7\u200bPartial::alloc\u200b\u5206\u914d\u200b\u5173\u4e8e\u200b\u7c7b\u578b\u200bOuter\u200b\u7684\u200b\u672a\u200b\u521d\u59cb\u5316\u200b\u5185\u5b58\u200b\uff0c\u200b\u7136\u540e\u200b\u901a\u8fc7\u200b.begin_field(\u201cname\u201d).set(String::from(\u201cHello, world!\u201d))\u200b\u4e3a\u200b\u6210\u5458\u200bname\u200b\u8bbe\u7f6e\u200b\u503c\u200b\u3002</p> Rust<pre><code>#[derive(Facet, PartialEq, Eq, Debug)]\nstruct Outer {\n    name: String,\n    inner: Inner,\n}\n\n#[derive(Facet, PartialEq, Eq, Debug)]\nstruct Inner {\n    x: i32,\n    b: i32,\n}\n\n#[test]\nfn wip_struct_testleak1() {\n    let v = Partial::alloc::&lt;Outer&gt;()\n        .begin_field(\"name\")\n        .set(String::from(\"Hello, world!\"))\n        .end()\n        .begin_field(\"inner\")\n        .begin_field(\"x\")\n        .set(42)\n        .end()\n        .begin_field(\"b\")\n        .set(43)\n        .end()\n        .end()\n        .build();\n\n    assert_eq!(\n        *v,\n        Outer {\n            name: String::from(\"Hello, world!\"),\n            inner: Inner { x: 42, b: 43 }\n        }\n    );\n}\n</code></pre>"},{"location":"blog/rust-facet%E5%BA%93%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8F%8D%E5%B0%84/#peekvalue\u529f\u80fd\u4ecb\u7ecd","title":"PeekValue\u200b\u529f\u80fd\u200b\u4ecb\u7ecd","text":"<p>\u200b\u67e5\u770b\u200b\u5b58\u5728\u200b\u7684\u200b\u503c\u200b\u3002\u200b\u4f8b\u5982\u200b\uff1a\u200b\u901a\u8fc7\u200b.field_by_name(\u201cnumber\u201d)\u200b\u83b7\u53d6\u200bnumber\u200b\u6210\u5458\u200b\u7684\u200b\u503c\u200b\u3002</p> Rust<pre><code>#[derive(Facet)]\nstruct TestStruct {\n    number: i32,\n    text: String,\n}\n\n#[test]\nfn peek_struct() {\n    // Create test struct instance\n    let test_struct = TestStruct {\n        number: 42,\n        text: \"hello\".to_string(),\n    };\n    let peek_value = Peek::new(&amp;test_struct);\n\n    // Convert to struct and check we can convert to PeekStruct\n    let peek_struct = peek_value\n        .into_struct()\n        .expect(\"Should be convertible to struct\");\n\n    // Test field access by name\n    let number_field = peek_struct\n        .field_by_name(\"number\")\n        .expect(\"Should have a number field\");\n    let text_field = peek_struct\n        .field_by_name(\"text\")\n        .expect(\"Should have a text field\");\n\n    // Test field values\n    let number_value = number_field.get::&lt;i32&gt;().unwrap();\n    assert_eq!(*number_value, 42);\n\n    let text_value = text_field.get::&lt;String&gt;().unwrap();\n    assert_eq!(text_value, \"hello\");\n}\n</code></pre>"},{"location":"blog/rust-facet%E5%BA%93%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8F%8D%E5%B0%84/#\u6838\u5fc3\u5b58\u50a8\u7ed3\u6784","title":"\u6838\u5fc3\u200b\u5b58\u50a8\u200b\u7ed3\u6784","text":"<p>facet\u200b\u5b58\u50a8\u200b\u7684\u200b\u6838\u5fc3\u200b\u6570\u636e\u7ed3\u6784\u200b\uff0c</p> <ul> <li>SHAPE</li> <li>VTABLE Rust<pre><code>pub unsafe trait Facet&lt;'facet&gt;: 'facet {\n    /// The shape of this type\n    ///\n    /// Shape embeds all other constants of this trait.\n    const SHAPE: &amp;'static Shape;\n\n    /// Function pointers to perform various operations: print the full type\n    /// name (with generic type parameters), use the Display implementation,\n    /// the Debug implementation, build a default value, clone, etc.\n    ///\n    /// If [`Self::SHAPE`] has `ShapeLayout::Unsized`, then the parent pointer needs to be passed.\n    ///\n    /// There are more specific vtables in variants of [`Def`]\n    const VTABLE: &amp;'static ValueVTable;\n}\n</code></pre></li> </ul> <p>\u200b\u4e3a\u200bcore\u3001alloc\u3001std\u200b\u7b49\u200b\u6a21\u5757\u200b\u4e2d\u200b\u7684\u200b\u6570\u636e\u7ed3\u6784\u200b\u90fd\u200b\u5b9e\u73b0\u200b\u4e86\u200bFacet trait\u3002\u200b\u4ee5\u200b\u5b9e\u73b0\u200b\u53cd\u5c04\u200b\u7684\u200b\u4e24\u5927\u200b\u529f\u80fd\u200b\u3002</p>"},{"location":"blog/rust-facet%E5%BA%93%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8F%8D%E5%B0%84/#string\u7c7b\u578b\u5982\u4f55\u5b9e\u73b0trait","title":"String\u200b\u7c7b\u578b\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200btrait","text":"<p>\u200b\u770b\u4e2a\u200b\u6700\u200b\u7b80\u5355\u200b\u7684\u200b\u7c7b\u578b\u200b\uff0c\u200b\u4ece\u200balloc\u200b\u6a21\u5757\u200b\u4e2d\u200b\u5f15\u5165\u200b\u7684\u200bString\u200b\u7c7b\u578b\u200b\u3002\u200b\u5bf9\u200b\u6bcf\u4e2a\u200b\u7c7b\u578b\u200b\u4e3a\u4e86\u200b\u5b9e\u73b0\u200b\u53cd\u5c04\u200b\uff0c\u200b\u90fd\u200b\u6709\u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u4e32\u200b\u7c7b\u578b\u200b\u7684\u200b\u63cf\u8ff0\u200b\u6807\u5fd7\u200b\uff0cString\u200b\u7c7b\u578b\u200b\u5c31\u662f\u200b\u201dString\u201d\u3002 </p>Rust<pre><code>#[cfg(feature = \"alloc\")]\nunsafe impl Facet&lt;'_&gt; for alloc::string::String {\n    const VTABLE: &amp;'static ValueVTable = &amp;const {\n        let mut vtable = value_vtable!(alloc::string::String, |f, _opts| write!(\n            f,\n            \"{}\",\n            Self::SHAPE.type_identifier\n        ));\n\n        let vtable_sized = vtable.sized_mut().unwrap();\n        // \u200b\u5982\u4f55\u200b\u89e3\u6790\u200bString\u200b\u7c7b\u578b\u200b\n        vtable_sized.parse = || {\n            Some(|s, target| {\n                // For String, parsing from a string is just copying the string\n                Ok(unsafe { target.put(s.to_string()) })\n            })\n        };\n\n        vtable\n    };\n\n    const SHAPE: &amp;'static Shape = &amp;const {\n        Shape::builder_for_sized::&lt;Self&gt;()\n            .def(Def::Scalar)\n            .type_identifier(\"String\")\n            .ty(Type::User(UserType::Opaque))\n            .build()\n    };\n}\n</code></pre><p></p>"},{"location":"blog/rust-facet%E5%BA%93%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8F%8D%E5%B0%84/#vtable\u5982\u4f55\u5b9e\u73b0","title":"VTABLE\u200b\u5982\u4f55\u200b\u5b9e\u73b0","text":"<p>\u200b\u901a\u8fc7\u200bValueVTableBuilder\u200b\u7ed1\u5b9a\u200b\u4e86\u200b\u51fd\u6570\u6307\u9488\u200b\uff0c\u200b\u901a\u8fc7\u200bSpez\u200b\u7edf\u4e00\u200b\u8c03\u7528\u200b\u5230\u200b\u5bf9\u5e94\u200b\u7684\u200b\u51fd\u6570\u200b\u3002 impl! crate \u200b\u53ef\u4ee5\u200b\u5224\u65ad\u200b\u67d0\u4e2a\u200b\u7c7b\u578b\u200b\u662f\u5426\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u67d0\u4e2a\u200b trait\uff0cimpls crate\u3002</p> Rust<pre><code>#[macro_export]\nmacro_rules! value_vtable {\n    ($type_name:ty, $type_name_fn:expr) =&gt; {\n        const {\n            $crate::ValueVTable::builder::&lt;$type_name&gt;()\n                .type_name($type_name_fn)\n                .display(|| {\n                    if $crate::spez::impls!($type_name: core::fmt::Display) {\n                        Some(|data, f| {\n                            use $crate::spez::*;\n                            (&amp;&amp;Spez(data)).spez_display(f)\n                        })\n                    } else {\n                        None\n                    }\n                })\n                // ...\n                .build()\n        }\n    }\n};        \n</code></pre> <p>spec\u200b\u6a21\u5757\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u201c\u200b\u81ea\u52a8\u200b\u89e3\u200b\u5f15\u7528\u200b\u7279\u5316\u200b\u8f85\u52a9\u5de5\u5177\u200b\u201d\u200b\u6307\u200b\u7684\u200b\u662f\u200b\u901a\u8fc7\u200b\u81ea\u52a8\u200b\u89e3\u200b\u5f15\u7528\u200b\uff08auto-deref\uff09\u200b\u6280\u672f\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u7c7b\u4f3c\u200b\u4e8e\u200bspecialization\u200b\u7684\u200b\u529f\u80fd\u200b\u3002 \u200b\u7b80\u800c\u8a00\u4e4b\u200b\uff0c\u200b\u672c\u200b\u6a21\u5757\u200b\u8ba9\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u6839\u636e\u200b\u7c7b\u578b\u200b\u5b9e\u73b0\u200b\u7684\u200b trait \u200b\u81ea\u52a8\u200b\u9009\u62e9\u200b\u66f4\u200b\u5408\u9002\u200b\u7684\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u4e14\u200b\u4e0d\u200b\u9700\u8981\u200b\u7528\u5230\u200b Rust \u200b\u8fd8\u200b\u672a\u200b\u7a33\u5b9a\u200b\u7684\u200bspecialization feature\u200b\u529f\u80fd\u200b\u3002</p> <p>rust\u200b\u81ea\u52a8\u200b\u5f15\u7528\u200b\u7279\u5316\u200b\u53c2\u8003\u200b\u3002</p> <p>\u200b\u4f8b\u5982\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u7c7b\u578b\u200b\u5b9e\u73b0\u200b\u4e86\u200b <code>Default</code> trait\uff0c\u200b\u90a3\u4e48\u200b <code>spez_default_in_place</code> \u200b\u65b9\u6cd5\u200b\u4f1a\u200b\u8fd4\u56de\u200b\u4e00\u4e2a\u200b\u6307\u5411\u200b\u9ed8\u8ba4\u503c\u200b\u7684\u200b\u6307\u9488\u200b\u3002\u200b\u5c06\u200b\u9ed8\u8ba4\u503c\u200b\u5199\u5165\u200b\u5230\u200b\u6307\u5b9a\u200b\u7684\u200b\u5185\u5b58\u200b\u4f4d\u7f6e\u200b\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200bPtrUninit\u3002</p> Rust<pre><code>//////////////////////////////////////////////////////////////////////////////////////\n// Default (in place, because we can't have sized) \ud83c\udfe0\ud83d\udd04\n//////////////////////////////////////////////////////////////////////////////////////\n\n/// Specialization proxy for [`core::default::Default`]\npub trait SpezDefaultInPlaceYes {\n    /// Creates a default value for the inner type in place.\n    ///\n    /// This method is called when the wrapped type implements `Default`.\n    /// It writes the default value into the provided uninitialized memory.\n    ///\n    /// # Safety\n    ///\n    /// This function operates on uninitialized memory and requires that `target`\n    /// has sufficient space allocated for type `T`.\n    unsafe fn spez_default_in_place&lt;'mem&gt;(&amp;self, target: PtrUninit&lt;'mem&gt;) -&gt; PtrMut&lt;'mem&gt;;\n}\nimpl&lt;T: Default&gt; SpezDefaultInPlaceYes for &amp;SpezEmpty&lt;T&gt; {\n    unsafe fn spez_default_in_place&lt;'mem&gt;(&amp;self, target: PtrUninit&lt;'mem&gt;) -&gt; PtrMut&lt;'mem&gt; {\n        unsafe { target.put(&lt;T as Default&gt;::default()) }\n    }\n}\n\n/// Specialization proxy for [`core::default::Default`]\npub trait SpezDefaultInPlaceNo {\n    /// Fallback implementation when the type doesn't implement `Default`.\n    ///\n    /// This method is used as a fallback and is designed to be unreachable in practice.\n    /// It's only selected when the wrapped type doesn't implement `Default`.\n    ///\n    /// # Safety\n    ///\n    /// This function is marked unsafe as it deals with uninitialized memory,\n    /// but it should never be reachable in practice.\n    unsafe fn spez_default_in_place&lt;'mem&gt;(&amp;self, _target: PtrUninit&lt;'mem&gt;) -&gt; PtrMut&lt;'mem&gt;;\n}\nimpl&lt;T&gt; SpezDefaultInPlaceNo for SpezEmpty&lt;T&gt; {\n    unsafe fn spez_default_in_place&lt;'mem&gt;(&amp;self, _target: PtrUninit&lt;'mem&gt;) -&gt; PtrMut&lt;'mem&gt; {\n        unreachable!()\n    }\n}\n</code></pre> <p>ValueVTableBuilder\u200b\u662f\u200bValueVTable\u200b\u7c7b\u578b\u200b\u7684\u200b\u6784\u5efa\u200b\u5668\u200b\u3002 </p>Rust<pre><code>pub struct ValueVTableBuilder&lt;T&gt; {\n    type_name: Option&lt;TypeNameFn&gt;,\n    display: fn() -&gt; Option&lt;DisplayFn&gt;,\n    // ...\n}\n</code></pre> display\u200b\u51fd\u6570\u200b\u5b9e\u73b0\u200b\u5c31\u662f\u200b\u901a\u8fc7\u200btransmute\u200b\u8fdb\u884c\u200b\u7c7b\u578b\u8f6c\u6362\u200b\uff0c\u200b\u4ece\u200bDisplayFnTyped\u200b\u7c7b\u578b\u8f6c\u6362\u200b\u4e3a\u200bDisplayFn\u3002<p></p> <p></p>Rust<pre><code>pub const fn display(mut self, display: fn() -&gt; Option&lt;DisplayFnTyped&lt;T&gt;&gt;) -&gt; Self {\n    self.display = unsafe {\n        mem::transmute::&lt;fn() -&gt; Option&lt;DisplayFnTyped&lt;T&gt;&gt;, fn() -&gt; Option&lt;DisplayFn&gt;&gt;(display)\n    };\n    self\n}\n</code></pre> Rust<pre><code>/// Function to format a value for display\n///\n/// If both [`DisplayFn`] and [`ParseFn`] are set, we should be able to round-trip the value.\n///\n/// # Safety\n///\n/// The `value` parameter must point to aligned, initialized memory of the correct type.\npub type DisplayFn =\n    for&lt;'mem&gt; unsafe fn(value: PtrConst&lt;'mem&gt;, f: &amp;mut core::fmt::Formatter) -&gt; core::fmt::Result;\n\n\n/// Function to format a value for display\n///\n/// If both [`DisplayFn`] and [`ParseFn`] are set, we should be able to round-trip the value.\npub type DisplayFnTyped&lt;T&gt; = fn(value: &amp;T, f: &amp;mut core::fmt::Formatter) -&gt; core::fmt::Result;****\n</code></pre><p></p>"},{"location":"blog/rust-facet%E5%BA%93%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8F%8D%E5%B0%84/#shape\u5982\u4f55\u5b9e\u73b0","title":"SHAPE\u200b\u5982\u4f55\u200b\u5b9e\u73b0","text":"Rust<pre><code>impl Shape {\n    /// Returns a builder for a shape for some type `T`.\n    pub const fn builder_for_sized&lt;'a, T: Facet&lt;'a&gt;&gt;() -&gt; ShapeBuilder {\n        ShapeBuilder::new(T::VTABLE)\n            .layout(Layout::new::&lt;T&gt;())\n            .id(ConstTypeId::of::&lt;T&gt;())\n    }\n    // ....\n}\n</code></pre> Rust<pre><code>/// Builder for [`Shape`]\npub struct ShapeBuilder {\n    id: Option&lt;ConstTypeId&gt;,\n    layout: Option&lt;ShapeLayout&gt;, // \u200b\u8bb0\u5f55\u200b\u4e86\u200blayout\u200b\u4fe1\u606f\u200b\n    vtable: &amp;'static ValueVTable, // \u200b\u8bb0\u5f55\u200b\u4e86\u200bvtable\u200b\u4fe1\u606f\u200b\uff0c\u200b\u5c31\u662f\u200b\u4e0a\u9762\u200b\u7684\u200bvalue_vtable\uff0c\u200b\u5b58\u50a8\u200b\u4e86\u200b\u51fd\u6570\u6307\u9488\u200b\n    def: Def,\n    ty: Option&lt;Type&gt;,\n    type_identifier: Option&lt;&amp;'static str&gt;,\n    type_params: &amp;'static [TypeParam],\n    doc: &amp;'static [&amp;'static str],\n    attributes: &amp;'static [ShapeAttribute],\n    type_tag: Option&lt;&amp;'static str&gt;,\n    inner: Option&lt;fn() -&gt; &amp;'static Shape&gt;,\n}\n</code></pre> <p>layout\u200b\u662f\u200b\u4ec0\u4e48\u200b\u5462\u200b\uff1f\u200b\u5b9e\u9645\u4e0a\u200b\u5c31\u662f\u200b\u5b58\u50a8\u200b\u7684\u200bcore::alloc::Layout\uff0c\u200b\u8bb0\u5f55\u200b\u4e86\u200bSize\u3001Align\u200b\u7b49\u200b\u4fe1\u606f\u200b\u3002\u200b\u53ef\u4ee5\u200b\u5206\u914d\u200b\u4e00\u6bb5\u200b\u8be5\u200b\u7c7b\u578b\u200b\u7684\u200b\u672a\u200b\u521d\u59cb\u5316\u200b\u5185\u5b58\u200b\uff0c\u200b\u7136\u540e\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u53cd\u200b\u5e8f\u5217\u5316\u200b\u65f6\u200b\u5c06\u200b\u5185\u5b58\u200b\u5199\u5165\u200b\u5230\u200b\u6307\u5b9a\u200b\u7684\u200b\u5185\u5b58\u200b\u4e2d\u200b\uff0c\u200b\u5c31\u200b\u6784\u9020\u200b\u51fa\u200b\u4e86\u200btype\u200b\u7684\u200b\u5b9e\u4f8b\u200b\u3002 </p>Rust<pre><code>use core::alloc::Layout;\n\n/// Schema for reflection of a type\n#[derive(Clone, Copy)]\n#[repr(C)]\npub struct Shape {\n    /// Unique type identifier, provided by the compiler.\n    pub id: ConstTypeId,\n\n    /// Size, alignment \u2014 enough to allocate a value of this type\n    /// (but not initialize it.)\n    pub layout: ShapeLayout,\n\n    /// Function pointers to perform various operations: print the full type\n    /// name (with generic type parameters), use the Display implementation,\n    /// the Debug implementation, build a default value, clone, etc.\n    ///\n    /// If the shape has `ShapeLayout::Unsized`, then the parent pointer needs to be passed.\n    ///\n    /// There are more specific vtables in variants of [`Def`]\n    pub vtable: &amp;'static ValueVTable,\n    // ...\n}\n\n/// Layout of the shape\n#[derive(Clone, Copy, Debug, Hash)]\npub enum ShapeLayout {\n    /// `Sized` type\n    Sized(Layout),\n    /// `!Sized` type\n    Unsized,\n}\n</code></pre><p></p>"},{"location":"blog/rust-facet%E5%BA%93%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8F%8D%E5%B0%84/#\u5982\u4f55\u5728\u5806\u4e0a\u5206\u914d\u4e00\u6bb5\u672a\u521d\u59cb\u5316\u5185\u5b58","title":"\u5982\u4f55\u200b\u5728\u200b\u5806\u200b\u4e0a\u200b\u5206\u914d\u200b\u4e00\u6bb5\u200b\u672a\u200b\u521d\u59cb\u5316\u200b\u5185\u5b58\u200b\uff1f","text":"Rust<pre><code>// facet/facet-core/src/types/mod.rs\nimpl Shape {\n    /// Heap-allocate a value of this shape\n    #[cfg(feature = \"alloc\")]\n    #[inline]\n    pub fn allocate(&amp;self) -&gt; Result&lt;crate::ptr::PtrUninit&lt;'static&gt;, UnsizedError&gt; {\n        let layout = self.layout.sized_layout()?;\n\n        Ok(crate::ptr::PtrUninit::new(if layout.size() == 0 {\n            core::ptr::without_provenance_mut(layout.align())\n        } else {\n            // SAFETY: We have checked that layout's size is non-zero\n            unsafe { alloc::alloc::alloc(layout) }\n        }))\n    }\n\n    /// Deallocate a heap-allocated value of this shape\n    #[cfg(feature = \"alloc\")]\n    #[inline]\n    pub unsafe fn deallocate_mut(&amp;self, ptr: PtrMut) -&gt; Result&lt;(), UnsizedError&gt; {\n        use alloc::alloc::dealloc;\n\n        let layout = self.layout.sized_layout()?;\n\n        if layout.size() == 0 {\n            // Nothing to deallocate\n            return Ok(());\n        }\n        // SAFETY: The user guarantees ptr is valid and from allocate, we checked size isn't 0\n        unsafe { dealloc(ptr.as_mut_byte_ptr(), layout) }\n\n        Ok(())\n    }\n    // ...\n}\n</code></pre> <p>\u200b\u4ec0\u4e48\u200b\u65f6\u5019\u200b\u4f1a\u200b\u7528\u5230\u200b\u6839\u636e\u200blayout\u200b\u5206\u914d\u5185\u5b58\u200b\u5462\u200b\uff1f\u200b\u5728\u200bfacet reflect\u200b\u7684\u200bPartial\u200b\u529f\u80fd\u200b\u4e2d\u200b\u3002\u200b\u8fd8\u200b\u8bb0\u5f97\u200b\u6700\u200b\u524d\u9762\u200b\u7684\u200bPartial\u200b\u5c31\u662f\u200b\u8c03\u7528\u200b\u4e86\u200balloc\u200b\u51fd\u6570\u200b\u5206\u914d\u200bOuter\u200b\u7c7b\u578b\u200b\u7684\u200b\u5185\u5b58\u200b\u5417\u200b\uff1f </p>Rust<pre><code>impl&lt;'facet&gt; Partial&lt;'facet&gt; {\n    /// Allocates a new Partial instance with the given shape\n    pub fn alloc_shape(shape: &amp;'static Shape) -&gt; Result&lt;Self, ReflectError&gt; {\n        crate::trace!(\n            \"alloc_shape({:?}), with layout {:?}\",\n            shape,\n            shape.layout.sized_layout()\n        );\n\n        let data = shape.allocate().map_err(|_| ReflectError::Unsized {\n            shape,\n            operation: \"alloc_shape\",\n        })?;\n        // ....\n    }\n\n    /// Allocates a new TypedPartial instance with the given shape and type\n    pub fn alloc&lt;T&gt;() -&gt; Result&lt;TypedPartial&lt;'facet, T&gt;, ReflectError&gt;\n    where\n        T: Facet&lt;'facet&gt;,\n    {\n        Ok(TypedPartial {\n            inner: Self::alloc_shape(T::SHAPE)?,\n            phantom: PhantomData,\n        })\n    }\n}\n</code></pre><p></p>"},{"location":"blog/rust-facet%E5%BA%93%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8F%8D%E5%B0%84/#partial\u7684\u5b9e\u73b0\u539f\u7406","title":"Partial\u200b\u7684\u200b\u5b9e\u73b0\u200b\u539f\u7406\u200b\ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350","text":"<p>Partial\u200b\u901a\u8fc7\u200b\u4e00\u4e2a\u200bVec&lt;Frame&gt;\u200b\u6765\u200b\u4fdd\u5b58\u200b\u64cd\u4f5c\u200b\u7684\u200b\u5143\u7d20\u200b\u3002\u200b\u4ee5\u200bPartial\u200b\u6784\u9020\u200b\u4e00\u4e2a\u200bStruct\u200b\u4e3a\u4f8b\u200b\u3002\u200b\u5f53\u524d\u200b\u64cd\u4f5c\u200bname field\uff0c\u200b\u90a3\u4e48\u200bVec\u200b\u4fdd\u5b58\u200b\u7684\u200b\u6700\u540e\u200b\u4e00\u5e27\u200b\u5c31\u662f\u200b\u8bb0\u5f55\u200b\u7684\u200bname fileld\u200b\u7684\u200b\u4fe1\u606f\u200b\uff0c\u200b\u5305\u62ec\u200bshape\u3001\u200b\u6570\u636e\u200b\u6307\u9488\u200b\u3001\u200b\u72b6\u6001\u200bTracker\u200b\u7b49\u200b\u3002 </p>Rust<pre><code>pub struct Partial&lt;'facet&gt; {\n    /// stack of frames to keep track of deeply nested initialization\n    frames: Vec&lt;Frame&gt;,\n    // ...\n}\n\nstruct Frame {\n    /// Address of the value being initialized\n    data: PtrUninit&lt;'static&gt;,\n\n    /// Shape of the value being initialized\n    shape: &amp;'static Shape,\n\n    /// Tracks initialized fields\n    tracker: Tracker,\n\n    /// Whether this frame owns the allocation or is just a field pointer\n    ownership: FrameOwnership,\n}\n</code></pre> \u200b\u4ece\u200b\u524d\u9762\u200b\u7684\u200b\u4f8b\u5b50\u200b\u770b\u200b Rust<pre><code>#[derive(Facet, PartialEq, Eq, Debug)]\nstruct Outer {\n    name: String,\n}\n\n#[test]\nfn wip_struct_testleak1() {\n    let v = Partial::alloc::&lt;Outer&gt;()\n        .begin_field(\"name\")\n        .set(String::from(\"Hello, world!\"))\n        .end()\n    // ......\n}\n</code></pre><p></p> <p>\u200b\u9996\u5148\u200b,alloc\u200b\u5206\u914d\u200bOuter\u200b\u7c7b\u578b\u200b\u6211\u4eec\u200b\u5df2\u7ecf\u200b\u4ecb\u7ecd\u200b\u6e05\u695a\u200b\u4e86\u200b\u3002\u200b\u4ece\u200bbegin_field\u200b\u8bf4\u8d77\u200b\u3002 \u200b\u6839\u636e\u200bfield_name, \u200b\u4f8b\u5982\u200bOuter \u200b\u7ed3\u6784\u200b\u4f53\u200b\u7684\u200bname\u200b\u5b57\u200b\u6bb5\u200b\uff0c\u200b\u5148\u200b\u83b7\u53d6\u200bStruct\u200b\u7684\u200bstruct_type.fields\uff0c\u200b\u7136\u540e\u200b\u83b7\u53d6\u200b\u5230\u200b\u4e00\u4e2a\u200bindex\u3002\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u6839\u636e\u200bindex\u200b\u53bb\u200b\u83b7\u53d6\u200b\u8fd9\u4e2a\u200bfield\u200b\u7684\u200b\u4fe1\u606f\u200b\u4e86\u200b\u3002\u200b\u6211\u4eec\u200b\u7684\u200b\u76ee\u7684\u200b\u662f\u200b\u83b7\u53d6\u200bfield\u200b\u7684\u200bShape\u200b\u548c\u200b\u672a\u200b\u521d\u59cb\u5316\u200b\u6307\u9488\u200b\uff0c\u200b\u540e\u7eed\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200bset\u200b\u51fd\u6570\u200b\u8bbe\u7f6e\u200b\u8be5\u5b57\u200b\u6bb5\u200b\u7684\u200b\u503c\u200b\u3002</p> <p>self.frames.last_mut()\u200b\u5c31\u662f\u200b\u83b7\u53d6\u200b\u5f53\u524d\u200b\u6808\u5e27\u200b\u3002\u200b\u5f53\u524d\u200b\u64cd\u4f5c\u200b\u7684\u200b\u662f\u200bStruct\u200b\u7c7b\u578b\u200b\u7684\u200b\u6808\u200b\u5e27\u200b\u3002 </p>Rust<pre><code>// /home/ken/tmp/facet/facet-reflect/src/partial/mod.rs\n/// Selects a field of a struct with a given name\npub fn begin_field(&amp;mut self, field_name: &amp;str) -&gt; Result&lt;&amp;mut Self, ReflectError&gt; {\n    let frame = self.frames.last_mut().unwrap();\n    match frame.shape.ty {\n        Type::User(user_type) =&gt; match user_type {\n            UserType::Struct(struct_type) =&gt; {\n                let idx = struct_type.fields.iter().position(|f| f.name == field_name);\n                let idx = match idx {\n                    Some(idx) =&gt; idx,\n                    None =&gt; {\n                        return Err(ReflectError::OperationFailed {\n                            shape: frame.shape,\n                            operation: \"field not found\",\n                        });\n                    }\n                };\n                self.begin_nth_field(idx)\n            }\n        },\n    }\n}\n</code></pre><p></p> <p>\u200b\u8c03\u7528\u200bbegin_nth_field\u200b\u51fd\u6570\u200b\u65f6\u200b\uff0c\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200bFrame\u200b\u8fd8\u662f\u200bStruct\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002 \u200b\u5728\u200b\u627e\u5230\u200bname feild\u200b\u540e\u200b\uff0c\u200b\u5982\u679c\u200b\u5df2\u7ecf\u200b\u521d\u59cb\u5316\u200b\uff0c\u200b\u5c31\u200b\u5148\u200bdrop\u200b\u521d\u59cb\u5316\u200b\u7684\u200b\u6570\u636e\u200b\uff0c\u200b\u7136\u540e\u200b\u540e\u7eed\u200b\u91cd\u65b0\u200b\u521d\u59cb\u5316\u200b\u3002\u200b\u540c\u65f6\u200b\uff0c\u200b\u66f4\u65b0\u200b\u6700\u540e\u200b\u4e00\u5e27\u200b\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200blast_frame\u200b\u4e3a\u200b\u5f53\u524d\u200b\u64cd\u4f5c\u200b\u7684\u200bStruct\u200b\u7684\u200bname field\u3002 </p>Rust<pre><code> /// Selects the nth field of a struct by index\n    pub fn begin_nth_field(&amp;mut self, idx: usize) -&gt; Result&lt;&amp;mut Self, ReflectError&gt; {\n        let frame = self.frames.last_mut().unwrap();\n        match frame.shape.ty {\n            Type::User(user_type) =&gt; match user_type {\n                UserType::Struct(struct_type) =&gt; {\n                    if idx &gt;= struct_type.fields.len() {\n                        return Err(ReflectError::OperationFailed {\n                            shape: frame.shape,\n                            operation: \"field index out of bounds\",\n                        });\n                    }\n                    let field = &amp;struct_type.fields[idx];\n\n                    match &amp;mut frame.tracker {\n                        Tracker::Uninit =&gt; {\n                            frame.tracker = Tracker::Struct {\n                                iset: ISet::new(struct_type.fields.len()),\n                                current_child: Some(idx),\n                            }\n                        },\n                        Tracker::Struct {\n                            iset,\n                            current_child,\n                        } =&gt; {\n                            // Check if this field was already initialized\n                            if iset.get(idx) {\n                                // Drop the existing value before re-initializing\n                                // \u200b\u83b7\u53d6\u200bname\u200b\u5b57\u6bb5\u200b\u7684\u200b\u6307\u9488\u200b\uff0cdrop\u200b\u5df2\u7ecf\u200b\u521d\u59cb\u5316\u200b\u7684\u200b\u6570\u636e\u200b\uff0c\u200b\u8fdb\u884c\u200b\u91cd\u65b0\u200b\u521d\u59cb\u5316\u200b\n                                let field_ptr = unsafe { frame.data.field_init_at(field.offset) };\n                                if let Some(drop_fn) =\n                                    field.shape.vtable.sized().and_then(|v| (v.drop_in_place)())\n                                {\n                                    unsafe { drop_fn(field_ptr) };\n                                }\n                                // Unset the bit so we can re-initialize\n                                iset.unset(idx);\n                            }\n                            *current_child = Some(idx);\n                        }\n                        _ =&gt; unreachable!(),\n                    }\n\n                    // Push a new frame for this field onto the frames stack.\n                    let field_ptr = unsafe { frame.data.field_uninit_at(field.offset) };\n                    let field_shape = field.shape;\n                    // \u200b\u4fee\u6539\u200b\u6700\u540e\u200b\u4e00\u5e27\u200b\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200blast_frame\u200b\u4e3a\u200b\u5f53\u524d\u200b\u64cd\u4f5c\u200b\u7684\u200bStruct\u200b\u7684\u200bname field\n                    self.frames\n                        .push(Frame::new(field_ptr, field_shape, FrameOwnership::Field));\n\n                    Ok(self)\n                }\n            },\n        }\n    }\n</code></pre><p></p> <p>set\u200b\u8bbe\u7f6e\u200b\u503c\u200b </p>Rust<pre><code>/// Sets a value wholesale into the current frame\npub fn set&lt;U&gt;(&amp;mut self, value: U) -&gt; Result&lt;&amp;mut Self, ReflectError&gt;\nwhere\n    U: Facet&lt;'facet&gt;,\n{\n    self.require_active()?;\n\n    // For conversion frames, store the value in the conversion frame itself\n    // The conversion will happen during end()\n    let ptr_const = PtrConst::new(&amp;raw const value);\n    unsafe {\n        // Safety: We are calling set_shape with a valid shape and a valid pointer\n        self.set_shape(ptr_const, U::SHAPE)?\n    };\n\n    // Prevent the value from being dropped since we've copied it\n    core::mem::forget(value);\n    Ok(self)\n}\n</code></pre> set\u200b\u51fd\u6570\u8c03\u7528\u200b\u4e86\u200bset_shape\u200b\u51fd\u6570\u200b\uff0c\u200b\u56e0\u4e3a\u200bbegin_field\u200b\u51fd\u6570\u200b\u63a5\u7740\u200b\u8c03\u7528\u200b\u7684\u200b\u5c31\u662f\u200bset\u200b\u51fd\u6570\u200b\uff0c\u200b\u56e0\u6b64\u200bset_shape\u200b\u51fd\u6570\u200b\u4e2d\u200b\u83b7\u53d6\u200b\u7684\u200blast_mut frame\u200b\u5c31\u662f\u200bname\u200b\u5b57\u6bb5\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002\u200b\u7136\u540e\u200b\u5c31\u200b\u4e3a\u200bdata\u200b\u6307\u9488\u200b\u6307\u5411\u200b\u7684\u200b\u6570\u636e\u200b\u8d4b\u503c\u200b\u4e86\u200b\u3002 Rust<pre><code>/// Sets a value into the current frame by shape, for shape-based operations\n#[inline]\npub unsafe fn set_shape(\n    &amp;mut self,\n    src_value: PtrConst&lt;'_&gt;,\n    src_shape: &amp;'static Shape,\n) -&gt; Result&lt;&amp;mut Self, ReflectError&gt; {\n    let fr = self.frames.last_mut().unwrap();\n\n    unsafe {\n        fr.data.copy_from(src_value, fr.shape).unwrap();\n    }\n    fr.tracker = Tracker::Init;\n    Ok(self)\n}\n</code></pre> \u200b\u5230\u200b\u6b64\u200b\uff0c\u200b\u6210\u529f\u200b\u5b9e\u73b0\u200b\u4e86\u200bStruct\u200b\u7684\u200bPartial\u200b\u529f\u80fd\u200b\uff0c\u200b\u4ece\u200b\u5206\u914d\u200b\u672a\u200b\u521d\u59cb\u5316\u200b\u7684\u200b\u5185\u5b58\u200b\uff0c\u200b\u7136\u540e\u200b\u901a\u8fc7\u200bstring\u200b\u7c7b\u578b\u200b\u7684\u200bfield\u200b\u540d\u79f0\u200b\uff0c\u200b\u6784\u9020\u200b\u4e00\u4e2a\u4e2a\u200bfield\uff0c\u200b\u6700\u7ec8\u200b\u6784\u9020\u200b\u51fa\u200b\u4e00\u4e2a\u200b\u7ed3\u6784\u200b\u4f53\u200b\u3002<p></p> <ul> <li>pyo3\u200b\u5b9e\u73b0\u200bpython\u200b\u548c\u200brust\u200b\u8de8\u200b\u8bed\u8a00\u200b\u8c03\u7528\u200b</li> <li>\u200b\u4f7f\u7528\u200baya\u200b\u548c\u200bc\u200b\u6df7\u5408\u200b\u7f16\u5199\u200buprobe\u200b\u7a0b\u5e8f\u200b</li> <li>C++\u200b\u5f00\u53d1\u200b\u5e38\u89c1\u95ee\u9898\u200b\u4e4b\u200bABI\u200b\u517c\u5bb9\u6027\u95ee\u9898\u200b</li> <li>C++20\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u57fa\u4e8e\u200b\u5c5e\u6027\u200b\u6d4b\u8bd5\u200b\u7684\u200bquickcheck-cpp\u200b\u5e93\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> </ul>"},{"location":"blog/rust%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E5%86%99%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/","title":"rust\u200b\u5982\u4f55\u200b\u4f18\u96c5\u200b\u7684\u200b\u5199\u200b\u9519\u8bef\u5904\u7406","text":""},{"location":"blog/rust%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E5%86%99%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/#rust\u5982\u4f55\u4f18\u96c5\u7684\u5199\u9519\u8bef\u5904\u7406","title":"rust\u200b\u5982\u4f55\u200b\u4f18\u96c5\u200b\u7684\u200b\u5199\u200b\u9519\u8bef\u5904\u7406","text":"<p>\u200b\u5b9a\u4e49\u200berror.rs </p>Rust<pre><code>use derive_more::From;\n\npub type Result&lt;T&gt; = core::result::Result&lt;T, Error&gt;;\n\n#[derive(Debug, From)]\npub enum Error {\n\n    #[from]\n    ParamsErr(String),\n\n}\n\n// region:    --- Error Boilerplate\n\nimpl core::fmt::Display for Error {\n    fn fmt(&amp;self, fmt: &amp;mut core::fmt::Formatter) -&gt; core::result::Result&lt;(), core::fmt::Error&gt; {\n        write!(fmt, \"{self:?}\")\n    }\n}\n\nimpl std::error::Error for Error {}\n\n// endregion: --- Error Boilerplate\n</code></pre><p></p> <p>main.rs </p>Rust<pre><code>mod error;\nuse error::{Error, Result};\nfn main() -&gt; Result&lt;()&gt;{\n    Ok(())\n}\n</code></pre><p></p> <p>Cargo.toml </p>TOML<pre><code>[dependencies]\nderive_more = { version = \"1.0.0-beta\", features = [\"from\", \"display\"] }\n</code></pre><p></p>"},{"location":"blog/rust%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E5%86%99%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/#\u53c2\u8003","title":"\u53c2\u8003","text":"<ul> <li>rust-genai</li> <li>rust\u200b\u9519\u8bef\u5904\u7406\u200b\u6700\u4f73\u200b\u5b9e\u8df5\u200b</li> </ul> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>pyo3\u200b\u5b9e\u73b0\u200bpython\u200b\u548c\u200brust\u200b\u8de8\u200b\u8bed\u8a00\u200b\u8c03\u7528\u200b</li> <li>\u200b\u4f7f\u7528\u200baya\u200b\u548c\u200bc\u200b\u6df7\u5408\u200b\u7f16\u5199\u200buprobe\u200b\u7a0b\u5e8f\u200b</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>C++\u200b\u5e38\u89c1\u200b\u9677\u9631\u200b\uff1a\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b\u4e86\u89e3\u200bconst\u200b\u4f7f\u7528\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> </ul>"},{"location":"blog/rust%E4%BD%BF%E7%94%A8arc-new_cyclic-%E6%9E%84%E5%BB%BA%E8%87%AA%E8%BA%AB%E7%9A%84%E5%BC%B1%E5%BC%95%E7%94%A8%E6%8C%87%E9%92%88/","title":"rust\u200b\u4f7f\u7528\u200b\uff1aArc new_cyclic \u200b\u6784\u5efa\u200b\u81ea\u8eab\u200b\u7684\u200b\u5f31\u200b\u5f15\u7528\u200b\u6307\u9488","text":""},{"location":"blog/rust%E4%BD%BF%E7%94%A8arc-new_cyclic-%E6%9E%84%E5%BB%BA%E8%87%AA%E8%BA%AB%E7%9A%84%E5%BC%B1%E5%BC%95%E7%94%A8%E6%8C%87%E9%92%88/#arc-new_cyclic-\u6784\u5efa\u81ea\u8eab\u7684\u5f31\u5f15\u7528\u6307\u9488","title":"Arc new_cyclic \u200b\u6784\u5efa\u200b\u81ea\u8eab\u200b\u7684\u200b\u5f31\u200b\u5f15\u7528\u200b\u6307\u9488","text":"<p>\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b<code>Arc&lt;T&gt;</code>\uff0c\u200b\u540c\u65f6\u200b\u4e3a\u200b\u4f60\u200b\u63d0\u4f9b\u200b\u5bf9\u200b\u5206\u914d\u200b\u7684\u200b<code>Weak&lt;T&gt;</code>\uff0c\u200b\u4ee5\u4fbf\u200b\u4f60\u200b\u6784\u5efa\u200b\u4e00\u4e2a\u200b\u6301\u6709\u200b\u5bf9\u200b\u81ea\u8eab\u200b\u5f31\u200b\u6307\u9488\u200b\u7684\u200b<code>T</code>\u3002 \u200b\u901a\u5e38\u200b\uff0c\u200b\u76f4\u63a5\u200b\u6216\u200b\u95f4\u63a5\u200b\u5faa\u73af\u200b\u5f15\u7528\u200b\u81ea\u8eab\u200b\u7684\u200b\u7ed3\u6784\u200b\u4e0d\u200b\u5e94\u200b\u6301\u6709\u200b\u5bf9\u200b\u81ea\u8eab\u200b\u7684\u200b\u5f3a\u200b\u5f15\u7528\u200b\uff0c\u200b\u4ee5\u200b\u9632\u6b62\u200b\u5185\u5b58\u200b\u6cc4\u6f0f\u200b\u3002\u200b\u4f7f\u7528\u200b\u6b64\u200b\u51fd\u6570\u200b\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5728\u200b<code>T</code>\u200b\u521d\u59cb\u5316\u200b\u671f\u95f4\u200b\uff08\u200b\u5728\u200b<code>Arc&lt;T&gt;</code>\u200b\u521b\u5efa\u200b\u4e4b\u524d\u200b\uff09\u200b\u8bbf\u95ee\u200b\u5f31\u200b\u6307\u9488\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u514b\u9686\u200b\u5e76\u200b\u5c06\u200b\u5176\u200b\u5b58\u50a8\u200b\u5728\u200b<code>T</code>\u200b\u5185\u90e8\u200b\u3002</p> Rust<pre><code>use std::sync::{Arc, Weak};\n\nstruct Gadget {\n    me: Weak&lt;Gadget&gt;,\n}\n\nimpl Gadget {\n    /// Constructs a reference counted Gadget.\n    fn new() -&gt; Arc&lt;Self&gt; {\n        // `me` is a `Weak&lt;Gadget&gt;` pointing at the new allocation of the\n        // `Arc` we're constructing.\n        Arc::new_cyclic(|me| {\n            // Create the actual struct here.\n            Gadget { me: me.clone() }\n        })\n    }\n\n    /// Returns a reference counted pointer to Self.\n    fn me(&amp;self) -&gt; Arc&lt;Self&gt; {\n        self.me.upgrade().unwrap()\n    }\n}\n</code></pre> <p>\u200b\u770b\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b\uff0c\u200b\u518d\u200b\u6ce8\u518c\u200b\u5230\u200b\u4e00\u4e2a\u200bVec\u200b\u4e2d\u200b\u4fdd\u6301\u200b\u4e86\u200bSampler\u200b\u7684\u200bWeak\u200b\u5f15\u7528\u200b\uff0c\u200b\u800c\u200b\u8fd9\u4e2a\u200b\u5f15\u7528\u200b\u5c31\u200b\u901a\u8fc7\u200bArc new_cyclic \u200b\u6784\u5efa\u200b\u7684\u200b\u5f31\u200b\u5f15\u7528\u200b\u6307\u9488\u200b\u3002</p> <p>\u200b\u8be6\u7ec6\u200b\u4f7f\u7528\u200b\u53c2\u8003\u200bKenForever1/bvar-rust\u200b\u9879\u76ee\u200b\u4e2d\u200b\u7528\u6cd5\u200b\u3002</p> Rust<pre><code>use std::sync::{Arc, Weak, Mutex};\n\n// \u200b\u5168\u5c40\u200b\u6ce8\u518c\u200b\u4e2d\u5fc3\u200b\nlazy_static::lazy_static! {\n    static ref REGISTRY: Mutex&lt;Vec&lt;Weak&lt;dyn Sampler&gt;&gt;&gt; = Mutex::new(Vec::new());\n}\n\ntrait Sampler: Send + Sync {\n    fn sample(&amp;self);\n}\n\nstruct MySampler {\n    weak_self: Mutex&lt;Option&lt;Weak&lt;Self&gt;&gt;&gt;, // \u200b\u5b58\u50a8\u200b\u81ea\u8eab\u200b\u7684\u200b\u5f31\u200b\u5f15\u7528\u200b\n    data: u32,\n}\n\nimpl MySampler {\n    // \u200b\u5173\u952e\u200b\uff1a\u200b\u4f7f\u7528\u200b new_cyclic \u200b\u5728\u200b\u6784\u9020\u200b\u671f\u95f4\u200b\u83b7\u53d6\u200b\u5f31\u200b\u5f15\u7528\u200b\n    pub fn new(data: u32) -&gt; Arc&lt;Self&gt; {\n        Arc::new_cyclic(|weak| {\n            let this = Self {\n                weak_self: Mutex::new(Some(weak.clone())), // \u2705 \u200b\u6b63\u786e\u200b\u83b7\u53d6\u200b\u5f31\u200b\u5f15\u7528\u200b\n                data,\n            };\n            this.after_init();\n            this\n        })\n    }\n\n    // \u200b\u521d\u59cb\u5316\u200b\u540e\u200b\u64cd\u4f5c\u200b\n    fn after_init(&amp;self) {\n        let guard = self.weak_self.lock().unwrap();\n        let weak = guard.as_ref().unwrap().clone();\n        REGISTRY.lock().unwrap().push(weak); // \u200b\u5b89\u5168\u200b\u6ce8\u518c\u200b\n    }\n}\n\nimpl Sampler for MySampler {\n    fn sample(&amp;self) {\n        println!(\"Sampling data: {}\", self.data);\n    }\n}\n\n\nfn main () {\n    {\n        let sampler = MySampler::new(42);\n        let registry = REGISTRY.lock().unwrap();\n\n        assert_eq!(registry.len(), 1);\n        assert!((*registry)[0].upgrade().is_some()); // \u200b\u5f31\u200b\u5f15\u7528\u200b\u6709\u6548\u200b\n\n    }\n}\n</code></pre>"},{"location":"blog/rust%E4%BD%BF%E7%94%A8arc-new_cyclic-%E6%9E%84%E5%BB%BA%E8%87%AA%E8%BA%AB%E7%9A%84%E5%BC%B1%E5%BC%95%E7%94%A8%E6%8C%87%E9%92%88/#mutex-\u6210\u5458\u53d8\u91cf\u7684\u7ed3\u6784\u4f53\u5b9e\u73b0-clone","title":"Mutex \u200b\u6210\u5458\u200b\u53d8\u91cf\u200b\u7684\u200b\u7ed3\u6784\u200b\u4f53\u200b\u5b9e\u73b0\u200b Clone","text":"<p>Mutex \u200b\u672c\u8eab\u200b\u6ca1\u6709\u200b\u5b9e\u73b0\u200b Clone trait\uff0c\u200b\u81ea\u52a8\u200b\u6d3e\u751f\u200b\u8981\u6c42\u200b\u6240\u6709\u200b\u5b57\u6bb5\u200b\u90fd\u200b\u5b9e\u73b0\u200b Clone\u3002</p> Rust<pre><code>#[derive(Clone)] // \u274c \u200b\u4f1a\u200b\u7f16\u8bd1\u200b\u5931\u8d25\u200b\nstruct BadClone {\n    mutex_data: Mutex&lt;String&gt;\n}\n</code></pre> Rust<pre><code>use std::sync::{Arc, Mutex};\n\n/// Mutex \u200b\u6210\u5458\u200b\u53d8\u91cf\u200b\u7684\u200b\u7ed3\u6784\u200b\u4f53\u200b\u5b9e\u73b0\u200b Clone \n\n#[derive(Debug)]\nstruct ThreadSafeData {\n    counter: Mutex&lt;i32&gt;,      // \u200b\u88ab\u200b\u4e92\u65a5\u200b\u9501\u200b\u4fdd\u62a4\u200b\u7684\u200b\u8ba1\u6570\u5668\u200b\n    data: Mutex&lt;Vec&lt;String&gt;&gt;, // \u200b\u88ab\u200b\u4e92\u65a5\u200b\u9501\u200b\u4fdd\u62a4\u200b\u7684\u200b\u590d\u6742\u200b\u6570\u636e\u200b\n}\n\nimpl ThreadSafeData {\n    pub fn new(init_val: i32) -&gt; Self {\n        Self {\n            counter: Mutex::new(init_val),\n            data: Mutex::new(vec![\"default\".to_string()]),\n        }\n    }\n}\n\n// \u200b\u624b\u52a8\u200b\u5b9e\u73b0\u200b Clone\uff08\u200b\u65e0\u6cd5\u200b\u901a\u8fc7\u200b #[derive] \u200b\u81ea\u52a8\u200b\u5b9e\u73b0\u200b\uff09\nimpl Clone for ThreadSafeData {\n    fn clone(&amp;self) -&gt; Self {\n        // \u200b\u5b89\u5168\u200b\u83b7\u53d6\u200b\u9501\u200b\u5e76\u200b\u514b\u9686\u200b\u6570\u636e\u200b\n        let counter_val = *self.counter.lock().unwrap(); // \u200b\u89e3\u200b\u5f15\u7528\u200b\u83b7\u53d6\u200b i32\n        let data_clone = self.data.lock().unwrap().clone(); // \u200b\u514b\u9686\u200b Vec&lt;String&gt;\n\n        ThreadSafeData {\n            counter: Mutex::new(counter_val), // \u200b\u521b\u5efa\u200b\u65b0\u200b Mutex\n            data: Mutex::new(data_clone),     // \u200b\u521b\u5efa\u200b\u65b0\u200b Mutex\n        }\n    }\n}\n\n\nfn test_clone() {\n    let original = ThreadSafeData::new(5);\n    original.data.lock().unwrap().push(\"test\".to_string());\n\n    let cloned = original.clone();\n\n    // \u200b\u9a8c\u8bc1\u200b\u8ba1\u6570\u5668\u200b\u514b\u9686\u200b\n    assert_eq!(*cloned.counter.lock().unwrap(), 5);\n\n    // \u200b\u4fee\u6539\u200b\u539f\u200b\u6570\u636e\u200b\u9a8c\u8bc1\u200b\u72ec\u7acb\u6027\u200b\n    *original.counter.lock().unwrap() += 1;\n    original.data.lock().unwrap().push(\"modified\".to_string());\n\n    // \u200b\u9a8c\u8bc1\u200b\u514b\u9686\u200b\u4f53\u200b\u6570\u636e\u200b\u72ec\u7acb\u200b\n    assert_eq!(*cloned.counter.lock().unwrap(), 5); // \u200b\u539f\u503c\u200b\u4fdd\u6301\u200b\n    assert_eq!(cloned.data.lock().unwrap().len(), 2); // \u200b\u539f\u59cb\u200b\u514b\u9686\u200b\u65f6\u200b\u7684\u200b\u6570\u636e\u200b\n}\n</code></pre>"},{"location":"blog/rust%E4%BD%BF%E7%94%A8arc-new_cyclic-%E6%9E%84%E5%BB%BA%E8%87%AA%E8%BA%AB%E7%9A%84%E5%BC%B1%E5%BC%95%E7%94%A8%E6%8C%87%E9%92%88/#arc\u548cmutex\u5b9e\u73b0\u7ebf\u7a0b\u5171\u4eab","title":"Arc\u200b\u548c\u200bMutex\u200b\u5b9e\u73b0\u200b\u7ebf\u7a0b\u200b\u5171\u4eab\u200b\ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350","text":"<p>\u200b\u5f53\u200b\u9700\u8981\u200b\u8de8\u200b\u7ebf\u7a0b\u200b\u5171\u4eab\u200b\u514b\u9686\u200b\u4f53\u65f6\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u7ed3\u5408\u200b Arc \u200b\u4f7f\u7528\u200b</p> Rust<pre><code>#[derive(Clone)]\nstruct ArcData {\n    shared: Arc&lt;Mutex&lt;Vec&lt;u8&gt;&gt;&gt;, // Arc \u200b\u53ef\u200b\u514b\u9686\u200b\n}\n\nimpl ArcData {\n    // \u200b\u514b\u9686\u200b\u65f6\u200b\u5171\u4eab\u200b\u540c\u4e00\u4e2a\u200b Mutex\n    pub fn new() -&gt; Self {\n        Self {\n            shared: Arc::new(Mutex::new(vec![])),\n        }\n    }\n}\n\nfn test_share(){\n    // \u200b\u6b64\u65f6\u200b\u514b\u9686\u200b\u4f53\u4f1a\u200b\u5171\u4eab\u200b\u540c\u4e00\u4e2a\u200b Mutex\n    let a = ArcData::new();\n    let b = a.clone();\n    a.shared.lock().unwrap().push(1);\n    assert_eq!(b.shared.lock().unwrap().len(), 1); // \u200b\u5171\u4eab\u200b\u4fee\u6539\u200b\n}\n</code></pre> <ul> <li>pyo3\u200b\u5b9e\u73b0\u200bpython\u200b\u548c\u200brust\u200b\u8de8\u200b\u8bed\u8a00\u200b\u8c03\u7528\u200b</li> <li>\u200b\u4f7f\u7528\u200baya\u200b\u548c\u200bc\u200b\u6df7\u5408\u200b\u7f16\u5199\u200buprobe\u200b\u7a0b\u5e8f\u200b</li> <li>C++\u200b\u5e38\u89c1\u200b\u9519\u8bef\u200b\uff1a\u200b\u7aa5\u63a2\u200bstd::Sort\u200b\u7684\u200bcmp\u200b\u51fd\u6570\u200b\u7528\u9519\u200b\uff0c\u200b\u5bfc\u81f4\u200b\u7684\u200b\u7a0b\u5e8f\u200babort\u200b\u5206\u6790\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> </ul>"},{"location":"blog/sglang%E6%8A%95%E6%9C%BA%E6%8E%A8%E7%90%86%E5%AE%9E%E7%8E%B0/","title":"sglang\u200b\u6295\u673a\u200b\u63a8\u7406\u200b\u5b9e\u73b0","text":"<p>\u200b\u9605\u8bfb\u200bsglang/pull/3582\u3002</p>"},{"location":"blog/sglang%E6%8A%95%E6%9C%BA%E6%8E%A8%E7%90%86%E5%AE%9E%E7%8E%B0/#deepseek_nextnpy","title":"deepseek_nextn.py","text":"<p>\u200b\u5b9e\u73b0\u200bDeepSeek NextN\u200b\u63a8\u6d4b\u200b\u89e3\u7801\u200b\u3002 \u200b\u901a\u8fc7\u200bforward_batch.spec_info.hidden_states\u200b\u83b7\u53d6\u200b\u63a8\u6d4b\u200b\u89e3\u7801\u200b\u7684\u200b\u9690\u85cf\u200b\u72b6\u6001\u200b \u200b\u4f7f\u7528\u200beh_proj\u200b\u5408\u5e76\u200b\u5f53\u524d\u200b\u548c\u200b\u63a8\u6d4b\u200b\u7684\u200b\u9690\u85cf\u200b\u72b6\u6001\u200b \u200b\u652f\u6301\u200b\u5206\u5e03\u5f0f\u200b\u5e76\u884c\u8ba1\u7b97\u200b(\u200b\u901a\u8fc7\u200benable_dp_attention\u200b\u6807\u5fd7\u200b)</p> <p></p>Python<pre><code># hidden_states: \u200b\u5f53\u524d\u200b\u6a21\u578b\u200b\u7684\u200b\u5d4c\u5165\u200b\u8f93\u51fa\u200b\n# forward_batch.spec_info.hidden_states: \u200b\u6765\u81ea\u200b\u63a8\u6d4b\u200b\u6a21\u578b\u200b(draft model)\u200b\u7684\u200b\u9690\u85cf\u200b\u72b6\u6001\u200b\nhidden_states = self.eh_proj(\n    torch.cat(\n        (\n            self.enorm(hidden_states),  # \u200b\u5f53\u524d\u200b\u6a21\u578b\u200b\u5f52\u4e00\u5316\u200b\u8f93\u51fa\u200b\n            self.hnorm(forward_batch.spec_info.hidden_states)  # \u200b\u63a8\u6d4b\u200b\u6a21\u578b\u200b\u5f52\u4e00\u5316\u200b\u8f93\u51fa\u200b\n        ),\n        dim=-1  # \u200b\u5728\u200b\u7279\u5f81\u200b\u7ef4\u5ea6\u200b\u62fc\u63a5\u200b\n    )\n)\n</code></pre> \u200b\u901a\u8fc7\u200b\u5408\u5e76\u200b\u4e24\u4e2a\u200b\u6a21\u578b\u200b\u7684\u200b\u9690\u85cf\u200b\u72b6\u6001\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u540c\u65f6\u200b\u5229\u7528\u200b\uff1a \u200b\u5f53\u524d\u200b\u6a21\u578b\u200b\u7684\u200b\u7cbe\u786e\u200b\u8868\u793a\u200b\u80fd\u529b\u200b \u200b\u63a8\u6d4b\u200b\u6a21\u578b\u200b\u7684\u200b\u5feb\u901f\u200b\u751f\u6210\u200b\u80fd\u529b\u200b<p></p>"},{"location":"blog/sglang%E6%8A%95%E6%9C%BA%E6%8E%A8%E7%90%86%E5%AE%9E%E7%8E%B0/#deepseek_v2py","title":"deepseek_v2.py","text":""},{"location":"blog/sglang%E6%8A%95%E6%9C%BA%E6%8E%A8%E7%90%86%E5%AE%9E%E7%8E%B0/#deepseekv2moe-\u6df7\u5408\u4e13\u5bb6\u5c42","title":"DeepseekV2MoE (\u200b\u6df7\u5408\u200b\u4e13\u5bb6\u200b\u5c42\u200b)","text":"<p>\u200b\u5b9e\u73b0\u200b\u7a00\u758f\u200b\u6fc0\u6d3b\u200b\u7684\u200b\u6df7\u5408\u200b\u4e13\u5bb6\u7cfb\u7edf\u200b\uff0c\u200b\u6838\u5fc3\u200b\u529f\u80fd\u200b\uff1a\u200b\u52a8\u6001\u200b\u8def\u7531\u200b\u673a\u5236\u200b\u3001\u200b\u4e13\u5bb6\u200b\u5e76\u884c\u8ba1\u7b97\u200b\u3001\u200b\u652f\u6301\u200b\u5171\u4eab\u200b\u4e13\u5bb6\u200b\u3002 \u200b\u8def\u7531\u200b\u673a\u5236\u200b\uff1a \u200b\u4f7f\u7528\u200b\u95e8\u63a7\u200b\u7f51\u7edc\u200b(MoEGate)\u200b\u8ba1\u7b97\u200b\u6bcf\u4e2a\u200btoken\u200b\u7684\u200b\u8def\u7531\u200blogits \u200b\u652f\u6301\u200b\u5206\u7ec4\u200bTopK\u200b\u9009\u62e9\u200b\u4e13\u5bb6\u200b(use_grouped_topk) \u200b\u53ef\u9009\u200b\u7684\u200b\u4e13\u5bb6\u200b\u5206\u6570\u200b\u6821\u6b63\u200b(correction_bias) \u200b\u5de5\u4f5c\u200b\u6d41\u7a0b\u200b\uff1a \u200b\u8ba1\u7b97\u200b\u8def\u7531\u200blogits \u200b\u9009\u62e9\u200btop-k\u200b\u4e13\u5bb6\u200b \u200b\u5206\u53d1\u200btokens\u200b\u5230\u200b\u5bf9\u5e94\u200b\u4e13\u5bb6\u200b \u200b\u5e76\u884c\u6267\u884c\u200b\u4e13\u5bb6\u200b\u8ba1\u7b97\u200b \u200b\u805a\u5408\u200b\u4e13\u5bb6\u200b\u8f93\u51fa\u200b</p> <p>DeepseekV2MoE \u200b\u4e2d\u200b\u7684\u200b use_grouped_topk \u200b\u662f\u200b\u4e00\u79cd\u200b\u9ad8\u6548\u200b\u7684\u200b\u5206\u7ec4\u200b\u4e13\u5bb6\u200b\u9009\u62e9\u200b\u673a\u5236\u200b\uff0c\u200b\u5176\u200b\u5de5\u4f5c\u200b\u539f\u7406\u200b\u5982\u4e0b\u200b\uff1a \u200b\u5206\u7ec4\u200b\u7b56\u7565\u200b\uff1a \u200b\u5c06\u200b\u4e13\u5bb6\u200b\u5212\u5206\u200b\u4e3a\u200b num_expert_group \u200b\u4e2a\u7ec4\u200b \u200b\u6bcf\u4e2a\u200b\u7ec4\u200b\u5305\u542b\u200b num_experts/num_expert_group \u200b\u4e2a\u200b\u4e13\u5bb6\u200b </p>Python<pre><code>scores.view(num_token, num_expert_group, -1)  # \u200b\u5c06\u200b\u4e13\u5bb6\u200b\u5206\u6570\u200b\u6309\u7ec4\u200b\u5212\u5206\u200b\n</code></pre> \u200b\u4e24\u200b\u9636\u6bb5\u200b\u9009\u62e9\u200b\uff1a \u200b\u7ec4\u7ea7\u200b\u9009\u62e9\u200b\uff1a Python<pre><code>group_scores = scores.view(...).max(dim=-1).values  # \u200b\u53d6\u200b\u6bcf\u7ec4\u200b\u6700\u9ad8\u5206\u200b\ngroup_idx = torch.topk(group_scores, k=topk_group)  # \u200b\u9009\u62e9\u200btopk_group\u200b\u4e2a\u200b\u6700\u4f18\u200b\u7ec4\u200b\n</code></pre> \u200b\u7ec4\u5185\u200b\u9009\u62e9\u200b\uff1a Python<pre><code>tmp_scores = scores.masked_fill(~score_mask.bool(), 0.0)  # \u200b\u5c4f\u853d\u200b\u672a\u200b\u9009\u4e2d\u200b\u7ec4\u200b\u7684\u200b\u4e13\u5bb6\u200b\ntopk_weights, topk_ids = torch.topk(tmp_scores, k=topk)  # \u200b\u5728\u200b\u9009\u4e2d\u200b\u7ec4\u5185\u9009\u200btopk\u200b\u4e13\u5bb6\u200b\n</code></pre> topk_idx \u200b\u4f5c\u7528\u200b\uff1a\u200b\u5728\u200bMoE\u200b\u5c42\u4e2d\u200b\u6807\u8bc6\u200b\u88ab\u200b\u9009\u4e2d\u200b\u7684\u200b\u4e13\u5bb6\u200b\u7d22\u5f15\u200b\uff0c\u200b\u901a\u8fc7\u200b\u8def\u7531\u200b\u7b97\u6cd5\u200b\u751f\u6210\u200b\uff1atopk_weights, topk_idx = select_experts(\u2026)\uff0c\u200b\u7528\u4e8e\u200b\u540e\u7eed\u200b\u7684\u200b\u4e13\u5bb6\u200b\u5e76\u884c\u8ba1\u7b97\u200b\u548c\u200b\u6570\u636e\u200b\u5206\u53d1\u200b<p></p>"},{"location":"blog/sglang%E6%8A%95%E6%9C%BA%E6%8E%A8%E7%90%86%E5%AE%9E%E7%8E%B0/#deepseekv2decoderlayer-\u89e3\u7801\u5668\u5c42\u7684\u5b9e\u73b0","title":"DeepseekV2DecoderLayer (\u200b\u89e3\u7801\u5668\u200b\u5c42\u200b)\u200b\u7684\u200b\u5b9e\u73b0","text":"Python<pre><code>class DeepseekV2DecoderLayer(nn.Module):\n    def __init__(self, config, layer_id, quant_config=None, is_nextn=False):\n        self.self_attn = DeepseekV2AttentionMLA(...)  # \u200b\u591a\u5934\u200b\u6ce8\u610f\u529b\u200b\n        self.mlp = DeepseekV2MoE(...) if config.n_routed_experts else DeepseekV2MLP(...)\n        self.input_layernorm = RMSNorm(...)\n        self.post_attention_layernorm = RMSNorm(...)\n</code></pre> \u200b\u8f93\u5165\u200b\u5f52\u4e00\u5316\u200b \u2192 \u200b\u81ea\u200b\u6ce8\u610f\u529b\u200b \u2192 \u200b\u6b8b\u5dee\u200b\u8fde\u63a5\u200b \u200b\u4e2d\u95f4\u200b\u5f52\u4e00\u5316\u200b \u2192 MoE/MLP \u2192 \u200b\u6b8b\u5dee\u200b\u8fde\u63a5"},{"location":"blog/sglang%E6%8A%95%E6%9C%BA%E6%8E%A8%E7%90%86%E5%AE%9E%E7%8E%B0/#export_deepseek_nextnpy","title":"export_deepseek_nextn.py","text":"<p>\u200b\u7528\u4e8e\u200b\u4ece\u200b DeepSeek-V3/R1 \u200b\u6a21\u578b\u200b\u4e2d\u200b\u5bfc\u51fa\u200b NextN \u200b\u5c42\u200b\u7684\u200b\u5de5\u5177\u200b\uff0c\u200b\u4e3b\u8981\u200b\u7528\u4e8e\u200b\u652f\u6301\u200b\u63a8\u6d4b\u200b\u89e3\u7801\u200b(Speculative Decoding)\u3002\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u6838\u5fc3\u200b\u529f\u80fd\u200b\u89e3\u6790\u200b\uff1a</p> <p>\u200b\u4e3b\u8981\u200b\u4f5c\u7528\u200b\uff1a \u200b\u4ece\u200b\u5b8c\u6574\u200b\u6a21\u578b\u200b\u4e2d\u200b\u63d0\u53d6\u200b NextN \u200b\u9884\u6d4b\u200b\u5c42\u200b\uff08\u200b\u7528\u4e8e\u200b\u63a8\u6d4b\u200b\u89e3\u7801\u200b\u7684\u200b\u8349\u7a3f\u200b\u6a21\u578b\u200b\uff09</p> <p>\u200b\u751f\u6210\u200b\u72ec\u7acb\u200b\u7684\u200b\u8f7b\u91cf\u7ea7\u200b\u6a21\u578b\u200b\u6587\u4ef6\u200b</p> <p>\u200b\u4fee\u6539\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u9002\u914d\u200b\u5355\u5c42\u200b\u7ed3\u6784\u200b</p> Text Only<pre><code>1. \u200b\u5b9a\u4f4d\u200bNextN\u200b\u5c42\u200b\u4f4d\u7f6e\u200b (get_nextn_layer_id)\n2. \u200b\u590d\u5236\u200b\u975e\u200b\u53c2\u6570\u200b\u6587\u4ef6\u200b (copy_non_safetensors_files)\n3. \u200b\u66f4\u65b0\u200b\u914d\u7f6e\u6587\u4ef6\u200b (update_and_save_config)\n4. \u200b\u63d0\u53d6\u200b\u6307\u5b9a\u200b\u5c42\u200b\u53c2\u6570\u200b (export_nextn_layer_parameters)\n</code></pre> <p>\u200b\u53c2\u6570\u200b\u5904\u7406\u200b\u903b\u8f91\u200b\uff1a \u200b\u7b5b\u9009\u200b\u539f\u59cb\u200b\u6a21\u578b\u200b\u4e2d\u200b model.layers.{nextn_layer_id} \u200b\u5f00\u5934\u200b\u7684\u200b\u53c2\u6570\u200b \u200b\u91cd\u547d\u540d\u200b\u4e3a\u200b model.layers.0 \u200b\u4ee5\u200b\u9002\u5e94\u200b\u5355\u5c42\u200b\u7ed3\u6784\u200b \u200b\u6392\u9664\u200b embedding \u200b\u548c\u200b head \u200b\u5c42\u200b\u53c2\u6570\u200b</p>"},{"location":"blog/sglang%E6%8A%95%E6%9C%BA%E6%8E%A8%E7%90%86%E5%AE%9E%E7%8E%B0/#speculative","title":"speculative","text":"<p>DeepSeek\u200b\u7684\u200b\u63a8\u6d4b\u200b\u89e3\u7801\u200b(Speculative Decoding)\u200b\u7cfb\u7edf\u200b\u91c7\u7528\u200b\u6a21\u5757\u5316\u200b\u8bbe\u8ba1\u200b\uff0c\u200b\u4e3b\u8981\u200b\u7ec4\u4ef6\u200b\u5982\u4e0b\u200b\uff1a </p><pre><code>graph TD\n    A[EagleWorker] --&gt; B[EagleUtils]\n    A --&gt; C[BuildEagleTree]\n    A --&gt; D[CudaGraphRunner]\n    D --&gt; E[DraftRunner]\n    D --&gt; F[ExtendRunner]</code></pre><p></p> <p>spec_info.py \u200b\u5b9a\u4e49\u200b\u679a\u4e3e\u200b\u7c7b\u578b\u200bSpeculativeAlgorithm \u200b\u652f\u6301\u200bEAGLE/EAGLE3\u200b\u4e24\u79cd\u200b\u52a0\u901f\u200b\u7b97\u6cd5\u200b \u200b\u63d0\u4f9b\u200b\u7c7b\u578b\u200b\u68c0\u67e5\u200b\u65b9\u6cd5\u200b(is_eagle/is_eagle3)</p> <p>eagle_worker.py (\u200b\u4e3b\u63a7\u200b\u6a21\u5757\u200b) \u200b\u7ba1\u7406\u200b\u8349\u7a3f\u200b\u6a21\u578b\u200b\u548c\u200b\u76ee\u6807\u200b\u6a21\u578b\u200b\u7684\u200b\u534f\u540c\u200b\u6267\u884c\u200b \u200b\u5b9e\u73b0\u200b\u63a8\u6d4b\u200b\u89e3\u7801\u200b\u7684\u200b\u72b6\u6001\u673a\u200b\u8f6c\u6362\u200b \u200b\u5904\u7406\u200btoken\u200b\u9a8c\u8bc1\u200b\u548c\u200b\u56de\u9000\u200b\u903b\u8f91\u200b</p> <p>cuda_graph_runner.py \u200b\u4f7f\u7528\u200bCUDA Graph\u200b\u4f18\u5316\u200b\u8ba1\u7b97\u200b\u6d41\u7a0b\u200b \u200b\u5305\u542b\u200b\u4e24\u4e2a\u200b\u5b50\u200b\u8fd0\u884c\u200b\u5668\u200b\uff1a DraftRunner: \u200b\u5feb\u901f\u200b\u751f\u6210\u200b\u5019\u9009\u200b\u5e8f\u5217\u200b ExtendRunner: \u200b\u7cbe\u786e\u200b\u9a8c\u8bc1\u200b\u5019\u9009\u200b</p> <p>\u200b\u5de5\u4f5c\u200b\u6d41\u7a0b\u200b\uff1a \u200b\u6784\u5efa\u200b\u9636\u6bb5\u200b\uff1a\u200b\u901a\u8fc7\u200bbuild_eagle_tree.py\u200b\u9884\u5904\u7406\u200b\u6a21\u578b\u200b \u200b\u8349\u7a3f\u200b\u9636\u6bb5\u200b\uff1a\u200b\u7528\u200b\u8f7b\u91cf\u7ea7\u200b\u6a21\u578b\u200b\u751f\u6210\u200bN\u200b\u4e2a\u200b\u5019\u9009\u200btoken \u200b\u9a8c\u8bc1\u200b\u9636\u6bb5\u200b\uff1a\u200b\u7528\u539f\u200b\u6a21\u578b\u200b\u5e76\u884c\u200b\u9a8c\u8bc1\u200b\u6240\u6709\u200b\u5019\u9009\u200b \u200b\u63a5\u53d7\u200b\u9636\u6bb5\u200b\uff1a\u200b\u786e\u5b9a\u200b\u6700\u957f\u200b\u6709\u6548\u200b\u524d\u7f00\u200b</p> <p>\u200b\u6027\u80fd\u200b\u4f18\u5316\u200b \u200b\u4f7f\u7528\u200bCUDA Graph\u200b\u51cf\u5c11\u200b\u5185\u6838\u200b\u542f\u52a8\u200b\u5f00\u9500\u200b \u200b\u6811\u72b6\u200b\u9a8c\u8bc1\u200b\u7ed3\u6784\u200b(EAGLE3)\u200b\u63d0\u5347\u200b\u541e\u5410\u91cf\u200b \u200b\u52a8\u6001\u200b\u6279\u5904\u7406\u200b\u7ba1\u7406\u200b</p>"},{"location":"blog/sglang%E6%8A%95%E6%9C%BA%E6%8E%A8%E7%90%86%E5%AE%9E%E7%8E%B0/#gpu\u6267\u884c\u7b97\u5b50\u95f4\u9699\u4f18\u5316\u601d\u8def","title":"GPU\u200b\u6267\u884c\u200b\u7b97\u5b50\u200b\u95f4\u9699\u200b\u4f18\u5316\u200b\u601d\u8def","text":"<p>\u2022 \u200b\u6838\u5fc3\u200b\u89e3\u51b3\u95ee\u9898\u200b\uff1a\u200b\u5982\u4f55\u200b\u505a\u5230\u200bGPU\u200b\u4e0d\u200b\u505c\u6b47\u200b\uff0c\u200b\u4e00\u76f4\u200b\u8fd0\u884c\u200b \u2022 \u200b\u89e3\u6c7a\u200b\u65b9\u6848\u200b\uff1a\u200b\u6838\u5fc3\u200b\u505a\u5230\u200bCPU\u200b\u5361\u200bGPU\u200b\u5f02\u6b65\u200b\u5316\u200b\uff08cuda-graph\uff0c\u200b\u53bb\u9664\u200b\u540c\u6b65\u200b\u903b\u8f91\u200bmask\uff0c\u200b\u7b97\u5b50\u200b\u878d\u5408\u200b\uff0c\u200b\u5f02\u6b65\u200b\u5316\u200b\u8c03\u5ea6\u200b\u2026.\uff09</p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>LLM\u200b\u63a8\u7406\u200b\uff1a\u200b\u91c7\u7528\u200b\u6295\u673a\u200b\u91c7\u6837\u200b\u52a0\u901f\u200b\u63a8\u7406\u200b[\u200b\u8bd1\u200b]</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/sglang%E6%8E%A8%E7%90%86%E4%BD%BF%E7%94%A8%E4%B9%8B%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","title":"sglang\u200b\u63a8\u7406\u200b\u4f7f\u7528\u200b\u4e4b\u200b\u73af\u5883\u200b\u914d\u7f6e","text":"<p>\u200b\u672c\u6587\u200b\u8bb0\u5f55\u200b\u4e86\u200bsglang\u200b\u63a8\u7406\u200b\u4f7f\u7528\u200b\u4e4b\u200b\u73af\u5883\u200b\u914d\u7f6e\u200b\u3002</p>"},{"location":"blog/sglang%E6%8E%A8%E7%90%86%E4%BD%BF%E7%94%A8%E4%B9%8B%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#docker\u73af\u5883","title":"Docker\u200b\u73af\u5883","text":"<p>https://docs.sglang.ai/backend/send_request.html</p> <p>\u200b\u955c\u50cf\u200b\u7f51\u7ad9\u200b\uff1ahttps://docker.aityp.com/i/search?search=nvidia%2Fcuda</p> Text Only<pre><code>docker run --gpus all \\\n    --privileged=true --network=host --workdir=/workspace  \\\n    -v /ssd3/swift/:/workspace --name sglang-dev-test \\\n    --shm-size 32g \\\n    --ipc=host \\\n    -it \\\n    swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/lmsysorg/sglang /bin/bash\n\ndocker run --gpus all \\\n    --privileged=true --network=host --workdir=/workspace  \\\n    -v /ssd3/swift/:/workspace --name cuda-dev-test \\\n    --shm-size 32g \\\n    --ipc=host \\\n    -it swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/nvidia/cuda:12.2.2-devel-ubuntu22.04 /bin/bash\n</code></pre> Text Only<pre><code>python3 -m sglang.launch_server --model-path /workspace/models--OpenGVLab--InternVL2-8B/snapshots/c527cd3717f4bb8339002b342bc9476ec0485004 --trust-remote-code --served-model-name OpenGVLab--InternVL2-8B\n\npython3 -m sglang.launch_server --model-path /workspace/models--Qwen--Qwen2-VL-2B-Instruct/snapshots/aca78372505e6cb469c4fa6a35c60265b00ff5a4 --trust-remote-code --served-model-name Qwen--Qwen2-VL-2B\n</code></pre>"},{"location":"blog/sglang%E6%8E%A8%E7%90%86%E4%BD%BF%E7%94%A8%E4%B9%8B%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#\u8c03\u8bd5","title":"\u8c03\u8bd5","text":"<p>sglang\u200b\u662f\u200b\u591a\u200b\u8fdb\u7a0b\u200b\u7684\u200b\uff0c\u200b\u4e0d\u80fd\u200b\u76f4\u63a5\u200b\u7528\u200bpdb.set_trace()\u200b\u8c03\u8bd5\u200b\uff0chttps://github.com/sgl-project/sglang/discussions/2480\u3002</p>"},{"location":"blog/sglang%E6%8E%A8%E7%90%86%E4%BD%BF%E7%94%A8%E4%B9%8B%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#\u63a8\u7406\u62a5\u9519","title":"\u63a8\u7406\u200b\u62a5\u9519","text":"<p>\u200b\u63a8\u7406\u200bintervl\u200b\u62a5\u9519\u200b\uff1a </p>Text Only<pre><code>[2025-03-18 03:29:57 TP0] Traceback (most recent call last):\n  File \"/sgl-workspace/sglang/python/sglang/srt/managers/scheduler.py\", line 1134, in run_scheduler_process\n    scheduler = Scheduler(server_args, port_args, gpu_id, tp_rank, dp_rank)\n  File \"/sgl-workspace/sglang/python/sglang/srt/managers/scheduler.py\", line 123, in __init__\n    self.model_config = ModelConfig(\n  File \"/sgl-workspace/sglang/python/sglang/srt/configs/model_config.py\", line 82, in __init__\n    self.hf_text_config.hidden_size // self.hf_text_config.num_attention_heads,\n  File \"/usr/local/lib/python3.10/dist-packages/transformers/configuration_utils.py\", line 205, in __getattribute__\n    return super().__getattribute__(key)\nAttributeError: 'InternVLChatConfig' object has no attribute 'hidden_size'\n\nKilled\n</code></pre><p></p> <p>internvl2\u200b\u6682\u200b\u4e0d\u200b\u652f\u6301\u200b\u3002\u200b\u4ece\u200bModelConfig\u200b\u7c7b\u200b\u6765\u770b\u200b\uff0c\u200b\u4e0d\u80fd\u200b\u6b63\u786e\u5904\u7406\u200binternvl2\u200b\u7684\u200b\u53c2\u6570\u200b\u3002 https://github.com/sgl-project/sglang/issues/1042</p> Text Only<pre><code>sglang                            0.3.4.post2          /sgl-workspace/sglang/python\n</code></pre>"},{"location":"blog/sglang%E6%8E%A8%E7%90%86%E4%BD%BF%E7%94%A8%E4%B9%8B%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#\u5982\u4f55\u5347\u7ea7\u5230\u6700\u65b0\u7248","title":"\u5982\u4f55\u200b\u5347\u7ea7\u200b\u5230\u200b\u6700\u65b0\u7248\u200b\ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350","text":"Text Only<pre><code>python3 -m pip install sglang==0.4.4 -i https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple\npython3 -m pip install sgl-kernel -i https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple\n#\u200b\u67e5\u770b\u200btorch\u200b\u7248\u672c\u200b\npython3 -m pip list | grep torch\n#https://github.com/flashinfer-ai/flashinfer/issues/794\npip install flashinfer-python -i https://flashinfer.ai/whl/cu121/torch2.4/ \n</code></pre> <ul> <li>tritonserver-multibatch\u200b\u6e90\u7801\u200b\u5206\u6790\u200b</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> <li>\u200b\u4ece\u200bDeepseek\u200b\u5f00\u6e90\u200b\u5e93\u200b3FS\u200b\u4e2d\u200b\u5b66\u4e60\u200bfuse\u200b\u7684\u200b\u4f7f\u7528\u200b-\u200b\u5982\u4f55\u200b\u5f00\u53d1\u200b\u4e00\u4e2a\u200b\u6587\u4ef6\u7cfb\u7edf\u200b\uff08\u200b\u4e00\u200b\uff09</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> </ul>"},{"location":"blog/sherpa-onnx%E5%BA%93tts%E8%AF%AD%E8%A8%80%E5%90%88%E6%88%90%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E8%BF%87%E7%A8%8B/","title":"sherpa-onnx\u200b\u5e93\u200bTTS\u200b\u8bed\u8a00\u200b\u5408\u6210\u200b\u6a21\u578b\u200b\u63a8\u7406\u200b\u8fc7\u7a0b","text":""},{"location":"blog/sherpa-onnx%E5%BA%93tts%E8%AF%AD%E8%A8%80%E5%90%88%E6%88%90%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E8%BF%87%E7%A8%8B/#\u4e24\u79cd\u6a21\u578b\u67b6\u6784\u7684\u533a\u522b","title":"\u4e24\u79cd\u200b\u6a21\u578b\u200b\u67b6\u6784\u200b\u7684\u200b\u533a\u522b","text":"<p>\u200b\u4ece\u200b\u6a21\u578b\u200b\u63a8\u7406\u200b\u7684\u200b\u89d2\u5ea6\u770b\u200b\uff0cvits\u200b\u5bf9\u5e94\u200b\u4e86\u200b\u4e00\u4e2a\u200bonnx\u200b\u6587\u4ef6\u200b\uff0c\u200b\u6587\u5b57\u200b\u76f4\u63a5\u200b\u8f93\u51fa\u200b\u97f3\u9891\u200b\uff1b\u200b\u800c\u200bmatcha-tts\u200b\u6a21\u578b\u200b\u6709\u200b\u4e24\u4e2a\u200bonnx\u200b\u6587\u4ef6\u200b\uff0c\u200b\u5148\u200b\u5c06\u200b\u6587\u5b57\u200b\u8f6c\u6362\u200b\u6885\u5c14\u200b\u9891\u8c31\u200b\uff0c\u200b\u7136\u540e\u200b\u91c7\u7528\u200b\u58f0\u200b\u7801\u5668\u200b\uff08\u200b\u6bd4\u5982\u200bhifigan\uff09\u200b\u751f\u6210\u200b\u97f3\u9891\u200b\u3002</p> Text Only<pre><code>\u200b\u5f15\u7528\u200b\u81ea\u200bdeepseek\n\nMatcha-TTS\u200b\u4e0e\u200bVITS\u200b\u4f5c\u4e3a\u200b\u4e24\u79cd\u200b\u4e3b\u6d41\u200b\u7684\u200b\u8bed\u97f3\u200b\u5408\u6210\u200b\uff08TTS\uff09\u200b\u6a21\u578b\u200b\uff0c\u200b\u5728\u200b\u67b6\u6784\u8bbe\u8ba1\u200b\u548c\u200b\u6027\u80fd\u200b\u8868\u73b0\u200b\u4e0a\u200b\u5b58\u5728\u200b\u663e\u8457\u200b\u5dee\u5f02\u200b\uff0c\u200b\u5177\u4f53\u200b\u5bf9\u6bd4\u200b\u5982\u4e0b\u200b\uff1a\n\n\u200b\u4e00\u200b\u3001\u200b\u67b6\u6784\u8bbe\u8ba1\u200b\n\nMatcha-TTS\u200c\n\n\u200b\u57fa\u4e8e\u200b\u7f16\u7801\u5668\u200b-\u200b\u89e3\u7801\u5668\u200b\u7ed3\u6784\u200b\uff0c\u200b\u91c7\u7528\u200b\u200c\u200b\u6761\u4ef6\u200b\u6d41\u200b\u5339\u914d\u200b\uff08OT-CFM\uff09\u200c\u200b\u8fdb\u884c\u200b\u8bad\u7ec3\u200b\uff0c\u200b\u901a\u8fc7\u200b\u6700\u4f18\u200b\u4f20\u8f93\u200b\u7406\u8bba\u200b\u4f18\u5316\u200b\u6570\u636e\u200b\u8f6c\u6362\u200b\u8fc7\u7a0b\u200b\u3002\n\u200b\u89e3\u7801\u5668\u200b\u57fa\u4e8e\u200b\u5e38\u200b\u5fae\u5206\u65b9\u7a0b\u200b\uff08ODE\uff09\u200b\u6784\u5efa\u200b\uff0c\u200b\u652f\u6301\u200b\u66f4\u5c11\u200b\u7684\u200b\u5408\u6210\u200b\u6b65\u9aa4\u200b\u751f\u6210\u200b\u9ad8\u8d28\u91cf\u200b\u8bed\u97f3\u200b\u3002\n\u200b\u975e\u81ea\u200b\u56de\u5f52\u200b\u8bbe\u8ba1\u200b\u200c\uff0c\u200b\u65e0\u9700\u200b\u4f9d\u8d56\u200b\u5916\u90e8\u200b\u5bf9\u9f50\u200b\u673a\u5236\u200b\uff0c\u200b\u76f4\u63a5\u200b\u5b66\u4e60\u200b\u6587\u672c\u200b\u5230\u200b\u8bed\u97f3\u200b\u7684\u200b\u6620\u5c04\u200b\u3002\n\nVITS\u200c\n\n\u200b\u5b8c\u5168\u200b\u7aef\u5230\u200b\u7aef\u200b\u6a21\u578b\u200b\uff0c\u200b\u76f4\u63a5\u200b\u5c06\u200b\u6587\u672c\u200b\u6620\u5c04\u200b\u4e3a\u200b\u8bed\u97f3\u200b\u6ce2\u5f62\u200b\uff0c\u200c\u200b\u65e0\u9700\u200b\u4e2d\u95f4\u200b\u58f0\u5b66\u200b\u7279\u5f81\u63d0\u53d6\u200b\u200c\uff08\u200b\u5982\u6885\u5c14\u200b\u9891\u8c31\u200b\uff09\u3002\n\u200b\u7ed3\u5408\u200b\u200c\u200b\u53d8\u5206\u200b\u63a8\u7406\u200b\u4e0e\u200b\u5bf9\u6297\u200b\u8bad\u7ec3\u200b\u200c\uff0c\u200b\u901a\u8fc7\u200b\u968f\u673a\u200b\u6f5c\u5728\u200b\u53d8\u91cf\u200b\u5efa\u6a21\u200b\u8bed\u97f3\u200b\u7684\u200b\u81ea\u7136\u200b\u5ea6\u200b\u548c\u200b\u591a\u6837\u6027\u200b\u3002\n\u200b\u652f\u6301\u200b\u8bed\u97f3\u200b\u514b\u9686\u200b\u3001\u200b\u6d41\u5f0f\u200b\u63a8\u7406\u200b\u7b49\u200b\u6269\u5c55\u200b\u80fd\u529b\u200b\uff0c\u200b\u53ef\u200b\u901a\u8fc7\u200b\u5fae\u8c03\u200b\u5b9e\u73b0\u200b\u4e2a\u6027\u5316\u200b\u97f3\u8272\u200b\u751f\u6210\u200b\u3002\n\u200b\u4e8c\u200b\u3001\u200b\u751f\u6210\u200b\u65b9\u5f0f\u200b\u4e0e\u200b\u6548\u7387\u200b\n\u200b\u7279\u6027\u200b  Matcha-TTS  VITS\n\u200b\u751f\u6210\u200b\u65b9\u5f0f\u200b\u200c   \u200b\u57fa\u4e8e\u200bODE\u200b\u7684\u200b\u6982\u7387\u200b\u91c7\u6837\u200b  \u200b\u57fa\u4e8e\u200b\u968f\u673a\u200b\u6f5c\u5728\u200b\u53d8\u91cf\u200b\u751f\u6210\u200b\n\u200b\u5408\u6210\u200b\u6b65\u9aa4\u200b\u200c   \u200b\u5c11\u200b\u6b65\u9aa4\u200b\uff0810\u200b\u6b65\u5185\u200b\uff09   \u200b\u9700\u8981\u200b\u66f4\u200b\u591a\u200b\u6b65\u9aa4\u200b\u4f18\u5316\u200b\u751f\u6210\u200b\u8d28\u91cf\u200b\n\u200b\u63a8\u7406\u200b\u901f\u5ea6\u200b\u200c   CPU/GPU\u200b\u5747\u200b\u9ad8\u6548\u200b\uff0c\u200b\u9002\u5408\u200b\u5b9e\u65f6\u200b\u573a\u666f\u200b   \u200b\u4f9d\u8d56\u200bGPU\u200b\u52a0\u901f\u200b\uff0c\u200b\u7aef\u5230\u200b\u7aef\u200b\u6548\u7387\u9ad8\u200b\n\u200b\u5185\u5b58\u200b\u5360\u7528\u200b\u200c   \u200b\u8f83\u200b\u4f4e\u200b  \u200b\u8f83\u200b\u9ad8\u200b\uff08\u200b\u5c24\u5176\u200b\u957f\u200b\u8bed\u97f3\u200b\u573a\u666f\u200b\uff09\n\u200b\u4e09\u200b\u3001\u200b\u6027\u80fd\u200b\u8868\u73b0\u200b\n\nMatcha-TTS\u200c\n\n\u200b\u5728\u200b\u5408\u6210\u200b\u901f\u5ea6\u200b\u4e0a\u200b\u63a5\u8fd1\u200b\u5b9e\u65f6\u200b\u6a21\u578b\u200b\uff0c\u200b\u957f\u200b\u8bed\u97f3\u200b\u573a\u666f\u200b\u8868\u73b0\u200b\u4f18\u5f02\u200b\u3002\n\u200b\u4e3b\u89c2\u200b\u8bc4\u6d4b\u200b\uff08MOS\uff09\u200b\u5f97\u5206\u200b\u8f83\u200b\u9ad8\u200b\uff0c\u200b\u5c24\u5176\u200b\u5728\u200b\u97f3\u8d28\u200b\u548c\u200b\u81ea\u7136\u200b\u5ea6\u4e0a\u200b\u4f18\u4e8e\u200b\u4f20\u7edf\u200b\u6269\u6563\u200b\u6a21\u578b\u200b\u3002\n\nVITS\u200c\n\n\u200b\u751f\u6210\u200b\u8bed\u97f3\u200b\u7684\u200b\u81ea\u7136\u200b\u5ea6\u200b\u548c\u200b\u60c5\u611f\u200b\u8868\u8fbe\u200b\u66f4\u200b\u63a5\u8fd1\u200b\u771f\u5b9e\u200b\u4eba\u58f0\u200b\uff0c\u200b\u5c24\u5176\u200b\u5728\u200b\u5fae\u8c03\u200b\u540e\u200b\u8868\u73b0\u200b\u7a81\u51fa\u200b\u3002\n\u200b\u793e\u533a\u200b\u751f\u6001\u200b\u5b8c\u5584\u200b\uff0c\u200b\u652f\u6301\u200b\u591a\u200b\u8bed\u8a00\u200b\u3001\u200b\u6b4c\u58f0\u200b\u5408\u6210\u200b\u3001\u200b\u8bed\u97f3\u200b\u514b\u9686\u200b\u7b49\u200b\u591a\u79cd\u200b\u6269\u5c55\u200b\u573a\u666f\u200b\u3002\n\u200b\u56db\u200b\u3001\u200b\u5e94\u7528\u200b\u573a\u666f\u200b\nMatcha-TTS\u200c\uff1a\u200b\u9002\u5408\u200b\u5bf9\u200b\u200c\u200b\u5b9e\u65f6\u6027\u200b\u8981\u6c42\u200b\u9ad8\u200b\u200c\u200b\u7684\u200b\u573a\u666f\u200b\uff08\u200b\u5982\u200b\u5bf9\u8bdd\u200b\u7cfb\u7edf\u200b\u3001\u200b\u76f4\u64ad\u200b\u5b57\u5e55\u200b\u8f6c\u200b\u8bed\u97f3\u200b\uff09\u3002\nVITS\u200c\uff1a\u200b\u9002\u7528\u200b\u4e8e\u200b\u9700\u8981\u200b\u200c\u200b\u9ad8\u200b\u81ea\u7136\u200b\u5ea6\u200b\u4e0e\u200b\u591a\u200b\u573a\u666f\u200b\u6269\u5c55\u6027\u200b\u200c\u200b\u7684\u200b\u4efb\u52a1\u200b\uff08\u200b\u5982\u200b\u865a\u62df\u200b\u4e3b\u64ad\u200b\u3001\u200b\u4e2a\u6027\u5316\u200b\u8bed\u97f3\u200b\u514b\u9686\u200b\uff09\u3002\n\u200b\u4e94\u200b\u3001\u200b\u6280\u672f\u200b\u6f14\u8fdb\u200b\u8d8b\u52bf\u200b\nMatcha-TTS\u200c\u200b\u4ee3\u8868\u200b\u6269\u6563\u200b\u6a21\u578b\u200b\u7684\u200b\u4f18\u5316\u200b\u65b9\u5411\u200b\uff0c\u200b\u901a\u8fc7\u200b\u6d41\u200b\u5339\u914d\u200b\u51cf\u5c11\u200b\u8ba1\u7b97\u200b\u91cf\u200b\uff0c\u200b\u672a\u6765\u200b\u53ef\u80fd\u200b\u8fdb\u4e00\u6b65\u200b\u538b\u7f29\u200b\u63a8\u7406\u200b\u6b65\u9aa4\u200b\u3002\nVITS\u200c\u200b\u6301\u7eed\u200b\u6269\u5c55\u200b\u529f\u80fd\u200b\u8fb9\u754c\u200b\uff08\u200b\u5982\u200b\u7ed3\u5408\u200bLLM\u200b\u4f18\u5316\u200b\u6587\u672c\u200b\u7406\u89e3\u80fd\u529b\u200b\uff09\uff0c\u200b\u5e76\u200b\u5728\u200b\u5f00\u6e90\u200b\u793e\u533a\u200b\u63a8\u52a8\u200b\u6a21\u578b\u200b\u8f7b\u91cf\u5316\u200b\u4e0e\u200b\u591a\u200b\u8bed\u8a00\u200b\u652f\u6301\u200b\u3002\n\n\u200b\u603b\u7ed3\u200b\uff1aMatcha-TTS\u200b\u5728\u200b\u901f\u5ea6\u200b\u4e0e\u200b\u8d44\u6e90\u200b\u5360\u7528\u200b\u4e0a\u200b\u5360\u4f18\u200b\uff0c\u200b\u800c\u200bVITS\u200b\u5728\u200b\u81ea\u7136\u200b\u5ea6\u200b\u4e0e\u200b\u529f\u80fd\u200b\u591a\u6837\u6027\u200b\u4e0a\u200b\u66f4\u80dc\u4e00\u7b79\u200b\uff0c\u200b\u4e24\u8005\u200b\u9002\u7528\u200b\u573a\u666f\u200b\u4e92\u8865\u200b\u3002\n</code></pre>"},{"location":"blog/sherpa-onnx%E5%BA%93tts%E8%AF%AD%E8%A8%80%E5%90%88%E6%88%90%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E8%BF%87%E7%A8%8B/#sherpa-onnx\u63a8\u7406\u6d41\u7a0b\u4ee5\u53ca\u6539\u9020\u6210\u786c\u4ef6\u52a0\u901f\u63a8\u7406","title":"sherpa-onnx\u200b\u63a8\u7406\u200b\u6d41\u7a0b\u200b\u4ee5\u53ca\u200b\u6539\u9020\u200b\u6210\u200b\u786c\u4ef6\u52a0\u901f\u200b\u63a8\u7406","text":"<p>https://github.com/k2-fsa/sherpa-onnx/blob/master/python-api-examples/offline-tts.py\u200b\u4e2d\u200b\u7684\u200b\u4f7f\u7528\u200b\u793a\u4f8b\u200b\uff1a</p> Bash<pre><code>Example (3/7)\n\nwget https://github.com/k2-fsa/sherpa-onnx/releases/download/tts-models/sherpa-onnx-vits-zh-ll.tar.bz2\ntar xvf sherpa-onnx-vits-zh-ll.tar.bz2\nrm sherpa-onnx-vits-zh-ll.tar.bz2\n\npython3 ./python-api-examples/offline-tts.py \\\n --vits-model=./sherpa-onnx-vits-zh-ll/model.onnx \\\n --vits-lexicon=./sherpa-onnx-vits-zh-ll/lexicon.txt \\\n --vits-tokens=./sherpa-onnx-vits-zh-ll/tokens.txt \\\n --tts-rule-fsts=./sherpa-onnx-vits-zh-ll/phone.fst,./sherpa-onnx-vits-zh-ll/date.fst,./sherpa-onnx-vits-zh-ll/number.fst \\\n --vits-dict-dir=./sherpa-onnx-vits-zh-ll/dict \\\n --sid=2 \\\n --output-filename=./test-2.wav \\\n \"\u200b\u5f53\u200b\u591c\u5e55\u964d\u4e34\u200b\uff0c\u200b\u661f\u5149\u70b9\u70b9\u200b\uff0c\u200b\u4f34\u968f\u200b\u7740\u200b\u5fae\u98ce\u200b\u62c2\u9762\u200b\uff0c\u200b\u6211\u200b\u5728\u200b\u9759\u8c27\u200b\u4e2d\u200b\u611f\u53d7\u200b\u7740\u200b\u65f6\u5149\u200b\u7684\u200b\u6d41\u8f6c\u200b\uff0c\u200b\u601d\u5ff5\u200b\u5982\u200b\u6d9f\u6f2a\u200b\u8361\u6f3e\u200b\uff0c\u200b\u68a6\u5883\u200b\u5982\u200b\u753b\u5377\u200b\u5c55\u5f00\u200b\uff0c\u200b\u6211\u200b\u4e0e\u200b\u81ea\u7136\u200b\u878d\u4e3a\u4e00\u4f53\u200b\uff0c\u200b\u6c89\u9759\u200b\u5728\u200b\u8fd9\u7247\u200b\u5b81\u9759\u200b\u7684\u200b\u7f8e\u4e3d\u200b\u4e4b\u4e2d\u200b\uff0c\u200b\u611f\u53d7\u200b\u7740\u200b\u751f\u547d\u200b\u7684\u200b\u5947\u8ff9\u200b\u4e0e\u200b\u6e29\u67d4\u200b\u30022024\u200b\u5e74\u200b5\u200b\u6708\u200b11\u200b\u53f7\u200b\uff0c\u200b\u62e8\u6253\u200b110\u200b\u6216\u8005\u200b18920240511\u3002123456\u200b\u5757\u94b1\u200b\u3002\"\n</code></pre> Bash<pre><code>Example (4/7)\n\ncurl -O -SL https://github.com/k2-fsa/sherpa-onnx/releases/download/tts-models/matcha-icefall-zh-baker.tar.bz2\ntar xvf matcha-icefall-zh-baker.tar.bz2\nrm matcha-icefall-zh-baker.tar.bz2\n\ncurl -SL -O https://github.com/k2-fsa/sherpa-onnx/releases/download/vocoder-models/vocos-22khz-univ.onnx\n\npython3 ./python-api-examples/offline-tts.py \\\n --matcha-acoustic-model=./matcha-icefall-zh-baker/model-steps-3.onnx \\\n --matcha-vocoder=./vocos-22khz-univ.onnx \\\n --matcha-lexicon=./matcha-icefall-zh-baker/lexicon.txt \\\n --matcha-tokens=./matcha-icefall-zh-baker/tokens.txt \\\n --tts-rule-fsts=./matcha-icefall-zh-baker/phone.fst,./matcha-icefall-zh-baker/date.fst,./matcha-icefall-zh-baker/number.fst \\\n --matcha-dict-dir=./matcha-icefall-zh-baker/dict \\\n --output-filename=./test-matcha.wav \\\n \"\u200b\u67d0\u67d0\u200b\u94f6\u884c\u200b\u7684\u200b\u526f\u884c\u957f\u200b\u548c\u200b\u4e00\u4e9b\u200b\u884c\u653f\u200b\u9886\u5bfc\u200b\u8868\u793a\u200b\uff0c\u200b\u4ed6\u4eec\u200b\u53bb\u8fc7\u200b\u957f\u6c5f\u200b\u548c\u200b\u957f\u767d\u5c71\u200b; \u200b\u7ecf\u6d4e\u200b\u4e0d\u65ad\u200b\u589e\u957f\u200b\u30022024\u200b\u5e74\u200b12\u200b\u6708\u200b31\u200b\u53f7\u200b\uff0c\u200b\u62e8\u6253\u200b110\u200b\u6216\u8005\u200b18920240511\u3002123456\u200b\u5757\u94b1\u200b\u3002\"\n</code></pre> <p>\u200b\u901a\u8fc7\u200b\u5206\u6790\u200bsherpa-onnx\u200b\u63a8\u7406\u200b\u903b\u8f91\u200b\uff0c\u200b\u6539\u9020\u200b\u6210\u200b\u786c\u4ef6\u52a0\u901f\u200b\u63a8\u7406\u200b\u3002\u200b\u5c06\u200bonnxruntime\u200b\u63a8\u7406\u200b\u66ff\u6362\u6210\u200b\u786c\u4ef6\u200bruntime\u200b\u63a8\u7406\u200b\u5f15\u64ce\u200b\uff08\u200b\u5305\u62ec\u200b\u6a21\u578b\u200b\u8f6c\u6362\u200b\u3001\u200b\u63a8\u7406\u200b\u52a0\u901f\u200b\uff09\u3002 \u200b\u67e5\u770b\u200bonnx\u200b\u6587\u4ef6\u200b\u7684\u200bmetadata,  </p>Text Only<pre><code>/project/sherpa-onnx/csrc/offline-tts-vits-model.cc:Init:151 ---vits model---\ndescription=MeloTTS is a high-quality multi-lingual text-to-speech library by MyShell.ai\nlicense=MIT license\nurl=https://github.com/myshell-ai/MeloTTS\nmodel_type=melo-vits\nversion=2\nsample_rate=44100\nadd_blank=1\nn_speakers=1\njieba=1\nbert_dim=1024\nlanguage=Chinese + English\nja_bert_dim=768\nspeaker_id=1\ncomment=melo\nlang_id=3\ntone_start=0\n----------input names----------\n0 x\n1 x_lengths\n2 tones\n3 sid\n4 noise_scale\n5 length_scale\n6 noise_scale_w\n----------output names----------\n0 y\n</code></pre><p></p> <p>\u200b\u9996\u5148\u200b\uff0c\u200b\u6839\u636e\u200bmetadata\u200b\u53ef\u4ee5\u200b\u5f97\u51fa\u200b\uff0c\u200b\u91c7\u7528\u200b\u4e86\u200bfrontend \u200b\u5c06\u200btext\u200b\u8f6c\u6362\u6210\u200btokens\u3002</p> <p></p>C++<pre><code>https://github1s.com/k2-fsa/sherpa-onnx/blob/master/sherpa-onnx/csrc/offline-tts-vits-impl.h#L210-L211\n    std::vector&lt;TokenIDs&gt; token_ids =\n        frontend_-&gt;ConvertTextToTokenIds(text, meta_data.voice);\n</code></pre> MeloTtsLexicon \u200b\u4f5c\u4e3a\u200bfrontend\u3002 C++<pre><code>else if (meta_data.jieba &amp;&amp; !config_.model.vits.dict_dir.empty() &amp;&amp;\n               meta_data.is_melo_tts) {\n    frontend_ = std::make_unique&lt;MeloTtsLexicon&gt;(\n        mgr, config_.model.vits.lexicon, config_.model.vits.tokens,\n        config_.model.vits.dict_dir, model_-&gt;GetMetaData(),\n        config_.model.debug);\n} \n</code></pre> \u200b\u770b\u200b\u4e00\u4e0b\u200b\u63a8\u7406\u200b\u6574\u4e2a\u200b\u8c03\u7528\u200b\u6808\u200b\uff1a C++<pre><code>// https://sourcegraph.com/github.com/k2-fsa/sherpa-onnx@f00066db88853852c68eed81a8686cd27d934240/-/blob/sherpa-onnx/csrc/offline-tts-impl.h?L26\n\nvirtual GeneratedAudio Generate(\n      const std::string &amp;text, int64_t sid = 0, float speed = 1.0,\n      GeneratedAudioCallback callback = nullptr) const = 0;\n\n\n// https://sourcegraph.com/github.com/k2-fsa/sherpa-onnx@f00066db88853852c68eed81a8686cd27d934240/-/blob/sherpa-onnx/csrc/offline-tts-vits-impl.h?L152\n  GeneratedAudio Generate(\n      const std::string &amp;_text, int64_t sid = 0, float speed = 1.0,\n      GeneratedAudioCallback callback = nullptr) const override {\n    const auto &amp;meta_data = model_-&gt;GetMetaData();\n    int32_t num_speakers = meta_data.num_speakers;\n    ...\n    }\n\n// https://sourcegraph.com/github.com/k2-fsa/sherpa-onnx@f00066db88853852c68eed81a8686cd27d934240/-/blob/sherpa-onnx/csrc/offline-tts-vits-impl.h?L209\n\n    std::vector&lt;TokenIDs&gt; token_ids =\n        frontend_-&gt;ConvertTextToTokenIds(text, meta_data.voice);\n\n// https://sourcegraph.com/github.com/k2-fsa/sherpa-onnx@f00066db88853852c68eed81a8686cd27d934240/-/blob/sherpa-onnx/csrc/offline-tts-vits-impl.h?L249\n    if (config_.max_num_sentences &lt;= 0 || x_size &lt;= config_.max_num_sentences) {\n      auto ans = Process(x, tones, sid, speed);\n      if (callback) {\n        callback(ans.samples.data(), ans.samples.size(), 1.0);\n      }\n      return ans;\n    }\n\n// https://sourcegraph.com/github.com/k2-fsa/sherpa-onnx@f00066db88853852c68eed81a8686cd27d934240/-/blob/sherpa-onnx/csrc/offline-tts-vits-impl.h?L430\n  GeneratedAudio Process(const std::vector&lt;std::vector&lt;int64_t&gt;&gt; &amp;tokens,\n                         const std::vector&lt;std::vector&lt;int64_t&gt;&gt; &amp;tones,\n                         int32_t sid, float speed) const {\n    int32_t num_tokens = 0;\n    for (const auto &amp;k : tokens) {\n      num_tokens += k.size();\n    }\n\n......\n                         }\n</code></pre><p></p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>sglang\u200b\u63a8\u7406\u200b\u4f7f\u7528\u200b\u4e4b\u200b\u73af\u5883\u200b\u914d\u7f6e\u200b</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> <li>\u200b\u4ece\u200bDeepseek\u200b\u5f00\u6e90\u200b\u5e93\u200b3FS\u200b\u4e2d\u200b\u5b66\u4e60\u200bfuse\u200b\u7684\u200b\u4f7f\u7528\u200b-\u200b\u5982\u4f55\u200b\u5f00\u53d1\u200b\u4e00\u4e2a\u200b\u6587\u4ef6\u7cfb\u7edf\u200b\uff08\u200b\u4e00\u200b\uff09</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> </ul>"},{"location":"blog/text-generation-inference%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6%E5%89%96%E6%9E%90/","title":"text-generation-inference\u200b\u63a8\u7406\u200b\u6846\u67b6\u200b\u5256\u6790","text":"<p>\u200b\u4eca\u5929\u200b\u8981\u200b\u4ecb\u7ecd\u200b\u7684\u200b\u4e3b\u9898\u200b\u662f\u200bTGI\uff08text-generation-inference\uff09\uff0c \u200b\u662f\u200bhuggingface\u200b\u5f00\u6e90\u200b\u53ef\u200b\u7528\u4e8e\u200b\u751f\u4ea7\u200b\u73af\u5883\u200b\u7684\u200bLLM\u200b\u5927\u200b\u6a21\u578b\u200b\u7684\u200b\u63a8\u7406\u200b\u90e8\u7f72\u200b\u670d\u52a1\u200b\u3002</p> <p>\u200b\u7531\u200bRouter\u200b\u548c\u200bEngine\u200b\u6784\u6210\u200b\uff0cEngine\u200b\u5305\u62ec\u200b\u4e86\u200bInferServer\u3002Router\u200b\u7531\u200bRust\u200b\u5b9e\u73b0\u200b\uff0cInferServer\u200b\u7531\u200bpython\u200b\u7aef\u200b\u5b9e\u73b0\u200b\u3002Router\u200b\u76f8\u5f53\u4e8e\u200b\u4e00\u4e2a\u200b\u4ee3\u7406\u200b\uff0c\u200b\u9762\u5411\u200b\u4e1a\u52a1\u200b\u4f1a\u200b\u542f\u52a8\u200b\u4e00\u4e2a\u200bWebServer\uff0c\u200b\u5305\u62ec\u200b\u5bf9\u200b\u4e1a\u52a1\u200b\u8bf7\u6c42\u200b\u91c7\u7528\u200b\u5408\u9002\u200b\u7684\u200b\u7b56\u7565\u200b\u8fdb\u884c\u200b\u52a8\u6001\u200bBatch\u200b\u8c03\u6574\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u5927\u200b\u7684\u200b\u541e\u5410\u200b\u548c\u200b\u4f4e\u200b\u7684\u200b\u5ef6\u8fdf\u200b\u3002 Engine\u200b\u5bf9\u200b\u5404\u79cd\u200bLLM\u200b\u5927\u200b\u8bed\u8a00\u200b\u6a21\u578b\u200b\u8fdb\u884c\u200b\u652f\u6301\u200b\uff0c\u200b\u542f\u52a8\u200b\u6a21\u578b\u200b\u63a8\u7406\u200b\u670d\u52a1\u200b\u3002 Router\u200b\u548c\u200bEngine\u200b\u4e4b\u95f4\u200b\u901a\u8fc7\u200bProtobuf\u200b\u5b9a\u4e49\u200b\u6d88\u606f\u200b\u548c\u200b\u683c\u5f0f\u200b\uff0c\u200b\u901a\u8fc7\u200bGRPC\u200b\u65b9\u5f0f\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u5bf9\u200b\u63a8\u7406\u200b\u670d\u52a1\u200b\u8fdb\u884c\u200b\u8bbf\u95ee\u200b\u3002</p> <p>\u200b\u4ecb\u7ecd\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200b\u6587\u6863\u200btext-generation-inference-doc\u3002</p>"},{"location":"blog/text-generation-inference%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6%E5%89%96%E6%9E%90/#tgi\u4f18\u52bf","title":"TGI\u200b\u4f18\u52bf","text":"<ul> <li>\u200b\u901a\u8fc7\u200bOpen Telemetry\u200b\u8fdb\u884c\u200b\u5206\u5e03\u5f0f\u200b\u8ffd\u8e2a\u200b\u548c\u200bPrometheus\u200b\u76d1\u63a7\u200b\u6307\u6807\u200b\u3002</li> <li>\u200b\u5b83\u200b\u652f\u6301\u200b\u9ad8\u7ea7\u200b\u6ce8\u610f\u529b\u200b\u673a\u5236\u200b\uff0c\u200b\u5982\u200bFlash Attention\u200b\u548c\u200bPaged Attention\uff0c\u200b\u786e\u4fdd\u200b\u63a8\u7406\u200b\u4f18\u5316\u200b\u3002</li> <li>\u200b\u8be5\u200b\u6846\u67b6\u200b\u8fd8\u200b\u5141\u8bb8\u200b\u901a\u8fc7\u200b\u5404\u79cd\u200b\u914d\u7f6e\u200b\u548c\u200b\u66f4\u200b\u7ec6\u7c92\u5ea6\u200b\u7684\u200b\u6309\u200b\u8bf7\u6c42\u200b\u914d\u7f6e\u200b\uff08\u200b\u5982\u200b\u5f15\u5bfc\u200b\u89e3\u7801\u200b\u4ee5\u200b\u751f\u6210\u200b\u7ed3\u6784\u5316\u200b\u8f93\u51fa\u200b\uff09\u200b\u6765\u200b\u8c03\u6574\u200b\u670d\u52a1\u5668\u200b\u3002</li> </ul>"},{"location":"blog/text-generation-inference%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6%E5%89%96%E6%9E%90/#llm\u63a8\u7406\u7684\u4e24\u4e2a\u91cd\u8981\u9636\u6bb5\u8bd1","title":"LLM\u200b\u63a8\u7406\u200b\u7684\u200b\u4e24\u4e2a\u200b\u91cd\u8981\u200b\u9636\u6bb5\u200b[\u200b\u8bd1\u200b]","text":"<p>\u200b\u672c\u200b\u5c0f\u8282\u200b\u7ffb\u8bd1\u200b\u81ea\u200b\uff0cAnatomy of TGI for LLM Inference\u3002</p> <p>\u200b\u5f53\u200b\u7528\u6237\u200b\u63d0\u4f9b\u200b\u4e00\u6bb5\u200bPrompt\uff0c\u200b\u8fdb\u884c\u200btokennized\u200b\u5f97\u5230\u200b\u4e00\u7ec4\u200btokens\u3002\u200b\u8f93\u5165\u200b\u7ed9\u200b\u6a21\u578b\u200b\uff0c\u200b\u6a21\u578b\u200b\u670d\u52a1\u200b\u5728\u200bGPU\u200b\u4e0a\u200b\u8fdb\u884c\u200b\u63a8\u7406\u200b\u3002LLM\u200b\u63a8\u7406\u200b\u4f9d\u6b21\u200b\u5206\u4e3a\u200b\u4e86\u200bPrefill\u200b\u9636\u6bb5\u200b\u548c\u200bDecode\u200b\u9636\u6bb5\u200b\u3002Prefill\u200b\u9636\u6bb5\u200b\u5bf9\u200b\u5168\u90e8\u200bPrompt\u200b\u8f93\u5165\u200btokens\u200b\u8fdb\u884c\u200b\u63a8\u7406\u200b\uff0c\u200b\u4ea7\u751f\u200bFirstToken\uff08\u200b\u7b2c\u4e00\u4e2a\u200bToken\uff09\u3002\u200b\u7136\u540e\u200bDecode\u200b\u662f\u200b\u4e00\u4e2a\u200bSelfAttenstion\u200b\u7684\u200b\u8fc7\u7a0b\u200b\uff0c\u200b\u5c06\u200b\u65b0\u200b\u751f\u6210\u200b\u7684\u200bToken\u200b\u52a0\u200b\u5230\u200b\u539f\u59cb\u200btokens\u200b\u4e2d\u200b\uff0c\u200b\u7136\u540e\u200b\u4e0d\u65ad\u200b\u7684\u200bDecode\u200b\u8fc7\u7a0b\u200b\uff0c\u200b\u76f4\u5230\u200b\u751f\u6210\u200bEOS\u200b\u7ed3\u675f\u200b\u3002\u200b\u5c06\u200b\u5f97\u5230\u200b\u7684\u200btokens\u200b\u8f6c\u6362\u6210\u200b\u8bed\u8a00\u200b\u8868\u793a\u200b\uff0c\u200b\u5c31\u662f\u200b\u7528\u6237\u200b\u5f97\u5230\u200b\u7684\u200b\u56de\u7b54\u200b\u3002</p>"},{"location":"blog/text-generation-inference%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6%E5%89%96%E6%9E%90/#prefill","title":"Prefill","text":"<p>\u200b\u5728\u200bPrefill\u200b\u9636\u6bb5\u200b\uff0c\u200b\u7528\u6237\u200b\u8f93\u5165\u200b\u7684\u200bPrompt\u200b\u7ecf\u8fc7\u200btokennized\u200b\u5f97\u5230\u200btokens\uff0c\u200b\u8fd9\u4e2a\u200b\u8fc7\u7a0b\u200b\u901a\u8fc7\u200b\u5206\u8bcd\u200b\u5c06\u200b\u53e5\u5b50\u200b\u8f6c\u6362\u6210\u200b\u66f4\u200b\u5c0f\u200b\u7684\u200b\u5355\u5143\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u8fc7\u7a0b\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u6a21\u578b\u200b\u548c\u200b\u5206\u8bcd\u5668\u200b\u3002\u200b\u7136\u540e\u200b\u5f97\u5230\u200b\u7684\u200btokens\u200b\u901a\u8fc7\u200b\u4e00\u6b21\u200bForward\u200b\u524d\u5411\u200b\u63a8\u7406\u200b\uff0c\u200b\u5f97\u5230\u200bFirstToken\u3002 \u200b\u6bd4\u5982\u200b\uff0c\u200b\u4f60\u200b\u95ee\u5927\u200b\u6a21\u578b\u200b\uff0c\u201c\u200b\u7f8e\u56fd\u200b\u7684\u200b\u9996\u90fd\u200b\u662f\u200b\uff1f\u201d\uff0c\u200b\u5927\u200b\u6a21\u578b\u200b\u7ecf\u8fc7\u200bPrefill\u200b\u9636\u6bb5\u200b\uff0c\u200b\u8fd4\u56de\u200bFirstToken: \u201c\u200b\u534e\u76db\u987f\u200b\u201d\u3002</p>"},{"location":"blog/text-generation-inference%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6%E5%89%96%E6%9E%90/#decode","title":"Decode","text":"<p>\u200b\u5728\u200bDecode\u200b\u9636\u6bb5\u200b\uff0c\u200b\u5927\u200b\u8bed\u8a00\u200b\u6a21\u578b\u200b\u901a\u8fc7\u200b\u81ea\u200b\u56de\u5f52\u200b\u7279\u6027\u200b\u4e0d\u65ad\u200b\u751f\u6210\u200b\u65b0\u200b\u7684\u200btoken\u3002\u200b\u5728\u200b\u8fd9\u4e2a\u200b\u9636\u6bb5\u200b\uff0c\u200b\u57fa\u4e8e\u200bPrefill\u200b\u9884\u200b\u586b\u5145\u200b\u9636\u6bb5\u200b\u7684\u200b\u521d\u59cb\u200b\u6807\u8bb0\u200b\uff0c\u200b\u6a21\u578b\u200b\u4e00\u6b21\u200b\u751f\u6210\u200b\u4e00\u4e2a\u200b\u6807\u8bb0\u200b\u7684\u200b\u6587\u672c\u200b\u3002\u200b\u6bcf\u4e2a\u200b\u65b0\u200b\u751f\u6210\u200b\u7684\u200b\u6807\u8bb0\u200b\u90fd\u200b\u88ab\u200b\u6dfb\u52a0\u200b\u5230\u200b\u8f93\u5165\u200b\u5e8f\u5217\u200b\u4e2d\u200b\uff0c\u200b\u4e3a\u200b\u6a21\u578b\u200b\u5904\u7406\u200b\u521b\u5efa\u200b\u65b0\u200b\u7684\u200b\u4e0a\u4e0b\u6587\u200b\u3002\u200b\u6bd4\u5982\u200b\uff0c\u200b\u5728\u200b\u751f\u6210\u200b\u201c\u200b\u534e\u76db\u987f\u200b\u201d\u200b\u4f5c\u4e3a\u200b\u521d\u59cb\u200b\u6807\u8bb0\u200b\u540e\u200b\uff0c\u200b\u65b0\u200b\u7684\u200b\u5e8f\u5217\u200b\u53d8\u4e3a\u200b\u201c\u200b\u7f8e\u56fd\u200b\u7684\u200b\u9996\u90fd\u200b\u662f\u200b\u54ea\u91cc\u200b\uff1f\u200b\u534e\u76db\u987f\u200b\u201d\u3002\u200b\u7136\u540e\u200b\u4f7f\u7528\u200b\u8fd9\u4e2a\u200b\u66f4\u65b0\u200b\u540e\u200b\u7684\u200b\u5e8f\u5217\u200b\u6765\u200b\u751f\u6210\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u6807\u8bb0\u200b\u3002</p> <p>\u200b\u6a21\u578b\u200b\u4ee5\u200b\u8fed\u4ee3\u200b\u7684\u200b\u65b9\u5f0f\u200b\u7ee7\u7eed\u200b\u8fd9\u4e2a\u200b\u8fc7\u7a0b\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u65b0\u200b\u6807\u8bb0\u200b\u5f71\u54cd\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u6807\u8bb0\u200b\u7684\u200b\u751f\u6210\u200b\u3002\u200b\u901a\u8fc7\u200b\u8fd9\u79cd\u200b\u81ea\u200b\u56de\u5f52\u200b\u65b9\u6cd5\u200b\u6a21\u578b\u200b\u5373\u200b\u4fdd\u6301\u200b\u4e0a\u4e0b\u6587\u200b\uff0c\u200b\u53c8\u200b\u751f\u6210\u200b\u8fde\u8d2f\u200b\u7684\u200b\u56de\u5e94\u200b\u3002Decode\u200b\u89e3\u7801\u200b\u9636\u6bb5\u200b\u6301\u7eed\u200b\u8fdb\u884c\u200b\uff0c\u200b\u76f4\u5230\u200b\u751f\u6210\u200b\u4e00\u4e2a\u200b\u5e8f\u5217\u200b\u7ed3\u675f\u200b\uff08EOS\uff09\u200b\u6807\u8bb0\u200b\uff0c\u200b\u6216\u8005\u200b\u8fbe\u5230\u200b\u7531\u200bmax_new_tokens\u200b\u6307\u5b9a\u200b\u7684\u200b\u6700\u5927\u200b\u5e8f\u5217\u200b\u957f\u5ea6\u200b\u3002\u200b\u6b64\u65f6\u200b\uff0c\u200b\u5728\u200bCPU\u200b\u4e0a\u200b\u5bf9\u200b\u751f\u6210\u200b\u7684\u200b\u5e8f\u5217\u200b\u8fdb\u884c\u200b\u53bb\u200b\u5206\u8bcd\u200b\u5904\u7406\u200b\uff0c\u200b\u5c06\u200b\u6807\u8bb0\u200b\u8f6c\u6362\u200b\u56de\u53ef\u8bfb\u200b\u7684\u200b\u6587\u672c\u200b\u3002</p>"},{"location":"blog/text-generation-inference%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6%E5%89%96%E6%9E%90/#\u4e3a\u4ec0\u4e48\u8981\u5206\u4e3a\u9884\u586b\u5145prefill\u548c\u89e3\u7801decode\u9636\u6bb5","title":"\u4e3a\u4ec0\u4e48\u200b\u8981\u200b\u5206\u4e3a\u200b\u9884\u200b\u586b\u5145\u200b\uff08Prefill\uff09\u200b\u548c\u200b\u89e3\u7801\u200b\uff08Decode\uff09\u200b\u9636\u6bb5\u200b\uff1f","text":"<p>\u200b\u8fd9\u200b\u4e24\u4e2a\u200b\u9636\u6bb5\u200b\u7684\u200b\u8ba1\u7b97\u200b\u7279\u6027\u200b\u4e0d\u540c\u200b\uff0c\u200b\u9884\u200b\u586b\u5145\u200b\u9636\u6bb5\u200b\u53ea\u200b\u9700\u8981\u200b\u4e00\u4e2a\u200b\u524d\u5411\u200b\u4f20\u9012\u200b\uff0c\u200b\u800c\u200b\u89e3\u7801\u200b\u9636\u6bb5\u200b\u6d89\u53ca\u200b\u591a\u4e2a\u200b\u4f20\u9012\u200b\u3002\u200b\u6bcf\u4e2a\u200b\u4f20\u9012\u200b\u90fd\u200b\u4f9d\u8d56\u4e8e\u200b\u4e4b\u524d\u200b\u751f\u6210\u200b\u7684\u200b\u6807\u8bb0\u200b\u3002\u200b\u89e3\u7801\u200b\u9636\u6bb5\u200b\u7684\u200b\u81ea\u200b\u56de\u5f52\u200b\u7279\u6027\u200b\u5bfc\u81f4\u200b\u5904\u7406\u200b\u65f6\u95f4\u200b\u66f4\u957f\u200b\uff0c\u200b\u8ba1\u7b97\u200b\u5f00\u9500\u200b\u968f\u7740\u200b\u603b\u200b\u5e8f\u5217\u200b\u957f\u5ea6\u200b\u7684\u200b\u589e\u52a0\u200b\u800c\u200b\u5448\u200b\u4e8c\u6b21\u65b9\u200b\u589e\u957f\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u9884\u200b\u586b\u5145\u200b\u548c\u200b\u89e3\u7801\u200b\u9636\u6bb5\u200b\u7684\u200b\u5206\u79bb\u200b\u662f\u200b\u5fc5\u8981\u200b\u7684\u200b\u3002</p> <p>\u200b\u4e3a\u4e86\u200b\u4f18\u5316\u200b\u8fd9\u4e2a\u200b\u8fc7\u7a0b\u200b\uff0c\u200b\u51cf\u5c11\u200b\u8ba1\u7b97\u200b\u5f00\u9500\u200b\u7684\u200b\u4e8c\u6b21\u65b9\u200b\u589e\u957f\u200b\uff0c\u200b\u91c7\u7528\u200b\u4e86\u200b\u4e00\u79cd\u200b\u79f0\u4e3a\u200bKV\u200b\u7f13\u5b58\u200b\u7684\u200b\u6280\u672f\u200b\u3002KV\u200b\u7f13\u5b58\u200b\u4fdd\u5b58\u200b\u5728\u200b\u9884\u200b\u586b\u5145\u200b\u548c\u200b\u89e3\u7801\u200b\u9636\u6bb5\u200b\u6bcf\u4e2a\u200b\u6807\u8bb0\u200b\u4f4d\u7f6e\u200b\u751f\u6210\u200b\u7684\u200b\u4e2d\u95f4\u72b6\u6001\u200b\uff0c\u200b\u79f0\u4e3a\u200bKV\u200b\u7f13\u5b58\u200b\u3002\u200b\u901a\u8fc7\u200b\u5c06\u200b\u8fd9\u4e9b\u200bKV\u200b\u7f13\u5b58\u200b\u5b58\u50a8\u200b\u5728\u200bGPU\u200b\u5185\u5b58\u200b\u4e2d\u200b\uff0c\u200b\u6a21\u578b\u200b\u907f\u514d\u200b\u4e86\u200b\u91cd\u590d\u200b\u8ba1\u7b97\u200b\uff0c\u200b\u4ece\u800c\u200b\u51cf\u5c11\u200b\u4e86\u200b\u8ba1\u7b97\u200b\u5f00\u9500\u200b\u3002\u200b\u8fd9\u79cd\u200b\u4f18\u5316\u200b\u63d0\u9ad8\u200b\u4e86\u200b\u89e3\u7801\u200b\u9636\u6bb5\u200b\u7684\u200b\u6548\u7387\u200b\u3002</p>"},{"location":"blog/text-generation-inference%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6%E5%89%96%E6%9E%90/#\u52a8\u6001batch\u7b56\u7565continuous-batching\u7b97\u6cd5","title":"\u52a8\u6001\u200bBatch\u200b\u7b56\u7565\u200b\uff08continuous batching\u200b\u7b97\u6cd5\u200b\uff09","text":"<p>TGI\u200b\u5728\u200bRouter\u200b\u4e2d\u200b\u5b9e\u73b0\u200b\u4e86\u200bcontinuous batching\u200b\u7b97\u6cd5\u200b\uff0c\u200b\u76ee\u7684\u200b\u662f\u200b\u4e3a\u4e86\u200b\u907f\u514d\u200bEngine OOM\uff08Out Of Memory\uff09\u200b\u9519\u8bef\u200b\u3002 \u200b\u5728\u200bRouter\u200b\u4e2d\u200b\u901a\u8fc7\u200b\u53c2\u6570\u200b\u5bf9\u200bResquest\u200b\u5982\u4f55\u200b\u7ec4\u6210\u200bBatch\u200b\u8fdb\u884c\u200b\u4e86\u200b\u9650\u5236\u200b\uff0c\u200b\u6bd4\u8f83\u200b\u5173\u952e\u200b\u7684\u200b\u53c2\u6570\u200bMAX_BATCH_TOTAL_TOKENS\uff08\u200b\u4e00\u4e2a\u200bBatch\u200b\u6700\u200b\u591a\u200b\u5904\u7406\u200b\u591a\u5c11\u200bToken\uff09\u3001MAX_BATCH_PREFILL_TOKENS\uff08\u200b\u4e00\u4e2a\u200bBatch\u200b\u7684\u200bPrefill\u200b\u9636\u6bb5\u200b\u6700\u200b\u591a\u200b\u652f\u6301\u200b\u591a\u5c11\u200bToken\uff09\u3002\u200b\u548c\u200b\u9759\u6001\u200b\u6279\u5904\u7406\u200b\u4e0d\u540c\u200b\uff0c\u200b\u9759\u6001\u200b\u6279\u5904\u7406\u200b\u9700\u8981\u200b\u7b49\u5f85\u200b\u524d\u200b\u4e00\u6279\u200b\u8bf7\u6c42\u200b\u5b8c\u6210\u200b\u540e\u200b\u624d\u80fd\u200b\u5904\u7406\u200b\u4e0b\u200b\u4e00\u6279\u200b\u8bf7\u6c42\u200b\uff0c\u200b\u8fde\u7eed\u200b\u6279\u5904\u7406\u200b\u5141\u8bb8\u200b\u52a8\u6001\u200b\u5730\u5411\u200b\u6b63\u5728\u200b\u8fd0\u884c\u200b\u7684\u200b\u6279\u6b21\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u8bf7\u6c42\u200b\uff0c\u200b\u6bd4\u5982\u200b\u5728\u200b1-10\u200b\u8bf7\u6c42\u200b\u540e\u200b\uff0c\u200b\u5148\u200b\u4ece\u200b\u961f\u5217\u200b\u4e2d\u200b\u62ff\u51fa\u200b13\u200b\u8bf7\u6c42\u200b\u5904\u7406\u200b\u51d1\u6210\u200bBatch\u200b\u8fdb\u884c\u200b\u5904\u7406\u200b\u3002</p> <p>\u201c\u200b\u5982\u679c\u200b\u6ca1\u6709\u200b\u8fde\u7eed\u200b\u6279\u5904\u7406\u200b\uff0c\u200b\u5ef6\u8fdf\u200b\u4f1a\u200b\u975e\u5e38\u200b\u597d\u200b\uff0c\u200b\u4f46\u200b\u541e\u5410\u91cf\u200b\uff08\u200b\u5373\u200b\u5728\u200b\u7ed9\u5b9a\u200b\u65f6\u95f4\u200b\u6846\u67b6\u200b\u5185\u200b\u5141\u8bb8\u200b\u7684\u200b\u603b\u200b\u8bf7\u6c42\u200b\u6570\u200b\uff09\u200b\u4f1a\u200b\u975e\u5e38\u200b\u5dee\u200b\uff08\u200b\u56e0\u4e3a\u200b\u5b83\u200b\u57fa\u672c\u4e0a\u200b\u662f\u200b1\uff09\u3002\u200b\u4f7f\u7528\u200b\u9759\u6001\u200b\u6279\u5904\u7406\u200b\uff0c\u200b\u4f60\u200b\u6216\u8bb8\u200b\u53ef\u4ee5\u200b\u8fbe\u5230\u200b\u6700\u5927\u200b\u541e\u5410\u91cf\u200b\uff08\u200b\u901a\u8fc7\u200b\u4f7f\u7528\u200b\u9002\u7528\u200b\u4e8e\u200b\u4f60\u200b\u786c\u4ef6\u200b\u7684\u200b\u6700\u5927\u200b\u603b\u200b\u6279\u6b21\u200b\u5927\u5c0f\u200b\uff09\uff0c\u200b\u4f46\u200b\u5ef6\u8fdf\u200b\u4f1a\u200b\u975e\u5e38\u200b\u5dee\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u4e3a\u4e86\u200b\u8fbe\u5230\u200b\u6700\u5927\u200b\u541e\u5410\u91cf\u200b\uff0c\u200b\u4f60\u200b\u9700\u8981\u200b\u7b49\u5f85\u200b\u8bf7\u6c42\u200b\u8fdb\u6765\u200b\u540e\u200b\u518d\u200b\u8fdb\u884c\u200b\u5904\u7406\u200b\u3002\u200b\u4f7f\u7528\u200b\u8fde\u7eed\u200b\u6279\u5904\u7406\u200b\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u627e\u5230\u200b\u4e00\u4e2a\u200b\u6700\u4f73\u200b\u7684\u200b\u5e73\u8861\u70b9\u200b\u3002\u200b\u4e00\u822c\u6765\u8bf4\u200b\uff0c\u200b\u5ef6\u8fdf\u200b\u662f\u200b\u7528\u6237\u200b\u6700\u200b\u5173\u5fc3\u200b\u7684\u200b\u6700\u200b\u91cd\u8981\u200b\u53c2\u6570\u200b\u3002\u200b\u4f46\u662f\u200b\uff0c\u200b\u4e3a\u4e86\u200b\u5728\u200b\u540c\u4e00\u200b\u786c\u4ef6\u200b\u4e0a\u200b\u652f\u6301\u200b10\u200b\u500d\u200b\u7684\u200b\u7528\u6237\u91cf\u200b\uff0c\u200b\u5ef6\u8fdf\u200b\u589e\u52a0\u200b2\u200b\u500d\u200b\u662f\u200b\u4e00\u4e2a\u200b\u53ef\u4ee5\u200b\u63a5\u53d7\u200b\u7684\u200b\u6743\u8861\u200b\u3002\u201d  \u201cWith no continuous batching at all, latency is going to be super good, but throughput (meaning the total number of requests allowed in a given timeframe) is going to be super bad (since it\u2019s essentially 1). With static batching, you can probably reach the maximum throughput (by using the maximum total batch size applicable to your hardware), but the latency is super bad since in order to have maximum throughput you need to wait for requests to come in before processing. With continuous batching you can find a sweet spot. In general latency is the most critical parameter users care about. But a 2x latency slowdown for 10x more users on the same hardware is an acceptable trade off\u201d </p>"},{"location":"blog/text-generation-inference%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6%E5%89%96%E6%9E%90/#\u52a8\u6001\u6279\u5904\u7406\u7684\u5904\u7406\u903b\u8f91","title":"\u52a8\u6001\u200b\u6279\u5904\u7406\u200b\u7684\u200b\u5904\u7406\u200b\u903b\u8f91","text":"<p>\u200b\u901a\u8fc7\u200b\u4e0b\u9762\u200b\u7684\u200b\u4f2a\u200b\u4ee3\u7801\u200b\u770b\u200b\u4e00\u4e0b\u200b\u52a8\u6001\u200b\u6279\u5904\u7406\u200b\u7684\u200b\u4e3b\u8981\u200b\u903b\u8f91\u200b\u7ebf\u200b\uff0c\u200b\u5f53\u7136\u200bRust\u200b\u5b9e\u73b0\u200b\u7684\u200b\u903b\u8f91\u200b\u66f4\u52a0\u200b\u590d\u6742\u200b\u3001\u200b\u5224\u65ad\u200b\u6761\u4ef6\u200b\u66f4\u200b\u591a\u200b\uff0c\u200b\u540e\u9762\u200b\u518d\u200b\u8fdb\u884c\u200b\u5206\u6790\u200b\u3002 </p>Python<pre><code># Initialize the batch and token budgets\nB &lt;- []\n# max_batch_total_tokens\u200b\u5bf9\u5e94\u200b\u4e86\u200b\u524d\u9762\u200b\u8bf4\u200b\u7684\u200b\u53c2\u6570\u200b\uff1aMAX_BATCH_TOTAL_TOKENS\uff08\u200b\u4e00\u4e2a\u200bBatch\u200b\u6700\u200b\u591a\u200b\u5904\u7406\u200b\u591a\u5c11\u200bToken\uff09\ntoken_budget &lt;- max_batch_total_tokens\n\n# Function to add requests to batch until max_tokens budget is reached\n# \u200b\u5c06\u200breqeusts\u200b\u4e2d\u200b\u7684\u200b\u8bf7\u6c42\u200b\u52a0\u5165\u200b\u5230\u200bBatch\u200b\u4e2d\u200b\uff0cmax_tokens\u200b\u662f\u200btokens\u200b\u7684\u200b\u6700\u5927\u200b\u9650\u5236\u200b\uff0c\u200b\u52a0\u5165\u200bBatch\u200b\u7684\u200b\u8bf7\u6c42\u200btokens\u200b\u4e0d\u80fd\u200b\u8d85\u8fc7\u200b\u5b83\u200b\ndef add_requests_to_prefill_batch(requests, batch, max_tokens):\n    while requests and sum(request.tokens for request in batch) &lt; max_tokens:\n        batch.append(requests.pop(0))\n    return batch\n\n# Add initial requests to the prefill batch\nB &lt;- add_requests_to_prefill_batch(request_queue, B, max_batch_prefill_tokens)\n\n# Prefill the batch B\n# LLM\u200b\u7684\u200b\u7b2c\u4e00\u4e2a\u200b\u9636\u6bb5\u200b\uff0c\u200b\u5c06\u200b\u6240\u6709\u200b\u7684\u200btokens\u200b\u8fdb\u884c\u200b\u4e00\u4e2a\u200b\u63a8\u7406\u200b\uff0c\u200b\u5f97\u5230\u200bfirst token\nprefill(B)\n\n# Loop until the batch B is empty\nwhile B:\n    # Update the token budget\n    # token budget\u200b\u662f\u200b\u9884\u7b97\u200b\u7684\u200b\u610f\u601d\u200b\uff0c\u200b\u5c31\u662f\u200b\u4f60\u200b\u5728\u200b\u52a0\u5165\u200bBatch\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u6d88\u8017\u200b\u8fd9\u4e48\u200b\u591a\u200btoken(\u200b\u5305\u62ec\u200b\u6a21\u578b\u200b\u8f93\u5165\u200btoken\u200b\u548c\u200b\u63a8\u7406\u200b\u4ea7\u751f\u200b\u7684\u200btoken)\u3002\u200b\u8d85\u8fc7\u200b\u4e86\u200bRouter\u200b\u5c31\u200b\u4f1a\u200b\u9650\u5236\u200b\u4f60\u200b\u4e86\u200b\uff0c\u200b\u4e0d\u7136\u200bEngine\u200b\u5c31\u200bOOM\u200b\u4e86\u200b\n    # \u200b\u6211\u4eec\u200b\u77e5\u9053\u200b\u8bf7\u6c42\u200b\u5305\u62ec\u200binput_tokens\uff0c\u200b\u7ecf\u8fc7\u200bLLM\u200b\u63a8\u7406\u200b\uff0c\u200b\u5f97\u5230\u200bout_tokens. \u200b\u8fd9\u91cc\u200b\u7684\u200bmax_new_tokens\u200b\u5c31\u662f\u200b\u6700\u200b\u591a\u200b\u4ea7\u751f\u200b\u591a\u5c11\u200bout_tokens\n    batch_max_tokens = sum(request.input_tokens + request.max_new_tokens for request in B)\n    token_budget &lt;- max_batch_total_tokens - batch_max_tokens\n\n    # Add new requests to batch B based on token budgets.\n    # max_batch_prefill_tokens\u200b\u5bf9\u5e94\u200b\u524d\u9762\u200b\u8bf4\u200b\u7684\u200b\u53c2\u6570\u200b\uff0cMAX_BATCH_PREFILL_TOKENS\uff08\u200b\u4e00\u4e2a\u200bBatch\u200b\u7684\u200bPrefill\u200b\u9636\u6bb5\u200b\u6700\u200b\u591a\u200b\u652f\u6301\u200b\u591a\u5c11\u200bToken\uff09\n    # \u200b\u53d6\u200bmax_batch_prefill_tokens, token_budget\u200b\u7684\u200b\u8f83\u200b\u5c0f\u503c\u200b\uff0c\u200b\u4f5c\u4e3a\u200btoken\u200b\u4e0a\u9650\u200b\n    B_new &lt;- add_requests_to_batch(request_queue, [], min(max_batch_prefill_tokens, token_budget))\n\n    # If new requests were successfully added, handle prefill and decoding\n    if B_new:\n        # Stop decoding and prefill the new batch B_new\n        prefill(B_new)\n        # Extend the original batch with the new requests\n        # \u200b\u6269\u5145\u200breqeuests\u200b\u5230\u200bB batch\u200b\u4e2d\u200b\n        B.extend(B_new)\n    # Decode the batch B\n    # Decode\u200b\u9636\u6bb5\u200b\uff0c\u200b\u5927\u200b\u8bed\u8a00\u200b\u6a21\u578b\u200b\u901a\u8fc7\u200b\u81ea\u200b\u56de\u5f52\u200b\u7279\u6027\u200b\u4e0d\u65ad\u200b\u751f\u6210\u200b\u65b0\u200b\u7684\u200btoken\n    decode(B)\n\n    # Filter out requests that have reached EOS or max_new_tokens\n    # \u200b\u4e24\u79cd\u200b\u60c5\u51b5\u200b\u8868\u793a\u200b\u8bf7\u6c42\u200b\u5b8c\u6210\u200b\u4e86\u200b\uff0c\u200b\u4ece\u200bBatch\u200b\u4e2d\u200b\u79fb\u9664\u200b\n    # 1. reached_EOS\uff0c\u200b\u9047\u5230\u200b\u7ed3\u675f\u7b26\u200b\uff0c\u200b\u4e0d\u518d\u200b\u4ea7\u751f\u200b\u65b0\u200b\u7684\u200btoken\u200b\u4e86\u200b\n    # 2. decode\u200b\u7684\u200b\u8fc7\u7a0b\u200b\uff0c\u200b\u4ea7\u751f\u200b\u7684\u200btokens\u200b\u6570\u91cf\u200b\u8d85\u8fc7\u200b\u4e86\u200bmax_new_tokens\u200b\u9650\u5236\u200b\uff0c\u200b\u4e5f\u200b\u4e0d\u518d\u200b\u4ea7\u751f\u200b\u65b0\u200b\u7684\u200b\u4e86\u200b\n    B &lt;- [request for request in B if not request.reached_EOS and request.tokens_generated &lt; request.max_new_tokens]\n\n    # Subtract the tokens of completed requests from the token budget\n    # \u200b\u4e5f\u200b\u5c31\u662f\u200b\u4e0a\u9762\u200b\u8bf4\u200b\u7684\u200b\u5b8c\u6210\u200b\u4e86\u200b\u7684\u200b\u8bf7\u6c42\u200b\n    completed_requests &lt;- [request for request in B if request.reached_EOS or request.tokens_generated &gt;= request.max_new_tokens]\n    for request in completed_requests:\n        token_budget &lt;- token_budget - request.input_tokens + request.tokens_generated\n</code></pre><p></p>"},{"location":"blog/text-generation-inference%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6%E5%89%96%E6%9E%90/#\u7528\u4e00\u4e2a\u4f8b\u5b50\u8bf4\u660e\u7b97\u6cd5\u8fc7\u7a0b\u8bd1","title":"\u7528\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b\u8bf4\u660e\u200b\u7b97\u6cd5\u200b\u8fc7\u7a0b\u200b[\u200b\u8bd1\u200b]","text":"\u53d8\u91cf\u540d\u200b \u200b\u503c\u200b \u200b\u7f29\u5199\u200b \u200b\u542b\u4e49\u200b MAX_BATCH_TOTAL_TOKENS 20.5k MBT \u200b\u4e00\u4e2a\u200bBatch\u200b\u6700\u200b\u591a\u200b\u5904\u7406\u200b\u591a\u5c11\u200bToken MAX_BATCH_PREFILL_TOKENS 10k MBP \u200b\u4e00\u4e2a\u200bBatch\u200b\u7684\u200bPrefill\u200b\u9636\u6bb5\u200b\u6700\u200b\u591a\u200b\u652f\u6301\u200b\u591a\u5c11\u200bToken TOTAL_TOKEN_BUDGET 20.5k TTB \u200b\u5f53\u524d\u200b\u65f6\u523b\u200b\u7684\u200b\u603b\u200b\u7684\u200btoken\u200b\u9884\u7b97\u200b\uff0c\u200b\u521d\u59cb\u503c\u200b\u548c\u200bMBT\u200b\u4e00\u6837\u200b QUEUE 20 requests Router\u200b\u5b9e\u73b0\u200b\u4e2d\u200b\u961f\u5217\u200b\uff0c\u200b\u6700\u200b\u591a\u200b\u652f\u6301\u200b20\u200b\u4e2a\u200b\u8bf7\u6c42\u200b <p>\u200b\u63a5\u4e0b\u6765\u200b\u5f00\u59cb\u200b\u9010\u5e27\u200b\u5206\u6790\u200b\u8fd9\u4e2a\u200b\u8fc7\u7a0b\u200b\uff0chaha\uff01\uff01</p>"},{"location":"blog/text-generation-inference%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6%E5%89%96%E6%9E%90/#\u7b2c\u4e00\u5e27","title":"\u7b2c\u4e00\u200b\u5e27","text":""},{"location":"blog/text-generation-inference%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6%E5%89%96%E6%9E%90/#\u7b2c\u4e8c\u5e27","title":"\u7b2c\u4e8c\u200b\u5e27","text":""},{"location":"blog/text-generation-inference%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6%E5%89%96%E6%9E%90/#\u7b2c\u4e09\u5e27","title":"\u7b2c\u4e09\u200b\u5e27","text":"<p>\u200b\u672a\u200b\u5b8c\u200b\u2026</p>"},{"location":"blog/text-generation-inference%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6%E5%89%96%E6%9E%90/#\u53c2\u8003","title":"\u53c2\u8003","text":"<p>Anatomy of TGI for LLM Inference</p> <p>\u200b\u4ec0\u4e48\u200b\u662f\u200b GPT\uff1fTransformer \u200b\u5de5\u4f5c\u200b\u539f\u7406\u200b\u7684\u200b\u52a8\u753b\u200b\u5c55\u793a\u200b\uff082024\uff09</p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>LLM\u200b\u63a8\u7406\u200b\uff1a\u200b\u91cf\u5316\u200b\u7b97\u6cd5\u200b\u6742\u8bb0\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/torch_memory_saver%E9%AB%98%E6%80%A7%E8%83%BDcuda%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E5%AE%9E%E7%8E%B0/","title":"torch_memory_saver\u200b\u9ad8\u6027\u80fd\u200bCUDA\u200b\u5185\u5b58\u200b\u7ba1\u7406\u5de5\u5177\u200b\u5b9e\u73b0","text":"<p>torch_memory_saver\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5f00\u6e90\u200b\u7684\u200b\u9ad8\u6027\u80fd\u200bCUDA\u200b\u5185\u5b58\u200b\u7ba1\u7406\u5de5\u5177\u200b\uff0c\u200b\u4e3b\u8981\u200b\u529f\u80fd\u200b\u662f\u200b\u5141\u8bb8\u200b\u6682\u505c\u200b\u548c\u200b\u6062\u590d\u200bPyTorch\u200b\u5f20\u91cf\u200b\u7684\u200bCUDA\u200b\u5185\u5b58\u200b\u5360\u7528\u200b\u3002\u200b\u4fdd\u6301\u200b\u7528\u6237\u200b\u4f7f\u7528\u200b\u7684\u200b\u865a\u62df\u5730\u5740\u200b\u4e0d\u53d8\u200b\uff0c\u200b\u6682\u505c\u200b\u540e\u200b\u91ca\u653e\u200b\u663e\u5b58\u200b\uff0c\u200b\u6062\u590d\u200b\u91cd\u65b0\u5206\u914d\u200b\u663e\u5b58\u200b\uff0c\u200b\u7ed1\u5b9a\u200b\u5230\u200b\u865a\u62df\u5730\u5740\u200b\u4e0a\u200b\u3002</p> <p>\u200b\u672c\u6587\u200b\u4f1a\u200b\u4ecb\u7ecd\u200b\u6838\u5fc3\u200b\u539f\u7406\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u62e6\u622a\u200bCUDA runtime API\u200b\u7684\u200b\u5b9e\u73b0\u200b\u3002\u200b\u4f60\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bpython c++\u200b\u6269\u5c55\u200b\u3002\u200b\u5728\u200bsglang\u200b\u5927\u200b\u6a21\u578b\u200b\u63a8\u7406\u200b\u5e93\u4e2d\u200b\u4e5f\u200b\u6709\u200b\u4f7f\u7528\u200b\u5230\u200b\u8fd9\u4e2a\u200btorch_memory_saver\u200b\u5e93\u200b\u3002</p>"},{"location":"blog/torch_memory_saver%E9%AB%98%E6%80%A7%E8%83%BDcuda%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E5%AE%9E%E7%8E%B0/#\u6838\u5fc3\u539f\u7406\u548c\u4f7f\u7528\u793a\u4f8b","title":"\u6838\u5fc3\u200b\u539f\u7406\u200b\u548c\u200b\u4f7f\u7528\u200b\u793a\u4f8b","text":"<p>\u200b\u5185\u5b58\u200b\u6682\u505c\u200b/\u200b\u6062\u590d\u200b\u529f\u80fd\u200b\u7684\u200b\u6838\u5fc3\u200b\u5b9e\u73b0\u200b\u539f\u7406\u200b: \u200b\u4f7f\u7528\u200bCUDA\u200b\u865a\u62df\u5185\u5b58\u200b\u7ba1\u7406\u200bAPI\uff08cuMemCreate/cuMemMap\u200b\u7b49\u200b\uff09\u200b\u66ff\u4ee3\u200b\u5e38\u89c4\u200bcudaMalloc, \u200b\u901a\u8fc7\u200bLD_PRELOAD\u200b\u62e6\u622a\u200bcudaMalloc/cudaFree\u200b\u8c03\u7528\u200b, \u200b\u5728\u200b\u7279\u5b9a\u200bregion\u200b\u5185\u200b\uff08\u200b\u4f8b\u5982\u200b\uff1a\u200b\u5728\u200bpython\u200b\u4e2d\u200b\u53ef\u4ee5\u200b\u7528\u200bwith memory_saver.region()\u200b\u8bed\u6cd5\u200b\uff09\u200b\u5206\u914d\u200b\u7684\u200b\u5185\u5b58\u200b\u4f1a\u200b\u88ab\u200b\u7279\u6b8a\u200b\u7ba1\u7406\u200b\u3002</p> <p>\u200b\u4f7f\u7528\u200b\u4f8b\u5b50\u200b\uff1a </p>Python<pre><code>import torch_memory_saver\n\nmemory_saver = torch_memory_saver.memory_saver\n\n# 1. For tensors that wants to be paused, create them within `region`\nwith memory_saver.region():\n    pauseable_tensor = torch.full((1_000_000_000,), 100, dtype=torch.uint8, device='cuda')\n\n# 2. After `pause`, CUDA memory is released for those tensors.\n# For example, check `nvidia-smi`'s memory usage to verify.\nmemory_saver.pause()\n\n# 3. After `resume`, CUDA memory is re-occupied for those tensors.\nmemory_saver.resume()\n</code></pre><p></p>"},{"location":"blog/torch_memory_saver%E9%AB%98%E6%80%A7%E8%83%BDcuda%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E5%AE%9E%E7%8E%B0/#\u6682\u505c\u548c\u6062\u590d\u5b9e\u73b0\u539f\u7406","title":"\u6682\u505c\u200b\u548c\u200b\u6062\u590d\u200b\u5b9e\u73b0\u200b\u539f\u7406","text":"<p>\u200b\u4e0b\u9762\u200b\u4ecb\u7ecd\u200bpause\u200b\u548c\u200bresume\u200b\u7684\u200b\u5b9e\u73b0\u200b\u65b9\u5f0f\u200b\uff1a </p>C++<pre><code>void pause() {\n    // \u200b\u904d\u5386\u200b\u6240\u6709\u200b\u5df2\u200b\u5206\u914d\u5185\u5b58\u200b\n    for (auto it = allocation_metadata_.begin(); ...) {\n        // 1. \u200b\u53d6\u6d88\u200b\u5185\u5b58\u200b\u6620\u5c04\u200b (cuMemUnmap)\n        // 2. \u200b\u91ca\u653e\u200b\u5e95\u5c42\u200b\u5185\u5b58\u200b\u53e5\u67c4\u200b (cuMemRelease)\n        // \u200b\u4fdd\u7559\u200b\u865a\u62df\u5730\u5740\u200b\u7a7a\u95f4\u200b\u4e0d\u200b\u91ca\u653e\u200b\n        CURESULT_CHECK(cuMemUnmap((CUdeviceptr) ptr, metadata.size));\n        CURESULT_CHECK(cuMemRelease(metadata.allocHandle));\n    }\n}\n</code></pre><p></p> <p></p>C++<pre><code>void resume() {\n    // \u200b\u904d\u5386\u200b\u6240\u6709\u200b\u5df2\u200b\u5206\u914d\u5185\u5b58\u200b\n    for (auto it = allocation_metadata_.begin(); ...) {\n        // 1. \u200b\u521b\u5efa\u200b\u65b0\u200b\u7684\u200b\u5185\u5b58\u200b\u53e5\u67c4\u200b (cuMemCreate)\n        // 2. \u200b\u91cd\u65b0\u200b\u6620\u5c04\u200b\u5230\u200b\u539f\u6765\u200b\u7684\u200b\u865a\u62df\u5730\u5740\u200b (cuMemMap)\n        // 3. \u200b\u8bbe\u7f6e\u200b\u8bbf\u95ee\u200b\u6743\u9650\u200b (cuMemSetAccess)\n\n        CUmemGenericAllocationHandle newAllocHandle;\n        CUDAUtils::cu_mem_create(&amp;newAllocHandle, metadata.size, metadata.device);\n        CURESULT_CHECK(cuMemMap((CUdeviceptr) ptr, metadata.size, 0, newAllocHandle, 0));\n        CUDAUtils::cu_mem_set_access(ptr, metadata.size, metadata.device);\n        metadata.allocHandle = newAllocHandle;\n    }\n}\n</code></pre> \u200b\u4f7f\u7528\u200bCUDA\u200b\u865a\u62df\u5185\u5b58\u200bAPI\u200b\u4fdd\u6301\u200b\u865a\u62df\u5730\u5740\u200b\u4e0d\u53d8\u200b\uff0c\u200b\u56e0\u6b64\u200b\u6682\u505c\u200b\u65f6\u200b\u53ea\u200b\u91ca\u653e\u200b\u7269\u7406\u200b\u5185\u5b58\u200b\uff0c\u200b\u4fdd\u7559\u200b\u865a\u62df\u5730\u5740\u200b\u7a7a\u95f4\u200b\u3002\u200b\u6062\u590d\u200b\u65f6\u200b\u91cd\u65b0\u5206\u914d\u200b\u7269\u7406\u200b\u5185\u5b58\u200b\u5e76\u200b\u6620\u5c04\u200b\u5230\u200b\u539f\u200b\u865a\u62df\u5730\u5740\u200b\u3002<p></p> <ul> <li>\u200b\u8c03\u7528\u200bcuMemAddressReserve\u200b\u4fdd\u7559\u200b\u865a\u62df\u5730\u5740\u200b\u7a7a\u95f4\u200b\uff1b</li> <li>\u200b\u901a\u8fc7\u200bcuMemCreate\u200b\u5206\u914d\u200b\u7269\u7406\u200b\u5185\u5b58\u200b\uff1b</li> <li>\u200b\u4f7f\u7528\u200bcuMemMap\u200b\u5c06\u200b\u7269\u7406\u200b\u5185\u5b58\u200b\u6620\u5c04\u200b\u5230\u200b\u865a\u62df\u5730\u5740\u200b\uff1b</li> <li>\u200b\u6700\u540e\u200b\u901a\u8fc7\u200bcuMemSetAccess\u200b\u8bbe\u7f6e\u200b\u8bbf\u95ee\u200b\u6743\u9650\u200b</li> </ul> <p>\u200b\u8fd9\u6837\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u65e0\u9700\u200b\u4fee\u6539\u200b\u6307\u9488\u200b\u5f15\u7528\u200b\uff0c\u200b\u7279\u522b\u200b\u9002\u5408\u200b\u9700\u8981\u200b\u4e34\u65f6\u200b\u91ca\u653e\u200b\u663e\u5b58\u200b\u7684\u200b\u5927\u200b\u6a21\u578b\u200b\u573a\u666f\u200b\u3002</p> <p>\u200b\u518d\u200b\u770b\u770b\u200bmalloc\u200b\u548c\u200bfree\u200b\u7684\u200b\u5b9e\u73b0\u200b\uff1a </p>C++<pre><code>cudaError_t malloc(void **ptr, size_t size, const std::string&amp; tag) {\n    CUdevice device;\n    CURESULT_CHECK(cuCtxGetDevice(&amp;device));\n\n    CUmemGenericAllocationHandle allocHandle;\n    CUDAUtils::cu_mem_create(&amp;allocHandle, size, device);\n    // ptr\u200b\u5c31\u662f\u200b\u4fdd\u7559\u200b\u91cd\u590d\u4f7f\u7528\u200b\u7684\u200b\u865a\u62df\u5730\u5740\u200b\n    CURESULT_CHECK(cuMemAddressReserve((CUdeviceptr *) ptr, size, 0, 0, 0));\n    CURESULT_CHECK(cuMemMap((CUdeviceptr) * ptr, size, 0, allocHandle, 0));\n    CUDAUtils::cu_mem_set_access(*ptr, size, device);\n\n    {\n        const std::lock_guard&lt;std::mutex&gt; lock(allocator_metadata_mutex_);\n        allocation_metadata_.emplace(*ptr, _AllocationMetadata{size, device, allocHandle, tag});\n    }\n}\n\ncudaError_t free(void *ptr) {\n    _AllocationMetadata metadata;\n    {\n        const std::lock_guard &lt;std::mutex&gt; lock(allocator_metadata_mutex_);\n        SIMPLE_CHECK(allocation_metadata_.count(ptr), \"Trying to free a pointer not allocated here\");\n        metadata = allocation_metadata_[ptr];\n        allocation_metadata_.erase(ptr);\n    }\n\n    CURESULT_CHECK(cuMemUnmap((CUdeviceptr) ptr, metadata.size));\n    CURESULT_CHECK(cuMemRelease(metadata.allocHandle));\n    CURESULT_CHECK(cuMemAddressFree((CUdeviceptr) ptr, metadata.size));\n}\n</code></pre><p></p> <p>\u200b\u901a\u8fc7\u200ballocation_metadata_\u200b\u4fdd\u5b58\u200b\u4e86\u200b\u865a\u62df\u200b\u6307\u9488\u200bptr\u200b\u548c\u200b\u6bcf\u6b21\u200b\u5206\u914d\u200b\u7684\u200bmetadata\uff0cmetadata\u200b\u5305\u62ec\u200b\u4e86\u200b\u771f\u5b9e\u200b\u4f7f\u7528\u200b\u7684\u200b\u5185\u5b58\u200ballocHandle\u200b\u548c\u200bsize\u3002</p> <p>\u200b\u5728\u200bpause\u200b\u7684\u200b\u65f6\u5019\u200b\u91ca\u653e\u200ballocHandle\uff0c\u200b\u4f46\u662f\u200b\u4e0d\u200b\u91ca\u653e\u200bptr\u3002\u200b\u5728\u200bassume\u200b\u7684\u200b\u65f6\u5019\u200b\u7533\u8bf7\u200b\u65b0\u200b\u7684\u200ballocHandle\uff0c\u200b\u7ed1\u5b9a\u200bptr\u200b\u548c\u200ballocHandle\u200b\u7684\u200b\u5173\u7cfb\u200b\uff0c\u200b\u5373\u200b\u66f4\u65b0\u200ballocation_metadata_\u200b\u4fdd\u5b58\u200b\u7684\u200bmetadata\u200b\u4fe1\u606f\u200b\u3002</p>"},{"location":"blog/torch_memory_saver%E9%AB%98%E6%80%A7%E8%83%BDcuda%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E5%AE%9E%E7%8E%B0/#\u901a\u8fc7region\u8fdb\u884c\u7ba1\u7406","title":"\u901a\u8fc7\u200bRegion\u200b\u8fdb\u884c\u200b\u7ba1\u7406","text":"<p>\u200b\u901a\u8fc7\u200bRegion\u200b\u8fdb\u884c\u200b\u7ba1\u7406\u200b\uff0c\u200b\u4e0d\u200b\u5728\u200bRegion\u200b\u5185\u200b\u7684\u200b\u5185\u5b58\u200b\u4e0d\u200b\u53d7\u200b\u5f71\u54cd\u200b\uff0c\u200b\u6b63\u5e38\u200b\u4f7f\u7528\u200bCudaMalloc/CudaFree\u3002\u200b\u5728\u200b\u7279\u5b9a\u200bRegion\u200b\u5185\u200b\u5206\u914d\u200b\u7684\u200b\u5185\u5b58\u200b\u4f1a\u200b\u88ab\u200b\u7279\u6b8a\u200b\u7ba1\u7406\u200b\uff0c\u200b\u6682\u505c\u200b\u65f6\u200b\u53ea\u200b\u91ca\u653e\u200b\u7269\u7406\u200b\u5185\u5b58\u200b\uff0c\u200b\u4fdd\u7559\u200b\u865a\u62df\u5730\u5740\u200b\u7a7a\u95f4\u200b\uff0c\u200b\u6062\u590d\u200b\u65f6\u200b\u91cd\u65b0\u5206\u914d\u200b\u7269\u7406\u200b\u5185\u5b58\u200b\u5e76\u200b\u6620\u5c04\u200b\u5230\u200b\u539f\u200b\u865a\u62df\u5730\u5740\u200b\u3002</p> <p>\u200b\u5bf9\u5e94\u200bpython\uff1a </p>Python<pre><code>with memory_saver.region():\n    x = torch.full((1_000_000_000,), 100, dtype=torch.uint8, device='cuda')\n</code></pre><p></p> <p>Region\u200b\u7684\u200b\u5b9e\u73b0\u200b\uff1a</p> <p></p>C++<pre><code>namespace RegionManager {\n    static thread_local bool is_interesting_region_ = false;\n\n    void enter() {\n#ifdef TMS_DEBUG_LOG\n        std::cout &lt;&lt; \"[torch_memory_saver.cpp] tms_region_enter\" &lt;&lt; std::endl;\n#endif\n        is_interesting_region_ = true;\n    }\n\n    void leave() {\n#ifdef TMS_DEBUG_LOG\n        std::cout &lt;&lt; \"[torch_memory_saver.cpp] tms_region_leave\" &lt;&lt; std::endl;\n#endif\n        is_interesting_region_ = false;\n    }\n\n    bool is_interesting_region() {\n        return is_interesting_region_;\n    }\n}\n</code></pre> is_interesting_region\u200b\u51fd\u6570\u200b\uff0c\u200b\u4f1a\u200b\u5728\u200b\u4e0b\u8282\u200b\u62e6\u622a\u200b\u4e2d\u200bcudaMalloc/cudaFree\u200b\u8c03\u7528\u200b\u4e2d\u200b\u533a\u5206\u200b\u4e0d\u540c\u200b\u7684\u200b\u8c03\u7528\u200b\u5b9e\u73b0\u200b\u3002<p></p>"},{"location":"blog/torch_memory_saver%E9%AB%98%E6%80%A7%E8%83%BDcuda%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E5%AE%9E%E7%8E%B0/#ld_preload\u62e6\u622acudamalloccudafree\u8c03\u7528","title":"LD_PRELOAD\u200b\u62e6\u622a\u200bcudaMalloc/cudaFree\u200b\u8c03\u7528","text":"<p>pytorch python\u200b\u5e93\u200b\u505a\u200b\u4e86\u200b\u5927\u91cf\u200b\u7684\u200b\u5c01\u88c5\u200b\uff0c\u200b\u66f4\u52a0\u200b\u53cb\u597d\u200b\u4f7f\u7528\u200b\u3002\u200b\u6bd4\u5982\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200btensor\u200b\u53ea\u200b\u9700\u8981\u200b\u4e0b\u9762\u200b\u4e00\u53e5\u200b\uff0c\u200b\u6307\u5b9a\u200bdatatype\u3001shape\u3001device\u200b\u4e3a\u200bcuda\u3002\u200b\u5b9e\u9645\u4e0a\u200b\u5e95\u5c42\u200b\u4f1a\u200b\u8c03\u7528\u200bcudaMalloc/cudaFree\uff08cudaruntime\u200b\u7684\u200bapi\uff09\u200b\u53bb\u200b\u5206\u914d\u200b\u548c\u200b\u91ca\u653e\u200b\u663e\u5b58\u200b\u3002 </p>Text Only<pre><code>x = torch.full((1_000_000_000,), 100, dtype=torch.uint8, device='cuda')\n</code></pre> \u200b\u4e3a\u4e86\u200b\u80fd\u591f\u200b\u4f7f\u7528\u200b\u4e0a\u200b\u6211\u4eec\u200b\u81ea\u5b9a\u4e49\u200b\u7684\u200b\u5206\u914d\u200b\u903b\u8f91\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5c31\u200b\u9700\u8981\u200b\u62e6\u622a\u200bcudaruntime\u200b\u4e2d\u200b\u5b9e\u73b0\u200b\u7684\u200bcudaMalloc\u200b\u548c\u200bcudaFree\u3002\u200b\u6bd4\u5982\u200b\u5728\u200bRegion\u200b\u533a\u57df\u200b\u5185\u200b\u8c03\u7528\u200b\u81ea\u5b9a\u4e49\u200b\u5206\u914d\u200b\u91ca\u653e\u200b\u903b\u8f91\u200b\uff0c\u200b\u4e0d\u200b\u5728\u200bRegion\u200b\u5185\u200b\u7684\u200b\u5185\u5b58\u200b\uff0c\u200b\u6b63\u5e38\u200b\u8c03\u7528\u200bcudaruntime\u200b\u7684\u200bCudaMalloc/CudaFree\u3002<p></p> <p>\u200b\u4e00\u8d77\u200b\u770b\u770b\u200b\u5982\u4f55\u200b\u62e6\u622a\u200b\uff01</p> <p>\u200b\u81ea\u5b9a\u4e49\u200bcudaMalloc\u200b\u548c\u200bcudaFree\u200b\u51fd\u6570\u200b\u3002\u200b\u5206\u200b\u6761\u4ef6\u200b\u8c03\u7528\u200b\u4e0d\u540c\u200b\u7684\u200b\u903b\u8f91\u200b\u3002 </p>C++<pre><code>cudaError_t cudaMalloc(void **ptr, size_t size) {\n    if (RegionManager::is_interesting_region()) {\n        return TorchMemorySaver::instance().malloc(ptr, size, RegionManager::get_current_tag());\n    } else {\n        return APIForwarder::call_real_cuda_malloc(ptr, size);\n    }\n}\n\ncudaError_t cudaFree(void *ptr) {\n    if (RegionManager::is_interesting_region()) {\n        return TorchMemorySaver::instance().free(ptr);\n    } else {\n        return APIForwarder::call_real_cuda_free(ptr);\n    }\n}\n</code></pre> call_real_cuda_malloc\u200b\u548c\u200bcall_real_cuda_free\u200b\u5c31\u662f\u200b\u8c03\u7528\u200bcudaruntime\u200b\u7684\u200b\u6807\u51c6\u200b\u5b9e\u73b0\u200b\u3002<p></p> <p>\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\uff0c\u200b\u548c\u200b\u6211\u4eec\u200b\u4e0a\u7bc7\u200b\u5c06\u200b\u62e6\u622a\u200b\u7684\u200b\u6587\u7ae0\u200b\u4e00\u6837\u200b\uff0c\u200b\u7528\u5230\u200b\u4e86\u200bdlsym RTLD_NEXT\u200b\u65b9\u5f0f\u200b\u548c\u200bLD_PRELOAD\u200b\u65b9\u5f0f\u200b\u83b7\u53d6\u200bcudaruntime\u200b\u7684\u200b\u5b9e\u73b0\u200b\u3002 </p>C++<pre><code>    static cudaError_t call_real_cuda_malloc(void **ptr, size_t size) {\n        if (C10_UNLIKELY(nullptr == real_cudaMalloc)) {\n            real_cudaMalloc = (CudaMallocFunc) check_dlsym(dlsym(RTLD_NEXT, \"cudaMalloc\"));\n        }\n        cudaError_t ret = real_cudaMalloc(ptr, size);\n        return ret;\n    }\n</code></pre><p></p>"},{"location":"blog/torch_memory_saver%E9%AB%98%E6%80%A7%E8%83%BDcuda%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E5%AE%9E%E7%8E%B0/#\u989d\u5916\u5b66\u4e60\u5230\u7684\u77e5\u8bc6","title":"\u989d\u5916\u200b\u5b66\u4e60\u200b\u5230\u200b\u7684\u200b\u77e5\u8bc6","text":"<p>\u200b\u9664\u6b64\u4e4b\u5916\u200b\uff0c\u200b\u7531\u4e8e\u200b\u6838\u5fc3\u200b\u903b\u8f91\u200b\u662f\u200bc++\u200b\u5b9e\u73b0\u200b\u7684\u200b\uff0c\u200b\u56e0\u6b64\u200b\u4f60\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u672c\u200b\u9879\u76ee\u200b\u5b66\u4f1a\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bpython c/c++\u200b\u6269\u5c55\u200b\uff08setup ext_modules\uff09\u3002</p> <p>\u200b\u548c\u200bpytorch\u200b\u4e00\u6837\u200b\uff0c\u200b\u6700\u7ec8\u200b\u4f7f\u7528\u200btorch_memory_saver\u200b\u662f\u200bpython\u200b\u5305\u200b\u5f62\u5f0f\u200b\u3002\u200b\u5982\u4f55\u200b\u901a\u8fc7\u200b\uff08from contextlib import contextmanager\uff09\u200b\u81ea\u5b9a\u4e49\u200bpython with\u200b\u8bed\u6cd5\u200b\u7cd6\u200b\u3002\u200b\u5982\u4f55\u200b\u8c03\u7528\u200b\u5c01\u88c5\u200bc++\u200b\u6269\u5c55\u200b\u3002\u200b\u5f62\u6210\u200b\u4e00\u4e2a\u200b\u7528\u6237\u200b\u53cb\u597d\u200b\u7684\u200bpython\u200b\u5e93\u200b\u3002</p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>sglang\u200b\u63a8\u7406\u200b\u4f7f\u7528\u200b\u4e4b\u200b\u73af\u5883\u200b\u914d\u7f6e\u200b</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> <li>\u200b\u4ece\u200bDeepseek\u200b\u5f00\u6e90\u200b\u5e93\u200b3FS\u200b\u4e2d\u200b\u5b66\u4e60\u200bfuse\u200b\u7684\u200b\u4f7f\u7528\u200b-\u200b\u5982\u4f55\u200b\u5f00\u53d1\u200b\u4e00\u4e2a\u200b\u6587\u4ef6\u7cfb\u7edf\u200b\uff08\u200b\u4e00\u200b\uff09</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> </ul>"},{"location":"blog/tritonserver-multibatch%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","title":"tritonserver-multibatch\u200b\u6e90\u7801\u200b\u5206\u6790","text":""},{"location":"blog/tritonserver-multibatch%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#\u95ee\u9898","title":"\u95ee\u9898","text":"C++<pre><code>name: \"python_batched_service\"\n\nbackend: \"python\"\nmax_batch_size: 16\n\ndynamic_batching {\n  max_queue_delay_microseconds: 500000\n}\n\ninput [\n  {\n    name: \"input_field\"\n    data_type: TYPE_FP32\n    dims: [ -1 ]\n  }\n]\n\ninstance_group [\n  {\n    count: 1\n    kind: KIND_CPU\n  }\n]\n</code></pre> \u200b\u5bf9\u4e8e\u200b\u4e00\u4e2a\u200b\u8f93\u5165\u200b\u4e3a\u200binput_field\u200b\u7684\u200b\u6a21\u578b\u200b\uff0c\u200b\u5982\u679c\u200b\u8f93\u5165\u200b\u7684\u200bshape\u200b\u4e0d\u540c\u200b\uff0c\u200b\u6bd4\u5982\u200b[1,20]\u200b\u548c\u200b[1,30]\u3001[1\u300140]\uff0c\u200b\u90a3\u4e48\u200bdynamic batching\u200b\u662f\u5426\u200b\u4f1a\u200b\u51d1\u200bbatch\uff1f <p>\u200b\u7b54\u6848\u200b\u662f\u200b\u4e0d\u4f1a\u200b\uff0c\u200b\u53ea\u6709\u200b\u8fde\u7eed\u200b\u53d1\u9001\u200b\u7684\u200b[1,20]\u200b\u8fd9\u79cd\u200b\u76f8\u540c\u200b\u8f93\u5165\u200bshape\u200b\u7684\u200b\u8bf7\u6c42\u200b\u624d\u200b\u4f1a\u200b\u51d1\u200bbatch\u3002\u200b\u4e0d\u200b\u4e00\u6837\u200b\u7684\u200b\u53eb\u200b\u4e0d\u89c4\u5219\u200b\u8f93\u5165\u200b\uff0c\u200b\u4e5f\u200b\u53eb\u200bragged batch\u3002</p> <p>\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200bpython\u200b\u4f8b\u5b50\u200b\u3002</p> <p>https://github.com/triton-inference-server/server/issues/6937</p> <p>https://github.com/triton-inference-server/server/blob/main/docs/protocol/extension_statistics.md</p>"},{"location":"blog/tritonserver-multibatch%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#tritonserver","title":"tritonserver","text":"<p>\u200b\u4e0d\u540c\u200bshape\uff0c\u200b\u91c7\u7528\u200bdynamic batching\u200b\u65b9\u5f0f\u200b\u4e0d\u4f1a\u200b\u51d1\u200bbatch\u3002</p> <p>\u200b\u9700\u8981\u200b\u91c7\u7528\u200bragged batching\u200b\u65b9\u5f0f\u200b\u3002\u200b\u6216\u8005\u200b\u5c06\u200bproto3\u200b\u7684\u200bint32\u200b\u6539\u6210\u200bfixed32\uff0c\u200b\u4ee5\u53ca\u200b\u907f\u514d\u200b\u4f20\u8f93\u200b0\u3002</p> C++<pre><code>// repo-core-src/src/backend_model.cc\nStatus\nTritonModel::SetConfiguredScheduler()\n{\n  std::unique_ptr&lt;Scheduler&gt; scheduler;\n\n  // Need to enforce equal shape batches (i.e. non-ragged batches) if\n  // the model 1) allows one or more variable-size input tensors that\n  // are not marked as 'allow_ragged_batch' or 2) has one or more\n  // shape-tensor inputs. This is not needed if all input shapes are\n  // non-variable and if there are no shape tensors... so we don't\n  // enable it in that case for efficiency reasons.\n  std::unordered_map&lt;std::string, bool&gt; enforce_equal_shape_tensors;\n  for (const auto input : config_.input()) {\n    // https://docs.nvidia.com/deeplearning/triton-inference-server/user-guide/docs/user_guide/model_configuration.html#shape-tensors, \u200b\u76ee\u524d\u200b\u53ea\u6709\u200bTensorRT\u200b\u652f\u6301\u200bshape_tensor\u3002\n    if (input.is_shape_tensor()) {\n      enforce_equal_shape_tensors.insert({input.name(), true});\n    } else if (\n        !input.allow_ragged_batch() &amp;&amp;\n        (triton::common::GetElementCount(input) == -1)) {\n      enforce_equal_shape_tensors.insert({input.name(), false});\n    }\n  }\n    // ......\n\n    RETURN_IF_ERROR(DynamicBatchScheduler::Create(\n    this, nullptr, 0 /*nice*/, true /* dynamic_batching_enabled */,\n    config_.max_batch_size(), enforce_equal_shape_tensors,\n    config_.dynamic_batching(),\n    config_.response_cache().enable() /* response_cache_enable */,\n    &amp;scheduler));\n}\n</code></pre> C++<pre><code>// _deps/repo-core-src/src/dynamic_batch_scheduler.cc\nuint64_t\nDynamicBatchScheduler::GetDynamicBatch(){\n\n    // When there is optional input or input shape must be enforced,\n    // the inputs in the requests must be examined for forming a batch\n    const bool check_input =\n        !enforce_equal_shape_tensors_.empty() || has_optional_input_;\n\n    // If there is no pending batch, then this request is starting a\n    // new batch.\n    if ((payload_batch_size + queue_.PendingBatchCount()) == 0) {\n      // Get the shape of the new batch that is being started...\n      if (check_input) {\n        if (!curr_payload_-&gt;MutableRequiredEqualInputs()\n                 -&gt;Initialize(\n                     queue_.RequestAtCursor(), enforce_equal_shape_tensors_,\n                     has_optional_input_)\n                 .IsOk()) {\n          send_now = true;\n          break;\n        }\n      }\n    } else {\n      // There is a pending batch and adding this request would make\n      // the batch size larger than all of the preferred batch sizes,\n      // so mark the cursor at this point. Not sending the pending batch so\n      // that we can examine the queue delay of requests that fits in a batch.\n      if (((payload_batch_size + pending_batch_size_ + batch_size) &gt;\n           max_preferred_batch_size_) &amp;&amp;\n          (best_preferred_batch_size == 0)) {\n        best_preferred_batch_size = pending_batch_size_;\n        queue_.MarkCursor();\n        payload_saturated_ = true;\n      }\n      if ((payload_batch_size + pending_batch_size_ + batch_size) &gt;\n          max_batch_size_) {\n        send_now = true;\n        break;\n      }\n\n      // There is a pending batch and it has a different shape then\n      // this request, so send the pending batch as it is.\n      if (check_input &amp;&amp;\n          !curr_payload_-&gt;MutableRequiredEqualInputs()-&gt;HasEqualInputs(\n              queue_.RequestAtCursor())) {\n        curr_payload_-&gt;MarkSaturated();\n        send_now = true;\n        break;\n      }\n    }\n\n    // \u200b\u76f4\u63a5\u200b\u53d1\u9001\u200b\n    // If the delay has been exceeded, or if the current batch can't grow\n    // any larger then just immediately execute whatever is pending.\n    if (send_now || ((payload_batch_size + pending_batch_size_) &gt;=\n                    max_preferred_batch_size_)) {\n        payload_saturated_ = true;\n        return 0;\n    }\n}\n</code></pre> C++<pre><code>bool\nRequiredEqualInputs::HasEqualInputs(\n    const std::unique_ptr&lt;InferenceRequest&gt;&amp; request){\n        //......\n        const auto&amp; d1 = itr-&gt;second.first-&gt;Data();\n          const auto&amp; d2 = input-&gt;Data();\n\n          // For now being conservative and assuming that content\n          // comparison is for shape tensors which are likely to always\n          // be in a single buffer.\n          if ((d1-&gt;BufferCount() != 1) || (d2-&gt;BufferCount() != 1)) {\n            return false;\n          }\n\n          size_t d1_byte_size, d2_byte_size;\n          TRITONSERVER_MemoryType d1_memory_type, d2_memory_type;\n          int64_t d1_memory_id, d2_memory_id;\n          const char* d1_buffer = d1-&gt;BufferAt(\n              0 /* idx */, &amp;d1_byte_size, &amp;d1_memory_type, &amp;d1_memory_id);\n          const char* d2_buffer = d2-&gt;BufferAt(\n              0 /* idx */, &amp;d2_byte_size, &amp;d2_memory_type, &amp;d2_memory_id);\n\n          // Tensor must be same size and in in CPU memory so that it\n          // can be easily compared. If not return false conservatively.\n          if ((d1_byte_size != d2_byte_size) || (d1_buffer == nullptr) ||\n              (d2_buffer == nullptr) ||\n              (d1_memory_type == TRITONSERVER_MEMORY_GPU) ||\n              (d2_memory_type == TRITONSERVER_MEMORY_GPU)) {\n            return false;\n          }\n\n          if (strncmp(d1_buffer, d2_buffer, d1_byte_size) != 0) {\n            return false;\n          }\n    }\n</code></pre>"},{"location":"blog/tritonserver-multibatch%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#\u91c7\u7528ragged-batch","title":"\u91c7\u7528\u200bragged batch","text":"Text Only<pre><code>max_batch_size: 16\ninput [\n  {\n    name: \"INPUT\"\n    data_type: TYPE_FP32\n    dims: [ -1 ]\n  }\n]\n</code></pre> \u200b\u6539\u4e3a\u200b\uff1a Text Only<pre><code>max_batch_size: 16\ninput [\n  {\n    name: \"INPUT\"\n    data_type: TYPE_FP32\n    dims: [ -1 ]\n    allow_ragged_batch: true\n  }\n]\n</code></pre> <p>python backend\u200b\u548c\u200b\u4e00\u822c\u200b\u81ea\u5b9a\u4e49\u200b\u7684\u200bbackend\u200b\u90fd\u200b\u4e0d\u200b\u9700\u8981\u200b\u52a0\u200b\uff1a </p>Text Only<pre><code>batch_input [\n  {\n    kind: BATCH_ACCUMULATED_ELEMENT_COUNT\n    target_name: \"INDEX\"\n    data_type: TYPE_FP32\n    source_input: \"INPUT\"\n  }\n]\n</code></pre><p></p> <p>The backends, such as ONNX Runtime backend, TensorFlow backend, PyTorch backend, and TensorRT backend, require models to accept ragged inputs as 1-dimensional tensors. These backends concatenates the request inputs into the 1-dimensional tensor.Because the concatenated input doesn\u2019t track the start and end index for each request, the backends often require the model to have additional input(s), batch input, that describe various information about the batch formed. https://docs.nvidia.com/deeplearning/triton-inference-server/user-guide/docs/user_guide/ragged_batching.html</p> <p>\u200b\u50cf\u200bONNX Runtime backend, TensorFlow backend, PyTorch backend, and TensorRT backend\uff0c\u200b\u5c06\u200brequest inputs \u200b\u62fc\u63a5\u200b\u6210\u200b1\u200b\u7ef4\u200btensor\uff0c\u200b\u4f46\u662f\u200b\u8fd9\u4e2a\u200b\u62fc\u63a5\u200b\u7684\u200btensor\u200b\u65e0\u6cd5\u200b\u8ddf\u8e2a\u200b\u6bcf\u4e2a\u200brequest\u200b\u7684\u200bstart\u200b\u548c\u200bend index\uff0c\u200b\u6240\u4ee5\u200b\u9700\u8981\u200b\u989d\u5916\u200b\u7684\u200bbatch input\u200b\u6765\u200b\u63cf\u8ff0\u200bbatch\u200b\u7684\u200b\u6784\u6210\u200b\u3002</p> <p>\u200b\u53ef\u4ee5\u200b\u67e5\u770b\u200b\u5b9e\u73b0\u200b\uff1a </p>C++<pre><code>// https://github1s.com/triton-inference-server/onnxruntime_backend/blob/main/src/onnxruntime.cc\n</code></pre><p></p>"},{"location":"blog/tritonserver-multibatch%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#proto3","title":"proto3","text":"<p>proto\u200b\u7684\u200b\u89c4\u5219\u200b\uff0cint32\u200b\u7c7b\u578b\u200b\u7684\u200b0\u200b\u503c\u200b\u5e8f\u5217\u5316\u200b\u4e0d\u200b\u5360\u7528\u200b\u5b57\u8282\u6570\u200b\uff0c\u200b\u975e\u200b0\u200b\u7f16\u7801\u200b\u91c7\u7528\u200bvariant\uff0c\u200b\u6570\u5b57\u200b\u6839\u636e\u200b\u5927\u5c0f\u200b\u4e0d\u540c\u200b\uff0c\u200b\u5728\u200b2-5\u200b\u4e2a\u200b\u5b57\u8282\u200b\u53d8\u5316\u200b\u3002</p> <p></p>C++<pre><code>syntax = \"proto3\";\n\npackage hello.proto;\nmessage Image {\n    int32 device_id = 1;\n    int32 fd = 2;\n    bytes data = 3;\n}\nmessage ImageSet {\n    repeated Image images = 1;\n}\n</code></pre> \u200b\u9700\u8981\u200b\u6539\u6210\u200b\uff1a C++<pre><code>syntax = \"proto3\";\n\npackage hello.proto;\nmessage Image {\n    fixed32 device_id = 1;\n    fixed32 fd = 2;\n    bytes data = 3;\n}\nmessage ImageSet {\n    repeated Image images = 1;\n}\n</code></pre> fixed32\u200b\u53ea\u80fd\u200b\u89e3\u51b3\u200b\u975e\u200b0\u200b\u503c\u200b\u7684\u200b\u5e8f\u5217\u5316\u200b\u540e\u200b\u957f\u5ea6\u200b\u4fdd\u6301\u4e00\u81f4\u200b\uff0c\u200b\u540c\u65f6\u200b\u9700\u8981\u200b\u907f\u514d\u200bdevice_id\u200b\u548c\u200bfd\u200b\u4f20\u9012\u200b0\uff0c\u200b\u6bd4\u5982\u200b\u53ef\u4ee5\u200b\u5148\u52a0\u200b1\uff0c\u200b\u4ece\u200b1\u200b\u5f00\u59cb\u200b\u3002\u200b\u4f20\u9012\u200b\u5230\u200bserver\u200b\u540e\u200b\u518d\u200b\u51cf\u200b1\u3002<p></p>"},{"location":"blog/tritonserver-multibatch%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#python-backend\u4f8b\u5b50","title":"python backend\u200b\u4f8b\u5b50","text":"<p>model.py </p>Python<pre><code>import triton_python_backend_utils as pb_utils\n\n\nclass TritonPythonModel:\n    def initialize(self, args):\n        pass\n\n    def execute(self, requests):\n        num_requests = len(requests)\n        print(f\"Received a batch containing {num_requests} request(s)\")\n\n        responses = [\n            pb_utils.InferenceResponse(output_tensors=[])\n            for _ in range(num_requests)\n        ]\n        return responses\n\n    def finalize(self):\n        print(\"Cleaning up...\")\n</code></pre><p></p> <p>client.py </p>Python<pre><code>import tritonclient.grpc as grpcclient\nimport numpy as np\n\n\ntriton_client = grpcclient.InferenceServerClient(\n    url=\"localhost:8001\",\n    verbose=False,\n)\n\n\ndef callback(result, error):\n    if error:\n        print(error)\n    pass\n\n\ndef send_single_request(array):\n    inputs = [\n        grpcclient.InferInput(\"input_field\", array.shape, \"FP32\")\n    ]\n    inputs[0].set_data_from_numpy(array)\n\n    triton_client.async_infer(\n        model_name=\"python_batched_service\",\n        inputs=inputs,\n        model_version=\"1\",\n        outputs=[],\n        callback=callback,\n    )\n\ndef send_many_requests(input_sizes):\n    for ix in range(200):\n        size = input_sizes[ix % len(input_sizes)]\n        array = np.random.rand(*size).astype(np.float32)\n        send_single_request(array=array)\n\n\nif __name__ == \"__main__\":\n    send_many_requests(input_sizes=[\n        (1, 20,),\n    ])\n\n    send_many_requests(input_sizes=[\n        (1, 20,),\n        (1, 40),\n        (1, 60),\n    ])\n</code></pre><p></p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>sglang\u200b\u63a8\u7406\u200b\u4f7f\u7528\u200b\u4e4b\u200b\u73af\u5883\u200b\u914d\u7f6e\u200b</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> <li>\u200b\u4ece\u200bDeepseek\u200b\u5f00\u6e90\u200b\u5e93\u200b3FS\u200b\u4e2d\u200b\u5b66\u4e60\u200bfuse\u200b\u7684\u200b\u4f7f\u7528\u200b-\u200b\u5982\u4f55\u200b\u5f00\u53d1\u200b\u4e00\u4e2a\u200b\u6587\u4ef6\u7cfb\u7edf\u200b\uff08\u200b\u4e00\u200b\uff09</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> </ul>"},{"location":"blog/tritonserver-ratelimiter%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","title":"tritonserver-ratelimiter\u200b\u6e90\u7801\u200b\u5206\u6790","text":""},{"location":"blog/tritonserver-ratelimiter%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#tritonserver\u8c03\u5ea6\u5668","title":"tritonserver\u200b\u8c03\u5ea6\u200b\u5668","text":"<p>\u200b\u4e09\u79cd\u200b\u8c03\u5ea6\u200b\u5668\u200b\uff1a</p> <ul> <li> <p>emsemble schedulor</p> </li> <li> <p>dynamicbatch scheduler</p> </li> <li> <p>sequece scheduler</p> </li> </ul> <p>\u200b\u4ee5\u200bmetric\u200b\u4e3a\u200b\u5165\u53e3\u200b\u5bf9\u200b\u6e90\u7801\u200b\u8fdb\u884c\u200b\u5206\u6790\u200b\uff0c</p> <p>metric\u200b\u63d0\u4f9b\u200b\u4e86\u200bhttp\u200b\u63a5\u53e3\u200b\uff0c\u200b\u7edf\u8ba1\u200b\u4e86\u200bnv_inference_compute_infer_duration_us\u200b\u548c\u200bnv_inference_queue_duration_us\u200b\u6307\u6807\u200b\u3002</p> Python<pre><code>count_pattern = re.compile(r'nv_inference_count\\{model=\"([^\"]+)\".*\\} (\\d+)')\nduration_pattern = re.compile(r'nv_inference_request_duration_us\\{model=\"([^\"]+)\".*\\} (\\d+)')\ncompute_duration_pattern = re.compile(r'nv_inference_compute_infer_duration_us\\{model=\"([^\"]+)\".*\\} (\\d+)')\nqueue_duration_pattern = re.compile(r'nv_inference_queue_duration_us\\{model=\"([^\"]+)\".*\\} (\\d+)')\n</code></pre>"},{"location":"blog/tritonserver-ratelimiter%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#metric\u7edf\u8ba1nv_inference_queue_duration_us\u548cnv_inference_compute_infer_duration_us\u6307\u6807","title":"metric\u200b\u7edf\u8ba1\u200bnv_inference_queue_duration_us\u200b\u548c\u200bnv_inference_compute_infer_duration_us\u200b\u6307\u6807","text":"<p>\u200b\u6ce8\u518c\u200b\u6307\u6807\u200b\u5230\u200bprometheus_registry_\u200b\u4e2d\u200b\u3002 </p>C++<pre><code>      inf_request_duration_us_family_(\n          prometheus::BuildCounter()\n              .Name(\"nv_inference_request_duration_us\")\n              .Help(\"Cumulative inference request duration in microseconds \"\n                    \"(includes cached requests)\")\n              .Register(*registry_)),\n      inf_queue_duration_us_family_(\n          prometheus::BuildCounter()\n              .Name(\"nv_inference_queue_duration_us\")\n              .Help(\"Cumulative inference queuing duration in microseconds \"\n                    \"(includes cached requests)\")\n              .Register(*registry_)),\n</code></pre><p></p> C++<pre><code>counter_families_[\"queue_duration\"] =\n        &amp;Metrics::FamilyInferenceQueueDuration();\n</code></pre> <p>\u200b\u5168\u5c40\u200b\u641c\u7d22\u200b\u201cqueue_duration\u201d\u200b\u627e\u5230\u200b\u201cuint64_t queue_duration_ns_;\u201d\u200b\u5728\u200binfer_stats.h\u200b\u4e2d\u200b\u3002\u200b\u8fdb\u800c\u200b\u53ef\u4ee5\u200b\u627e\u5230\u200b\u5982\u4f55\u200b\u7edf\u8ba1\u200b\u7684\u200b\u4e86\u200b\u3002 </p>C++<pre><code>const uint64_t queue_duration_ns = compute_start_ns - queue_start_ns;\n</code></pre><p></p>"},{"location":"blog/tritonserver-ratelimiter%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#dynamicbatch-scheduler\u4e2d\u8c03\u5ea6\u6d41\u7a0b","title":"Dynamicbatch scheduler\u200b\u4e2d\u200b\u8c03\u5ea6\u200b\u6d41\u7a0b","text":"<p>RateLimiter::EnqueuePayload\uff1aDynamicBatchScheduler::BatcherThread\u200b\u7ebf\u7a0b\u200b\u8c03\u5ea6\u200b\u3002cv_.wait_for\uff0c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u67e5\u8be2\u200bcv_\u200b\u627e\u5230\u200b\u5728\u200b\u54ea\u513f\u200b\u653e\u5165\u200b\u8d44\u6e90\u200b\u7684\u200b\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200bcv_.notify_one()\u3002DynamicBatchScheduler::Enqueue\u200b\u51fd\u6570\u200b\u4e2d\u200b\uff0c\u200b\u5c06\u200brequests Enqueue\u3002</p> <p>\u200b\u524d\u9762\u200b\u8bf4\u200b\u7684\u200bmetric\u200b\u7edf\u8ba1\u200b\u7684\u200b\u5165\u961f\u200b\u65f6\u95f4\u200b\u5c31\u662f\u200b\u5728\u200bDynamicBatchScheduler::Enqueue\u200b\u51fd\u6570\u200b\u51fd\u6570\u200b\u8fdb\u5165\u200b\u65f6\u200b\u521d\u59cb\u5316\u200b\u7684\u200b\uff0c request-&gt;CaptureQueueStartNs()\u3002(Emsemble\u200b\u8c03\u5ea6\u200b\u4e2d\u200b\u4e5f\u200b\u6709\u200b\u8fd9\u4e2a\u200bEnqueue\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u521d\u59cb\u5316\u200benqueue\u200b\u65f6\u95f4\u200b\u70b9\u200b)\u3002</p> <p>SchedulePayload\uff1a\u200b\u5c06\u200bplayload\u200b\u653e\u5165\u200bpayload_queue-&gt;queue_\u200b\u548c\u200bpayload_queue-&gt;specific_queues_\uff08\u200b\u4e0e\u200b\u5177\u4f53\u200b\u7684\u200bmodel_instance\u200b\u76f8\u5173\u200b\uff09\u3002</p> <p>RateLimiter::DequeuePayload\uff1aTritonModelInstance::TritonBackendThread::BackendThread()\u200b\u6a21\u578b\u200b\u5b9e\u4f8b\u200b\u7ebf\u7a0b\u200b\u8c03\u7528\u200b\uff0c\u200b\u7531\u200b\u4ece\u200bpayload_queue-&gt;queue_-&gt;Dequeue\u200b\u83b7\u53d6\u200bpayload\uff0c\u200b\u6216\u8005\u200b\u5bf9\u200bplayload\u200b\u4e2d\u200b\u7684\u200brequests\u200b\u8fdb\u884c\u200bmerge\uff08batch\u200b\u8c03\u5ea6\u200b\uff09\u3002</p> <p>RateLimiter\u200b\u4e2d\u200b\u7684\u200bmerge\u200b\u4f1a\u200b\u6839\u636e\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u7684\u200b\u6700\u5927\u200bbatch\u200b\u6570\u200b\u548c\u200b\u7b49\u5f85\u65f6\u95f4\u200b\u8fdb\u884c\u200bmerge\u3002</p>"},{"location":"blog/tritonserver-ratelimiter%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#esemble-scheduler\u4e2d\u8c03\u5ea6\u6d41\u7a0b","title":"Esemble scheduler\u200b\u4e2d\u200b\u8c03\u5ea6\u200b\u6d41\u7a0b","text":"C++<pre><code>void\nEnsembleContext::Proceed(\n    const std::shared_ptr&lt;EnsembleContext&gt;&amp; context,\n    const std::unique_ptr&lt;Step&gt;&amp; completed_step)\n{\n  StepList ready_steps;\n  Status status = context-&gt;PrepareSteps(completed_step, &amp;ready_steps);\n  if (status.IsOk()) {\n    ScheduleSteps(context, std::move(ready_steps));\n  }\n}\n</code></pre> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>tritonserver-multibatch\u200b\u6e90\u7801\u200b\u5206\u6790\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/tritonserver%E4%B8%ADshm%E4%BD%BF%E7%94%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/","title":"Tritonserver\u200b\u4e2d\u200bshm\u200b\u4f7f\u7528\u200b\u6e90\u4ee3\u7801\u200b\u5206\u6790","text":""},{"location":"blog/tritonserver%E4%B8%ADshm%E4%BD%BF%E7%94%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/#tritonserver\u4e2dshm\u4f7f\u7528\u6e90\u4ee3\u7801\u5206\u6790","title":"Tritonserver\u200b\u4e2d\u200bshm\u200b\u4f7f\u7528\u200b\u6e90\u4ee3\u7801\u200b\u5206\u6790","text":"<p>\u200b\u4ece\u200b\u6e90\u7801\u200b\u63a2\u7d22\u200bTritonserver\u200b\u4e2d\u200bshm\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b\uff0c\u200b\u5305\u62ec\u200bsystem shm\u200b\u548c\u200bcuda ipc shm\u3002\u200b\u4e00\u4e2a\u200bshm req\u200b\u5982\u4f55\u200b\u4f20\u9012\u200b\u7ed9\u200bserver\uff0c\u200b\u7136\u540e\u200b\u5728\u200bbackend\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u3002 \u200b\u5728\u200bserver\u200b\u9879\u76ee\u200b\u4e2d\u200b\uff0c\u200b\u521d\u59cb\u5316\u200b\u4e86\u200bshmmanager\u3002 </p>C++<pre><code>// tritonserver/server/src/main.cc\n// Manager for shared memory blocks.\nauto shm_manager = std::make_shared&lt;triton::server::SharedMemoryManager&gt;();\n</code></pre> \u200b\u7136\u540e\u200b\u521d\u59cb\u5316\u200bGRPC server\uff0c\u200b\u5c06\u200bshm_manager\u200b\u4f20\u5165\u200b\u3002 C++<pre><code>// Start the HTTP, GRPC, and metrics endpoints.\nif (!StartEndpoints(server, trace_manager, shm_manager)) {\nexit(1);\n}\n</code></pre> \u200b\u5728\u200bgrpc server\u200b\u4e2d\u200b\uff0c\u200b\u91c7\u7528\u200b\u5f02\u6b65\u200b\u65b9\u5f0f\u200b\u5904\u7406\u200b\u4e0d\u540c\u200b\u7c7b\u578b\u200b\u7684\u200b\u8bf7\u6c42\u200b\u3002\u200b\u5206\u4e3a\u200b\u4e09\u79cd\u200b\uff1a C++<pre><code>// server/src/grpc/grpc_server.cc\n// common\u200b\u8bf7\u6c42\u200b\u961f\u5217\u200b\nstd::unique_ptr&lt;::grpc::ServerCompletionQueue&gt; common_cq_;\n// \u200b\u6a21\u578b\u200b\u63a8\u7406\u200b\u8bf7\u6c42\u200b\u961f\u5217\u200b\nstd::unique_ptr&lt;::grpc::ServerCompletionQueue&gt; model_infer_cq_;\n// \u200b\u6a21\u578b\u200b\u6d41\u5f0f\u200b\u63a8\u7406\u200b\u8bf7\u6c42\u200b\u961f\u5217\u200b\nstd::unique_ptr&lt;::grpc::ServerCompletionQueue&gt; model_stream_infer_cq_;\n</code></pre><p></p>"},{"location":"blog/tritonserver%E4%B8%ADshm%E4%BD%BF%E7%94%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/#common-\u8bf7\u6c42\u5904\u7406","title":"common \u200b\u8bf7\u6c42\u200b\u5904\u7406","text":"<p>\u200b\u5728\u200bcommon\u200b\u8bf7\u6c42\u200b\u4e2d\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u7c7b\u578b\u200b\u5c31\u662f\u200b\u4e00\u4e2a\u200bCommonCallData\u200b\u7c7b\u578b\u200b\uff0c\u200b\u8be5\u200b\u7c7b\u578b\u200b\u5305\u62ec\u200b\u4e86\u200b\u8bf7\u6c42\u200b\u7684\u200b\u56de\u8c03\u200b\u51fd\u6570\u200b\u3002\u200b\u5728\u200bthread\u200b\u4e2d\u200b\u8c03\u7528\u200b\u56de\u8c03\u200b\u51fd\u6570\u200b\uff0c\u200b\u5904\u7406\u200b\u8bf7\u6c42\u200b\u3002 commonhandler\u200b\u4e2d\u200b\u6ce8\u518c\u200b\u4e86\u200b\u5982\u4e0b\u200bcommon\u200b\u8bf7\u6c42\u200b\u7c7b\u578b\u200b\uff1a </p>C++<pre><code>  void RegisterServerLive();\n  void RegisterServerReady();\n  void RegisterHealthCheck();\n  void RegisterModelReady();\n  void RegisterServerMetadata();\n  void RegisterModelMetadata();\n  void RegisterModelConfig();\n  void RegisterModelStatistics();\n  void RegisterTrace();\n  void RegisterLogging();\n  void RegisterSystemSharedMemoryStatus();\n  void RegisterSystemSharedMemoryRegister();\n  void RegisterSystemSharedMemoryUnregister();\n  void RegisterCudaSharedMemoryStatus();\n  void RegisterCudaSharedMemoryRegister();\n  void RegisterCudaSharedMemoryUnregister();\n  void RegisterRepositoryIndex();\n  void RegisterRepositoryModelLoad();\n  void RegisterRepositoryModelUnload();\n</code></pre> gpu ipc shm\u200b\u548c\u200bsys shm\u200b\u5c31\u200b\u5728\u200b\u5176\u4e2d\u200b\u7684\u200b\u51fd\u6570\u200b\u6ce8\u518c\u200b\u4e86\u200b, \u200b\u901a\u8fc7\u200bshm_manager\u200b\u6ce8\u518c\u200b\u7ba1\u7406\u200bname, raw_handle, byte_size, device_id\u200b\u7b49\u200b\u3002 C++<pre><code>void\nCommonHandler::RegisterCudaSharedMemoryRegister()\n{\n  auto OnRegisterCudaSharedMemoryRegister =\n      [this](\n          ::grpc::ServerContext* ctx,\n          inference::CudaSharedMemoryRegisterRequest* request,\n          ::grpc::ServerAsyncResponseWriter&lt;\n              inference::CudaSharedMemoryRegisterResponse&gt;* responder,\n          void* tag) {\n        this-&gt;service_-&gt;RequestCudaSharedMemoryRegister(\n            ctx, request, responder, this-&gt;cq_, this-&gt;cq_, tag);\n      };\n\n  auto OnExecuteCudaSharedMemoryRegister =\n      [this](\n          inference::CudaSharedMemoryRegisterRequest&amp; request,\n          inference::CudaSharedMemoryRegisterResponse* response,\n          ::grpc::Status* status) {\n        TRITONSERVER_Error* err = nullptr;\n#ifdef TRITON_ENABLE_GPU\n        err = shm_manager_-&gt;RegisterCUDASharedMemory(\n            request.name(),\n            reinterpret_cast&lt;const cudaIpcMemHandle_t*&gt;(\n                request.raw_handle().c_str()),\n            request.byte_size(), request.device_id());\n#else\n        err = TRITONSERVER_ErrorNew(\n            TRITONSERVER_ERROR_INVALID_ARG,\n            std::string(\n                \"failed to register CUDA shared memory region: '\" +\n                request.name() + \"', GPUs not supported\")\n                .c_str());\n#endif  // TRITON_ENABLE_GPU\n\n        GrpcStatusUtil::Create(status, err);\n        TRITONSERVER_ErrorDelete(err);\n      };\n\n  const std::pair&lt;std::string, std::string&gt;&amp; restricted_kv =\n      restricted_keys_.Get(RestrictedCategory::SHARED_MEMORY);\n  new CommonCallData&lt;\n      ::grpc::ServerAsyncResponseWriter&lt;\n          inference::CudaSharedMemoryRegisterResponse&gt;,\n      inference::CudaSharedMemoryRegisterRequest,\n      inference::CudaSharedMemoryRegisterResponse&gt;(\n      \"CudaSharedMemoryRegister\", 0, OnRegisterCudaSharedMemoryRegister,\n      OnExecuteCudaSharedMemoryRegister, false /* async */, cq_, restricted_kv,\n      response_delay_);\n}\n</code></pre><p></p>"},{"location":"blog/tritonserver%E4%B8%ADshm%E4%BD%BF%E7%94%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/#infer-grpc\u8bf7\u6c42","title":"infer grpc\u200b\u8bf7\u6c42","text":""},{"location":"blog/tritonserver%E4%B8%ADshm%E4%BD%BF%E7%94%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/#request-\u5904\u7406","title":"request \u200b\u5904\u7406","text":"C++<pre><code>ModelInferHandler::Execute(InferHandler::State* state){\n  // Maintain shared pointers(read-only reference) to the shared memory block's\n  // information for the shared memory regions used by the request. These\n  // pointers will automatically increase the usage count, preventing\n  // unregistration of the shared memory. This vector must be cleared in the\n  // `InferResponseComplete` callback (after inference) to decrease the count\n  // and permit unregistration. The vector will be included in\n  // `response_release_payload` for the callback.\n  std::vector&lt;std::shared_ptr&lt;const SharedMemoryManager::SharedMemoryInfo&gt;&gt;\n      shm_regions_info;\n\n  if (err == nullptr) {\n    err = InferGRPCToInput(\n        tritonserver_, shm_manager_, request, &amp;serialized_data, irequest,\n        &amp;shm_regions_info);\n  }\n  if (err == nullptr) {\n    err = InferAllocatorPayload&lt;inference::ModelInferResponse&gt;(\n        tritonserver_, shm_manager_, request, std::move(serialized_data),\n        response_queue, &amp;state-&gt;alloc_payload_, &amp;shm_regions_info);\n  }\n}\n</code></pre> <p>\u200b\u5728\u200bInferGRPCToInput\u200b\u5982\u679c\u200breq\u200b\u662f\u200bshm\u200b\u4fe1\u606f\u200b\u7684\u200b\uff0c\u200b\u5c31\u200b\u4f1a\u200b\u83b7\u53d6\u200bshm\u200b\u4fe1\u606f\u200b\u3002\u200b\u7136\u540e\u200b\u5c06\u200bshm\u200b\u4fe1\u606f\u200b\u7ed1\u5b9a\u200b\u5230\u200breq\u200b\u7684\u200bBufferAttributes\u200b\u4e2d\u200b\u3002\u200b\u7136\u540e\u200b\u8c03\u7528\u200binfer\uff0c\u200b\u8df3\u8f6c\u200b\u7684\u200bschedule\u200b\u6a21\u5757\u200b\uff08\u200b\u62bd\u8c61\u7c7b\u200b\uff09\uff0c\u200b\u518d\u200b\u4ea4\u7ed9\u200b\u5177\u4f53\u200b\u7684\u200bdynamic scheduler\u200b\u7b49\u200b\u8c03\u5ea6\u200b\u3002\u200b\u5c06\u200brequest\u200b\u5305\u88c5\u200b\u6210\u200bpayload\uff0c\u200b\u6839\u636e\u200b\u8c03\u5ea6\u200b\u7b56\u7565\u200b\u7ed9\u200b\u5230\u200bmodel_instance\u3002\u200b\u7136\u540e\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u8c03\u5ea6\u200b\u5230\u200b\u5b9e\u73b0\u200b\u7684\u200b\u5177\u4f53\u200binfer backend\u200b\u903b\u8f91\u200b\u4e86\u200b\u3002</p> C++<pre><code>void\nTritonModelInstance::Execute(\n    std::vector&lt;TRITONBACKEND_Request*&gt;&amp; triton_requests)\n{\n  TRITONBACKEND_ModelInstance* triton_model_instance =\n      reinterpret_cast&lt;TRITONBACKEND_ModelInstance*&gt;(this);\n  TritonBackend::TritonModelInstanceExecFn_t inst_exec_fn =\n      model_-&gt;Backend()-&gt;ModelInstanceExecFn();\n\n  // If there is an error then we retain ownership of 'requests'\n  // and must send error responses.\n  TRITONSERVER_Error* err = inst_exec_fn(\n      triton_model_instance, &amp;triton_requests[0], triton_requests.size());\n  if (err != nullptr) {\n    Status status = Status(\n        TritonCodeToStatusCode(TRITONSERVER_ErrorCode(err)),\n        TRITONSERVER_ErrorMessage(err));\n    for (TRITONBACKEND_Request* tr : triton_requests) {\n      std::unique_ptr&lt;InferenceRequest&gt; ur(\n          reinterpret_cast&lt;InferenceRequest*&gt;(tr));\n      InferenceRequest::RespondIfError(ur, status, true /* release_requests */);\n    }\n\n    TRITONSERVER_ErrorDelete(err);\n  }\n}\n</code></pre>"},{"location":"blog/tritonserver%E4%B8%ADshm%E4%BD%BF%E7%94%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/#response-\u5904\u7406","title":"response \u200b\u5904\u7406","text":"<p>ModelInferHandler\u200b\u7c7b\u200b\u7684\u200b\u6784\u9020\u51fd\u6570\u200b\u4e2d\u200b\uff0c\u200b\u6ce8\u518c\u200b\u4e86\u200b\u56de\u8c03\u200b\u51fd\u6570\u200b\uff0c\u200b\u5c06\u200bipc\u200b\u4fe1\u606f\u200b\u4f20\u9012\u200b\u7ed9\u200b\u4e86\u200bResponse\u200b\u7684\u200ballocator\u3002\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200bipc\u200b\u8fd4\u56de\u200bresponse\u200b\u7ed9\u200bclient\u3002 </p>C++<pre><code>    // Create the allocator that will be used to allocate buffers for\n    // the result tensors.\n    FAIL_IF_ERR(\n        TRITONSERVER_ResponseAllocatorNew(\n            &amp;allocator_, InferResponseAlloc, InferResponseFree,\n            InferResponseStart),\n        \"creating inference response allocator\");\n    FAIL_IF_ERR(\n        TRITONSERVER_ResponseAllocatorSetQueryFunction(\n            allocator_, OutputBufferQuery),\n        \"setting allocator's query function\");\n    FAIL_IF_ERR(\n        TRITONSERVER_ResponseAllocatorSetBufferAttributesFunction(\n            allocator_, OutputBufferAttributes),\n        \"setting allocator's output buffer attributes function\");\n</code></pre><p></p>"},{"location":"blog/tritonserver%E4%B8%ADshm%E4%BD%BF%E7%94%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/#\u4f7f\u7528shm-extention","title":"\u4f7f\u7528\u200bshm extention","text":"<p>https://docs.nvidia.com/deeplearning/triton-inference-server/user-guide/docs/protocol/extension_shared_memory.html</p> <p>\u200b\u8981\u200b\u4f7f\u7528\u200bshm extention\uff0c\u200b\u8ba9\u200breq\u200b\u548c\u200bresponse\u200b\u4f20\u8f93\u200bshm\u200b\u7684\u200bfd\uff0c\u200b\u800c\u200b\u4e0d\u662f\u200b\u76f4\u63a5\u200b\u4f20\u8f93\u6570\u636e\u200b\u3002</p> <p>\u200b\u9700\u8981\u200bclient\u200b\u4ee5\u200bhttp\u200b\u6216\u8005\u200bgrpc\u200b\u7684\u200b\u65b9\u5f0f\u200b\u53d1\u9001\u200b\u8bf7\u6c42\u200b\uff0c\u200b\u6ce8\u518c\u200bshm\u200b\u533a\u57df\u200b\u4fe1\u606f\u200b\uff0c\u200b\u540e\u9762\u200b\u7684\u200b\u8bf7\u6c42\u200b\u548c\u200bresponse\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u76f4\u63a5\u200b\u4f20\u8f93\u200bshm\u200b\u7684\u200bfd\u200b\u4f7f\u7528\u200b\u4e86\u200b\u3002</p> <p>\u200b\u5728\u200b\u6211\u4eec\u200b\u7f16\u5199\u200b\u7684\u200bbackend\u200b\u4e2d\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200bbackend api\u200b\u83b7\u53d6\u200brequest\u200b\u7684\u200bshm\u200b\u4fe1\u606f\u200b\u3002 </p>C++<pre><code>TRITONAPI_DECLSPEC TRITONSERVER_Error*\nTRITONBACKEND_RequestOutputBufferProperties(\n    TRITONBACKEND_Request* request, const char* name, size_t* byte_size,\n    TRITONSERVER_MemoryType* memory_type, int64_t* memory_type_id)\n{\n  InferenceRequest* tr = reinterpret_cast&lt;InferenceRequest*&gt;(request);\n  auto status =\n      tr-&gt;OutputBufferProperties(name, byte_size, memory_type, memory_type_id);\n  if (!status.IsOk()) {\n    return TRITONSERVER_ErrorNew(\n        StatusCodeToTritonCode(status.StatusCode()), status.Message().c_str());\n  }\n  return nullptr;  // success\n}\n\n\n\nTRITONBACKEND_DECLSPEC TRITONSERVER_Error* TRITONBACKEND_InputBufferAttributes(\n    TRITONBACKEND_Input* input, const uint32_t index, const void** buffer,\n    TRITONSERVER_BufferAttributes** buffer_attributes);\n\n\n/// Get the memory type field of the buffer attributes.\n///\n/// \\param buffer_attributes The buffer attributes object.\n/// \\param memory_type Returns the memory type associated with the buffer\n/// attributes object.\n/// \\return a TRITONSERVER_Error indicating success or failure.\nTRITONSERVER_DECLSPEC TRITONSERVER_Error*\nTRITONSERVER_BufferAttributesMemoryType(\n    TRITONSERVER_BufferAttributes* buffer_attributes,\n    TRITONSERVER_MemoryType* memory_type);\n\n/// Get the CudaIpcHandle field of the buffer attributes object.\n///\n/// \\param buffer_attributes The buffer attributes object.\n/// \\param cuda_ipc_handle Returns the memory type associated with the buffer\n/// attributes object. If the cudaIpcHandle does not exist for the buffer,\n/// nullptr will be returned.\n/// \\return a TRITONSERVER_Error indicating success or failure.\nTRITONSERVER_DECLSPEC TRITONSERVER_Error*\nTRITONSERVER_BufferAttributesCudaIpcHandle(\n    TRITONSERVER_BufferAttributes* buffer_attributes, void** cuda_ipc_handle);\n\n/// Get the byte size field of the buffer attributes.\n///\n/// \\param buffer_attributes The buffer attributes object.\n/// \\param byte_size Returns the byte size associated with the buffer attributes\n/// object.\n/// \\return a TRITONSERVER_Error indicating success or failure.\nTRITONSERVER_DECLSPEC TRITONSERVER_Error* TRITONSERVER_BufferAttributesByteSize(\n    TRITONSERVER_BufferAttributes* buffer_attributes, size_t* byte_size);\n</code></pre> \u200b\u7136\u540e\u200b\u901a\u8fc7\u200bshm\u200b\u83b7\u5f97\u200b\u6570\u636e\u200b\uff0c\u200b\u8fdb\u884c\u200b\u5904\u7406\u200b\uff0c\u200b\u518d\u200b\u751f\u6210\u200bresponse\u3002<p></p> <p>\u200b\u4e3e\u4f8b\u200b\uff1a \u200b\u6bd4\u5982\u200b\u5728\u200bpython backend\u200b\u7684\u200b\u5b9e\u73b0\u200b\u4e2d\u200b\uff1a </p>C++<pre><code>TRITONSERVER_Error*\nModelInstanceState::GetInputTensor(\n    const uint32_t input_idx, std::shared_ptr&lt;PbTensor&gt;&amp; input_tensor,\n    TRITONBACKEND_Request* request,\n    std::shared_ptr&lt;std::vector&lt;TRITONBACKEND_Response*&gt;&gt;&amp; responses)\n{\n    TRITONSERVER_BufferAttributes* buffer_attributes;\n\n      // This value is not used.\n      const void* buffer_p;\n      RETURN_IF_ERROR(TRITONBACKEND_InputBufferAttributes(\n          in, 0, &amp;buffer_p, &amp;buffer_attributes));\n\n      input_tensor = std::make_shared&lt;PbTensor&gt;(\n          std::string(input_name),\n          std::vector&lt;int64_t&gt;(input_shape, input_shape + input_dims_count),\n          input_dtype, src_memory_type, src_memory_type_id,\n          const_cast&lt;void*&gt;(buffer), input_byte_size,\n          nullptr /* DLManagedTensor */);\n\n      cudaIpcMemHandle_t* cuda_ipc_handle;\n      RETURN_IF_ERROR(TRITONSERVER_BufferAttributesCudaIpcHandle(\n          buffer_attributes, reinterpret_cast&lt;void**&gt;(&amp;cuda_ipc_handle)));\n      if (cuda_ipc_handle != nullptr) {\n        RETURN_IF_EXCEPTION(input_tensor-&gt;SaveToSharedMemory(\n            Stub()-&gt;ShmPool(), false /* copy_gpu */));\n        RETURN_IF_EXCEPTION(\n            input_tensor-&gt;Memory()-&gt;SetCudaIpcHandle(cuda_ipc_handle));\n      } else {\n        RETURN_IF_EXCEPTION(input_tensor-&gt;SaveToSharedMemory(\n            Stub()-&gt;ShmPool(), true /* copy_gpu */));\n      }\n}\n</code></pre><p></p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>tritonserver-multibatch\u200b\u6e90\u7801\u200b\u5206\u6790\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/tritonserver_python_backend_shm_com%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","title":"tritonserver_python_backend_shm_com\u200b\u6e90\u7801\u200b\u5206\u6790","text":""},{"location":"blog/tritonserver_python_backend_shm_com%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#\u80cc\u666f\u4ecb\u7ecd","title":"\u80cc\u666f\u200b\u4ecb\u7ecd","text":"<p>\u200b\u672c\u6587\u200b\u4ecb\u7ecd\u200b\u4e86\u200btritonserver\u200b\u4e2d\u200b\uff0c\u200b\u5982\u4f55\u200b\u901a\u8fc7\u200b\u5171\u4eab\u5185\u5b58\u200b\u548c\u5b50\u200b\u8fdb\u7a0b\u200b\u901a\u4fe1\u200b\uff0c\u200b\u4e3b\u8981\u200b\u4ecb\u7ecd\u200b\u5171\u4eab\u5185\u5b58\u200b\u7ba1\u7406\u200b\u7684\u200b\u5c01\u88c5\u200b\u4ee5\u53ca\u200bc++ boost inprocess\u200b\u6a21\u5757\u200b\u7684\u200b\u4f7f\u7528\u200b\u3002\u200b\u8fd9\u5757\u200b\u529f\u80fd\u200b\u662f\u200b\u53ef\u4ee5\u200b\u590d\u7528\u200b\u7684\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u7528\u4e8e\u200b\u5176\u4ed6\u200b\u573a\u666f\u200b\u3002</p> <p>tritonserver\u200b\u4f5c\u4e3a\u200b\u4e00\u4e2a\u200bAI\u200b\u63a8\u7406\u200b\u670d\u52a1\u200b\uff0c\u200b\u652f\u6301\u200bpython backend\u200b\u7684\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u901a\u8fc7\u200bpython \u200b\u5b50\u200b\u8fdb\u7a0b\u200b\u65b9\u5f0f\u200b\u8fd0\u884c\u200b\u6a21\u578b\u200b\u6216\u8005\u200b\u81ea\u5b9a\u4e49\u200b\u7684\u200b\u903b\u8f91\u200b\u3002</p> <p>\u200b\u7b80\u5355\u200b\u6765\u8bf4\u200b\uff0c\u200b\u5c31\u662f\u200b\u901a\u8fc7\u200bfork\u200b\u542f\u52a8\u200b\u4e86\u200b\u4e00\u4e2a\u200bstub\u200b\u5b50\u200b\u8fdb\u7a0b\u200b\uff0cstub\u200b\u5b50\u200b\u8fdb\u7a0b\u200b\u901a\u8fc7\u200bpybind11\u200b\u8fd0\u884c\u200b\u7528\u6237\u200b\u5b50\u200b\u5b9a\u4e49\u200b\u7684\u200bpython\u200b\u4ee3\u7801\u200b\u3002\u200b\u5f53\u200bc++\u200b\u5b9e\u73b0\u200b\u7684\u200btritonserver\u200b\u6536\u5230\u200b\u8bf7\u6c42\u200b\u540e\u200b\uff0c\u200b\u5c31\u200b\u4f1a\u200b\u8c03\u7528\u200bpython\u200b\u811a\u672c\u200b\uff0c\u200b\u7ecf\u8fc7\u200b\u5904\u7406\u200b\u540e\u200b\u8fd4\u56de\u200b\u7ed3\u679c\u200b\u3002</p> <ul> <li>fork stub\u200b\u5b50\u200b\u8fdb\u7a0b\u200b\uff0c\u200b\u6267\u884c\u200b\u7528\u6237\u200b\u81ea\u5b9a\u4e49\u200b\u7684\u200bpython\u200b\u4ee3\u7801\u200b</li> <li>tritonserver\u200b\u4f5c\u4e3a\u200b\u7236\u200b\u8fdb\u7a0b\u200b\uff0c\u200b\u9700\u8981\u200b\u548c\u200bstub\u200b\u5b50\u200b\u8fdb\u7a0b\u200b\u901a\u4fe1\u200b\uff0c\u200b\u6bd4\u5982\u200b\u63a7\u5236\u200bstub\u200b\u505c\u6b62\u200b\u3001\u200b\u53d1\u9001\u200b\u8bf7\u6c42\u200b\u3001\u200b\u63a7\u5236\u200b\u547d\u4ee4\u200b\u7b49\u200b\u3002</li> </ul> <p>\u200b\u8fd9\u200b\u5c31\u200b\u8bbe\u8ba1\u200b\u4e86\u200b\u8fdb\u7a0b\u200b\u4e4b\u95f4\u200b\u7684\u200b\u901a\u4fe1\u200b\uff0c\u200b\u5982\u679c\u200b\u901a\u8fc7\u200b\u7f51\u7edc\u901a\u4fe1\u200b\uff0c\u200b\u6027\u80fd\u200b\u4f1a\u200b\u4e0b\u964d\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u91c7\u7528\u200b\u4e86\u200bshm\uff08\u200b\u5171\u4eab\u5185\u5b58\u200b\uff09\u200b\u7684\u200b\u65b9\u5f0f\u200b\u3002</p>"},{"location":"blog/tritonserver_python_backend_shm_com%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#\u5171\u4eab\u5185\u5b58\u548c\u6d88\u606f\u961f\u5217\u7684\u8bbe\u8ba1","title":"\u5171\u4eab\u5185\u5b58\u200b\u548c\u200b\u6d88\u606f\u200b\u961f\u5217\u200b\u7684\u200b\u8bbe\u8ba1","text":"<p>\u200b\u8fd9\u91cc\u200b\u8fdb\u7a0b\u200b\u95f4\u901a\u4fe1\u200b\uff0c\u200b\u8bbe\u8ba1\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u6d88\u606f\u200b\u961f\u5217\u200b\uff0c\u200b\u627f\u8f7d\u200b\u6d88\u606f\u200b\u961f\u5217\u200b\u7684\u200b\u8f7d\u4f53\u200b\u662f\u200b\u5171\u4eab\u5185\u5b58\u200b\uff0c\u200b\u5373\u200b\u901a\u8fc7\u200b\u5171\u4eab\u5185\u5b58\u200b\u6765\u200b\u5b58\u50a8\u200b\u6d88\u606f\u200b\u961f\u5217\u200b\u3002</p> <p>\u200b\u65e2\u7136\u200b\u662f\u200b\u8de8\u200b\u8fdb\u7a0b\u200b\u95f4\u200b\u4f20\u8f93\u6570\u636e\u200b\u7684\u200b\u6d88\u606f\u200b\u961f\u5217\u200b\uff0c\u200b\u90a3\u4e48\u200b\u80af\u5b9a\u200b\u4e24\u4e2a\u200b\u8fdb\u7a0b\u200b\u90fd\u200b\u4f1a\u200b\u83b7\u53d6\u200b\u540c\u4e00\u4e2a\u200b\u6d88\u606f\u200b\u961f\u5217\u200b\u7684\u200b\u53e5\u67c4\u200b\uff0c\u200b\u751f\u4ea7\u8005\u200b\u521b\u5efa\u200b\uff08create\uff09\u200b\u5e76\u4e14\u200b\u53d1\u9001\u200b\uff08push\uff09\u200b\u6d88\u606f\u200b\uff0c\u200b\u6d88\u8d39\u8005\u200bload\u200b\u6d88\u606f\u200b\u961f\u5217\u200b\u5e76\u4e14\u200b\u6d88\u8d39\u200b\uff08pop\uff09\u200b\u6d88\u606f\u200b\u3002</p>"},{"location":"blog/tritonserver_python_backend_shm_com%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#\u4eceparent\u8fdb\u7a0b\u89c6\u89d2\u770b","title":"\u4ece\u200bparent\u200b\u8fdb\u7a0b\u200b\u89c6\u89d2\u200b\u770b","text":"<p>parent\u200b\u8fdb\u7a0b\u200b\u521b\u5efa\u200b\u4e86\u200b\u6d88\u606f\u200b\u961f\u5217\u200b\uff0cpush\u200b\u6d88\u606f\u200b\u5230\u200b\u6d88\u606f\u200b\u961f\u5217\u200bstub_message_queue_\uff0c\u200b\u7136\u540e\u200b\u7b49\u5f85\u200b\u5b50\u200b\u8fdb\u7a0b\u200b\u6d88\u8d39\u200b\u6d88\u606f\u200b\u3002\u200b\u7136\u540e\u200b\u4ece\u200bparent_message_queue_\u200b\u63a5\u53d7\u200b\u5b50\u200b\u8fdb\u7a0b\u200b\u8fd4\u56de\u200b\u7684\u200b\u6d88\u606f\u200b\u3002</p>"},{"location":"blog/tritonserver_python_backend_shm_com%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#\u5171\u4eab\u5185\u5b58\u4ee5\u53ca\u6d88\u606f\u961f\u5217\u7684\u521b\u5efa","title":"\u5171\u4eab\u5185\u5b58\u200b\u4ee5\u53ca\u200b\u6d88\u606f\u200b\u961f\u5217\u200b\u7684\u200b\u521b\u5efa","text":"<p>\u200b\u4f8b\u5982\u200b\u4e0b\u9762\u200b\u662f\u200bMessageQueue\u200b\u7c7b\u200b\u521b\u5efa\u200b\u7684\u200b\u51e0\u79cd\u200b\u4e0d\u540c\u200b\u7684\u200b\u6d88\u606f\u200b\u961f\u5217\u200b\uff0c\u200b\u7528\u4e8e\u200bparent\u200b\u8fdb\u7a0b\u200b\u548c\u200bstub\u200b\u8fdb\u7a0b\u200b\u4e4b\u95f4\u200b\u7684\u200b\u901a\u4fe1\u200b\uff0c\u200b\u6d88\u606f\u200b\u961f\u5217\u200b\u7684\u200b\u7c7b\u578b\u200b\u662f\u200bbi::managed_external_buffer::handle_t\u3002</p> C++<pre><code>// \u200b\u6e90\u7801\u200b\u5730\u5740\u200b\uff1ahttps://github.com/triton-inference-server/python_backend/blob/main/src/stub_launcher.cc#L151\n// stub_message_queue_\u200b\u662f\u200bparent\u200b\u53d1\u9001\u200b\u63a7\u5236\u200b\u4fe1\u606f\u200b\u7ed9\u200bstub\u200b\u8fdb\u7a0b\u200b\u7684\u200b\u961f\u5217\u200b\uff0c\u200b\u6bd4\u5982\u200b\u53d1\u9001\u200b\u521d\u59cb\u5316\u200b\u3001\u200b\u505c\u6b62\u200b\u7b49\u200bcommond\nRETURN_IF_EXCEPTION(\n      stub_message_queue_ =\n          MessageQueue&lt;bi::managed_external_buffer::handle_t&gt;::Create(\n              shm_pool_, shm_message_queue_size_));\n// parent_message_queue_\u200b\u662f\u200bstub\u200b\u8fdb\u7a0b\u200b\u53d1\u9001\u4fe1\u606f\u200b\u7ed9\u200bparent\u200b\u8fdb\u7a0b\u200b\u7684\u200b\u961f\u5217\u200b\n  RETURN_IF_EXCEPTION(\n      parent_message_queue_ =\n          MessageQueue&lt;bi::managed_external_buffer::handle_t&gt;::Create(\n              shm_pool_, shm_message_queue_size_));\n  RETURN_IF_EXCEPTION(\n      stub_to_parent_mq_ =\n          MessageQueue&lt;bi::managed_external_buffer::handle_t&gt;::Create(\n              shm_pool_, shm_message_queue_size_));\n  RETURN_IF_EXCEPTION(\n      parent_to_stub_mq_ =\n          MessageQueue&lt;bi::managed_external_buffer::handle_t&gt;::Create(\n              shm_pool_, shm_message_queue_size_));\n</code></pre> <p>SharedMemoryManager\u200b\u7c7b\u200b\u662f\u200b\u4e00\u4e2a\u200b\u53ef\u4ee5\u200b\u590d\u7528\u200b\u7684\u200b\u7c7b\u200b\uff0c\u200b\u5c01\u88c5\u200b\u4e86\u200b\u5171\u4eab\u5185\u5b58\u200b\u7684\u200b\u521b\u5efa\u200b\u548c\u200b\u9500\u6bc1\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u5171\u4eab\u5185\u5b58\u200b\u4e2d\u200b\u5bf9\u8c61\u200b\u7684\u200b\u6784\u9020\u200b\u548c\u6790\u6784\u200b\u3002\u200b\u8fd9\u91cc\u200b\u6307\u5b9a\u200b\u4e86\u200b\u5171\u4eab\u5185\u5b58\u200b\u7684\u200b\u540d\u79f0\u200b\uff0c\u200b\u5927\u5c0f\u200b\uff0c\u200b\u589e\u957f\u200b\u5927\u5c0f\u200b\uff0c\u200b\u662f\u5426\u200b\u521b\u5efa\u200b\u7b49\u200b\u53c2\u6570\u200b\uff0c\u200b\u4e3a\u200b\u8fdb\u7a0b\u200b\u901a\u4fe1\u200b\u521b\u5efa\u200b\u4e86\u200b\u4e00\u6bb5\u200bshm\u200b\u5171\u4eab\u5185\u5b58\u200b\u3002</p> <p>\u200b\u5e76\u4e14\u200b\u5728\u200b\u5171\u4eab\u5185\u5b58\u200b\u4e2d\u200b\u521b\u5efa\u200b\u4e86\u200bIPCControlShm\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u5bf9\u8c61\u200b\u5305\u542b\u200b\u4e86\u200b\u6d88\u606f\u200b\u961f\u5217\u200b\u7684\u200b\u53e5\u67c4\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u4e00\u4e9b\u200b\u8fdb\u7a0b\u200b\u5065\u5eb7\u200b\u72b6\u6001\u200b\u7684\u200b\u6807\u5fd7\u200b\u4f4d\u200b\u3002</p> C++<pre><code>std::unique_ptr&lt;SharedMemoryManager&gt; shm_pool_ = std::make_unique&lt;SharedMemoryManager&gt;(\n        shm_region_name_, shm_default_byte_size_, shm_growth_byte_size_,\n        true /* create */);\nAllocatedSharedMemory&lt;IPCControlShm&gt; current_ipc_control =\n      shm_pool_-&gt;Construct&lt;IPCControlShm&gt;();\n</code></pre> <p>IPCControlShm\u200b\u7ed3\u6784\u200b\u4f53\u200b\u5305\u542b\u200b\u4e86\u200b\u8fdb\u7a0b\u200b\u901a\u4fe1\u200b\u9700\u8981\u200b\u7684\u200b\u6240\u6709\u200b\u4fe1\u606f\u200b\uff0c\u200b\u5305\u62ec\u200b\u4e24\u4e2a\u200b\u8fdb\u7a0b\u200b\u7684\u200b\u5065\u5eb7\u200b\u72b6\u6001\u200b\uff0c\u200b\u4e24\u4e2a\u200b\u8fdb\u7a0b\u200b\u7684\u200b\u6d88\u606f\u200b\u961f\u5217\u200b\u53e5\u67c4\u200b\u7b49\u200b\u3002 </p>C++<pre><code>// Control data structure for the communication between the Python stub and the\n// main stub.\nstruct IPCControlShm {\n  bool stub_health;\n  bool parent_health;\n  bool uses_env;\n  bool decoupled;\n  bi::interprocess_mutex parent_health_mutex;\n  bi::interprocess_mutex stub_health_mutex;\n  bi::managed_external_buffer::handle_t stub_message_queue;\n  bi::managed_external_buffer::handle_t parent_message_queue;\n  bi::managed_external_buffer::handle_t stub_to_parent_mq;\n  bi::managed_external_buffer::handle_t parent_to_stub_mq;\n  bi::managed_external_buffer::handle_t memory_manager_message_queue;\n};\n</code></pre><p></p>"},{"location":"blog/tritonserver_python_backend_shm_com%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#\u53d1\u9001\u6d88\u606f","title":"\u53d1\u9001\u200b\u6d88\u606f","text":"<p>\u200b\u4e0b\u9762\u200b\u7684\u200b\u4ee3\u7801\u200b\u63cf\u8ff0\u200b\u4e86\u200b\u5982\u4f55\u200b\u4ece\u200bparent\u200b\u8fdb\u7a0b\u200b\u53d1\u9001\u200b\u4e00\u4e2a\u200binitialize_message\u200b\u7ed9\u200b\u5230\u200bstub\u200b\u8fdb\u7a0b\u200b\u3002\u200b\u6784\u9020\u200b\u4e00\u4e2a\u200bIPCMessage\u200b\u7c7b\u578b\u200b\u7684\u200b\u6d88\u606f\u200b\uff0c\u200b\u4e3a\u200b\u6d88\u606f\u200b\u8d4b\u503c\u200b\uff0c\u200b\u518d\u200b\u5c06\u200b\u6d88\u606f\u200bPush\u200b\u5230\u200bstub_message_queue_\u200b\u4e2d\u200b\u3002</p> C++<pre><code>std::unordered_map&lt;std::string, std::string&gt; initialize_map = {\n    {\"model_config\", model_config_buffer_.MutableContents()},\n    {\"model_instance_kind\", kind_},\n    {\"model_instance_name\", model_instance_name_},\n    {\"model_instance_device_id\", std::to_string(device_id_)},\n    {\"model_repository\", model_repository_path_},\n    {\"model_version\", std::to_string(model_version_)},\n    {\"model_name\", model_name_}};\n\nstd::unique_ptr&lt;IPCMessage&gt; initialize_message =\n    IPCMessage::Create(shm_pool_, false /* inline_response */);\ninitialize_message-&gt;Command() = PYTHONSTUB_InitializeRequest;\n\nstd::unique_ptr&lt;PbMap&gt; pb_map = PbMap::Create(shm_pool_, initialize_map);\nbi::managed_external_buffer::handle_t initialize_map_handle =\n    pb_map-&gt;ShmHandle();\n\ninitialize_message-&gt;Args() = initialize_map_handle;\nstub_message_queue_-&gt;Push(initialize_message-&gt;ShmHandle());\n</code></pre>"},{"location":"blog/tritonserver_python_backend_shm_com%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#\u63a5\u6536\u6d88\u606f","title":"\u63a5\u6536\u200b\u6d88\u606f","text":"<p>\u200b\u4e0a\u200b\u5c0f\u8282\u200b\u63d0\u5230\u200b\u7684\u200binitialize_message\u200b\u662f\u200b\u5982\u4f55\u200b\u88ab\u200b\u63a5\u6536\u200b\u5904\u7406\u200b\u7684\u200b\u5462\u200b\uff1f\u200b\u770b\u200b\u4e0b\u9762\u200b\u7684\u200b\u4ee3\u7801\u200b\uff0cReceiveMessageFromStub\u200b\u51fd\u6570\u200b\u63a5\u53d7\u200b\u6d88\u606f\u200b\uff0c\u200b\u7136\u540e\u200b\u901a\u8fc7\u200bshm_pool_\u200b\u5171\u4eab\u5185\u5b58\u200b\u65b9\u5f0f\u200b\u83b7\u53d6\u200b\u6d88\u606f\u200b\u5177\u4f53\u200b\u7684\u200b\u5185\u5bb9\u200b\u3002</p> C++<pre><code>bi::managed_external_buffer::handle_t message;\nRETURN_IF_ERROR(ReceiveMessageFromStub(message, initialization_timeout_ms));\n\nstd::unique_ptr&lt;IPCMessage&gt; initialize_response_message =\n    IPCMessage::LoadFromSharedMemory(shm_pool_, message);\n\nif (initialize_response_message-&gt;Command() != PYTHONSTUB_InitializeResponse) {\nreturn TRITONSERVER_ErrorNew(\n    TRITONSERVER_ERROR_INTERNAL,\n    (std::string(\n            \"Received unexpected response from Python backend stub: \") +\n        model_instance_name_)\n        .c_str());\n}\n\nauto initialize_response =\n    std::move((shm_pool_-&gt;Load&lt;InitializeResponseShm&gt;(\n                initialize_response_message-&gt;Args())))\n        .data_;\n</code></pre> <p>ReceiveMessageFromStub\u200b\u5b9e\u9645\u4e0a\u200b\u5c31\u200b\u662f\u4ece\u200b\u6d88\u606f\u200b\u961f\u5217\u200bparent_message_queue_\u200b\u4e2d\u200b\u53d6\u51fa\u200b\u6d88\u606f\u200b\u3002 </p>C++<pre><code>message = parent_message_queue_-&gt;Pop(\n    timeout_miliseconds /* duration ms */, success);\n</code></pre><p></p>"},{"location":"blog/tritonserver_python_backend_shm_com%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#\u4ecestub\u8fdb\u7a0b\u89c6\u89d2\u770b","title":"\u4ece\u200bstub\u200b\u8fdb\u7a0b\u200b\u89c6\u89d2\u200b\u770b","text":"<p>\u200b\u4ece\u200bstub\u200b\u8fdb\u7a0b\u200b\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200bpython\u200b\u5b50\u200b\u8fdb\u7a0b\u200b\u89c6\u89d2\u200b\u770b\u200b\uff0c\u200b\u5b83\u200b\u5c31\u200b\u4e0d\u662f\u200b\u521b\u5efa\u200b\u5171\u4eab\u5185\u5b58\u200b\u4e86\u200b\u3002\u200b\u800c\u662f\u200b\u4f7f\u7528\u200bparent\u200b\u8fdb\u7a0b\u200b\u521b\u5efa\u200b\u7684\u200b\u5171\u4eab\u5185\u5b58\u200b\uff0c\u200b\u7136\u540e\u200b\u901a\u8fc7\u200bLoadFromSharedMemory\u200b\u65b9\u6cd5\u200bload\u200b\u521b\u5efa\u200b\u597d\u200b\u7684\u200b\u6d88\u606f\u200b\u961f\u5217\u200b\uff0c\u200b\u76f4\u63a5\u200b\u4f7f\u7528\u200b\u3002 </p>C++<pre><code>// https://github.com/triton-inference-server/python_backend/blob/main/src/pb_stub.cc#L164\nshm_pool_ = std::make_unique&lt;SharedMemoryManager&gt;(\n    shm_region_name, shm_default_size, shm_growth_size, false /* create */);\n\nAllocatedSharedMemory&lt;IPCControlShm&gt; ipc_control =\n    shm_pool_-&gt;Load&lt;IPCControlShm&gt;(ipc_control_handle);\nipc_control_ = ipc_control.data_.get();\n\nstub_message_queue_ = MessageQueue&lt;bi::managed_external_buffer::handle_t&gt;::\n    LoadFromSharedMemory(shm_pool_, ipc_control_-&gt;stub_message_queue);\n</code></pre> \u200b\u4e0a\u9762\u200b\u8bf4\u200b\u4e86\u200bparent\u200b\u7ed9\u200bstub\u200b\u53d1\u9001\u200b\u4e86\u200b\u4e00\u4e2a\u200binitialize_message\uff0cstub\u200b\u8fdb\u7a0b\u200b\u6536\u5230\u200b\u540e\u200b\uff0c\u200b\u4f1a\u200b\u56de\u590d\u200b\u4e00\u4e2a\u200binitialize_response\u3002\u200b\u5b50\u200b\u8fdb\u7a0b\u200b\u901a\u8fc7\u200bPop\u200b\u4ece\u200bstub_message_queue_\u200b\u63a5\u53d7\u200b\u6d88\u606f\u200b\u3002<p></p>"},{"location":"blog/tritonserver_python_backend_shm_com%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#\u63a5\u6536\u6d88\u606f_1","title":"\u63a5\u6536\u200b\u6d88\u606f","text":"<p>stub\u200b\u8fdb\u7a0b\u200b\u5982\u4f55\u200b\u63a5\u53d7\u200b\u6d88\u606f\u200b\u5462\u200b\uff1f\u200b\u4e0a\u9762\u200b\u63d0\u5230\u200bparent\u200b\u8fdb\u7a0b\u200b\u53d1\u9001\u200b\u6d88\u606f\u200b\u5c31\u662f\u200b\u5c06\u200b\u6d88\u606f\u200b\u5165\u200b\u961f\u5217\u200bstub_message_queue_\uff0c\u200b\u5728\u200bstub\u200b\u8fdb\u7a0b\u200b\u7684\u200b\u8c03\u7528\u200b\u7684\u200bPopMessage\u200b\u51fd\u6570\u200b\u4e2d\u200b\uff0c\u200b\u5c31\u662f\u200b\u901a\u8fc7\u200bPop\u200b\u4ece\u200b\u961f\u5217\u200b\u4e2d\u53d6\u200b\u6d88\u606f\u200b\u3002 </p>C++<pre><code>std::unique_ptr&lt;IPCMessage&gt;\nStub::PopMessage()\n{\n  bool success = false;\n  std::unique_ptr&lt;IPCMessage&gt; ipc_message;\n  bi::managed_external_buffer::handle_t message;\n  while (!success) {\n    message = stub_message_queue_-&gt;Pop(1000, success);\n  }\n\n  ipc_message = IPCMessage::LoadFromSharedMemory(shm_pool_, message);\n\n  return ipc_message;\n}\n</code></pre> stub\u200b\u8fdb\u7a0b\u200b\u7684\u200b\u6838\u5fc3\u200b\u903b\u8f91\u200b\u5c31\u662f\u200b\u8c03\u7528\u200bRunCommand\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u65b9\u6cd5\u200b\u4f1a\u200b\u4ece\u200bstub_message_queue_\u200b\u4e2d\u200b\u53d6\u51fa\u200b\u6d88\u606f\u200b\uff0c\u200b\u7136\u540e\u200b\u6839\u636e\u200b\u6d88\u606f\u200b\u7c7b\u578b\u200b\u6267\u884c\u200b\u4e0d\u540c\u200b\u7684\u200b\u903b\u8f91\u200b\u3002<p></p> C++<pre><code>std::unique_ptr&lt;IPCMessage&gt; ipc_message;\n{\n// Release the GIL lock when waiting for new message. Without this line, the\n// other threads in the user's Python model cannot make progress if they\n// give up GIL.\npy::gil_scoped_release release;\nipc_message = this-&gt;PopMessage();\n}\nswitch (ipc_message-&gt;Command()) {\ncase PYTHONSTUB_CommandType::PYTHONSTUB_InitializeRequest: \n//...\n}\n</code></pre>"},{"location":"blog/tritonserver_python_backend_shm_com%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#pybind11\u8c03\u7528python\u903b\u8f91","title":"pybind11\u200b\u8c03\u7528\u200bpython\u200b\u903b\u8f91","text":"<p>stub\u200b\u662f\u200b\u4e00\u4e2a\u200bc++\u200b\u5b9e\u73b0\u200b\u7684\u200b\u8fdb\u7a0b\u200b\uff0c\u200b\u5b83\u200b\u6536\u5230\u200binitialize_message\u200b\u540e\u200b\uff0c\u200b\u4f1a\u200b\u901a\u8fc7\u200bpybind11\u200b\u5e93\u200b\u3002</p> <p>pybind11\u200b\u5e93\u200b\u53ef\u4ee5\u200b\u8c03\u7528\u200b\u7528\u6237\u200b\u5b9e\u73b0\u200b\u7684\u200bpython\u200b\u903b\u8f91\u200b\uff0c\u200b\u6bd4\u5982\u200b\u83b7\u53d6\u200bpython\u200b\u7c7b\u200b\u3001\u200b\u8c03\u7528\u200b\u7c7b\u200b\u529f\u80fd\u200b\u51fd\u6570\u200b\u3002\u200b\u8fd9\u91cc\u200b\u7b80\u5355\u200b\u653e\u200b\u4e00\u4e0b\u200b\u4ee3\u7801\u200b\uff0c\u200b\u5f88\u200b\u5bb9\u6613\u200b\u7406\u89e3\u200b\uff1a</p> C++<pre><code>#include &lt;pybind11/embed.h&gt;\n#include &lt;pybind11/numpy.h&gt;\n#include &lt;pybind11/stl.h&gt;\nnamespace py = pybind11;\nvoid\nStub::Initialize(bi::managed_external_buffer::handle_t map_handle)\n{\n  py::module sys = StubSetup();\n\n  py::module python_backend_utils =\n      py::module_::import(\"triton_python_backend_utils\");\n  py::module c_python_backend_utils =\n      py::module_::import(\"c_python_backend_utils\");\n  // ......\n  c_python_backend_utils.attr(\"shared_memory\") = py::cast(shm_pool_.get());\n\n  async_event_loop_ = py::none();\n  background_futures_ = py::set();\n\n  // \u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200bTritonPythonModel\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u5bf9\u8c61\u200b\u662f\u200b\u7528\u6237\u200b\u5b9e\u73b0\u200b\u7684\u200bpython\u200b\u7c7b\u200b\uff0c\u200b\u7528\u6237\u200b\u9700\u8981\u200b\u5728\u200b\u7c7b\u200b\u4e2d\u200b\u5b9e\u73b0\u200binitialize\u3001execute\u3001finalizer\u200b\u7b49\u200b\u51fd\u6570\u200b\n  py::object TritonPythonModel = sys.attr(\"TritonPythonModel\");\n  model_instance_ = TritonPythonModel();\n\n  std::unordered_map&lt;std::string, std::string&gt; map;\n  std::unique_ptr&lt;PbMap&gt; pb_map_shm =\n      PbMap::LoadFromSharedMemory(shm_pool_, map_handle);\n  // Get the unordered_map representation of the map in shared memory.\n  map = pb_map_shm-&gt;UnorderedMap();\n  py::dict model_config_params;\n  for (const auto&amp; pair : map) {\n    model_config_params[pair.first.c_str()] = pair.second;\n  }\n\n  // Call initialize if exists.\n  // \u200b\u8c03\u7528\u200b\u7528\u6237\u200b\u5b9e\u73b0\u200b\u7684\u200binitialize\u200b\u51fd\u6570\u200b\n  if (py::hasattr(model_instance_, \"initialize\")) {\n    model_instance_.attr(\"initialize\")(model_config_params);\n  }\n}\n</code></pre>"},{"location":"blog/tritonserver_python_backend_shm_com%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#\u603b\u7ed3","title":"\u603b\u7ed3","text":"<p>\u200b\u672c\u6587\u200b\u7531\u4e8e\u200b\u7bc7\u5e45\u200b\u9650\u5236\u200b\uff0c\u200b\u4ecb\u7ecd\u200b\u4e86\u200btriton\u200b\u7684\u200bIPC\u200b\u901a\u4fe1\u200b\u673a\u5236\u200b\uff0c\u200b\u4ee5\u53ca\u200bstub\u200b\u8fdb\u7a0b\u200b\u7684\u200b\u521d\u59cb\u5316\u200b\u8fc7\u7a0b\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u4ecb\u7ecd\u200bstub\u200b\u8fdb\u7a0b\u200b\u5982\u4f55\u200b\u6267\u884c\u200b\u7528\u6237\u200b\u5b9e\u73b0\u200b\u7684\u200bpython\u200b\u903b\u8f91\u200b\u3002\u200b\u5176\u4e2d\u200b\u7684\u200b\u8fdb\u7a0b\u200b\u95f4\u901a\u4fe1\u200b\u673a\u5236\u200b\u548c\u200bpybind11\u200b\u8c03\u7528\u200bpython\u200b\u903b\u8f91\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u590d\u7528\u200b\u5230\u200b\u4f60\u200b\u81ea\u5df1\u200b\u7684\u200b\u9879\u76ee\u200b\u4e2d\u200b\u3002\u200b\u8fd9\u79cd\u200b\u8de8\u200b\u8bed\u8a00\u200b\u8c03\u7528\u200b\u5f88\u200b\u5e38\u89c1\u200b\uff0c\u200b\u5e38\u89c1\u200b\u7684\u200b\u8fd8\u6709\u200bc++\u200b\u4e2d\u200b\u8c03\u7528\u200blua\u3001\u200b\u8c03\u7528\u200bjs\u200b\u7b49\u200b\u3002</p> <p>\u200b\u6d88\u606f\u200b\u961f\u5217\u200b\u4f7f\u7528\u200b\u5230\u200b\u4e86\u200bSharedMemoryManager\u200b\u7c7b\u200b\uff0c\u200b\u8be5\u7c7b\u200b\u91c7\u7528\u200bboost.interprocess\u200b\u5e93\u200b\u5b9e\u73b0\u200b\u3002\u200b\u5173\u4e8e\u200b\u6d88\u606f\u200b\u961f\u5217\u200b\u7684\u200b\u5b9e\u73b0\u200b\u4ee5\u53ca\u200b\u5171\u4eab\u5185\u5b58\u200b\u7684\u200bboost.interprocess\u200b\u5e93\u200b\u7684\u200b\u4f7f\u7528\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200b\u6e90\u4ee3\u7801\u200b\u5b9e\u73b0\u200b\u3002\u200b\u540e\u7eed\u200b\u6587\u7ae0\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5c55\u5f00\u200b\u4ecb\u7ecd\u200b\u3002</p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>CUTLASS\u200b\u5e93\u4e2d\u200b\u7684\u200b\u5c3e\u58f0\u200b\u878d\u5408\u200b(Epilogue Fusion)\u200b\u548c\u200bEpilogue Visitor Trees</li> <li>\u200b\u4ece\u200bDeepseek\u200b\u5f00\u6e90\u200b\u5e93\u200b3FS\u200b\u4e2d\u200b\u5b66\u4e60\u200bfuse\u200b\u7684\u200b\u4f7f\u7528\u200b-\u200b\u5982\u4f55\u200b\u5f00\u53d1\u200b\u4e00\u4e2a\u200b\u6587\u4ef6\u7cfb\u7edf\u200b\uff08\u200b\u4e00\u200b\uff09</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/unicode%E7%BC%96%E7%A0%81%E5%92%8Cutf-8%E8%BD%AC%E6%8D%A2%E4%B8%8D%E5%90%8C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%B7%AE%E5%88%AB%E4%BB%A5%E5%8F%8Alocale%E6%9D%82%E8%B0%88/","title":"unicode\u200b\u7f16\u7801\u200b\u548c\u200butf-8\u200b\u8f6c\u6362\u200b\u4e0d\u540c\u200b\u8bed\u8a00\u200b\u5b9e\u73b0\u200b\u7684\u200b\u5dee\u522b\u200b\uff1f\u200b\u4ee5\u53ca\u200blocale\u200b\u6742\u8c08","text":""},{"location":"blog/unicode%E7%BC%96%E7%A0%81%E5%92%8Cutf-8%E8%BD%AC%E6%8D%A2%E4%B8%8D%E5%90%8C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%B7%AE%E5%88%AB%E4%BB%A5%E5%8F%8Alocale%E6%9D%82%E8%B0%88/#\u6545\u4e8b\u5f00\u59cb","title":"\u6545\u4e8b\u200b\u5f00\u59cb","text":"<p>\u200b\u6545\u4e8b\u200b\u7684\u200b\u80cc\u666f\u200b\u53d1\u751f\u200b\u5728\u200b\uff0c\u200b\u6211\u200b\u6709\u200b\u4e2a\u200b\u56fe\u7247\u200b\u538b\u7f29\u5305\u200b\uff0c\u200b\u91cc\u9762\u200b\u6709\u200b\u4e2d\u6587\u200b\u6587\u4ef6\u540d\u200b\uff0c\u200b\u6211\u200b\u89e3\u538b\u200b\u4ee5\u540e\u200b\u53d8\u200b\u4e86\u200b\u3002</p> <p>\u200b\u6b63\u786e\u200b\u7684\u200b\u6587\u4ef6\u540d\u200b\uff1a </p>Text Only<pre><code>1801\u200b\u4e07\u91cc\u957f\u57ce\u200b\u6c38\u4e0d\u5012\u200b_123445_5_3811-3826s_000004.jpg\n</code></pre> \u200b\u89e3\u538b\u200b\u540e\u200b\u7684\u200b\u6587\u4ef6\u540d\u200b\uff1a Text Only<pre><code>1801#U4e07#U91cc#U957f#U57ce#U6c38#U4e0d#U5012_123445_5_3811-3826s_000004.jpg\n</code></pre><p></p> <p>\u200b\u901a\u5e38\u200b\u4f7f\u7528\u200b\u201du\u201c\u200b\u6216\u200b\u201dU\u201c\u200b\u6765\u200b\u8868\u793a\u200bUnicode\u200b\u5b57\u7b26\u200b\u3002\u200b\u4f46\u662f\u200bunzip\u200b\u89e3\u538b\u200b\u6587\u4ef6\u200b\u548c\u200b\u6587\u4ef6\u5939\u200b\u540d\u79f0\u200b\u4e3a\u200b#Uxxxx\uff0c\u200b\u5176\u4e2d\u200b\u201dx\u201d\u200b\u8868\u793a\u200bUnicode\u200b\u5b57\u7b26\u200b\u7684\u200b\u5341\u516d\u8fdb\u5236\u200b\u7f16\u7801\u200b\u3002</p> <p>unzip\u200b\u8f6c\u6362\u200b\u4e2d\u6587\u200b\u51fa\u73b0\u200b\u95ee\u9898\u200b\uff0c\u200b\u662f\u200bunzip\u200b\u89e3\u538b\u200b\u4f1a\u200b\u5c06\u200b\u5176\u200b\u8f6c\u6362\u6210\u200b\u9ed8\u8ba4\u200b\u7684\u200b\u7f16\u7801\u200b\uff08\u200b\u6bd4\u5982\u200bASCII\uff09\u3002\u200b\u800c\u200b\u9ed8\u8ba4\u200b\u7f16\u7801\u200b\u4e0d\u200b\u652f\u6301\u200b\u4e2d\u6587\u200b\u3002\u200b\u8fd8\u6709\u200b\u4e00\u4e9b\u200b\u60c5\u51b5\u200b\u662f\u200b\u7ec8\u7aef\u200b\u663e\u793a\u200b\u65f6\u200b\uff0c\u200b\u6309\u7167\u200b\u4e86\u200blocale\u200b\u8bbe\u7f6e\u200b\u7684\u200b\u7f16\u7801\u200b\uff0c\u200b\u4e5f\u200b\u4e0d\u200b\u652f\u6301\u200b\u4e2d\u6587\u200b\u7684\u200b\u6b63\u786e\u200b\u663e\u793a\u200b\u3002\u200b\u603b\u4e4b\u200b\uff0c\u200b\u8fd9\u79cd\u200b\u95ee\u9898\u200b\u5c31\u662f\u200b\u7f16\u7801\u200b\u4e0d\u200b\u5bf9\u5e94\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u662f\u200b\u8f6c\u9519\u200b\u4e86\u200b\uff0c\u200b\u90a3\u200b\u6211\u4eec\u200b\u5c31\u8981\u200b\u7528\u200b\u5de5\u5177\u200b\u3001\u200b\u6216\u8005\u200b\u81ea\u5df1\u200b\u5199\u4e2a\u200b\u7a0b\u5e8f\u8f6c\u6362\u200b\u5230\u200b\u6b63\u786e\u200b\u7684\u200b\u7f16\u7801\u200b\u3002 \u200b\u5982\u679c\u200b\u662f\u200b\u663e\u793a\u200b\u9519\u200b\u4e86\u200b\uff0c\u200b\u5c31\u200b\u9700\u8981\u200b\u8bbe\u7f6e\u200blocale\uff0c\u200b\u8fd9\u4e2a\u200b\u6211\u4eec\u200b\u540e\u9762\u200b\u804a\u200b\u3002</p>"},{"location":"blog/unicode%E7%BC%96%E7%A0%81%E5%92%8Cutf-8%E8%BD%AC%E6%8D%A2%E4%B8%8D%E5%90%8C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%B7%AE%E5%88%AB%E4%BB%A5%E5%8F%8Alocale%E6%9D%82%E8%B0%88/#\u4e2d\u6587\u7f16\u7801\u89e3\u538b\u5de5\u5177","title":"\u4e2d\u6587\u200b\u7f16\u7801\u200b\u89e3\u538b\u200b\u5de5\u5177","text":"<p>\u200b\u5148\u200b\u770b\u770b\u200b\u7b2c\u4e00\u79cd\u200b\u89e3\u538b\u200b\u8f6c\u9519\u200b\u4e86\u200b\uff0c\u200b\u6211\u4eec\u200b\u6709\u200b\u54ea\u4e9b\u200b\u5de5\u5177\u200b\u53ef\u4ee5\u200b\u7528\u200b\u5462\u200b\uff1f</p> <ul> <li>unar\u200b\u5de5\u5177\u200b\uff0c\u200b\u5b83\u200b\u53ef\u4ee5\u200b\u81ea\u52a8\u68c0\u6d4b\u200b\u7f16\u7801\u200b\uff0c\u200b\u8f6c\u6362\u200b\u6210\u529f\u7387\u200b\u5f88\u200b\u9ad8\u200b\u3002</li> </ul> <p></p>Bash<pre><code>apt install unar\nunar xxx.zip\n</code></pre> + \u200b\u53e6\u200b\u4e00\u79cd\u200bp7zip\u200b\u548c\u200bencoding conversion\uff0c\u200b\u6bd4\u5982\u200b<p></p> <p></p>Bash<pre><code># Traditional Chinese (Taiwan, Singapore, Hong Kong, Macao...)\nLANG=zh_HK 7za x filename.zip\ncd gamefolder\nconvmv --notest -f cp950 -t utf8 -r *\n</code></pre> \u200b\u53c2\u8003\u200b\u6587\u7ae0\u200b\uff1ahttps://wiki.easyrpg.org/unzip-games<p></p> <p>\u200b\u4e00\u5207\u200b\u5de5\u4f5c\u200b\u90fd\u200b\u5efa\u7acb\u200b\u5728\u200b\u4e0d\u200b\u987a\u5229\u200b\u7684\u200b\u57fa\u7840\u200b\u4e0a\u200b\uff0c\u200b\u8ba9\u200b\u6211\u4eec\u200b\u6709\u200b\u4e86\u200b\u5411\u4e0b\u200b\u63a2\u7a76\u200b\u7684\u200b\u673a\u4f1a\u200b\u3002\u200b\u7531\u4e8e\u200b\u7f51\u7edc\u200b\u539f\u56e0\u200b\u5b89\u88c5\u200b\u4e0d\u4e86\u200bunar\uff0cunar\u200b\u624b\u52a8\u200b\u4e0b\u8f7d\u200b\u4f9d\u8d56\u200b\u53c8\u200b\u5f88\u591a\u200b\u2026</p>"},{"location":"blog/unicode%E7%BC%96%E7%A0%81%E5%92%8Cutf-8%E8%BD%AC%E6%8D%A2%E4%B8%8D%E5%90%8C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%B7%AE%E5%88%AB%E4%BB%A5%E5%8F%8Alocale%E6%9D%82%E8%B0%88/#ascii\u548cunicode\u7684\u533a\u522b","title":"ASCII\u200b\u548c\u200bUnicode\u200b\u7684\u200b\u533a\u522b","text":"<p>\u200b\u5148\u200b\u4e86\u89e3\u200b\u4e0b\u200bASCII\u200b\u548c\u200bUnicode\u200b\u533a\u522b\u200b, ASCII(\u200b\u7f8e\u56fd\u200b\u6807\u51c6\u200b\uff0c\u200b\u82f1\u6587\u5b57\u6bcd\u200b\u3001\u200b\u6570\u5b57\u200b\u6807\u70b9\u200b\u7b26\u200b\u3001\u200b\u63a7\u5236\u5b57\u7b26\u200b\uff0c\u200b\u5c31\u662f\u200b\u4e0d\u200b\u5305\u542b\u200b\u4e2d\u6587\u200b\u548c\u200b\u5176\u5b83\u200b\u56fd\u5bb6\u200b\u6587\u5b57\u200b)\u200b\u548c\u200bUnicode\uff08\u200b\u5927\u800c\u5168\u200b\uff09\u200b\u662f\u200b\u4e24\u79cd\u200b\u5b57\u7b26\u200b\u7f16\u7801\u65b9\u6848\u200b\uff0c\u200b\u5b83\u4eec\u200b\u90fd\u200b\u7528\u4e8e\u200b\u5728\u200b\u8ba1\u7b97\u673a\u200b\u4e2d\u200b\u8868\u793a\u200b\u6587\u672c\u200b\u3002\u200b\u8fd9\u662f\u200b\u5b83\u4eec\u200b\u4e4b\u95f4\u200b\u7684\u200b\u4e00\u4e9b\u200b\u4e3b\u8981\u200b\u533a\u522b\u200b\uff1a</p> <ol> <li>\u200b\u5b57\u7b26\u96c6\u200b\u5927\u5c0f\u200b\uff1a</li> <li>ASCII\uff08American Standard Code for Information Interchange\uff09\u200b\u662f\u200b\u57fa\u4e8e\u200b\u82f1\u8bed\u200b\u5b57\u6bcd\u200b\u7684\u200b\u7f16\u7801\u65b9\u6848\u200b\uff0c\u200b\u53ea\u80fd\u200b\u8868\u793a\u200b128\u200b\u4e2a\u5b57\u7b26\u200b\uff0c\u200b\u5305\u62ec\u200b\u82f1\u6587\u200b\u5927\u200b\u5c0f\u5199\u5b57\u6bcd\u200b\u3001\u200b\u6570\u5b57\u200b0-9\u3001\u200b\u6807\u70b9\u7b26\u53f7\u200b\u4ee5\u53ca\u200b\u4e00\u4e9b\u200b\u63a7\u5236\u5b57\u7b26\u200b\u3002</li> <li> <p>Unicode\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5168\u7403\u200b\u5b57\u7b26\u96c6\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u8868\u793a\u200b\u4e16\u754c\u200b\u4e0a\u200b\u51e0\u4e4e\u200b\u6240\u6709\u200b\u8bed\u8a00\u200b\u7684\u200b\u5b57\u7b26\u200b\u3002Unicode\u200b\u53ef\u4ee5\u200b\u8868\u793a\u200b\u8d85\u8fc7\u200b110,000\u200b\u4e2a\u5b57\u7b26\u200b\u3002</p> </li> <li> <p>\u200b\u7f16\u7801\u65b9\u5f0f\u200b\uff1a</p> </li> <li>ASCII\u200b\u4f7f\u7528\u200b\u4e00\u4e2a\u200b\u5b57\u8282\u200b\uff087\u200b\u4f4d\u200b\uff0c\u200b\u4f46\u200b\u901a\u5e38\u200b\u7528\u200b8\u200b\u4f4d\u200b\u8868\u793a\u200b\uff09\u200b\u6765\u200b\u8868\u793a\u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u200b\u3002</li> <li> <p>Unicode\u200b\u6709\u200b\u51e0\u79cd\u200b\u4e0d\u540c\u200b\u7684\u200b\u7f16\u7801\u65b9\u5f0f\u200b\uff0c\u200b\u5305\u62ec\u200bUTF-8\u3001UTF-16\u200b\u548c\u200bUTF-32\u3002\u200b\u5728\u200bUTF-8\u200b\u4e2d\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b1\u200b\u5230\u200b4\u200b\u4e2a\u200b\u5b57\u8282\u200b\u6765\u200b\u8868\u793a\u200b\u3002\u200b\u5728\u200bUTF-16\u200b\u4e2d\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u200b\u901a\u5e38\u200b\u4f7f\u7528\u200b2\u200b\u4e2a\u200b\u6216\u200b4\u200b\u4e2a\u200b\u5b57\u8282\u200b\u6765\u200b\u8868\u793a\u200b\u3002\u200b\u5728\u200bUTF-32\u200b\u4e2d\u200b\uff0c\u200b\u6240\u6709\u200b\u5b57\u7b26\u200b\u90fd\u200b\u4f7f\u7528\u200b4\u200b\u4e2a\u200b\u5b57\u8282\u200b\u6765\u200b\u8868\u793a\u200b\u3002</p> </li> <li> <p>\u200b\u517c\u5bb9\u6027\u200b\uff1a</p> </li> <li>ASCII\u200b\u662f\u200b\u6700\u65e9\u200b\u7684\u200b\u5b57\u7b26\u200b\u7f16\u7801\u6807\u51c6\u200b\u4e4b\u4e00\u200b\uff0c\u200b\u88ab\u200b\u5e7f\u6cdb\u5e94\u7528\u200b\u5728\u200b\u5404\u79cd\u200b\u7cfb\u7edf\u200b\u548c\u200b\u534f\u8bae\u200b\u4e2d\u200b\u3002</li> <li>Unicode\u200b\u8bbe\u8ba1\u200b\u65f6\u200b\u517c\u5bb9\u200bASCII\uff0c\u200b\u4e5f\u5c31\u662f\u8bf4\u200b\u5728\u200bUnicode\u200b\u4e2d\u200b\uff0cASCII\u200b\u7684\u200b\u6240\u6709\u200b\u5b57\u7b26\u200b\u90fd\u200b\u4e0e\u200bASCII\u200b\u7f16\u7801\u200b\u76f8\u540c\u200b\u3002</li> </ol> <p>ASCII\u200b\u7684\u200b\u4e3b\u8981\u200b\u4f18\u70b9\u200b\u662f\u200b\u7b80\u5355\u200b\u548c\u200b\u5e7f\u6cdb\u652f\u6301\u200b\uff0c\u200b\u4f46\u200b\u5b83\u200b\u4e0d\u80fd\u200b\u8868\u793a\u200b\u975e\u200b\u82f1\u8bed\u200b\u5b57\u7b26\u200b\u3002Unicode\u200b\u66f4\u200b\u590d\u6742\u200b\uff0c\u200b\u4f46\u200b\u5b83\u200b\u53ef\u4ee5\u200b\u8868\u793a\u200b\u4e16\u754c\u200b\u4e0a\u200b\u51e0\u4e4e\u200b\u6240\u6709\u200b\u7684\u200b\u5b57\u7b26\u200b\uff0c\u200b\u6240\u4ee5\u200b\u66f4\u200b\u9002\u5408\u200b\u4e8e\u200b\u56fd\u9645\u5316\u200b\u7684\u200b\u5e94\u7528\u200b\u3002</p>"},{"location":"blog/unicode%E7%BC%96%E7%A0%81%E5%92%8Cutf-8%E8%BD%AC%E6%8D%A2%E4%B8%8D%E5%90%8C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%B7%AE%E5%88%AB%E4%BB%A5%E5%8F%8Alocale%E6%9D%82%E8%B0%88/#utf8\u548cunicode\u7684\u5173\u7cfb","title":"UTF8\u200b\u548c\u200bunicode\u200b\u7684\u200b\u5173\u7cfb","text":"<p>Unicode \u200b\u89e3\u51b3\u200b\u4e86\u200b\u7f16\u7801\u200b\u7edf\u4e00\u200b\u7684\u200b\u95ee\u9898\u200b\uff0c\u200b\u4f46\u200b\u6ca1\u6709\u200b\u89e3\u51b3\u200b\u7f16\u7801\u200b\u5b58\u50a8\u200b\u548c\u200b\u89e3\u6790\u200b\u7684\u200b\u95ee\u9898\u200b\u3002UTF-8 \u200b\u5219\u200b\u89e3\u51b3\u200b\u4e86\u200b Unicode \u200b\u6ca1\u6709\u200b\u89e3\u51b3\u200b\u7684\u200b\u95ee\u9898\u200b\u3002 UTF-8 \u200b\u662f\u200b\u4e00\u79cd\u200b\u53d8\u200b\u957f\u200b\u7f16\u7801\u200b\uff0c\u200b\u4f1a\u200b\u4f7f\u7528\u200b 1 \u200b\u5230\u200b 4 \u200b\u4e2a\u200b\u5b57\u8282\u200b\u8868\u793a\u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u200b\uff0c\u200b\u7c7b\u4f3c\u200b\u4e8e\u200b\u54c8\u592b\u66fc\u200b\u6811\u200b\uff0c\u200b\u5177\u4f53\u200b\u4e0e\u200b Unicode \u200b\u7684\u200b\u6620\u5c04\u200b\u5173\u7cfb\u200b\u5982\u4e0b\u200b :</p> Unicode \u200b\u8303\u56f4\u200b\uff08\u200b\u5341\u516d\u8fdb\u5236\u200b\uff09 UTF-8 \u200b\u7f16\u7801\u65b9\u5f0f\u200b\uff08\u200b\u4e8c\u8fdb\u5236\u200b\uff09 0000 0000 ~ 0000 007F 0xxxxxxx 0000 0080 ~ 0000 07FF 110xxxxx 10xxxxxx 0000 0800 ~ 0000 FFFF 1110xxxx 10xxxxxx 10xxxxxx 0001 0000 ~ 0010 FFFF 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx <p>\u200b\u8be6\u7ec6\u200b\u4ecb\u7ecd\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200b\uff1ahttps://sf-zhou.github.io/programming/chinese_encoding.html</p>"},{"location":"blog/unicode%E7%BC%96%E7%A0%81%E5%92%8Cutf-8%E8%BD%AC%E6%8D%A2%E4%B8%8D%E5%90%8C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%B7%AE%E5%88%AB%E4%BB%A5%E5%8F%8Alocale%E6%9D%82%E8%B0%88/#\u5199\u4e2apython\u811a\u672c\u8f6c\u6362","title":"\u5199\u4e2a\u200bPython\u200b\u811a\u672c\u200b\u8f6c\u6362","text":"<p>c\u200b\u4ee3\u8868\u200b\u4e00\u4e2a\u200bunicode\u200b\u5b57\u7b26\u200b\uff08\u200b\u53ef\u80fd\u200b\u4e0d\u6b62\u200b\u4e00\u4e2a\u200b\u5b57\u8282\u200b\uff0c\u200b\u6bd4\u5982\u200b2\u200b\u4e2a\u200b\u5b57\u8282\u200b\u30013\u200b\u4e2a\u200b\u5b57\u8282\u200b\u30014\u200b\u4e2a\u200b\u5b57\u8282\u200b\uff09\uff0c\u2019u4e00\u2019 &lt;= c &lt;= \u2018u9fff\u2019\uff0c\u200b\u5728\u200b\u8fd9\u4e2a\u200b\u8303\u56f4\u200b\u7684\u200butf8\u200b\u5c31\u662f\u200b\u6c49\u5b57\u200b\u3002</p> Python<pre><code>def to_unicode_string(raw_string):\n    # ord\u200b\u5c06\u200b\u5b57\u7b26\u200b\u8f6c\u6362\u6210\u200bunicode\u200b\u7f16\u7801\u200b\uff0chex\u200b\u53d6\u200b16\u200b\u8fdb\u5236\u200b\n    return ''.join(['#U'+hex(ord(c))[2:] if '\\u4e00' &lt;= c &lt;= '\\u9fff' else c for c in raw_string])\n\n\n# \u200b\u91c7\u7528\u200b\u6b63\u5219\u8868\u8fbe\u5f0f\u200b\u5339\u914d\u200b #Uxxxx \u200b\u5b57\u7b26\u200b\uff0c\u200b\u5c06\u200b\u5176\u200b\u8f6c\u6362\u6210\u200b\u6c49\u5b57\u200b\u7684\u200butf-8\u200b\u5b57\u7b26\u200b\nimport re\ndef split_with_unicode(s):\n    return re.split(r'(#[Uu][0-9a-fA-F]{4})', s)\n\ndef from_unicode_string(unicode_string):\n    return ''.join([chr(int(c[2:], 16)) if c.startswith(\"#U\") else c for c in split_with_unicode(unicode_string) if c])\n\n\ndef test_func(s):\n    res = to_unicode_string(s)\n    print(res)\n    print(from_unicode_string(res))\n\ns = \"1801\u200b\u4e07\u91cc\u957f\u57ce\u200b\u6c38\u4e0d\u5012\u200b_123445_5_3811-3826s_000004.jpg\"\ntest_func(s)\n\ntest_func(\"\u200b\u6211\u200b\u7231\u200bC++\")\n</code></pre> <p>\u200b\u8f93\u51fa\u200b\u7ed3\u679c\u200b\u5c31\u662f\u200b\u6211\u4eec\u200b\u7684\u200b\u9884\u671f\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u7684\u200b\u5f88\u200b\u4e0d\u9519\u200b\uff01\uff01 </p>Text Only<pre><code>1801#U4e07#U91cc#U957f#U57ce#U6c38#U4e0d#U5012_123445_5_3811-3826s_000004.jpg\n1801\u200b\u4e07\u91cc\u957f\u57ce\u200b\u6c38\u4e0d\u5012\u200b_123445_5_3811-3826s_000004.jpg\n</code></pre><p></p>"},{"location":"blog/unicode%E7%BC%96%E7%A0%81%E5%92%8Cutf-8%E8%BD%AC%E6%8D%A2%E4%B8%8D%E5%90%8C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%B7%AE%E5%88%AB%E4%BB%A5%E5%8F%8Alocale%E6%9D%82%E8%B0%88/#\u5199\u4e2arust\u7a0b\u5e8f\u770b\u770b","title":"\u5199\u4e2a\u200brust\u200b\u7a0b\u5e8f\u200b\u770b\u770b","text":"<p>\u200b\u51fd\u6570\u200b\u548c\u200b\u5b9e\u73b0\u200b\u903b\u8f91\u200b\u90fd\u200b\u662f\u200b\u548c\u200bpython\u200b\u4e00\u6837\u200b\u7684\u200b\uff0c\u200b\u533a\u522b\u200b\u662f\u200bregex\u200b\u6b63\u5219\u8868\u8fbe\u5f0f\u200b\u5199\u6cd5\u200b\u4e0d\u540c\u200b\u3002 </p>Rust<pre><code>extern crate regex;\nuse regex::Regex;\n\nfn to_unicode_string(raw_string: &amp;str) -&gt; String {\n    raw_string.chars().map(|c| {\n        if '\\u{4e00}' &lt;= c &amp;&amp; c &lt;= '\\u{9fff}' {\n            format!(\"#U{:04x}\", c as u32)\n        } else {\n            c.to_string()\n        }\n    }).collect()\n}\n\nfn split_with_unicode(input: &amp;str) -&gt; Vec&lt;&amp;str&gt; {\n    let re = Regex::new(r\"#U[0-9a-fA-F]{4}\").unwrap();\n    let mut result = Vec::new();\n    let mut last_end = 0;\n\n    for mat in re.find_iter(input) {\n        // Add the portion before the current match to the result\n        if mat.start() &gt; last_end {\n            result.push(&amp;input[last_end..mat.start()]);\n        }\n        // Add the matched pattern to the result\n        result.push(&amp;input[mat.start()..mat.end()]);\n        last_end = mat.end();\n    }\n\n    // Add the remaining portion of the string, if any\n    if last_end &lt; input.len() {\n        result.push(&amp;input[last_end..]);\n    }\n\n    return result\n\n}\n\nfn from_unicode_string(unicode_string: &amp;str) -&gt; String {\n    println!(\"{}\", unicode_string);\n    split_with_unicode(unicode_string).iter().map(|&amp;c| {\n        if c.starts_with(\"#U\") {\n            char::from_u32(u32::from_str_radix(&amp;c[2..], 16).unwrap()).unwrap().to_string()\n        } else {\n            c.to_string()\n        }\n    }).collect()\n}\n\nfn test_func(s: &amp;str) {\n    let res = to_unicode_string(s);\n    println!(\"{}\", res);\n    println!(\"{}\", from_unicode_string(&amp;res));\n}\n\nfn main() {\n    let s = \"1801\u200b\u4e07\u91cc\u957f\u57ce\u200b\u6c38\u4e0d\u5012\u200b_123445_5_3811-3826s_000004.jpg\";\n    println!(\"{}\", s);\n    test_func(s);\n}\n\n// \u200b\u8f93\u51fa\u200b\u7ed3\u679c\u200b\uff1a\n// 1801\u200b\u4e07\u91cc\u957f\u57ce\u200b\u6c38\u4e0d\u5012\u200b_123445_5_3811-3826s_000004.jpg\n// 1801#U4e07#U91cc#U957f#U57ce#U6c38#U4e0d#U5012_123445_5_3811-3826s_000004.jpg\n// 1801#U4e07#U91cc#U957f#U57ce#U6c38#U4e0d#U5012_123445_5_3811-3826s_000004.jpg\n// 1801\u200b\u4e07\u91cc\u957f\u57ce\u200b\u6c38\u4e0d\u5012\u200b_123445_5_3811-3826s_000004.jpg\n</code></pre><p></p>"},{"location":"blog/unicode%E7%BC%96%E7%A0%81%E5%92%8Cutf-8%E8%BD%AC%E6%8D%A2%E4%B8%8D%E5%90%8C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%B7%AE%E5%88%AB%E4%BB%A5%E5%8F%8Alocale%E6%9D%82%E8%B0%88/#\u5199\u4e2ac\u770b\u770b","title":"\u5199\u4e2a\u200bc++\u200b\u770b\u770b","text":""},{"location":"blog/unicode%E7%BC%96%E7%A0%81%E5%92%8Cutf-8%E8%BD%AC%E6%8D%A2%E4%B8%8D%E5%90%8C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%B7%AE%E5%88%AB%E4%BB%A5%E5%8F%8Alocale%E6%9D%82%E8%B0%88/#\u76f4\u63a5\u7ffb\u8bd1python\u5230c\u9519\u8bef\u7248\u672c","title":"\u76f4\u63a5\u200b\u7ffb\u8bd1\u200bpython\u200b\u5230\u200bc++\uff0c\u200b\u9519\u8bef\u200b\u7248\u672c","text":"<p>\u200b\u76f4\u63a5\u200b\u7ffb\u8bd1\u200bpython\u200b\u903b\u8f91\u200b\u53ef\u4ee5\u200b\u5417\u200b\uff1f\u200b\u8fd9\u4e2a\u200b\u662f\u200b\u9519\u8bef\u200b\u7684\u200b\uff0c\u200b\u6211\u4eec\u200b\u6765\u770b\u200b\u4e00\u770b\u200b\u3002 \u200b\u56e0\u4e3a\u200bc++\u200b\u904d\u5386\u200b\u5b57\u7b26\u4e32\u200b\u5c31\u662f\u200b\u4e00\u4e2a\u200bchar\uff0cstd::string\u3001char\u200b\u53ea\u200b\u652f\u6301\u200b\u5355\u200b\u5b57\u7b26\u200b\u3002 \u200b\u9519\u8bef\u200b\u5199\u6cd5\u200b\uff1a </p>C++<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;regex&gt;\n#include &lt;sstream&gt;\n#include &lt;iomanip&gt;\n#include &lt;vector&gt;\n\nstd::string to_unicode_string(const std::string&amp; raw_string) {\n    std::ostringstream oss;\n    for (const auto&amp; c : raw_string) {\n        std::cout &lt;&lt; \"c : \" &lt;&lt; c &lt;&lt; std::endl;\n        if (c &gt;= 0x4E00 &amp;&amp; c &lt;= 0x9FFF) {\n            oss &lt;&lt; \"#U\" &lt;&lt; std::hex &lt;&lt; std::setw(4) &lt;&lt; std::setfill('0') &lt;&lt; static_cast&lt;int&gt;(c);\n        } else {\n            oss &lt;&lt; c;\n        }\n    }\n    return oss.str();\n}\n\nstd::vector&lt;std::string&gt; split_with_unicode(const std::string&amp; s) {\n    std::regex re(R\"((#[Uu][0-9a-fA-F]{4}))\");\n    std::sregex_token_iterator iter(s.begin(), s.end(), re, {-1, 0});\n    std::sregex_token_iterator end;\n    std::vector&lt;std::string&gt; result(iter, end);\n    return result;\n}\n\nstd::string from_unicode_string(const std::string&amp; unicode_string) {\n    std::ostringstream oss;\n    auto parts = split_with_unicode(unicode_string);\n    for (const auto&amp; part : parts) {\n        if (part.starts_with(\"#U\") || part.starts_with(\"#u\")) {\n            int code;\n            std::istringstream(part.substr(2)) &gt;&gt; std::hex &gt;&gt; code;\n            oss &lt;&lt; static_cast&lt;char&gt;(code);\n        } else {\n            oss &lt;&lt; part;\n        }\n    }\n    return oss.str();\n}\n\nvoid test_func(const std::string&amp; s) {\n    auto res = to_unicode_string(s);\n    std::cout &lt;&lt; res &lt;&lt; std::endl;\n    std::cout &lt;&lt; from_unicode_string(res) &lt;&lt; std::endl;\n}\n\nint main() {\n    std::string s = \"1801\u200b\u4e07\u91cc\u957f\u57ce\u200b\u6c38\u4e0d\u5012\u200b_123445_5_3811-3826s_000004.jpg\";\n    test_func(s);\n    return 0;\n}\n</code></pre><p></p> <p>\u200b\u8f93\u51fa\u200b\u7ed3\u679c\u200b\uff1a </p>Text Only<pre><code>1801\u200b\u4e07\u91cc\u957f\u57ce\u200b\u6c38\u4e0d\u5012\u200b_123445_5_3811-3826s_000004.jpg\n1801\u200b\u4e07\u91cc\u957f\u57ce\u200b\u6c38\u4e0d\u5012\u200b_123445_5_3811-3826s_000004.jpg\n</code></pre> \u200b\u7531\u4e8e\u200bc\u200b\u662f\u200b\u5355\u200b\u5b57\u7b26\u200b\uff0c\u200b\u56e0\u6b64\u200b\u4e0d\u4f1a\u200b\u8d70\u200b\u4e0b\u9762\u200b\u7684\u200b\u903b\u8f91\u200b\uff0c C++<pre><code> if (c &gt;= 0x4E00 &amp;&amp; c &lt;= 0x9FFF) {\n            oss &lt;&lt; \"#U\" &lt;&lt; std::hex &lt;&lt; std::setw(4) &lt;&lt; std::setfill('0') &lt;&lt; static_cast&lt;int&gt;(c);\n        }\n</code></pre><p></p> <p>\u200b\u7f16\u8bd1\u200b\u547d\u4ee4\u200b\uff1a </p>Bash<pre><code>g++ test.cpp  -std=gnu++20\n</code></pre><p></p>"},{"location":"blog/unicode%E7%BC%96%E7%A0%81%E5%92%8Cutf-8%E8%BD%AC%E6%8D%A2%E4%B8%8D%E5%90%8C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%B7%AE%E5%88%AB%E4%BB%A5%E5%8F%8Alocale%E6%9D%82%E8%B0%88/#\u624b\u52a8\u5b9e\u73b0unicode\u548cutf-8\u8f6c\u6362\u903b\u8f91","title":"\u624b\u52a8\u200b\u5b9e\u73b0\u200bunicode\u200b\u548c\u200butf-8\u200b\u8f6c\u6362\u200b\u903b\u8f91","text":"<p>\u200b\u6839\u636e\u200b\u524d\u9762\u200b\u7684\u200bUnicode\u200b\u548c\u200butf-8\u200b\u5173\u7cfb\u200b\u4ecb\u7ecd\u200b\uff0c\u200b\u624b\u52a8\u200b\u5b9e\u73b0\u200bunicode\u200b\u548c\u200butf-8\u200b\u8f6c\u6362\u200b\u903b\u8f91\u200b, \u200b\u4e00\u8d77\u200b\u770b\u770b\u200butf8\u200b\u548c\u200bunicode\u200b\u5982\u4f55\u200b\u4e92\u8f6c\u200b\uff1a</p> C++<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;regex&gt;\n#include &lt;sstream&gt;\n#include &lt;iomanip&gt;\n#include &lt;vector&gt;\n\n// Helper function to decode UTF-8 to a single Unicode code point\nuint32_t utf8_to_codepoint(const char*&amp; it, const char* end) {\n    uint32_t codepoint = 0;\n    unsigned char ch = *it;\n\n    if (ch &lt; 0x80) {\n        codepoint = ch;\n    } else if ((ch &amp; 0xE0) == 0xC0) {\n        codepoint = ch &amp; 0x1F;\n    } else if ((ch &amp; 0xF0) == 0xE0) {\n        codepoint = ch &amp; 0x0F;\n    } else if ((ch &amp; 0xF8) == 0xF0) {\n        codepoint = ch &amp; 0x07;\n    }\n\n    ++it;\n    while (it != end &amp;&amp; (*it &amp; 0xC0) == 0x80) {\n        codepoint = (codepoint &lt;&lt; 6) | (*it &amp; 0x3F);\n        ++it;\n    }\n\n    return codepoint;\n}\n\nstd::string to_unicode_string(const std::string&amp; raw_string) {\n    std::ostringstream oss;\n    const char* it = raw_string.c_str();\n    const char* end = it + raw_string.size();\n\n    while (it &lt; end) {\n        const char* start = it;\n        uint32_t codepoint = utf8_to_codepoint(it, end);\n\n        if (codepoint &gt;= 0x4E00 &amp;&amp; codepoint &lt;= 0x9FFF) {\n            oss &lt;&lt; \"#U\" &lt;&lt; std::hex &lt;&lt; std::setw(4) &lt;&lt; std::setfill('0') &lt;&lt; codepoint;\n        } else {\n            oss.write(start, it - start);\n        }\n    }\n\n    return oss.str();\n}\n\nstd::vector&lt;std::string&gt; split_with_unicode(const std::string&amp; s) {\n    std::regex re(R\"((#[Uu][0-9a-fA-F]{4}))\");\n    std::sregex_token_iterator iter(s.begin(), s.end(), re, {-1, 0});\n    std::sregex_token_iterator end;\n    std::vector&lt;std::string&gt; result(iter, end);\n    return result;\n}\n\nstd::string from_unicode_string(const std::string&amp; unicode_string) {\n    std::ostringstream oss;\n    auto parts = split_with_unicode(unicode_string);\n    for (const auto&amp; part : parts) {\n        if (part.starts_with(\"#U\") || part.starts_with(\"#u\")) {\n            int code;\n            std::istringstream(part.substr(2)) &gt;&gt; std::hex &gt;&gt; code;\n            if (code &lt; 0x80) {\n                oss &lt;&lt; static_cast&lt;char&gt;(code);\n            } else {\n                // Encode code into UTF-8\n                if (code &lt; 0x800) {\n                    oss &lt;&lt; static_cast&lt;char&gt;((code &gt;&gt; 6) | 0xC0);\n                    oss &lt;&lt; static_cast&lt;char&gt;((code &amp; 0x3F) | 0x80);\n                } else if (code &lt; 0x10000) {\n                    oss &lt;&lt; static_cast&lt;char&gt;((code &gt;&gt; 12) | 0xE0);\n                    oss &lt;&lt; static_cast&lt;char&gt;(((code &gt;&gt; 6) &amp; 0x3F) | 0x80);\n                    oss &lt;&lt; static_cast&lt;char&gt;((code &amp; 0x3F) | 0x80);\n                }\n            }\n        } else {\n            oss &lt;&lt; part;\n        }\n    }\n    return oss.str();\n}\n\nvoid test_func(const std::string&amp; s) {\n    auto res = to_unicode_string(s);\n    std::cout &lt;&lt; res &lt;&lt; std::endl;\n    std::cout &lt;&lt; from_unicode_string(res) &lt;&lt; std::endl;\n}\n\nint main() {\n    std::string s = \"1801\u200b\u4e07\u91cc\u200bggg\u200b\u957f\u57ce\u200b\u6c38\u4e0d\u5012\u200b_123445_5_3811-3826s_000004.jpg\";\n    test_func(s);\n    return 0;\n}\n</code></pre>"},{"location":"blog/unicode%E7%BC%96%E7%A0%81%E5%92%8Cutf-8%E8%BD%AC%E6%8D%A2%E4%B8%8D%E5%90%8C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%B7%AE%E5%88%AB%E4%BB%A5%E5%8F%8Alocale%E6%9D%82%E8%B0%88/#wstring\u5b9e\u73b0","title":"wstring\u200b\u5b9e\u73b0","text":"<p>wstring\u200b\u548c\u200bwchar\u200b\u662f\u200b\u652f\u6301\u200b\u591a\u200b\u5b57\u7b26\u200b\u7684\u200b\uff0c\u200b\u548c\u200b\u5e73\u53f0\u200b\u76f8\u5173\u200b\uff0c\u200b\u4e5f\u8bb8\u200b2\u200b\u4e2a\u200b\u5b57\u8282\u200b\uff0c\u200b\u4e5f\u8bb8\u200b4\u200b\u4e2a\u200b\u5b57\u8282\u200b\u3002</p> <p>C++ \u200b\u5927\u529b\u200b\u51fa\u200b\u5947\u8ff9\u200b\uff0c\u200b\u63d0\u51fa\u200b\u4f7f\u7528\u200b wchar_t \u200b\u89e3\u51b3\u200b\u591a\u200b\u5b57\u8282\u200b\u7f16\u7801\u200b\u5e26\u6765\u200b\u7684\u200b\u95ee\u9898\u200b\u3002\u200b\u65e2\u7136\u200b\u591a\u200b\u5b57\u8282\u200b\u8ba1\u7b97\u957f\u5ea6\u200b\u4e0d\u200b\u51c6\u786e\u200b\uff0c\u200b\u90a3\u200b\u5c31\u200b\u76f4\u63a5\u200b\u4f7f\u7528\u200b\u4e00\u4e2a\u200b\u7c7b\u578b\u200b\u4ee3\u66ff\u200b\u591a\u200b\u5b57\u8282\u200b\u3002\u200b\u76ee\u524d\u200b UTF-8\u3001Unicode \u200b\u7b49\u200b\u7f16\u7801\u200b\u81f3\u591a\u200b\u9700\u8981\u200b 4 \u200b\u4e2a\u200b\u5b57\u8282\u200b\uff0c\u200b\u90a3\u200b\u5c31\u200b\u76f4\u63a5\u200b\u5b9a\u4e49\u200b wchar_t \u200b\u4e3a\u200b 4 \u200b\u4e2a\u200b\u5b57\u8282\u200b\uff0c\u200b\u6240\u6709\u200b\u95ee\u9898\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u8fce\u5203\u800c\u89e3\u200b\u4e86\u200b\u3002\u200b\u662f\u200b\u7684\u200b\uff0c\u200b\u8fd9\u200b\u4e0d\u662f\u200b\u5f00\u73a9\u7b11\u200b\u3002wchar_t \u200b\u5177\u4f53\u200b\u5b9a\u4e49\u200b\u4e3a\u200b 2 \u200b\u4e2a\u200b\u5b57\u8282\u200b\uff0c\u200b\u8fd8\u662f\u200b 4 \u200b\u4e2a\u200b\u5b57\u8282\u200b\u5e76\u200b\u6ca1\u6709\u200b\u660e\u786e\u89c4\u5b9a\u200b\uff0c\u200b\u89c6\u200b\u5e73\u53f0\u200b\u800c\u5b9a\u200b\u3002</p> C++<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;sstream&gt;\n#include &lt;iomanip&gt;\n#include &lt;vector&gt;\n#include &lt;regex&gt;\n#include &lt;codecvt&gt;\n\n// Function to convert a wide string to a Unicode representation\nstd::wstring to_unicode_wstring(const std::wstring&amp; raw_wstring) {\n    std::wostringstream woss;\n\n    for (wchar_t wc : raw_wstring) {\n        if (wc &gt;= 0x4E00 &amp;&amp; wc &lt;= 0x9FFF) {\n            woss &lt;&lt; L\"#U\" &lt;&lt; std::hex &lt;&lt; std::setw(4) &lt;&lt; std::setfill(L'0') &lt;&lt; static_cast&lt;int&gt;(wc);\n            woss &lt;&lt; std::dec; \n        } else {\n            woss &lt;&lt; wc;\n        }\n    }\n\n    return woss.str();\n}\n\n// Helper function to split a wide string based on Unicode markers\nstd::vector&lt;std::wstring&gt; split_with_unicode(const std::wstring&amp; s) {\n    std::wregex re(L\"(#[Uu][0-9a-fA-F]{4})\");\n    std::wsregex_token_iterator iter(s.begin(), s.end(), re, {-1, 0});\n    std::wsregex_token_iterator end;\n    std::vector&lt;std::wstring&gt; result(iter, end);\n    for(auto item: result ){\n    std::wcout &lt;&lt; \"split : \" &lt;&lt; item &lt;&lt; std::endl;\n\n    }\n    return result;\n}\n\n// Function to convert a Unicode representation back to a wide string\nstd::wstring from_unicode_wstring(const std::wstring&amp; unicode_wstring) {\n    std::wostringstream woss;\n    auto parts = split_with_unicode(unicode_wstring);\n    for (const auto&amp; part : parts) {\n        if (part.starts_with(L\"#U\") || part.starts_with(L\"#u\")) {\n            int code;\n            std::wistringstream(part.substr(2)) &gt;&gt; std::hex &gt;&gt; code;\n            woss &lt;&lt; static_cast&lt;wchar_t&gt;(code);\n        } else {\n            woss &lt;&lt; part;\n        }\n    }\n    return woss.str();\n}\n\n// Function to test the conversion process\nvoid test_func(const std::wstring&amp; s) {\n    auto res = to_unicode_wstring(s);\n    // const std::locale utf8( std::locale(), new std::codecvt_utf8&lt;wchar_t&gt; );\n    // std::wcout.imbue(utf8);\n    std::wcout &lt;&lt; L\"Encoded: \" &lt;&lt; res &lt;&lt; std::endl;\n    // Encoded: 1801#U4,e07#U9,1cc#U9,57f#U5,7ce#U6,c38#U4,e0d#U5,012_123445_5_3811-3826s_000004.jpg???\n\n    // Convert wstring to string for display (requires a codecvt facet)\n    // std::wstring_convert&lt;std::codecvt_utf8&lt;wchar_t&gt;&gt; converter;\n    // std::string utf8_string = converter.to_bytes(res);\n\n    // Output the converted UTF-8 string\n    // std::cout &lt;&lt; \"UTF-8 String: \" &lt;&lt; utf8_string &lt;&lt; std::endl;\n\n    res = L\"1801#U4e07#U91cc#U957f#U57ce#U6c38#U4e0d#U5012_123445_5_3811-3826s_000004.jpg\";\n    std::wcout &lt;&lt; L\"Decoded: \" &lt;&lt; from_unicode_wstring(res) &lt;&lt; std::endl;\n}\n\nint main() {\n    std::locale::global(std::locale(\"\"));  // Set the locale to support wide characters\n    std::wstring s = L\"1801\u200b\u4e07\u91cc\u957f\u57ce\u200b\u6c38\u4e0d\u5012\u200b_123445_5_3811-3826s_000004.jpg\";\n    test_func(s);\n    return 0;\n}\n</code></pre>"},{"location":"blog/unicode%E7%BC%96%E7%A0%81%E5%92%8Cutf-8%E8%BD%AC%E6%8D%A2%E4%B8%8D%E5%90%8C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%B7%AE%E5%88%AB%E4%BB%A5%E5%8F%8Alocale%E6%9D%82%E8%B0%88/#wstring-\u548c-string\u76f8\u4e92\u8f6c\u6362","title":"wstring \u200b\u548c\u200b string\u200b\u76f8\u4e92\u200b\u8f6c\u6362","text":"C++<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;locale&gt;\n#include &lt;codecvt&gt;\n\n// Convert std::string to std::wstring\nstd::wstring string_to_wstring(const std::string&amp; str) {\n    std::wstring_convert&lt;std::codecvt_utf8&lt;wchar_t&gt;&gt; converter;\n    return converter.from_bytes(str);\n}\n\n// Convert std::wstring to std::string\nstd::string wstring_to_string(const std::wstring&amp; wstr) {\n    std::wstring_convert&lt;std::codecvt_utf8&lt;wchar_t&gt;&gt; converter;\n    return converter.to_bytes(wstr);\n}\n\nint main() {\n\n    std::string narrow = \"Hello, world!\";\n    std::wstring wide = string_to_wstring(narrow);\n    std::wcout &lt;&lt; L\"Converted to wstring: \" &lt;&lt; wide &lt;&lt; std::endl;\n\n\n    std::wstring wstr = L\"\u200b\u4f60\u597d\u200b\uff0c\u200b\u4e16\u754c\u200b\uff01\";\n    std::string str = wstring_to_string(wstr);\n    std::cout &lt;&lt; \"Converted to string: \" &lt;&lt; str &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"blog/unicode%E7%BC%96%E7%A0%81%E5%92%8Cutf-8%E8%BD%AC%E6%8D%A2%E4%B8%8D%E5%90%8C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%B7%AE%E5%88%AB%E4%BB%A5%E5%8F%8Alocale%E6%9D%82%E8%B0%88/#\u4e00\u4e9b\u6ce8\u610f\u7684\u95ee\u9898","title":"\u4e00\u4e9b\u200b\u6ce8\u610f\u200b\u7684\u200b\u95ee\u9898","text":""},{"location":"blog/unicode%E7%BC%96%E7%A0%81%E5%92%8Cutf-8%E8%BD%AC%E6%8D%A2%E4%B8%8D%E5%90%8C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%B7%AE%E5%88%AB%E4%BB%A5%E5%8F%8Alocale%E6%9D%82%E8%B0%88/#stdwcout\u548cstdcout\u8f93\u51fa\u987a\u5e8f\u7684\u5f71\u54cd","title":"std::wcout\u200b\u548c\u200bstd::cout\u200b\u8f93\u51fa\u200b\u987a\u5e8f\u200b\u7684\u200b\u5f71\u54cd","text":"<p>\u200b\u4f60\u200b\u4f1a\u200b\u53d1\u73b0\u200b\u5148\u200b\u8c03\u7528\u200b\u8f93\u51fa\u200bstd::wcout\u200b\u540e\u200b\uff0c\u200b\u8c03\u7528\u200bstd::cout\u200b\u4e0d\u4f1a\u200b\u8f93\u51fa\u200b\u7ed3\u679c\u200b\u3002\u200b\u4f46\u662f\u200b\u53cd\u8fc7\u6765\u200b\u7684\u200b\u8c03\u7528\u200b\u987a\u5e8f\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u3002</p> <p>\u200b\u53c2\u8003\u200b\u8fd9\u91cc\u200b\u6709\u4e2a\u200b\u56de\u7b54\u200b\uff1a unexpected_behavior_of_stdcout_following_stdwcout</p> <p>\u200b\u610f\u601d\u200b\u662f\u200b\u8bf4\u200b\uff0c\u200b\u5e95\u5c42\u200bc\u200b\u5b9e\u73b0\u200b\u5728\u200b\u8f93\u51fa\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u9700\u8981\u200b\u786e\u5b9a\u200b\u5bbd\u5ea6\u200b\u3002</p> <p>The underlying C streams have a concept of being either wide-oriented or narrow-oriented. You can\u2019t use wide output functions on a narrow stream and vice-versa.</p> <p>\u200b\u4f46\u662f\u200b\u6ca1\u6709\u200b\u8bf4\u660e\u200b\u4e3a\u5565\u200b\u53cd\u8fc7\u6765\u200b\u53ef\u4ee5\u200b\uff0c\u200b\u6211\u200b\u8fd9\u91cc\u200b\u6ca1\u6709\u200b\u6df1\u7a76\u200b\uff0c\u200b\u7559\u5f85\u200b\u4ee5\u540e\u200b\uff0c\u200b\u53ea\u662f\u200b\u63d0\u51fa\u200b\u9047\u5230\u200b\u7684\u200b\u8fd9\u4e2a\u200b\u73b0\u8c61\u200b\u3002</p>"},{"location":"blog/unicode%E7%BC%96%E7%A0%81%E5%92%8Cutf-8%E8%BD%AC%E6%8D%A2%E4%B8%8D%E5%90%8C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%B7%AE%E5%88%AB%E4%BB%A5%E5%8F%8Alocale%E6%9D%82%E8%B0%88/#locale\u7684\u8bbe\u7f6e\u4f1a\u5f71\u54cdto_unicode_wstring\u51fd\u6570\u7684\u7ed3\u679c","title":"locale\u200b\u7684\u200b\u8bbe\u7f6e\u200b\u4f1a\u200b\u5f71\u54cd\u200bto_unicode_wstring\u200b\u51fd\u6570\u200b\u7684\u200b\u7ed3\u679c","text":"<p>\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u4e00\u4e2a\u200b\u6d41\u200b\u4e0e\u200b\u7279\u5b9a\u200b\u7684\u200b<code>locale</code>\u200b\u5173\u8054\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u81ea\u52a8\u200b\u5904\u7406\u200b\u5c0f\u6570\u70b9\u200b\u3001\u200b\u5343\u4f4d\u200b\u5206\u9694\u7b26\u200b\u3001\u200b\u8d27\u5e01\u200b\u7b26\u53f7\u200b\u7b49\u200b\u7684\u200b\u683c\u5f0f\u200b\u3002</p> <p>\u200b\u6bd4\u5982\u200b\uff1a \u200b\u5982\u4f55\u200b\u8bbe\u7f6e\u200blocaleI(\u201cen_US.utf-8\u201d), \u200b\u8f93\u51fa\u200b\u7684\u200b\u6bcf\u4e2a\u200bhex 16\u200b\u8fdb\u5236\u200b\u7f16\u7801\u200b\u6709\u200b\u201c,\u201d\u200b\u7b26\u53f7\u200b\u5206\u5272\u200b\u3002</p> Bash<pre><code>std::locale::global(std::locale(\"en_US.utf-8\"));\n\u200b\u8f93\u51fa\u200b\uff1a1801#U4,e07#U91cc#U9,57f#U5,7ce#U6,c38#U4,e0d#U5,012_123445_5_3811-3826s_000004.jpg\n</code></pre> <p>\u200b\u5982\u679c\u200b\u8bbe\u7f6e\u200blocaleI(\u201cC\u201d), \u200b\u8f93\u51fa\u200b\u7684\u200b\u6bcf\u4e2a\u200bhex 16\u200b\u8fdb\u5236\u200b\u7f16\u7801\u200b\u4e0d\u4f1a\u200b\u6709\u200b\u7b26\u53f7\u200b\u5206\u5272\u200b\uff0c\u200b\u6309\u7167\u200bc\u200b\u8bed\u8a00\u200b\u89c4\u8303\u200b\u3002</p> Bash<pre><code>std::locale::global(std::locale(\"C\"));\n\u200b\u8f93\u51fa\u200b\uff1a1801#U4e07#U91cc#U957f#U57ce#U6c38#U4e0d#U5012_123445_5_3811-3826s_000004.jpg\n</code></pre>"},{"location":"blog/unicode%E7%BC%96%E7%A0%81%E5%92%8Cutf-8%E8%BD%AC%E6%8D%A2%E4%B8%8D%E5%90%8C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%B7%AE%E5%88%AB%E4%BB%A5%E5%8F%8Alocale%E6%9D%82%E8%B0%88/#locale\u662f\u4e2a\u5565","title":"locale\u200b\u662f\u200b\u4e2a\u200b\u5565\u200b\uff1f","text":""},{"location":"blog/unicode%E7%BC%96%E7%A0%81%E5%92%8Cutf-8%E8%BD%AC%E6%8D%A2%E4%B8%8D%E5%90%8C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%B7%AE%E5%88%AB%E4%BB%A5%E5%8F%8Alocale%E6%9D%82%E8%B0%88/#linux-locale\u547d\u4ee4","title":"linux locale\u200b\u547d\u4ee4","text":"<p>\u200b\u5728\u200bLinux\u200b\u7cfb\u7edf\u200b\u4e2d\u200b\uff0c<code>locale</code>\u200b\u662f\u200b\u4e00\u4e2a\u200b\u4e0e\u200b\u5730\u533a\u200b\u548c\u200b\u8bed\u8a00\u200b\u73af\u5883\u200b\u8bbe\u5b9a\u200b\u76f8\u5173\u200b\u7684\u200b\u5de5\u5177\u200b\u548c\u200b\u8bbe\u7f6e\u200b\u3002\u200b\u5b83\u200b\u7528\u4e8e\u200b\u5b9a\u4e49\u200b\u7a0b\u5e8f\u200b\u5982\u4f55\u200b\u5904\u7406\u200b\u4e0e\u200b\u8bed\u8a00\u200b\u76f8\u5173\u200b\u7684\u200b\u4efb\u52a1\u200b\uff0c\u200b\u5982\u200b\u5b57\u7b26\u200b\u7f16\u7801\u200b\u3001\u200b\u6570\u5b57\u200b\u683c\u5f0f\u200b\u3001\u200b\u65e5\u671f\u200b\u548c\u200b\u65f6\u95f4\u200b\u683c\u5f0f\u200b\u3001\u200b\u8d27\u5e01\u200b\u7b26\u53f7\u200b\u7b49\u200b\u3002<code>locale</code>\u200b\u8bbe\u7f6e\u200b\u5bf9\u4e8e\u200b\u5f00\u53d1\u200b\u56fd\u9645\u5316\u200b\u548c\u200b\u672c\u5730\u5316\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u975e\u5e38\u200b\u91cd\u8981\u200b\u3002</p>"},{"location":"blog/unicode%E7%BC%96%E7%A0%81%E5%92%8Cutf-8%E8%BD%AC%E6%8D%A2%E4%B8%8D%E5%90%8C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%B7%AE%E5%88%AB%E4%BB%A5%E5%8F%8Alocale%E6%9D%82%E8%B0%88/#\u4e3b\u8981\u7684locale\u73af\u5883\u53d8\u91cf","title":"\u4e3b\u8981\u200b\u7684\u200b<code>locale</code>\u200b\u73af\u5883\u53d8\u91cf","text":"<ul> <li><code>LANG</code>: \u200b\u5b9a\u4e49\u200b\u4e86\u200b\u9ed8\u8ba4\u200b\u7684\u200b\u5730\u57df\u200b\u548c\u200b\u8bed\u8a00\u200b\u73af\u5883\u200b\u8bbe\u5b9a\u200b\u3002\u200b\u5982\u679c\u200b\u6ca1\u6709\u200b\u5176\u4ed6\u200b\u7279\u5b9a\u200b\u7684\u200b<code>locale</code>\u200b\u53d8\u91cf\u200b\u88ab\u200b\u8bbe\u7f6e\u200b\uff0c\u200b\u7cfb\u7edf\u200b\u4f1a\u200b\u4f7f\u7528\u200b\u8fd9\u4e2a\u200b\u3002</li> <li><code>LC_ALL</code>: \u200b\u8986\u76d6\u200b\u6240\u6709\u200b\u5176\u4ed6\u200b<code>LC_*</code>\u200b\u53d8\u91cf\u200b\u7684\u200b\u4f18\u5148\u200b\u8bbe\u7f6e\u200b\uff0c\u200b\u7528\u4e8e\u200b\u5f3a\u5236\u200b\u4f7f\u7528\u200b\u7279\u5b9a\u200b\u7684\u200b<code>locale</code>\u3002\u200b\u901a\u5e38\u200b\u7528\u4e8e\u200b\u6d4b\u8bd5\u200b\uff0c\u200b\u4e0d\u200b\u5efa\u8bae\u200b\u5728\u200b\u666e\u901a\u200b\u73af\u5883\u200b\u4e2d\u200b\u8bbe\u7f6e\u200b\u3002</li> <li><code>LC_COLLATE</code>: \u200b\u63a7\u5236\u200b\u5b57\u7b26\u4e32\u200b\u7684\u200b\u6392\u5e8f\u200b\u3002</li> <li><code>LC_CTYPE</code>: \u200b\u63a7\u5236\u5b57\u7b26\u200b\u5206\u7c7b\u200b\u548c\u200b\u5b57\u7b26\u200b\u5904\u7406\u200b\uff08\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5927\u5c0f\u5199\u200b\u8f6c\u6362\u200b\uff09\u3002</li> <li><code>LC_MESSAGES</code>: \u200b\u63a7\u5236\u7cfb\u7edf\u200b\u6d88\u606f\u200b\u7684\u200b\u8bed\u8a00\u200b\u3002</li> <li><code>LC_MONETARY</code>: \u200b\u63a7\u5236\u200b\u8d27\u5e01\u200b\u683c\u5f0f\u200b\u3002</li> <li><code>LC_NUMERIC</code>: \u200b\u63a7\u5236\u6570\u5b57\u200b\u683c\u5f0f\u200b\uff08\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5c0f\u6570\u70b9\u200b\u7b26\u53f7\u200b\uff09\u3002</li> <li><code>LC_TIME</code>: \u200b\u63a7\u5236\u200b\u65e5\u671f\u200b\u548c\u200b\u65f6\u95f4\u200b\u683c\u5f0f\u200b\u3002</li> </ul>"},{"location":"blog/unicode%E7%BC%96%E7%A0%81%E5%92%8Cutf-8%E8%BD%AC%E6%8D%A2%E4%B8%8D%E5%90%8C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%B7%AE%E5%88%AB%E4%BB%A5%E5%8F%8Alocale%E6%9D%82%E8%B0%88/#\u4f7f\u7528locale\u547d\u4ee4","title":"\u4f7f\u7528\u200b<code>locale</code>\u200b\u547d\u4ee4","text":"<ul> <li> <p>\u200b\u67e5\u770b\u200b\u5f53\u524d\u200blocale\u200b\u8bbe\u7f6e\u200b:   </p>Bash<pre><code>locale\n</code></pre><p></p> </li> <li> <p>\u200b\u67e5\u770b\u200b\u652f\u6301\u200b\u7684\u200blocale:   </p>Bash<pre><code>locale -a\n</code></pre><p></p> </li> <li> <p>\u200b\u8bbe\u7f6e\u200blocale:   \u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5728\u200b\u7ec8\u7aef\u200b\u4f1a\u8bdd\u200b\u4e2d\u200b\u4e34\u65f6\u200b\u8bbe\u7f6e\u200blocale\uff0c\u200b\u4f8b\u5982\u200b\uff1a   </p>Bash<pre><code>export LANG=en_US.UTF-8\n</code></pre><p></p> </li> <li> <p>locale\u200b\u672a\u200b\u8bbe\u7f6e\u200b\u6216\u200b\u4e0d\u200b\u6b63\u786e\u200b: \u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5bfc\u81f4\u200b\u5b57\u7b26\u200b\u663e\u793a\u200b\u9519\u8bef\u200b\uff08\u200b\u5982\u200b\u4e71\u7801\u200b\uff09\u200b\u6216\u8005\u200b\u7a0b\u5e8f\u200b\u65e0\u6cd5\u200b\u6b63\u5e38\u200b\u8fd0\u884c\u200b\u3002\u200b\u786e\u4fdd\u200b\u6b63\u786e\u200b\u751f\u6210\u200b\u5e76\u200b\u8bbe\u7f6e\u200b\u6240\u200b\u9700\u200b\u7684\u200blocale\u3002</p> </li> <li> <p>\u200b\u7f3a\u5c11\u200b\u7279\u5b9a\u200blocale: \u200b\u4f7f\u7528\u200b<code>locale-gen</code>\u200b\u547d\u4ee4\u200b\u751f\u6210\u200b\u5e76\u200b\u4f7f\u200b\u5176\u200b\u53ef\u7528\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u751f\u6210\u200b<code>en_US.UTF-8</code>\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u4ee5\u4e0b\u200b\u547d\u4ee4\u200b\uff1a </p>Bash<pre><code>sudo locale-gen en_US.UTF-8\n</code></pre><p></p> </li> </ul>"},{"location":"blog/unicode%E7%BC%96%E7%A0%81%E5%92%8Cutf-8%E8%BD%AC%E6%8D%A2%E4%B8%8D%E5%90%8C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%B7%AE%E5%88%AB%E4%BB%A5%E5%8F%8Alocale%E6%9D%82%E8%B0%88/#c-stdlocale","title":"c++ std::locale\ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350","text":"<p>\u200b\u5728\u200bC++\u200b\u4e2d\u200b\uff0c<code>std::locale</code>\u200b\u662f\u200b\u4e00\u4e2a\u200b\u7c7b\u200b\uff0c\u200b\u7528\u4e8e\u200b\u5c01\u88c5\u200b\u4e0e\u200b\u5730\u533a\u200b\u548c\u200b\u8bed\u8a00\u200b\u8bbe\u5b9a\u200b\u76f8\u5173\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002\u200b\u8fd9\u200b\u5305\u62ec\u200b\u65e5\u671f\u200b\u548c\u200b\u65f6\u95f4\u200b\u683c\u5f0f\u200b\u3001\u200b\u8d27\u5e01\u200b\u7b26\u53f7\u200b\u3001\u200b\u6570\u5b57\u200b\u683c\u5f0f\u200b\u3001\u200b\u5b57\u7b26\u200b\u5206\u7c7b\u200b\u548c\u200b\u5b57\u7b26\u200b\u8f6c\u6362\u200b\u7b49\u200b\u3002\u200b\u8fd9\u4e9b\u200b\u4fe1\u606f\u200b\u5bf9\u4e8e\u200b\u56fd\u9645\u5316\u200b\uff08i18n\uff09\u200b\u548c\u200b\u672c\u5730\u5316\u200b\uff08l10n\uff09\u200b\u662f\u200b\u975e\u5e38\u200b\u91cd\u8981\u200b\u7684\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5b83\u4eec\u200b\u5141\u8bb8\u200b\u7a0b\u5e8f\u200b\u6839\u636e\u200b\u7528\u6237\u200b\u7684\u200b\u5730\u533a\u200b\u6216\u200b\u8bed\u8a00\u200b\u8bbe\u5b9a\u200b\u6765\u200b\u8c03\u6574\u200b\u8f93\u51fa\u200b\u548c\u200b\u8f93\u5165\u200b\u683c\u5f0f\u200b\u3002</p> <p><code>std::locale</code>\u200b\u7c7b\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e00\u79cd\u200b\u673a\u5236\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u67d0\u4e9b\u200b\u90e8\u5206\u200b\uff08\u200b\u5982\u200b\u8f93\u5165\u8f93\u51fa\u200b\u6d41\u200b\uff09\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b\u4f7f\u7528\u200b\u7279\u5b9a\u200b\u7684\u200b\u5730\u65b9\u5316\u200b\u89c4\u5219\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u4e00\u4e2a\u200b\u6d41\u200b\u4e0e\u200b\u7279\u5b9a\u200b\u7684\u200b<code>locale</code>\u200b\u5173\u8054\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u81ea\u52a8\u200b\u5904\u7406\u200b\u5c0f\u6570\u70b9\u200b\u3001\u200b\u5343\u4f4d\u200b\u5206\u9694\u7b26\u200b\u3001\u200b\u8d27\u5e01\u200b\u7b26\u53f7\u200b\u7b49\u200b\u7684\u200b\u683c\u5f0f\u200b\u3002</p> <p>\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u4e00\u4e9b\u200b\u5e38\u89c1\u200b\u7684\u200b\u7528\u6cd5\u200b\uff1a </p>C++<pre><code>#include &lt;locale&gt;\n#include &lt;iostream&gt;\nint main()\n{\n    // \u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200blocale\u200b\u5bf9\u8c61\u200b\n    std::locale loc(\"C.UTF-8\");\n    // \u200b\u5c06\u200blocale\u200b\u5e94\u7528\u200b\u4e8e\u6d41\u200b\n    std::cout.imbue(loc);\n    // \u200b\u83b7\u53d6\u200b\u5f53\u524d\u200b\u5168\u5c40\u200blocale\n    std::locale currentLocale = std::locale();\n    // \u200b\u4f7f\u7528\u200blocale\u200b\u8fdb\u884c\u200b\u5b57\u7b26\u200b\u8f6c\u6362\u200b\n    char c = 'a';\n    if (std::isalpha(c, loc))\n    {\n        std::cout &lt;&lt; c &lt;&lt; \" is alphabetic in the given locale.\" &lt;&lt; std::endl;\n    }\n}\n</code></pre><p></p> <ul> <li>Vim\u200b\u6709\u200b\u4ec0\u4e48\u200b\u5947\u6280\u6deb\u5de7\u200b\uff1f</li> <li>C++\u200b\u6280\u6cd5\u200b:\u200b\u6a21\u677f\u200b\u5143\u200b\u7f16\u7a0b\u200b\u7f16\u8bd1\u200b\u671f\u200b\u83b7\u53d6\u200b\u7c7b\u200b\u6210\u5458\u200b\u6570\u91cf\u200b</li> <li>C++20\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u57fa\u4e8e\u200b\u5c5e\u6027\u200b\u6d4b\u8bd5\u200b\u7684\u200bquickcheck-cpp\u200b\u5e93\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/zip%E5%8E%8B%E7%BC%A9%E6%A0%BC%E5%BC%8F%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E4%BB%8E%E5%90%8E%E5%BE%80%E5%89%8D%E5%BC%80%E5%A7%8B%E8%A7%A3%E6%9E%90%E7%9A%84/","title":"zip\u200b\u538b\u7f29\u200b\u683c\u5f0f\u200b\u4e3a\u4ec0\u4e48\u200b\u662f\u4ece\u200b\u540e\u200b\u5f80\u524d\u200b\u5f00\u59cb\u200b\u89e3\u6790\u200b\u7684\u200b\uff1f","text":"<p>\u200b\u901a\u8fc7\u200b\u5bf9\u200bZIP \u200b\u6587\u4ef6\u683c\u5f0f\u200b\u7684\u200b\u5b66\u4e60\u200b\uff0c\u200b\u5c31\u200b\u6709\u200b\u4e86\u200b\u8db3\u591f\u200b\u7684\u200b\u4fe1\u606f\u200b\u80fd\u591f\u200b\u9010\u5b57\u200b\u8282\u200b\u624b\u52a8\u200b\u8bfb\u53d6\u200b\u548c\u200b\u5199\u5165\u200b ZIP \u200b\u6587\u4ef6\u200b\uff0c\u200b\u77e5\u9053\u200b\u4e3a\u4ec0\u4e48\u200bzip\u200b\u538b\u7f29\u200b\u683c\u5f0f\u200b\u4e3a\u4ec0\u4e48\u200b\u662f\u4ece\u200b\u540e\u200b\u5f80\u524d\u200b\u5f00\u59cb\u200b\u89e3\u6790\u200b\u7684\u200b\u3002</p>"},{"location":"blog/zip%E5%8E%8B%E7%BC%A9%E6%A0%BC%E5%BC%8F%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E4%BB%8E%E5%90%8E%E5%BE%80%E5%89%8D%E5%BC%80%E5%A7%8B%E8%A7%A3%E6%9E%90%E7%9A%84/#zip-\u6587\u4ef6\u7ed3\u6784\u6982\u8ff0","title":"ZIP \u200b\u6587\u4ef6\u200b\u7ed3\u6784\u200b\u6982\u8ff0","text":"<p>ZIP \u200b\u6587\u4ef6\u200b\u7531\u200b\u591a\u4e2a\u200b\u5934\u90e8\u200b\u7ec4\u6210\u200b\uff0c\u200b\u5305\u62ec\u200b\u672c\u5730\u200b\u6587\u4ef6\u200b\u5934\u200b\u3001\u200b\u4e2d\u592e\u200b\u76ee\u5f55\u200b\u6587\u4ef6\u200b\u5934\u200b\u548c\u200b\u4e2d\u592e\u200b\u76ee\u5f55\u200b\u7ed3\u675f\u200b\u8bb0\u5f55\u200b\u3002\u200b\u6bcf\u4e2a\u200b\u5934\u90e8\u200b\u7531\u200b\u7b7e\u540d\u200b\u548c\u200b\u5934\u90e8\u200b\u6570\u636e\u200b\u7ec4\u6210\u200b\u3002</p> <p></p> <p>\u200b\u6807\u5934\u200b\u5305\u62ec\u200b\uff1a</p> <ul> <li> <p>\u200b\u672c\u5730\u200b\u6587\u4ef6\u200b\u5934\u200b\uff08Local file header\uff09\uff1a\u200b\u5305\u542b\u200b\u5355\u4e2a\u200b\u6587\u4ef6\u200b\u7684\u200b\u5143\u200b\u6570\u636e\u200b\u5e76\u200b\u540e\u200b\u8ddf\u200b\u6587\u4ef6\u200b\u6570\u636e\u200b\uff0c\u200b\u53ef\u200b\u72ec\u7acb\u200b\u538b\u7f29\u200b\u548c\u200b\u52a0\u5bc6\u200b\u3002</p> </li> <li> <p>\u200b\u4e2d\u592e\u200b\u76ee\u5f55\u200b\u6587\u4ef6\u200b\u5934\u200b\uff08Central directory file header\uff09\uff1a\u200b\u5305\u542b\u200b\u5355\u4e2a\u200b\u6587\u4ef6\u200b\u7684\u200b\u5143\u200b\u6570\u636e\u200b\u548c\u200b\u6307\u5411\u200b\u672c\u5730\u200b\u6587\u4ef6\u200b\u5934\u200b\u7684\u200b\u504f\u79fb\u91cf\u200b\uff0c\u200b\u591a\u4e2a\u200b\u4e2d\u592e\u200b\u76ee\u5f55\u200b\u6587\u4ef6\u200b\u5934\u200b\u5f62\u6210\u200b\u4e2d\u592e\u200b\u76ee\u5f55\u200b\uff0c\u200b\u53ef\u200b\u5feb\u901f\u200b\u679a\u4e3e\u200b\u5b58\u6863\u200b\u4e2d\u200b\u7684\u200b\u6240\u6709\u200b\u6587\u4ef6\u200b\u3002</p> </li> <li> <p>\u200b\u4e2d\u592e\u200b\u76ee\u5f55\u200b\u7ed3\u675f\u200b\u8bb0\u5f55\u200b\uff08End of central directory record\uff09\uff1a\u200b\u5305\u542b\u200b\u627e\u5230\u200b\u7b2c\u4e00\u4e2a\u200b\u4e2d\u592e\u200b\u76ee\u5f55\u200b\u6587\u4ef6\u200b\u5934\u200b\u7684\u200b\u4fe1\u606f\u200b\uff0c\u200b\u662f\u200b ZIP \u200b\u6587\u4ef6\u200b\u7684\u200b\u5165\u53e3\u200b\u70b9\u200b\u3002</p> </li> </ul> <p>ZIP \u200b\u6587\u4ef6\u200b\u7684\u200b\u89e3\u6790\u200b\u7684\u200b\u5165\u53e3\u200b\u70b9\u200b\u662f\u200b\u4e2d\u592e\u200b\u76ee\u5f55\u200b\u7ed3\u675f\u200b\u8bb0\u5f55\u200b\uff08End of central directory record\uff09\uff0c\u200b\u59cb\u7ec8\u200b\u4f4d\u4e8e\u200b\u6587\u4ef6\u200b\u7684\u200b\u672b\u5c3e\u200b\u3002 \u200b\u6bd4\u5982\u200b\u5305\u542b\u200b a.txt \u200b\u548c\u200b b.txt \u200b\u7684\u200b ZIP \u200b\u6587\u4ef6\u200b\u7684\u200b\u53ef\u89c6\u5316\u200b\u6548\u679c\u200b:</p> <p></p> <p>\u200b\u4e2d\u5fc3\u200b\u76ee\u5f55\u200b\u4f4d\u4e8e\u200b\u5e95\u90e8\u200b\uff0c\u200b\u8bbe\u8ba1\u200b\u4e0a\u200b\u7684\u200b\u4e00\u4e2a\u200b\u597d\u5904\u200b\u662f\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ea\u200b\u9700\u200b\u9644\u52a0\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u4e2d\u5fc3\u200b\u76ee\u5f55\u200b\u5373\u53ef\u200b\u8986\u76d6\u200b\u5b83\u200b\u3002\u200b\u5982\u679c\u200b\u6211\u4eec\u200b\u60f3\u200b\u6dfb\u52a0\u200b\u4e00\u4e2a\u200b\u6587\u4ef6\u200bc.txt\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u9644\u52a0\u200b\u8be5\u200b\u6587\u4ef6\u200b\u8bb0\u5f55\u200b\u5e76\u200b\u9644\u52a0\u200b\u4e00\u4e2a\u200b\u5305\u542b\u200b\u5b83\u200b\u7684\u200b\u65b0\u200b\u4e2d\u592e\u200b\u76ee\u5f55\u200b\uff1a</p> <p></p> <p>\u200b\u65e7\u200b\u76ee\u5f55\u200b\u4ecd\u7136\u200b\u5b58\u5728\u200b\uff0c\u200b\u4f46\u200b\u4e0d\u518d\u200b\u88ab\u200b\u5f15\u7528\u200b\u3002\u200b\u8fd9\u6837\u200b\u6211\u4eec\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u4fee\u6539\u200b\u5b58\u6863\u200b\u800c\u200b\u65e0\u9700\u200b\u91cd\u5199\u200b\u6587\u4ef6\u200b\u3002\u200b\u6bd4\u5982\u200b\u5728\u5386\u53f2\u4e0a\u200b\uff0c\u200b\u5f53\u200b\u4f7f\u7528\u200b\u8f6f\u76d8\u200b\u8fdb\u884c\u200b\u5b58\u50a8\u200b\u65f6\u200b\uff0c\u200b\u6b64\u200b\u884c\u4e3a\u200b\u5c24\u5176\u200b\u91cd\u8981\u200b\u3002\u200b\u5199\u5165\u200b\u901f\u5ea6\u200b\u5f88\u200b\u6162\u200b\uff0c\u200b\u5e76\u4e14\u200b ZIP \u200b\u5b58\u6863\u200b\u53ef\u80fd\u200b\u8de8\u8d8a\u200b\u591a\u4e2a\u200b\u78c1\u76d8\u200b\u3002\u200b\u60a8\u200b\u4e0d\u4ec5\u200b\u53ef\u4ee5\u200b\u6dfb\u52a0\u200b\u6587\u4ef6\u200b\u800c\u200b\u4e0d\u200b\u8fdb\u884c\u200b\u4efb\u4f55\u200b\u91cd\u5199\u200b\uff0c\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u9644\u52a0\u200b\u6570\u636e\u200b\u6765\u200b\u4fee\u6539\u200b\u548c\u200b\u5220\u9664\u200b\u5b58\u6863\u200b\u4e2d\u200b\u7684\u200b\u6587\u4ef6\u200b\u3002\u200b\u5f53\u7136\u200b\uff0c\u200b\u5df2\u200b\u5220\u9664\u200b\u7684\u200b\u6587\u4ef6\u200b\u548c\u200b\u4fee\u6539\u200b\u540e\u200b\u7684\u200b\u6587\u4ef6\u200b\u7684\u200b\u5148\u524d\u200b\u7248\u672c\u200b\u5c06\u200b\u4fdd\u7559\u200b\u5728\u200b\u78c1\u76d8\u200b\u4e0a\u200b\uff0c\u200b\u4f46\u200b\u517c\u5bb9\u200b\u7684\u200b ZIP \u200b\u8bfb\u53d6\u200b\u5de5\u5177\u200b\u4e0d\u4f1a\u200b\u8bfb\u53d6\u200b\u5b83\u4eec\u200b\u3002</p> <p>\u200b\u4f8b\u5982\u200b\uff1a\u200b\u901a\u8fc7\u200b\u4ec5\u200b\u9644\u52a0\u200b\u65b0\u200b\u6570\u636e\u200b\u6765\u200b\u5b9e\u73b0\u200b\u4e0a\u8ff0\u200b \u201cZIP \u200b\u6587\u4ef6\u200b\u201d \u200b\u793a\u4f8b\u200b\u7684\u200b\u4fee\u6539\u200b\u548c\u200b\u5220\u9664\u200b\u3002\u200b\u4fee\u6539\u200b b.txt \u200b\u5e76\u200b\u4ece\u200b \u201cZIP \u200b\u6587\u4ef6\u200b\u201d \u200b\u4e2d\u200b\u5220\u9664\u200b a.txt \u200b\u800c\u200b\u65e0\u9700\u200b\u4efb\u4f55\u200b\u91cd\u5199\u200b\u3002</p> <p></p>"},{"location":"blog/zip%E5%8E%8B%E7%BC%A9%E6%A0%BC%E5%BC%8F%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E4%BB%8E%E5%90%8E%E5%BE%80%E5%89%8D%E5%BC%80%E5%A7%8B%E8%A7%A3%E6%9E%90%E7%9A%84/#\u4e2d\u592e\u76ee\u5f55\u7684\u4f4d\u7f6e\u53ca\u4f5c\u7528","title":"\u4e2d\u592e\u200b\u76ee\u5f55\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u53ca\u200b\u4f5c\u7528","text":"<p>\u200b\u4e2d\u592e\u200b\u76ee\u5f55\u200b\u5728\u200b\u6587\u4ef6\u200b\u5e95\u90e8\u200b\uff0c\u200b\u8fd9\u6837\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u8ffd\u52a0\u200b\u65b0\u200b\u7684\u200b\u4e2d\u592e\u200b\u76ee\u5f55\u200b\u6765\u200b\u6dfb\u52a0\u200b\u6587\u4ef6\u200b\uff0c\u200b\u800c\u200b\u65e0\u9700\u200b\u91cd\u5199\u200b\u6574\u4e2a\u200b\u6587\u4ef6\u200b\u3002\u200b\u5728\u200b\u4f7f\u7528\u200b\u8f6f\u76d8\u200b\u5b58\u50a8\u200b\u65f6\u200b\u8fd9\u200b\u4e00\u200b\u7279\u6027\u200b\u5c24\u4e3a\u91cd\u8981\u200b\u3002\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u4ec5\u200b\u8ffd\u52a0\u200b\u6570\u636e\u200b\u6765\u200b\u4fee\u6539\u200b\u548c\u200b\u5220\u9664\u200b\u6587\u4ef6\u200b\uff0c\u200b\u65e7\u7248\u672c\u200b\u6587\u4ef6\u200b\u4ecd\u200b\u5728\u200b\u78c1\u76d8\u200b\u4e0a\u200b\u4f46\u200b\u5408\u89c4\u200b\u7684\u200b ZIP \u200b\u9605\u8bfb\u5668\u200b\u4e0d\u4f1a\u200b\u8bfb\u53d6\u200b\u3002</p>"},{"location":"blog/zip%E5%8E%8B%E7%BC%A9%E6%A0%BC%E5%BC%8F%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E4%BB%8E%E5%90%8E%E5%BE%80%E5%89%8D%E5%BC%80%E5%A7%8B%E8%A7%A3%E6%9E%90%E7%9A%84/#zip-\u6587\u4ef6\u7684\u6709\u8da3\u7279\u6027","title":"ZIP \u200b\u6587\u4ef6\u200b\u7684\u200b\u6709\u8da3\u200b\u7279\u6027","text":"<ul> <li> <p>ZIP \u200b\u6587\u4ef6\u200b\u53ef\u4ee5\u200b\u5728\u200b\u5f00\u5934\u200b\u6dfb\u52a0\u200b\u4efb\u610f\u200b\u5185\u5bb9\u200b\u4f7f\u200b\u5176\u200b\u65e2\u200b\u662f\u200b\u6709\u6548\u200b PNG \u200b\u53c8\u200b\u662f\u200b\u6709\u6548\u200b ZIP\uff08\u200b\u591a\u200b\u8bed\u8a00\u200b\u6587\u4ef6\u200b\uff09\u200b\u4ee5\u200b\u9690\u85cf\u200b ZIP\uff1b\u200b\u7531\u4e8e\u200b ZIP \u200b\u6587\u4ef6\u200b\u662f\u4ece\u200b\u672b\u5c3e\u200b\u8bfb\u53d6\u200b\u7684\u200b\uff0c\u200b\u56e0\u6b64\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u4efb\u4f55\u200b\u5185\u5bb9\u200b\u653e\u5728\u200b ZIP \u200b\u6587\u4ef6\u200b\u7684\u200b\u5f00\u5934\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5236\u4f5c\u200b\u4e00\u4e2a\u200b\u65e2\u200b\u662f\u200b\u6709\u6548\u200b PNG \u200b\u53c8\u200b\u662f\u200b\u6709\u6548\u200b ZIP\uff08\u200b\u591a\u200b\u8bed\u8a00\u200b\u6587\u4ef6\u200b\uff09\u200b\u7684\u200b\u6587\u4ef6\u200b\uff0c\u200b\u4ee5\u200b\u9690\u85cf\u200b\u5916\u89c2\u200b\u548c\u200b\u5de5\u4f5c\u200b\u65b9\u5f0f\u200b\u7c7b\u4f3c\u200b\u4e8e\u200b\u56fe\u50cf\u200b\u7684\u200b ZIP \u200b\u6587\u4ef6\u200b\u3002</p> </li> <li> <p>\u200b\u53ef\u4ee5\u200b\u5c06\u200b ZIP \u200b\u6587\u4ef6\u200b\u9644\u52a0\u200b\u5230\u200b ZIP \u200b\u63d0\u53d6\u200b\u5668\u200b\u4e8c\u8fdb\u5236\u200b\u6587\u4ef6\u200b\u4e2d\u4f7f\u200b\u5176\u81ea\u200b\u89e3\u538b\u200b\u5f62\u6210\u200b\u81ea\u200b\u89e3\u538b\u200b\u5b58\u6863\u200b\u6587\u4ef6\u200b\uff1b\u200b\u8be5\u200b\u6280\u672f\u200bSelf-extracting_archive\u200b\u5b9e\u73b0\u200b\u53cc\u51fb\u200b\u6587\u4ef6\u200b\u65f6\u200b\u81ea\u52a8\u200b\u89e3\u538b\u7f29\u200b\u7684\u200b\u5e38\u7528\u200b\u6280\u672f\u200b\u3002</p> </li> <li> <p>ZIP \u200b\u683c\u5f0f\u200b\u5141\u8bb8\u200b\u5728\u200b\u591a\u4e2a\u200b\u4f4d\u7f6e\u200b\u6dfb\u52a0\u200b \u201c\u200b\u6ce8\u91ca\u200b\u201d \u200b\u4ee5\u4f7f\u200b\u5176\u200b\u4e0e\u200b\u66f4\u200b\u591a\u200b\u683c\u5f0f\u200b\u517c\u5bb9\u200b\uff1b</p> </li> <li> <p>ZIP \u200b\u683c\u5f0f\u200b\u5141\u8bb8\u200b\u5b58\u6863\u200b\u62c6\u200b\u5206\u4e3a\u200b\u591a\u4e2a\u200b\u6587\u4ef6\u200b\u4ee5\u200b\u5e94\u5bf9\u200b\u6587\u4ef6\u5927\u5c0f\u200b\u9650\u5236\u200b\u3002ZIP \u200b\u683c\u5f0f\u200b\u5141\u8bb8\u200b\u5c06\u200b\u6863\u6848\u200b\u62c6\u200b\u5206\u4e3a\u200b\u591a\u4e2a\u200b\u6587\u4ef6\u200b\u3002\u200b\u5b9e\u73b0\u200b\u6b64\u200b\u76ee\u7684\u200b\u662f\u200b\u4e3a\u4e86\u200b\u80fd\u591f\u200b\u5c06\u200b\u5927\u578b\u200b\u6863\u6848\u200b\u62c6\u5206\u200b\u5230\u200b\u591a\u4e2a\u200b\u8f6f\u76d8\u200b\u4e0a\u200b\u3002\u200b\u4eca\u5929\u200b\uff0c\u200b\u5b83\u200b\u53ef\u80fd\u200b\u4ecd\u200b\u53ef\u200b\u7528\u4e8e\u200b\u5728\u200b\u4e0a\u4f20\u200b\u6216\u200b\u901a\u8fc7\u200b\u7535\u5b50\u90ae\u4ef6\u53d1\u9001\u200b\u66f4\u5927\u200b\u7684\u200b\u6863\u6848\u200b\u65f6\u200b\u89c4\u907f\u200b\u6587\u4ef6\u5927\u5c0f\u200b\u9650\u5236\u200b\u3002\u200b\u89c4\u8303\u200b\u4e2d\u200b\u63d0\u5230\u200b\u4e86\u200b\u79f0\u4e3a\u200b \u201cdisk number\u201d \u200b\u7b49\u200b\u7684\u200b\u5b57\u200b\u6bb5\u200b\uff0c\u200b\u5728\u200b\u5904\u7406\u200b\u591a\u200b\u90e8\u5206\u200b\u5b58\u6863\u200b\u65f6\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u5176\u200b\u89c6\u4e3a\u200b \u201cfile number\u201d\u3002\u200b\u5728\u200b\u672c\u6587\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ea\u200b\u5904\u7406\u200b\u5355\u4e2a\u200b\u6587\u4ef6\u200b\u5b58\u6863\u200b\uff0c\u200b\u56e0\u6b64\u200b\u60a8\u200b\u59cb\u7ec8\u200b\u53ef\u4ee5\u200b\u5047\u8bbe\u200b\u8fd9\u4e9b\u200b\u5b57\u6bb5\u200b\u662f\u200b\u201c\u200b\u78c1\u76d8\u200b 0\u201d\u3002</p> </li> </ul>"},{"location":"blog/zip%E5%8E%8B%E7%BC%A9%E6%A0%BC%E5%BC%8F%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E4%BB%8E%E5%90%8E%E5%BE%80%E5%89%8D%E5%BC%80%E5%A7%8B%E8%A7%A3%E6%9E%90%E7%9A%84/#\u8bfb\u53d6-zip-\u6587\u4ef6\u7684\u65b9\u6cd5","title":"\u8bfb\u53d6\u200b ZIP \u200b\u6587\u4ef6\u200b\u7684\u200b\u65b9\u6cd5","text":"<p>\u200b\u8bfb\u53d6\u200b ZIP \u200b\u6587\u4ef6\u200b\u9700\u5148\u200b\u627e\u5230\u200b\u4e2d\u592e\u200b\u76ee\u5f55\u200b\u7ed3\u675f\u200b\u8bb0\u5f55\u200b\uff0c\u200b\u8be5\u200b\u8bb0\u5f55\u200b\u5728\u200b\u6587\u4ef6\u200b\u672b\u5c3e\u200b\u4e14\u200b\u957f\u5ea6\u200b\u52a8\u6001\u200b\uff0c\u200b\u9700\u5728\u200b\u6587\u4ef6\u200b\u672b\u5c3e\u200b\u4e00\u5b9a\u200b\u533a\u95f4\u200b\u5185\u200b\u53cd\u5411\u200b\u626b\u63cf\u200b\u627e\u5230\u200b\u7b7e\u540d\u200b\u3002\u200b\u4ece\u200b\u4e2d\u592e\u200b\u76ee\u5f55\u200b\u7ed3\u675f\u200b\u8bb0\u5f55\u200b\u53ef\u200b\u5f97\u77e5\u200b\u4e2d\u592e\u200b\u76ee\u5f55\u200b\u7684\u200b\u504f\u79fb\u91cf\u200b\u548c\u200b\u8bb0\u5f55\u200b\u6570\u91cf\u200b\uff0c\u200b\u8bfb\u53d6\u200b\u4e2d\u592e\u200b\u76ee\u5f55\u200b\u6587\u4ef6\u200b\u5934\u200b\u53ef\u200b\u83b7\u53d6\u200b\u6587\u4ef6\u200b\u7684\u200b\u8be6\u7ec6\u4fe1\u606f\u200b\u3002\u200b\u518d\u200b\u6839\u636e\u200b\u4e2d\u592e\u200b\u76ee\u5f55\u200b\u4e2d\u200b\u7684\u200b\u504f\u79fb\u91cf\u200b\u8bfb\u53d6\u200b\u672c\u5730\u200b\u6587\u4ef6\u200b\u5934\u200b\u548c\u200b\u6587\u4ef6\u200b\u6570\u636e\u200b\u4ee5\u200b\u63d0\u53d6\u200b\u6587\u4ef6\u200b\u3002</p> <p>\u200b\u73b0\u5728\u200b\u8ba9\u200b\u6211\u4eec\u200b\u770b\u770b\u200b\u5982\u4f55\u200b\u8bfb\u53d6\u200b ZIP \u200b\u6587\u4ef6\u200b\u7684\u200b\u5b9e\u9645\u200b\u5b57\u8282\u200b\u3002\u200b\u6240\u6709\u200b\u591a\u200b\u5b57\u8282\u200b\u6570\u5b57\u200b\u90fd\u200b\u5b58\u50a8\u200b\u5728\u200b little-endian \u200b\u4e2d\u200b\u3002</p> <p>\u200b\u8981\u200b\u8bfb\u53d6\u200b ZIP \u200b\u6587\u4ef6\u200b\uff0c\u200b\u6211\u4eec\u200b\u5fc5\u987b\u200b\u9996\u5148\u200b\u5728\u200b\u6587\u4ef6\u200b\u672b\u5c3e\u200b\u627e\u5230\u200b End of central directory \u200b\u8bb0\u5f55\u200b\uff08\u200b\u7f29\u77ed\u200b\u7684\u200b EOCD\uff09\u3002\u200b\u8fd9\u200b\u542c\u200b\u8d77\u6765\u200b\u5fae\u4e0d\u8db3\u9053\u200b\uff0c\u200b\u4f46\u200b\u6709\u70b9\u200b\u68d8\u624b\u200b\u3002\u200b\u4e0b\u9762\u200b\u662f\u200b EOCD \u200b\u7684\u200b\u5b9a\u4e49\u200b\uff1a</p> Bytes Description 4 Signature (0x06054b50) 2 Number of this disk 2 Disk where central directory starts 2 Numbers of central directory records on this disk 2 Total number of central directory records 4 Size of central directory in bytes 4 Offset to start of central directory 2 Comment length (n) n Comment <p>\u200b\u5b9a\u4e49\u200b\u4e2d\u200b\u7684\u200b\u6700\u540e\u200b\u4e00\u884c\u200bComment\u200b\u4f7f\u6b64\u200b\u8bb0\u5f55\u200b\u7684\u200b\u67e5\u627e\u200b\u6709\u70b9\u200b\u590d\u6742\u200b, \u200b\u56e0\u4e3a\u200b\u8bb0\u5f55\u200b\u5177\u6709\u200b\u52a8\u6001\u200b\u957f\u5ea6\u200b\u3002\u200b\u6839\u636e\u200b\u6ce8\u91ca\u200b\u957f\u5ea6\u200b\uff0cEOCD \u200b\u7684\u200b\u5f00\u5934\u200b\u5c06\u200b\u4e0e\u200b\u6587\u4ef6\u200b\u672b\u5c3e\u200b\u7684\u200b\u504f\u79fb\u91cf\u200b\u4e0d\u540c\u200b\u3002</p> <ul> <li>\u200b\u5982\u679c\u200b n=0 \uff08\u200b\u7a7a\u200b\u6ce8\u91ca\u200b\uff09\uff0c\u200b\u5219\u200b EOCD \u200b\u4ece\u200b\u672b\u5c3e\u200b\u5f00\u59cb\u200b 22 \u200b\u5b57\u8282\u200b</li> <li>\u200b\u5982\u679c\u200b n=0xffff\uff08\u200b\u6700\u5927\u200b\u957f\u5ea6\u200b\u6ce8\u91ca\u200b\uff09\uff0c\u200b\u5219\u200b EOCD \u200b\u4ece\u200b\u672b\u5c3e\u200b\u5f00\u59cb\u200b 22 + 0xffff = 65557 \u200b\u5b57\u8282\u200b</li> </ul> <p>\u200b\u53ef\u80fd\u200b\u5b58\u5728\u200b EOCD \u200b\u7b7e\u540d\u200b\uff08\u200b\u8868\u683c\u200b\u4e2d\u200b\u7684\u200b Signature (0x06054b50)\uff09\u200b\u7684\u200b\u95f4\u9694\u200b\u4ecb\u4e8e\u200b 65557 \u200b\u548c\u200b\u672b\u5c3e\u200b\u7684\u200b 18 \u200b\u4e4b\u95f4\u200b\u3002\u200b\u603b\u5171\u200b\u5927\u7ea6\u200b 65.5 kb\u3002\u200b\u8fd9\u200b\u5728\u200b\u73b0\u4ee3\u200b\u8ba1\u7b97\u673a\u200b\u4e0a\u200b\u5e76\u4e0d\u591a\u200b\uff0c\u200b\u56e0\u6b64\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u6574\u4e2a\u200b\u95f4\u9694\u200b\u8bfb\u5165\u200b\u7f13\u51b2\u533a\u200b\uff0c\u200b\u7136\u540e\u200b\u5411\u200b\u540e\u200b\u626b\u63cf\u200b\u4ee5\u200b\u67e5\u627e\u200b\u7b7e\u540d\u200b\u3002\u200b\u627e\u5230\u200b EOCD \u200b\u7b7e\u540d\u200b\u540e\u200b\uff0c\u200b\u8bfb\u53d6\u200b ZIP \u200b\u6700\u200b\u56f0\u96be\u200b\u7684\u200b\u90e8\u5206\u200b\u5c31\u200b\u5b8c\u6210\u200b\u4e86\u200b\u3002\u200b\u5176\u4f59\u200b\u7684\u200b\u53ea\u662f\u200b\u5728\u200b\u7279\u5b9a\u200b\u504f\u79fb\u91cf\u200b\u5904\u200b\u89e3\u6790\u200b\u9884\u5b9a\u200b\u4e49\u200b\u7684\u200b\u4e8c\u8fdb\u5236\u200b\u7ed3\u6784\u200b\u3002</p>"},{"location":"blog/zip%E5%8E%8B%E7%BC%A9%E6%A0%BC%E5%BC%8F%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E4%BB%8E%E5%90%8E%E5%BE%80%E5%89%8D%E5%BC%80%E5%A7%8B%E8%A7%A3%E6%9E%90%E7%9A%84/#\u8bfb\u53d6\u4e2d\u592e\u76ee\u5f55central-directory","title":"\u8bfb\u53d6\u200b\u4e2d\u592e\u200b\u76ee\u5f55\u200b\uff08Central Directory\uff09","text":"<p>\u200b\u4ece\u200b EOCD \u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u77e5\u9053\u200b\u4e2d\u592e\u200b\u76ee\u5f55\u200b\u5f00\u59cb\u200b\u7684\u200b\u504f\u79fb\u91cf\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u6709\u200b\u591a\u5c11\u200b\u6761\u200b\u8bb0\u5f55\u200b\u3002\u200b\u6240\u4ee5\u200b\u6211\u4eec\u200b\u53ea\u200b\u9700\u8981\u200b\u5bfb\u627e\u200b\u90a3\u4e2a\u200b\u504f\u79fb\u91cf\u200b\u5e76\u200b\u5f00\u59cb\u200b\u8bfb\u53d6\u200b\u4e2d\u592e\u200b\u76ee\u5f55\u200b\u6587\u4ef6\u200b\u5934\u200b\u3002\u200b\u6bcf\u4e2a\u200b\u4e2d\u592e\u200b\u76ee\u5f55\u200b\u6587\u4ef6\u200b\u5934\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\uff1a</p> Bytes Description 4 Signature (0x02014b50) 2 Version made by 2 Minimum version needed to extract 2 Bit flag 2 Compression method 2 File last modification time (MS-DOS format) 2 File last modification date (MS-DOS format) 4 CRC-32 of uncompressed data 4 Compressed size 4 Uncompressed size 2 File name length (n) 2 Extra field length (m) 2 File comment length (k) 2 Disk number where file starts 2 Internal file attributes 4 External file attributes 4 Offset of local file header (from start of disk) n File name m Extra field k File comment <p>\u200b\u8fd9\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u4e86\u89e3\u200b\u7684\u200b\u6709\u5173\u200b\u6587\u4ef6\u200b\u7684\u200b\u6240\u6709\u200b\u4fe1\u606f\u200b\uff0c\u200b\u5305\u62ec\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u5728\u200b\u54ea\u91cc\u200b\u627e\u5230\u200b\u672c\u5730\u200b\u6587\u4ef6\u200b\u5934\u200b\u3002\u200b\u7531\u4e8e\u200b\u591a\u200b\u90e8\u5206\u200b\u5b58\u6863\u200b\u3001\u200b\u538b\u7f29\u200b\u548c\u200b\u52a0\u5bc6\u200b\u4e0d\u200b\u5728\u200b\u672c\u6587\u200b\u7684\u200b\u8ba8\u8bba\u200b\u8303\u56f4\u200b\u4e4b\u5185\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u505a\u51fa\u200b\u4ee5\u4e0b\u200b\u5047\u8bbe\u200b\uff1a</p> <ul> <li>\u200b\u4f4d\u200b\u6807\u5fd7\u200b(Bit flag) = 0</li> <li>\u200b\u538b\u7f29\u200b\u65b9\u6cd5\u200b(Compression method) = 0</li> <li>\u200b\u538b\u7f29\u200b\u5927\u5c0f\u200b(Compressed size) = \u200b\u672a\u200b\u538b\u7f29\u200b\u5927\u5c0f\u200b(Uncompressed size)</li> <li>\u200b\u6587\u4ef6\u200b\u5f00\u59cb\u200b\u7684\u200b\u78c1\u76d8\u200b\u7f16\u53f7\u200b(Disk number where file starts) = 0</li> </ul> <p>CRC-32 \u200b\u662f\u200b\u7528\u4e8e\u200b\u68c0\u6d4b\u200b\u635f\u574f\u200b\u6570\u636e\u200b\u7684\u200b\u6821\u9a8c\u200b\u548c\u200b\u3002\u200b\u8fd9\u200b\u5728\u200b\u73a9\u5177\u200b\u9879\u76ee\u200b\u4e2d\u200b\u53ef\u4ee5\u200b\u5ffd\u7565\u200b\uff0c\u200b\u4f46\u200b\u5728\u200b\u5b9e\u9645\u200b\u9879\u76ee\u200b\u4e2d\u200b\u5fc5\u987b\u200b\u5bf9\u200b\u5176\u200b\u8fdb\u884c\u200b\u9a8c\u8bc1\u200b\uff0c\u200b\u4ee5\u200b\u907f\u514d\u200b\u5728\u200b\u63d0\u53d6\u200b\u65f6\u200b\u521b\u5efa\u200b\u635f\u574f\u200b\u7684\u200b\u6587\u4ef6\u200b\u3002 \u200b\u5176\u4f59\u200b\u5b57\u200b\u6bb5\u200b\u5e94\u8be5\u200b\u662f\u200b\u4e0d\u8a00\u81ea\u660e\u200b\u7684\u200b\uff0c\u200b\u9664\u4e86\u200b Extra \u200b\u5b57\u200b\u6bb5\u200b\uff0c\u200b\u6211\u4eec\u200b\u7a0d\u540e\u200b\u4f1a\u200b\u56de\u5230\u200b\u90a3\u4e2a\u200b\u5b57\u200b\u6bb5\u200b\u3002</p>"},{"location":"blog/zip%E5%8E%8B%E7%BC%A9%E6%A0%BC%E5%BC%8F%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E4%BB%8E%E5%90%8E%E5%BE%80%E5%89%8D%E5%BC%80%E5%A7%8B%E8%A7%A3%E6%9E%90%E7%9A%84/#\u63d0\u53d6\u6587\u4ef6","title":"\u63d0\u53d6\u200b\u6587\u4ef6","text":"<p>\u200b\u4ece\u200b\u4e2d\u5fc3\u200b\u76ee\u5f55\u200b\u6211\u4eec\u200b\u77e5\u9053\u200b\u6240\u6709\u200b\u6587\u4ef6\u200b\u7684\u200b\u504f\u79fb\u91cf\u200b\u3002\u200b\u8981\u200b\u63d0\u53d6\u200b\u6587\u4ef6\u200b\uff0c\u200b\u6211\u4eec\u200b\u9996\u5148\u200b\u8bfb\u53d6\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\u7684\u200b\u672c\u5730\u200b\u6587\u4ef6\u200b\u5934\u200b\uff1a</p> Bytes Description 4 Signature (0x04034b50) 2 Minimum version needed to extract 2 Bit flag 2 Compression method 2 File last modification time (MS-DOS format) 2 File last modification date (MS-DOS format) 4 CRC-32 of uncompressed data 4 Compressed size 4 Uncompressed size 2 File name length (n) 2 Extra field length (m) n File name m Extra field <p>\u200b\u672c\u5730\u200b\u6587\u4ef6\u200b\u5934\u4e2d\u200b\u7684\u200b\u67d0\u4e9b\u200b\u6570\u636e\u200b\u4e0e\u200b\u4e2d\u5fc3\u200b\u76ee\u5f55\u200b\u4e2d\u200b\u7684\u200b\u6761\u76ee\u200b\u91cd\u590d\u200b\u3002\u200b\u7531\u4e8e\u200b\u672c\u5730\u200b\u6587\u4ef6\u200b\u5934\u200b\u8fd8\u200b\u5305\u542b\u200b\u63d0\u53d6\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u6240\u6709\u200b\u6570\u636e\u200b\uff0c\u200b\u56e0\u6b64\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u63d0\u53d6\u200b\u4e2d\u592e\u200b\u76ee\u5f55\u200b\u4e2d\u200b\u4e0d\u200b\u5b58\u5728\u200b\u7684\u200b\u6587\u4ef6\u200b\u3002\u200b\u540e\u200b\u8ddf\u200b\u672c\u5730\u200b\u6587\u4ef6\u200b\u5934\u200b\u7684\u200b\u662f\u200b\u538b\u7f29\u200b\u5927\u5c0f\u200b\u5b57\u6bb5\u200b\u4e2d\u200b\u6307\u5b9a\u200b\u7684\u200b\u957f\u5ea6\u200b\u7684\u200b\u5b9e\u9645\u200b\u6587\u4ef6\u200b\u6570\u636e\u200b\u3002\u200b\u7531\u4e8e\u200b\u6211\u4eec\u200b\u4e0d\u200b\u4f7f\u7528\u200b\u538b\u7f29\u200b\u6216\u200b\u52a0\u5bc6\u200b\u7684\u200b\u6570\u636e\u200b\uff0c\u200b\u56e0\u6b64\u200b\u6587\u4ef6\u200b\u6570\u636e\u200b\u5c06\u200b\u662f\u200b\u6587\u4ef6\u200b\u7684\u200b\u7eaf\u200b\u6587\u672c\u200b\u5185\u5bb9\u200b\u3002\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u8bfb\u53d6\u6570\u636e\u200b\u5e76\u200b\u6839\u636e\u200b\u6587\u4ef6\u200b\u540d\u5b57\u200b\u6bb5\u200b\u5c06\u200b\u5176\u200b\u5199\u5165\u200b\u6587\u4ef6\u200b\u6765\u200b\u63d0\u53d6\u200b\u8be5\u200b\u6570\u636e\u200b\u3002</p> <p>\u200b\u8bfb\u200b\u5230\u200b\u8fd9\u91cc\u200b\uff0c\u200b\u6211\u4eec\u200b\u6210\u529f\u200b\u7406\u89e3\u200b\u4e86\u200b ZIP \u200b\u6587\u4ef6\u683c\u5f0f\u200b\u3002</p>"},{"location":"blog/zip%E5%8E%8B%E7%BC%A9%E6%A0%BC%E5%BC%8F%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E4%BB%8E%E5%90%8E%E5%BE%80%E5%89%8D%E5%BC%80%E5%A7%8B%E8%A7%A3%E6%9E%90%E7%9A%84/#\u989d\u5916\u5b57\u6bb5\u7684\u4f5c\u7528","title":"\u989d\u5916\u200b\u5b57\u6bb5\u200b\u7684\u200b\u4f5c\u7528","text":"<p>\u200b\u989d\u5916\u200b\u5b57\u200b\u6bb5\u200b\u7528\u4e8e\u200b\u4f7f\u200b ZIP \u200b\u683c\u5f0f\u200b\u53ef\u200b\u6269\u5c55\u200b\uff0c\u200b\u4f8b\u5982\u200b\u53ef\u200b\u6dfb\u52a0\u200b\u52a0\u5bc6\u200b\u6216\u200b\u7279\u5b9a\u200b\u538b\u7f29\u7b97\u6cd5\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u989d\u5916\u200b\u5143\u200b\u6570\u636e\u200b\u3002\u200b\u5e38\u89c1\u200b\u7684\u200b\u989d\u5916\u200b\u5b57\u6bb5\u200b\u6709\u200b\u5305\u542b\u200b UTC Unix \u200b\u65f6\u95f4\u200b\u6233\u200b\u7684\u200b\u548c\u200b\u4e0e\u200b ZIP64 \u200b\u76f8\u5173\u200b\u7684\u200b\u6570\u636e\u200b\u7684\u200b\u5b57\u200b\u6bb5\u200b\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u81ea\u5b9a\u4e49\u200b\u989d\u5916\u200b\u5b57\u200b\u6bb5\u200b\u3002</p> <p>extra \u200b\u5b57\u200b\u6bb5\u200b\u5305\u542b\u200b\u4ee5\u4e0b\u5185\u5bb9\u200b\u7684\u200b\u5217\u8868\u200b\uff0c\u200b\u7528\u4e8e\u200b\u586b\u5145\u200b\u5b57\u6bb5\u200b\u7684\u200b\u957f\u5ea6\u200b\uff1a</p> Bytes Description 2 Header ID 2 Data length (n) n Data <p>\u200b\u4e00\u4e2a\u200b\u5e38\u89c1\u200b\u7684\u200b\u989d\u5916\u200b\u5b57\u6bb5\u200b\u662f\u200b\u62a5\u5934\u200b ID 0x5455\u200b\u7684\u200b\u5b57\u200b\u6bb5\u200b\uff0c\u200b\u5373\u200b UTC Unix \u200b\u65f6\u95f4\u200b\u6233\u200b\u3002\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u5e38\u89c1\u200b\u7684\u200b\u989d\u5916\u200b\u5b57\u6bb5\u200b\u662f\u200b Header ID 0x0001\u200b\u7684\u200b\u5b57\u200b\u6bb5\u200b\u3002\u200b\u6b64\u5b57\u6bb5\u200b\u5305\u542b\u200b\u4e0e\u200b ZIP64 \u200b\u76f8\u5173\u200b\u7684\u200b\u6570\u636e\u200b\uff0c\u200b\u4ee5\u200b\u5141\u8bb8\u200b\u5927\u4e8e\u200b 32 \u200b\u4f4d\u200b\u7684\u200b\u5927\u5c0f\u200b\u548c\u200b\u504f\u79fb\u91cf\u200b\u3002</p>"},{"location":"blog/zip%E5%8E%8B%E7%BC%A9%E6%A0%BC%E5%BC%8F%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E4%BB%8E%E5%90%8E%E5%BE%80%E5%89%8D%E5%BC%80%E5%A7%8B%E8%A7%A3%E6%9E%90%E7%9A%84/#\u603b\u7ed3","title":"\u603b\u7ed3","text":"<p>ZIP \u200b\u683c\u5f0f\u200b\u672c\u8eab\u200b\u7b80\u5355\u200b\u4f46\u200b\u53ef\u200b\u6269\u5c55\u200b\uff0c\u200b\u6709\u200b\u4e00\u4e9b\u200b\u6709\u8da3\u200b\u7684\u200b\u7279\u6027\u200b\u3002\u200b\u627e\u5230\u200b\u5165\u53e3\u200b\u70b9\u200b\u9700\u200b\u626b\u63cf\u200b\u7279\u5b9a\u200b\u7b7e\u540d\u200b\uff0c\u200b\u4f46\u200b\u8be5\u200b\u7b7e\u540d\u200b\u53ef\u80fd\u200b\u5b58\u5728\u200b\u4e8e\u200b\u6ce8\u91ca\u200b\u6216\u200b\u4e2d\u592e\u200b\u76ee\u5f55\u200b\u7ed3\u675f\u200b\u8bb0\u5f55\u200b\u81ea\u8eab\u200b\u7684\u200b\u6570\u636e\u200b\u4e2d\u200b\uff0c\u200b\u9700\u200b\u9a8c\u8bc1\u200b\u591a\u4e2a\u200b\u504f\u79fb\u91cf\u200b\u7684\u200b\u7b7e\u540d\u200b\u4ee5\u200b\u786e\u4fdd\u200b\u627e\u5230\u200b\u771f\u6b63\u200b\u7684\u200b\u4e2d\u592e\u200b\u76ee\u5f55\u200b\u7ed3\u675f\u200b\u8bb0\u5f55\u200b\u7b7e\u540d\u200b\u3002</p> <p>(\u200b\u8bd1\u81ea\u200bthe-zip-file-format)</p>"},{"location":"blog/zip%E5%8E%8B%E7%BC%A9%E6%A0%BC%E5%BC%8F%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E4%BB%8E%E5%90%8E%E5%BE%80%E5%89%8D%E5%BC%80%E5%A7%8B%E8%A7%A3%E6%9E%90%E7%9A%84/#\u53c2\u8003","title":"\u53c2\u8003","text":"<p>https://medium.com/@felixstridsberg/the-zip-file-format-6c8a160d1c34 https://www.iana.org/assignments/media-types/application/zip https://pkware.cachefly.net/webdocs/APPNOTE/APPNOTE-6.3.9.TXT https://en.wikipedia.org/wiki/ZIP_(file_format) https://en.wikipedia.org/wiki/ZIP_\uff08file_format\uff09</p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>C++\u200b\u6280\u6cd5\u200b\uff1a\u200b\u5982\u4f55\u200b\u4e3a\u200b\u4e00\u4e2a\u200b\u7c7b\u200b\u52a8\u6001\u200b\u9644\u52a0\u200b\u4efb\u610f\u200b\u7c7b\u578b\u200b\u6570\u636e\u200b</li> <li>brpc\u200b\u4e2d\u200b\u7684\u200bprofile\u200b\u5b9e\u73b0\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82cmove%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/","title":"\u4e00\u6587\u200b\u641e\u61c2\u200bC++move\u200b\u51fd\u6570\u200b\u7684\u200b\u4f7f\u7528","text":""},{"location":"blog/%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82cmove%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/#c\u4e2dmove\u51fd\u6570\u662f\u4ec0\u4e48","title":"C++\u200b\u4e2d\u200bmove\u200b\u51fd\u6570\u200b\u662f\u200b\u4ec0\u4e48\u200b\uff1f","text":"<p>\u200b\u770b\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b\u4f8b\u5b50\u200b\uff0c\u200b\u770b\u770b\u200b\u79fb\u52a8\u200b\u6784\u9020\u200b\u548c\u200b\u79fb\u52a8\u200b\u8d4b\u503c\u200b\u51fd\u6570\u200b\u7684\u200b\u5982\u4f55\u200b\u8c03\u7528\u200b\u7684\u200b\uff1f</p> <p></p>C++<pre><code>#include &lt;iostream&gt;\n#include &lt;utility&gt;\n\nclass ResourceHolder {\nprivate:\n    int* data;\n    size_t size;\n\npublic:\n    // \u200b\u666e\u901a\u200b\u6784\u9020\u51fd\u6570\u200b\n    ResourceHolder(size_t s) : size(s), data(new int[s]) {\n        std::cout &lt;&lt; \"\u200b\u666e\u901a\u200b\u6784\u9020\u51fd\u6570\u200b\" &lt;&lt; std::endl;\n    }\n\n    // \u200b\u6790\u6784\u200b\u51fd\u6570\u200b\n    ~ResourceHolder() {\n        delete[] data;\n    }\n\n    // \u200b\u79fb\u52a8\u200b\u6784\u9020\u51fd\u6570\u200b\n    ResourceHolder(ResourceHolder&amp;&amp; other) noexcept \n        : data(std::exchange(other.data, nullptr)), \n          size(std::exchange(other.size, 0)) {\n        std::cout &lt;&lt; \"\u200b\u79fb\u52a8\u200b\u6784\u9020\u51fd\u6570\u200b\" &lt;&lt; std::endl;\n    }\n\n    // \u200b\u79fb\u52a8\u200b\u8d4b\u503c\u200b\u8fd0\u7b97\u7b26\u200b\n    ResourceHolder&amp; operator=(ResourceHolder&amp;&amp; other) noexcept {\n        if (this != &amp;other) {\n            delete[] data;\n            data = std::exchange(other.data, nullptr);\n            size = std::exchange(other.size, 0);\n            std::cout &lt;&lt; \"\u200b\u79fb\u52a8\u200b\u8d4b\u503c\u200b\u8fd0\u7b97\u7b26\u200b\" &lt;&lt; std::endl;\n        }\n        return *this;\n    }\n\n    // \u200b\u7981\u7528\u200b\u62f7\u8d1d\u200b\u6784\u9020\u200b\u548c\u200b\u62f7\u8d1d\u200b\u8d4b\u503c\u200b\n    ResourceHolder(const ResourceHolder&amp;) = delete;\n    ResourceHolder&amp; operator=(const ResourceHolder&amp;) = delete;\n};\n\nint main() {\n    ResourceHolder a(10);  // \u200b\u666e\u901a\u200b\u6784\u9020\u200b\n    ResourceHolder b(std::move(a));  // \u200b\u79fb\u52a8\u200b\u6784\u9020\u200b\n\n    ResourceHolder c(5);  // \u200b\u666e\u901a\u200b\u6784\u9020\u200b\n    c = std::move(b);  // \u200b\u79fb\u52a8\u200b\u8d4b\u503c\u200b\n\n    return 0;\n}\n\n// \u200b\u666e\u901a\u200b\u6784\u9020\u51fd\u6570\u200b\n// \u200b\u79fb\u52a8\u200b\u6784\u9020\u51fd\u6570\u200b\n// \u200b\u666e\u901a\u200b\u6784\u9020\u51fd\u6570\u200b\n// \u200b\u79fb\u52a8\u200b\u8d4b\u503c\u200b\u8fd0\u7b97\u7b26\u200b\n</code></pre> \u200b\u6211\u4eec\u200b\u770b\u5230\u200b\u901a\u8fc7\u200bstd::move()\u200b\u51fd\u6570\u200b\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u8c03\u7528\u200b\u5230\u200b\u79fb\u52a8\u200b\u6784\u9020\u51fd\u6570\u200b\u548c\u200b\u79fb\u52a8\u200b\u8d4b\u503c\u200b\u8fd0\u7b97\u7b26\u200b\u3002\u200b\u90a3\u200bstd::move()\u200b\u51fd\u6570\u200b\u662f\u200b\u4ec0\u4e48\u200b\u5462\u200b\uff1f\u200b\u4e3a\u5565\u200b\u7ecf\u8fc7\u200b\u5b83\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u8c03\u7528\u200b\u5230\u200b\u79fb\u52a8\u200b\u6784\u9020\u51fd\u6570\u200b\u548c\u200b\u79fb\u52a8\u200b\u8d4b\u503c\u200b\u8fd0\u7b97\u7b26\u200b\u5462\u200b\uff1f<p></p> <p></p>C++<pre><code>template &lt;typename T&gt;\nconstexpr typename std::remove_reference&lt;T&gt;::type&amp;&amp; move(T&amp;&amp; arg) noexcept {\n    return static_cast&lt;typename std::remove_reference&lt;T&gt;::type&amp;&amp;&gt;(arg);\n}\n</code></pre> std::move\u200b\u672c\u8d28\u200b\u53ea\u662f\u200b\u8fdb\u884c\u200b\u4e86\u200b\u4e00\u6b21\u200bstatic_cast\uff0c\u200b\u5373\u200b\u7c7b\u578b\u8f6c\u6362\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u524d\u9762\u200bstd::move(b)\uff0c\u200b\u901a\u8fc7\u200bstd::move\u200b\u6539\u53d8\u200b\u4e86\u200b\u8fd4\u56de\u200b\u7684\u200b\u6570\u636e\u7c7b\u578b\u200b\uff0c\u200b\u5bfc\u81f4\u200b\u4f20\u5165\u200bResourceHolder\u200b\u7684\u200boperator=\u200b\u7684\u200b\u53c2\u6570\u200b\u7c7b\u578b\u200b\u53d8\u6210\u200b\u4e86\u200bResourceHolder&amp;&amp;\uff0c\u200b\u56e0\u6b64\u200b\u6839\u636e\u200b\u53c2\u6570\u200b\u5339\u914d\u200b\u89c4\u5219\u200b\uff0c\u200b\u6700\u7ec8\u200b\u4f1a\u200b\u8c03\u7528\u200boperator=(ResourceHolder&amp;&amp;) \u200b\u8fd9\u4e2a\u200b\u79fb\u52a8\u200b\u8d4b\u503c\u200b\u8fd0\u7b97\u7b26\u200b\uff0c\u200b\u5728\u200b\u51fd\u6570\u200b\u5185\u90e8\u200b\u53ef\u4ee5\u200b\u5c06\u200bb\u200b\u7684\u200b\u6240\u6709\u6743\u200b\u8f6c\u79fb\u200b\u4e86\u200b\u3002<p></p>"},{"location":"blog/%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82cmove%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/#\u5982\u4f55\u4f7f\u7528move\u51fd\u6570","title":"\u5982\u4f55\u200b\u4f7f\u7528\u200bmove\u200b\u51fd\u6570\u200b\uff1f","text":"<p>\u200b\u4ec0\u4e48\u200b\u65f6\u5019\u200b\u4f7f\u7528\u200bmove\uff1f * \u200b\u8c03\u7528\u51fd\u6570\u200b\u8981\u200b\u6709\u200b\u5bf9\u5e94\u200b\u7684\u200b\u79fb\u52a8\u200b\u8bed\u4e49\u200b\u7684\u200b\u51fd\u6570\u200b\u7248\u672c\u200b\u3002\u200b\u4e5f\u200b\u5c31\u662f\u200b\u4e0a\u9762\u200b\u7684\u200b\u79fb\u52a8\u200b\u6784\u9020\u51fd\u6570\u200b\u548c\u200b\u79fb\u52a8\u200b\u8d4b\u503c\u200b\u8fd0\u7b97\u7b26\u200b\u3002 * \u200b\u51fd\u6570\u8c03\u7528\u200b\u5b8c\u6210\u200b\u540e\u200b\uff0c\u200b\u539f\u200b\u5bf9\u8c61\u200b\u5c31\u200b\u4e0d\u518d\u200b\u62e5\u6709\u200b\u8d44\u6e90\u200b\u6240\u6709\u6743\u200b\u4e86\u200b\uff0c\u200b\u4e0d\u200b\u5e94\u8be5\u200b\u7528\u200b\u8fd9\u4e2a\u200b\u5bf9\u8c61\u200b\u518d\u200b\u8bbf\u95ee\u200b\u8d44\u6e90\u200b\u4e86\u200b\u3002 * \u200b\u79fb\u52a8\u200b\u8bed\u4e49\u200b\u53ef\u4ee5\u200b\u63d0\u5347\u200b\u6027\u80fd\u200b\uff0c\u200b\u907f\u514d\u200b\u62f7\u8d1d\u200b\u8d44\u6e90\u200b</p> <p>\u200b\u4ec0\u4e48\u200b\u65f6\u5019\u200b\u4e0d\u7528\u200bmove\uff1f 1. \u200b\u57fa\u672c\u200b\u6570\u636e\u7c7b\u578b\u200b\uff08\u200b\u5982\u200bint\u3001float\uff09\uff0c\u200b\u4e0d\u8981\u200b\u7528\u200bstd::move\uff0c\u200b\u6ca1\u6709\u200b\u6027\u80fd\u200b\u6536\u76ca\u200b\uff0c\u200b\u53cd\u800c\u200b\u53ef\u80fd\u200b\u8ba9\u200b\u4ee3\u7801\u200b\u66f4\u96be\u200b\u7406\u89e3\u200b 2. \u200b\u7f16\u8bd1\u5668\u200b\u5df2\u200b\u4f18\u5316\u200b\u8fd4\u56de\u503c\u200b\u7684\u200b\u573a\u666f\u200b\uff08RVO\uff09\u200b\u4e0d\u7528\u200bstd::move</p>"},{"location":"blog/%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82cmove%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/#stdmake_move_iterator\u7684\u4f7f\u7528","title":"std::make_move_iterator\u200b\u7684\u200b\u4f7f\u7528","text":"<p>std::make_move_iterator\u200b\u662f\u200bC++11\u200b\u5f15\u5165\u200b\u7684\u200b\u8fed\u4ee3\u200b\u5668\u200b\u9002\u914d\u5668\u200b\u5de5\u5177\u200b\u51fd\u6570\u200b\uff0c\u200b\u7528\u4e8e\u200b\u5c06\u200b\u666e\u901a\u200b\u8fed\u4ee3\u200b\u5668\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u79fb\u52a8\u200b\u8fed\u4ee3\u200b\u5668\u200b\uff0c\u200b\u4ece\u800c\u200b\u5728\u200b\u7b97\u6cd5\u200b\u4e2d\u200b\u5b9e\u73b0\u200b\u5143\u7d20\u200b\u7684\u200b\u79fb\u52a8\u200b\u8bed\u4e49\u200b\u800c\u200b\u975e\u200b\u62f7\u8d1d\u200b\u3002</p> <p></p>C++<pre><code>#include &lt;iostream&gt;\n#include &lt;list&gt;\n#include &lt;vector&gt;\n#include &lt;iterator&gt;\n#include &lt;algorithm&gt;\n\nint main() {\n    std::list&lt;std::string&gt; src{\"one\", \"two\", \"three\"};\n    std::vector&lt;std::string&gt; dst;\n\n    // \u200b\u4f7f\u7528\u200b\u79fb\u52a8\u200b\u8fed\u4ee3\u200b\u5668\u200b\u8303\u56f4\u200b\u6784\u9020\u200b\n    dst.assign(std::make_move_iterator(src.begin()),\n               std::make_move_iterator(src.end()));\n\n    std::cout &lt;&lt; \"size : \" &lt;&lt; src.size() &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"\u200b\u79fb\u52a8\u200b\u540e\u200bsrc\u200b\u5143\u7d20\u200b: \";\n    for (const auto&amp; s : src) std::cout &lt;&lt; \"\\\"\" &lt;&lt; s &lt;&lt; \"\\\" \";  // \u200b\u4e3a\u7a7a\u200b\u5b57\u7b26\u4e32\u200b\n\n    std::cout &lt;&lt; \"\\nsize : \" &lt;&lt; dst.size() &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"\\n\u200b\u79fb\u52a8\u200b\u540e\u200bdst\u200b\u5143\u7d20\u200b: \";\n    for (const auto&amp; s : dst) std::cout &lt;&lt; \"\\\"\" &lt;&lt; s &lt;&lt; \"\\\" \";  // \u200b\u6b63\u5e38\u200b\u5b57\u7b26\u4e32\u200b\n\n    return 0;\n}\n// size : 3\n// \u200b\u79fb\u52a8\u200b\u540e\u200bsrc\u200b\u5143\u7d20\u200b: \"\" \"\" \"\" \n// size : 3\n// \u200b\u79fb\u52a8\u200b\u540e\u200bdst\u200b\u5143\u7d20\u200b: \"one\" \"two\" \"three\"\n</code></pre> \u200b\u901a\u8fc7\u200b\u5305\u88c5\u200b\u8f93\u5165\u200b\u8fed\u4ee3\u200b\u5668\u200b\uff0c\u200b\u4f7f\u89e3\u200b\u5f15\u7528\u200b\u64cd\u4f5c\u200b\u8fd4\u56de\u200b\u53f3\u503c\u200b\u5f15\u7528\u200b\uff08\u200b\u7b49\u6548\u4e8e\u200b\u5bf9\u200b\u5143\u7d20\u200b\u8c03\u7528\u200bstd::move\uff09\uff0c\u200b\u5bb9\u5668\u200b\u95f4\u200b\u9ad8\u6548\u200b\u8f6c\u79fb\u200b\u6570\u636e\u200b\uff08\u200b\u5982\u200bvector\u200b\u8fc1\u79fb\u200b\u65f6\u200b\u907f\u514d\u200b\u5b57\u7b26\u4e32\u200b\u62f7\u8d1d\u200b\uff09\u3002 C++<pre><code>typedef typename conditional&lt;is_reference&lt;__base_ref&gt;::value,\n                          typename remove_reference&lt;__base_ref&gt;::type&amp;&amp;,\n                          __base_ref&gt;::type              reference;\n\nreference operator*() const\n      { return static_cast&lt;reference&gt;(*_M_current); }\n</code></pre><p></p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>\u200b\u4e00\u6587\u200b\u641e\u61c2\u200bc++\u200b\u4e2d\u200brvo\u200b\u8fd4\u56de\u503c\u200b\u4f18\u5316\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b</li> <li>C++\u200b\u5f00\u53d1\u200b\u5e38\u89c1\u95ee\u9898\u200b\u4e4b\u200bABI\u200b\u517c\u5bb9\u6027\u95ee\u9898\u200b</li> <li>C++20\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u57fa\u4e8e\u200b\u5c5e\u6027\u200b\u6d4b\u8bd5\u200b\u7684\u200bquickcheck-cpp\u200b\u5e93\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82c%E4%B8%ADrvo%E8%BF%94%E5%9B%9E%E5%80%BC%E4%BC%98%E5%8C%96%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8/","title":"\u4e00\u6587\u200b\u641e\u61c2\u200bc++\u200b\u4e2d\u200brvo\u200b\u8fd4\u56de\u503c\u200b\u4f18\u5316\u200b\u5982\u4f55\u200b\u4f7f\u7528","text":""},{"location":"blog/%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82c%E4%B8%ADrvo%E8%BF%94%E5%9B%9E%E5%80%BC%E4%BC%98%E5%8C%96%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8/#\u4e00\u4e2a\u4f8b\u5b50\u641e\u61c2\u8fd4\u56de\u503c\u4f18\u5316","title":"\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b\u641e\u61c2\u200b\u8fd4\u56de\u503c\u200b\u4f18\u5316","text":"<p>\u200b\u73b0\u4ee3\u200bC++\u200b\u7f16\u8bd1\u5668\u200b\uff08C++11\u200b\u53ca\u200b\u4ee5\u4e0a\u200b\uff09\u200b\u4f1a\u200b\u8fdb\u884c\u200b\u8fd4\u56de\u503c\u200b\u4f18\u5316\u200b\uff08Return Value Optimization, RVO\uff09\u200b\u548c\u200b\u547d\u540d\u200b\u8fd4\u56de\u503c\u200b\u4f18\u5316\u200b\uff08Named Return Value Optimization, NRVO\uff09\u3002</p> <p>\u200b\u5176\u200b\u4f5c\u7528\u200b\u662f\u200b\u907f\u514d\u200b\u521b\u5efa\u200b\u4e34\u65f6\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u907f\u514d\u200b\u62f7\u8d1d\u200b/\u200b\u8d4b\u503c\u200b\u6784\u9020\u51fd\u6570\u200b\u7684\u200b\u8c03\u7528\u200b\uff0c\u200b\u4ece\u800c\u200b\u63d0\u5347\u200b\u6027\u80fd\u200b\u3002</p> C++<pre><code>#include &lt;iostream&gt;\n\nclass BigObj {\n public:\n  BigObj() {\n    printf(\"construction \u2026\\n\");\n  }\n  BigObj(const BigObj&amp; s) {\n    printf(\"Expensive copy \u2026\\n\");\n  }\n  BigObj&amp; operator=(const BigObj&amp; s) {\n    printf(\"Expensive assignment \u2026\\n\");\n    return *this;\n  }\n  ~BigObj() {\n    printf(\"destruction \u2026\\n\");\n  }\n\n  static BigObj BigObjFactory() {\n    BigObj local;\n    return local;\n  }\n\n  // \u200b\u4e0d\u540c\u200b\u5206\u652f\u200b\u8fd4\u56de\u200b\u7684\u200b\u662f\u200b\u540c\u4e00\u4e2a\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u7f16\u8bd1\u5668\u200b\u53ef\u4ee5\u200b\u4f18\u5316\u200b\u3002\n  static BigObj BranchFactorySameObj(bool flag) {\n    BigObj a;\n    if (flag) return a;\n    else return a;\n  }\n};\n</code></pre> <p>BigObj::BigObjFactory()\u200b\u51fd\u6570\u200b\u8fd4\u56de\u200b\u4e00\u4e2a\u200b\u5c40\u90e8\u200b\u5bf9\u8c61\u200blocal\uff0c\u200b\u800c\u200bmain()\u200b\u51fd\u6570\u200b\u4e2d\u200b\u76f4\u63a5\u200b\u4f7f\u7528\u200b\u8fd9\u4e2a\u200b\u8fd4\u56de\u503c\u200b\u6765\u200b\u6784\u9020\u200bobj\u3002\u200b\u7f16\u8bd1\u5668\u200b\u4f1a\u200b\u4f18\u5316\u200b\u8fd9\u4e2a\u200b\u8fc7\u7a0b\u200b\uff0c\u200b\u76f4\u63a5\u200b\u5c06\u200blocal\u200b\u6784\u9020\u200b\u5728\u200bobj\u200b\u7684\u200b\u5185\u5b58\u200b\u4f4d\u7f6e\u200b\u4e0a\u200b\uff0c\u200b\u907f\u514d\u200b\u4e86\u200b\u590d\u5236\u200b\u6784\u9020\u51fd\u6570\u200b\u7684\u200b\u8c03\u7528\u200b\u3002</p> C++<pre><code>int main(){\n    // \u200b\u8fd4\u56de\u503c\u200b\u4f18\u5316\u200b\n    BigObj obj = BigObj::BigObjFactory();\n    // construction \u2026\n    // destruction \u2026\n\n    // \u200b\u5206\u652f\u200b\u8fd4\u56de\u503c\u200b\u4f18\u5316\u200b\n    BigObj obj =  BigObj::BranchFactorySameObj(true);\n    // construction \u2026\n    // destruction \u2026\n    return 0;\n}\n</code></pre> <p>\u200b\u6b63\u5982\u200b\u4e0a\u200b\u4e00\u7bc7\u200b[\u200b\u4e00\u6587\u200b\u641e\u61c2\u200bc++move\u200b\u51fd\u6570\u200b\u7684\u200b\u4f7f\u7528\u200b]\u200b\u4e2d\u200b\u63d0\u5230\u200b\uff0c\u200b\u7531\u4e8e\u200b\u8fd4\u56de\u503c\u200b\u4f18\u5316\u200b\u7684\u200b\u5b58\u5728\u200b\uff0c\u200b\u8fd4\u56de\u503c\u200b\u4e0d\u200b\u9700\u8981\u200b\u4f7f\u7528\u200bstd::move\u3002</p> <p>\u200b\u7f16\u8bd1\u5668\u200b\u5df2\u200b\u4f18\u5316\u200b\u8fd4\u56de\u503c\u200b\u7684\u200b\u573a\u666f\u200b\uff08RVO\uff09\u200b\u4e0d\u7528\u200bstd::move\u3002</p> C++<pre><code>// \u200b\u4e0d\u597d\u200b\u7684\u200b\u7528\u6cd5\u200b\nstatic BigObj BigObjFactory() {\n  BigObj local;\n  return std::move(local);\n}\n</code></pre>"},{"location":"blog/%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82c%E4%B8%ADrvo%E8%BF%94%E5%9B%9E%E5%80%BC%E4%BC%98%E5%8C%96%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8/#\u65e0\u6cd5\u8fdb\u884crvo\u4f18\u5316\u7684\u60c5\u51b5","title":"\u65e0\u6cd5\u200b\u8fdb\u884c\u200brvo\u200b\u4f18\u5316\u200b\u7684\u200b\u60c5\u51b5","text":"<ol> <li>\u200b\u8d4b\u503c\u200b\u5df2\u7ecf\u200b\u5b58\u5728\u200b\u7684\u200b\u5bf9\u8c61\u200b \u200b\u5f53\u200b\u8fd4\u56de\u200b\u7684\u200b\u5bf9\u8c61\u200b\u7528\u4e8e\u200b\u8d4b\u503c\u200b\u7ed9\u200b\u5df2\u200b\u5b58\u5728\u200b\u7684\u200b\u5bf9\u8c61\u200b\u65f6\u200b\uff08\u200b\u800c\u200b\u975e\u200b\u76f4\u63a5\u200b\u521d\u59cb\u5316\u200b\u65b0\u200b\u5bf9\u8c61\u200b\uff09\uff0c\u200b\u7f16\u8bd1\u5668\u200b\u4f1a\u200b\u8c03\u7528\u200b\u8d4b\u503c\u200b\u8fd0\u7b97\u7b26\u200b\u800c\u200b\u975e\u200b\u62f7\u8d1d\u200b\u6784\u9020\u51fd\u6570\u200b\uff0c\u200b\u6b64\u65f6\u200b\u4f18\u5316\u200b\u4e0d\u4f1a\u200b\u89e6\u53d1\u200b\u3002 C++<pre><code>// \u200b\u6ca1\u6709\u200b\u8fd4\u56de\u503c\u200b\u4f18\u5316\u200b\nBigObj obj;\nobj = BigObj::BigObjFactory();\n\n// \u200b\u65e0\u6cd5\u200b\u4f18\u5316\u200b\u7684\u200b\u60c5\u51b5\u200b\uff0c\u200b\u6253\u5370\u200b\uff1a\n// construction \u2026\n// construction \u2026\n// Expensive assignment \u2026\n// destruction \u2026\n// destruction \u2026\n</code></pre></li> <li>\u200b\u591a\u200b\u5206\u652f\u200b\u8fd4\u56de\u200b\u4e0d\u540c\u200b\u5bf9\u8c61\u200b</li> </ol> <p>\u200b\u82e5\u200b\u51fd\u6570\u200b\u5b58\u5728\u200b\u591a\u4e2a\u200b\u8fd4\u56de\u200b\u8def\u5f84\u200b\uff08\u200b\u5982\u200bif-else\u200b\u5206\u652f\u200b\uff09\uff0c\u200b\u4e14\u200b\u8fd4\u56de\u200b\u4e0d\u540c\u200b\u7684\u200b\u547d\u540d\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u7f16\u8bd1\u5668\u200b\u53ef\u80fd\u200b\u65e0\u6cd5\u200b\u786e\u5b9a\u200b\u4f18\u5316\u200b\u76ee\u6807\u200b\u800c\u200b\u653e\u5f03\u200b\u4f18\u5316\u200b\u3002</p> <p></p>C++<pre><code>    static BigObj BranchFactory(bool flag) {\n        BigObj a, b;\n        if (flag) return a;  // \u200b\u65e0\u6cd5\u200b\u4f18\u5316\u200b\n        else return b;       // \u200b\u65e0\u6cd5\u200b\u4f18\u5316\u200b\n    }\n\n// \u200b\u65e0\u6cd5\u200b\u4f18\u5316\u200b\u7684\u200b\u60c5\u51b5\u200b\uff0c\u200b\u6253\u5370\u200b\uff1a\n// BigObj obj =  BigObj::BranchFactory(true);\n// construction \u2026\n// construction \u2026\n// Expensive copy \u2026\n// destruction \u2026\n// destruction \u2026\n// destruction \u2026\n</code></pre> \u200b\u4e0d\u540c\u200b\u5206\u652f\u200b\u8fd4\u56de\u200b\u7684\u200b\u662f\u200b\u540c\u4e00\u4e2a\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u7f16\u8bd1\u5668\u200b\u53ef\u4ee5\u200b\u4f18\u5316\u200b\u3002<p></p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>\u200b\u4e00\u6587\u200b\u641e\u61c2\u200bC++move\u200b\u51fd\u6570\u200b\u7684\u200b\u4f7f\u7528\u200b</li> <li>LTO\uff08Link Time Optimization\uff09\u200b\u80fd\u591f\u200b\u4f18\u5316\u200b\u9759\u6001\u200b\u5e93\u200b\u5417\u200b\uff1f\u200b\u52a8\u6001\u200b\u5e93\u200b\u5462\u200b\u6709\u4f55\u200b\u4e0d\u540c\u200b</li> <li>brpc\u200b\u4e2d\u200b\u7684\u200bprofile\u200b\u5b9e\u73b0\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/%E4%B8%A4%E7%A7%8D%E4%B8%8D%E5%90%8C%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5%E7%9A%84%E8%A7%A3%E6%9E%90%E5%BA%93nom%E5%92%8Cpest/","title":"\u4e24\u79cd\u200b\u4e0d\u540c\u200b\u8bbe\u8ba1\u200b\u7406\u5ff5\u200b\u7684\u200b\u89e3\u6790\u200b\u5e93\u200bnom\u200b\u548c\u200bpest","text":""},{"location":"blog/%E4%B8%A4%E7%A7%8D%E4%B8%8D%E5%90%8C%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5%E7%9A%84%E8%A7%A3%E6%9E%90%E5%BA%93nom%E5%92%8Cpest/#nom\u548cpest\u89e3\u6790\u5e93\u8bbe\u8ba1","title":"nom\u200b\u548c\u200bpest\u200b\u89e3\u6790\u200b\u5e93\u200b\u8bbe\u8ba1","text":"<p>nom \u200b\u548c\u200b pest\u200b\u65f6\u200bRust \u200b\u751f\u6001\u200b\u4e2d\u200b\u4e24\u4e2a\u200b\u4e3b\u6d41\u200b\u7684\u200b\u89e3\u6790\u200b\u5e93\u200b\uff0c\u200b\u4f46\u662f\u200b\u8bbe\u8ba1\u200b\u7406\u5ff5\u200b\u548c\u200b\u4f7f\u7528\u200b\u65b9\u5f0f\u200b\u6709\u200b\u663e\u8457\u200b\u5dee\u5f02\u200b\u3002</p>"},{"location":"blog/%E4%B8%A4%E7%A7%8D%E4%B8%8D%E5%90%8C%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5%E7%9A%84%E8%A7%A3%E6%9E%90%E5%BA%93nom%E5%92%8Cpest/#-nom\u5e93\u89e3\u6790\u5668\u7ec4\u5408\u5e93","title":"\ud83d\udd27 nom\u200b\u5e93\u200b\uff1a\u200b\u89e3\u6790\u5668\u200b\u7ec4\u5408\u200b\u5e93","text":"<p>\u200b\u57fa\u4e8e\u200b\u200c\u200b\u89e3\u6790\u5668\u200b\u7ec4\u5408\u200b\u5668\u200b\u200c\uff08Parser Combinators\uff09\u200b\u6a21\u5f0f\u200b\uff0c\u200b\u901a\u8fc7\u200b\u7ec4\u5408\u200b\u5c0f\u578b\u200b\u89e3\u6790\u5668\u200b\u6784\u5efa\u200b\u590d\u6742\u200b\u903b\u8f91\u200b\u3002 \u200b\u652f\u6301\u200b\u200c\u200b\u96f6\u200b\u62f7\u8d1d\u200b\u89e3\u6790\u200b\u200c\uff0c\u200b\u76f4\u63a5\u200b\u64cd\u4f5c\u200b\u8f93\u5165\u200b\u6570\u636e\u200b\u5207\u7247\u200b\uff0c\u200b\u9ad8\u6548\u200b\u5904\u7406\u200b\u4e8c\u8fdb\u5236\u200b\u6216\u200b\u6587\u672c\u200b\u3002</p> <p>\u200b\u9002\u7528\u200b\u4e8e\u200b\u7f51\u7edc\u534f\u8bae\u200b\u89e3\u6790\u200b\uff08HTTP\u3001WebSocket\uff09\u3001\u200b\u81ea\u5b9a\u4e49\u200b\u4e8c\u8fdb\u5236\u200b\u683c\u5f0f\u200b\uff08\u200b\u5982\u200b\u6587\u4ef6\u200b\u5934\u200b\u3001\u200b\u6570\u636e\u5305\u200b\uff09 \u200b\u9ad8\u6027\u80fd\u200b\u6587\u672c\u5904\u7406\u200b\uff08CSV\u3001\u200b\u65e5\u5fd7\u200b\uff09\u3002</p> <p>\u200b\u5bf9\u4e8e\u200b\u89e3\u6790\u200b\u4e00\u4e2a\u200bcvs\u200b\u6587\u4ef6\u200b\uff0c\u200b\u9996\u5148\u200b\u8981\u200b\u4f7f\u7528\u200bnom\u200b\u63d0\u4f9b\u200b\u7684\u200b\u5c0f\u578b\u200b\u89e3\u6790\u5668\u200b\uff0c\u200b\u5b9a\u4e49\u200b\u5982\u4f55\u200b\u89e3\u6790\u200b\u4e00\u4e2a\u200bfield,\u200b\u7136\u540e\u200b\u5982\u4f55\u200b\u89e3\u6790\u200b\u201d,\u201d\u200b\u53f7\u200b\u5206\u9694\u200b\uff0c\u200b\u7136\u540e\u200b\u5b9a\u4e49\u200b\u5982\u4f55\u200b\u89e3\u6790\u200b\u4e00\u884c\u200b\uff0c\u200b\u6700\u540e\u200b\u5b9a\u4e49\u200b\u5982\u4f55\u200b\u89e3\u6790\u200b\u4e00\u4e2a\u200bcsv\u200b\u6587\u4ef6\u200b\u3002</p> Rust<pre><code>// \u200b\u89e3\u6790\u200b\u672a\u200b\u52a0\u200b\u5f15\u53f7\u200b\u7684\u200b\u5b57\u200b\u6bb5\u200b\nfn parse_unquoted_field(input: &amp;str) -&gt; IResult&lt;&amp;str, String&gt; {\n    escaped_transform(alphanumeric1, '\\\\', one_of(\"\\\"bfnrt\\\\\")).parse(input)\n}\n\n// \u200b\u5355\u4e2a\u200b\u5b57\u200b\u6bb5\u200b\u89e3\u6790\u200b\nfn parse_field(input: &amp;str) -&gt; IResult&lt;&amp;str, String&gt; {\n    parse_unquoted_field.parse(input)\n}\n\n// \u200b\u89e3\u6790\u200b\u5355\u884c\u200bCSV\u200b\u6570\u636e\u200b\nfn parse_line(input: &amp;str) -&gt; IResult&lt;&amp;str, Vec&lt;String&gt;&gt; {\n    alt((\n        // \u200b\u6b63\u5e38\u200b\u884c\u200b\u89e3\u6790\u200b\uff08\u200b\u4ee5\u200b\u6362\u884c\u7b26\u200b\u7ed3\u675f\u200b\uff09\n        terminated(\n            separated_list0(char(','), parse_field),\n            alt((tag(\"\\r\\n\"), tag(\"\\n\"), eof)),\n        ),\n        // \u200b\u5904\u7406\u200b\u7a7a\u884c\u200b\n        map(alt((tag(\"\\r\\n\"), tag(\"\\n\"))), |_| vec![]),\n    ))\n    .parse(input)\n}\n\nfn main() { \n    let csv_line = r#\"2,Escapedquote,314\\r\\n\"#;\n\n    match parse_line(csv_line) {\n        Ok((_, rows)) =&gt; {\n            for row in rows {\n                println!(\"{:?}\", row);\n            }\n        }\n        Err(e) =&gt; println!(\"Parse error: {:?}\", e),\n    }\n}\n</code></pre>"},{"location":"blog/%E4%B8%A4%E7%A7%8D%E4%B8%8D%E5%90%8C%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5%E7%9A%84%E8%A7%A3%E6%9E%90%E5%BA%93nom%E5%92%8Cpest/#-pest\u57fa\u4e8e-peg-\u7684\u89e3\u6790\u5668\u751f\u6210\u5668","title":"\ud83d\udcdd pest\uff1a\u200b\u57fa\u4e8e\u200b PEG \u200b\u7684\u200b\u89e3\u6790\u5668\u200b\u751f\u6210\u5668","text":"<p>\u200b\u4f7f\u7528\u200b\u200c\u200b\u89e3\u6790\u200b\u8868\u8fbe\u5f0f\u200b\u6587\u6cd5\u200b\u200c\uff08Parsing Expression Grammar, PEG\uff09\u200b\u5b9a\u4e49\u200b\u8bed\u6cd5\u200b\u89c4\u5219\u200b\u3002 \u200b\u8bed\u6cd5\u200b\u89c4\u5219\u200b\u4e0e\u200b Rust \u200b\u4ee3\u7801\u200b\u5206\u79bb\u200b\uff08.pest \u200b\u6587\u4ef6\u200b\uff09\uff0c\u200b\u63d0\u5347\u200b\u53ef\u8bfb\u6027\u200b\u3002</p> <p>\u200b\u9002\u7528\u200b\u4e8e\u200b\u7f16\u7a0b\u8bed\u8a00\u200b\u89e3\u6790\u200b\uff08\u200b\u81ea\u5b9a\u4e49\u200b DSL\uff09\uff0c\u200b\u590d\u6742\u200b\u6587\u672c\u683c\u5f0f\u200b\uff08\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u3001\u200b\u6a21\u677f\u200b\u5f15\u64ce\u200b\uff09\uff0c\u200b\u9700\u8981\u200b\u4e25\u683c\u200b\u8bed\u6cd5\u200b\u5b9a\u4e49\u200b\u7684\u200b\u573a\u666f\u200b\uff08\u200b\u5982\u200b\u7f16\u8bd1\u5668\u200b\u524d\u7aef\u200b\uff09\u3002</p> <p>\u200b\u6bd4\u5982\u200b\u89e3\u6790\u200b\u4e00\u4e2a\u200bcsv\u200b\u6587\u4ef6\u200b\uff1a pest csv</p> <p>\u200b\u5b9a\u4e49\u200b\u4e00\u4e2a\u200b.pest\u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u200b\u8bed\u6cd5\u200b\u7684\u200b\u89c4\u5219\u200b </p>Bash<pre><code>field = { (ASCII_DIGIT | \".\" | \"-\")+ }\nrecord = { field ~ (\",\" ~ field)* }\nfile = { SOI ~ (record ~ (\"\\r\\n\" | \"\\n\"))* ~ EOI }\n</code></pre><p></p>"},{"location":"blog/%E4%B8%A4%E7%A7%8D%E4%B8%8D%E5%90%8C%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5%E7%9A%84%E8%A7%A3%E6%9E%90%E5%BA%93nom%E5%92%8Cpest/#\u9009\u62e9","title":"\u9009\u62e9","text":"<p>\u200b\u4ee5\u200b\u89e3\u6790\u200bjson\u200b\u4e3a\u4f8b\u200b\uff0cnom\u200b\u7684\u200b\u6027\u80fd\u200b\u76f8\u6bd4\u200bpest\u200b\u7684\u200b\u66f4\u200b\u9ad8\u200b\u4e00\u4e9b\u200b\u3002</p> <pre><code>graph TD     \n    A[\u200b\u9700\u200b\u89e3\u6790\u200b\u4ec0\u4e48\u200b\u6570\u636e\u200b?] --&gt;|\u200b\u4e8c\u8fdb\u5236\u200b/\u200b\u9ad8\u6027\u80fd\u200b| B(nom)     \n    A --&gt;|\u200b\u4e25\u683c\u200b\u8bed\u6cd5\u200b/DSL| C(pest)     \n    B --&gt; D{\u200b\u9700\u8981\u200b\u52a8\u6001\u200b\u8c03\u6574\u200b\u89e3\u6790\u200b\u903b\u8f91\u200b?}     \n    D --&gt;|\u200b\u662f\u200b| E[\u200b\u9009\u62e9\u200bnom+\u200b\u81ea\u5b9a\u4e49\u200b\u7ec4\u5408\u200b\u5668\u200b]     \n    D --&gt;|\u200b\u5426\u200b| F[\u200b\u76f4\u63a5\u200b\u4f7f\u7528\u200bnom\u200b\u5185\u7f6e\u200b\u7ec4\u5408\u200b\u5668\u200b]     \n    C --&gt; G{\u200b\u662f\u5426\u200b\u9700\u8981\u200bIDE\u200b\u5de5\u5177\u200b\u652f\u6301\u200b?}     \n    G --&gt;|\u200b\u662f\u200b| H[\u200b\u9009\u62e9\u200bpest+\u200b\u8bed\u6cd5\u200b\u9ad8\u4eae\u200b\u63d2\u4ef6\u200b]     \n    G --&gt;|\u200b\u5426\u200b| I[\u200b\u7eaf\u200bpest\u200b\u89c4\u5219\u200b\u6587\u4ef6\u200b]</code></pre> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>pyo3\u200b\u5b9e\u73b0\u200bpython\u200b\u548c\u200brust\u200b\u8de8\u200b\u8bed\u8a00\u200b\u8c03\u7528\u200b</li> <li>\u200b\u4f7f\u7528\u200baya\u200b\u548c\u200bc\u200b\u6df7\u5408\u200b\u7f16\u5199\u200buprobe\u200b\u7a0b\u5e8f\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> </ul>"},{"location":"blog/%E4%BB%8Edeepseek%E5%BC%80%E6%BA%90%E5%BA%933fs%E4%B8%AD%E5%AD%A6%E4%B9%A0fuse%E7%9A%84%E4%BD%BF%E7%94%A8-%E5%A6%82%E4%BD%95%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%80/","title":"\u4ece\u200bDeepseek\u200b\u5f00\u6e90\u200b\u5e93\u200b3FS\u200b\u4e2d\u200b\u5b66\u4e60\u200bfuse\u200b\u7684\u200b\u4f7f\u7528\u200b-\u200b\u5982\u4f55\u200b\u5f00\u53d1\u200b\u4e00\u4e2a\u200b\u6587\u4ef6\u7cfb\u7edf\u200b\uff08\u200b\u4e00\u200b\uff09","text":""},{"location":"blog/%E4%BB%8Edeepseek%E5%BC%80%E6%BA%90%E5%BA%933fs%E4%B8%AD%E5%AD%A6%E4%B9%A0fuse%E7%9A%84%E4%BD%BF%E7%94%A8-%E5%A6%82%E4%BD%95%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%80/#\u80cc\u666f\u4ecb\u7ecd","title":"\u80cc\u666f\u200b\u4ecb\u7ecd","text":"<p>Deepseek\u200b\u5f00\u6e90\u200b\u4e86\u200b\u4e00\u7cfb\u5217\u200bAI infra\u200b\u7684\u200b\u76f8\u5173\u200b\u7684\u200b\u9879\u76ee\u200b\uff0c\u200b\u5176\u4e2d\u200b\u5305\u62ec\u200b\u4e86\u200bdeepseek-ai/3FS\u3002</p> <p>A high-performance distributed file system designed to address the challenges of AI training and inference workloads.</p> <p>\u200b\u6587\u4ef6\u7cfb\u7edf\u200b\u662f\u200b\u4efb\u4f55\u200b\u64cd\u4f5c\u7cfb\u7edf\u200b\u7684\u200b\u652f\u67f1\u200b\uff0c\u200b\u8d1f\u8d23\u7ba1\u7406\u200b\u6570\u636e\u200b\u7684\u200b\u5b58\u50a8\u200b\u548c\u200b\u68c0\u7d22\u200b\u65b9\u5f0f\u200b\u3002\u200b\u4f20\u7edf\u200b\u4e0a\u200b\uff0c\u200b\u5f00\u53d1\u200b\u6587\u4ef6\u7cfb\u7edf\u200b\u662f\u200b\u4e00\u9879\u200b\u590d\u6742\u200b\u800c\u200b\u8270\u5de8\u200b\u7684\u200b\u4efb\u52a1\u200b\uff0c\u200b\u9700\u8981\u200b\u5bf9\u200b\u5185\u6838\u200b\u7f16\u7a0b\u200b\u6709\u200b\u6df1\u5165\u200b\u7684\u200b\u4e86\u89e3\u200b\u3002\u200b\u7136\u800c\u200b\uff0c\u200b\u6709\u200b\u4e86\u200b FUSE\uff08\u200b\u7528\u6237\u200b\u7a7a\u95f4\u200b\u6587\u4ef6\u7cfb\u7edf\u200b\uff09\uff0c\u200b\u8fd9\u9879\u200b\u4efb\u52a1\u200b\u53d8\u5f97\u200b\u66f4\u52a0\u200b\u5bb9\u6613\u200b\u548c\u200b\u901a\u7528\u200b\u3002</p> <p>FUSE\uff08\u200b\u7528\u6237\u200b\u7a7a\u95f4\u200b\u6587\u4ef6\u7cfb\u7edf\u200b\uff09\u200b\u662f\u200b\u7528\u6237\u200b\u7a7a\u95f4\u200b\u7a0b\u5e8f\u200b\u5411\u200b Linux \u200b\u5185\u6838\u200b\u5bfc\u51fa\u200b\u6587\u4ef6\u7cfb\u7edf\u200b\u7684\u200b\u63a5\u53e3\u200b\u3002FUSE \u200b\u9879\u76ee\u200b\u7531\u200b\u4e24\u4e2a\u200b\u7ec4\u4ef6\u200b\u7ec4\u6210\u200b\uff1afuse\u200b\u5185\u6838\u6a21\u5757\u200b\uff08\u200b\u5728\u200b\u5e38\u89c4\u200b\u5185\u6838\u200b\u5b58\u50a8\u200b\u5e93\u4e2d\u200b\u7ef4\u62a4\u200b\uff09\u200b\u548c\u200blibfuse\u200b\u7528\u6237\u200b\u7a7a\u95f4\u200b\u5e93\u200b\uff08\u200b\u5728\u200b\u6b64\u200b\u5b58\u50a8\u200b\u5e93\u4e2d\u200b\u7ef4\u62a4\u200b\uff09\u3002libfuse \u200b\u4e3a\u200b\u4e0e\u200b FUSE \u200b\u5185\u6838\u6a21\u5757\u200b\u901a\u4fe1\u200b\u63d0\u4f9b\u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b\u3002 FUSE \u200b\u6587\u4ef6\u7cfb\u7edf\u200b\u901a\u5e38\u200b\u5b9e\u73b0\u200b\u4e3a\u200b\u4e0e\u200b libfuse \u200b\u94fe\u63a5\u200b\u7684\u200b\u72ec\u7acb\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u3002libfuse \u200b\u63d0\u4f9b\u200b\u6302\u8f7d\u200b\u6587\u4ef6\u7cfb\u7edf\u200b\u3001\u200b\u5378\u8f7d\u200b\u6587\u4ef6\u7cfb\u7edf\u200b\u3001\u200b\u4ece\u200b\u5185\u6838\u200b\u8bfb\u53d6\u200b\u8bf7\u6c42\u200b\u4ee5\u53ca\u200b\u53d1\u9001\u200b\u54cd\u5e94\u200b\u7684\u200b\u529f\u80fd\u200b\u3002libfuse \u200b\u63d0\u4f9b\u200b\u4e24\u79cd\u200b API\uff1a\u201c\u200b\u9ad8\u7ea7\u200b\u201d \u200b\u540c\u6b65\u200b API \u200b\u548c\u200b \u201c\u200b\u4f4e\u7ea7\u200b\u201d \u200b\u5f02\u6b65\u200b API\u3002\u200b\u5728\u200b\u8fd9\u200b\u4e24\u79cd\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u6765\u81ea\u200b\u5185\u6838\u200b\u7684\u200b\u4f20\u5165\u200b\u8bf7\u6c42\u200b\u90fd\u200b\u4f7f\u7528\u200b\u56de\u8c03\u200b\u4f20\u9012\u200b\u7ed9\u200b\u4e3b\u7a0b\u5e8f\u200b\u3002\u200b\u5f53\u200b\u4f7f\u7528\u200b\u9ad8\u7ea7\u200b API \u200b\u65f6\u200b\uff0c\u200b\u56de\u8c03\u200b\u53ef\u4ee5\u200b\u5904\u7406\u200b\u6587\u4ef6\u540d\u200b\u548c\u200b\u8def\u5f84\u200b\u800c\u200b\u4e0d\u662f\u200b\u7d22\u5f15\u200b\u8282\u70b9\u200b\uff0c\u200b\u5e76\u4e14\u200b\u5f53\u200b\u56de\u8c03\u200b\u51fd\u6570\u200b\u8fd4\u56de\u200b\u65f6\u200b\u8bf7\u6c42\u200b\u5904\u7406\u200b\u5b8c\u6210\u200b\u3002\u200b\u5f53\u200b\u4f7f\u7528\u200b\u4f4e\u7ea7\u200b API \u200b\u65f6\u200b\uff0c\u200b\u56de\u8c03\u200b\u5fc5\u987b\u200b\u5904\u7406\u200b\u7d22\u5f15\u200b\u8282\u70b9\u200b\uff0c\u200b\u5e76\u4e14\u200b\u5fc5\u987b\u200b\u4f7f\u7528\u200b\u5355\u72ec\u200b\u7684\u200b\u4e00\u7ec4\u200b API \u200b\u51fd\u6570\u200b\u663e\u5f0f\u200b\u53d1\u9001\u200b\u54cd\u5e94\u200b\u3002</p> <p>FUSE\uff08\u200b\u7528\u6237\u200b\u7a7a\u95f4\u200b\u6587\u4ef6\u7cfb\u7edf\u200b\uff09\u200b\u662f\u200b Linux \u200b\u4e2d\u200b\u7684\u200b\u4e00\u4e2a\u200b\u8f6f\u4ef6\u200b\u5c42\u200b\uff0c\u200b\u5b83\u200b\u5141\u8bb8\u200b\u975e\u200b\u7279\u6743\u200b\u7528\u6237\u200b\u5728\u200b\u4e0d\u200b\u7f16\u8f91\u200b\u5185\u6838\u200b\u6e90\u4ee3\u7801\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u521b\u5efa\u200b\u81ea\u5df1\u200b\u7684\u200b\u6587\u4ef6\u7cfb\u7edf\u200b\u3002\u200b\u5b83\u200b\u7531\u200b\u4e09\u4e2a\u200b\u4e3b\u8981\u200b\u7ec4\u4ef6\u200b\u7ec4\u6210\u200b\uff1a fuse.ko - FUSE \u200b\u5185\u6838\u6a21\u5757\u200b\uff0c\u200b\u5b83\u200b\u63d0\u4f9b\u200b\u4e86\u200b FUSE \u200b\u7684\u200b\u63a5\u53e3\u200b\u3002 libfuse - \u200b\u7528\u6237\u200b\u7a7a\u95f4\u200b\u5e93\u200b\uff0c\u200b\u5b83\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u5904\u7406\u200b\u4e0e\u200b FUSE \u200b\u5185\u6838\u6a21\u5757\u200b\u901a\u4fe1\u200b\u6240\u200b\u9700\u200b\u7684\u200b API\uff0c\u200b\u5141\u8bb8\u200b\u7528\u6237\u200b\u7a7a\u95f4\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u5b9e\u73b0\u200b\u81ea\u5b9a\u4e49\u200b\u6587\u4ef6\u7cfb\u7edf\u200b\u903b\u8f91\u200b\u3002 fusermount - \u200b\u4e00\u4e2a\u200b\u6302\u8f7d\u200b\u5de5\u5177\u200b\u3002</p>"},{"location":"blog/%E4%BB%8Edeepseek%E5%BC%80%E6%BA%90%E5%BA%933fs%E4%B8%AD%E5%AD%A6%E4%B9%A0fuse%E7%9A%84%E4%BD%BF%E7%94%A8-%E5%A6%82%E4%BD%95%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%80/#\u91cd\u8981\u7684\u6570\u636e\u7ed3\u6784\u51fd\u6570\u5b8f\u5b9a\u4e49","title":"\u91cd\u8981\u200b\u7684\u200b\u6570\u636e\u7ed3\u6784\u200b\u3001\u200b\u51fd\u6570\u200b\u3001\u200b\u5b8f\u200b\u5b9a\u4e49","text":""},{"location":"blog/%E4%BB%8Edeepseek%E5%BC%80%E6%BA%90%E5%BA%933fs%E4%B8%AD%E5%AD%A6%E4%B9%A0fuse%E7%9A%84%E4%BD%BF%E7%94%A8-%E5%A6%82%E4%BD%95%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%80/#fuse_args","title":"fuse_args","text":"<p>\u200b\u8fd9\u4e2a\u200b\u7ed3\u6784\u200b\u7528\u4e8e\u200b\u5904\u7406\u200b\u4f20\u9012\u200b\u7ed9\u200b FUSE \u200b\u6587\u4ef6\u7cfb\u7edf\u200b\u7684\u200b\u547d\u4ee4\u884c\u200b\u53c2\u6570\u200b\u3002</p> C++<pre><code>struct fuse_args {\n    int argc; // number of arguments\n    char **argv; // argument vector, NULL terminated\n    int allocated; // is argv allocated?\n};\n</code></pre> <p>\u200b\u901a\u8fc7\u200b\u5b8f\u200b\u5b9a\u4e49\u200b\u521d\u59cb\u5316\u200b\uff0c</p> C++<pre><code>#define FUSE_ARGS_INIT(argc, argv) { argc, argv, 0 }\n</code></pre> <p>\u200b\u5728\u200b3fs\u200b\u4e2d\u200b\u4f20\u9012\u200b\u53c2\u6570\u200b\uff0c</p> C++<pre><code>// https://github1s.com/deepseek-ai/3FS/blob/main/src/fuse/FuseMainLoop.cc#L47\nstd::vector&lt;std::string&gt; fuseArgs;\nfuseArgs.push_back(programName);\nif (allowOther) {\nfuseArgs.push_back(\"-o\");\nfuseArgs.push_back(\"allow_other\");\nfuseArgs.push_back(\"-o\");\nfuseArgs.push_back(\"default_permissions\");\n}\nfuseArgs.push_back(\"-o\");\nfuseArgs.push_back(\"auto_unmount\");\nfuseArgs.push_back(\"-o\");\nfuseArgs.push_back(fmt::format(\"max_read={}\", maxbufsize));\nfuseArgs.push_back(mountpoint);\nfuseArgs.push_back(\"-o\");\nfuseArgs.push_back(\"subtype=hf3fs\");\nfuseArgs.push_back(\"-o\");\nfuseArgs.push_back(\"fsname=hf3fs.\" + clusterId);\nstd::vector&lt;char *&gt; fuseArgsPtr;\nfor (auto &amp;arg : fuseArgs) {\nfuseArgsPtr.push_back(const_cast&lt;char *&gt;(arg.c_str()));\n}\nstruct fuse_args args = FUSE_ARGS_INIT((int)fuseArgsPtr.size(), fuseArgsPtr.data());\n</code></pre>"},{"location":"blog/%E4%BB%8Edeepseek%E5%BC%80%E6%BA%90%E5%BA%933fs%E4%B8%AD%E5%AD%A6%E4%B9%A0fuse%E7%9A%84%E4%BD%BF%E7%94%A8-%E5%A6%82%E4%BD%95%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%80/#fuse_cmdline_opts","title":"fuse_cmdline_opts","text":"C++<pre><code>struct fuse_cmdline_opts {\n    int singlethread;\n    int foreground;\n    int debug;\n    int nodefault_subtype;\n    char *mountpoint;\n    int show_version;\n    int show_help;\n    int clone_fd;\n    unsigned int max_idle_threads; \n    unsigned int max_threads; // This was added in libfuse 3.12\n};\n</code></pre> <p>\u200b\u8fd9\u4e2a\u200b\u7ed3\u6784\u200b\u4f53\u200b\u7528\u4e8e\u200b\u5b58\u50a8\u200b\u4ece\u200b\u53c2\u6570\u200b\u89e3\u6790\u200b\u51fa\u200b\u7684\u200b\u547d\u4ee4\u884c\u200b\u9009\u9879\u200b\u3002\u200b\u5b83\u200b\u6709\u52a9\u4e8e\u200b\u6839\u636e\u200b\u7528\u6237\u200b\u8f93\u5165\u200b\u7ba1\u7406\u200b\u548c\u200b\u914d\u7f6e\u200b FUSE \u200b\u6587\u4ef6\u7cfb\u7edf\u200b\u3002\u200b\u6b64\u200b\u7ed3\u6784\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200bfuse_parse_cmdline\u200b\u51fd\u6570\u200b\u8fdb\u884c\u200b\u586b\u5145\u200b\u3002</p> <p>\u200b\u5728\u200b3fs\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u793a\u4f8b\u200b\uff1a </p>C++<pre><code>struct fuse_cmdline_opts opts;\nstruct fuse_loop_config *config = fuse_loop_cfg_create();\nSCOPE_EXIT { fuse_loop_cfg_destroy(config); };\n\nif (fuse_parse_cmdline(&amp;args, &amp;opts) != 0) {\nreturn 1;\n}\n</code></pre><p></p>"},{"location":"blog/%E4%BB%8Edeepseek%E5%BC%80%E6%BA%90%E5%BA%933fs%E4%B8%AD%E5%AD%A6%E4%B9%A0fuse%E7%9A%84%E4%BD%BF%E7%94%A8-%E5%A6%82%E4%BD%95%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%80/#fuse_session_new","title":"fuse_session_new","text":"<p>\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200blow-level\u200b\u4f1a\u8bdd\u200b\u3002\u200b\u6b64\u200b\u51fd\u6570\u200b\u63a5\u53d7\u200b\u5927\u591a\u6570\u200b\u4e0e\u200b\u6587\u4ef6\u7cfb\u7edf\u200b\u65e0\u5173\u200b\u7684\u200b\u6302\u8f7d\u200b\u9009\u9879\u200b\u3002</p> <p></p>C++<pre><code>struct fuse_session *fuse_session_new(struct fuse_args *args,const struct fuse_lowlevel_ops *op,size_t op_size, void *userdata);\n</code></pre> \u200b\u4f7f\u7528\u200b\u65b9\u6cd5\u200b\uff1a C++<pre><code>d.se = fuse_session_new(&amp;args, &amp;ops, sizeof(ops), NULL);\nif (d.se == nullptr) {\nreturn 1;\n}\n</code></pre><p></p>"},{"location":"blog/%E4%BB%8Edeepseek%E5%BC%80%E6%BA%90%E5%BA%933fs%E4%B8%AD%E5%AD%A6%E4%B9%A0fuse%E7%9A%84%E4%BD%BF%E7%94%A8-%E5%A6%82%E4%BD%95%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%80/#fuse_set_signal_handlers","title":"fuse_set_signal_handlers","text":"<p>\u200b\u6b64\u200b\u51fd\u6570\u200b\u4e3a\u200b\u4fe1\u53f7\u200bSIGHUP\u3001SIGINT\u200b\u548c\u200bSIGTERM\u200b\u5b89\u88c5\u200b\u4fe1\u53f7\u5904\u7406\u200b\u7a0b\u5e8f\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u4fe1\u53f7\u5904\u7406\u200b\u7a0b\u5e8f\u200b\u5c06\u200b\u5c1d\u8bd5\u200b\u5378\u8f7d\u200b\u6587\u4ef6\u7cfb\u7edf\u200b\u3002\u200b\u5982\u679c\u200b\u5df2\u7ecf\u200b\u4e3a\u200b\u8fd9\u4e9b\u200b\u4fe1\u53f7\u200b\u4e2d\u200b\u7684\u200b\u4efb\u4f55\u200b\u4e00\u4e2a\u200b\u5b89\u88c5\u200b\u4e86\u200b\u4fe1\u53f7\u5904\u7406\u200b\u7a0b\u5e8f\u200b\uff0c\u200b\u5219\u200b\u4e0d\u4f1a\u200b\u66ff\u6362\u200b\u5b83\u200b\u3002\u200b\u6b64\u200b\u51fd\u6570\u200b\u5728\u200b\u6210\u529f\u200b\u65f6\u200b\u8fd4\u56de\u200b\u96f6\u200b\uff0c\u200b\u5728\u200b\u5931\u8d25\u200b\u65f6\u200b\u8fd4\u56de\u200b -1\u3002</p> C++<pre><code>int fuse_set_signal_handlers(struct fuse_session *se);\n</code></pre>"},{"location":"blog/%E4%BB%8Edeepseek%E5%BC%80%E6%BA%90%E5%BA%933fs%E4%B8%AD%E5%AD%A6%E4%B9%A0fuse%E7%9A%84%E4%BD%BF%E7%94%A8-%E5%A6%82%E4%BD%95%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%80/#fuse_lowlevel_ops","title":"fuse_lowlevel_ops","text":"<p>\u200b\u8fd9\u4e2a\u200b\u7ed3\u6784\u200b\u4ee3\u8868\u200b\u4e86\u200b\u4f4e\u7ea7\u200b\u6587\u4ef6\u7cfb\u7edf\u200b\u64cd\u4f5c\u200b\u3002\u200b\u5728\u200b3fs\u200b\u9879\u76ee\u200b\u4e2d\u200b\uff0c\u200b\u5c31\u662f\u200b\u901a\u8fc7\u200b\u8fd9\u4e2a\u200b\u7ed3\u6784\u200b\u6ce8\u518c\u200b\u4e86\u200b\u81ea\u5df1\u200b\u5b9e\u73b0\u200b\u7684\u200b\u56de\u8c03\u200b\u51fd\u6570\u200b\u3002</p> <p>\u200b\u6ce8\u518c\u200b\u56de\u8c03\u200b\u51fd\u6570\u200b\uff1a </p>C++<pre><code>const fuse_lowlevel_ops hf3fs_oper = {\n    .init = hf3fs_init,\n    .destroy = hf3fs_destroy,\n    .lookup = hf3fs_lookup,\n    .forget = hf3fs_forget,\n    .getattr = hf3fs_getattr,\n    .setattr = hf3fs_setattr,\n    .readlink = hf3fs_readlink,\n    .mknod = hf3fs_mknod,\n    .mkdir = hf3fs_mkdir,\n    .unlink = hf3fs_unlink,\n    .rmdir = hf3fs_rmdir,\n    .symlink = hf3fs_symlink,\n    .rename = hf3fs_rename,\n    .link = hf3fs_link,\n    .open = hf3fs_open,\n    .read = hf3fs_read,\n    .write = hf3fs_write,\n    .flush = hf3fs_flush,\n    .release = hf3fs_release,\n    .fsync = hf3fs_fsync,\n    .opendir = hf3fs_opendir,\n    //    .readdir = hf3fs_readdir,\n    .releasedir = hf3fs_releasedir,\n    //.fsyncdir = hf3fs_fsyncdir,\n    .statfs = hf3fs_statfs,\n    .setxattr = hf3fs_setxattr,\n    .getxattr = hf3fs_getxattr,\n    .listxattr = hf3fs_listxattr,\n    .removexattr = hf3fs_removexattr,\n    .create = hf3fs_create,\n    .ioctl = hf3fs_ioctl,\n    .readdirplus = hf3fs_readdirplus,\n};\n</code></pre><p></p> <p>\u200b\u7ed3\u6784\u200b\u4f53\u200b\u5b9a\u4e49\u200b\uff1a </p>C++<pre><code>struct fuse_lowlevel_ops {\n    // Called when libfuse establishes communication with the FUSE kernel module.\n    void (*init) (void *userdata, struct fuse_conn_info *conn);\n\n    // Cleans up filesystem, called on filesystem exit.\n    void (*destroy) (void *userdata);\n\n    // Look up a directory entry by name and get its attributes.\n    void (*lookup) (fuse_req_t req, fuse_ino_t parent, const char *name);\n\n    // Can be called to forget about an inode\n    void (*forget) (fuse_req_t req, fuse_ino_t ino, uint64_t nlookup);\n\n    // Called to get file attributes\n    void (*getattr) (fuse_req_t req, fuse_ino_t ino,\n             struct fuse_file_info *fi);\n\n    // Called to set file attributes\n    void (*setattr) (fuse_req_t req, fuse_ino_t ino, struct stat *attr,\n             int to_set, struct fuse_file_info *fi);\n\n    // Called to read the target of a symbolic link\n    void (*readlink) (fuse_req_t req, fuse_ino_t ino);\n\n    // Called to create a file node\n    void (*mknod) (fuse_req_t req, fuse_ino_t parent, const char *name,\n               mode_t mode, dev_t rdev);\n\n    // Called to create a directory\n    void (*mkdir) (fuse_req_t req, fuse_ino_t parent, const char *name,\n               mode_t mode);\n\n    // Called to remove a file\n    void (*unlink) (fuse_req_t req, fuse_ino_t parent, const char *name);\n\n    // Called to remove a directory\n    void (*rmdir) (fuse_req_t req, fuse_ino_t parent, const char *name);\n\n    // Called to create a symbolic link\n    void (*symlink) (fuse_req_t req, const char *link, fuse_ino_t parent,\n             const char *name);\n\n    // Called to rename a file or directory\n    void (*rename) (fuse_req_t req, fuse_ino_t parent, const char *name,\n            fuse_ino_t newparent, const char *newname,\n            unsigned int flags);\n\n    // Called to create a hard link\n    void (*link) (fuse_req_t req, fuse_ino_t ino, fuse_ino_t newparent,\n              const char *newname);\n\n    // Called to open a file\n    void (*open) (fuse_req_t req, fuse_ino_t ino,\n              struct fuse_file_info *fi);\n\n    // Called to read data from a file\n    void (*read) (fuse_req_t req, fuse_ino_t ino, size_t size, off_t off,\n              struct fuse_file_info *fi);\n\n    // Called to write data to a file\n    void (*write) (fuse_req_t req, fuse_ino_t ino, const char *buf,\n               size_t size, off_t off, struct fuse_file_info *fi);\n\n    // Called on each close() of the opened file, for flushing cached data\n    void (*flush) (fuse_req_t req, fuse_ino_t ino,\n               struct fuse_file_info *fi);\n\n    // Called to release an open file (when there are no more references to an open file i.e all file descriptors are closed and all memory mappings are unmapped)\n    void (*release) (fuse_req_t req, fuse_ino_t ino,\n             struct fuse_file_info *fi);\n\n    // Called to synchronize file contents\n    void (*fsync) (fuse_req_t req, fuse_ino_t ino, int datasync,\n               struct fuse_file_info *fi);\n\n    // Called to open a directory\n    void (*opendir) (fuse_req_t req, fuse_ino_t ino,\n             struct fuse_file_info *fi);\n\n    // Called to read directory entries\n    void (*readdir) (fuse_req_t req, fuse_ino_t ino, size_t size, off_t off,\n             struct fuse_file_info *fi);\n\n    // Called to release an open directory\n    void (*releasedir) (fuse_req_t req, fuse_ino_t ino,\n                struct fuse_file_info *fi);\n\n    // Called to synchronize directory contents\n    void (*fsyncdir) (fuse_req_t req, fuse_ino_t ino, int datasync,\n              struct fuse_file_info *fi);\n\n    // Called to get file system statistics\n    void (*statfs) (fuse_req_t req, fuse_ino_t ino);\n\n    // Called to set an extended attribute\n    void (*setxattr) (fuse_req_t req, fuse_ino_t ino, const char *name,\n              const char *value, size_t size, int flags);\n\n    // Called to get an extended attribute\n    void (*getxattr) (fuse_req_t req, fuse_ino_t ino, const char *name,\n              size_t size);\n\n    // Called to list extended attribute names\n    void (*listxattr) (fuse_req_t req, fuse_ino_t ino, size_t size);\n\n    // Called to remove an extended attribute\n    void (*removexattr) (fuse_req_t req, fuse_ino_t ino, const char *name);\n\n    // Called to check file-access permissions\n    void (*access) (fuse_req_t req, fuse_ino_t ino, int mask);\n\n    // Called to create and open a file\n    void (*create) (fuse_req_t req, fuse_ino_t parent, const char *name,\n            mode_t mode, struct fuse_file_info *fi);\n\n    // Called to get a file lock\n    void (*getlk) (fuse_req_t req, fuse_ino_t ino,\n               struct fuse_file_info *fi, struct flock *lock);\n\n    // Called to set a file lock\n    void (*setlk) (fuse_req_t req, fuse_ino_t ino,\n               struct fuse_file_info *fi,\n               struct flock *lock, int sleep);\n\n    // Called to map a block index within file to a block index within device\n    void (*bmap) (fuse_req_t req, fuse_ino_t ino, size_t blocksize,\n              uint64_t idx);\n\n    // The ioctl handler\n#if FUSE_USE_VERSION &lt; 35\n    void (*ioctl) (fuse_req_t req, fuse_ino_t ino, int cmd,\n               void *arg, struct fuse_file_info *fi, unsigned flags,\n               const void *in_buf, size_t in_bufsz, size_t out_bufsz);\n#else\n    void (*ioctl) (fuse_req_t req, fuse_ino_t ino, unsigned int cmd,\n               void *arg, struct fuse_file_info *fi, unsigned flags,\n               const void *in_buf, size_t in_bufsz, size_t out_bufsz);\n#endif\n\n    // Called to poll a file for I/O readiness.\n    void (*poll) (fuse_req_t req, fuse_ino_t ino, struct fuse_file_info *fi,\n              struct fuse_pollhandle *ph);\n\n    // Called to write a buffer to a file.\n    void (*write_buf) (fuse_req_t req, fuse_ino_t ino,\n               struct fuse_bufvec *bufv, off_t off,\n               struct fuse_file_info *fi);\n\n    // Called to reply to a retrieve operation.\n    void (*retrieve_reply) (fuse_req_t req, void *cookie, fuse_ino_t ino,\n                off_t offset, struct fuse_bufvec *bufv);\n\n    // Called to forget multiple inodes\n    void (*forget_multi) (fuse_req_t req, size_t count,\n                  struct fuse_forget_data *forgets);\n\n    // Called to acquire, modify or release a file lock\n    void (*flock) (fuse_req_t req, fuse_ino_t ino,\n               struct fuse_file_info *fi, int op);\n\n    //  Called to allocate space to a file\n    void (*fallocate) (fuse_req_t req, fuse_ino_t ino, int mode,\n               off_t offset, off_t length, struct fuse_file_info *fi);\n\n    // Called to read a directory entry with attributes \n    void (*readdirplus) (fuse_req_t req, fuse_ino_t ino, size_t size, off_t off,\n             struct fuse_file_info *fi);\n\n    // To copy a range of data from one file to another\n    void (*copy_file_range) (fuse_req_t req, fuse_ino_t ino_in,\n                 off_t off_in, struct fuse_file_info *fi_in,\n                 fuse_ino_t ino_out, off_t off_out,\n                 struct fuse_file_info *fi_out, size_t len,\n                 int flags);\n\n    // The lseek operation, for specifying new file offsets past the current end of the file.\n    void (*lseek) (fuse_req_t req, fuse_ino_t ino, off_t off, int whence,\n               struct fuse_file_info *fi);\n};\n</code></pre><p></p>"},{"location":"blog/%E4%BB%8Edeepseek%E5%BC%80%E6%BA%90%E5%BA%933fs%E4%B8%AD%E5%AD%A6%E4%B9%A0fuse%E7%9A%84%E4%BD%BF%E7%94%A8-%E5%A6%82%E4%BD%95%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%80/#fuse_session_loop","title":"fuse_session_loop","text":"<p>\u200b\u8fdb\u5165\u200b\u5355\u7ebf\u7a0b\u200b\u3001\u200b\u963b\u585e\u200b\u5f0f\u200b\u4e8b\u4ef6\u200b\u5faa\u73af\u200b\u3002\u200b\u5982\u679c\u200b\u9884\u5148\u200b\u6ce8\u518c\u200b\u4e86\u200b\u4fe1\u53f7\u5904\u7406\u200b\u7a0b\u5e8f\u200b\uff0c\u200b\u5219\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u4fe1\u53f7\u200b\u7ec8\u6b62\u200b\u8be5\u200b\u5faa\u73af\u200b\u3002</p> C++<pre><code>int fuse_session_loop(struct fuse_session *se);\n</code></pre> <p>\u200b\u5728\u200b3fs\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u793a\u4f8b\u200b\uff1a</p> C++<pre><code>  int ret = -1;\n  if (opts.singlethread) {\n    ret = fuse_session_loop(d.se);\n  } else {\n    fuse_loop_cfg_set_clone_fd(config, opts.clone_fd);\n    fuse_loop_cfg_set_idle_threads(config, d.maxIdleThreads);\n    fuse_loop_cfg_set_max_threads(config, d.maxThreads);\n    ret = fuse_session_loop_mt(d.se, config);\n  }\n\n  return ret ? 1 : 0;\n</code></pre>"},{"location":"blog/%E4%BB%8Edeepseek%E5%BC%80%E6%BA%90%E5%BA%933fs%E4%B8%AD%E5%AD%A6%E4%B9%A0fuse%E7%9A%84%E4%BD%BF%E7%94%A8-%E5%A6%82%E4%BD%95%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%80/#fuse_session_unmount","title":"fuse_session_unmount","text":"<p>\u200b\u8fd9\u4e2a\u200b\u51fd\u6570\u200b\u786e\u4fdd\u200b\u6587\u4ef6\u7cfb\u7edf\u200b\u88ab\u200b\u5378\u8f7d\u200b\u3002</p> C++<pre><code>void fuse_session_unmount(struct fuse_session *se);\n</code></pre> C++<pre><code>std::stack&lt;std::function&lt;void()&gt;&gt; onStopHooks;\nonStopHooks.push([&amp;] { fuse_session_unmount(d.se); });\n\nSCOPE_EXIT {\n    while (!onStopHooks.empty()) {\n        onStopHooks.top()();\n        onStopHooks.pop();\n    }\n};\n</code></pre> <p>!!! \u200b\u6ce8\u200b\uff1a\u200b\u8fd9\u91cc\u200b\u7684\u200bSCOPE_EXIT\u200b\u5b8f\u200b\u5b9a\u4e49\u200b\u5728\u200bfolly\u200b\u5e93\u4e2d\u54c8\u200b\uff01</p> C++<pre><code>// https://github.com/facebook/folly/blob/main/folly/ScopeGuard.h\n/**\n * Capture code that shall be run when the current scope exits.\n *\n * The code within SCOPE_EXIT's braces shall execute as if the code was in the\n * destructor of an object instantiated at the point of SCOPE_EXIT.\n *\n * Variables used within SCOPE_EXIT are captured by reference.\n *\n * @def SCOPE_EXIT\n */\n#define SCOPE_EXIT                                        \\\n  auto FB_ANONYMOUS_VARIABLE_ODR_SAFE(SCOPE_EXIT_STATE) = \\\n      ::folly::detail::ScopeGuardOnExit() + [&amp;]() noexcept\n</code></pre>"},{"location":"blog/%E4%BB%8Edeepseek%E5%BC%80%E6%BA%90%E5%BA%933fs%E4%B8%AD%E5%AD%A6%E4%B9%A0fuse%E7%9A%84%E4%BD%BF%E7%94%A8-%E5%A6%82%E4%BD%95%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%80/#fuse_reply_","title":"fuse_reply_*","text":"<p>\u200b\u8fd9\u4e9b\u200b\u7c7b\u578b\u200b\u7684\u200b\u51fd\u6570\u200b\uff08\u200b\u4f8b\u5982\u200b\uff0cfuse_reply_entry\u3001fuse_reply_open \u200b\u7b49\u200b\uff09\u200b\u7528\u4e8e\u200b\u4ece\u200b\u7528\u6237\u200b\u7a7a\u95f4\u200b\u6587\u4ef6\u7cfb\u7edf\u200b\u5b9e\u73b0\u200b\u5c06\u200b\u54cd\u5e94\u200b\u53d1\u9001\u200b\u56de\u200b FUSE \u200b\u5185\u6838\u6a21\u5757\u200b\u3002\u200b\u6bcf\u4e2a\u200bfuse_reply_*\u200b\u7c7b\u578b\u200b\u7684\u200b\u51fd\u6570\u200b\u5bf9\u5e94\u200b\u4e00\u79cd\u200b\u7279\u5b9a\u200b\u7c7b\u578b\u200b\u7684\u200b\u53ef\u4ee5\u200b\u53d1\u9001\u200b\u7684\u200b\u54cd\u5e94\u200b\uff0c\u200b\u5177\u4f53\u200b\u53d6\u51b3\u4e8e\u200b\u6b63\u5728\u200b\u6267\u884c\u200b\u7684\u200b\u64cd\u4f5c\u200b\u3002</p>"},{"location":"blog/%E4%BB%8Edeepseek%E5%BC%80%E6%BA%90%E5%BA%933fs%E4%B8%AD%E5%AD%A6%E4%B9%A0fuse%E7%9A%84%E4%BD%BF%E7%94%A8-%E5%A6%82%E4%BD%95%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%80/#\u5982\u4f55\u4f7f\u7528fuse\u5f00\u53d1\u4e00\u4e2a\u7b80\u5355\u7684\u6587\u4ef6\u7cfb\u7edf","title":"\u5982\u4f55\u200b\u4f7f\u7528\u200bFUSE\u200b\u5f00\u53d1\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b\u6587\u4ef6\u7cfb\u7edf","text":"<p>\u200b\u4f7f\u7528\u200b\u4f4e\u7ea7\u200b API \u200b\u5f00\u53d1\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b\u6587\u4ef6\u7cfb\u7edf\u200b\uff0c\u200b\u652f\u6301\u200b\u5728\u200b\u76ee\u5f55\u200b\u4e2d\u200b\u521b\u5efa\u200b\u3001\u200b\u8bfb\u53d6\u200b\u3001\u200b\u5199\u5165\u200b\u6587\u4ef6\u200b\u548c\u200b\u5217\u51fa\u200b\u6587\u4ef6\u200b\u3002</p> <p>\u200b\u672a\u5b8c\u5f85\u7eed\u200b\u2026</p>"},{"location":"blog/%E4%BB%8Edeepseek%E5%BC%80%E6%BA%90%E5%BA%933fs%E4%B8%AD%E5%AD%A6%E4%B9%A0fuse%E7%9A%84%E4%BD%BF%E7%94%A8-%E5%A6%82%E4%BD%95%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%80/#\u53c2\u8003","title":"\u53c2\u8003","text":"<ul> <li>https://sh4dy.com/2024/06/24/fuse_01/</li> <li>https://github.com/osxfuse/fuse/blob/master/README.md</li> </ul> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>C++\u200b\u6280\u6cd5\u200b\uff1a\u200b\u5982\u4f55\u200b\u4e3a\u200b\u4e00\u4e2a\u200b\u7c7b\u200b\u52a8\u6001\u200b\u9644\u52a0\u200b\u4efb\u610f\u200b\u7c7b\u578b\u200b\u6570\u636e\u200b</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> </ul>"},{"location":"blog/%E4%BD%BF%E7%94%A8pytorch%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAllama3%E5%A4%A7%E6%A8%A1%E5%9E%8B--%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3llama3%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%AF%8F%E4%B8%AA%E7%BB%84%E4%BB%B6/","title":"\u4f7f\u7528\u200bPytorch\u200b\u4ece\u200b\u96f6\u200b\u6784\u5efa\u200bLlama3\u200b\u5927\u200b\u6a21\u578b\u200b--\u200b\u6df1\u5165\u200b\u4e86\u89e3\u200bLLaMa3\u200b\u6a21\u578b\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u7ec4\u4ef6","text":"<p>\uff08\u200b\u672c\u6587\u200b\u4e3b\u8981\u200b\u5185\u5bb9\u200b\u8bd1\u81ea\u200bbuild-your-own-llama-3-architecture-from-scratch-using-pytorch\uff09</p> <p>\u200b\u5148\u770b\u200b\u4e00\u4e0b\u200bLLama3\u200b\u6a21\u578b\u200b\u7ed3\u6784\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u662f\u200b\u8bd1\u6587\u200b\u4f5c\u8005\u200b\u6839\u636e\u200bLLama3\u200b\u8bba\u6587\u200b\u753b\u200b\u7684\u200b\uff0c\u200b\u753b\u5f97\u200b\u5f88\u200b\u597d\u200b\u3002\u200b\u56fe\u4e2d\u200b\u5305\u62ec\u200b\u4e86\u200b\u8bad\u7ec3\u200b\u548c\u200b\u63a8\u7406\u200b\u7684\u200b\u6d41\u7a0b\u200b\u3002</p> <p></p>"},{"location":"blog/%E4%BD%BF%E7%94%A8pytorch%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAllama3%E5%A4%A7%E6%A8%A1%E5%9E%8B--%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3llama3%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%AF%8F%E4%B8%AA%E7%BB%84%E4%BB%B6/#\u770b\u4e86\u8fd9\u7bc7\u6587\u7ae0\u7684\u6536\u83b7","title":"\u770b\u200b\u4e86\u200b\u8fd9\u200b\u7bc7\u6587\u7ae0\u200b\u7684\u200b\u6536\u83b7\u200b\uff1f","text":"<ul> <li>\u200b\u6df1\u5165\u200b\u4e86\u89e3\u200b LLaMa 3 \u200b\u6a21\u578b\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u7ec4\u4ef6\u200b\u5982\u4f55\u200b\u5de5\u4f5c\u200b\u7684\u200b\u3002</li> <li>\u200b\u7f16\u5199\u200b\u4ee3\u7801\u200b\u6765\u200b\u6784\u5efa\u200b LLaMa 3 \u200b\u7684\u200b\u6bcf\u4e2a\u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u7136\u540e\u200b\u5c06\u200b\u5b83\u4eec\u200b\u7ec4\u88c5\u200b\u5728\u200b\u4e00\u8d77\u200b\u4ee5\u200b\u6784\u5efa\u200b\u4e00\u4e2a\u200b\u529f\u80fd\u9f50\u5168\u200b\u7684\u200b LLaMa 3 \u200b\u6a21\u578b\u200b\u3002</li> <li>\u200b\u7f16\u5199\u200b\u4ee3\u7801\u200b\u4f7f\u7528\u200b\u65b0\u200b\u7684\u200b\u81ea\u200b\u5b9a\u4e49\u6570\u636e\u200b\u96c6\u6765\u200b\u8bad\u7ec3\u200b\u4f60\u200b\u7684\u200b\u6a21\u578b\u200b\u3002</li> <li>\u200b\u7f16\u5199\u200b\u4ee3\u7801\u6267\u884c\u200b\u63a8\u7406\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u4f60\u200b\u7684\u200b LLaMa 3 \u200b\u6a21\u578b\u200b\u53ef\u4ee5\u200b\u6839\u636e\u200b\u8f93\u5165\u200b\u63d0\u793a\u200b\u751f\u6210\u200b\u65b0\u200b\u6587\u672c\u200b\u3002</li> </ul>"},{"location":"blog/%E4%BD%BF%E7%94%A8pytorch%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAllama3%E5%A4%A7%E6%A8%A1%E5%9E%8B--%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3llama3%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%AF%8F%E4%B8%AA%E7%BB%84%E4%BB%B6/#\u8f93\u5165input-block","title":"\u8f93\u5165\u200bInput Block","text":"<p>\u200b\u8f93\u5165\u200b\u7531\u200b\u4e09\u4e2a\u200b\u90e8\u5206\u200b\u7ec4\u6210\u200b\uff1a + Texts/ Prompts + Tokenizer + Embeddings</p> <p>\u200b\u4e00\u56fe\u200b\u80dc\u200b\u5343\u8a00\u200b\uff0c\u200b\u901a\u8fc7\u200b\u56fe\u7247\u200b\u6765\u200b\u4e86\u89e3\u200b\u4e00\u4e0b\u200b\u8fd9\u200b\u4e09\u4e2a\u200b\u90e8\u5206\u200b\u5982\u4f55\u200b\u4e00\u8d77\u200b\u5de5\u4f5c\u200b\u7684\u200b\u3002</p> <p></p> <ul> <li> <p>\u200b\u9996\u5148\u200b\uff0c\u200b\u5355\u4e2a\u200b\u6216\u200b\u4e00\u6279\u200bprompts(\u200b\u63d0\u793a\u200b\u8bcd\u200b)\u200b\u5c06\u200b\u88ab\u200b\u4f20\u5165\u200b\u6a21\u578b\u200b\u3002\u200b\u4f8b\u5982\u200b\uff1a\u200b\u4e0a\u8ff0\u200b\u6d41\u7a0b\u56fe\u200b\u4e2d\u200b\u7684\u200b\u201cHello World\u201d\u3002</p> </li> <li> <p>\u200b\u6a21\u578b\u200b\u7684\u200b\u8f93\u5165\u200b\u5e94\u200b\u59cb\u7ec8\u200b\u4e3a\u200b\u6570\u5b57\u200b\u683c\u5f0f\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5b83\u200b\u65e0\u6cd5\u200b\u5904\u7406\u200b\u6587\u672c\u200b\u3002Tokenizer \u200b\u5c06\u200b\u8fd9\u4e9b\u200b\u6587\u672c\u200b/\u200b\u63d0\u793a\u200b\u8f6c\u6362\u200b\u4e3a\u200btoken\u200b\u548c\u200bID\uff08\u200b\u5bf9\u5e94\u200b\u8bcd\u6c47\u8868\u200b\u4e2d\u200b\u6807\u8bb0\u200b\u7684\u200b\u7d22\u5f15\u200b\u7f16\u53f7\u200b\u8868\u793a\u200b\uff09\u3002</p> </li> <li>\u200b\u5728\u200b Llama 3 \u200b\u6a21\u578b\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u7684\u200bTokenizer\u200b\u662f\u200b TikToken\uff0c\u200b\u4e00\u79cd\u200bsubword tokenizer\u3002\u200b\u5728\u200b\u6587\u7ae0\u200b\u4e2d\u200b\u91c7\u7528\u200b\u4e86\u200b\u4f7f\u7528\u200b\u5b57\u7b26\u200b\u7ea7\u200btokenizer\u3002\u200b\u4e3b\u8981\u200b\u539f\u56e0\u200b\u662f\u200b\u6211\u4eec\u200b\u5e94\u8be5\u200b\u77e5\u9053\u200b\u5982\u4f55\u200b\u81ea\u5df1\u200b\u6784\u5efa\u200b\u5305\u62ec\u200b\u7f16\u7801\u200b\u548c\u200b\u89e3\u7801\u200b\u529f\u80fd\u200b\u7684\u200b\u8bcd\u6c47\u8868\u200b\u548c\u200b\u5206\u8bcd\u5668\u200b\u3002\u200b\u8fd9\u6837\u200b\u6211\u4eec\u200b\u5c06\u200b\u80fd\u591f\u200b\u4e86\u89e3\u200b\u4e00\u5207\u200b\u5728\u200b\u5e55\u540e\u200b\u662f\u200b\u5982\u4f55\u200b\u5de5\u4f5c\u200b\u7684\u200b\uff0c\u200b\u5e76\u4e14\u200b\u6211\u4eec\u200b\u5c06\u200b\u5b8c\u5168\u200b\u63a7\u5236\u4ee3\u7801\u200b\u3002</li> <li>\u200b\u6700\u540e\u200b\uff0c\u200b\u6bcf\u4e2a\u200btoken ID \u200b\u5c06\u200b\u88ab\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u7ef4\u5ea6\u200b\u4e3a\u200b 128 \u200b\u7684\u200b\u5d4c\u5165\u200b\u5411\u91cf\u200b\uff08embedding vector\uff09\uff08\u200b\u5728\u200b\u539f\u59cb\u200b\u7684\u200b Llama 3 8B\u200b\u6a21\u578b\u200b\u4e2d\u200b\uff0c\u200b\u5b83\u200b\u662f\u200b 4096\uff09\u3002\u200b\u7136\u540e\u200b\uff0c\u200b\u8fd9\u4e9b\u200bembeddings\u200b\u5c06\u200b\u88ab\u200b\u4f20\u9012\u200b\u5230\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u79f0\u4e3a\u200bDecoder Block\u200b\u7684\u200b\u5757\u200b\u4e2d\u200b\u3002</li> </ul>"},{"location":"blog/%E4%BD%BF%E7%94%A8pytorch%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAllama3%E5%A4%A7%E6%A8%A1%E5%9E%8B--%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3llama3%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%AF%8F%E4%B8%AA%E7%BB%84%E4%BB%B6/#decoder-block","title":"Decoder Block","text":"<p>\u200b\u7531\u200b\u5982\u4e0b\u200b\u90e8\u5206\u200b\u7ec4\u6210\u200b\uff1a</p> <ul> <li>RMS Norm</li> <li>Rotary Positional Encoding</li> <li>KV Cache</li> <li>Group Query Attention</li> <li>FeedForward Network</li> <li>Decoder Block</li> </ul>"},{"location":"blog/%E4%BD%BF%E7%94%A8pytorch%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAllama3%E5%A4%A7%E6%A8%A1%E5%9E%8B--%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3llama3%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%AF%8F%E4%B8%AA%E7%BB%84%E4%BB%B6/#\u5747\u65b9\u6839\u5f52\u4e00\u5316root-mean-square-normalization","title":"\u5747\u200b\u65b9\u6839\u200b\u5f52\u4e00\u5316\u200b\uff08Root Mean Square Normalization\uff09","text":"<p>\u200b\u4e3a\u4ec0\u4e48\u200b\u9700\u8981\u200b RMSNorm\uff1f</p> <p>\u200b\u5728\u200b\u4e0a\u8ff0\u200b\u67b6\u6784\u56fe\u200b\u4e2d\u200b\uff0c\u200b\u4f60\u200b\u4e00\u5b9a\u200b\u6ce8\u610f\u200b\u5230\u200b\u4e86\u200b\u8f93\u5165\u200b\u5757\u200b\u7684\u200b\u8f93\u51fa\u200b\uff0c\u200b\u5373\u200b\u5d4c\u5165\u200b\u5411\u91cf\u200b\u4f1a\u200b\u901a\u8fc7\u200bRMSNorm \u200b\u5757\u200b\u3002\u200b\u8fd9\u200b\u662f\u56e0\u4e3a\u200b\u5d4c\u5165\u200b\u5411\u91cf\u200b\u6709\u200b\u5f88\u591a\u200b\u7ef4\u5ea6\u200b\uff08\u200b\u5728\u200b Llama3-8b \u200b\u4e2d\u4e3a\u200b 4096 \u200b\u7ef4\u200b\uff09\uff0c\u200b\u5e76\u4e14\u200b\u59cb\u7ec8\u200b\u5b58\u5728\u200b\u503c\u200b\u5904\u4e8e\u200b\u4e0d\u540c\u200b\u8303\u56f4\u200b\u7684\u200b\u53ef\u80fd\u6027\u200b\u3002\u200b\u8fd9\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5bfc\u81f4\u200b\u6a21\u578b\u200b\u68af\u5ea6\u200b\u7206\u70b8\u200b\u6216\u200b\u6d88\u5931\u200b\uff0c\u200b\u4ece\u800c\u200b\u5bfc\u81f4\u200b\u6536\u655b\u200b\u7f13\u6162\u200b\u751a\u81f3\u200b\u53d1\u6563\u200b\u3002RMSNorm \u200b\u5c06\u200b\u8fd9\u4e9b\u200b\u503c\u200b\u8f6c\u6362\u200b\u5230\u200b\u4e00\u5b9a\u200b\u8303\u56f4\u200b\uff0c\u200b\u6709\u52a9\u4e8e\u200b\u7a33\u5b9a\u200b\u548c\u200b\u52a0\u901f\u200b\u8bad\u7ec3\u200b\u8fc7\u7a0b\u200b\u3002\u200b\u8fd9\u200b\u4f7f\u5f97\u200b\u68af\u5ea6\u200b\u5177\u6709\u200b\u66f4\u200b\u4e00\u81f4\u200b\u7684\u200b\u5e45\u5ea6\u200b\uff0c\u200b\u4ece\u800c\u200b\u4f7f\u200b\u6a21\u578b\u200b\u66f4\u5feb\u200b\u5730\u200b\u6536\u655b\u200b\u3002</p> <p>\u200b\u901a\u8fc7\u200b\u4e00\u5f20\u200b\u56fe\u200b\u89e3\u91ca\u200b\u4e86\u200bRMS Norm\u200b\u662f\u200b\u5982\u4f55\u200b\u5de5\u4f5c\u200b\u7684\u200b\uff01</p> <p></p> <p>\u200b\u56fe\u4e2d\u200b\u7684\u200bembedding\u200b\u8f93\u5165\u200bshape\u200b\u662f\u200b3x3\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200b\u6709\u200b3\u200b\u4e2a\u200btoken\uff0c\u200b\u6bcf\u4e2a\u200btoken\u200b\u7684\u200bembedding vector\u200b\u7ef4\u5ea6\u200b\u4e3a\u200b3\u3002</p> <p>\u200b\u4e0e\u200b\u5c42\u200b\u5f52\u4e00\u5316\u200b\uff08layer normalization\uff09\u200b\u7c7b\u4f3c\u200b\uff0c\u200b\u5747\u200b\u65b9\u6839\u200b\u5f52\u4e00\u5316\u200b\uff08RMSNorm\uff09\u200b\u6cbf\u200bembedding\u200b\u7279\u5f81\u200b\u6216\u200b\u7ef4\u5ea6\u200b\u5e94\u7528\u200b\u3002\u200b\u4e0a\u9762\u200b\u7684\u200b\u56fe\u200b\u5177\u6709\u200b\u5f62\u72b6\u200b\u4e3a\u200b[3,3]\u200b\u7684\u200bembedding\uff0c\u200b\u8fd9\u200b\u610f\u5473\u7740\u200b\u6bcf\u4e2a\u200btoken\u200b\u6709\u200b 3 \u200b\u4e2a\u200b\u7ef4\u5ea6\u200b\u3002</p>"},{"location":"blog/%E4%BD%BF%E7%94%A8pytorch%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAllama3%E5%A4%A7%E6%A8%A1%E5%9E%8B--%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3llama3%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%AF%8F%E4%B8%AA%E7%BB%84%E4%BB%B6/#\u89e3\u91ca\u5c06-rmsnorm-\u5e94\u7528\u4e8e\u7b2c\u4e00\u4e2atoken-x1-\u7684embedding\u7684\u8fc7\u7a0b","title":"\u89e3\u91ca\u200b\u5c06\u200b RMSNorm \u200b\u5e94\u7528\u200b\u4e8e\u200b\u7b2c\u4e00\u4e2a\u200btoken X1 \u200b\u7684\u200bembedding\u200b\u7684\u200b\u8fc7\u7a0b","text":"<ul> <li> <p>\u200b\u5728\u200bX1\u200b\u6cbf\u7740\u200bembedding\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u7ef4\u5ea6\u200b\u4e0a\u200b\uff0c\u200b\u5373\u200b x11\u3001x12 \u200b\u548c\u200b x13\uff0c\u200b\u6807\u8bb0\u200b X1 \u200b\u7684\u200b\u503c\u200b\u5c06\u200b\u5206\u522b\u200b\u9664\u4ee5\u200b\u6240\u6709\u200b\u8fd9\u4e9b\u200b\u503c\u200b\u7684\u200b\u5747\u200b\u65b9\u6839\u200b\u3002\u200b\u8ba1\u7b97\u516c\u5f0f\u200b\u5982\u4e0a\u56fe\u200b\u6240\u793a\u200b\u3002</p> </li> <li> <p>E\uff08Epsilon\uff0c\u200b\u4e00\u4e2a\u200b\u5c0f\u200b\u7684\u200b\u5e38\u6570\u200b\uff09\u200b\u88ab\u200b\u6dfb\u52a0\u200b\u5230\u200b\u5747\u200b\u65b9\u6839\u200b\u4e2d\u200b\uff0c\u200b\u4ee5\u200b\u907f\u514d\u200b\u4e3a\u4e86\u200b\u6570\u503c\u200b\u7a33\u5b9a\u6027\u200b\u800c\u200b\u51fa\u73b0\u200b\u9664\u4ee5\u200b\u96f6\u200b\u7684\u200b\u60c5\u51b5\u200b\u3002</p> </li> <li> <p>\u200b\u6700\u540e\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u7f29\u653e\u200b\u53c2\u6570\u200bGamma \\(Gamma\\) \u200b\u4e0e\u200b\u4e4b\u200b\u76f8\u4e58\u200b\u3002\u200b\u6bcf\u4e2a\u200b\u7279\u5f81\u200b\u90fd\u200b\u6709\u200b\u4e00\u4e2a\u200b\u552f\u4e00\u200b\u7684\u200b \\(Gamma\\) \u200b\u53c2\u6570\u200b\uff08\u200b\u5c31\u200b\u50cf\u200b\u4e0a\u9762\u200b\u56fe\u4e2d\u200b\u7684\u200b\u7ef4\u5ea6\u200b d1 \u200b\u7684\u200b Y1\u3001\u200b\u7ef4\u5ea6\u200b d2 \u200b\u7684\u200b Y2 \u200b\u548c\u200b\u7ef4\u5ea6\u200b d3 \u200b\u7684\u200b Y3 \u200b\u4e00\u6837\u200b\uff09\uff0c\u200b\u5b83\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5b66\u4e60\u200b\u53c2\u6570\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5411\u4e0a\u200b\u6216\u200b\u5411\u4e0b\u200b\u7f29\u653e\u200b\uff0c\u200b\u4ee5\u200b\u8fdb\u4e00\u6b65\u200b\u7a33\u5b9a\u200b\u5f52\u4e00\u5316\u200b\u3002\\(Gamma\\) \u200b\u53c2\u6570\u200b\u521d\u59cb\u503c\u200b\u4e3a\u200b 1\uff08\u200b\u5982\u200b\u4e0a\u9762\u200b\u7684\u200b\u8ba1\u7b97\u200b\u6240\u793a\u200b\uff09\u3002</p> </li> <li> <p>\u200b\u6b63\u5982\u200b\u4f60\u200b\u5728\u200b\u4e0a\u9762\u200b\u7684\u200b\u4f8b\u5b50\u200b\u4e2d\u200b\u6ce8\u610f\u200b\u5230\u200b\u7684\u200b\uff0cembedding\u200b\u503c\u200b\u5f88\u5927\u200b\u4e14\u200b\u5206\u5e03\u200b\u5728\u200b\u4e00\u4e2a\u200b\u5f88\u200b\u5bbd\u200b\u7684\u200b\u8303\u56f4\u200b\u5185\u200b\u3002\u200b\u5e94\u7528\u200b RMSNorm \u200b\u540e\u200b\uff0c\u200b\u503c\u200b\u53d8\u5f97\u200b\u5c0f\u200b\u5f88\u591a\u200b\u4e14\u200b\u5728\u200b\u4e00\u4e2a\u200b\u8f83\u200b\u5c0f\u200b\u7684\u200b\u8303\u56f4\u200b\u5185\u200b\u3002\u200b\u8ba1\u7b97\u200b\u662f\u200b\u4f7f\u7528\u200b\u5b9e\u9645\u200b\u7684\u200b RMSNorm \u200b\u51fd\u6570\u200b\u5b8c\u6210\u200b\u7684\u200b\u3002</p> </li> </ul> <p>\u200b\u4e3a\u4ec0\u4e48\u200b\u9009\u62e9\u200b RMSNorm \u200b\u800c\u200b\u4e0d\u662f\u200b\u5c42\u200b\u5f52\u4e00\u5316\u200b\uff1f\u200b\u6b63\u5982\u200b\u4f60\u200b\u5728\u200b\u4e0a\u9762\u200b\u7684\u200b\u4f8b\u5b50\u200b\u4e2d\u200b\u6ce8\u610f\u200b\u5230\u200b\u7684\u200b\uff0c\u200b\u6211\u4eec\u200b\u6ca1\u6709\u200b\u8ba1\u7b97\u200b\u4efb\u4f55\u200b\u5747\u503c\u200b\u6216\u200b\u65b9\u5dee\u200b\uff0c\u200b\u800c\u200b\u8fd9\u200b\u5728\u200b\u5c42\u200b\u5f52\u4e00\u5316\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u662f\u200b\u4f1a\u200b\u8fdb\u884c\u200b\u8ba1\u7b97\u200b\u7684\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u8bf4\u200b RMSNorm \u200b\u901a\u8fc7\u200b\u907f\u514d\u200b\u5747\u503c\u200b\u548c\u200b\u65b9\u5dee\u200b\u7684\u200b\u8ba1\u7b97\u200b\u51cf\u5c11\u200b\u4e86\u200b\u8ba1\u7b97\u200b\u5f00\u9500\u200b\u3002\u200b\u6b64\u5916\u200b\uff0c\u200b\u6839\u636e\u200b\u4f5c\u8005\u200b\u7684\u200b\u8bba\u6587\u200b\uff0cRMSNorm \u200b\u5728\u200b\u4e0d\u200b\u5f71\u54cd\u200b\u51c6\u786e\u6027\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u5177\u6709\u200b\u6027\u80fd\u200b\u4f18\u52bf\u200b\u3002</p> <p>\u200b\u5c42\u200b\u5f52\u4e00\u5316\u200b\u7684\u200b\u56fe\u793a\u200b\uff1a</p> <p></p> <p></p>"},{"location":"blog/%E4%BD%BF%E7%94%A8pytorch%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAllama3%E5%A4%A7%E6%A8%A1%E5%9E%8B--%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3llama3%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%AF%8F%E4%B8%AA%E7%BB%84%E4%BB%B6/#\u65cb\u8f6c\u4f4d\u7f6e\u7f16\u7801rope","title":"\u65cb\u8f6c\u200b\u4f4d\u7f6e\u200b\u7f16\u7801\u200b\uff08RoPE\uff09","text":"<p>\u200b\u4e3a\u4ec0\u4e48\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u65cb\u8f6c\u200b\u4f4d\u7f6e\u200b\u7f16\u7801\u200b\uff08RoPE\uff09\uff1f</p> <p>\u200b\u5728\u200b\u6211\u4eec\u200b\u6df1\u5165\u63a2\u8ba8\u200b\u4e3a\u4ec0\u4e48\u200b\u9700\u8981\u200b\u5b83\u200b\u4e4b\u524d\u200b\uff0c\u200b\u56de\u987e\u200b\u4e00\u4e0b\u200b\u5230\u200b\u76ee\u524d\u4e3a\u6b62\u200b\u6211\u4eec\u200b\u6240\u200b\u505a\u200b\u7684\u200b\u4e8b\u60c5\u200b\u3002\u200b\u9996\u5148\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u8f93\u5165\u200b\u6587\u672c\u200b\u8f6c\u6362\u200b\u4e3a\u200bembedding\u200b\u8868\u793a\u200b\u3002\u200b\u63a5\u4e0b\u6765\u200b\uff0c\u200b\u6211\u4eec\u200b\u5bf9\u200bembedding\u200b\u8868\u793a\u200b\u5e94\u7528\u200b\u5747\u200b\u65b9\u6839\u200b\u5f52\u4e00\u5316\u200b\uff08RMSNorm\uff09\u3002</p> <p>\u200b\u4e0d\u200b\u77e5\u9053\u200b\u4f60\u200b\u4e00\u5b9a\u200b\u6ce8\u610f\u200b\u5230\u200b\u6709\u4e9b\u200b\u4e0d\u5bf9\u52b2\u200b\u7684\u200b\u5730\u65b9\u200b\u6ca1\u6709\u200b\u3002\u200b\u6bd4\u5982\u8bf4\u200b\uff0c\u200b\u8f93\u5165\u200b\u6587\u672c\u200b\u662f\u200b\u201c\u200b\u6211\u200b\u559c\u6b22\u200b\u82f9\u679c\u200b\u201d\uff08I love apple\uff09\u200b\u6216\u200b\u201c\u200b\u82f9\u679c\u200b\u559c\u6b22\u200b\u6211\u200b\u201d\uff08Apple love I\uff09\uff0c\u200b\u6a21\u578b\u200b\u4ecd\u7136\u200b\u4f1a\u200b\u5c06\u200b\u8fd9\u200b\u4e24\u4e2a\u200b\u53e5\u5b50\u200b\u89c6\u4e3a\u200b\u76f8\u540c\u200b\u5e76\u200b\u4ee5\u200b\u76f8\u540c\u200b\u7684\u200b\u65b9\u5f0f\u200b\u5b66\u4e60\u200b\u3002\u200b\u56e0\u4e3a\u200b\u5728\u200bembedding\u200b\u8868\u793a\u200b\u4e2d\u200b\u6ca1\u6709\u200b\u4e3a\u200b\u6a21\u578b\u200b\u5b9a\u4e49\u200b\u987a\u5e8f\u200b\u4ee5\u4f9b\u200b\u5b66\u4e60\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u987a\u5e8f\u200b\u5bf9\u4e8e\u200b\u4efb\u4f55\u200b\u8bed\u8a00\u200b\u6a21\u578b\u200b\u90fd\u200b\u975e\u5e38\u200b\u91cd\u8981\u200b\u3002</p> <p>\u200b\u5728\u200bLlama 3\u200b\u6a21\u578b\u200b\u67b6\u6784\u200b\u4e2d\u200b\uff0c\u200b\u65cb\u8f6c\u200b\u4f4d\u7f6e\u200b\u7f16\u7801\u200b\uff08RoPE\uff09\u200b\u7528\u4e8e\u200b\u5b9a\u4e49\u200b\u53e5\u5b50\u200b\u4e2d\u200b\u6bcf\u4e2a\u200btoken\u200b\u7684\u200b\u4f4d\u7f6e\u200b\uff0c\u200b\u5b83\u200b\u4e0d\u4ec5\u200b\u7ef4\u62a4\u200b\u4e86\u200b\u987a\u5e8f\u200b\uff0c\u200b\u8fd8\u200b\u7ef4\u62a4\u200b\u4e86\u200b\u53e5\u5b50\u200b\u4e2d\u200btoken\u200b\u7684\u200b\u76f8\u5bf9\u200b\u4f4d\u7f6e\u200b\u3002</p> <p>\u200b\u90a3\u4e48\u200b\uff0c\u200b\u4ec0\u4e48\u200b\u662f\u200b\u65cb\u8f6c\u200b\u4f4d\u7f6e\u200b\u7f16\u7801\u200b\u4ee5\u53ca\u200b\u5b83\u200b\u662f\u200b\u5982\u4f55\u200b\u5de5\u4f5c\u200b\u7684\u200b\u5462\u200b\uff1f\u200b\u6b63\u5982\u200b\u4e0a\u9762\u200b\u201c\u200b\u4e3a\u4ec0\u4e48\u200b\u201d\u200b\u90e8\u5206\u200b\u6240\u200b\u63d0\u5230\u200b\u7684\u200b\uff0cRoPE \u200b\u662f\u200b\u4e00\u79cd\u200b\u4f4d\u7f6e\u200b\u7f16\u7801\u200b\uff0c\u200b\u5b83\u200b\u5bf9\u200bembedding\u200b\u8868\u793a\u200b\u8fdb\u884c\u200b\u7f16\u7801\u200b\uff0c\u200b\u901a\u8fc7\u200b\u6dfb\u52a0\u200b\u7edd\u5bf9\u200b\u4f4d\u7f6e\u200b\u4fe1\u606f\u200b\u4ee5\u53ca\u200b\u7ed3\u5408\u200btoken\u200b\u4e4b\u95f4\u200b\u7684\u200b\u76f8\u5bf9\u200b\u4f4d\u7f6e\u200b\u4fe1\u606f\u200b\u6765\u200b\u7ef4\u62a4\u200b\u53e5\u5b50\u200b\u4e2d\u200btoken\u200b\u7684\u200b\u987a\u5e8f\u200b\u3002\u200b\u5b83\u200b\u901a\u8fc7\u200b\u4f7f\u7528\u200b\u79f0\u4e3a\u200b\u65cb\u8f6c\u200b\u77e9\u9635\u200b\u7684\u200b\u7279\u6b8a\u200b\u77e9\u9635\u200b\u65cb\u8f6c\u200b\u7ed9\u5b9a\u200b\u7684\u200bembedding\u200b\u8868\u793a\u200b\u6765\u200b\u6267\u884c\u200b\u7f16\u7801\u200b\u64cd\u4f5c\u200b\u3002\u200b\u8fd9\u4e2a\u200b\u4f7f\u7528\u200b\u65cb\u8f6c\u200b\u77e9\u9635\u200b\u7684\u200b\u7b80\u5355\u200b\u800c\u200b\u975e\u5e38\u200b\u5f3a\u5927\u200b\u7684\u200b\u6570\u5b66\u200b\u63a8\u5bfc\u200b\u662f\u200b RoPE \u200b\u7684\u200b\u6838\u5fc3\u200b\u3002</p> <p>\u200b\u4e0b\u56fe\u200b\u5c55\u793a\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u65cb\u8f6c\u200b\u77e9\u9635\u200b\u5982\u4f55\u200b\u5e94\u7528\u200b\u5230\u200b\u4e8c\u7ef4\u200b\u77e9\u9635\u200b\u3002</p> <p></p> <p>\u200b\u4e0a\u56fe\u200b\u4e2d\u200b\u7684\u200b\u65cb\u8f6c\u200b\u77e9\u9635\u200b\u53ef\u200b\u65cb\u8f6c\u200b\u4e8c\u7ef4\u200b\u5411\u91cf\u200b\u3002\u200b\u7136\u800c\u200b\uff0cLlama 3 \u200b\u6a21\u578b\u200b\u7684\u200b\u7ef4\u5ea6\u200b\u6570\u4e3a\u200b 4096\uff0c\u200b\u8981\u200b\u591a\u5f97\u591a\u200b\u3002\u200b\u8ba9\u200b\u6211\u4eec\u200b\u6765\u200b\u770b\u770b\u200b\u5982\u4f55\u200b\u5728\u200b\u66f4\u200b\u9ad8\u200b\u7ef4\u5ea6\u200b\u7684\u200bembedding\u200b\u4e0a\u200b\u5e94\u7528\u200b\u65cb\u8f6c\u200b\u3002</p> <p></p> <p>embedding\u200b\u7684\u200b\u65cb\u8f6c\u200b\u6d89\u53ca\u200b\u6bcf\u200b\u5bf9\u200bembedding\u200b\u7ef4\u5ea6\u200b\u4e2d\u200b\u6bcf\u4e2a\u200bembedding\u200b\u4f4d\u7f6e\u200b\uff08m\uff09\u200b\u503c\u200b\u4e0e\u200b theta\uff08\u03b8\uff09\u200b\u7684\u200b\u4e58\u6cd5\u200b\u3002\u200b\u8fd9\u200b\u5c31\u662f\u200b\u65cb\u8f6c\u200b\u4f4d\u7f6e\u200b\u7f16\u7801\u200b\uff08RoPE\uff09\u200b\u901a\u8fc7\u200b\u65cb\u8f6c\u200b\u77e9\u9635\u200b\u7684\u200b\u5b9e\u73b0\u200b\u6765\u200b\u6355\u83b7\u200b\u7edd\u5bf9\u200b\u4f4d\u7f6e\u200b\u4ee5\u53ca\u200b\u76f8\u5bf9\u200b\u4f4d\u7f6e\u200b\u4fe1\u606f\u200b\u7684\u200b\u65b9\u5f0f\u200b\u3002</p> <p>!!!     \u200b\u6ce8\u610f\u200b\uff1a\u200b\u5728\u200b\u6267\u884c\u200b\u65cb\u8f6c\u200b\u4e4b\u524d\u200b\uff0c\u200b\u65cb\u8f6c\u200b\u77e9\u9635\u200b\u9700\u8981\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u6781\u5750\u6807\u200b\u5f62\u5f0f\u200b\uff0cembedding\u200b\u5411\u91cf\u200b\u9700\u8981\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u590d\u6570\u200b\u3002\u200b\u65cb\u8f6c\u200b\u5b8c\u6210\u200b\u540e\u200b\uff0c\u200b\u65cb\u8f6c\u200b\u540e\u200b\u7684\u200b\u5d4c\u5165\u200b\u9700\u8981\u200b\u8f6c\u6362\u200b\u56de\u200b\u5b9e\u6570\u200b\u4ee5\u200b\u8fdb\u884c\u200b\u6ce8\u610f\u529b\u200b\u64cd\u4f5c\u200b\u3002\u200b\u6b64\u5916\u200b\uff0cRoPE \u200b\u4ec5\u200b\u5e94\u7528\u200b\u4e8e\u200b\u67e5\u8be2\u200b\uff08Query\uff09\u200b\u548c\u952e\u200b\uff08Key\uff09\u200b\u5d4c\u5165\u200b\uff0c\u200b\u4e0d\u9002\u200b\u7528\u4e8e\u200b\u503c\u200b\uff08Value\uff09\u200b\u5d4c\u5165\u200b\u3002</p>"},{"location":"blog/%E4%BD%BF%E7%94%A8pytorch%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAllama3%E5%A4%A7%E6%A8%A1%E5%9E%8B--%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3llama3%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%AF%8F%E4%B8%AA%E7%BB%84%E4%BB%B6/#kv-cache-\u4ec5\u5728\u63a8\u7406\u9636\u6bb5\u5e94\u7528","title":"KV Cache (\u200b\u4ec5\u200b\u5728\u200b\u63a8\u7406\u200b\u9636\u6bb5\u200b\u5e94\u7528\u200b)","text":"<p>\u200b\u4ec0\u4e48\u200b\u662f\u200b KV-Cache\uff1f</p> <p>\u200b\u5728\u200b LLaMa 3 \u200b\u67b6\u6784\u200b\u4e2d\u200b\uff0c\u200b\u5728\u200b\u63a8\u7406\u200b\u65f6\u200b\u5f15\u5165\u200b\u4e86\u200b KV-Cache \u200b\u7684\u200b\u6982\u5ff5\u200b\uff0c\u200b\u4ee5\u200b\u952e\u503c\u200b\u7f13\u5b58\u200b\u7684\u200b\u5f62\u5f0f\u200b\u5b58\u50a8\u200b\u5148\u524d\u200b\u751f\u6210\u200b\u7684\u200btoken\u3002\u200b\u8fd9\u4e9b\u200b\u7f13\u5b58\u200b\u5c06\u200b\u7528\u4e8e\u200b\u8ba1\u7b97\u200b\u81ea\u200b\u6ce8\u610f\u529b\u200b\u4ee5\u200b\u751f\u6210\u200b\u4e0b\u200b\u4e00\u4e2a\u200btoken\u3002\u200b\u4ec5\u200b\u7f13\u5b58\u200b\u952e\u200b\uff08Key\uff09\u200b\u548c\u200b\u503c\u200b\uff08Value\uff09\u200b\u7684\u200btoken\uff0c\u200b\u800c\u200b\u4e0d\u200b\u7f13\u5b58\u200b\u67e5\u8be2\u200b\uff08Query\uff09\u200b\u7684\u200btoken\uff0c\u200b\u56e0\u6b64\u200b\u79f0\u4e3a\u200b KV \u200b\u7f13\u5b58\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u4e3a\u4ec0\u4e48\u200b\u9700\u8981\u200b KV \u200b\u7f13\u5b58\u200b\uff1f\u200b\u8ba9\u200b\u6211\u4eec\u200b\u770b\u200b\u4e0b\u9762\u200b\u7684\u200b\u56fe\u8868\u200b\u6765\u200b\u89e3\u7b54\u200b\u6211\u4eec\u200b\u7684\u200b\u7591\u60d1\u200b\u3002</p> <p></p> <p>\u200b\u5728\u200b\u56fe\u8868\u200b\u7684\u200b A \u200b\u5757\u200b\u4e2d\u200b\uff0c\u200b\u5f53\u200b\u751f\u6210\u200boutput3 token\u200b\u65f6\u200b\uff0c\u200b\u5148\u524d\u200b\u7684\u200boutput token\uff08output1\u3001output2\uff09\u200b\u4ecd\u200b\u5728\u200b\u8ba1\u7b97\u200b\u4e2d\u200b\uff0c\u200b\u8fd9\u200b\u5b8c\u5168\u200b\u6ca1\u6709\u200b\u5fc5\u8981\u200b\u3002\u200b\u8fd9\u200b\u5728\u200b\u6ce8\u610f\u529b\u200b\u8ba1\u7b97\u200b\u671f\u95f4\u200b\u5bfc\u81f4\u200b\u4e86\u200b\u989d\u5916\u200b\u7684\u200b\u77e9\u9635\u200b\u4e58\u6cd5\u200b\uff0c\u200b\u56e0\u6b64\u200b\u8ba1\u7b97\u8d44\u6e90\u200b\u5927\u5927\u589e\u52a0\u200b\u3002</p> <p>\u200b\u5728\u200b\u56fe\u8868\u200b\u7684\u200b B \u200b\u5757\u200b\u4e2d\u200b\uff0c\u200b\u6700\u540e\u200b\u751f\u6210\u200b\u7684\u200boutput token\u200b\u66ff\u6362\u200binput token\u200b\u6784\u6210\u200bQuery Embedding\u200b\u8f93\u5165\u200b\u3002KV \u200b\u7f13\u5b58\u200b\u5b58\u50a8\u200b\u5148\u524d\u200b\u751f\u6210\u200b\u7684\u200btoken\u3002\u200b\u5728\u200b\u8ba1\u7b97\u200b\u6ce8\u610f\u529b\u200b\u5f97\u5206\u200b\u65f6\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ea\u200b\u9700\u8981\u200b\u4ece\u200bQuery\u200b\u4e2d\u200b\u4f7f\u7528\u200b 1 \u200b\u4e2a\u200btoken\uff0c\u200b\u5e76\u200b\u4ece\u200b\u952e\u503c\u200b\u7f13\u5b58\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u5148\u524d\u200b\u7684\u200btoken\u3002\u200b\u5b83\u200b\u5c06\u200b\u77e9\u9635\u200b\u4e58\u6cd5\u200b\u4ece\u200b A \u200b\u5757\u200b\u7684\u200b 3x3 \u200b\u51cf\u5c11\u200b\u5230\u200b B \u200b\u5757\u200b\u7684\u200b 1x3\uff0c\u200b\u51e0\u4e4e\u200b\u51cf\u5c11\u200b\u4e86\u200b 66%\u3002\u200b\u5728\u200b\u73b0\u5b9e\u200b\u4e16\u754c\u200b\u4e2d\u200b\uff0c\u200b\u5bf9\u4e8e\u200b\u5de8\u5927\u200b\u7684\u200b\u5e8f\u5217\u200b\u957f\u5ea6\u200b\u548c\u200b\u6279\u91cf\u200b\u5927\u5c0f\u200b\uff0c\u200b\u8fd9\u200b\u5c06\u200b\u6709\u52a9\u4e8e\u200b\u51cf\u5c11\u200b\u5927\u91cf\u200b\u7684\u200b\u8ba1\u7b97\u80fd\u529b\u200b\u3002\u200b\u6700\u540e\u200b\uff0c\u200b\u59cb\u7ec8\u200b\u53ea\u6709\u200b\u4e00\u4e2a\u200b\u6700\u65b0\u200b\u751f\u6210\u200b\u7684\u200bouput token\u3002\u200b\u8fd9\u200b\u5c31\u662f\u200b\u5f15\u5165\u200b KV-Cache \u200b\u7684\u200b\u4e3b\u8981\u200b\u539f\u56e0\u200b\u3002</p>"},{"location":"blog/%E4%BD%BF%E7%94%A8pytorch%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAllama3%E5%A4%A7%E6%A8%A1%E5%9E%8B--%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3llama3%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%AF%8F%E4%B8%AA%E7%BB%84%E4%BB%B6/#\u5206\u7ec4\u67e5\u8be2\u6ce8\u610f\u529b-group-query-attention","title":"\u5206\u7ec4\u200b\u67e5\u8be2\u200b\u6ce8\u610f\u529b\u200b (Group Query Attention)","text":"<p>\u200b\u7ec4\u200b\u67e5\u8be2\u200b\u6ce8\u610f\u529b\u200b\u4e0e\u200b\u4e4b\u524d\u200b\u6a21\u578b\u200b\uff08\u200b\u5982\u200b Llama 1\uff09\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u7684\u200b\u591a\u5934\u200b\u6ce8\u610f\u529b\u200b\u76f8\u540c\u200b\uff0c\u200b\u552f\u4e00\u200b\u7684\u200b\u533a\u522b\u200b\u5728\u4e8e\u200b\u5bf9\u200b\u67e5\u8be2\u200b(Query)\u200b\u4f7f\u7528\u200b\u5355\u72ec\u200b\u7684\u200b\u5934\u200b(Head)\uff0c\u200b\u5bf9\u952e\u200b/\u200b\u503c\u200b(Key/Value)\u200b\u4f7f\u7528\u200b\u5355\u72ec\u200b\u7684\u200b\u5934\u200b\u3002\u200b\u901a\u5e38\u200b\uff0c\u200b\u5206\u914d\u200b\u7ed9\u200b\u67e5\u8be2\u200b\u7684\u200b\u5934\u6570\u200b\u662f\u200b\u952e\u200b\u548c\u200b\u503c\u200b\u5934\u6570\u200b\u7684\u200b n \u200b\u500d\u200b\u3002\u200b\u8ba9\u200b\u6211\u4eec\u200b\u770b\u200b\u4e00\u4e0b\u200b\u56fe\u8868\u200b\u4ee5\u200b\u8fdb\u4e00\u6b65\u200b\u52a0\u6df1\u200b\u7406\u89e3\u200b\u3002</p> <p></p> <p>\u200b\u5728\u200b\u7ed9\u5b9a\u200b\u7684\u200b\u56fe\u8868\u200b\u4e2d\u200b\uff0c\u200b\u591a\u5934\u200b\u6ce8\u610f\u529b\u200b\u5728\u200b\u6240\u6709\u200b\u67e5\u8be2\u200b\u3001\u200b\u952e\u548c\u503c\u200b\u4e2d\u200b\u5177\u6709\u200b\u76f8\u540c\u200b\u6570\u91cf\u200b\u7684\u200b\u5934\u200b\uff0c\u200b\u5373\u200b n_heads = 8\u3002</p> <p>\u200b\u7ec4\u200b\u67e5\u8be2\u200b\u6ce8\u610f\u529b\u200b\u6a21\u5757\u200b\u5bf9\u4e8e\u200b\u67e5\u8be2\u200b\u6709\u200b 8 \u200b\u4e2a\u5934\u200b\uff08n_heads\uff09\uff0c\u200b\u5bf9\u4e8e\u200b\u952e\u548c\u503c\u200b\u6709\u200b 4 \u200b\u4e2a\u5934\u200b\uff08n_kv_heads\uff09\uff0c\u200b\u8fd9\u6bd4\u200b\u67e5\u8be2\u200b\u5934\u5c11\u200b 2 \u200b\u500d\u200b\u3002</p> <p>\u200b\u65e2\u7136\u200b\u591a\u5934\u200b\u6ce8\u610f\u529b\u200b\u5df2\u7ecf\u200b\u5982\u6b64\u200b\u51fa\u8272\u200b\uff0c\u200b\u4e3a\u4ec0\u4e48\u200b\u6211\u4eec\u200b\u8fd8\u200b\u9700\u8981\u200b\u5206\u7ec4\u200b\u67e5\u8be2\u200b\u6ce8\u610f\u529b\u200b\u5462\u200b\uff1f</p> <p>\u200b\u4e3a\u4e86\u200b\u56de\u7b54\u200b\u8fd9\u4e2a\u200b\u95ee\u9898\u200b\uff0c\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u56de\u5230\u200bKV Cache\u200b\u4e0a\u6765\u200b\u3002KV Cache\u200b\u6781\u5927\u200b\u5730\u200b\u6709\u52a9\u4e8e\u200b\u51cf\u5c11\u200b\u8ba1\u7b97\u8d44\u6e90\u200b\u3002\u200b\u7136\u800c\u200b\uff0c\u200b\u968f\u7740\u200bKV Cache\u200b\u5b58\u50a8\u200b\u8d8a\u6765\u8d8a\u200b\u591a\u200b\u7684\u200b\u5148\u524d\u200btoken\uff0c\u200b\u5185\u5b58\u200b\u8d44\u6e90\u200b\u5c06\u200b\u663e\u8457\u200b\u589e\u52a0\u200b\u3002\u200b\u4ece\u200b\u6a21\u578b\u200b\u6027\u80fd\u200b\u7684\u200b\u89d2\u5ea6\u200b\u4ee5\u53ca\u200b\u7ecf\u6d4e\u200b\u89d2\u5ea6\u200b\u6765\u770b\u200b\uff0c\u200b\u8fd9\u200b\u90fd\u200b\u4e0d\u662f\u200b\u4e00\u4ef6\u200b\u597d\u4e8b\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u5f15\u5165\u200b\u4e86\u200b\u5206\u7ec4\u200b\u67e5\u8be2\u200b\u6ce8\u610f\u529b\u200b\u3002\u200b\u51cf\u5c11\u200b\u952e\u200b\uff08K\uff09\u200b\u548c\u200b\u503c\u200b\uff08V\uff09\u200b\u7684\u200b\u5934\u6570\u200b\u4f1a\u200b\u51cf\u5c11\u200b\u8981\u200b\u5b58\u50a8\u200b\u7684\u200b\u53c2\u6570\u200b\u6570\u91cf\u200b\uff0c\u200b\u56e0\u6b64\u200b\u4f7f\u7528\u200b\u7684\u200b\u5185\u5b58\u200b\u66f4\u200b\u5c11\u200b\u3002\u200b\u5404\u79cd\u200b\u6d4b\u8bd5\u200b\u7ed3\u679c\u200b\u5df2\u7ecf\u200b\u8bc1\u660e\u200b\uff0c\u200b\u91c7\u7528\u200b\u8fd9\u79cd\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u6a21\u578b\u200b\u7684\u200b\u51c6\u786e\u6027\u200b\u4ecd\u7136\u200b\u4fdd\u6301\u200b\u5728\u200b\u76f8\u540c\u200b\u7684\u200b\u8303\u56f4\u200b\u5185\u200b\u3002</p>"},{"location":"blog/%E4%BD%BF%E7%94%A8pytorch%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAllama3%E5%A4%A7%E6%A8%A1%E5%9E%8B--%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3llama3%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%AF%8F%E4%B8%AA%E7%BB%84%E4%BB%B6/#\u524d\u9988\u7f51\u7edcswiglu-\u6fc0\u6d3b","title":"\u524d\u9988\u200b\u7f51\u7edc\u200b\uff08SwiGLU \u200b\u6fc0\u6d3b\u200b\uff09","text":"<p>\u200b\u5728\u200b\u89e3\u7801\u5668\u200b\u5757\u200b\uff08Decoder Block\uff09\u200b\u4e2d\u200b\u524d\u9988\u200b\u7f51\u7edc\u200b\uff08FeedForward Network\uff09\u200b\u7684\u200b\u4f5c\u7528\u200b\u662f\u200b\u4ec0\u4e48\u200b\uff1f\u200b\u5982\u200b\u4e0a\u9762\u200b\u7684\u200b\u67b6\u6784\u56fe\u200b\u6240\u793a\u200b\uff0c\u200b\u6ce8\u610f\u529b\u200b\u8f93\u51fa\u200b\u9996\u5148\u200b\u5728\u200b RMSNorm \u200b\u671f\u95f4\u200b\u8fdb\u884c\u200b\u5f52\u4e00\u5316\u200b\uff0c\u200b\u7136\u540e\u200b\u8f93\u5165\u200b\u5230\u200b\u524d\u9988\u200b\u7f51\u7edc\u200b\u4e2d\u200b\u3002\u200b\u5728\u200b\u524d\u9988\u200b\u7f51\u7edc\u200b\u5185\u90e8\u200b\uff0c\u200b\u6ce8\u610f\u529b\u200binput embedding\u200b\u5c06\u200b\u5728\u200b\u5176\u200b\u9690\u85cf\u200b\u5c42\u4e2d\u200b\u6269\u5c55\u200b\u5230\u200b\u66f4\u200b\u9ad8\u200b\u7ef4\u5ea6\u200b\uff0c\u200b\u5e76\u200b\u5b66\u4e60\u200btoken\u200b\u7684\u200b\u66f4\u200b\u590d\u6742\u200b\u7279\u5f81\u200b\u3002</p> <p>\u200b\u4e3a\u4ec0\u4e48\u200b\u4f7f\u7528\u200b SwiGLU \u200b\u800c\u200b\u4e0d\u662f\u200b ReLU\uff1f</p> <p></p> <p>\u200b\u5982\u4e0a\u56fe\u200b\u6240\u793a\u200b\uff0cSwiGLU \u200b\u51fd\u6570\u200b\u5728\u200b\u6b63\u8f74\u200b\u4e0a\u200b\u7684\u200b\u8868\u73b0\u200b\u51e0\u4e4e\u200b\u4e0e\u200b ReLU \u200b\u76f8\u540c\u200b\u3002\u200b\u7136\u800c\u200b\uff0c\u200b\u5728\u200b\u8d1f\u8f74\u4e0a\u200b\uff0cSwiGLU \u200b\u8f93\u51fa\u200b\u4e00\u4e9b\u200b\u8d1f\u503c\u200b\uff0c\u200b\u5728\u200b ReLU \u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u8fd9\u200b\u5bf9\u4e8e\u200b\u5b66\u4e60\u200b\u8f83\u200b\u5c0f\u200b\u7684\u200b\u503c\u200b\u800c\u200b\u4e0d\u662f\u200b\u5e73\u5766\u200b\u7684\u200b 0 \u200b\u53ef\u80fd\u200b\u662f\u200b\u6709\u7528\u200b\u7684\u200b\u3002\u200b\u603b\u4f53\u800c\u8a00\u200b\uff0c\u200b\u6839\u636e\u200b\u4f5c\u8005\u200b\u7684\u200b\u8bf4\u6cd5\u200b\uff0cSwiGLU \u200b\u7684\u200b\u6027\u80fd\u200b\u4f18\u4e8e\u200b ReLU\uff1b\u200b\u56e0\u6b64\u200b\uff0c\u200b\u5b83\u200b\u88ab\u200b\u9009\u7528\u200b\u3002</p>"},{"location":"blog/%E4%BD%BF%E7%94%A8pytorch%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAllama3%E5%A4%A7%E6%A8%A1%E5%9E%8B--%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3llama3%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%AF%8F%E4%B8%AA%E7%BB%84%E4%BB%B6/#decoder-block_1","title":"Decoder Block\ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350","text":"<p>\u200b\u5982\u200b\u6587\u7ae0\u200b\u6700\u200b\u524d\u9762\u200b\u7684\u200b\u67b6\u6784\u56fe\u200b\u6240\u793a\u200b\u3002\u200b\u89e3\u7801\u5668\u200b\u6a21\u5757\u200b\u7531\u200b\u591a\u4e2a\u200b\u5b50\u200b\u7ec4\u4ef6\u200b\u7ec4\u6210\u200b\uff0c\u200b\u524d\u9762\u200b\u7684\u200b\u5185\u5bb9\u200b\u5c55\u5f00\u200b\u4e86\u200b\u8bb2\u89e3\u200b\u3002</p> <p>\u200b\u4e0b\u9762\u200b\u662f\u200b\u5728\u200b\u89e3\u7801\u5668\u200b\u6a21\u5757\u200b\u5185\u90e8\u200b\u6267\u884c\u200b\u7684\u200b\u64cd\u4f5c\u200b\u3002</p> <ul> <li> <p>\u200b\u6765\u81ea\u200b\u8f93\u5165\u200b\u6a21\u5757\u200b\u7684\u200bembedding\u200b\u88ab\u200b\u9001\u5165\u200bAttention-RMSNorm \u200b\u6a21\u5757\u200b\u3002\u200b\u8fd9\u200b\u5c06\u200b\u8fdb\u4e00\u6b65\u200b\u88ab\u200b\u9001\u5165\u200b\u7ec4\u200b\u67e5\u8be2\u200b\u6ce8\u610f\u529b\u200b\u6a21\u5757\u200b(Group Query Attention block)\u3002</p> </li> <li> <p>\u200b\u6765\u81ea\u200b\u8f93\u5165\u200b\u6a21\u5757\u200b\u7684\u200b\u76f8\u540c\u200bembedding\u200b\u968f\u540e\u200b\u5c06\u200b\u88ab\u200b\u52a0\u5230\u200b\u6ce8\u610f\u529b\u200b\u8f93\u51fa\u200b\u4e2d\u200b\u3002</p> </li> <li> <p>\u200b\u4e4b\u540e\u200b\uff0c\u200b\u6ce8\u610f\u529b\u200b\u8f93\u51fa\u200b\u88ab\u200b\u9001\u5165\u200bFeedFoWard-RMSNorm\uff0c\u200b\u5e76\u200b\u8fdb\u4e00\u6b65\u200b\u9001\u5165\u200b\u524d\u9988\u200b\u7f51\u7edc\u200b\u6a21\u5757\u200b\u3002</p> </li> <li> <p>\u200b\u524d\u9988\u200b\u7f51\u7edc\u200b\u7684\u200b\u8f93\u51fa\u200b\u968f\u540e\u200b\u518d\u6b21\u200b\u4e0e\u200b\u6ce8\u610f\u529b\u200b\u8f93\u51fa\u200b\u76f8\u52a0\u200b\u3002</p> </li> <li> <p>\u200b\u5f97\u5230\u200b\u7684\u200b\u8f93\u51fa\u200b\u88ab\u200b\u79f0\u4e3a\u200b\u89e3\u7801\u5668\u200b\u8f93\u51fa\u200b\u3002\u200b\u8fd9\u4e2a\u200b\u89e3\u7801\u5668\u200b\u8f93\u51fa\u200b\u968f\u540e\u200b\u4f5c\u4e3a\u200b\u8f93\u5165\u200b\u88ab\u200b\u9001\u5165\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u89e3\u7801\u5668\u200b\u6a21\u5757\u200b\u3002\u200b\u540c\u6837\u200b\u7684\u200b\u64cd\u4f5c\u200b\u5c06\u200b\u5728\u200b\u63a5\u4e0b\u6765\u200b\u7684\u200b 31 \u200b\u4e2a\u200b\u89e3\u7801\u5668\u200b\u6a21\u5757\u200b\u4e2d\u200b\u91cd\u590d\u200b\u3002\u200b\u7b2c\u200b 32 \u200b\u4e2a\u200b\u89e3\u7801\u5668\u200b\u6a21\u5757\u200b\u7684\u200b\u6700\u7ec8\u200b\u89e3\u7801\u5668\u200b\u8f93\u51fa\u200b\u968f\u540e\u200b\u88ab\u200b\u4f20\u9012\u200b\u5230\u200b\u8f93\u51fa\u6a21\u5757\u200b\uff08Output Block\uff09\u3002</p> </li> </ul> <p>Output Block\u200b\u4ee5\u53ca\u200b\u540e\u9762\u200b\u7684\u200b\u5185\u5bb9\u200b\u4e0b\u200b\u7bc7\u6587\u7ae0\u200b\u518d\u200b\u8bb2\u89e3\u200b\u3002</p> <ul> <li>\u200b\u4f7f\u7528\u200bPytorch\u200b\u4ece\u200b\u96f6\u200b\u6784\u5efa\u200bLlama3\u200b\u5927\u200b\u6a21\u578b\u200b--\u200b\u6df1\u5165\u200b\u4e86\u89e3\u200b\u8f93\u51fa\u6a21\u5757\u200b\u4ee5\u53ca\u200b\u8bad\u7ec3\u200b\u63a8\u7406\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/%E4%BD%BF%E7%94%A8pytorch%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAllama3%E5%A4%A7%E6%A8%A1%E5%9E%8B--%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3%E8%BE%93%E5%87%BA%E6%A8%A1%E5%9D%97%E4%BB%A5%E5%8F%8A%E8%AE%AD%E7%BB%83%E6%8E%A8%E7%90%86/","title":"\u4f7f\u7528\u200bPytorch\u200b\u4ece\u200b\u96f6\u200b\u6784\u5efa\u200bLlama3\u200b\u5927\u200b\u6a21\u578b\u200b--\u200b\u6df1\u5165\u200b\u4e86\u89e3\u200b\u8f93\u51fa\u6a21\u5757\u200b\u4ee5\u53ca\u200b\u8bad\u7ec3\u200b\u63a8\u7406","text":"<p>\uff08\u200b\u672c\u6587\u200b\u4e3b\u8981\u200b\u5185\u5bb9\u200b\u8bd1\u81ea\u200bbuild-your-own-llama-3-architecture-from-scratch-using-pytorch\uff09</p> <p>\u200b\u670b\u53cb\u200b\u4eec\u200b\uff0c\u200b\u4e66\u200b\u63a5\u4e0a\u200b\u6587\u200b\uff0c\u200b\u4e0a\u200b\u4e00\u7bc7\u200b\u7684\u200bLlama3\u200b\u8fd8\u200b\u6ca1\u6709\u200b\u5206\u4eab\u200b\u5b8c\u200b\uff0c\u200b\u63a5\u7740\u200b\u5206\u4eab\u200b\u8f93\u51fa\u6a21\u5757\u200b\uff08Output Block\uff09\u200b\u548c\u200b\u8bad\u7ec3\u200b\u3001\u200b\u63a8\u7406\u200b\u3002</p>"},{"location":"blog/%E4%BD%BF%E7%94%A8pytorch%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAllama3%E5%A4%A7%E6%A8%A1%E5%9E%8B--%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3%E8%BE%93%E5%87%BA%E6%A8%A1%E5%9D%97%E4%BB%A5%E5%8F%8A%E8%AE%AD%E7%BB%83%E6%8E%A8%E7%90%86/#output-block","title":"Output Block","text":"<p>\u200b\u6700\u7ec8\u200bDecode Block\u200b\u7684\u200b\u89e3\u7801\u5668\u200b\uff08decoder\uff09\u200b\u8f93\u51fa\u200b\u5c06\u200b\u8f93\u5165\u200b\u5230\u200bOutput Block\u200b\u4e2d\u200b\u3002\u200b\u9996\u5148\u200b\uff0c\u200b\u5b83\u200b\u88ab\u200b\u8f93\u5165\u200b\u5230\u200b RMSNorm \u200b\u4e2d\u200b\u3002\u200b\u7136\u540e\u200b\uff0c\u200b\u5b83\u200b\u5c06\u200b\u88ab\u200b\u8f93\u5165\u200b\u5230\u200b\u7ebf\u6027\u200b\u5c42\u4e2d\u200b\u7528\u4e8e\u200b\u751f\u6210\u200blogits\u3002</p> <p>\u200b\u63a5\u4e0b\u6765\u200b\uff0c\u200b\u4f1a\u200b\u53d1\u751f\u200b\u4ee5\u4e0b\u200b\u4e24\u79cd\u200b\u64cd\u4f5c\u200b\u4e4b\u4e00\u200b\u3002</p> <ul> <li> <p>\u200b\u5982\u679c\u200b\u662f\u200b\u505a\u200b\u63a8\u7406\u200b\uff0c\u200b\u5219\u200b\u8ba1\u7b97\u200b top_p \u200b\u6982\u7387\u200b\u5e76\u200b\u751f\u6210\u200b\u4e0b\u200b\u4e00\u4e2a\u200btoken\u3002\u200b\u5982\u679c\u200b\u8fbe\u5230\u200b\u6700\u5927\u200b\u751f\u6210\u200b\u957f\u5ea6\u200b\u6216\u200b\u751f\u6210\u200b\u4e86\u200b\u7ed3\u675f\u7b26\u200btoken\uff0c\u200b\u5219\u200b\u505c\u6b62\u200b\u751f\u6210\u200b\u3002</p> </li> <li> <p>\u200b\u5982\u679c\u200b\u662f\u200b\u8bad\u7ec3\u200b\uff0c\u200b\u5219\u200b\u4f7f\u7528\u200b\u76ee\u6807\u200b\u6807\u7b7e\u200b\u8ba1\u7b97\u200b\u635f\u5931\u200b\uff0c\u200b\u5e76\u200b\u91cd\u590d\u200b\u8bad\u7ec3\u200b\uff0c\u200b\u76f4\u5230\u200b\u8fbe\u5230\u200b\u6307\u5b9a\u200b\u7684\u200b\u6700\u5927\u200b\u8bad\u7ec3\u200b\u8f6e\u6570\u200b\u3002</p> </li> </ul> <p>\u200b\u901a\u8fc7\u200b\u4e00\u4e2a\u200b\u56fe\u200b\u6e05\u6670\u200b\u7684\u200b\u5c55\u793a\u200b\u4e86\u200b\u8bad\u7ec3\u200b\u548c\u200b\u63a8\u7406\u200b\u7684\u200b\u4e0d\u540c\u200b\u8fc7\u7a0b\u200b\u3002</p> <p></p> <p>\u200b\u7136\u540e\u200b\u628a\u200b\u524d\u9762\u200b\u7684\u200b\u4e09\u4e2a\u200b\u5927\u200b\u7684\u200b\u7ec4\u4ef6\u200binput Block\u3001decoder Block\u3001output Block\u200b\u7ed3\u5408\u200b\u5728\u200b\u4e00\u8d77\u200b\uff0c\u200b\u5c31\u200b\u6784\u6210\u200b\u4e86\u200bLlama3\u200b\u7684\u200b\u7ed3\u6784\u200b\u3002</p> <p>\u200b\u770b\u200b\u4e00\u4e0b\u200b\u4ee3\u7801\u200b\uff1a </p>Python<pre><code># This is the Llama 3 model. Again, the class name is maintained as Transformer to match with Meta Llama 3 model.\n\nclass Transformer(nn.Module):\n  def __init__(self, params: ModelArgs):\n    super().__init__()\n    # set all the ModelArgs in params variable\n    self.params = params\n    # Initilizate embedding class from the input block\n    self.tok_embeddings = nn.Embedding(params.vocab_size, params.dim)\n\n    # Initialize the decoder block and store it inside the ModuleList. \n    # This is because we've 4 decoder blocks in our Llama 3 model. (Official Llama 3 has 32 blocks)\n    self.layers = nn.ModuleList()\n    for layer_id in range(params.n_layers):\n      self.layers.append(TransformerBlock(args=params))\n\n    # Initilizate RMSNorm for the output block\n    self.norm = RMSNorm(params.dim, eps = params.norm_eps)\n\n    # Initilizate linear layer at the output block.\n    self.output = nn.Linear(params.dim, params.vocab_size, bias=False)\n\n  def forward(self, x, start_pos=0, targets=None):\n\n    # start_pos = token position for inference mode, inference = True for inference and False for training mode\n    # x is the batch of token_ids generated from the texts or prompts using tokenizers.\n    # x[bsz, seq_len] -&gt; h[bsz, seq_len, dim]\n    h = self.tok_embeddings(x)\n\n    # If the target is none, Inference mode is activated and set to \"True\" and \"False\" if Training mode is activated.\n    if targets is None:\n      inference = True\n    else:\n      inference = False\n\n    # The embeddings (h) will then pass though all the decoder blocks.\n    for layer in self.layers:\n      h = layer(h, start_pos, inference)\n\n    # The output from the final decoder block will feed into the RMSNorm\n    h = self.norm(h)\n\n    # After normalized, the embedding h will then feed into the Linear layer. \n    # The main task of the Linear layer is to generate logits that maps the embeddings with the vocabulary size.\n    # h[bsz, seq_len, dim] -&gt; logits[bsz, seq_len, vocab_size]\n    logits = self.output(h).float()\n    loss = None\n\n    # Inference mode is activated if the targets is not available\n    if targets is None:\n      loss = None\n    # Training mode is activated if the targets are available. And Loss will be calculated for further model training. \n    else:\n      # \u200b\u4ea4\u53c9\u200b\u71b5\u200b\u8ba1\u7b97\u200b\u635f\u5931\u200b\n      loss = F.cross_entropy(logits.view(-1, self.params.vocab_size), targets.view(-1))\n\n    return logits, loss\n\n\n### Test: Transformer (Llama Model) ###\n# You need take out the triple quotes below to perform testing\n\"\"\"\nmodel = Transformer(ModelArgs).to(ModelArgs.device)\nprint(model)\n\"\"\"\n</code></pre><p></p> <p>\u200b\u901a\u8fc7\u200b\u4e0a\u9762\u200b\u7684\u200b\u4ee3\u7801\u200b\u6784\u9020\u200b\u6210\u200b\u4e86\u200bLlama3\u200b\u7684\u200b\u7ed3\u6784\u200b\uff0c\u200b\u5982\u56fe\u6240\u793a\u200b\uff1a</p> <p></p>"},{"location":"blog/%E4%BD%BF%E7%94%A8pytorch%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAllama3%E5%A4%A7%E6%A8%A1%E5%9E%8B--%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3%E8%BE%93%E5%87%BA%E6%A8%A1%E5%9D%97%E4%BB%A5%E5%8F%8A%E8%AE%AD%E7%BB%83%E6%8E%A8%E7%90%86/#\u5982\u4f55\u8bad\u7ec3llama3\u6a21\u578b","title":"\u5982\u4f55\u200b\u8bad\u7ec3\u200bLlama3\u200b\u6a21\u578b","text":"<p>\u200b\u548c\u200b\u4e0a\u9762\u200bOutput Block\u200b\u4e2d\u200b\u7684\u200b\u8bad\u7ec3\u200b\u56fe\u793a\u200b\u6d41\u7a0b\u200b\u4e00\u6837\u200b\uff0c\u200b\u76f4\u63a5\u200b\u770b\u200b\u4ee3\u7801\u200b\u66f4\u52a0\u200b\u6e05\u6670\u200b\uff1a</p> Python<pre><code>## Step 4: Train Llama 3 Model:\n\n# Create a dataset by encoding the entire tiny_shakespeare data token_ids list using the tokenizer's encode function that we've built at the input block section\ndataset = torch.tensor(encode(data), dtype=torch.int).to(ModelArgs.device)\nprint(f\"dataset-shape: {dataset.shape}\")\n\n# Define function to generate batches from the given dataset\ndef get_dataset_batch(data, split, args:ModelArgs):\n  seq_len = args.max_seq_len\n  batch_size = args.max_batch_size\n  device = args.device\n\n  train = data[:int(0.8 * len(data))]\n  val = data[int(0.8 * len(data)): int(0.9 * len(data))]\n  test = data[int(0.9 * len(data)):]\n\n  batch_data = train\n  if split == \"val\":\n    batch_data = val\n\n  if split == \"test\":\n    batch_data = test\n\n  # Picking random starting points from the dataset to give random samples for training, validation and testing.\n\n  ix = torch.randint(0, len(batch_data) - seq_len - 3, (batch_size,)).to(device)\n  x = torch.stack([torch.cat([token_bos, batch_data[i:i+seq_len-1]]) for i in ix]).long().to(device)\n  y = torch.stack([torch.cat([batch_data[i+1:i+seq_len], token_eos]) for i in ix]).long().to(device)\n\n  return x,y\n\n### Test: get_dataset function ###\n\"\"\"\nxs, ys = get_dataset_batch(dataset, split=\"train\", args=ModelArgs)\nprint([(decode(xs[i].tolist()), decode(ys[i].tolist())) for i in range(len(xs))])\n\"\"\"\n\n# Define a evaluate loss function to calculate and store training and validation loss for logging and plotting\n@torch.no_grad()\ndef evaluate_loss(model, args:ModelArgs):\n  out = {}\n  model.eval()\n\n  for split in [\"train\", \"val\"]:\n    losses = []\n    for _ in range(10):      \n      xb, yb = get_dataset_batch(dataset, split, args)\n      _, loss = model(x=xb, targets=yb)\n      losses.append(loss.item())\n    out[split] = np.mean(losses)\n\n  model.train()\n  return out\n\n# Define a training function to perform model training\ndef train(model, optimizer, args:ModelArgs):\n    epochs = args.epochs\n    log_interval = args.log_interval\n    device = args.device\n    losses = []   \n    start_time = time.time()\n\n    for epoch in range(epochs):\n        optimizer.zero_grad()\n\n        xs, ys = get_dataset_batch(dataset, 'train', args)\n        xs = xs.to(device)\n        ys = ys.to(device)\n        logits, loss = model(x=xs, targets=ys)\n        loss.backward()\n        optimizer.step()\n\n        if epoch % log_interval == 0:\n            batch_time = time.time() - start_time\n            x = evaluate_loss(model, args)\n            losses += [x]            \n            print(f\"Epoch {epoch} | val loss {x['val']:.3f} | Time {batch_time:.3f}\")\n            start_time = time.time()\n\n    # Print the final validation loss\n    print(\"validation loss: \", losses[-1]['val'])\n    # Display the interval losses in plot \n    return pd.DataFrame(losses).plot()\n</code></pre> <p>\u200b\u4e0a\u9762\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u8bad\u7ec3\u200b\u51fd\u6570\u200b\u3002\u200b\u8ba9\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b\u4ee5\u4e0b\u200b\u4ee3\u7801\u200b\u5757\u200b\u5f00\u59cb\u200b\u8bad\u7ec3\u200b\uff0c\u200b\u5e76\u200b\u5728\u200b\u8bad\u7ec3\u200b\u5b8c\u6210\u200b\u540e\u200b\u5728\u200b\u56fe\u200b\u4e2d\u200b\u89c2\u5bdf\u200b\u8bad\u7ec3\u200b\u7ed3\u679c\u200b\u3002</p> Python<pre><code>## Start training our Llama 3 model\nmodel = Transformer(ModelArgs).to(ModelArgs.device)\noptimizer = torch.optim.Adam(model.parameters())\n\ntrain(model, optimizer, ModelArgs)\n</code></pre> <p></p> <p>\u200b\u4e0a\u9762\u200b\u7684\u200b\u56fe\u50cf\u200b\u663e\u793a\u200b\u4e86\u200b\u8bad\u7ec3\u200b\u8fc7\u7a0b\u200b\u548c\u200b\u635f\u5931\u200b\u3002\u200b\u8bad\u7ec3\u200b\u5df2\u7ecf\u200b\u8fdb\u884c\u200b\u4e86\u200b 2500 \u200b\u4e2a\u200b epoch\u3002</p> <p>\u200b\u4f7f\u7528\u200b\u5e26\u6709\u200b\u9ed8\u8ba4\u200b GPU \u200b\u548c\u200b RAM \u200b\u8bbe\u7f6e\u200b\u7684\u200b Google Colab \u200b\u5b8c\u6210\u200b\u8bad\u7ec3\u200b\u8fc7\u7a0b\u200b\u5927\u7ea6\u200b\u9700\u8981\u200b 10 \u200b\u5206\u949f\u200b\uff0c\u200b\u8fd9\u200b\u975e\u5e38\u200b\u5feb\u200b\u3002</p> <p>\u200b\u5728\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b epoch \u200b\u7684\u200b\u9a8c\u8bc1\u200b\u635f\u5931\u200b\u4e3a\u200b 2.19\uff0c\u200b\u8003\u8651\u200b\u5230\u200b\u6211\u4eec\u200b\u6b63\u5728\u200b\u4f7f\u7528\u200b\u7684\u200b\u8bad\u7ec3\u200b\u6570\u636e\u91cf\u200b\u548c\u200b epoch \u200b\u6570\u91cf\u200b\uff0c\u200b\u8fd9\u200b\u88ab\u200b\u8ba4\u4e3a\u200b\u662f\u200b\u53ef\u4ee5\u200b\u63a5\u53d7\u200b\u7684\u200b\u3002\u200b\u4e3a\u4e86\u200b\u663e\u8457\u200b\u964d\u4f4e\u200b\u635f\u5931\u200b\uff0c\u200b\u9700\u8981\u200b\u589e\u52a0\u200b\u8bad\u7ec3\u200b\u6570\u636e\u200b\u7684\u200b\u5927\u5c0f\u200b\u3001\u200b\u589e\u52a0\u200b epoch \u200b\u7684\u200b\u6570\u91cf\u200b\u4ee5\u53ca\u200b\u63d0\u9ad8\u200b GPU \u200b\u6216\u200b\u5904\u7406\u200b\u80fd\u529b\u200b\u3002</p> <p>\u200b\u5b8c\u6210\u200b\u4e86\u200b\u6a21\u578b\u200b\u7684\u200b\u8bad\u7ec3\u200b\u540e\u200b\uff0c\u200b\u4e3a\u4e86\u200b\u9a8c\u8bc1\u200b\u4e00\u4e0b\u200b\u6548\u679c\u200b\uff0c\u200b\u5c31\u200b\u6765\u5230\u200b\u4e86\u200b\u63a8\u7406\u200b\u8fc7\u7a0b\u200b\u3002\u200b\u901a\u8fc7\u200b\u63a8\u7406\u200b\uff0c\u200b\u770b\u770b\u200b\u5728\u200b\u7ed9\u5b9a\u200b\u65b0\u200b\u7684\u200b\u8f93\u5165\u200b\u63d0\u793a\u200b\u65f6\u200b\uff0c\u200b\u6a21\u578b\u200b\u751f\u6210\u200b\u8f93\u51fa\u200b\u6587\u672c\u200b\u7684\u200b\u6548\u679c\u200b\u5982\u4f55\u200b\u3002</p>"},{"location":"blog/%E4%BD%BF%E7%94%A8pytorch%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAllama3%E5%A4%A7%E6%A8%A1%E5%9E%8B--%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3%E8%BE%93%E5%87%BA%E6%A8%A1%E5%9D%97%E4%BB%A5%E5%8F%8A%E8%AE%AD%E7%BB%83%E6%8E%A8%E7%90%86/#\u5982\u4f55\u63a8\u7406llama3\u6a21\u578b","title":"\u5982\u4f55\u200b\u63a8\u7406\u200bLlama3\u200b\u6a21\u578b","text":"<p>\u200b\u4e0b\u9762\u200b\u5b9a\u4e49\u200b\u4e86\u200bgenerate\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u5b83\u4f1a\u200b\u6839\u636e\u200b\u8f93\u5165\u200b\u7684\u200bprompts\uff0c\u200b\u5f97\u5230\u200boutput_tokens\u200b\u548c\u200boutput_texts\u3002</p> Python<pre><code>## Step 5: Inference Llama 3 Model:\n# This function generates text sequences based on provided prompts using the LLama 3 model we've built and trained.\n\ndef generate(model, prompts: str, params: ModelArgs, max_gen_len: int=500, temperature: float = 0.6, top_p: float = 0.9):\n\n    # prompt_tokens: List of user input texts or prompts\n    # max_gen_len: Maximum length of the generated text sequence.\n    # temperature: Temperature value for controlling randomness in sampling. Defaults to 0.6.\n    # top_p: Top-p probability threshold for sampling prob output from the logits. Defaults to 0.9.\n    # prompt_tokens = [0]\n    bsz = 1  #For inferencing, in general user just input one prompt which we'll take it as 1-batch\n    prompt_tokens = token_bos.tolist() + encode(prompts)\n    assert len(prompt_tokens) &lt;= params.max_seq_len, \"prompt token length should be small than max_seq_len\"\n    total_len = min(len(prompt_tokens)+max_gen_len, params.max_seq_len)   \n\n    # this tokens matrix is to store the input prompts and all the output that is generated by model.\n    # later we'll use the tokenizers decode function to decode this token to view results in text format\n    tokens = torch.full((bsz,total_len), fill_value=token_pad.item(), dtype=torch.long, device=params.device)\n\n    # fill in the prompt tokens into the token matrix\n    tokens[:,:len(prompt_tokens)] = torch.tensor(prompt_tokens, dtype=torch.long, device=params.device)\n\n    #create a prompt_mask_token for later use to identify if the token is a prompt token or a padding token\n    # True if it is a prompt token, False if it is a padding token\n    input_text_mask = tokens != token_pad.item()\n\n    #now we can start inferencing using one token at a time from the prompt_tokens list starting with the first position.\n    prev_pos = 0\n    for cur_pos in range(1, total_len):\n      with torch.no_grad():\n        logits, _ = model(x=tokens[:,prev_pos:cur_pos], start_pos=prev_pos)\n      if temperature &gt; 0:      \n        probs = torch.softmax(logits[:, -1]/temperature, dim=-1)\n        next_token = sample_top_p(probs, top_p)        \n      else:\n        next_token = torch.argmax(logits[:, -1], dim=-1)        \n\n      next_token = next_token.reshape(-1)\n\n      # only replace the token if it's a padding token\n      next_token = torch.where(input_text_mask[:, cur_pos], tokens[:, cur_pos], next_token)\n      tokens[:, cur_pos] = next_token\n\n      prev_pos = cur_pos\n      if tokens[:,cur_pos]==token_pad.item() and next_token == token_eos.item():\n        break\n\n    output_tokens, output_texts = [], []    \n\n    for i, toks in enumerate(tokens.tolist()):\n      # eos_idx = toks.index(token_eos.item())\n      if token_eos.item() in toks:\n        eos_idx = toks.index(token_eos.item())\n        toks = toks[:eos_idx]\n\n      output_tokens.append(toks)\n      output_texts.append(decode(toks))\n    return output_tokens, output_texts\n\n# Perform top-p (nucleus) sampling on a probability distribution.\n# probs (torch.Tensor): Probability distribution tensor derived from the logits.\n# p: Probability threshold for top-p sampling.\n# According to the paper, Top-p sampling selects the smallest set of tokens whose cumulative probability mass exceeds the threshold p. \n# The distribution is renormalized based on the selected tokens.\ndef sample_top_p(probs, p):\n    probs_sort, prob_idx = torch.sort(probs, dim=-1, descending=True)\n    probs_sum = torch.cumsum(probs_sort, dim=-1)\n    mask = probs_sum - probs_sort &gt; p\n    probs_sort[mask] = 0.0\n    probs_sort.div_(probs_sort.sum(dim=-1, keepdim=True))\n    next_token = torch.multinomial(probs_sort, num_samples=1)\n    next_token = torch.gather(prob_idx, -1, next_token)    \n    # Sampled token indices from the vocabular is returned \n    return next_token\n</code></pre> <p>\u200b\u7136\u540e\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u5bf9\u200b\u63d0\u793a\u200b\u8fdb\u884c\u200b\u63a8\u7406\u200b\u5e76\u200b\u68c0\u67e5\u200b\u751f\u6210\u200b\u7684\u200b\u8f93\u51fa\u200b\u3002</p> Python<pre><code>## Perform the inferencing on user input prompts\nprompts = \"Consider you what services he has done\"\noutput_tokens, output_texts = generate(model, prompts, ModelArgs)\noutput_texts = output_texts[0].replace(\"&lt;|begin_of_text|&gt;\", \"\")\nprint(output_texts)\n\n## Output ##\nConsider you what services he has done.\n\nCLARENCE:\nWhy, I say, let me see the poor of your father,\nAnd all the shepherd's anchor in the cause\nOf your honour in the people of the tribunes\nOf the world there is a horseman's face,\nThat worthy stronger in the\n</code></pre> <p>\u200b\u73b0\u5728\u200b\u8fd9\u4e2a\u200b\u6a21\u578b\u200b\u5df2\u7ecf\u200b\u53ef\u4ee5\u200b\u6839\u636e\u200b\u63d0\u793a\u200b\uff0c\u200b\u8fd4\u56de\u200b\u548c\u200b\u8bad\u7ec3\u6837\u672c\u200b\u5b66\u4e60\u200b\u5230\u200b\u7684\u200b\u76f8\u5173\u200b\u8f93\u51fa\u200b\u3002\u200b\u5982\u679c\u200b\u91c7\u7528\u200b\u66f4\u200b\u591a\u200b\u7684\u200b\u8bad\u7ec3\u200b\u8f6e\u6570\u200b\u3001\u200b\u6709\u200b\u4e86\u200b\u66f4\u200b\u5927\u200b\u7684\u200b\u8bad\u7ec3\u200b\u6570\u636e\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u5b9e\u73b0\u200b\u66f4\u200b\u9ad8\u200b\u7684\u200b\u51c6\u786e\u6027\u200b\u3002</p> <p>\u200b\u5728\u200b\u63a8\u7406\u200b\u90e8\u7f72\u200b\u5f00\u6e90\u200b\u5927\u200b\u6a21\u578b\u200b\u65f6\u200b\uff0c\u200b\u901a\u5e38\u200b\u4f1a\u200b\u91c7\u7528\u200b\u4e00\u4e9b\u200b\u5f00\u6e90\u200b\u6846\u67b6\u200b\uff0c\u200b\u6bd4\u5982\u200bvllm\u3001lmdeploy\u3001sglang\u3001tensorRT-LLM\u200b\u7b49\u200b\u6846\u67b6\u200b\u3002\u200b\u8fd9\u4e9b\u200b\u6846\u67b6\u200b\u7684\u200b\u63a8\u7406\u200b\u539f\u7406\u200b\u548c\u200b\u4e0a\u9762\u200b\u7684\u200b\u4ee3\u7801\u200b\u4e00\u6837\u200b\u7684\u200b\uff0c\u200b\u4f46\u200b\u4ed6\u4eec\u200b\u7ed3\u5408\u200b\u4e86\u200b\u5de5\u7a0b\u200b\u5b9e\u8df5\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u4f18\u5316\u200b\u7b97\u6cd5\u200b\uff0c\u200b\u6bd4\u5982\u200b\u4f18\u5316\u200b\u4e86\u200bkv-cache\uff0c\u200b\u540c\u65f6\u200b\u91c7\u7528\u200b\u4e86\u200btp\u3001pp\u200b\u7b49\u200b\u5bf9\u6a21\u578b\u200b\u8fdb\u884c\u200b\u5207\u5206\u200b\uff0c\u200b\u90e8\u7f72\u200b\u5230\u200b\u591a\u5361\u200b\u6216\u8005\u200b\u591a\u200b\u673a\u4e0a\u200b\u3002\u200b\u91c7\u7528\u200b\u8fd9\u4e9b\u200b\u6846\u67b6\u200b\u4f1a\u200b\u63a8\u7406\u200b\u6548\u7387\u200b\u4f1a\u200b\u66f4\u200b\u9ad8\u200b\u3002</p> <p>\u200b\u524d\u9762\u200b\u4ecb\u7ecd\u200b\u7684\u200b\u7ec4\u4ef6\u200b\u5b9e\u73b0\u200b\u4ee3\u7801\u200b\u7bc7\u5e45\u200b\u8fc7\u5927\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u8bbf\u95ee\u200bbuild_llama3_from_scratch\u3002</p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>\u200b\u4f7f\u7528\u200bPytorch\u200b\u4ece\u200b\u96f6\u200b\u6784\u5efa\u200bLlama3\u200b\u5927\u200b\u6a21\u578b\u200b--\u200b\u6df1\u5165\u200b\u4e86\u89e3\u200bLLaMa3\u200b\u6a21\u578b\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u7ec4\u4ef6\u200b</li> <li>cista\u200b\u96f6\u200b\u62f7\u8d1d\u200b\u53cd\u200b\u5e8f\u5217\u5316\u200b\u5e93\u200b\u5b9e\u73b0\u200b\u4e4b\u200bswiss_table\u200b\u54c8\u5e0c\u200b\u8868\u200b\u5b9e\u73b0\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/%E4%BD%BF%E7%94%A8pytorch%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAllama3%E5%A4%A7%E6%A8%A1%E5%9E%8B--%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81/","title":"\u4f7f\u7528\u200bPytorch\u200b\u4ece\u200b\u96f6\u200b\u6784\u5efa\u200bLlama3\u200b\u5927\u200b\u6a21\u578b\u200b--\u200b\u7ec4\u4ef6\u200b\u5b9e\u73b0\u200b\u4ee3\u7801","text":""},{"location":"blog/%E4%BD%BF%E7%94%A8pytorch%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAllama3%E5%A4%A7%E6%A8%A1%E5%9E%8B--%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81/#\u5982\u4f55\u5b9e\u73b0input-block","title":"\u5982\u4f55\u200b\u5b9e\u73b0\u200bInput Block","text":"Python<pre><code># Import necessary libraries\nimport torch\nfrom torch import nn\nfrom torch.nn import functional as F\n\nimport math\nimport numpy as np\nimport time\nfrom dataclasses import dataclass\nfrom typing import Optional, Tuple, List\nimport pandas as pd\nfrom matplotlib import pyplot as plt\n\n### Step 1: Input Block ###\n\n# Using Tiny Shakespeare dataset for character-level tokenizer. Some part of the following character-level tokenizer is referenced from Andrej karpathy's GitHub (https://github.com/karpathy/nanoGPT/blob/master/data/shakespeare_char/prepare.py) which I found is explained very well.\n# Load tiny_shakespeare data file (https://github.com/tamangmilan/llama3/blob/main/tiny_shakespeare.txt)\n\ndevice: str = 'cuda' if torch.cuda.is_available() else 'cpu'   # Assign device to cuda or cpu based on availability\n\n# Load tiny_shakespeare data file.\nwith open('tiny_shakespeare.txt', 'r') as f:\n  data = f.read()\n\n# Prepare vocabulary by taking all the unique characters from the tiny_shakespeare data\nvocab = sorted(list(set(data)))\n\n# Training Llama 3 model requires addtional tokens such as &lt;|begin_of_text|&gt;, &lt;|end_of_text|&gt; and &lt;|pad_id|&gt;, we'll add them into vocabulary\nvocab.extend(['&lt;|begin_of_text|&gt;','&lt;|end_of_text|&gt;','&lt;|pad_id|&gt;'])\nvocab_size = len(vocab)\n\n# Create a mapping between characters with corresponding integer indexes in vocabulary.\n# This is important to build tokenizers encode and decode functions.\nitos = {i:ch for i, ch in enumerate(vocab)}\nstoi = {ch:i for i, ch in enumerate(vocab)}\n\n# Tokenizers encode function: take a string, output a list of integers\ndef encode(s):\n  return [stoi[ch] for ch in s]\n\n# Tokenizers decode function: take a list of integers, output a string\ndef decode(l):\n  return ''.join(itos[i] for i in l)\n\n# Define tensor token variable to be used later during model training\ntoken_bos = torch.tensor([stoi['&lt;|begin_of_text|&gt;']], dtype=torch.int, device=device)\ntoken_eos = torch.tensor([stoi['&lt;|end_of_text|&gt;']], dtype=torch.int, device=device)\ntoken_pad = torch.tensor([stoi['&lt;|pad_id|&gt;']], dtype=torch.int, device=device)\n\nprompts = \"Hello World\"\nencoded_tokens = encode(prompts)\ndecoded_text = decode(encoded_tokens)\n\n### Test: Input Block Code ###\n# You need take out the triple quotes below to perform testing\n\"\"\"\nprint(f\"Lenth of shakespeare in character: {len(data)}\")\nprint(f\"The vocabulary looks like this: {''.join(vocab)}\\n\")\nprint(f\"Vocab size: {vocab_size}\")\nprint(f\"encoded_tokens: {encoded_tokens}\")\nprint(f\"decoded_text: {decoded_text}\")\n\"\"\"\n### Test Results: ###\n\"\"\"\nLenth of shakespeare in character: 1115394\nThe vocabulary looks like this: \n !$&amp;',-.3:;?ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&lt;|begin_of_text|&gt;&lt;|end_of_text|&gt;&lt;|pad_id|&gt;\n\nVocab size: 68\nencoded_tokens: [20, 43, 50, 50, 53, 1, 35, 53, 56, 50, 42]\ndecoded_text: Hello World\n\"\"\"\n</code></pre>"},{"location":"blog/%E4%BD%BF%E7%94%A8pytorch%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAllama3%E5%A4%A7%E6%A8%A1%E5%9E%8B--%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81/#\u5982\u4f55\u5b9e\u73b0rms-norm","title":"\u5982\u4f55\u200b\u5b9e\u73b0\u200bRMS Norm","text":"Python<pre><code># Step2: The Decoder Block\n# Note: Since the Llama 3 model is developed by Meta, so to be in sync with their codebase and for future compatibility,\n# I will use most of the code from Meta GitHub with some necessary changes required to achieve our goal.\n\n# Define parameters dataclass: we'll use these parameters during model building, training and inference.\n# Note: Since we want to see the results of training and inferencing faster rather than focusing on high accuracy, we're taking lower values for most of the parameters which are set higher in the Llama 3 model.\n\n@dataclass\nclass ModelArgs:\n    dim: int = 512              # embedding dimension\n    n_layers: int = 8           # number of model decoder blocks\n    n_heads: int = 8            # number of heads for queries embedding\n    n_kv_heads: int = 4         # number of heads for keys and values embedding\n    vocab_size: int = len(vocab) # Length of vocabulary\n    multiple_of: int = 256        # Require to calculate dim of feedfoward network\n    ffn_dim_multiplier: Optional[float] = None  # Require to calculate dim of feedfoward network\n    norm_eps: float = 1e-5                       # Default Epsilon value set for the RMSNorm calculation\n    rope_theta: float = 10000.0   # Default theta value for the RePE calculation\n\n    max_batch_size: int = 10     # Max batch size\n    max_seq_len: int = 256         # Max sequence length\n\n    epochs: int = 2500             # Total number of training iteration\n    log_interval: int = 10        # Number of interval to print the logs and loss values   \n    device: str = 'cuda' if torch.cuda.is_available() else 'cpu'   # Assign device to cuda or cpu based on availability \n</code></pre>"},{"location":"blog/%E4%BD%BF%E7%94%A8pytorch%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAllama3%E5%A4%A7%E6%A8%A1%E5%9E%8B--%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81/#rope\u7684\u5b9e\u73b0","title":"RoPE\u200b\u7684\u200b\u5b9e\u73b0","text":"Python<pre><code>## Step2b: The RoPE\ndef precompute_freqs_cis(dim:int, seq_len: int, theta: float=10000.0):\n  # Computing Theta value for each dim pair which is dim/2\n  device = ModelArgs.device\n  freqs = 1.0 / (theta ** (torch.arange(0, dim, 2,device=device)[:(dim//2)].float()/dim))\n\n  # Computing range of positions(m) in the sequence\n  t = torch.arange(seq_len, dtype=torch.float32, device=device)\n\n  # freqs gives all the Theta value range for all the position of tokens in the sequence\n  freqs = torch.outer(t, freqs).to(device)\n\n  # This is the rotation matrix which needs to be converted to Polar form in order to perform rotation to the embedding\n  freqs_cis = torch.polar(torch.ones_like(freqs).to(device), freqs).to(device)\n  return freqs_cis\n\ndef reshape_for_broadcast(freqs_cis, x):\n  ndim = x.ndim\n  assert 0&lt;=1&lt;ndim\n  assert freqs_cis.shape == (x.shape[1],x.shape[-1]), \"the last two dimension of freqs_cis, x must match\"\n  shape = [d if i==1 or i==ndim-1 else 1 for i,d in enumerate(x.shape)]\n  return freqs_cis.view(*shape)\n\ndef apply_rotary_emb(xq: torch.Tensor, xk: torch.Tensor, freqs_cis: torch.Tensor)-&gt;Tuple[torch.Tensor, torch.Tensor]:\n  device = ModelArgs.device\n  # Applying rotary positional encoding to both query and key embedding together\n  # First: The last dimension of xq and xk embedding needs to be reshaped to make it a pair. As rotation matrix is applied to each pair of dim.\n  # Next: convert both xq and xk to complex number as the rotation matrix is only applicable to complex number\n  xq_ = torch.view_as_complex(xq.float().reshape(*xq.shape[:-1], -1, 2)).to(device)    #xq_:[bsz, seq_len, n_heads, head_dim/2]\n  xk_ = torch.view_as_complex(xk.float().reshape(*xk.shape[:-1], -1, 2)).to(device)    #xk_:[bsz, seq_len, n_heads, head_dim/2]\n\n  # The rotation matrix(freqs_cis) dimensions across seq_len(dim=1) and head_dim(dim=3) should match with the embedding\n  # Also, the shape freqs_cis should be the same with xq and xk, hence change the shape of freqs_cis:[seq_len,head_dim] -&gt; freqs_cis:[1,seq_len,1,head_dim]\n  freqs_cis = reshape_for_broadcast(freqs_cis, xq_)\n\n  #Finally, perform rotation operation by multiplying with freqs_cis.\n  #After the rotation is completed, convert both xq_out and xk_out back to real number and return\n  xq_out = torch.view_as_real(xq_ * freqs_cis).flatten(3).to(device) #xq_out:[bsz, seq_len, n_heads, head_dim]\n  xk_out = torch.view_as_real(xk_ * freqs_cis).flatten(3).to(device) #xk_out:[bsz, seq_len, n_heads, head_dim]\n  return xq_out.type_as(xq), xk_out.type_as(xk)\n\n### Test: RoPE Code ###\n# Note: x_norm is calculated during RMSNorm and is being used for testing here.\n# You need take out the triple quotes below to perform testing\n\"\"\"\nhead_dim = ModelArgs.dim//ModelArgs.n_heads\nwq = nn.Linear(ModelArgs.dim, ModelArgs.n_heads * head_dim, bias=False, device=device)\nwk = nn.Linear(ModelArgs.dim, ModelArgs.n_kv_heads * head_dim, bias=False, device=device)\nxq = wq(x_norm)\nxk = wk(x_norm)\nprint(f\"xq.shape: {xq.shape}\")\nprint(f\"xk.shape: {xk.shape}\")\n\nxq = xq.view(xq.shape[0],xq.shape[1],ModelArgs.n_heads, head_dim)\nxk = xk.view(xk.shape[0],xk.shape[1],ModelArgs.n_kv_heads, head_dim)\nprint(f\"xq.re-shape: {xq.shape}\")\nprint(f\"xk.re-shape: {xk.shape}\")\n\nfreqs_cis = precompute_freqs_cis(dim=head_dim, seq_len=ModelArgs.max_seq_len)\nprint(f\"freqs_cis.shape: {freqs_cis.shape}\")\n\nxq_rotate, xk_rotate = apply_rotary_emb(xq, xk, freqs_cis)\nprint(f\"xq_rotate.shape: {xq_rotate.shape}\")\nprint(f\"xk_rotate.shape: {xk_rotate.shape}\")\n\"\"\"\n### Test Results: ###\n\"\"\"\nxq.shape: torch.Size([10, 256, 512])\nxk.shape: torch.Size([10, 256, 256])\nxq.re-shape: torch.Size([10, 256, 8, 64])\nxk.re-shape: torch.Size([10, 256, 4, 64])\nfreqs_cis.shape: torch.Size([256, 32])\nxq_rotate.shape: torch.Size([10, 256, 8, 64])\nxk_rotate.shape: torch.Size([10, 256, 4, 64])\n\"\"\"\n</code></pre>"},{"location":"blog/%E4%BD%BF%E7%94%A8pytorch%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAllama3%E5%A4%A7%E6%A8%A1%E5%9E%8B--%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81/#\u5206\u7ec4\u6ce8\u610f\u529b\u673a\u5236\u5b9e\u73b0","title":"\u5206\u7ec4\u200b\u6ce8\u610f\u529b\u200b\u673a\u5236\u200b\u5b9e\u73b0","text":"Python<pre><code>## The Attention Block [Step2c: The KV Cache; Step2d: Group Query Attention]\n## As mentioned before, the naming convention follows original the meta's LLama3 GitHub\n\nclass Attention(nn.Module):\n  def __init__(self, args: ModelArgs):\n    super().__init__()\n    self.args = args\n    # Embedding dimension\n    self.dim = args.dim\n    # Number of heads assigned to Query\n    self.n_heads = args.n_heads\n    # Number of heads assigned to Key and values. If \"None\", the number will be same as Query.\n    self.n_kv_heads = args.n_heads if args.n_kv_heads is None else args.n_kv_heads\n    # Dimension of each head relative to model dimension\n    self.head_dim = args.dim // args.n_heads\n    # Number of repetition in order to make time Key, Value heads to match Query heads number\n    self.n_rep = args.n_heads // args.n_kv_heads\n\n    # Weight initialize for Keys, Querys, Values and Oupt. Notice that the out_feature value of weight for q and kv are based on it's heads\n    self.wq = nn.Linear(self.dim, self.n_heads * self.head_dim, bias=False, device=device)\n    self.wk = nn.Linear(self.dim, self.n_kv_heads * self.head_dim, bias=False, device=device)\n    self.wv = nn.Linear(self.dim, self.n_kv_heads * self.head_dim, bias=False, device=device)\n    self.wo = nn.Linear(self.n_heads * self.head_dim, self.dim, bias=False, device=device)\n\n    # Initialize caches to store Key, Values at start. (KV Cache Implementation)\n    self.cache_k = torch.zeros((args.max_batch_size, args.max_seq_len, self.n_kv_heads, self.head_dim), device=args.device)\n    self.cache_v = torch.zeros((args.max_batch_size, args.max_seq_len, self.n_kv_heads, self.head_dim), device=args.device)\n\n  def forward(self, x: torch.Tensor, start_pos, inference):\n    # Shape of the input embedding: [bsz,seq_len,dim]\n    bsz, seq_len, _ = x.shape\n    # Mask will be used during 'Training' and is not required for 'inference' due to the use of KV cache.\n    mask = None\n\n    xq = self.wq(x)  #x[bsz,seq_len,dim]*wq[dim,n_heads * head_dim] -&gt; q[bsz,seq_len,n_heads * head_dim]\n    xk = self.wk(x)  #x[bsz,seq_len,dim]*wq[dim,n_kv_heads * head_dim] -&gt; k[bsz,seq_len,n_kv_heads * head_dim]\n    xv = self.wv(x)  #x[bsz,seq_len,dim]*wq[dim,n_kv_heads * head_dim] -&gt; v[bsz,seq_len,n_kv_heads * head_dim]\n\n    # Reshaping Querys, Keys and Values by their number of heads. (Group Query Attention Implementation)\n    xq = xq.view(bsz, seq_len, self.n_heads, self.head_dim)      #xq[bsz,seq_len,n_heads, head_dim]\n    xk = xk.view(bsz, seq_len, self.n_kv_heads, self.head_dim)   #xk[bsz,seq_len,n_kv_heads, head_dim]\n    xv = xv.view(bsz, seq_len, self.n_kv_heads, self.head_dim)   #xv[bsz,seq_len,n_kv_heads, head_dim]\n\n    # Model - Inference Mode: kv-cache is enabled at inference mode only.\n    if inference:\n      # Compute rotation matrix for each position in the sequence\n      freqs_cis = precompute_freqs_cis(dim=self.head_dim, seq_len=self.args.max_seq_len * 2)\n      # During inferencing, we should only take the rotation matrix range from the current position of the tokens.\n      freqs_cis = freqs_cis[start_pos : start_pos + seq_len]\n      # Apply RoPE to Queries and Keys embeddings\n      xq, xk = apply_rotary_emb(xq, xk, freqs_cis)\n\n      self.cache_k = self.cache_k.to(xq)\n      self.cache_v = self.cache_v.to(xq)\n      # Store Keys and Values token embedding into their respective cache [KV Cache Implementation]\n      self.cache_k[:bsz, start_pos:start_pos + seq_len] = xk\n      self.cache_v[:bsz, start_pos:start_pos + seq_len] = xv\n\n      # Assign all the previous tokens embeddings upto current tokens position to Keys and Values variable for Attention Calculation\n      keys = self.cache_k[:bsz, :start_pos + seq_len]\n      values = self.cache_v[:bsz, :start_pos + seq_len]\n\n      # At this point, they Keys and Values shape aren't same with Queries Embedding which has to be in order to computer attention score\n      # Use repeat_kv function to make Keys,Values shape same as queries shape\n      keys = repeat_kv(keys, self.n_rep)      #keys[bsz,seq_len,n_heads,head_dim]\n      values = repeat_kv(values, self.n_rep)  #values[bsz,seq_len,n_heads,head_dim]\n\n    # Mode - Training mode: KV-Cache not implemented\n    else:\n      # Compute rotation matrix and apply RoPE to queries and keys for for training.\n      freqs_cis = precompute_freqs_cis(dim=self.head_dim, seq_len=self.args.max_seq_len)\n\n      #xq[bsz,seq_len,n_heads, head_dim], xk[bsz,seq_len,n_heads, head_dim]\n      xq, xk = apply_rotary_emb(xq, xk, freqs_cis)\n\n      # Use repeat_kv function to make Keys,Values shape same as the queries shape\n      #keys[bsz,seq_len,n_heads,head_dim], #values[bsz,seq_len,n_heads,head_dim]\n      keys = repeat_kv(xk, self.n_rep)\n      values = repeat_kv(xv, self.n_rep)\n\n      # For training mode, we'll compute mask and apply to the attention score later\n      mask = torch.full((seq_len, seq_len),float(\"-inf\"),device=self.args.device)\n      mask = torch.triu(mask, diagonal=1).to(self.args.device)\n\n    # To compute attention, we'll need to perform a transpose operation to reshape all queries, keys and values bring heads at dim 1 and seq at dim 2\n    xq = xq.transpose(1,2)                  #xq[bsz,n_heads,seq_len,head_dim]\n    keys = keys.transpose(1,2)              #keys[bsz,n_heads,seq_len,head_dim]\n    values = values.transpose(1,2)          #values[bsz,n_heads,seq_len,head_dim]\n\n    # Computing attention score\n    scores = torch.matmul(xq, keys.transpose(2,3)).to(self.args.device)/math.sqrt(self.head_dim)\n    if mask is not None:\n      scores = scores + mask\n\n    # Apply softmax to the attention score\n    scores = F.softmax(scores.float(), dim=-1).type_as(xq)\n    # Matrix multiplication of attention score with the values\n    output = torch.matmul(scores, values).to(self.args.device)\n\n    # We get the contextual embedding for each head\n    # All heads need to be reshaped back and combined to give a single single contextual attention output\n    # Shape change: output[bsz,n_heads,seq_len,head_dim] -&gt; output[bsz,seq_len, n_heads,head_dim] -&gt; output[bsz,seq_len, n_heads * head_dim]\n    output = output.transpose(1,2).contiguous().view(bsz, seq_len, -1)\n\n    # shape: output [bsz,seq_len,dim]\n    return self.wo(output)\n\n# If the number of keys/values heads is less than query heads, this function expands the key/values embeddings with the required number of repetition\ndef repeat_kv(x:torch.Tensor, n_rep: int)-&gt; torch.Tensor:\n  bsz, seq_len, n_kv_heads, head_dim = x.shape\n  if n_rep == 1:\n    return x\n  return (\n      x[:,:,:,None,:]\n      .expand(bsz,seq_len,n_kv_heads,n_rep, head_dim)\n      .reshape(bsz,seq_len,n_kv_heads * n_rep, head_dim)\n  )\n\n\n### Test: Repeat_kv function ###\n# note: xk, x_norm is already calculated during RoPE, RMSNorm testing and is being used for testing here.\n# You need take out the triple quotes below to perform testing\n\"\"\"\nn_rep = ModelArgs.n_heads // ModelArgs.n_kv_heads\nkeys = repeat_kv(xk, n_rep)\nprint(f\"xk.shape: {xk.shape}\")\nprint(f\"keys.shape: {keys.shape}\")\n\n## Test: Attention function\n# You need take out the triple quotes below to perform testing\n\nattention = Attention(ModelArgs)\nx_out = attention(x_norm,start_pos=0, inference=False)\nprint(f\"x_out.shape: {x_out.shape}\")\n\"\"\"\n### Test Results: ###\n\"\"\"\nxk.shape: torch.Size([10, 256, 4, 64])\nkeys.shape: torch.Size([10, 256, 8, 64])\nx_out.shape: torch.Size([10, 256, 512])\n\"\"\"\n</code></pre>"},{"location":"blog/%E4%BD%BF%E7%94%A8pytorch%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAllama3%E5%A4%A7%E6%A8%A1%E5%9E%8B--%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81/#feedward-\u5b9e\u73b0","title":"FeedWard \u200b\u5b9e\u73b0","text":"Python<pre><code>## Step2e: The Feedfoward Network (SwiGLU activation)\nclass FeedForward(nn.Module):\n  def __init__(self, dim:int, hidden_dim:int, multiple_of:int, ffn_dim_multiplier: Optional[float]):\n    super().__init__()\n    # Models embedding dimension\n    self.dim = dim\n\n    # We must use the hidden dimensions calculation shared by Meta which is the ideal one for this model\n    # Hidden dimension are calculated such that it is a multiple of 256.\n    hidden_dim = int(2 * hidden_dim/3)\n    if ffn_dim_multiplier is not None:\n      hidden_dim = int(ffn_dim_multiplier * hidden_dim)\n    hidden_dim = multiple_of * ((hidden_dim + multiple_of - 1) // multiple_of)\n\n    # define hiddne layers weights\n    self.w1 = nn.Linear(self.dim, hidden_dim, bias=False, device=device)\n    self.w2 = nn.Linear(hidden_dim, self.dim, bias=False, device=device)\n    self.w3 = nn.Linear(self.dim, hidden_dim, bias=False, device=device)\n\n  def forward(self, x):\n    # Shape: [bsz,seq_len,dim]\n    return self.w2(F.silu(self.w1(x)) * self.w3(x))\n\n\n\n### Test: FeedForward module ###\n# note: x_out is already computed at Attention testing and is being used for testing here.\n# You need take out the triple quotes below to perform testing\n\"\"\"\nfeed_forward = FeedForward(ModelArgs.dim, 4 * ModelArgs.dim, ModelArgs.multiple_of, ModelArgs.ffn_dim_multiplier)\nx_out = rms_norm(x_out)\nx_out = feed_forward(x_out)\nprint(f\"feed forward output: x_out.shape: {x_out.shape}\")\n\"\"\"\n\n### Test Results: ###\n\"\"\"\nfeed forward output: x_out.shape: torch.Size([10, 256, 512])\n\"\"\"\n</code></pre>"},{"location":"blog/%E4%BD%BF%E7%94%A8pytorch%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BAllama3%E5%A4%A7%E6%A8%A1%E5%9E%8B--%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81/#decoder-block\u5b9e\u73b0","title":"Decoder Block\u200b\u5b9e\u73b0","text":"Python<pre><code>## Step2f: The Decoder Block. The class name is assigned as TransformerBlock to match the name of Meta llama 3 code base.\n\nclass TransformerBlock(nn.Module):\n  def __init__(self, args: ModelArgs):\n    super().__init__()\n    self.args = args\n    # Initilizate RMSNorm for attention\n    self.attention_norm = RMSNorm(dim=args.dim, eps = args.norm_eps)\n    # Initilizate Attention class\n    self.attention = Attention(args)\n    # Initilizate RMSNorm for feedfoward class\n    self.ff_norm = RMSNorm(dim=args.dim, eps = args.norm_eps)\n    # Initilizate feedfoward class\n    self.feedforward = FeedForward(args.dim, 4 * args.dim, args.multiple_of, args.ffn_dim_multiplier)\n\n  def forward(self, x, start_pos, inference):\n    # start_pos = token position for inference mode, inference = True for inference and False for training mode\n    # i) pass input embedding to attention_norm and then pass to attention block.\n    # ii) the output of attention is then added to embedding(before norm)\n    h = x + self.attention(self.attention_norm(x), start_pos, inference)\n\n    # i) pass attention output to ff_norm and then pass to the feedforward network.\n    # ii) the output of feedforward network is then added to the attention output(before ff_norm)\n    out = h + self.feedforward(self.ff_norm(h))\n    # Shape: [bsz,seq_len,dim]\n    return out\n\n\n### Test: TransformerBlock ###\n# You need take out the triple quotes below to perform testing\n\"\"\"\nx = torch.randn((ModelArgs.max_batch_size, ModelArgs.max_seq_len, ModelArgs.dim), device=device)\ntransformer_block = TransformerBlock(ModelArgs)\ntransformer_block_out = transformer_block(x,start_pos=0, inference=False)\nprint(f\"transformer_block_out.shape: {transformer_block_out.shape}\")\n\"\"\"\n\n### Test Results: ###\n\"\"\"\ntransformer_block_out.shape: torch.Size([10, 64, 128])\n\"\"\"\n</code></pre> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>\u200b\u4f7f\u7528\u200bPytorch\u200b\u4ece\u200b\u96f6\u200b\u6784\u5efa\u200bLlama3\u200b\u5927\u200b\u6a21\u578b\u200b--\u200b\u6df1\u5165\u200b\u4e86\u89e3\u200bLLaMa3\u200b\u6a21\u578b\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u7ec4\u4ef6\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/%E4%BD%BF%E7%94%A8aya%E5%92%8Cc%E6%B7%B7%E5%90%88%E7%BC%96%E5%86%99uprobe%E7%A8%8B%E5%BA%8F/","title":"\u4f7f\u7528\u200baya\u200b\u548c\u200bc\u200b\u6df7\u5408\u200b\u7f16\u5199\u200buprobe\u200b\u7a0b\u5e8f","text":"<p>\u200b\u4f7f\u7528\u200baya\u200b\u652f\u6301\u200bCO-RE\uff08\u200b\u7f16\u8bd1\u200b\u4e00\u6b21\u200b\uff0c\u200b\u5728\u200b\u4e0d\u540c\u200b\u7248\u672c\u200b\u7684\u200b\u5185\u6838\u200b\u4e0a\u200b\u8fd0\u884c\u200b\u7a0b\u5e8f\u200b\uff09\u3002aya \u200b\u5e93\u200b\uff08\u200b\u7528\u6237\u200b\u7a7a\u95f4\u200b\u4fa7\u200b\uff09\u200b\u53ef\u4ee5\u200b\u7528\u6765\u200b\u52a0\u8f7d\u200b\u6709\u200b relocations \u200b\u7684\u200b BPF \u200b\u7a0b\u5e8f\u200b\uff0c\u200b\u4f46\u7528\u200b Rust \u200b\u8bed\u8a00\u200b\u7f16\u5199\u200b BPF \u200b\u7a0b\u5e8f\u200b\u7684\u200b aya-ebpf \u200b\u5e93\u200b\uff08\u200b\u5185\u6838\u200b\u4fa7\u200b\uff09\u3002\u200b\u6240\u4ee5\u200b\u5982\u679c\u200b\u65e0\u6cd5\u200b\u907f\u514d\u200b relocations \u200b\u7b49\u200b\u95ee\u9898\u200b\u65f6\u200b\uff0c\u200b\u5c31\u200b\u9700\u8981\u200b\u7ed3\u5408\u200bc\u200b\u5199\u200b\u5185\u6838\u200b\uff0crust\u200b\u5199\u200b\u7528\u6237\u200b\u7a7a\u95f4\u200b\u52a0\u8f7d\u200b\u3002(\u200b\u6bd4\u5982\u200b\uff1a\u200b\u8fd8\u200b\u4e0d\u200b\u652f\u6301\u200b relocations \u200b\u76f8\u5173\u200b\u7684\u200b bpf_core_read \u200b\u6216\u200b\u7f16\u8bd1\u5668\u200b\u7684\u200b __builtin_preserve_access_index \u200b\u51fd\u6570\u200b\uff09\u3002\u200b\u53c2\u8003\u200b</p>"},{"location":"blog/%E4%BD%BF%E7%94%A8aya%E5%92%8Cc%E6%B7%B7%E5%90%88%E7%BC%96%E5%86%99uprobe%E7%A8%8B%E5%BA%8F/#\u4f7f\u7528c\u7f16\u8bd1core-ebpf\u5185\u6838\u7a0b\u5e8f","title":"\u4f7f\u7528\u200bC\u200b\u7f16\u8bd1\u200bCORE EBPF\u200b\u5185\u6838\u200b\u7a0b\u5e8f","text":"<p>\u200b\u8981\u200b\u4f7f\u7528\u200bc\u200b\u7f16\u8bd1\u200bCORE EBPF\u200b\u5185\u6838\u200b\u7a0b\u5e8f\u200b\uff0c\u200b\u4f9d\u8d56\u200b\u5934\u6587\u4ef6\u200b\u3002 + \u200b\u9700\u8981\u200b\u5148\u751f\u200b\u6210\u200bvmlinux.h\u200b\u6587\u4ef6\u200b + \u200b\u9700\u8981\u200blibbpf-dev, #include </p>"},{"location":"blog/%E4%BD%BF%E7%94%A8aya%E5%92%8Cc%E6%B7%B7%E5%90%88%E7%BC%96%E5%86%99uprobe%E7%A8%8B%E5%BA%8F/#\u751f\u6210vmlinuxh\u6587\u4ef6","title":"\u751f\u6210\u200bvmlinux.h\u200b\u6587\u4ef6","text":"<p>\u200b\u751f\u6210\u200bvmlinux.h\u200b\u6587\u4ef6\u200b\u91c7\u7528\u200bbpftool\u200b\u5de5\u5177\u200b\uff0c\u200b\u6839\u636e\u200bvmlinux\u200b\u6587\u4ef6\u200b\u751f\u6210\u200bvmlinux.h\u200b\u6587\u4ef6\u200b\u3002vmlinux\u200b\u6587\u4ef6\u200b\u5305\u542b\u200b\u5185\u6838\u200b\u7684\u200b\u8c03\u8bd5\u4fe1\u606f\u200b\u3002 </p>Text Only<pre><code>$ ls  -alh  /sys/kernel/btf/vmlinux\n-r--r--r-- 1 root root 4.9M 8\u200b\u6708\u200b  13 22:19 /sys/kernel/btf/vmlinux\n</code></pre> \u200b\u751f\u6210\u200bvmlinux.h\u200b\u6587\u4ef6\u200b\uff1a Text Only<pre><code>$ bpftool btf dump file /sys/kernel/btf/vmlinux format c &gt; vmlinux.h\n</code></pre><p></p> <p>(1) \u200b\u5982\u679c\u200b\u4f60\u200b\u7684\u200bbptfool\u200b\u62a5\u9519\u200b\u9700\u8981\u200bapt\u200b\u5b89\u88c5\u200bxxx\u200b\u7248\u672c\u200b\u7684\u200blinux-tools\uff0c\u200b\u53ef\u4ee5\u200b\u5982\u4e0b\u200b\u64cd\u4f5c\u200b\uff1a </p>Text Only<pre><code>apt install linux-tools-generic\n</code></pre> \u200b\u7136\u540e\u200b\u5c06\u200b/usr/lib/linux-tools/xxx-generic/\u200b\u8bbe\u7f6e\u200b\u5230\u200b\u73af\u5883\u53d8\u91cf\u200bPATH\u200b\u4e2d\u200b\uff0c\u200b\u6216\u8005\u200b\u76f4\u63a5\u200b\u4f7f\u7528\u200b\u7edd\u5bf9\u8def\u5f84\u200b\u6267\u884c\u200b/usr/lib/linux-tools/xxx-generic/bpftool\u3002<p></p> <p>(2) \u200b\u5982\u679c\u200b\u62a5\u9519\u200b\uff1a\u200b\u53ef\u80fd\u200b\u662f\u200b\u5185\u6838\u200b\u7f16\u8bd1\u200b\u65f6\u200b\u6ca1\u6709\u200b\u5f00\u542f\u200bBTF\u200b\u529f\u80fd\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u68c0\u67e5\u200b/boot/config-xxx\u200b\u6587\u4ef6\u200b\uff0c\u200b\u662f\u5426\u200b\u6709\u200bCONFIG_DEBUG_INFO_BTF=y\u3002\u200b\u6682\u65f6\u200b\u6ca1\u6709\u200b\u76f4\u63a5\u200b\u89e3\u51b3\u200b\uff0c\u200b\u6211\u6362\u200b\u4e86\u200b\u4e00\u53f0\u200blinux\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u751f\u6210\u200b\u4e86\u200b\u3002 </p>Text Only<pre><code>$ bpftool btf dump file /sys/kernel/btf/vmlinux &gt; vmlinux.h\nError: failed to load BTF from /sys/kernel/btf/vmlinux: Invalid argument\n</code></pre><p></p>"},{"location":"blog/%E4%BD%BF%E7%94%A8aya%E5%92%8Cc%E6%B7%B7%E5%90%88%E7%BC%96%E5%86%99uprobe%E7%A8%8B%E5%BA%8F/#\u5b89\u88c5libbpf-dev","title":"\u5b89\u88c5\u200blibbpf-dev","text":"Text Only<pre><code>$ sudo apt install libbpf-dev\n</code></pre> \u200b\u63d2\u200b\u4e00\u4e2a\u200b\u5c0f\u66f2\u513f\u200b\u3002\u200b\u5728\u200blinux\uff0c\u200b\u5982\u679c\u200b\u4f60\u200b\u60f3\u200b\u770b\u5230\u200b\u5b89\u88c5\u200b\u7684\u200b\u5305\u200b\u4f4d\u7f6e\u200b\uff0c + \u200b\u91c7\u7528\u200bdpkg\u200b\u5b89\u88c5\u200b\u7684\u200b\uff0c\u200b\u4f7f\u7528\u200bdpkg -L  + \u200b\u91c7\u7528\u200bapt\u200b\u5b89\u88c5\u200b\u7684\u200b\uff0c\u200b\u4f7f\u7528\u200b apt-file list libbpf-dev Text Only<pre><code>sudo apt install apt-file\nsudo apt-file update\napt-file list libbpf-dev\n</code></pre>"},{"location":"blog/%E4%BD%BF%E7%94%A8aya%E5%92%8Cc%E6%B7%B7%E5%90%88%E7%BC%96%E5%86%99uprobe%E7%A8%8B%E5%BA%8F/#\u7f16\u5199c-ebpf\u5185\u6838\u7a0b\u5e8f","title":"\u7f16\u5199\u200bc EBPF\u200b\u5185\u6838\u200b\u7a0b\u5e8f","text":"<p>uprobe_test.c \u200b\u6587\u4ef6\u200b </p>C<pre><code>// clang-format off\n#include &lt;vmlinux.h&gt;\n#include &lt;bpf/bpf_helpers.h&gt;\n// clang-format on\n\nchar _license[] SEC(\"license\") = \"GPL\";\n\nSEC(\"uprobe/test_text_64_64_reloc\")\nint test_text_64_64_reloc(struct pt_regs *ctx) {\n  return 0;\n}\n</code></pre><p></p> Bash<pre><code>#!/bin/bash\nclang -target bpf -D__AARCH64__ -mlittle-endian \\\n        -I/usr/include -I/home/ken/ \\\n        -O2 -c $(pwd)/uprobe_test.c -o $(pwd)/ebpf_program.o\n</code></pre> Bash<pre><code>$ llvm-objdump -d ebpf_program.o\n\nebpf_program.o: file format elf64-bpf\n\nDisassembly of section uprobe/test_text_64_64_reloc:\n\n0000000000000000 &lt;test_text_64_64_reloc&gt;:\n       0:       b7 00 00 00 00 00 00 00 r0 = 0x0\n       1:       95 00 00 00 00 00 00 00 exit\n</code></pre>"},{"location":"blog/%E4%BD%BF%E7%94%A8aya%E5%92%8Cc%E6%B7%B7%E5%90%88%E7%BC%96%E5%86%99uprobe%E7%A8%8B%E5%BA%8F/#aya\u52a0\u8f7d\u5185\u6838\u7a0b\u5e8f","title":"aya\u200b\u52a0\u8f7d\u200b\u5185\u6838\u200b\u7a0b\u5e8f\u200b\ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350","text":"<ul> <li>netcap\u200b\u8c03\u8bd5\u200b</li> <li>\u200b\u4ece\u200bDeepseek\u200b\u5f00\u6e90\u200b\u5e93\u200b3FS\u200b\u4e2d\u200b\u5b66\u4e60\u200bfuse\u200b\u7684\u200b\u4f7f\u7528\u200b-\u200b\u5982\u4f55\u200b\u5f00\u53d1\u200b\u4e00\u4e2a\u200b\u6587\u4ef6\u7cfb\u7edf\u200b\uff08\u200b\u4e00\u200b\uff09</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>git\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b\uff1f\u200b\u591a\u4e2a\u200b\u4fee\u6539\u200b\u5206\u200b\u591a\u4e2a\u200bcommit\u200b\u4fee\u6539\u200b</li> </ul>"},{"location":"blog/%E5%85%B3%E4%BA%8E%E9%98%85%E8%AF%BB%E6%BA%90%E7%A0%81%E7%9A%84%E4%B8%80%E7%82%B9%E5%BF%83%E5%BE%97/","title":"\u5173\u4e8e\u200b\u9605\u8bfb\u200b\u6e90\u7801\u200b\u7684\u200b\u4e00\u70b9\u200b\u5fc3\u5f97","text":"<p>\u200b\u670b\u53cb\u200b\u4eec\u200b\uff0c\u200b\u9605\u8bfb\u200b\u4f18\u79c0\u200b\u7684\u200b\u6e90\u7801\u200b\u53ef\u4ee5\u200b\u5b66\u5230\u200b\u5f88\u591a\u200b\uff0c\u200b\u4f8b\u5982\u200b\u4ee3\u7801\u200b\u7684\u200b\u7ed3\u6784\u200b\u7ec4\u7ec7\u200b\u3001\u200b\u8bbe\u8ba1\u6a21\u5f0f\u200b\u3001\u200b\u4e3a\u4e86\u200b\u89e3\u51b3\u200b\u4e00\u4e9b\u200b\u95ee\u9898\u200b\u7279\u6b8a\u200b\u5904\u7406\u200b\u3001\u200b\u5199\u6cd5\u200b\u6280\u5de7\u200b\u3001\u200b\u4f18\u5316\u200b\u7b56\u7565\u200b\u7b49\u200b\uff0c\u200b\u540c\u65f6\u200b\u4e5f\u200b\u6269\u5c55\u200b\u4e86\u200b\u5bf9\u200b\u7f16\u7a0b\u8bed\u8a00\u200b\u7684\u200b\u719f\u6089\u200b\u7a0b\u5ea6\u200b\u3001\u200b\u5173\u4e8e\u200b\u8fd9\u4e2a\u200b\u9879\u76ee\u200b\u7684\u200b\u89e3\u51b3\u95ee\u9898\u200b\u601d\u8def\u200b\u3002</p> <p>\u200b\u672c\u6587\u200b\u4e3b\u8981\u200b\u8bb0\u5f55\u200b\u548c\u200b\u5206\u4eab\u200b\u4e00\u4e9b\u200b\u6211\u200b\u9605\u8bfb\u200b\u4ee3\u7801\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u7684\u200b\u5fc3\u5f97\u200b\uff0c\u200b\u5305\u62ec\u200b\u5982\u4f55\u200b\u9605\u8bfb\u200b\u4ee3\u7801\u200b\u3001\u200b\u5229\u7528\u200b\u9605\u8bfb\u200b\u4ee3\u7801\u200b\u5de5\u5177\u200b\u3001\u200b\u5982\u4f55\u200b\u9009\u62e9\u200b\u4e00\u4e9b\u200b\u4ee3\u7801\u200b\u5e93\u200b\u9605\u8bfb\u200b\u3002</p>"},{"location":"blog/%E5%85%B3%E4%BA%8E%E9%98%85%E8%AF%BB%E6%BA%90%E7%A0%81%E7%9A%84%E4%B8%80%E7%82%B9%E5%BF%83%E5%BE%97/#\u5982\u4f55\u9605\u8bfb\u4ee3\u7801","title":"\u5982\u4f55\u200b\u9605\u8bfb\u200b\u4ee3\u7801","text":"<p>\u200b\u9605\u8bfb\u200b\u4ee3\u7801\u200b\u7684\u200b\u8fc7\u7a0b\u200b\uff0c\u200b\u5c31\u200b\u50cf\u662f\u200b\u63a2\u6848\u200b\u5bfb\u627e\u200b\u5acc\u7591\u4eba\u200b\u3001\u200b\u7834\u89e3\u200b\u654c\u4eba\u200b\u7684\u200b\u9635\u6cd5\u200b\u3001\u200b\u53c8\u200b\u6216\u8005\u200b\u6b23\u8d4f\u200b\u4e00\u4ef6\u200b\u827a\u672f\u54c1\u200b\u3002\u200b\u5982\u679c\u200b\u6ca1\u6709\u200b\u601d\u8def\u200b\u3001\u200b\u4e00\u5934\u200b\u624e\u200b\u8fdb\u53bb\u200b\uff0c\u200b\u6216\u8005\u200b\u53d8\u6210\u200b\u4e86\u200b\u6309\u200b\u987a\u5e8f\u200b\u8bfb\u200b\u4ee3\u7801\u200b\uff0c\u200b\u5c31\u200b\u4f1a\u200b\u773c\u775b\u200b\u75db\u200b\u3001\u200b\u5934\u53d1\u200b\u6655\u200b\u4e86\u200b\uff0c\u200b\u5f88\u96be\u200b\u8fdb\u884c\u200b\u4e0b\u53bb\u200b\u3002</p> <ul> <li> <p>\u200b\u5e26\u200b\u7740\u200b\u95ee\u9898\u200b\u6216\u8005\u200b\u76ee\u6807\u200b\u53bb\u200b\u9605\u8bfb\u200b\u4ee3\u7801\u200b\uff0c\u200b\u5927\u578b\u200b\u4ee3\u7801\u200b\u5e93\u200b\u90fd\u200b\u662f\u200b\u7531\u200b\u5f88\u591a\u200b\u4eba\u200b\u5f00\u53d1\u200b\u7684\u200b\u3001\u200b\u7531\u200b\u5f88\u591a\u200b\u529f\u80fd\u200b\u7ec4\u6210\u200b\uff0c\u200b\u7279\u522b\u200b\u5e9e\u5927\u200b\uff0c\u200b\u9700\u8981\u200b\u7531\u200b\u95ee\u9898\u200b\u5207\u5165\u200b\u3002\u200b\u6bd4\u5982\u200b\u8fd9\u4e2a\u200b\u4ee3\u7801\u200b\u5e93\u4e2d\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u67d0\u4e2a\u200b\u529f\u80fd\u200b\u7684\u200b\uff1f\u200b\u6bd4\u5982\u200bPytorch\u200b\u4e2d\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200bcudaIpc\u200b\u529f\u80fd\u200b\u7684\u200b\uff1f\u200b\u6bd4\u5982\u200bLLM\u200b\u63a8\u7406\u200b\u5e93\u4e2d\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u6295\u673a\u200b\u91c7\u6837\u200b\u7684\u200b\uff1f</p> </li> <li> <p>\u200b\u4e0d\u200b\u63a8\u8350\u200b\u987a\u5e8f\u200b\u8bfb\u200b\u4ee3\u7801\u200b\uff0c\u200b\u6bd4\u5982\u200b\u6253\u5f00\u200b\u4e00\u4e2a\u200b\u6587\u4ef6\u200b\uff0c\u200b\u4ece\u5934\u5f00\u59cb\u200b\u5f80\u540e\u200b\u8bfb\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u4e00\u4e2a\u200b\u6587\u4ef6\u200b\u8bfb\u200b\u3002</p> </li> </ul> <p>\u200b\u62ff\u200bC++\u200b\u7684\u200b\u4e00\u4e2a\u200b\u6587\u4ef6\u200b\u6765\u8bf4\u200b\uff0c\u200b\u53ef\u80fd\u200b\u7531\u200b\u4e00\u4e2a\u200b\u7c7b\u200b\u6216\u8005\u200b\u591a\u4e2a\u200b\u7c7b\u200b\uff0c\u200b\u91cc\u9762\u200b\u5305\u62ec\u200b\u4e86\u200b\u6838\u5fc3\u200b\u51fd\u6570\u200b\u3001\u200b\u5de5\u5177\u200b\u8f85\u52a9\u200b\u51fd\u6570\u200b\u3001\u200b\u7528\u200b\u7684\u200b\u5c11\u200b\u7684\u200b\u51fd\u6570\u200b\u53d8\u91cf\u200b\u7b49\u200b\u3002\u200b\u6709\u4e9b\u200b\u51fd\u6570\u200b\u53d8\u91cf\u200b\u5bf9\u200b\u89e3\u51b3\u200b\u7684\u200b\u4f60\u200b\u95ee\u9898\u200b\u6ca1\u6709\u200b\u4efb\u4f55\u200b\u610f\u4e49\u200b\uff0c\u200b\u6309\u200b\u987a\u5e8f\u200b\u9605\u8bfb\u200b\u5c31\u200b\u4f1a\u200b\u589e\u52a0\u200b\u6df7\u4e71\u200b\u5ea6\u200b\u3002\u200b\u63a8\u8350\u200b\u6839\u636e\u200b\u7c7b\u200b\u548c\u200b\u65b9\u6cd5\u200b\u7684\u200b\u8c03\u7528\u200b\u5173\u7cfb\u200b\uff0c\u200b\u4e0d\u65ad\u200b\u7684\u200b\u8df3\u8f6c\u200b\uff0c\u200b\u67e5\u770b\u200b\u4ee3\u7801\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u548c\u200b\u89e3\u51b3\u95ee\u9898\u200b\u7684\u200b\u3002</p> <ul> <li>\u200b\u5bf9\u4e8e\u200b\u4e00\u4e2a\u200b\u4e0d\u200b\u4e86\u89e3\u200b\u7684\u200b\u9879\u76ee\u200b\u6216\u8005\u200b\u5e93\u200b\uff0c\u200b\u63a8\u8350\u200b\u53ef\u4ee5\u200b\u4ece\u200b\u6d4b\u8bd5\u200b\u770b\u200b\u8d77\u200b\u3001\u200b\u5148\u200b\u4ece\u200b\u7528\u200b\u8d77\u6765\u200b\u7684\u200b\u89d2\u5ea6\u200b\uff0c\u200b\u53bb\u200b\u7406\u89e3\u200b\u8fd9\u4e2a\u200b\u9879\u76ee\u200b\u662f\u200b\u5e72\u561b\u200b\u7684\u200b\uff0c\u200b\u5b83\u200b\u80fd\u591f\u200b\u89e3\u51b3\u200b\u54ea\u4e9b\u200b\u95ee\u9898\u200b\u3002\u200b\u5728\u200b\u8fd9\u4e2a\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u4f60\u200b\u5c31\u200b\u4f1a\u200b\u53bb\u200b\u67e5\u9605\u200b\u5b83\u200b\u7684\u200b\u6587\u6863\u200b\uff08readme\u3001blog\uff09\u200b\u4ee5\u53ca\u200b\u719f\u6089\u200bAPI\u200b\u7528\u6cd5\u200b\u3002\u200b\u540c\u65f6\u200b\u4e5f\u200b\u4f1a\u200b\u5e26\u7ed9\u200b\u4f60\u200b\u5f88\u591a\u200b\u95ee\u9898\u200b\uff0c\u200b\u8ba9\u200b\u4f60\u200b\u4f5c\u4e3a\u200b\u5207\u5165\u70b9\u200b\u9605\u8bfb\u200b\u6e90\u7801\u200b\u3002</li> </ul>"},{"location":"blog/%E5%85%B3%E4%BA%8E%E9%98%85%E8%AF%BB%E6%BA%90%E7%A0%81%E7%9A%84%E4%B8%80%E7%82%B9%E5%BF%83%E5%BE%97/#\u9605\u8bfb\u4ee3\u7801\u5de5\u5177\u7684\u5229\u7528","title":"\u9605\u8bfb\u200b\u4ee3\u7801\u200b\u5de5\u5177\u200b\u7684\u200b\u5229\u7528","text":"<ul> <li> <p>github1s</p> </li> <li> <p>sourcegraph</p> </li> <li> <p>command\u200b\u7b49\u200b\u8f6f\u4ef6\u200b</p> </li> </ul>"},{"location":"blog/%E5%85%B3%E4%BA%8E%E9%98%85%E8%AF%BB%E6%BA%90%E7%A0%81%E7%9A%84%E4%B8%80%E7%82%B9%E5%BF%83%E5%BE%97/#\u5982\u4f55\u9009\u62e9\u9605\u8bfb\u7684\u4ee3\u7801\u5e93","title":"\u5982\u4f55\u200b\u9009\u62e9\u200b\u9605\u8bfb\u200b\u7684\u200b\u4ee3\u7801\u200b\u5e93","text":"<p>\u200b\u5174\u8da3\u200b\u3001\u200b\u6280\u80fd\u200b\u63d0\u5347\u200b\u3001\u200b\u7ed3\u5408\u200b\u5de5\u4f5c\u200b\u4e2d\u200b\u7684\u200b\u9700\u6c42\u200b\uff08\u200b\u6216\u8005\u200b\u672a\u6765\u200b\u5de5\u4f5c\u200b\u7684\u200b\u53d1\u5c55\u200b\u60c5\u51b5\u200b\uff09</p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>\u200b\u4f7f\u7528\u200bPytorch\u200b\u4ece\u200b\u96f6\u200b\u6784\u5efa\u200bLlama3\u200b\u5927\u200b\u6a21\u578b\u200b--\u200b\u6df1\u5165\u200b\u4e86\u89e3\u200b\u8f93\u51fa\u6a21\u5757\u200b\u4ee5\u53ca\u200b\u8bad\u7ec3\u200b\u63a8\u7406\u200b</li> <li>cista\u200b\u96f6\u200b\u62f7\u8d1d\u200b\u53cd\u200b\u5e8f\u5217\u5316\u200b\u5e93\u200b\u5b9e\u73b0\u200b\u4e4b\u200bswiss_table\u200b\u54c8\u5e0c\u200b\u8868\u200b\u5b9e\u73b0\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gnu-gettext%E5%AE%9E%E7%8E%B0%E8%BD%AF%E4%BB%B6%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81%E6%9C%BA%E5%88%B6/","title":"\u5982\u4f55\u200b\u4f7f\u7528\u200bGNU gettext\u200b\u5b9e\u73b0\u200b\u8f6f\u4ef6\u200b\u56fd\u9645\u5316\u200b\u591a\u200b\u8bed\u8a00\u200b\u652f\u6301\u200b\u673a\u5236","text":"<p>\u200b\u6545\u4e8b\u200b\u7684\u200b\u8d77\u56e0\u200b\u662f\u200b\uff0c\u200b\u6211\u200b\u770b\u5230\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u9879\u76ee\u200b\uff0ckawaii-gcc\u3002</p> <p>\u200b\u8fd9\u4e2a\u200b\u9879\u76ee\u200b\u662f\u200b\u5e72\u561b\u200b\u7684\u200b\u5462\u200b\uff1fMake your GCC compiler kawaii. \u200b\u5c31\u662f\u200b\u8ba9\u200b\u4f60\u200b\u7684\u200bgcc\u200b\u7f16\u8bd1\u5668\u200b\u8f93\u51fa\u200b\u6216\u8005\u200b\u8f93\u51fa\u200b\u53d8\u5f97\u200b\uff1a\u201d\u200b\u5361\u54c7\u4f0a\u200b\u201d\uff0c\u200b\u53ef\u7231\u200b\uff01</p> <p>\u200b\u770b\u200b\u4e00\u4e0b\u200b\u6548\u679c\u200b\u3002</p> <p></p> <p></p> <p>\u200b\u7136\u540e\u200b\u6211\u200b\u53bb\u200b\u770b\u200b\u4e86\u200b\u6e90\u7801\u200b\uff0c\u200b\u53d1\u73b0\u200b\u5462\u200b\uff1fsrc\u200b\u6587\u4ef6\u5939\u200b\u91cc\u9762\u200b\u653e\u5728\u200b\u4e09\u4e2a\u200b.po\u200b\u6587\u4ef6\u200b\uff0c\u200b\u5206\u522b\u200b\u5bf9\u5e94\u200b\u4e86\u200b\u82f1\u6587\u200b\u4e8e\u200b\u4e2d\u6587\u200b\u3001\u200b\u65e5\u6587\u200b\u7684\u200b\u7ffb\u8bd1\u200b\u3002\u200b\u4e3a\u4e86\u200b\u5f04\u61c2\u200b\u5b83\u200b\uff01\u200b\u4e8e\u662f\u200b\u6709\u200b\u4e86\u200b\u8fd9\u200b\u7bc7\u6587\u7ae0\u200b\u3002</p> <p>\u200b\u5728\u200b\u5f53\u4eca\u200b\u5168\u7403\u5316\u200b\u7684\u200b\u8f6f\u4ef6\u5f00\u53d1\u200b\u73af\u5883\u200b\u4e2d\u200b\uff0c\u200b\u591a\u200b\u8bed\u8a00\u200b\u652f\u6301\u200b\u5df2\u200b\u6210\u4e3a\u200b\u4e00\u9879\u200b\u4e0d\u53ef\u6216\u7f3a\u200b\u7684\u200b\u529f\u80fd\u200b\u3002\u200b\u65e0\u8bba\u662f\u200b\u9762\u5411\u200b\u5168\u7403\u200b\u7528\u6237\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\uff0c\u200b\u8fd8\u662f\u200b\u9700\u8981\u200b\u672c\u5730\u5316\u200b\u7684\u200b\u5c0f\u578b\u200b\u5de5\u5177\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u591a\u200b\u8bed\u8a00\u200b\u652f\u6301\u200b\u90fd\u200b\u80fd\u200b\u663e\u8457\u200b\u63d0\u5347\u200b\u7528\u6237\u200b\u4f53\u9a8c\u200b\u3002\u200b\u672c\u6587\u200b\u5c06\u200b\u6df1\u5165\u63a2\u8ba8\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b GNU gettext \u200b\u8fd9\u4e00\u200b\u5f3a\u5927\u200b\u7684\u200b\u5de5\u5177\u200b\u94fe\u200b\uff0c\u200b\u4e3a\u200b\u4f60\u200b\u7684\u200b\u8f6f\u4ef6\u200b\u6dfb\u52a0\u200b\u591a\u200b\u8bed\u8a00\u200b\u652f\u6301\u200b\u673a\u5236\u200b\u3002</p>"},{"location":"blog/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gnu-gettext%E5%AE%9E%E7%8E%B0%E8%BD%AF%E4%BB%B6%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81%E6%9C%BA%E5%88%B6/#\u4ec0\u4e48\u662f-gnu-gettext","title":"\u4ec0\u4e48\u200b\u662f\u200b GNU gettext\uff1f","text":"<p>GNU gettext \u200b\u662f\u200b\u4e00\u5957\u200b\u7528\u4e8e\u200b\u8f6f\u4ef6\u200b\u56fd\u9645\u5316\u200b\u548c\u200b\u672c\u5730\u5316\u200b\u7684\u200b\u5de5\u5177\u200b\u94fe\u200b\uff0c\u200b\u5e7f\u6cdb\u5e94\u7528\u200b\u4e8e\u200b\u5f00\u6e90\u200b\u9879\u76ee\u200b\u548c\u200b\u5546\u4e1a\u8f6f\u4ef6\u200b\u4e2d\u200b\u3002\u200b\u5b83\u200b\u7684\u200b\u6838\u5fc3\u601d\u60f3\u200b\u662f\u200b\u5c06\u200b\u7a0b\u5e8f\u200b\u4e2d\u200b\u7684\u200b\u6587\u672c\u200b\u5b57\u7b26\u4e32\u200b\u63d0\u53d6\u200b\u51fa\u6765\u200b\uff0c\u200b\u5b58\u50a8\u200b\u5230\u200b\u72ec\u7acb\u200b\u7684\u200b\u7ffb\u8bd1\u200b\u6587\u4ef6\u200b\u4e2d\u200b\uff0c\u200b\u4ece\u800c\u200b\u5b9e\u73b0\u200b\u591a\u200b\u8bed\u8a00\u200b\u652f\u6301\u200b\u3002\u200b\u901a\u8fc7\u200b gettext\uff0c\u200b\u5f00\u53d1\u8005\u200b\u53ef\u4ee5\u200b\u8f7b\u677e\u200b\u7ba1\u7406\u200b\u4e0d\u540c\u200b\u8bed\u8a00\u200b\u7684\u200b\u7ffb\u8bd1\u200b\uff0c\u200b\u800c\u200b\u65e0\u9700\u200b\u4fee\u6539\u200b\u6e90\u4ee3\u7801\u200b\u3002</p>"},{"location":"blog/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gnu-gettext%E5%AE%9E%E7%8E%B0%E8%BD%AF%E4%BB%B6%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81%E6%9C%BA%E5%88%B6/#po-\u6587\u4ef6\u591a\u8bed\u8a00\u652f\u6301\u7684\u6838\u5fc3","title":"<code>.po</code> \u200b\u6587\u4ef6\u200b\uff1a\u200b\u591a\u200b\u8bed\u8a00\u200b\u652f\u6301\u200b\u7684\u200b\u6838\u5fc3","text":""},{"location":"blog/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gnu-gettext%E5%AE%9E%E7%8E%B0%E8%BD%AF%E4%BB%B6%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81%E6%9C%BA%E5%88%B6/#\u4ec0\u4e48\u662f-po-\u6587\u4ef6","title":"\u4ec0\u4e48\u200b\u662f\u200b <code>.po</code> \u200b\u6587\u4ef6\u200b\uff1f","text":"<p><code>.po</code> \u200b\u6587\u4ef6\u200b\uff08Portable Object \u200b\u6587\u4ef6\u200b\uff09\u200b\u662f\u200b GNU gettext \u200b\u7684\u200b\u6838\u5fc3\u200b\u7ec4\u6210\u90e8\u5206\u200b\uff0c\u200b\u7528\u4e8e\u200b\u5b58\u50a8\u200b\u6e90\u8bed\u8a00\u200b\u548c\u200b\u76ee\u6807\u8bed\u8a00\u200b\u7684\u200b\u7ffb\u8bd1\u200b\u5bf9\u7167\u8868\u200b\u3002\u200b\u5b83\u200b\u662f\u200b\u4e00\u4e2a\u200b\u7eaf\u200b\u6587\u672c\u6587\u4ef6\u200b\uff0c\u200b\u5305\u542b\u200b\u4e86\u200b\u9700\u8981\u200b\u7ffb\u8bd1\u200b\u7684\u200b\u5b57\u7b26\u4e32\u200b\u53ca\u5176\u200b\u5bf9\u5e94\u200b\u7684\u200b\u7ffb\u8bd1\u200b\u5185\u5bb9\u200b\u3002</p>"},{"location":"blog/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gnu-gettext%E5%AE%9E%E7%8E%B0%E8%BD%AF%E4%BB%B6%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81%E6%9C%BA%E5%88%B6/#po-\u6587\u4ef6\u7684\u4f5c\u7528","title":"<code>.po</code> \u200b\u6587\u4ef6\u200b\u7684\u200b\u4f5c\u7528","text":"<p><code>.po</code> \u200b\u6587\u4ef6\u200b\u7684\u200b\u4e3b\u8981\u200b\u4f5c\u7528\u200b\u662f\u200b\u5c06\u200b\u7a0b\u5e8f\u200b\u4e2d\u200b\u7684\u200b\u6587\u672c\u200b\u5b57\u7b26\u4e32\u200b\u4e0e\u200b\u76ee\u6807\u8bed\u8a00\u200b\u7684\u200b\u7ffb\u8bd1\u200b\u5173\u8054\u200b\u8d77\u6765\u200b\u3002\u200b\u901a\u8fc7\u200b\u7f16\u8f91\u200b <code>.po</code> \u200b\u6587\u4ef6\u200b\uff0c\u200b\u5f00\u53d1\u8005\u200b\u53ef\u4ee5\u200b\u4e3a\u200b\u8f6f\u4ef6\u200b\u6dfb\u52a0\u200b\u5bf9\u200b\u591a\u79cd\u8bed\u8a00\u200b\u7684\u200b\u652f\u6301\u200b\uff0c\u200b\u4ece\u800c\u200b\u8ba9\u200b\u7528\u6237\u200b\u80fd\u591f\u200b\u4ee5\u200b\u81ea\u5df1\u200b\u719f\u6089\u200b\u7684\u200b\u8bed\u8a00\u200b\u4f7f\u7528\u200b\u8f6f\u4ef6\u200b\u3002</p>"},{"location":"blog/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gnu-gettext%E5%AE%9E%E7%8E%B0%E8%BD%AF%E4%BB%B6%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81%E6%9C%BA%E5%88%B6/#po-\u6587\u4ef6\u7684\u7ed3\u6784","title":"<code>.po</code> \u200b\u6587\u4ef6\u200b\u7684\u200b\u7ed3\u6784","text":"<p>\u200b\u4e00\u4e2a\u200b\u5178\u578b\u200b\u7684\u200b <code>.po</code> \u200b\u6587\u4ef6\u200b\u7531\u200b\u4ee5\u4e0b\u200b\u51e0\u200b\u90e8\u5206\u200b\u7ec4\u6210\u200b\uff1a</p>"},{"location":"blog/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gnu-gettext%E5%AE%9E%E7%8E%B0%E8%BD%AF%E4%BB%B6%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81%E6%9C%BA%E5%88%B6/#\u6587\u4ef6\u5934\u4fe1\u606f","title":"\u6587\u4ef6\u200b\u5934\u200b\u4fe1\u606f","text":"<p>\u200b\u6587\u4ef6\u200b\u5934\u200b\u4fe1\u606f\u200b\u5305\u542b\u200b\u4e86\u200b\u5143\u200b\u6570\u636e\u200b\uff0c\u200b\u5982\u200b\u9879\u76ee\u540d\u79f0\u200b\u3001\u200b\u8bed\u8a00\u200b\u3001\u200b\u5b57\u7b26\u200b\u7f16\u7801\u200b\u7b49\u200b\u3002\u200b\u8fd9\u4e9b\u200b\u4fe1\u606f\u200b\u5e2e\u52a9\u200b\u7ffb\u8bd1\u200b\u5de5\u5177\u200b\u548c\u200b\u5f00\u53d1\u8005\u200b\u66f4\u597d\u200b\u5730\u200b\u7ba1\u7406\u200b\u7ffb\u8bd1\u200b\u6587\u4ef6\u200b\u3002</p> Gettext Catalog<pre><code>msgid \"\"\nmsgstr \"\"\n\"Project-Id-Version: My Project 1.0\\n\"\n\"Report-Msgid-Bugs-To: \\n\"\n\"POT-Creation-Date: 2024-10-01 12:00+0000\\n\"\n\"PO-Revision-Date: 2024-10-02 14:00+0000\\n\"\n\"Last-Translator: John Doe &lt;john@example.com&gt;\\n\"\n\"Language-Team: French &lt;team@example.com&gt;\\n\"\n\"Language: fr\\n\"\n\"MIME-Version: 1.0\\n\"\n\"Content-Type: text/plain; charset=UTF-8\\n\"\n\"Content-Transfer-Encoding: 8bit\\n\"\n</code></pre>"},{"location":"blog/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gnu-gettext%E5%AE%9E%E7%8E%B0%E8%BD%AF%E4%BB%B6%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81%E6%9C%BA%E5%88%B6/#\u7ffb\u8bd1\u6761\u76ee","title":"\u7ffb\u8bd1\u200b\u6761\u76ee","text":"<p>\u200b\u6bcf\u4e2a\u200b\u7ffb\u8bd1\u200b\u6761\u76ee\u200b\u5305\u542b\u200b\u4e24\u4e2a\u200b\u90e8\u5206\u200b\uff1a - <code>msgid</code>\uff1a\u200b\u6e90\u8bed\u8a00\u200b\u6587\u672c\u200b\uff08\u200b\u901a\u5e38\u200b\u662f\u200b\u82f1\u8bed\u200b\uff09\u3002 - <code>msgstr</code>\uff1a\u200b\u76ee\u6807\u8bed\u8a00\u200b\u7684\u200b\u7ffb\u8bd1\u200b\u3002</p> Gettext Catalog<pre><code>msgid \"Hello, world!\"\nmsgstr \"Bonjour, le monde!\"\n</code></pre>"},{"location":"blog/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gnu-gettext%E5%AE%9E%E7%8E%B0%E8%BD%AF%E4%BB%B6%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81%E6%9C%BA%E5%88%B6/#\u6ce8\u91ca","title":"\u6ce8\u91ca","text":"<p>\u200b\u6ce8\u91ca\u200b\u4ee5\u200b <code>#</code> \u200b\u5f00\u5934\u200b\uff0c\u200b\u7528\u4e8e\u200b\u4e3a\u200b\u7ffb\u8bd1\u4eba\u5458\u200b\u63d0\u4f9b\u200b\u4e0a\u4e0b\u6587\u200b\u6216\u200b\u8bf4\u660e\u200b\u3002</p> Gettext Catalog<pre><code>#: src/main.c:12\n# This is a comment for translators\nmsgid \"Save\"\nmsgstr \"Enregistrer\"\n</code></pre>"},{"location":"blog/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gnu-gettext%E5%AE%9E%E7%8E%B0%E8%BD%AF%E4%BB%B6%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81%E6%9C%BA%E5%88%B6/#\u5982\u4f55\u4f7f\u7528-gnu-gettext-\u5b9e\u73b0\u591a\u8bed\u8a00\u652f\u6301","title":"\u5982\u4f55\u200b\u4f7f\u7528\u200b GNU gettext \u200b\u5b9e\u73b0\u200b\u591a\u200b\u8bed\u8a00\u200b\u652f\u6301","text":""},{"location":"blog/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gnu-gettext%E5%AE%9E%E7%8E%B0%E8%BD%AF%E4%BB%B6%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81%E6%9C%BA%E5%88%B6/#\u63d0\u53d6\u6587\u672c","title":"\u63d0\u53d6\u200b\u6587\u672c","text":"<p>\u200b\u4f7f\u7528\u200b <code>xgettext</code> \u200b\u5de5\u5177\u200b\u4ece\u200b\u6e90\u4ee3\u7801\u200b\u4e2d\u200b\u63d0\u53d6\u200b\u9700\u8981\u200b\u7ffb\u8bd1\u200b\u7684\u200b\u5b57\u7b26\u4e32\u200b\uff0c\u200b\u751f\u6210\u200b <code>.pot</code> \u200b\u6587\u4ef6\u200b\uff08Portable Object Template\uff09\u3002</p> Bash<pre><code>xgettext -o messages.pot myprogram.c\n</code></pre>"},{"location":"blog/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gnu-gettext%E5%AE%9E%E7%8E%B0%E8%BD%AF%E4%BB%B6%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81%E6%9C%BA%E5%88%B6/#\u521b\u5efa-po-\u6587\u4ef6","title":"\u521b\u5efa\u200b <code>.po</code> \u200b\u6587\u4ef6","text":"<p>\u200b\u4f7f\u7528\u200b <code>msginit</code> \u200b\u4ece\u200b <code>.pot</code> \u200b\u6587\u4ef6\u200b\u751f\u6210\u200b\u7279\u5b9a\u200b\u8bed\u8a00\u200b\u7684\u200b <code>.po</code> \u200b\u6587\u4ef6\u200b\u3002</p> Bash<pre><code>msginit -i messages.pot -o fr.po -l fr\n</code></pre>"},{"location":"blog/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gnu-gettext%E5%AE%9E%E7%8E%B0%E8%BD%AF%E4%BB%B6%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81%E6%9C%BA%E5%88%B6/#\u7f16\u8f91-po-\u6587\u4ef6","title":"\u7f16\u8f91\u200b <code>.po</code> \u200b\u6587\u4ef6","text":"<p>\u200b\u4f7f\u7528\u200b\u6587\u672c\u7f16\u8f91\u200b\u5668\u200b\u6216\u200b\u4e13\u7528\u5de5\u5177\u200b\uff08\u200b\u5982\u200b Poedit\uff09\u200b\u7ffb\u8bd1\u200b <code>msgstr</code> \u200b\u90e8\u5206\u200b\u3002</p>"},{"location":"blog/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gnu-gettext%E5%AE%9E%E7%8E%B0%E8%BD%AF%E4%BB%B6%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81%E6%9C%BA%E5%88%B6/#\u7f16\u8bd1-po-\u6587\u4ef6","title":"\u7f16\u8bd1\u200b <code>.po</code> \u200b\u6587\u4ef6","text":"<p>\u200b\u4f7f\u7528\u200b <code>msgfmt</code> \u200b\u5c06\u200b <code>.po</code> \u200b\u6587\u4ef6\u200b\u7f16\u8bd1\u200b\u4e3a\u200b <code>.mo</code> \u200b\u6587\u4ef6\u200b\uff08Machine Object\uff09\uff0c\u200b\u4f9b\u200b\u7a0b\u5e8f\u200b\u4f7f\u7528\u200b\u3002</p> Bash<pre><code>msgfmt -o fr.mo fr.po\n</code></pre>"},{"location":"blog/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gnu-gettext%E5%AE%9E%E7%8E%B0%E8%BD%AF%E4%BB%B6%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81%E6%9C%BA%E5%88%B6/#\u5728\u7a0b\u5e8f\u4e2d\u4f7f\u7528","title":"\u5728\u200b\u7a0b\u5e8f\u200b\u4e2d\u200b\u4f7f\u7528","text":"<p>\u200b\u901a\u8fc7\u200b <code>gettext</code> \u200b\u51fd\u6570\u200b\u52a0\u8f7d\u200b <code>.mo</code> \u200b\u6587\u4ef6\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u591a\u200b\u8bed\u8a00\u200b\u652f\u6301\u200b\u3002</p>"},{"location":"blog/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gnu-gettext%E5%AE%9E%E7%8E%B0%E8%BD%AF%E4%BB%B6%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81%E6%9C%BA%E5%88%B6/#\u793a\u4f8b\u4e3a-c-\u9879\u76ee\u6dfb\u52a0\u4e2d\u6587\u652f\u6301","title":"\u793a\u4f8b\u200b\uff1a\u200b\u4e3a\u200b C++ \u200b\u9879\u76ee\u200b\u6dfb\u52a0\u200b\u4e2d\u6587\u200b\u652f\u6301","text":""},{"location":"blog/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gnu-gettext%E5%AE%9E%E7%8E%B0%E8%BD%AF%E4%BB%B6%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81%E6%9C%BA%E5%88%B6/#c-\u9879\u76ee\u4ee3\u7801\u793a\u4f8b","title":"C++ \u200b\u9879\u76ee\u200b\u4ee3\u7801\u200b\u793a\u4f8b","text":"<p>\u200b\u5047\u8bbe\u200b\u6211\u4eec\u200b\u6709\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b C++ \u200b\u7a0b\u5e8f\u200b\uff0c\u200b\u4f7f\u7528\u200b <code>gettext</code> \u200b\u5b9e\u73b0\u200b\u56fd\u9645\u5316\u200b\uff1a</p> C++<pre><code>#include &lt;iostream&gt;\n#include &lt;libintl.h&gt; // gettext \u200b\u5e93\u200b\n#include &lt;locale.h&gt;  // setlocale \u200b\u51fd\u6570\u200b\n\n#define _(string) gettext(string) // \u200b\u5b9a\u4e49\u200b\u7ffb\u8bd1\u200b\u5b8f\u200b\n\nint main() {\n    // \u200b\u8bbe\u7f6e\u200b\u8bed\u8a00\u200b\u73af\u5883\u200b\n    setlocale(LC_ALL, \"zh_CN.UTF-8\");\n    bindtextdomain(\"myapp\", \"./locales\"); // \u200b\u6307\u5b9a\u200b\u7ffb\u8bd1\u200b\u6587\u4ef6\u76ee\u5f55\u200b\n    textdomain(\"myapp\"); // \u200b\u8bbe\u7f6e\u200b\u6587\u672c\u200b\u57df\u200b\n\n    // \u200b\u7ffb\u8bd1\u200b\u6587\u672c\u200b\n    std::cout &lt;&lt; _(\"Hello, world!\") &lt;&lt; std::endl;\n    std::cout &lt;&lt; _(\"Welcome to my C++ project.\") &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"blog/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gnu-gettext%E5%AE%9E%E7%8E%B0%E8%BD%AF%E4%BB%B6%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81%E6%9C%BA%E5%88%B6/#\u63d0\u53d6\u7ffb\u8bd1\u5b57\u7b26\u4e32","title":"\u63d0\u53d6\u200b\u7ffb\u8bd1\u200b\u5b57\u7b26\u4e32","text":"<p>\u200b\u4f7f\u7528\u200b <code>xgettext</code> \u200b\u5de5\u5177\u200b\u4ece\u200b C++ \u200b\u4ee3\u7801\u200b\u4e2d\u200b\u63d0\u53d6\u200b\u9700\u8981\u200b\u7ffb\u8bd1\u200b\u7684\u200b\u5b57\u7b26\u4e32\u200b\uff0c\u200b\u751f\u6210\u200b <code>.pot</code> \u200b\u6587\u4ef6\u200b\uff1a</p> Text Only<pre><code>sudo apt install gettext libgettextpo-dev\n</code></pre> Bash<pre><code>mkdir -p locales\nxgettext -o locales/myapp.pot -k_ main.cpp --from-code=UTF-8\n</code></pre> <p>\u200b\u751f\u6210\u200b\u7684\u200b <code>myapp.pot</code> \u200b\u6587\u4ef6\u200b\u5185\u5bb9\u200b\u5982\u4e0b\u200b\uff1a</p> Gettext Catalog<pre><code># SOME DESCRIPTIVE TITLE.\n# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER\n# This file is distributed under the same license as the PACKAGE package.\n# FIRST AUTHOR &lt;EMAIL@ADDRESS&gt;, YEAR.\n#\n#, fuzzy\nmsgid \"\"\nmsgstr \"\"\n\"Project-Id-Version: PACKAGE VERSION\\n\"\n\"Report-Msgid-Bugs-To: \\n\"\n\"POT-Creation-Date: 2025-01-04 17:06+0800\\n\"\n\"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\\n\"\n\"Last-Translator: FULL NAME &lt;EMAIL@ADDRESS&gt;\\n\"\n\"Language-Team: LANGUAGE &lt;LL@li.org&gt;\\n\"\n\"Language: \\n\"\n\"MIME-Version: 1.0\\n\"\n\"Content-Type: text/plain; charset=CHARSET\\n\"\n\"Content-Transfer-Encoding: 8bit\\n\"\n\n#: main.cpp:14\nmsgid \"Hello, world!\"\nmsgstr \"\"\n\n#: main.cpp:15\nmsgid \"Welcome to my C++ project.\"\nmsgstr \"\"\n</code></pre>"},{"location":"blog/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gnu-gettext%E5%AE%9E%E7%8E%B0%E8%BD%AF%E4%BB%B6%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81%E6%9C%BA%E5%88%B6/#\u521b\u5efa\u4e2d\u6587-po-\u6587\u4ef6","title":"\u521b\u5efa\u200b\u4e2d\u6587\u200b <code>.po</code> \u200b\u6587\u4ef6","text":"<p>\u200b\u4f7f\u7528\u200b <code>msginit</code> \u200b\u4ece\u200b <code>.pot</code> \u200b\u6587\u4ef6\u200b\u751f\u6210\u200b\u4e2d\u6587\u200b\u7684\u200b <code>.po</code> \u200b\u6587\u4ef6\u200b\uff1a</p> Bash<pre><code>mkdir -p locales/zh_CN/LC_MESSAGES\nmsginit -i locales/myapp.pot -o locales/zh_CN/LC_MESSAGES/myapp.po -l zh_CN --locale=zh_CN.UTF-8\n</code></pre> <p>\u200b\u751f\u6210\u200b\u7684\u200b <code>myapp.po</code> \u200b\u6587\u4ef6\u200b\u5185\u5bb9\u200b\u5982\u4e0b\u200b\uff1a</p> Gettext Catalog<pre><code># Chinese translations for PACKAGE package.\n# Copyright (C) 2025 THE PACKAGE'S COPYRIGHT HOLDER\n# This file is distributed under the same license as the PACKAGE package.\n#  &lt;ken@laptop-44oc4fg2.&gt;, 2025.\n#\nmsgid \"\"\nmsgstr \"\"\n\"Project-Id-Version: PACKAGE VERSION\\n\"\n\"Report-Msgid-Bugs-To: \\n\"\n\"POT-Creation-Date: 2025-01-04 17:06+0800\\n\"\n\"PO-Revision-Date: 2025-01-04 17:07+0800\\n\"\n\"Last-Translator:  &lt;ken@laptop-44oc4fg2.&gt;\\n\"\n\"Language-Team: Chinese (simplified) &lt;i18n-zh@googlegroups.com&gt;\\n\"\n\"Language: zh_CN\\n\"\n\"MIME-Version: 1.0\\n\"\n\"Content-Type: text/plain; charset=UTF-8\\n\"\n\"Content-Transfer-Encoding: 8bit\\n\"\n\n#: main.cpp:14\nmsgid \"Hello, world!\"\nmsgstr \"\u200b\u4f60\u597d\u200b\uff0c\u200b\u4e16\u754c\u200b\uff01\"\n\n#: main.cpp:15\nmsgid \"Welcome to my C++ project.\"\nmsgstr \"\u200b\u6b22\u8fce\u200b\u6765\u5230\u200b\u6211\u200b\u7684\u200b C++ \u200b\u9879\u76ee\u200b\u3002\"\n</code></pre> <p>\u200b\u5982\u679c\u200b\u4e0a\u9762\u200b\u751f\u6210\u200b\u7684\u200bcharset=UTF-8\u200b\u4e0d\u662f\u200bUTF-8\u200b\u53ef\u4ee5\u200b\u624b\u52a8\u200b\u6539\u200b\u4e00\u4e0b\u200b\u3002</p>"},{"location":"blog/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gnu-gettext%E5%AE%9E%E7%8E%B0%E8%BD%AF%E4%BB%B6%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81%E6%9C%BA%E5%88%B6/#\u7f16\u8bd1-po-\u6587\u4ef6\u4e3a-mo-\u6587\u4ef6","title":"\u7f16\u8bd1\u200b <code>.po</code> \u200b\u6587\u4ef6\u200b\u4e3a\u200b <code>.mo</code> \u200b\u6587\u4ef6","text":"<p>\u200b\u4f7f\u7528\u200b <code>msgfmt</code> \u200b\u5c06\u200b <code>.po</code> \u200b\u6587\u4ef6\u200b\u7f16\u8bd1\u200b\u4e3a\u200b <code>.mo</code> \u200b\u6587\u4ef6\u200b\uff0c\u200b\u4f9b\u200b\u7a0b\u5e8f\u200b\u4f7f\u7528\u200b\uff1a</p> Bash<pre><code>msgfmt -o locales/zh_CN/LC_MESSAGES/myapp.mo locales/zh_CN/LC_MESSAGES/myapp.po\n</code></pre>"},{"location":"blog/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gnu-gettext%E5%AE%9E%E7%8E%B0%E8%BD%AF%E4%BB%B6%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81%E6%9C%BA%E5%88%B6/#\u9879\u76ee\u76ee\u5f55\u7ed3\u6784","title":"\u9879\u76ee\u200b\u76ee\u5f55\u200b\u7ed3\u6784","text":"<p>\u200b\u6700\u7ec8\u200b\u7684\u200b\u76ee\u5f55\u200b\u7ed3\u6784\u200b\u5982\u4e0b\u200b\uff1a</p> Text Only<pre><code>myapp/\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 main.cpp\n\u251c\u2500\u2500 locales/\n\u2502   \u251c\u2500\u2500 myapp.pot\n\u2502   \u2514\u2500\u2500 zh_CN/\n\u2502       \u2514\u2500\u2500 LC_MESSAGES/\n\u2502           \u251c\u2500\u2500 myapp.po\n\u2502           \u2514\u2500\u2500 myapp.mo\n\u2514\u2500\u2500 Makefile\n</code></pre>"},{"location":"blog/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gnu-gettext%E5%AE%9E%E7%8E%B0%E8%BD%AF%E4%BB%B6%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81%E6%9C%BA%E5%88%B6/#\u7f16\u8bd1\u548c\u8fd0\u884c\u7a0b\u5e8f","title":"\u7f16\u8bd1\u200b\u548c\u200b\u8fd0\u884c\u200b\u7a0b\u5e8f","text":""},{"location":"blog/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gnu-gettext%E5%AE%9E%E7%8E%B0%E8%BD%AF%E4%BB%B6%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81%E6%9C%BA%E5%88%B6/#\u7f16\u8bd1-c-\u7a0b\u5e8f","title":"\u7f16\u8bd1\u200b C++ \u200b\u7a0b\u5e8f","text":"<p>\u200b\u786e\u4fdd\u200b\u5b89\u88c5\u200b\u4e86\u200b <code>gettext</code> \u200b\u5e93\u200b\uff0c\u200b\u5e76\u200b\u4f7f\u7528\u200b\u4ee5\u4e0b\u200b\u547d\u4ee4\u200b\u7f16\u8bd1\u7a0b\u5e8f\u200b\uff1a</p> Bash<pre><code>g++ -o myapp main.cpp -lintl\n</code></pre>"},{"location":"blog/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gnu-gettext%E5%AE%9E%E7%8E%B0%E8%BD%AF%E4%BB%B6%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81%E6%9C%BA%E5%88%B6/#\u8fd0\u884c\u7a0b\u5e8f","title":"\u8fd0\u884c\u200b\u7a0b\u5e8f","text":"<p>\u200b\u8bbe\u7f6e\u200b\u8bed\u8a00\u200b\u73af\u5883\u200b\u4e3a\u200b\u4e2d\u6587\u200b\u5e76\u200b\u8fd0\u884c\u200b\u7a0b\u5e8f\u200b\uff1a</p> Bash<pre><code>export LANG=zh_CN.UTF-8\n./myapp\n</code></pre> <p>\u200b\u8f93\u51fa\u200b\u7ed3\u679c\u200b\u4e3a\u200b\uff1a</p> Text Only<pre><code>\u200b\u4f60\u597d\u200b\uff0c\u200b\u4e16\u754c\u200b\uff01\n\u200b\u6b22\u8fce\u200b\u6765\u5230\u200b\u6211\u200b\u7684\u200b C++ \u200b\u9879\u76ee\u200b\u3002\n</code></pre>"},{"location":"blog/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gnu-gettext%E5%AE%9E%E7%8E%B0%E8%BD%AF%E4%BB%B6%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81%E6%9C%BA%E5%88%B6/#\u793a\u4f8b\u4e3a-rust-\u9879\u76ee\u6dfb\u52a0\u4e2d\u6587\u652f\u6301","title":"\u793a\u4f8b\u200b\uff1a\u200b\u4e3a\u200b Rust \u200b\u9879\u76ee\u200b\u6dfb\u52a0\u200b\u4e2d\u6587\u200b\u652f\u6301","text":"<p>\u200b\u5f53\u7136\u200b\u53ef\u4ee5\u200b\uff01\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u4e00\u4e2a\u200b\u4e3a\u200b Rust \u200b\u9879\u76ee\u200b\u7f16\u5199\u200b\u7684\u200b <code>.po</code> \u200b\u6587\u4ef6\u200b\u793a\u4f8b\u200b\u3002\u200b\u5047\u8bbe\u200b\u6211\u4eec\u200b\u6709\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b Rust \u200b\u9879\u76ee\u200b\uff0c\u200b\u9700\u8981\u200b\u652f\u6301\u200b\u82f1\u8bed\u200b\uff08\u200b\u9ed8\u8ba4\u200b\uff09\u200b\u548c\u200b\u6cd5\u8bed\u200b\uff08<code>fr</code>\uff09\u200b\u4e24\u79cd\u200b\u8bed\u8a00\u200b\u3002</p>"},{"location":"blog/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gnu-gettext%E5%AE%9E%E7%8E%B0%E8%BD%AF%E4%BB%B6%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81%E6%9C%BA%E5%88%B6/#rust-\u9879\u76ee\u4ee3\u7801\u793a\u4f8b","title":"Rust \u200b\u9879\u76ee\u200b\u4ee3\u7801\u200b\u793a\u4f8b","text":"<p>\u200b\u5047\u8bbe\u200b\u6211\u4eec\u200b\u6709\u200b\u4ee5\u4e0b\u200b Rust \u200b\u4ee3\u7801\u200b\uff0c\u200b\u4f7f\u7528\u200b\u4e86\u200b <code>gettext</code> \u200b\u5e93\u6765\u200b\u5b9e\u73b0\u200b\u56fd\u9645\u5316\u200b\uff1a</p> Rust<pre><code>use gettextrs::{gettext, LocaleCategory};\n\nfn main() {\n    // \u200b\u8bbe\u7f6e\u200b\u8bed\u8a00\u200b\u73af\u5883\u200b\n    gettextrs::setlocale(LocaleCategory::LcAll, \"zh_CN.UTF-8\");\n    gettextrs::bindtextdomain(\"myapp\", \"./locales\").unwrap();\n    gettextrs::textdomain(\"myapp\").unwrap();\n\n    // \u200b\u7ffb\u8bd1\u200b\u6587\u672c\u200b\n    println!(\"{}\", gettext(\"Hello, world!\"));\n    println!(\"{}\", gettext(\"Welcome to my Rust project.\"));\n}\n</code></pre>"},{"location":"blog/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gnu-gettext%E5%AE%9E%E7%8E%B0%E8%BD%AF%E4%BB%B6%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81%E6%9C%BA%E5%88%B6/#\u63d0\u53d6\u7ffb\u8bd1\u5b57\u7b26\u4e32_1","title":"\u63d0\u53d6\u200b\u7ffb\u8bd1\u200b\u5b57\u7b26\u4e32","text":"<p>\u200b\u4f7f\u7528\u200b <code>xgettext</code> \u200b\u5de5\u5177\u200b\u4ece\u200b Rust \u200b\u4ee3\u7801\u200b\u4e2d\u200b\u63d0\u53d6\u200b\u9700\u8981\u200b\u7ffb\u8bd1\u200b\u7684\u200b\u5b57\u7b26\u4e32\u200b\uff0c\u200b\u751f\u6210\u200b <code>.pot</code> \u200b\u6587\u4ef6\u200b\uff1a</p> Bash<pre><code>xgettext -o locales/myapp.pot -kgettext -kngettext:1,2 src/main.rs\n</code></pre> <p>\u200b\u751f\u6210\u200b\u7684\u200b <code>myapp.pot</code> \u200b\u6587\u4ef6\u200b\u5185\u5bb9\u200b\u5982\u4e0b\u200b\uff1a</p> Gettext Catalog<pre><code>#: src/main.rs:9\nmsgid \"Hello, world!\"\nmsgstr \"\"\n\n#: src/main.rs:10\nmsgid \"Welcome to my Rust project.\"\nmsgstr \"\"\n</code></pre>"},{"location":"blog/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gnu-gettext%E5%AE%9E%E7%8E%B0%E8%BD%AF%E4%BB%B6%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81%E6%9C%BA%E5%88%B6/#\u8fd0\u884c\u7a0b\u5e8f_1","title":"\u8fd0\u884c\u200b\u7a0b\u5e8f","text":"<p>\u200b\u8bbe\u7f6e\u200b\u8bed\u8a00\u200b\u73af\u5883\u200b\u4e3a\u200b\u6cd5\u8bed\u200b\u5e76\u200b\u8fd0\u884c\u200b\u7a0b\u5e8f\u200b\uff1a</p> Bash<pre><code>export LANG=zh_CN.UTF-8\ncargo run\n</code></pre> <p>.mo\u200b\u6587\u4ef6\u200b\u4e2d\u200b\uff0c\u200b\u662f\u200b\u901a\u8fc7\u200bmsgid\u200b\u53bb\u200b\u5339\u914d\u200b\u53ef\u6267\u884c\u7a0b\u5e8f\u200b\u4e2d\u200b\u7684\u200b\u5b57\u7b26\u4e32\u200b\u7684\u200b\u3002\u200b\u6240\u4ee5\u200b\u5982\u679c\u200brust\u200b\u548c\u200bc++\u200b\u4e2d\u200b\u7684\u200b\u5b57\u7b26\u200b\u662f\u200b\u4e00\u6837\u200b\u7684\u200b\u3002\u200b\u90a3\u4e48\u200b\u662f\u200b\u53ef\u4ee5\u200b\u5171\u7528\u200b.mo\u200b\u6587\u4ef6\u200b\u6765\u200b\u7ffb\u8bd1\u200b\u7684\u200b\u3002\u200b\u540c\u7406\u200b\uff0c\u200b\u5176\u5b83\u200b\u8bed\u8a00\u200b\u4e5f\u200b\u662f\u200b\u3002</p>"},{"location":"blog/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gnu-gettext%E5%AE%9E%E7%8E%B0%E8%BD%AF%E4%BB%B6%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81%E6%9C%BA%E5%88%B6/#\u6ca1\u6709\u6210\u529f\u7ffb\u8bd1","title":"\u6ca1\u6709\u200b\u6210\u529f\u200b\u7ffb\u8bd1\u200b\uff1f","text":"<p>\u200b\u5982\u679c\u200b\u4f60\u200b\u7684\u200bc++\u200b\u548c\u200brust\uff0c\u200b\u8fd0\u884c\u200b\u6ca1\u6709\u200b\u7ffb\u8bd1\u200b\u6548\u679c\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5c1d\u8bd5\u200b\u4e0b\u9762\u200b\u7684\u200b\u65b9\u6cd5\u200b\u89e3\u51b3\u200b\uff1a </p>Text Only<pre><code># \u200b\u901a\u8fc7\u200b\u547d\u4ee4\u200b\u67e5\u770b\u200b\u7cfb\u7edf\u200b\u5b58\u5728\u200b\u7684\u200blocale\nlocale -a\n\n# \u200b\u5982\u679c\u200b\u53d1\u73b0\u200b\u6ca1\u6709\u200bzh_CN.utf8\nlocale-gen zh_CN.UTF-8\n</code></pre><p></p> <p>\u200b\u7136\u540e\u200b\u518d\u200b\u8fd0\u884c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u4e86\u200b\u3002</p> <p>\u200b\u4e3a\u200b Rust \u200b\u9879\u76ee\u200b\u521b\u5efa\u200b\u4e86\u200b\u4e00\u4e2a\u200b <code>.po</code> \u200b\u6587\u4ef6\u200b\uff0c\u200b\u5e76\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u591a\u200b\u8bed\u8a00\u200b\u652f\u6301\u200b\u3002<code>.po</code> \u200b\u6587\u4ef6\u200b\u662f\u200b\u56fd\u9645\u5316\u200b\u7684\u200b\u6838\u5fc3\u200b\uff0c\u200b\u7ed3\u5408\u200b <code>gettext</code> \u200b\u5de5\u5177\u200b\u94fe\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u8f7b\u677e\u200b\u7ba1\u7406\u200b\u591a\u200b\u8bed\u8a00\u200b\u7ffb\u8bd1\u200b\u3002</p>"},{"location":"blog/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8gnu-gettext%E5%AE%9E%E7%8E%B0%E8%BD%AF%E4%BB%B6%E5%9B%BD%E9%99%85%E5%8C%96%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81%E6%9C%BA%E5%88%B6/#\u5e38\u7528\u5de5\u5177\u63a8\u8350","title":"\u5e38\u7528\u5de5\u5177\u200b\u63a8\u8350","text":"<ul> <li>Poedit\uff1a\u200b\u4e00\u6b3e\u200b\u56fe\u5f62\u5316\u200b\u5de5\u5177\u200b\uff0c\u200b\u9002\u5408\u200b\u7f16\u8f91\u200b <code>.po</code> \u200b\u6587\u4ef6\u200b\u3002</li> <li>GNU gettext\uff1a\u200b\u547d\u4ee4\u884c\u200b\u5de5\u5177\u96c6\u200b\uff0c\u200b\u5305\u62ec\u200b <code>xgettext</code>\u3001<code>msginit</code>\u3001<code>msgfmt</code> \u200b\u7b49\u200b\u3002</li> <li>Weblate\uff1a\u200b\u57fa\u4e8e\u200b Web \u200b\u7684\u200b\u7ffb\u8bd1\u200b\u5e73\u53f0\u200b\uff0c\u200b\u652f\u6301\u200b\u534f\u4f5c\u200b\u7ffb\u8bd1\u200b\u3002</li> </ul> <p>\u200b\u901a\u8fc7\u200b GNU gettext\uff0c\u200b\u5f00\u53d1\u8005\u200b\u53ef\u4ee5\u200b\u8f7b\u677e\u200b\u5b9e\u73b0\u200b\u8f6f\u4ef6\u200b\u7684\u200b\u591a\u200b\u8bed\u8a00\u200b\u652f\u6301\u200b\u673a\u5236\u200b\u3002<code>.po</code> \u200b\u6587\u4ef6\u200b\u4f5c\u4e3a\u200b\u7ffb\u8bd1\u200b\u7684\u200b\u6838\u5fc3\u200b\u8f7d\u4f53\u200b\uff0c\u200b\u7ed3\u5408\u200b\u5f3a\u5927\u200b\u7684\u200b\u5de5\u5177\u200b\u94fe\u200b\uff0c\u200b\u4f7f\u5f97\u200b\u56fd\u9645\u5316\u200b\u53d8\u5f97\u200b\u7b80\u5355\u200b\u9ad8\u6548\u200b\u3002\u200b\u65e0\u8bba\u662f\u200b\u5c0f\u578b\u200b\u5de5\u5177\u200b\u8fd8\u662f\u200b\u5927\u578b\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\uff0cgettext \u200b\u90fd\u200b\u80fd\u200b\u5e2e\u52a9\u200b\u4f60\u200b\u5feb\u901f\u200b\u5b9e\u73b0\u200b\u591a\u200b\u8bed\u8a00\u200b\u652f\u6301\u200b\uff0c\u200b\u8ba9\u200b\u4f60\u200b\u7684\u200b\u8f6f\u4ef6\u200b\u8d70\u5411\u200b\u5168\u7403\u200b\u3002</p> <p>\u200b\u53c2\u8003\u200b\uff1a</p> <ul> <li>GNU gettext \u200b\u5b98\u65b9\u200b\u6587\u6863\u200b</li> <li>Poedit \u200b\u5b98\u7f51\u200b</li> <li>Weblate \u200b\u5b98\u7f51\u200b</li> <li>\u200b\u8bed\u8a00\u200b\u6587\u4ef6\u200b.po .pot\u200b\u548c\u200b.mo\u200b\u7b80\u4ecb\u200b\u53ca\u200bgettext\u200b\u5de5\u5177\u200b\u7b80\u4ecb\u200b</li> <li>\u200b\u4ece\u96f6\u5f00\u59cb\u200b\u7f16\u5199\u200b\u4e00\u4e2a\u200b .po \u200b\u6587\u4ef6\u200b\u89e3\u6790\u5668\u200b</li> <li>Make your GCC compiler kawaii.</li> </ul> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>zip\u200b\u538b\u7f29\u200b\u683c\u5f0f\u200b\u4e3a\u4ec0\u4e48\u200b\u662f\u4ece\u200b\u540e\u200b\u5f80\u524d\u200b\u5f00\u59cb\u200b\u89e3\u6790\u200b\u7684\u200b\uff1f</li> <li>C++\u200b\u5e38\u89c1\u200b\u9519\u8bef\u200b\uff1a\u200b\u7aa5\u63a2\u200bstd::Sort\u200b\u7684\u200bcmp\u200b\u51fd\u6570\u200b\u7528\u9519\u200b\uff0c\u200b\u5bfc\u81f4\u200b\u7684\u200b\u7a0b\u5e8f\u200babort\u200b\u5206\u6790\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAproxychains%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7%E4%B8%80/","title":"\u81ea\u5df1\u200b\u52a8\u624b\u200b\u5199\u200b\u4e00\u4e2a\u200bproxychains\u200b\u4ee3\u7406\u200b\u5de5\u5177\u200b\uff08\u200b\u4e00\u200b\uff09","text":"<p>\u200b\u60f3\u8981\u200b\u81ea\u5df1\u200b\u52a8\u624b\u200b\u5199\u200b\u4e00\u4e2a\u200bproxychains\u200b\u4ee3\u7406\u200b\u5de5\u5177\u200b\uff0c\u200b\u9996\u5148\u200b\u8981\u200b\u660e\u767d\u200b\u5b83\u200b\u7684\u200b\u539f\u7406\u200b\u548c\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u7684\u200b\uff0c\u200b\u4e00\u8d77\u200b\u6765\u770b\u200b\u4e00\u4e0b\u200b\u3002</p>"},{"location":"blog/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAproxychains%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7%E4%B8%80/#proxychains\u5de5\u5177\u5b9e\u73b0\u539f\u7406","title":"proxychains\u200b\u5de5\u5177\u200b\u5b9e\u73b0\u200b\u539f\u7406","text":"<p>\u200b\u76f8\u4fe1\u200b\u5f88\u591a\u200b\u670b\u53cb\u200b\u90fd\u200b\u542c\u200b\u8fc7\u200b\u6216\u8005\u200b\u4f7f\u7528\u200b\u8fc7\u200bproxychains\u200b\u5de5\u5177\u200b\uff0c\u200b\u5b83\u200b\u662f\u200b\u4e00\u4e2a\u200b\u7ec8\u7aef\u200b\u4ee3\u7406\u200b\u5de5\u5177\u200b\uff0c\u200b\u652f\u6301\u200bHTTP proxy\u3001Socks5\u3001Socks4\u200b\u534f\u8bae\u200b\uff0c\u200b\u540c\u65f6\u200b\u8fd8\u200b\u5206\u4e3a\u200bStrict\u3001Dynamic\u3001Random\u200b\u4e09\u79cd\u200b\u6a21\u5f0f\u200b\u3002\u200b\u5173\u4e8e\u200b\u5b83\u200b\u7684\u200b\u7528\u6cd5\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200b\u4e4b\u524d\u200b\u7684\u200b\u6587\u7ae0\u200b\uff0cSquid\u200b\u642d\u5efa\u200bHTTP\u200b\u4ee3\u7406\u670d\u52a1\u5668\u200b\u3002</p> <p>\u200b\u4ee5\u200blinux\u200b\u5e73\u53f0\u200b\u4e3a\u4f8b\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u7684\u200b\u6838\u5fc3\u6280\u672f\u200b\u70b9\u200b\uff1a</p>"},{"location":"blog/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAproxychains%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7%E4%B8%80/#\u4e00ld_preload\u548c\u81ea\u5b9a\u4e49libc\u51fd\u6570","title":"\uff08\u200b\u4e00\u200b\uff09LD_PRELOAD\u200b\u548c\u200b\u81ea\u5b9a\u4e49\u200blibc\u200b\u51fd\u6570","text":"<p>\u200b\u91c7\u7528\u200b\u4e86\u200bLD_PRELOAD\uff0c\u200b\u7136\u540e\u200b\u6211\u4eec\u200b\u81ea\u5b9a\u4e49\u200b\u4e86\u200bc\u200b\u5e93\u200b\u7684\u200bconnect\u200b\u51fd\u6570\u200b\uff0c\u200b\u8fd9\u6837\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u8ba9\u200b\u4f60\u200b\u7684\u200b\u7ec8\u7aef\u200b\u547d\u4ee4\u884c\u200b\u5de5\u5177\u200b\u8c03\u7528\u200b\u5230\u200b\u6211\u4eec\u200b\u5b9e\u73b0\u200b\u7684\u200bconnect\u200b\u51fd\u6570\u200b\u3002\u200b\u5176\u5b83\u200b\u8981\u200b\u81ea\u5b9a\u4e49\u200b\u7684\u200b\u51fd\u6570\u200b\u4e5f\u200b\u4e00\u6837\u200b\u3002 \u200b\u8fd9\u200b\u540c\u6837\u200b\u4e5f\u200b\u51b3\u5b9a\u200b\u4e86\u200bproxychains\u200b\u4e0d\u80fd\u200b\u4ee3\u7406\u200b\u9759\u6001\u200b\u7f16\u8bd1\u200b\u7684\u200b\u5de5\u5177\u200b\uff0c\u200b\u53ea\u80fd\u200b\u4ee3\u7406\u200b\u52a0\u8f7d\u200b\u52a8\u6001\u200b\u5e93\u200b\u7684\u200b\u5de5\u5177\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u53ea\u6709\u200b\u52a8\u6001\u200b\u5e93\u200b\uff0c\u200b\u624d\u200b\u53ef\u4ee5\u200bLD_PRELOAD\u200b\u52a0\u8f7d\u200b\u5230\u200b\u6211\u4eec\u200b\u81ea\u5b9a\u4e49\u200b\u7684\u200b\u5b9e\u73b0\u200b\u3002</p> <p>!!! Tip: \u200b\u52a8\u6001\u200b\u5e93\u200b\u548c\u200b\u9759\u6001\u200b\u5e93\u200b\u7684\u200b\u533a\u522b\u200b\uff1f\u200b\u4ee5\u53ca\u200bgo\u200b\u8bed\u8a00\u200b\u7684\u200b\u5b9e\u73b0\u200b\u533a\u522b\u200b     \u200b\u52a0\u8f7d\u200b\u52a8\u6001\u200b\u5e93\u200b\u7684\u200b\u4f18\u70b9\u200b\u5927\u5bb6\u200b\u53ef\u80fd\u200b\u90fd\u200b\u77e5\u9053\u200b\uff0c\u200b\u6bd4\u5982\u200b\u53ef\u4ee5\u200b\u4f7f\u5f97\u200b\u5de5\u5177\u200b\u66f4\u200b\u5c0f\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u66ff\u6362\u200bso\u200b\u5347\u7ea7\u200b\u3002\u200b\u9759\u6001\u200b\u5e93\u200b\u66f4\u200b\u5bb9\u6613\u200b\u5206\u53d1\u200b\uff0c\u200b\u6bd4\u5982\u200b\u6211\u200b\u7f16\u8bd1\u200b\u4e86\u200b\u4e00\u4e2a\u200bexe\u200b\u53ef\u6267\u884c\u6587\u4ef6\u200b\uff0c\u200b\u62f7\u8d1d\u5230\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u673a\u5668\u200b\u3002\u200b\u5982\u679c\u200b\u52a8\u6001\u200b\u5e93\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u62a5\u9519\u200b\u7f3a\u5931\u200bso\uff0c\u200b\u90a3\u4e48\u200b\u9759\u6001\u200b\u5e93\u200b\u76f4\u63a5\u200b\u7f16\u8bd1\u200b\u5230\u200bexe\u200b\u4e2d\u200b\uff0c\u200b\u5c31\u200b\u66f4\u200b\u5bb9\u6613\u200b\u5206\u53d1\u200b\u5230\u200b\u5176\u5b83\u200b\u673a\u5668\u200b\u6267\u884c\u200b\u4e86\u200b\u3002     \u200b\u5176\u5b83\u200b\u8bed\u8a00\u200brust\u3001go\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u7f16\u8bd1\u6210\u200b\u9759\u6001\u200b\u6216\u8005\u200b\u52a8\u6001\u200b\u3002go\u200b\u8bed\u8a00\u200b\u5982\u679c\u200b\u662f\u200b\u91c7\u7528\u200bGC(Go Compiler)\u200b\u7f16\u8bd1\u5668\u200bLD_PRELOAD\u200b\u4f1a\u200b\u5931\u6548\u200b\u3002\u200b\u56e0\u4e3a\u200b\u5b83\u200b\u5e95\u5c42\u200b\u8c03\u7528\u200b\u7684\u200b\u81ea\u5df1\u200b\u7684\u200b\u5b9e\u73b0\u200b,\u200b\u76f4\u63a5\u200b\u8c03\u7528\u200b syscall \u200b\u8fdb\u884c\u200b\u4e86\u200b\u7cfb\u7edf\u200b\u8c03\u7528\u200b\uff0c\u200b\u800c\u200b\u4e0d\u662f\u200blibc\u200b\u5e93\u200b\u7684\u200bconnect\u200b\u5b9e\u73b0\u200b\u3002\u200b\u56e0\u6b64\u200bgo\u200b\u5199\u200b\u7684\u200b\u7a0b\u5e8f\u200b\u5982\u679c\u200b\u8981\u200bproxychains\u200b\u4ee3\u7406\u200b\uff0c\u200b\u9700\u8981\u200b\u91c7\u7528\u200bGCCGO\u200b\u7f16\u8bd1\u5668\u200b\u7f16\u8bd1\u200b\u3002go\u200b\u7684\u200b\u5b9e\u73b0\u200b\u533a\u522b\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200bGolang\u200b\u7f16\u5199\u7a0b\u5e8f\u200b\u662f\u200b\u65e0\u6cd5\u200b\u4f7f\u7528\u200bproxychains\u200b\u4ee3\u7406\u200b\u3002</p> <p>proxychains\u200b\u4e2d\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200bLD_PRELOAD\u200b\u5462\u200b\uff1f</p> <p>\u200b\u9996\u5148\u200bproxychains\u200b\u4f1a\u200b\u7f16\u8bd1\u6210\u200b\u4e00\u4e2a\u200bso\u200b\u52a8\u6001\u94fe\u63a5\u5e93\u200b\uff0c\u200b\u81ea\u5b9a\u4e49\u200b\u4e86\u200bconnect\u200b\u51fd\u6570\u200b\uff0c\u200b\u53bb\u200b\u548c\u200b\u4ee3\u7406\u670d\u52a1\u5668\u200b\u5efa\u7acb\u200b\u8fde\u63a5\u200bns\uff0c\u200b\u8fd4\u56de\u200bns\u200b\u63cf\u8ff0\u7b26\u200b\u3002\u200b\u4ee5\u540e\u200b\u7684\u200bsend\u200b\u8bf7\u6c42\u200b\u90fd\u200b\u4f1a\u200b\u901a\u8fc7\u200bns\u200b\u63cf\u8ff0\u7b26\u200b\uff0c\u200b\u5373\u200b\u7ecf\u8fc7\u200b\u4ee3\u7406\u670d\u52a1\u5668\u200b\u3002 \u200b\u5728\u200b\u542f\u52a8\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u65f6\u200b\uff0c\u200b\u53ea\u200b\u9700\u8981\u200b\u5c06\u200blibproxychains.so\u200b\u8bbe\u7f6e\u200b\u5230\u200bLD_PRELOAD\u200b\u73af\u5883\u53d8\u91cf\u200b\u4e2d\u200b\u3002\u200b\u5982\u4e0b\u200b\uff1a </p>Bash<pre><code>LD_PRELOAD=/usr/lib/libproxychains.so wget www.google.com\n</code></pre> \u200b\u6211\u4eec\u200b\u4f7f\u7528\u200bapt\u200b\u5b89\u88c5\u200b\u7684\u200bproxychains\u200b\u5de5\u5177\u200b\u6709\u200b\u4e24\u4e2a\u200b\u53ef\u6267\u884c\u6587\u4ef6\u200b\uff0c\u200b\u5176\u4e2d\u200b\u4e00\u4e2a\u200b\u662f\u200bshell\u200b\u5199\u200b\u7684\u200b\uff0c\u200b\u91cc\u9762\u200b\u5c31\u200b\u8bbe\u7f6e\u200b\u4e86\u200bLD_PRELOAD\u200b\u73af\u5883\u53d8\u91cf\u200b\u4e3a\u200blibproxychains.so\uff0c\u200b\u7136\u540e\u200b\u518d\u200b\u6267\u884c\u7a0b\u5e8f\u200b\u3002\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u662f\u200b\u7f16\u8bd1\u6210\u200b\u7684\u200bexec\u200b\u53ef\u6267\u884c\u6587\u4ef6\u200b\uff0c\u200b\u518d\u200bmain\u200b\u51fd\u6570\u200b\u4e2d\u200b\u8bbe\u7f6e\u200bLD_PRELOAD\uff0c\u200b\u7136\u540e\u200b\u8c03\u7528\u200bexecv\u200b\u6267\u884c\u7a0b\u5e8f\u200b\u3002\u200b\u5b9e\u73b0\u200b\u7684\u200b\u539f\u7406\u200b\u90fd\u200b\u662f\u200b\u4e00\u6837\u200b\u7684\u200b\u3002 C<pre><code>https://github1s.com/haad/proxychains/blob/master/src/main.c#L136-L144\nint main(){\n    #ifndef IS_MAC\n    snprintf(buf, sizeof(buf), \"%s/%s\", prefix, dll_name);\n    setenv(\"LD_PRELOAD\", buf, 1);\n#else\n    snprintf(buf, sizeof(buf), \"%s/%s\", prefix, dll_name);\n    setenv(\"DYLD_INSERT_LIBRARIES\", buf, 1);\n    setenv(\"DYLD_FORCE_FLAT_NAMESPACE\", \"1\", 1);\n#endif\n    execvp(argv[start_argv], &amp;argv[start_argv]);\n    ......\n}\n</code></pre><p></p> <p>\u200b\u4f60\u200b\u662f\u5426\u200b\u4e5f\u200b\u4f1a\u200b\u7a81\u7136\u200b\u60f3\u5230\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u6280\u672f\u200b\u540c\u6837\u200b\u53ef\u4ee5\u200b\u7528\u4e8e\u200b\u6d4b\u8bd5\u200b\u548c\u200bdebug\u200b\u8c03\u8bd5\u200b\u4e2d\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u540e\u9762\u200b\u53ef\u4ee5\u200b\u5206\u4eab\u200b\u4e00\u4e0b\u200b\u3002</p>"},{"location":"blog/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAproxychains%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7%E4%B8%80/#\u4e8cdlsym-rtld_next","title":"\uff08\u200b\u4e8c\u200b\uff09dlsym RTLD_NEXT","text":"<p>\u200b\u76ee\u7684\u200b\u662f\u200b\u901a\u8fc7\u200bdlsym RTLD_NEXT\u200b\u83b7\u53d6\u200bc\u200b\u5e93\u200b\u7684\u200bconnect\uff0c\u200b\u8bb0\u200b\u4e3a\u200btrue_connect\uff0c\u200b\u5728\u200b\u9700\u8981\u200b\u76f4\u63a5\u200b\u8c03\u7528\u200bc\u200b\u5e93\u200b\u7684\u200bconnect\u200b\u51fd\u6570\u200b\u65f6\u200b\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u8c03\u7528\u200btrue_connect\u200b\u4e86\u200b\u3002 \u200b\u5b9e\u73b0\u200b\uff1a </p>C<pre><code>// https://github.com/haad/proxychains/blob/master/src/libproxychains.c\nstatic void* load_sym(char* symname, void* proxyfunc) {\n    void *funcptr = dlsym(RTLD_NEXT, symname);\n    ......\n    return funcptr;\n}\n\n#define SETUP_SYM(X) do { true_ ## X = load_sym( # X, X ); } while(0)\n\nSETUP_SYM(connect);\nSETUP_SYM(gethostbyname);\nSETUP_SYM(getaddrinfo);\nSETUP_SYM(freeaddrinfo);\nSETUP_SYM(gethostbyaddr);\nSETUP_SYM(getnameinfo);\n</code></pre><p></p>"},{"location":"blog/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAproxychains%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7%E4%B8%80/#\u4e09dup2\u91cd\u5b9a\u5411\u6587\u4ef6\u63cf\u8ff0\u7b26","title":"\uff08\u200b\u4e09\u200b\uff09dup2\u200b\u91cd\u5b9a\u5411\u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26","text":"<p>dup2\u200b\u53ef\u4ee5\u200b\u5b9e\u73b0\u200b\u628a\u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26\u200bA\u200b\u91cd\u5b9a\u5411\u200b\u5230\u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26\u200bB\u3002\u200b\u4e5f\u5c31\u662f\u8bf4\u200b\uff0c\u200b\u6240\u6709\u200b\u5bf9\u200bA\u200b\u6709\u200b\u5199\u5165\u200b\uff0c\u200b\u6700\u7ec8\u200b\u90fd\u200b\u4f1a\u200b\u5199\u5165\u200b\u5230\u200bB\u3002 ns\u200b\u8868\u793a\u200bclient\u200b\u548c\u200bproxy server\u200b\u5efa\u7acb\u200b\u7684\u200b\u8fde\u63a5\u200bfd\uff0csock\u200b\u662f\u200b\u7528\u6237\u200b\u8bf7\u6c42\u200bconnect\u200b\u7684\u200b\u53c2\u6570\u200b\u3002 </p>C<pre><code>dup2(ns, sock); // sock\u200b\u662f\u200b\u7528\u6237\u200b\u8bf7\u6c42\u200bconnect\u200b\u7684\u200b\u53c2\u6570\u200b\uff0c\u200b\u901a\u8fc7\u200bdup2\u200b\u51fd\u6570\u200b\u5c06\u200b\u548c\u200b\u4ee3\u7406\u200b\u7684\u200bsock\u200b\u91cd\u5b9a\u5411\u200b\u7ed9\u200b\u7528\u6237\u200b\u8bf7\u6c42\u200b\u7684\u200bsock\uff0c\u200b\u56e0\u6b64\u200b\u7528\u6237\u200b\u4f7f\u7528\u200b\u4e0a\u200b\u4e86\u200b\u4ee3\u7406\u200b\u94fe\u200b\u8bbf\u95ee\u200b\u76ee\u6807\u200b\u5730\u5740\u200b\n</code></pre><p></p> <p>\u200b\u5f53\u7136\u200b\u8fd8\u6709\u200b\u53e6\u200b\u4e00\u79cd\u200b\u5b9e\u73b0\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u4e0d\u200b\u91c7\u7528\u200bdup2\uff0c\u200b\u800c\u662f\u200b\u7528\u6237\u200b\u81ea\u5b9a\u4e49\u200bwrite\u200b\u548c\u200bread\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u8986\u76d6\u200bc\u200b\u5e93\u4e2d\u200b\u7684\u200bwrite\u200b\u548c\u200bread\u200b\u65b9\u6cd5\u200b\u3002\u200b\u5b9e\u73b0\u200b\u539f\u7406\u200b\u662f\u200b\uff0c\u200b\u5efa\u7acb\u200b\u597d\u200b\u548c\u200bproxy\u200b\u7684\u200b\u8fde\u63a5\u200b\u540e\u200b\uff0c\u200b\u5c06\u200b\u7528\u6237\u200bread\u3001write\u200b\u548c\u200bproxy\u200b\u7684\u200bread\u3001write channel\u200b\u7ed1\u5b9a\u200b\u4e0a\u200b\uff0c\u200b\u8fdb\u884c\u200b\u901a\u4fe1\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200balifarrokh/proxychains\u3002</p> <p>\u200b\u5b8c\u6574\u200b\u6d41\u7a0b\u200b</p> <ul> <li>\u200b\u81ea\u5b9a\u4e49\u200bconnect\u200b\u51fd\u6570\u200b\uff0c\u200b\u8fd4\u56de\u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26\u200bfd_a</li> <li>\u200b\u5229\u7528\u200bdlsym\u200b\u62ff\u5230\u200b\u771f\u5b9e\u200b\u7684\u200bconnect\u200b\u51fd\u6570\u200b\uff0c\u200b\u4e0e\u200bproxy\u200b\u5efa\u7acb\u200b\u8fde\u63a5\u200b\uff0c\u200b\u62ff\u5230\u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26\u200bfd_b</li> <li>\u200b\u5229\u7528\u200bdup2\u200b\u628a\u200bfd_a\u200b\u91cd\u5b9a\u5411\u200b\u5230\u200bfd_b</li> <li>\u200b\u53d1\u5230\u200bfd_a\u200b\u7684\u200b\u6570\u636e\u5305\u200b\u90fd\u200b\u88ab\u200b\u53d1\u9001\u5230\u200b\u4e86\u200bproxy\u200b\u4e0a\u200b</li> <li>\u200b\u6570\u636e\u200b\u5230\u200b\u4e86\u200bproxy\u200b\u4e0a\u9762\u200b\u4e4b\u540e\u200b\uff0c\u200b\u5269\u4e0b\u200b\u7684\u200b\u4efb\u52a1\u200b\u5c31\u200b\u4ea4\u7ed9\u200bproxy\u200b\u4e86\u200b</li> </ul> <p>\u200b\u53c2\u8003\u200b\uff1aproxychains\u200b\u662f\u200b\u600e\u4e48\u200b\u5de5\u4f5c\u200b\u7684\u200b</p>"},{"location":"blog/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAproxychains%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7%E4%B8%80/#http\u4ee3\u7406\u94fe\u662f\u5982\u4f55\u5efa\u7acb\u7684\u5462","title":"HTTP\u200b\u4ee3\u7406\u200b\u94fe\u662f\u200b\u5982\u4f55\u200b\u5efa\u7acb\u200b\u7684\u200b\u5462\u200b\uff1f","text":"<p>!HTTP\u200b\u4ee3\u7406\u200b\u94fe\u200b\u8fc7\u7a0b\u200b</p> <p>\u200b\u4ee5\u200bHTTP proxy\u200b\u534f\u8bae\u200b\u4e3a\u4f8b\u200b\uff0c\u200b\u5b83\u200b\u7684\u200b\u539f\u7406\u200b\u5176\u5b9e\u200b\u5c31\u662f\u200b\u53d1\u4e86\u200b\u4e00\u4e2a\u200b\u8bf7\u6c42\u200b\u7ed9\u200b\u4ee3\u7406\u670d\u52a1\u5668\u200b\uff0c\u200b\u8fd9\u4e2a\u200bHTTP\u200b\u8bf7\u6c42\u200b\u5934\u200b\u662f\u200b\u201dCONNECT\u201d\u3002</p> Bash<pre><code>CONNECT ip:port HTTP/1.0\\r\\n\\r\\n\n\n\u200b\u4f8b\u5982\u200b\uff1a\nCONNECT google.com:443 HTTP/1.0\\r\\n\\r\\n\n</code></pre> <p>\u200b\u5f53\u200b\u4f7f\u7528\u200b\u00a0<code>HTTP CONNECT</code>\u00a0\u200b\u65b9\u6cd5\u200b\u5728\u200b\u5ba2\u6237\u7aef\u200b\u3001\u200b\u4ee3\u7406\u670d\u52a1\u5668\u200b\u548c\u200b\u76ee\u6807\u200b\u670d\u52a1\u5668\u4e4b\u95f4\u200b\u5efa\u7acb\u200b\u8fde\u63a5\u200b\u540e\u200b\uff0c\u200b\u4ee3\u7406\u670d\u52a1\u5668\u200b\u7684\u200b\u804c\u8d23\u200b\u5c31\u662f\u200b\u6570\u636e\u200b\u8f6c\u53d1\u200b\u3002 \u200b\u90a3\u200b\u8bf7\u6c42\u200b\u548c\u200b\u6570\u636e\u6d41\u200b\u7684\u200b\u8fc7\u7a0b\u200b\u662f\u200b\u600e\u4e48\u6837\u200b\u7684\u200b\u5462\u200b\uff1f</p> <ol> <li> <p>\u200b\u5ba2\u6237\u7aef\u200b\u5230\u200b\u4ee3\u7406\u670d\u52a1\u5668\u200b:</p> <ul> <li>\u200b\u5ba2\u6237\u7aef\u200b\u9996\u5148\u200b\u5411\u200b\u4ee3\u7406\u200b\u670d\u52a1\u5668\u53d1\u9001\u200b\u4e00\u4e2a\u200b\u00a0<code>CONNECT</code>\u00a0\u200b\u8bf7\u6c42\u200b\uff0c\u200b\u8981\u6c42\u200b\u4ee3\u7406\u670d\u52a1\u5668\u200b\u4e0e\u200b\u76ee\u6807\u200b\u670d\u52a1\u5668\u200b\u5efa\u7acb\u200b\u96a7\u9053\u200b\u3002</li> <li>\u200b\u4ee3\u7406\u670d\u52a1\u5668\u200b\u54cd\u5e94\u200b\u00a0<code>200 Connection Established</code>\u00a0\u200b\u8868\u793a\u200b\u96a7\u9053\u200b\u5efa\u7acb\u200b\u6210\u529f\u200b\u3002</li> <li> <p>\u200b\u4ee3\u7406\u670d\u52a1\u5668\u200b\u5230\u200b\u76ee\u6807\u200b\u670d\u52a1\u5668\u200b:</p> </li> <li> <p>\u200b\u4ee3\u7406\u670d\u52a1\u5668\u200b\u5728\u200b\u6536\u5230\u200b\u00a0<code>CONNECT</code>\u00a0\u200b\u8bf7\u6c42\u200b\u540e\u200b\uff0c\u200b\u4f1a\u200b\u5c1d\u8bd5\u200b\u4e0e\u200b\u76ee\u6807\u200b\u670d\u52a1\u5668\u200b\u5efa\u7acb\u200b\u4e00\u4e2a\u200b\u76f4\u63a5\u200b\u7684\u200b TCP \u200b\u8fde\u63a5\u200b\u3002</p> </li> <li>\u200b\u4e00\u65e6\u200b\u8fde\u63a5\u200b\u5efa\u7acb\u200b\uff0c\u200b\u4ee3\u7406\u670d\u52a1\u5668\u200b\u4e0d\u518d\u200b\u89e3\u6790\u200b\u6216\u200b\u4fee\u6539\u200b\u6570\u636e\u200b\uff0c\u200b\u800c\u662f\u200b\u76f4\u63a5\u200b\u8f6c\u53d1\u200b\u6570\u636e\u200b\u3002</li> <li> <p>\u200b\u8bf7\u6c42\u200b\u548c\u200b\u54cd\u5e94\u200b\u7684\u200b\u8f6c\u53d1\u200b:</p> </li> <li> <p>\u200b\u5ba2\u6237\u7aef\u200b\u8bf7\u6c42\u200b\u76ee\u6807\u200b\u670d\u52a1\u5668\u200b: \u200b\u5ba2\u6237\u7aef\u200b\u901a\u8fc7\u200b\u5df2\u200b\u5efa\u7acb\u200b\u7684\u200b\u96a7\u9053\u200b\u53d1\u9001\u200b\u8bf7\u6c42\u200b\u6570\u636e\u200b\u3002\u200b\u6b64\u200b\u6570\u636e\u200b\u9996\u5148\u200b\u5230\u8fbe\u200b\u4ee3\u7406\u670d\u52a1\u5668\u200b\u3002</p> </li> <li>\u200b\u4ee3\u7406\u670d\u52a1\u5668\u200b\u8f6c\u53d1\u200b\u8bf7\u6c42\u200b: \u200b\u4ee3\u7406\u670d\u52a1\u5668\u200b\u5c06\u200b\u8bf7\u6c42\u200b\u6570\u636e\u200b\u539f\u5c01\u4e0d\u52a8\u200b\u5730\u200b\u8f6c\u53d1\u7ed9\u200b\u76ee\u6807\u200b\u670d\u52a1\u5668\u200b\u3002</li> <li>\u200b\u76ee\u6807\u200b\u670d\u52a1\u5668\u200b\u54cd\u5e94\u200b: \u200b\u76ee\u6807\u200b\u670d\u52a1\u5668\u200b\u5904\u7406\u200b\u8bf7\u6c42\u200b\u5e76\u200b\u8fd4\u56de\u200b\u54cd\u5e94\u200b\u6570\u636e\u200b\u3002</li> <li>\u200b\u4ee3\u7406\u670d\u52a1\u5668\u200b\u8f6c\u53d1\u200b\u54cd\u5e94\u200b: \u200b\u4ee3\u7406\u670d\u52a1\u5668\u200b\u5c06\u200b\u54cd\u5e94\u200b\u6570\u636e\u200b\u539f\u5c01\u4e0d\u52a8\u200b\u5730\u200b\u8f6c\u53d1\u200b\u56de\u200b\u5ba2\u6237\u7aef\u200b\u3002</li> </ul> </li> </ol> <p>\u200b\u4e0a\u9762\u200b\u7684\u200b\u8fc7\u7a0b\u200b\u6e05\u695a\u200b\u7684\u200b\u5448\u73b0\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u4ee3\u7406\u670d\u52a1\u5668\u200b\u7684\u200b\u4ee3\u7406\u200b\u5efa\u7acb\u200b\u8fc7\u7a0b\u200b\u3002\u200b\u5982\u679c\u200b\u4e2d\u95f4\u200b\u6709\u200b\u591a\u4e2a\u200b\u4ee3\u7406\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5c31\u200b\u5f62\u6210\u200b\u4e86\u200b\u4ee3\u7406\u200b\u94fe\u200b\u3002 \u200b\u5728\u200b\u8fd9\u4e2a\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u4ee3\u7406\u670d\u52a1\u5668\u200b\u626e\u6f14\u200b\u7684\u200b\u662f\u200b\u4e00\u4e2a\u200b\u900f\u660e\u200b\u7684\u200b\u4e2d\u95f4\u4eba\u200b\u89d2\u8272\u200b\u3002\u200b\u5b83\u200b\u4e0d\u4f1a\u200b\u5bf9\u200b\u7ecf\u8fc7\u200b\u5b83\u200b\u7684\u200b\u6570\u636e\u200b\u8fdb\u884c\u200b\u4efb\u4f55\u200b\u7406\u89e3\u200b\u6216\u200b\u4fee\u6539\u200b\uff0c\u200b\u53ea\u662f\u200b\u7b80\u5355\u200b\u5730\u200b\u8fdb\u884c\u200b\u5b57\u8282\u200b\u6d41\u200b\u7684\u200b\u8f6c\u53d1\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u9664\u4e86\u200b\u6700\u521d\u200b\u7684\u200b\u00a0<code>CONNECT</code>\u00a0\u200b\u8bf7\u6c42\u200b\u4e4b\u5916\u200b\uff0c\u200b\u5ba2\u6237\u7aef\u200b\u4e0d\u200b\u9700\u8981\u200b\u518d\u200b\u5bf9\u200b\u4ee3\u7406\u670d\u52a1\u5668\u200b\u53d1\u8d77\u200b\u5176\u4ed6\u200b\u8bf7\u6c42\u200b\u3002\u200b\u6240\u6709\u200b\u540e\u7eed\u200b\u7684\u200b\u901a\u4fe1\u200b\u90fd\u200b\u662f\u200b\u5728\u200b\u8fd9\u6761\u200b\u5efa\u7acb\u200b\u7684\u200b\u96a7\u9053\u200b\u4e0a\u200b\u8fdb\u884c\u200b\u7684\u200b\uff0c\u200b\u4ee3\u7406\u670d\u52a1\u5668\u200b\u53ea\u200b\u8d1f\u8d23\u200b\u6570\u636e\u200b\u7684\u200b\u4f20\u9012\u200b\u3002</p> Text Only<pre><code>client -&gt; proxy1 -&gt; proxy2 -&gt; proxy3 -&gt; proxy4 -&gt; destination.\n</code></pre> <p>\u200b\u5173\u4e8e\u200b\u5982\u4f55\u200b\u5f62\u6210\u200b\u94fe\u6761\u200b\u7684\u200b\u8fc7\u7a0b\u200b\uff0c\u200b\u4e0b\u9762\u200b\u8fd9\u200b\u7bc7\u6587\u7ae0\u200b\u8bb2\u89e3\u200b\u5f88\u200b\u6e05\u6670\u200bproxy-chaining-how-does-it-exactly-work</p> <p>A subtlety though: After proxy1 agrees to act as a CONNECT proxy for you, it takes whatever payload you send and sends to proxy2 as if proxy1 was the author. The next request you send reaches proxy2. In the example scenario this is also a CONNECT request. proxy2 gets it from proxy1 and may even not know you exist. From its point of view proxy1 asks it to CONNECT to proxy3. At the same time proxy1 is unaware it asks anything (unless it peeks into what you send). So neither proxy \u201cconsciously\u201d negotiates with the next. You negotiate on behalf of each one in chain. </p> <p>\u200b\u5b9e\u73b0\u200b\u903b\u8f91\u200b\uff1aHTTP PROXY\u200b\u5efa\u7acb\u200b\u8fc7\u7a0b\u200b\u5c31\u662f\u200b\u53d1\u9001\u200bCONNECT\u200b\u8bf7\u6c42\u200b\uff0c\u200b\u63a5\u53d7\u200bResponse\uff0c\u200b\u6210\u529f\u200b\u4ee5\u540e\u200b\u7528\u6237\u200b\u7684\u200b\u8bf7\u6c42\u200b\u5c31\u200b\u7531\u200b\u4ee3\u7406\u670d\u52a1\u5668\u200b\u8f6c\u53d1\u200b\u5904\u7406\u200b\u4e86\u200b\u3002\u200b\u662f\u4e0d\u662f\u200b\u5f88\u200b\u7b80\u5355\u200b\uff01 </p>C<pre><code>case HTTP_TYPE:{\n        snprintf((char *) buff, sizeof(buff), \"CONNECT %s:%d HTTP/1.0\\r\\n\", dns_name,\n                ntohs(port));\n        strcat((char *) buff, \"\\r\\n\");\n        len = strlen((char *) buff);\n        if(len != (size_t) send(sock, buff, len, 0))\n            goto err;\n\n        len = 0;\n        // read header byte by byte.\n        while(len &lt; BUFF_SIZE) {\n            if(1 == read_n_bytes(sock, (char *) (buff + len), 1))\n                len++;\n            else\n                goto err;\n            if(len &gt; 4 &amp;&amp;\n                buff[len - 1] == '\\n' &amp;&amp;\n                buff[len - 2] == '\\r' &amp;&amp; buff[len - 3] == '\\n' &amp;&amp; buff[len - 4] == '\\r')\n                break;\n        }\n\n        // if not ok (200) or response greather than BUFF_SIZE return BLOCKED;\n        if(len == BUFF_SIZE || !(buff[9] == '2' &amp;&amp; buff[10] == '0' &amp;&amp; buff[11] == '0'))\n            return BLOCKED;\n\n        return SUCCESS;\n    }\n    break;\n</code></pre><p></p> <p>\u200b\u611f\u8c22\u60a8\u200b\u7684\u200b\u9605\u8bfb\u200b\uff0c\u200b\u5173\u4e8e\u200bproxychains\u200b\u7684\u200b\u51e0\u79cd\u200b\u4ee3\u7406\u200b\u6a21\u5f0f\u200b\u3001\u200b\u4ee5\u53ca\u200b\u5173\u4e8e\u200bconnect\u200b\u51fd\u6570\u200b\u9012\u5f52\u200b\u8c03\u7528\u200b\u7684\u200b\u95ee\u9898\u200b\u3001\u200b\u5b66\u4e60\u200b\u6e90\u7801\u200b\uff0c\u200b\u52a8\u624b\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bproxychains\u200b\u5de5\u5177\u200b\u7b49\u200b\u5185\u5bb9\u200b\u5c06\u200b\u5728\u200b\u4e0b\u200b\u4e00\u7bc7\u200b\u6587\u7ae0\u200b\u4ecb\u7ecd\u200b\u3002bye\uff01</p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>\u200b\u81ea\u5df1\u200b\u52a8\u624b\u200b\u5199\u200b\u4e00\u4e2a\u200bproxychains\u200b\u4ee3\u7406\u200b\u5de5\u5177\u200b\uff08\u200b\u4e8c\u200b\uff09</li> <li>c++\u200b\u4ece\u200b\u4e00\u6b21\u200b\u9759\u6001\u200b\u5e93\u200b\u94fe\u63a5\u200b\u5f15\u53d1\u200b\u7684\u200bdouble free\u200b\u804a\u8d77\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAproxychains%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7%E4%BA%8C/","title":"\u81ea\u5df1\u200b\u52a8\u624b\u200b\u5199\u200b\u4e00\u4e2a\u200bproxychains\u200b\u4ee3\u7406\u200b\u5de5\u5177\u200b\uff08\u200b\u4e8c\u200b\uff09","text":"<p>\u200b\u4e0a\u200b\u4e00\u7bc7\u200b\u5b66\u4e60\u200b\u4e86\u200bproxychains\u200b\u5de5\u5177\u200b\u5b9e\u73b0\u200b\u539f\u7406\u200b\uff0c\u200b\u5305\u62ec\u200bHTTP\u200b\u4ee3\u7406\u200b\u94fe\u662f\u200b\u5982\u4f55\u200b\u5efa\u7acb\u200b\u7684\u200b\u5462\u200b\uff0c\u200b\u63a5\u4e0b\u6765\u200b\u6211\u4eec\u200b\u7ee7\u7eed\u200b\u804a\u804a\u200b\u3002</p>"},{"location":"blog/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAproxychains%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7%E4%BA%8C/#proxychains\u4ee3\u7406\u7684\u5efa\u7acb\u8fc7\u7a0b","title":"proxychains\u200b\u4ee3\u7406\u200b\u7684\u200b\u5efa\u7acb\u200b\u8fc7\u7a0b","text":""},{"location":"blog/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAproxychains%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7%E4%BA%8C/#proxychains\u7684\u51e0\u79cd\u4ee3\u7406\u6a21\u5f0f\u4f60\u6e05\u695a\u5417","title":"proxychains\u200b\u7684\u200b\u51e0\u79cd\u200b\u4ee3\u7406\u200b\u6a21\u5f0f\u200b\u4f60\u200b\u6e05\u695a\u200b\u5417\u200b\uff1f","text":"<p><code>proxychains</code>\u00a0\u200b\u901a\u8fc7\u200b\u4ee3\u7406\u670d\u52a1\u5668\u200b\u94fe\u8def\u200b\u6765\u200b\u8f6c\u53d1\u200b\u7f51\u7edc\u8fde\u63a5\u200b\u7684\u200b\u5de5\u5177\u200b\u3002\u200b\u5b83\u200b\u652f\u6301\u200b\u591a\u79cd\u200b\u4ee3\u7406\u200b\u94fe\u200b\u6a21\u5f0f\u200b\uff0c\u3002\u200b\u5305\u62ec\u200b\u00a0<code>DYNAMIC_TYPE</code>\u3001<code>STRICT_TYPE</code>\u00a0\u200b\u548c\u200b\u00a0<code>RANDOM_TYPE</code>\u00a0\u200b\u6bcf\u79cd\u200b\u6a21\u5f0f\u200b\u5728\u200b\u4ee3\u7406\u200b\u9009\u62e9\u200b\u548c\u200b\u4f7f\u7528\u200b\u7b56\u7565\u200b\u4e0a\u200b\u6709\u6240\u4e0d\u540c\u200b\u3002</p> <ol> <li> <p>DYNAMIC_TYPE:</p> <ul> <li>\u200b\u52a8\u6001\u200b\u6a21\u5f0f\u200b\uff1a\u200b\u5728\u200b\u8fd9\u79cd\u200b\u6a21\u5f0f\u200b\u4e0b\u200b\uff0c<code>proxychains</code>\u00a0\u200b\u4f1a\u200b\u5c3d\u91cf\u200b\u4f7f\u7528\u200b\u4ee3\u7406\u200b\u5217\u8868\u200b\u4e2d\u200b\u53ef\u7528\u200b\u7684\u200b\u4ee3\u7406\u200b\uff0c\u200b\u5e76\u200b\u5728\u200b\u4ee3\u7406\u200b\u94fe\u4e2d\u200b\u52a8\u6001\u200b\u8c03\u6574\u200b\u4ee3\u7406\u200b\u3002</li> <li>\u200b\u7075\u6d3b\u6027\u200b\uff1a\u200b\u5982\u679c\u200b\u5f53\u524d\u200b\u4ee3\u7406\u200b\u65e0\u6cd5\u200b\u8fde\u63a5\u200b\uff0c<code>proxychains</code>\u00a0\u200b\u4f1a\u200b\u5c1d\u8bd5\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u53ef\u7528\u200b\u4ee3\u7406\u200b\u3002\u200b\u5b83\u200b\u4e0d\u4f1a\u200b\u56e0\u4e3a\u200b\u67d0\u4e2a\u200b\u4ee3\u7406\u200b\u4e0d\u53ef\u200b\u7528\u200b\u800c\u200b\u5bfc\u81f4\u200b\u6574\u4e2a\u200b\u8fde\u63a5\u200b\u5931\u8d25\u200b\u3002</li> <li>\u200b\u4f18\u52bf\u200b\uff1a\u200b\u63d0\u9ad8\u200b\u4e86\u200b\u8fde\u63a5\u200b\u6210\u529f\u7387\u200b\uff0c\u200b\u5c24\u5176\u200b\u662f\u200b\u5728\u200b\u4ee3\u7406\u670d\u52a1\u5668\u200b\u4e0d\u200b\u7a33\u5b9a\u200b\u6216\u200b\u4e0d\u53ef\u200b\u7528\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u3002</li> <li> <p>STRICT_TYPE:</p> </li> <li> <p>\u200b\u4e25\u683c\u200b\u6a21\u5f0f\u200b\uff1a<code>proxychains</code>\u00a0\u200b\u4f1a\u200b\u6309\u7167\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u5217\u51fa\u200b\u7684\u200b\u987a\u5e8f\u200b\u4e25\u683c\u200b\u4f7f\u7528\u200b\u4ee3\u7406\u200b\u3002</p> </li> <li>\u200b\u56fa\u5b9a\u200b\u94fe\u8def\u200b\uff1a\u200b\u6240\u6709\u200b\u4ee3\u7406\u200b\u5fc5\u987b\u200b\u6309\u200b\u987a\u5e8f\u200b\u8fde\u63a5\u200b\u3002\u200b\u5982\u679c\u200b\u5176\u4e2d\u200b\u4e00\u4e2a\u200b\u4ee3\u7406\u200b\u4e0d\u53ef\u200b\u7528\u200b\uff0c\u200b\u6574\u4e2a\u200b\u8fde\u63a5\u200b\u5c06\u200b\u5931\u8d25\u200b\u3002</li> <li>\u200b\u4f18\u52bf\u200b\uff1a\u200b\u786e\u4fdd\u200b\u6d41\u91cf\u200b\u7ecf\u8fc7\u200b\u6bcf\u4e2a\u200b\u6307\u5b9a\u200b\u7684\u200b\u4ee3\u7406\u670d\u52a1\u5668\u200b\uff0c\u200b\u8fd9\u200b\u5bf9\u200b\u67d0\u4e9b\u200b\u9700\u8981\u200b\u7279\u5b9a\u200b\u8def\u5f84\u200b\u7684\u200b\u5e94\u7528\u200b\u573a\u666f\u200b\u53ef\u80fd\u200b\u5f88\u200b\u6709\u7528\u200b\u3002</li> <li> <p>RANDOM_TYPE:</p> </li> <li> <p>\u200b\u968f\u673a\u200b\u6a21\u5f0f\u200b\uff1a<code>proxychains</code>\u00a0\u200b\u4f1a\u200b\u968f\u673a\u200b\u9009\u62e9\u200b\u4ee3\u7406\u200b\u8fdb\u884c\u200b\u8fde\u63a5\u200b\u3002</p> </li> <li>\u200b\u968f\u673a\u6027\u200b\uff1a\u200b\u6bcf\u6b21\u200b\u8fde\u63a5\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u4f7f\u7528\u200b\u4e0d\u540c\u200b\u7684\u200b\u4ee3\u7406\u200b\u94fe\u200b\uff0c\u200b\u589e\u52a0\u200b\u4e86\u200b\u8def\u5f84\u200b\u7684\u200b\u968f\u673a\u6027\u200b\u3002</li> <li>\u200b\u4f18\u52bf\u200b\uff1a\u200b\u589e\u52a0\u200b\u8fde\u63a5\u200b\u8def\u5f84\u200b\u7684\u200b\u591a\u6837\u6027\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u7528\u4e8e\u200b\u89c4\u907f\u200b\u67d0\u4e9b\u200b\u7279\u5b9a\u200b\u7684\u200b\u7f51\u7edc\u200b\u9650\u5236\u200b\u3002</li> </ul> </li> </ol> <p>\u200b\u5982\u679c\u200b\u9700\u8981\u200b\u901a\u8fc7\u200b\u7279\u5b9a\u200b\u7684\u200b\u4ee3\u7406\u200b\u8def\u5f84\u200b\u6765\u200b\u8bbf\u95ee\u200b\u8d44\u6e90\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u9009\u62e9\u200b\u00a0<code>STRICT_TYPE</code>\uff1b\u200b\u5982\u679c\u200b\u9700\u8981\u200b\u66f4\u200b\u9ad8\u200b\u7684\u200b\u8fde\u63a5\u200b\u6210\u529f\u7387\u200b\u548c\u200b\u7075\u6d3b\u6027\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u9009\u62e9\u200b\u00a0<code>DYNAMIC_TYPE</code>\uff1b\u200b\u800c\u200b\u00a0<code>RANDOM_TYPE</code>\u00a0\u200b\u5219\u200b\u9002\u5408\u200b\u9700\u8981\u200b\u968f\u673a\u5316\u200b\u6d41\u91cf\u200b\u8def\u5f84\u200b\u7684\u200b\u573a\u666f\u200b\u3002</p> <p>!HTTP\u200b\u4ee3\u7406\u200b\u94fe\u200b\u8fc7\u7a0b\u200b</p>"},{"location":"blog/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAproxychains%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7%E4%BA%8C/#dynamic\u6a21\u5f0f\u7684\u6e90\u7801\u5206\u6790","title":"Dynamic\u200b\u6a21\u5f0f\u200b\u7684\u200b\u6e90\u7801\u200b\u5206\u6790","text":"<p>\u200b\u4e00\u5207\u200b\u4eff\u4f5b\u200b\u90fd\u200b\u6ca1\u6709\u200b\u6e90\u7801\u200b\u66f4\u52a0\u200b\u6e05\u6670\u200b\u4e86\u200b, \u200b\u770b\u200b\u4e00\u4e9b\u200bDynamic\u200b\u6a21\u5f0f\u200b\u7684\u200b\u6e90\u7801\u200b\uff1a </p>C<pre><code>case DYNAMIC_TYPE:\n            calc_alive(pd, proxy_count);\n            offset = 0;\n            do {\n                if(!(p1 = select_proxy(FIFOLY, pd, proxy_count, &amp;offset)))\n                    goto error_more;\n            } while(SUCCESS != start_chain(&amp;ns, p1, DT) &amp;&amp; offset &lt; proxy_count); // client\u200b\u548c\u200b\u7b2c\u4e00\u4e2a\u200bproxy server\u200b\u5efa\u7acb\u200btcp\u200b\u8fde\u63a5\u200bns\n            for(;;) {\n                p2 = select_proxy(FIFOLY, pd, proxy_count, &amp;offset);\n                if(!p2)\n                    break;\n                if(SUCCESS != chain_step(ns, p1, p2)) {\n                    PDEBUG(\"GOTO AGAIN 1\\n\");\n                    goto again;\n                }\n                p1 = p2; // \u200b\u5efa\u7acb\u200b\u4ee3\u7406\u200b\u94fe\u200b\u7684\u200b\u8fc7\u7a0b\u200b\uff0c\u200b\u4e0d\u505c\u200bp1\u200b\u76f8\u5f53\u4e8e\u200b\u4e00\u4e2a\u200b\u6307\u9488\u200b\uff0c\u200b\u4e0d\u505c\u200b\u7684\u200b\u5411\u200b\u540e\u200b\u79fb\u52a8\u200b, \u200b\u5efa\u7acb\u200b\u7684\u200b\u8fc7\u7a0b\u200b\u662f\u200b\u5728\u200b\u548c\u200bproxy1\u200b\u7684\u200bns\u200b\u8fde\u63a5\u200b\u4e0a\u200b\uff0c\u200b\u53d1\u9001\u200bHTTP CONNCET\u200b\u8bf7\u6c42\u200b\u7ed9\u200bproxy2\uff0c\u200b\u8fd9\u6837\u200b\u5efa\u7acb\u200b\u4e86\u200bproxy1\u200b\u5230\u200bproxy2\u200b\u7684\u200b\u8f6c\u53d1\u200b\u3002\u200b\u7136\u540e\u200b\u5faa\u73af\u200b\uff0c\u200b\u5efa\u7acb\u200bproxy2\u200b\u548c\u200bproxy3\u200b\u7684\u200b\u8f6c\u53d1\u200b...\n            }\n            //proxychains_write_log(TP);\n            p3-&gt;ip = target_ip;\n            p3-&gt;port = target_port;\n            if(SUCCESS != chain_step(ns, p1, p3)) // \u200b\u6700\u540e\u200b\u4ee3\u7406\u200b\u94fe\u200b\u7684\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u4ee3\u7406\u200bproxy\u200b\u548c\u200btarget\u200b\u5efa\u7acb\u200b\u8fde\u63a5\u200b\uff0c\u200b\u6bd4\u5982\u200b\u4ee3\u7406\u670d\u52a1\u5668\u200b\u548c\u200bgoogle.com\n                goto error;\n            break;\n\ndup2(ns, sock); // sock\u200b\u662f\u200b\u7528\u6237\u200b\u8bf7\u6c42\u200bconnect\u200b\u7684\u200b\u53c2\u6570\u200b\uff0c\u200b\u901a\u8fc7\u200bdup2\u200b\u51fd\u6570\u200b\u5c06\u200b\u548c\u200b\u4ee3\u7406\u200b\u7684\u200bsock\u200b\u590d\u5236\u200b\u7ed9\u200b\u7528\u6237\u200b\u8bf7\u6c42\u200b\u7684\u200bsock\uff0c\u200b\u56e0\u6b64\u200b\u7528\u6237\u200b\u4f7f\u7528\u200b\u4e0a\u200b\u4e86\u200b\u4ee3\u7406\u200b\u94fe\u200b\u8bbf\u95ee\u200b\u76ee\u6807\u200b\u5730\u5740\u200b\n</code></pre><p></p> <p>start_chain\u200b\u51fd\u6570\u200b\u7684\u200b\u5b9e\u73b0\u200b, \u200b\u5b9e\u9645\u200b\u5c31\u662f\u200b\u8c03\u7528\u200b\u4e86\u200btimed_connect\u200b\u51fd\u6570\u200b\uff0c\u200b\u548c\u200b\u4ee3\u7406\u670d\u52a1\u5668\u200b\u5efa\u7acb\u200btcp\u200b\u8fde\u63a5\u200b\u3002 </p>C<pre><code>static int start_chain(int *fd, proxy_data * pd, char *begin_mark) {\n    struct sockaddr_in addr;\n    char ip_buf[16];\n    ....\n    *fd = socket(PF_INET, SOCK_STREAM, 0);\n    memset(&amp;addr, 0, sizeof(addr));\n    addr.sin_family = AF_INET;\n    addr.sin_addr.s_addr = (in_addr_t) pd-&gt;ip.as_int;\n    addr.sin_port = pd-&gt;port;\n    if(timed_connect(*fd, (struct sockaddr *) &amp;addr, sizeof(addr))) {\n        pd-&gt;ps = DOWN_STATE;\n        goto error1;\n    }\n    ......\n}\n</code></pre> chain_step\u200b\u51fd\u6570\u200b\u7684\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u8c03\u7528\u200b\u4e86\u200btunnel_to\u200b\u51fd\u6570\u200b\uff0c\u200b\u5b9e\u9645\u200b\u5c31\u662f\u200b\u6839\u636e\u200b\u7c7b\u578b\u200b\u53bb\u200b\u5efa\u7acb\u200b\u4ee3\u7406\u200b\u94fe\u200b\u3002 C<pre><code>static int chain_step(int ns, proxy_data * pfrom, proxy_data * pto) {\n    ......\n    retcode = tunnel_to(ns, pto-&gt;ip, pto-&gt;port, pfrom-&gt;pt, pfrom-&gt;user, pfrom-&gt;pass);\n    ......\n    return retcode;\n}\n\nstatic int tunnel_to(int sock, ip_type ip, unsigned short port, proxy_type pt, char *user, char *pass) {\n    ......\n    switch (pt) {\n        case RAW_TYPE: {\n            return SUCCESS;\n        }\n        break;\n        case HTTP_TYPE:{\n        }\n        case SOCKS4_TYPE:{}\n        case SOCKS5_TYPE:{}\n    }\n    ......\n}\n</code></pre> \u200b\u5176\u4e2d\u200bHTTP PROXY\u200b\u5efa\u7acb\u200b\u8fc7\u7a0b\u200b\u5c31\u662f\u200b\u53d1\u9001\u200bCONNECT\u200b\u8bf7\u6c42\u200b\uff0c\u200b\u63a5\u53d7\u200bResponse\uff0c\u200b\u6210\u529f\u200b\u4ee5\u540e\u200b\u7528\u6237\u200b\u7684\u200b\u8bf7\u6c42\u200b\u5c31\u200b\u7531\u200b\u4ee3\u7406\u670d\u52a1\u5668\u200b\u8f6c\u53d1\u200b\u5904\u7406\u200b\u4e86\u200b\u3002\u200b\u662f\u4e0d\u662f\u200b\u5f88\u200b\u7b80\u5355\u200b\uff01 C<pre><code>case HTTP_TYPE:{\n        snprintf((char *) buff, sizeof(buff), \"CONNECT %s:%d HTTP/1.0\\r\\n\", dns_name,\n                ntohs(port));\n        strcat((char *) buff, \"\\r\\n\");\n        len = strlen((char *) buff);\n        if(len != (size_t) send(sock, buff, len, 0))\n            goto err;\n\n        len = 0;\n        // read header byte by byte.\n        while(len &lt; BUFF_SIZE) {\n            if(1 == read_n_bytes(sock, (char *) (buff + len), 1))\n                len++;\n            else\n                goto err;\n            if(len &gt; 4 &amp;&amp;\n                buff[len - 1] == '\\n' &amp;&amp;\n                buff[len - 2] == '\\r' &amp;&amp; buff[len - 3] == '\\n' &amp;&amp; buff[len - 4] == '\\r')\n                break;\n        }\n\n        // if not ok (200) or response greather than BUFF_SIZE return BLOCKED;\n        if(len == BUFF_SIZE || !(buff[9] == '2' &amp;&amp; buff[10] == '0' &amp;&amp; buff[11] == '0'))\n            return BLOCKED;\n\n        return SUCCESS;\n    }\n    break;\n</code></pre><p></p>"},{"location":"blog/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAproxychains%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7%E4%BA%8C/#\u5173\u4e8econnect\u51fd\u6570\u9012\u5f52\u8c03\u7528\u7684\u95ee\u9898","title":"\u5173\u4e8e\u200bconnect\u200b\u51fd\u6570\u200b\u9012\u5f52\u200b\u8c03\u7528\u200b\u7684\u200b\u95ee\u9898\u200b\uff1f","text":"<p>\u200b\u5728\u200b\u5f00\u53d1\u200b\u65f6\u200b\uff0c\u200b\u5982\u679c\u200b\u4f7f\u7528\u200b\u4e86\u200b\u6bd4\u8f83\u200b\u9ad8\u7ea7\u200b\u7684\u200b\u7f51\u7edc\u200b\u5c01\u88c5\u200b\u5e93\u200b\uff0c\u200b\u8fd9\u65f6\u200b\u8981\u200b\u6ce8\u610f\u200b\u4f1a\u200b\u9012\u5f52\u200b\u8c03\u7528\u200b, \u200b\u56e0\u4e3a\u200b\u5728\u200b\u7f51\u7edc\u200b\u5e93\u4e2d\u200b\u76f4\u63a5\u200b\u8c03\u7528\u200b\u7684\u200bconnect\u200b\u51fd\u6570\u200b\u3002\u200b\u6bd4\u5982\u200b\u91cd\u5199\u200b\u4e86\u200b\u81ea\u5df1\u200b\u7684\u200bconnect\u200b\u51fd\u6570\u200b\uff0c\u200b\u5728\u200b\u4f7f\u7528\u200b\u7f51\u7edc\u200b\u5e93\u200b\u7684\u200bconnect_time_out\u200b\u51fd\u6570\u200b\u4e2d\u200b\uff0c\u200b\u53ef\u80fd\u200b\u662f\u200b\u76f4\u63a5\u200b\u5c01\u88c5\u200b\u7684\u200bc\u200b\u5e93\u4e2d\u200b\u7684\u200bconnect\u200b\u51fd\u6570\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5c31\u200b\u4f1a\u200b\u65e0\u9650\u200b\u9012\u5f52\u200b\u3002\u200b\u6700\u540e\u200b\u51fd\u6570\u200b\u6808\u200b\u5c31\u200bSegment fault\u200b\u4e86\u200b\u3002 \u200b\u8fd9\u91cc\u200b\u5c31\u200b\u9700\u8981\u200b\u6211\u4eec\u200b\u81ea\u5df1\u200b\u5199\u200b\u4e00\u4e2a\u200bconnect_time_out\u200b\u51fd\u6570\u200b\uff0c\u200b\u5728\u200b\u91cc\u9762\u200b\u8c03\u7528\u200bdlsym\u200b\u83b7\u53d6\u200b\u5230\u200b\u7684\u200btrue_connect\uff0c\u200b\u907f\u514d\u200b\u4e86\u200b\u9012\u5f52\u200b\u8c03\u7528\u200b\u3002</p> <p>\u200b\u5728\u200brust\u200b\u4e2d\u200b\uff0c\u200b\u4e0d\u80fd\u200b\u76f4\u63a5\u200b\u4f7f\u7528\u200bTcpStream::connect_timeout\uff0c\u200b\u540c\u6837\u200b\u4e5f\u200b\u4e0d\u80fd\u200b\u7528\u200bnix::sys::socket::connect\u3002</p> <p>We can\u2019t use nix::sys::socket::connect since it would call our hooked connect function and recurse infinitely.</p> <p></p>Rust<pre><code>let stream = TcpStream::connect_timeout(&amp;socket_addr, Duration::from_secs(5))?;\n</code></pre> \u200b\u800c\u200b\u9700\u8981\u200b\u81ea\u5b9a\u4e49\u200b\u5b9e\u73b0\u200b\u5982\u4e0b\u200b\uff1a C<pre><code>// https://github1s.com/haad/proxychains/blob/master/src/core.c#L204-L240\nstatic int timed_connect(int sock, const struct sockaddr *addr, socklen_t len) {\n    int ret, value;\n    socklen_t value_len;\n    struct pollfd pfd[1];\n    pfd[0].fd = sock;\n    pfd[0].events = POLLOUT;\n    fcntl(sock, F_SETFL, O_NONBLOCK);\n    ret = true_connect(sock, addr, len);\n    PDEBUG(\"\\nconnect ret=%d\\n\", ret);\n\n    if(ret == -1 &amp;&amp; errno == EINPROGRESS) {\n        ret = poll_retry(pfd, 1, tcp_connect_time_out);\n        PDEBUG(\"\\npoll ret=%d\\n\", ret);\n        if(ret == 1) {\n            value_len = sizeof(socklen_t);\n            getsockopt(sock, SOL_SOCKET, SO_ERROR, &amp;value, &amp;value_len);\n            PDEBUG(\"\\nvalue=%d\\n\", value);\n        } else {\n            ret = -1;\n        }\n    }\n    ......\n    fcntl(sock, F_SETFL, !O_NONBLOCK);\n    return ret;\n}\n</code></pre><p></p> <p>\u200b\u540c\u6837\u200b\u7684\u200b\u903b\u8f91\u200b\uff0crust\u200b\u5b9e\u73b0\u200b\u5982\u4e0b\u200b\uff1a </p>Rust<pre><code>// https://github.com/mlvl42/proxyc/blob/HEAD/libproxyc/src/util.rs#L2-L29\npub fn timed_connect(fd: RawFd, addr: &amp;SockAddr, timeout: usize) -&gt; Result&lt;(), Error&gt; {\n    let c_connect = CONNECT.expect(\"Cannot load symbol 'connect'\");\n\n    let mut fds = [PollFd::new(fd, PollFlags::POLLOUT)];\n    let mut oflag = OFlag::empty();\n\n    oflag.toggle(OFlag::O_NONBLOCK);\n    match fcntl(fd, FcntlArg::F_SETFL(OFlag::O_NONBLOCK)) {\n        Ok(_) =&gt; (),\n        Err(e) =&gt; error!(\"fcntl NONBLOCK error: {}\", e),\n    };\n\n    let res = unsafe {\n        let (ptr, len) = addr.as_ffi_pair();\n        c_connect(fd, ptr, len)\n    };\n\n    if let (-1, Errno::EINPROGRESS) = (res, errno()) {\n        let ret = poll_retry(&amp;mut fds, timeout)?;\n\n        match ret {\n            1 =&gt; {\n                match getsockopt(fd, SocketError)? {\n                    0 =&gt; (),\n                    _ =&gt; return Err(Error::Socket),\n                };\n            }\n            _ =&gt; return Err(Error::Connect(\"poll_retry\".into())),\n        };\n    }\n\n    oflag.toggle(OFlag::O_NONBLOCK);\n    match fcntl(fd, FcntlArg::F_SETFL(oflag)) {\n        Ok(_) =&gt; (),\n        Err(e) =&gt; error!(\"fcntl BLOCK error: {}\", e),\n    };\n    ......\n}\n</code></pre> \u200b\u53c2\u8003\u200b\u5b9e\u73b0\u200b\uff1aproxyc<p></p>"},{"location":"blog/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAproxychains%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7%E4%BA%8C/#\u5b66\u4e60\u6e90\u7801\u52a8\u624b\u5b9e\u73b0\u4e00\u4e2aproxychains\u5de5\u5177","title":"\u5b66\u4e60\u200b\u6e90\u7801\u200b\uff0c\u200b\u52a8\u624b\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bproxychains\u200b\u5de5\u5177","text":"<p>\u200b\u5982\u679c\u200b\u4f60\u200b\u5b66\u4f1a\u200b\u4e86\u200b\uff0c\u200b\u4e5f\u200b\u60f3\u200b\u5927\u5c55\u200b\u62f3\u811a\u200b\u4e00\u756a\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u6574\u7406\u200b\u4e86\u200b\u51e0\u4e2a\u200b\u6bd4\u8f83\u200b\u6e05\u6670\u200b\u7684\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200b\u3002</p>"},{"location":"blog/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAproxychains%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7%E4%BA%8C/#c\u8bed\u8a00\u5b9e\u73b0","title":"c\u200b\u8bed\u8a00\u200b\u5b9e\u73b0","text":"<ul> <li>haad/proxychains</li> </ul>"},{"location":"blog/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAproxychains%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7%E4%BA%8C/#rust\u5b9e\u73b0","title":"rust\u200b\u5b9e\u73b0","text":""},{"location":"blog/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAproxychains%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7%E4%BA%8C/#mlvl42proxyc","title":"mlvl42/proxyc","text":"<p>mlvl42/proxyc\u200b\u548c\u200bhaad/proxychains \u200b\u5b9e\u73b0\u200b\u903b\u8f91\u200b\u76f8\u540c\u200b\uff0c\u200b\u5982\u679c\u200b\u4f60\u200b\u60f3\u200b\u5b66\u4e60\u200b\u5982\u4f55\u200b\u7528\u200brust\u200b\u5b9e\u73b0\u200bc\u200b\u7684\u200b\u529f\u80fd\u200b\u53ef\u4ee5\u200b\u8bfb\u8bfb\u200b\u8fd9\u4e2a\u200b\u6e90\u7801\u200b\u3002\u200b\u6bd4\u5982\u200b\u5982\u4f55\u200bdlsym\u3001\u200b\u5982\u4f55\u200b\u8bbe\u7f6e\u200b\u975e\u200b\u963b\u585e\u200bfd\u3001\u200b\u5982\u4f55\u200b\u7f16\u8bd1\u200bso\u200b\u81ea\u5b9a\u4e49\u200bconnect\u200b\u51fd\u6570\u200b\u3002</p> <p>\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u52a8\u6001\u200b\u5e93\u4e2d\u200b\u7684\u200b\u521d\u59cb\u5316\u200b\u903b\u8f91\u200b\uff1f </p>Rust<pre><code>static ONCE: std::sync::Once = std::sync::Once::new();\n/// This is called when our dynamic library is loaded, so we setup our internals\n/// here.\n#[no_mangle]\n#[link_section = \".init_array\"]\nstatic LD_PRELOAD_INIT: extern \"C\" fn() = self::init;\nextern \"C\" fn init() {\n    ONCE.call_once(|| {\n        let config = &amp;*core::CONFIG;\n        std::env::set_var(\"RUST_LOG\", config.log_level.to_string());\n        pretty_env_logger::init();\n        debug!(\"init pid: {}\", std::process::id());\n        info!(\"chain_type: {:?}\", config.chain_type);\n        info!(\"proxies:\");\n        for p in &amp;config.proxies {\n            info!(\"\\t{}\", p);\n        }\n    });\n}\n</code></pre> \u201c.init_array\u201d\u200b\u8fd9\u4e2a\u200b\u6bb5\u200b\u662f\u200b ELF\uff08Executable and Linkable Format\uff09\u200b\u6587\u4ef6\u683c\u5f0f\u200b\u7684\u200b\u4e00\u90e8\u5206\u200b\uff0c\u200b\u4e13\u95e8\u200b\u7528\u4e8e\u200b\u5b58\u653e\u200b\u521d\u59cb\u5316\u200b\u51fd\u6570\u200b\u3002\u200b\u5728\u200b\u7a0b\u5e8f\u200b\u542f\u52a8\u200b\u65f6\u200b\uff0c\u200b\u64cd\u4f5c\u7cfb\u7edf\u200b\u4f1a\u200b\u8c03\u7528\u200b\u8fd9\u4e2a\u200b\u6bb5\u200b\u4e2d\u200b\u7684\u200b\u6240\u6709\u200b\u51fd\u6570\u200b\uff0c\u200b\u4ee5\u200b\u6267\u884c\u200b\u4e00\u4e9b\u200b\u521d\u59cb\u5316\u200b\u64cd\u4f5c\u200b\u3002 \u200b\u8fd9\u79cd\u200b\u6a21\u5f0f\u200b\u901a\u5e38\u200b\u7528\u4e8e\u200b\u5b9e\u73b0\u200b\u52a8\u6001\u200b\u5e93\u4e2d\u200b\u7684\u200b\u521d\u59cb\u5316\u200b\u903b\u8f91\u200b\uff0c\u200b\u5728\u200b\u4f7f\u7528\u200b LD_PRELOAD \u200b\u8fdb\u884c\u200b\u51fd\u6570\u200b\u94a9\u6302\u200b\uff08hooking\uff09\u200b\u65f6\u200b\u3002\u200b\u901a\u8fc7\u200b\u5c06\u200b\u521d\u59cb\u5316\u200b\u4ee3\u7801\u200b\u653e\u5165\u200b .init_array \u200b\u4e2d\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u786e\u4fdd\u200b\u5728\u200b\u5171\u4eab\u200b\u5e93\u200b\u52a0\u8f7d\u200b\u65f6\u200b\u81ea\u52a8\u200b\u8c03\u7528\u200b\u8fd9\u4e9b\u200b\u521d\u59cb\u5316\u200b\u51fd\u6570\u200b\uff0c\u200b\u800c\u200b\u4e0d\u200b\u9700\u8981\u200b\u5728\u200b\u4e3b\u7a0b\u5e8f\u200b\u4e2d\u663e\u5f0f\u200b\u5730\u200b\u8c03\u7528\u200b\u5b83\u4eec\u200b\u3002<p></p>"},{"location":"blog/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAproxychains%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7%E4%BA%8C/#alifarrokhproxychains","title":"alifarrokh/proxychains","text":"<p>alifarrokh/proxychains \u200b\u91c7\u7528\u200brust\u200b\u98ce\u683c\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u81ea\u5b9a\u4e49\u200b\u4e86\u200bconnect\u3001write\u3001read\u200b\u51fd\u6570\u200b\uff0c\u200b\u901a\u8fc7\u200bchannel\u200b\u8fde\u63a5\u200b\u7528\u6237\u200b\u8bfb\u5199\u200b\u548c\u200bproxy\u200b\u4ee3\u7406\u200b\u8bfb\u5199\u200b\uff0c\u200b\u800c\u200b\u6ca1\u6709\u200b\u91c7\u7528\u200bdup2(new_fd, fd)\u200b\u7684\u200b\u65b9\u5f0f\u200b\u3002\u200b\u6838\u5fc3\u200b\u903b\u8f91\u200b\u5982\u4e0b\u200b\uff1a</p> <p></p>Rust<pre><code>tokio::spawn(async move {\n                    let connection = unsafe { (*CONNECTIONS).get_mut(&amp;fd) }.unwrap();\n                    let target = connection.target_addr.clone();\n                    let (connection_reader, connection_writer) = connection.split();\n\n                    let stream = ProxyChains::connect(target, config()).await;\n                    match stream {\n                        Ok(mut stream) =&gt; {\n                            let (mut reader, mut writer) = stream.split();\n                        let _ = futures::join!(\n                            copy(connection_reader, &amp;mut writer),\n                            copy(&amp;mut reader, connection_writer)\n                        );\n                        },\n                        Err(e) =&gt; eprintln!(\"Failed to create proxychains. {}\", e.to_string()),\n                    }\n                });\n</code></pre> \u200b\u53ef\u4ee5\u200b\u5b66\u4e60\u200b\u5230\u200brust\u200b\u5f02\u6b65\u200bstream\uff0c\u200b\u4ee5\u53ca\u200bchannel\u200b\u901a\u4fe1\u200b\u7684\u200b\u5199\u6cd5\u200b\u7b49\u200b\u3002<p></p>"},{"location":"blog/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAproxychains%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7%E4%BA%8C/#kernelerrproxychain-rs","title":"KernelErr/proxychain-rs","text":"<p>KernelErr/proxychain-rs\u200b\u5c06\u200bhttp\u200b\u4ee3\u7406\u200b\u53ef\u4ee5\u200b\u8f6c\u6362\u6210\u200bsocks5\u200b\u4ee3\u7406\u200b\u3002 </p>Bash<pre><code>proxychain -i socks5://127.0.0.1:9000 -o http://127.0.0.1:8123\n</code></pre><p></p> <p>\u200b\u611f\u8c22\u60a8\u200b\u7684\u200b\u9605\u8bfb\u200b\uff01</p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>\u200b\u81ea\u5df1\u200b\u52a8\u624b\u200b\u5199\u200b\u4e00\u4e2a\u200bproxychains\u200b\u4ee3\u7406\u200b\u5de5\u5177\u200b\uff08\u200b\u4e00\u200b\uff09</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0paged_attention--%E5%9F%BA%E4%BA%8Eflash-attention%E7%9A%84pagedattention%E5%86%85%E6%A0%B8%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E7%AE%A1%E7%90%86%E5%99%A8/","title":"\u5982\u4f55\u200b\u5b9e\u73b0\u200bpaged_attention--\u200b\u57fa\u4e8e\u200bflash-attention\u200b\u7684\u200bPagedAttention\u200b\u5185\u6838\u200b\u5b9e\u73b0\u200b\u7f13\u5b58\u200b\u7ba1\u7406\u5668","text":"<p>\u200b\u7c7b\u4f3c\u200blinux\u200b\u64cd\u4f5c\u7cfb\u7edf\u200b\u7ba1\u7406\u200b\u5185\u5b58\u200b\u7684\u200b\u673a\u5236\u200b\uff0cpaged_attention\u200b\u7528\u4e8e\u200b\u7ba1\u7406\u200bLLM\u200b\u63a8\u7406\u200b\u65f6\u200bkv cache\u200b\u7684\u200b\u663e\u5b58\u200b\u5206\u914d\u200b\uff0c\u200b\u901a\u8fc7\u200b\u9875\u8868\u200b\u673a\u5236\u200b\uff0c\u200b\u4f18\u5316\u200b\u663e\u5b58\u200b\u5206\u914d\u200b\uff0c\u200b\u51cf\u5c11\u200b\u788e\u7247\u200b\u3002</p>"},{"location":"blog/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0paged_attention--%E5%9F%BA%E4%BA%8Eflash-attention%E7%9A%84pagedattention%E5%86%85%E6%A0%B8%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E7%AE%A1%E7%90%86%E5%99%A8/#paged_attention\u4ecb\u7ecd","title":"paged_attention\u200b\u4ecb\u7ecd","text":"<p>\u200b\u4f20\u7edf\u200b\u4e0a\u200b\uff0c\u200b\u8bf7\u6c42\u200b\u7684\u200b\u952e\u503c\u200b\u7f13\u5b58\u200b\u6709\u200b\u4ee5\u4e0b\u200b\u4e24\u70b9\u200b\uff1a</p> <ul> <li>\u200b\u5b58\u50a8\u200b\u5728\u200b\u8fde\u7eed\u200b\u7684\u200b\u5185\u5b58\u7a7a\u95f4\u200b\u4e2d\u200b\uff1b</li> <li>\u200b\u9884\u5148\u200b\u5206\u914d\u200b\u6700\u5927\u200b\u4e0a\u4e0b\u6587\u200b\u957f\u5ea6\u200b\u7684\u200b\u5185\u5b58\u200b\uff08\u200b\u5bf9\u4e8e\u200b Llama3 \u200b\u4e3a\u200b 8192\uff09\u3002</li> </ul> <p>\u200b\u8fd9\u4f1a\u200b\u5bfc\u81f4\u200b\u4e25\u91cd\u200b\u7684\u200b\u5185\u5b58\u200b\u788e\u7247\u200b\uff0c\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5982\u679c\u200b\u4e00\u4e2a\u200b\u8bf7\u6c42\u200b\u7684\u200b\u5b9e\u9645\u200b\u957f\u5ea6\u200b\u88ab\u751f\u200b\u6210\u4e3a\u200b 792 \u200b\u4e2a\u200b\u6807\u8bb0\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5927\u7ea6\u200b 90%\uff08=7400/8192\uff09\u200b\u7684\u200b\u9884\u200b\u5206\u914d\u5185\u5b58\u200b\u4f1a\u200b\u88ab\u200b\u788e\u7247\u200b\u5316\u200b\uff0c\u200b\u5373\u200b\u65e0\u6cd5\u200b\u88ab\u200b\u5176\u4ed6\u200b\u4efb\u4f55\u200b\u8bf7\u6c42\u200b\u4f7f\u7528\u200b\u3002</p> <p>\u200b\u4e3a\u4e86\u200b\u51cf\u5c11\u200b\u5185\u5b58\u200b\u788e\u7247\u200b\u5e76\u200b\u63d0\u9ad8\u200b\u8bf7\u6c42\u200b\u541e\u5410\u91cf\u200b\uff08\u200b\u6279\u91cf\u200b\u5927\u5c0f\u200b\uff09\uff0c\u200b\u5206\u9875\u200b\u6ce8\u610f\u529b\u200b\uff08PagedAttention\uff09\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e00\u79cd\u200b\u975e\u200b\u8fde\u7eed\u200b\u7684\u200b\u952e\u503c\u200b\u7f13\u5b58\u200b\u5185\u5b58\u200b\u7ba1\u7406\u200b\u65b9\u6848\u200b\uff0c\u200b\u5927\u81f4\u200b\u9075\u5faa\u200b\u64cd\u4f5c\u7cfb\u7edf\u200b\u5206\u9875\u200b\u3002\u200b\u8fd9\u200b\u786e\u4fdd\u200b\u4e86\u200b\u5185\u5b58\u200b\u788e\u7247\u200b\u4ec5\u200b\u5728\u200b\u6bcf\u4e2a\u200b\u8bf7\u6c42\u200b\u7684\u200b\u6700\u540e\u200b\u5206\u914d\u200b\u5757\u200b\u4e2d\u200b\u53d1\u751f\u200b\uff1a\u200b\u5728\u200b\u4e0b\u9762\u200b\u7684\u200b\u56fe\u8868\u200b\u4e2d\u200b\uff0c\u200b\u7528\u200b\u7ea2\u8272\u200b\u52fe\u52d2\u200b\u51fa\u200b\u7684\u200b\u90e8\u5206\u200b\uff0c\u200b\u8bf7\u6c42\u200b A \u200b\u5728\u200b\u7269\u7406\u200b\u5757\u200b 3 \u200b\u4e2d\u6709\u200b 3 \u200b\u4e2a\u200btokens\uff0c\u200b\u8bf7\u6c42\u200b B \u200b\u5728\u200b\u7269\u7406\u200b\u5757\u200b 2 \u200b\u4e2d\u6709\u200b 2 \u200b\u4e2a\u200btokens\u3002</p> <p></p> <p>\u200b\u4ece\u200b\u4ee3\u7801\u200b\u4e0a\u200b\u770b\u200battention\u200b\u548c\u200bpaged_attention\u200b\u7684\u200b\u533a\u522b\u200b\uff1a </p>Python<pre><code># attention\ny = attn(k_cache=k_cache, v_cache=v_cache, ...)\n# paged_attention\ny = paged_attn(k_cache=k_cache_paged, v_cache=v_cache_paged, block_table=block_table, ...)\n</code></pre><p></p> <p>\u200b\u4e0e\u200bk_cache\u200b\u4e0d\u540c\u200b\uff0ck_cache_paged\u200b\u662f\u975e\u200b\u8fde\u7eed\u200b\u7684\u200b\uff0c\u200b\u5e76\u4e14\u200b\u7531\u200b\u6240\u6709\u200b\u8bf7\u6c42\u200b\u5171\u4eab\u200b\u3002\u200b\u7269\u7406\u200b\u5757\u200b 0~8 \u200b\u53ef\u4ee5\u200b\u5206\u914d\u200b\u7ed9\u200b\u4efb\u4f55\u200b\u8bf7\u6c42\u200b\uff0c\u200b\u8fd9\u200b\u5c31\u662f\u200b\u4e3a\u4ec0\u4e48\u200b\u6211\u4eec\u200b\u4f20\u5165\u200bblock_table\uff0c\u200b\u5b83\u200b\u5305\u542b\u200b\u6bcf\u4e2a\u200b\u8bf7\u6c42\u200b\u5bf9\u200b\u903b\u8f91\u200b\u5757\u200b\u5230\u200b\u7269\u7406\u200b\u5757\u200b\u7684\u200b\u5206\u914d\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5728\u200b\u4e0a\u9762\u200b\u7684\u200b\u56fe\u8868\u200b\u4e2d\u200b\uff0cblock_table\u200b\u770b\u8d77\u6765\u200b\u50cf\u200b{0: [7,1,3], 1: [5,2]}\uff080 \u200b\u548c\u200b 1 \u200b\u5206\u522b\u200b\u662f\u200b\u8bf7\u6c42\u200b A \u200b\u548c\u200b B \u200b\u7684\u200b\u7d22\u5f15\u200b\uff09\u3002</p>"},{"location":"blog/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0paged_attention--%E5%9F%BA%E4%BA%8Eflash-attention%E7%9A%84pagedattention%E5%86%85%E6%A0%B8%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E7%AE%A1%E7%90%86%E5%99%A8/#\u57fa\u4e8eflash-attention\u5b9e\u73b0\u7f13\u5b58\u7ba1\u7406\u5668","title":"\u57fa\u4e8e\u200bflash-attention\u200b\u5b9e\u73b0\u200b\u7f13\u5b58\u200b\u7ba1\u7406\u5668","text":"<p>\u200b\u4e07\u4e08\u9ad8\u697c\u200b\u62d4\u5730\u200b\u8d77\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u57fa\u4e8e\u200b\u73b0\u6709\u200b\u7684\u200b\u57fa\u7840\u67b6\u6784\u200b\uff0c\u200b\u6bd4\u5982\u200b\u57fa\u4e8e\u200bflash-attention\u200b\u7684\u200bPagedAttention\u200b\u5185\u6838\u200b\u5b9e\u73b0\u200b\u7f13\u5b58\u200b\u7ba1\u7406\u5668\u200b\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u4ece\u96f6\u5f00\u59cb\u200b\u642d\u5efa\u200b\u3002</p> <p>\u200b\u4eca\u5929\u200b\u4ecb\u7ecd\u200b\u7684\u200b\u662f\u200b\u57fa\u4e8e\u200bDao-AILab/flash-attention\uff0c\u200b\u5b83\u200b\u91c7\u7528\u200b\u4e86\u200bflash-attention\u200b\u7684\u200bPagedAttention\u200b\u5185\u6838\u200b\u5b9e\u73b0\u200b\u3002\u200b\u7528\u6237\u200b\u53ea\u200b\u9700\u8981\u200b\u5b9e\u73b0\u200b\u7f13\u5b58\u200b\u7ba1\u7406\u5668\u200b\u3002\u200b\u5b83\u200b\u4e0e\u200b\u7f13\u5b58\u200b\u7ba1\u7406\u5668\u200b\u4e00\u8d77\u200b\u4f7f\u7528\u200b\uff08\u200b\u4f8b\u5982\u200b\u5728\u200b vLLM \u200b\u4e2d\u200b\uff09\uff0c\u200b\u8be5\u200b\u7f13\u5b58\u200b\u7ba1\u7406\u5668\u200b\u7ba1\u7406\u200b\u4f55\u65f6\u200b\u5206\u914d\u200b\u548c\u200b\u91ca\u653e\u200b\u5757\u200b\u4ee5\u53ca\u200b\u6784\u5efa\u200b\u5757\u8868\u200b\u3002\u200b\u7f13\u5b58\u200b\u7ba1\u7406\u5668\u200b\u7684\u200b\u5b9e\u73b0\u200b\u53d6\u51b3\u4e8e\u200b\u4f60\u200b\u5982\u4f55\u200b\u6784\u5efa\u200b\u63a8\u7406\u200b\u5f15\u64ce\u200b\uff0c\u200b\u56e0\u6b64\u200bflash-attention\u200b\u6ca1\u6709\u200b\u5b9e\u73b0\u200b\u8fd9\u6837\u200b\u7684\u200b\u7f13\u5b58\u200b\u7ba1\u7406\u5668\u200b\u3002</p> <p>\u200b\u7528\u6237\u200b\u5b9e\u73b0\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u7f13\u5b58\u200b\u7ba1\u7406\u5668\u200b\uff0c\u200b\u8be5\u200b\u7f13\u5b58\u200b\u7ba1\u7406\u5668\u200b\u7ba1\u7406\u200b\u4f55\u65f6\u200b\u5206\u914d\u200b\u548c\u200b\u91ca\u653e\u200b\u5757\u200b\u4ee5\u53ca\u200b\u6784\u5efa\u200b\u5757\u8868\u200b\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200b\u4e0b\u9762\u200b\u4ee3\u7801\u200b\u4e2d\u200b\u7684\u200bblock_table\uff0c\u200b\u7136\u540e\u200b\u4f20\u9012\u200bblock_table\u200b\u7ed9\u200bflash_attention\u3002</p> Python<pre><code>from flash_attn import flash_attn_with_kvcache\n\ny = flash_attn_with_kvcache(q, k_cache_paged, v_cache_paged, k, v, cache_seqlens=cache_seqlens, block_table=block_table, causal=True)\n</code></pre>"},{"location":"blog/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0paged_attention--%E5%9F%BA%E4%BA%8Eflash-attention%E7%9A%84pagedattention%E5%86%85%E6%A0%B8%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E7%AE%A1%E7%90%86%E5%99%A8/#flash_attn_with_kvcache\u4ecb\u7ecd","title":"flash_attn_with_kvcache\u200b\u4ecb\u7ecd","text":"Python<pre><code>def flash_attn_with_kvcache(\n    q,\n    k_cache,\n    v_cache,\n    k=None,\n    v=None,\n    rotary_cos=None,\n    rotary_sin=None,\n    cache_seqlens: Optional[Union[(int, torch.Tensor)]] = None,\n    cache_batch_idx: Optional[torch.Tensor] = None,\n    cache_leftpad: Optional[torch.Tensor] = None,\n    block_table: Optional[torch.Tensor] = None,\n    softmax_scale=None,\n    causal=False,\n    window_size=(-1, -1),  # -1 means infinite context window\n    softcap=0.0, # 0.0 means deactivated\n    rotary_interleaved=True,\n    alibi_slopes=None,\n    num_splits=0,\n    return_softmax_lse=False,\n):\n</code></pre> <p>\u200b\u5982\u679c\u200b k \u200b\u548c\u200b v \u200b\u4e0d\u200b\u4e3a\u200b None\uff0ck_cache \u200b\u548c\u200b v_cache \u200b\u5c06\u200b\u88ab\u200b\u539f\u5730\u200b\u66f4\u65b0\u200b\u4e3a\u200b\u6765\u81ea\u200b k \u200b\u548c\u200b v \u200b\u7684\u200b\u65b0\u503c\u200b\u3002\u200b\u8fd9\u200b\u5bf9\u4e8e\u200bdecoding\u200b\u5f88\u200b\u6709\u7528\u200b\uff1a\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u4f20\u5165\u200b\u4e0a\u200b\u4e00\u6b65\u200b\u7684\u200b\u7f13\u5b58\u200b\u952e\u200b/\u200b\u503c\u200b\uff0c\u200b\u5e76\u200b\u4f7f\u7528\u200b\u5f53\u524d\u200b\u6b65\u200b\u7684\u200b\u65b0\u952e\u200b/\u200b\u503c\u200b\u8fdb\u884c\u200b\u66f4\u65b0\u200b\uff0c\u200b\u7136\u540e\u200b\u4f7f\u7528\u200b\u66f4\u65b0\u200b\u540e\u200b\u7684\u200b\u7f13\u5b58\u200b\u8fdb\u884c\u200b\u6ce8\u610f\u529b\u200b\u8ba1\u7b97\u200b\uff0c\u200b\u6240\u6709\u200b\u8fd9\u4e9b\u200b\u90fd\u200b\u5728\u200b\u4e00\u4e2a\u200b\u5185\u6838\u200b\u4e2d\u200b\u5b8c\u6210\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u4f60\u200b\u4f20\u5165\u200b k / v\uff0c\u200b\u4f60\u200b\u5fc5\u987b\u200b\u786e\u4fdd\u200b\u7f13\u5b58\u200b\u8db3\u591f\u200b\u5927\u4ee5\u200b\u5bb9\u7eb3\u200b\u65b0\u503c\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0cKV \u200b\u7f13\u5b58\u200b\u53ef\u4ee5\u200b\u9884\u5148\u200b\u5206\u914d\u200b\u6700\u5927\u200b\u5e8f\u5217\u200b\u957f\u5ea6\u200b(max_seq_len)\uff0c\u200b\u5e76\u4e14\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b cache_seqlens \u200b\u6765\u200b\u8ddf\u8e2a\u200b\u6279\u5904\u7406\u200b\u4e2d\u200b\u6bcf\u4e2a\u200b\u5e8f\u5217\u200b\u7684\u200b\u5f53\u524d\u200b\u5e8f\u5217\u200b\u957f\u5ea6\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u4f60\u200b\u60f3\u200b\u8be6\u7ec6\u200b\u4e86\u89e3\u200bflash_attn_with_kvcache\uff0c\u200b\u8bf7\u200b\u53c2\u8003\u200bflash-attention\u200b\u63a5\u53e3\u200b\u8bf4\u660e\u200b\u3002</p>"},{"location":"blog/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0paged_attention--%E5%9F%BA%E4%BA%8Eflash-attention%E7%9A%84pagedattention%E5%86%85%E6%A0%B8%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E7%AE%A1%E7%90%86%E5%99%A8/#\u5b9e\u73b0cachemanager","title":"\u5b9e\u73b0\u200bCacheManager","text":"<p>\u200b\u5b9e\u73b0\u200b\u8be6\u7ec6\u200b\u4ee3\u7801\u200b\u53c2\u8003\u200b: tspeterkim/paged-attention-minimal</p> <p>\u200b\u5b9e\u73b0\u200bCacheManager\u200b\u7c7b\u200b\uff0c\u200b\u7528\u4e8e\u200b\u7ba1\u7406\u200b\u7f13\u5b58\u200b\u3002Flash Attention\u200b\u76ee\u524d\u200b\u652f\u6301\u200b\u7684\u200b\u5757\u200b\u5927\u5c0f\u200b\u4e3a\u200b256\u3002</p> Python<pre><code>block_size = 256\nclass CacheManager:\n    def __init__(self, tokens, block_size=block_size, batch_size=bsz, n_kv_heads=n_kv_heads, head_dim=head_dim):\n        self.block_size = block_size\n        self.batch_size = bsz\n        self.n_kv_heads = n_kv_heads\n        self.head_dim = head_dim\n        self.num_blocks = (max_seq_len // block_size) * 5 # TODO: make this dynamic\n        # [batch_id, (index, filled_positions)]\n        self.block_table = {i: [] for i in range(batch_size)}\n        self.free_blocks = set(range(self.num_blocks))\n\n        self.k_cache_paged = torch.randn(self.num_blocks, block_size, n_kv_heads, head_dim, device=device, dtype=torch.bfloat16)\n        self.v_cache_paged = torch.randn(self.num_blocks, block_size, n_kv_heads, head_dim, device=device, dtype=torch.bfloat16)\n\n        seq_lens = (tokens != -1).sum(1)\n        for i, t in enumerate(seq_lens.tolist()): \n            num_blocks_to_reserve = math.ceil(t / block_size)\n            num_filled_positions = t % block_size\n            for b in range(num_blocks_to_reserve):\n                index = self.get_free_block()\n                if b == num_blocks_to_reserve-1:\n                    self.block_table[i].append((index, num_filled_positions))\n                else:\n                    self.block_table[i].append((index, block_size))\n\n    # Returns a free block to allocate more tokens to.\n    # For simplicity, I raise an error when we run out of free blocks.\n    # In the actual implementation, it solves this through scheduling and preemption (see paper)\n    def get_free_block(self):\n        if len(self.free_blocks) == 0:\n            raise Exception('No more free blocks. Implement scheduling and preemption.')\n        index = random.choice(list(self.free_blocks))\n        self.free_blocks.remove(index)\n        return index\n\n    # Gets the logical block table that PagedAttention uses\n    # TODO: Serial computation makes it slow. Is there a faster way?\n    # \u200b\u5c06\u200bblock_table\u200b\u8f6c\u6362\u200b\u4e3a\u200btensor\uff0c\u200b\u7528\u4e8e\u200bPagedAttention\u200b\u7684\u200b\u8f93\u5165\u200b\n    def get_block_table(self):\n        max_len = max(len(b) for b in self.block_table.values())\n        block_table = [[-1] * max_len for _ in range(self.batch_size)]\n        # i is batch index, j is block index\n        for i, b in self.block_table.items():\n            for j, (index, _) in enumerate(b):\n                block_table[i][j] = index\n        return torch.tensor(block_table, dtype=torch.int32, device=device)\n\n    def get_kv_cache(self):\n        return self.k_cache_paged, self.v_cache_paged\n\n    # Specific to my KV implementation. Returns the last sequence position given the block table.\n    def get_last_pos(self):\n        last_pos = [(len(b)-1)*self.block_size + b[len(b)-1][1]-1 for b in self.block_table.values()]\n        return torch.tensor(last_pos, dtype=torch.int32, device=device)\n\n    # Frees request's blocks.\n    # Here, I leave one block, and free the rest. This is a limitation imposed by my kv cache implementation.\n    # TODO: Avoid this limitation.\n    def free_memory(self, index):\n        blocks = self.block_table[index]\n        if len(blocks) == 1:\n            return\n        for i, _ in blocks[1:]:\n            self.free_blocks.add(i)\n        self.block_table[index] = blocks[:1]\n\n    # Updates block table and filled positions.\n    # TODO: Again, pretty slow. Faster parallel way?\n    def update(self, eos_reached, input_text_mask):\n        for i, (eos, is_prompt) in enumerate(zip(eos_reached, input_text_mask)):\n            if is_prompt: # if the token is part of the original prompt, we skip\n                continue\n            if eos: # free the request's blocks since we have generated the complete answer\n                self.free_memory(i)\n                continue\n\n            old_index, n = self.block_table[i][-1]\n            if n == self.block_size: # allocate new block if necessary\n                new_index = self.get_free_block()\n                self.block_table[i].append((new_index, 1))\n            else: # otherwise, just use the next available slot in the block\n                self.block_table[i][-1] = (old_index, n+1)\n\n    def get_fragmented_memory_size(self):\n        size = 0\n        for b in self.block_table.values():\n            _, filled = b[-1] # only the last block has fragmentation\n            size += (self.block_size - filled) * n_kv_heads * head_dim * 2 * 2\n        return size\n\n# Create CacheManagers for each layer\n# \u200b\u4e3a\u200b\u6bcf\u5c42\u200b\u521b\u5efa\u200bCacheManager\ncms = [CacheManager(tokens) for _ in range(n_layers)]\n</code></pre> <p>\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b\u8fd9\u4e2a\u200b\u7f13\u5b58\u200b\u7ba1\u7406\u5668\u200b\u6765\u200b\u6267\u884c\u200bpaged_attention\u200b\u64cd\u4f5c\u200b\uff1f</p> <p>\u200b\u5728\u200bforward\u200b\u51fd\u6570\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u5728\u200b\u6bcf\u4e2a\u200b\u5c42\u4e0a\u200b\u6267\u884c\u200bpaged_attention\u200b\u64cd\u4f5c\u200b\u3002</p> Python<pre><code>def forward(tokens, start_pos):\n    bsz, T = tokens.shape\n    final_embedding = embedding_layer(tokens)\n    freqs_cis = freqs_cis_max[start_pos:start_pos+T, :]\n\n    for layer in range(n_layers):\n        q_layer = model[f'layers.{layer}.attention.wq.weight']\n        k_layer = model[f'layers.{layer}.attention.wk.weight']\n        v_layer = model[f'layers.{layer}.attention.wv.weight']\n        w_layer = model[f'layers.{layer}.attention.wo.weight']\n        ......\n\n        # \u200b\u8c03\u7528\u200b\u8be5\u5c42\u200b\u7684\u200bCacheManager\u200b\u4ee5\u200b\u83b7\u53d6\u200bblock_table\u200b\u548c\u200bkv_cache\n        block_table = cms[layer].get_block_table()\n        # print k_cache_paged.shape: torch.Size([160, 256, 8, 64]), \u200b\u4e3a\u200b(self.num_blocks, block_size, n_kv_heads, head_dim)\n        k_cache_paged, v_cache_paged = cms[layer].get_kv_cache()\n        cache_seqlens = torch.where(eos_reached, cms[layer].get_last_pos(), torch.tensor([start_pos]*bsz, dtype=torch.int32, device=device))\n        # \u200b\u6267\u884c\u200bpaged_attention\n        y = flash_attn_with_kvcache(q, k_cache_paged, v_cache_paged, k, v, cache_seqlens=cache_seqlens, block_table=block_table, causal=True)\n\n        # (Pdb) p tokens.shape\n        # torch.Size([1, 44])\n        # (Pdb) p y.shape\n        # torch.Size([1, 44, 32, 64])\n        # (Pdb) p q.shape\n        # torch.Size([1, 44, 32, 64])\n        # (Pdb) p k.shape\n        # torch.Size([1, 44, 8, 64])\n        # (Pdb) p v.shape\n        # torch.Size([1, 44, 8, 64])\n\n        # \u200b\u4ece\u200bpaged_attention\u200b\u4e2d\u200b\u83b7\u53d6\u200b\u7684\u200b\u7ed3\u679c\u200b, \u200b\u8f93\u5165\u200b\u5230\u200b\u4e0b\u200b\u4e00\u5c42\u200b\u8ba1\u7b97\u200b\n        stacked_qkv_attention = y.view(bsz, T, dim)\n\n        # (Pdb) p stacked_qkv_attention.shape\n        # torch.Size([1, 44, 2048])\n\n        embedding_delta = torch.matmul(stacked_qkv_attention, w_layer.T)\n        ......\n</code></pre> <p>\u200b\u5728\u200bdecode\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u8c03\u7528\u200bforward\u200b\u51fd\u6570\u200b\uff0c\u200b\u5e76\u4e14\u200b\u8c03\u7528\u200bcms[layer].update(eos_reached, input_text_mask)\u200b\u6765\u200b\u66f4\u65b0\u200bCacheManager\u200b\u7684\u200bblock_table\u200b\u548c\u200bfree_memory\u3002</p> Python<pre><code># Do inference\nfor cur_pos in range(min_prompt_len, max_seq_len):\n    next_token = forward(tokens[:,prev_pos:cur_pos], prev_pos)\n    next_token = torch.where(input_text_mask[:, cur_pos], tokens[:, cur_pos], next_token)\n    tokens[:, cur_pos] = next_token\n\n    pdb.set_trace()\n\n    # Update CacheManagers. Increment filled positions + allocate new block if required.\n    for layer in range(n_layers):\n        cms[layer].update(eos_reached.tolist(), input_text_mask[:, cur_pos].tolist())\n\n    eos_reached |= (~input_text_mask[:, cur_pos]) &amp; (torch.isin(next_token, stop_tokens))\n    prev_pos = cur_pos\n\n    if all(eos_reached):\n        break\n</code></pre> <p>Note</p> <p>\u200b\u5982\u679c\u200b\u4f60\u200b\u60f3\u200b\u8c03\u8bd5\u200bpython\u200b\u6587\u4ef6\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u5728\u200b\u4ee3\u7801\u200b\u4e2d\u200b\u6dfb\u52a0\u200b<code>import pdb; pdb.set_trace()</code>\u200b\u6765\u200b\u8bbe\u7f6e\u200b\u65ad\u70b9\u200b\u3002\u200b\u7136\u540e\u200b\u6267\u884c\u200bpython\u200b\u6587\u4ef6\u200b\u65f6\u200b\uff0c\u200b\u7a0b\u5e8f\u200b\u4f1a\u200b\u6682\u505c\u200b\u5728\u200b\u65ad\u70b9\u200b\u5904\u200b\u3002</p>"},{"location":"blog/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0paged_attention--%E5%9F%BA%E4%BA%8Eflash-attention%E7%9A%84pagedattention%E5%86%85%E6%A0%B8%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E7%AE%A1%E7%90%86%E5%99%A8/#\u53c2\u8003","title":"\u53c2\u8003","text":"<p>https://github.com/tspeterkim/paged-attention-minimal?tab=readme-ov-file</p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>MPI\u200b\u662f\u200b\u4ec0\u4e48\u200b\uff1f\u200b\u6709\u200b\u54ea\u4e9b\u200b\u96c6\u4f53\u200b\u901a\u4fe1\u200b\u64cd\u4f5c\u200b\u4ee5\u53ca\u200b\u5728\u200bTensorRT LLM\u200b\u4e2d\u200b\u5e94\u7528\u200b</li> <li>C++\u200b\u5f00\u53d1\u200b\u5e38\u89c1\u95ee\u9898\u200b\u4e4b\u200bABI\u200b\u517c\u5bb9\u6027\u95ee\u9898\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/%E5%AD%A6%E4%B9%A0openai-api%E5%AE%9E%E7%8E%B0%E7%9A%84%E7%9B%B8%E5%85%B3%E5%BA%93/","title":"\u5b66\u4e60\u200bOpenAI-API\u200b\u5b9e\u73b0\u200b\u7684\u200b\u76f8\u5173\u200b\u5e93","text":"<p>\u200b\u5728\u200b\u5e73\u65f6\u200b\u5de5\u4f5c\u200b\u4e2d\u200b\u6216\u8005\u200b\u5e73\u65f6\u200b\u6298\u817e\u200b\u4e2d\u200b\uff0c\u200b\u4f60\u200b\u5982\u679c\u200b\u90e8\u7f72\u200b\u6216\u8005\u200b\u8c03\u7528\u200b\u8fc7\u5927\u200b\u6a21\u578b\u200b\uff0c\u200b\u5305\u62ec\u200b\u8bed\u8a00\u200b\u5927\u200b\u6a21\u578b\u200bLLM\u3001\u200b\u89c6\u89c9\u200b\u5927\u200b\u6a21\u578b\u200bLVM\u200b\u7b49\u200b\u3002\u200b\u90a3\u4e48\u200b\uff0c\u200b\u4f60\u200b\u80af\u5b9a\u200b\u5bf9\u200bOpenAI api\u200b\u7279\u522b\u200b\u719f\u6089\u200b\u4e86\u200b\u3002\u200b\u4eca\u5929\u200b\u4e00\u8d77\u200b\u518d\u200b\u770b\u200b\u4e00\u4e0b\u200bOpenAI\u200b\u7684\u200bapi\u200b\u6587\u6863\u200b\uff0cpython api\u200b\u5f53\u7136\u200b\u662f\u200b\u6700\u200b\u5e38\u7528\u200b\u7684\u200b\u3002\u200b\u770b\u200b\u4e86\u200b\u4e00\u4e9b\u200b\u63a8\u8350\u200b\u7684\u200b\u5176\u5b83\u200b\u8bed\u8a00\u200b\u7684\u200bAPI\u3002\u200b\u6bd4\u5982\u200b:</p> <ul> <li> <p>cpp\u200b\u5b9e\u73b0\u200b\uff1aD7EAD/liboai</p> </li> <li> <p>rust\u200b\u5b9e\u73b0\u200b\uff1a64bit/async-openai</p> </li> </ul> <p>\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5b66\u4e60\u200b\u5230\u200b\uff1a</p> <ul> <li> <p>\u200b\u5982\u4f55\u200b\u7528\u200bC++\u3001rust\u200b\u5c01\u88c5\u200bopenai api</p> </li> <li> <p>\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u57fa\u4e8e\u200b\u5927\u200b\u6a21\u578b\u200b\u7684\u200b\u97f3\u4e50\u200b\u641c\u7d22\u200bapp</p> </li> <li> <p>\u200b\u5982\u4f55\u200b\u81ea\u5df1\u200b\u901a\u8fc7\u200bcurl\u200b\u5e93\u200b\u5c01\u88c5\u200b\u4e00\u4e2a\u200b\u4e0d\u9519\u200b\u7684\u200b\u7f51\u7edc\u200b\u5e93\u200b</p> </li> </ul> <p>\u200b\u7b80\u76f4\u200b\u592a\u200b\u7f8e\u5999\u200b\u4e86\u200b\uff01\uff01\uff01  </p>"},{"location":"blog/%E5%AD%A6%E4%B9%A0openai-api%E5%AE%9E%E7%8E%B0%E7%9A%84%E7%9B%B8%E5%85%B3%E5%BA%93/#cpp-liboai","title":"cpp liboai","text":""},{"location":"blog/%E5%AD%A6%E4%B9%A0openai-api%E5%AE%9E%E7%8E%B0%E7%9A%84%E7%9B%B8%E5%85%B3%E5%BA%93/#\u5bf9\u8bddapi\u7684\u4f7f\u7528\u4ee5\u53caconversation\u5b9e\u73b0","title":"\u5bf9\u8bdd\u200bapi\u200b\u7684\u200b\u4f7f\u7528\u200b\u4ee5\u53ca\u200bconversation\u200b\u5b9e\u73b0","text":"<p>\u200b\u7b80\u5355\u200b\u770b\u200b\u4e00\u4e0b\u200b\u7528\u6cd5\u200b, \u200b\u91c7\u7528\u200bc++ 17\u200b\u5b9e\u73b0\u200b\u7684\u200b\uff0c\u200b\u5199\u6cd5\u200b\u548c\u200b\u6ce8\u91ca\u200b\u90fd\u200b\u6bd4\u8f83\u200b\u6e05\u6670\u200b\u3002\u200b\u7528\u6237\u200b\u8bbe\u7f6e\u200b\u7684\u200bsystem\u3001user\u200b\u6570\u636e\u200b\u90fd\u200b\u901a\u8fc7\u200bAddxxx API\uff0c\u200b\u4fdd\u5b58\u200b\u5230\u200bConversation\u200b\u5bf9\u8c61\u200b\u4e2d\u200b\u3002\u200b\u6a21\u578b\u200b\u8fd4\u56de\u200b\u7684\u200bassitant\u200b\u4fe1\u606f\u200b\u4e5f\u200b\u901a\u8fc7\u200bUpdate API\u200b\u52a0\u5165\u200b\u5230\u200b\u5176\u4e2d\u200b\u3002\u200b\u8fd9\u6837\u200bConversation\u200b\u5bf9\u8c61\u200b\u4e2d\u200b\u5c31\u200b\u4fdd\u5b58\u200b\u4e86\u200b\u6574\u4e2a\u200b\u5bf9\u8bdd\u200b\u4e0a\u4e0b\u6587\u200b\u4fe1\u606f\u200b\u3002 \u200b\u6bcf\u6b21\u200b\u5bf9\u8bdd\u200b\u7684\u200b\u65f6\u5019\u200b\u5c06\u200b\u4e0a\u4e0b\u6587\u200b\u8bf7\u6c42\u200b\u6a21\u578b\u200b\uff0c\u200b\u6a21\u578b\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u5b8c\u6210\u200b\u5bf9\u8bdd\u200b\u4e86\u200b\u3002</p> <p></p>C++<pre><code>#include \"liboai.h\"\n\nusing namespace liboai;\n\nint main() {\n  OpenAI oai;\n\n  // create a conversation\n  Conversation convo;\n\n  // add a message to the conversation\n  convo.AddUserData(\"What is the point of taxes?\");\n\n  if (oai.auth.SetKeyEnv(\"OPENAI_API_KEY\")) {\n    try {\n      Response response = oai.ChatCompletion-&gt;create(\n        \"gpt-3.5-turbo\", convo\n      );\n\n      // update our conversation with the response\n      convo.Update(response);  \n\n      // print the response\n      std::cout &lt;&lt; convo.GetLastResponse() &lt;&lt; std::endl;\n    }\n    catch (std::exception&amp; e) {\n      std::cout &lt;&lt; e.what() &lt;&lt; std::endl;\n    }\n  }\n}\n</code></pre> \u200b\u5728\u200bConversation\u200b\u4e2d\u200b\uff0c\u200b\u901a\u8fc7\u200bnlohmann::json\uff08\u200b\u4e00\u4e2a\u200bc++\u200b\u7684\u200bjson\u200b\u5e93\u200b\uff0c\u200b\u91cd\u8f7d\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u5f88\u591a\u200b\u51fd\u6570\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5f88\u200b\u65b9\u4fbf\u200b\u7684\u200b\u7528\u200b[]\u200b\u53bb\u200b\u64cd\u4f5c\u200bjson\u200b\u5143\u7d20\u200b\uff0c\u200b\u548c\u200bpython\u200b\u5f88\u200b\u7c7b\u4f3c\u200b\uff09\u200b\u4fe1\u606f\u200b\u53bb\u200b\u4fdd\u5b58\u200b\u804a\u5929\u200b\u5bf9\u8bdd\u200b\u7684\u200b\u4e0a\u4e0b\u6587\u200b\u4fe1\u606f\u200b\u548c\u200bfunction\u3002 C++<pre><code>nlohmann::json _conversation;\nstd::optional&lt;nlohmann::json&gt; _functions = std::nullopt;\n</code></pre><p></p>"},{"location":"blog/%E5%AD%A6%E4%B9%A0openai-api%E5%AE%9E%E7%8E%B0%E7%9A%84%E7%9B%B8%E5%85%B3%E5%BA%93/#\u7f51\u7edc\u5e93","title":"\u7f51\u7edc\u200b\u5e93","text":"<p>liboai\u200b\u6709\u4e2a\u200b\u5f88\u200b\u6709\u8da3\u200b\u7684\u200b\u5730\u65b9\u200b\uff0c\u200b\u4ed6\u200b\u7684\u200b\u7f51\u7edc\u200b\u5e93\u662f\u200b\u81ea\u5df1\u200b\u901a\u8fc7\u200bcurl\u200b\u5e93\u200b\u5c01\u88c5\u200b\u7684\u200b\u3002\u200b\u56e0\u4e3a\u200b\u524d\u200b\u51e0\u5929\u200b\u63a5\u89e6\u200b\u4e00\u4e2a\u200b\u5f00\u53d1\u677f\u200b\uff0c\u200b\u53ea\u6709\u200bcurl\u200b\u5e93\u200b\uff0c\u200b\u4e5f\u200b\u9700\u8981\u200b\u81ea\u5df1\u200b\u5b9e\u73b0\u200bhttp\u200b\u8bf7\u6c42\u200b\u7b49\u200b\uff0c\u200b\u4eca\u5929\u200b\u521a\u597d\u200b\u770b\u5230\u200b\u8fd9\u4e2a\u200b\u5f88\u200b\u5947\u5999\u200b\u3002</p> <p>\u200b\u5b83\u200b\u5c01\u88c5\u200b\u4e86\u200bGET\u3001POST\u3001DELETE\u200b\u8bf7\u6c42\u200b\uff0c\u200b\u5f02\u6b65\u200b\u901a\u8fc7\u200bstd::async\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u8d77\u200b\u4e00\u4e2a\u200b\u7ebf\u7a0b\u200b\u5355\u72ec\u200b\u8dd1\u200b\u3002\u200b\u6bd4\u5982\u200bGET\u3002 \u200b\u6e90\u7801\u200b\u6587\u4ef6\u200b\uff1aliboaiincludecorenetimpl.h \u200b\u91cc\u9762\u200b\u6709\u4e2a\u200bSession\u200b\u7c7b\u54c8\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u8bf7\u6c42\u200b\u5bf9\u5e94\u200b\u4e00\u4e2a\u200bSession\uff0c\u200b\u8c03\u7528\u200bcurl\u200b\u7684\u200bapi\u200b\u8bbe\u7f6e\u200bheader\uff0c\u200b\u8bbe\u7f6e\u200b\u53c2\u6570\u200b\uff0c\u200b\u83b7\u53d6\u200b\u8fd4\u56de\u503c\u200b\u7b49\u200b\u3002\u200b\u4ee3\u7801\u200b\u5f88\u6f02\u4eae\u200b\u3002 </p>C++<pre><code>#include &lt;curl/curl.h&gt;\nclass Session final : private CurlHolder {\npublic:\n    Session() = default;\n    ~Session() override;\n\n    liboai::Response Get();\n    liboai::Response Post();\n    liboai::Response Delete();\n    liboai::Response Download(std::ofstream&amp; file);\n    void ClearContext();\n    ...    \n}\n</code></pre> Get\u200b\u7684\u200b\u5b9e\u73b0\u200b\uff0c C++<pre><code>liboai::Response liboai::netimpl::Session::Get() {\n    #if defined(LIBOAI_DEBUG)\n        _liboai_dbg(\n            \"[dbg] [@%s] Called PrepareGet().\\n\",\n            __func__\n        );\n    #endif\n\n    this-&gt;PrepareGet();\n\n    this-&gt;Perform();\n\n    return Complete();\n}\n\nvoid liboai::netimpl::Session::PrepareGet() {\n    // holds error codes - all init to OK to prevent errors\n    // when checking unset values\n    CURLcode e[5]; memset(e, CURLcode::CURLE_OK, sizeof(e));\n\n    if (this-&gt;hasBody) {\n        e[0] = curl_easy_setopt(this-&gt;curl_, CURLOPT_NOBODY, 0L);\n        e[1] = curl_easy_setopt(this-&gt;curl_, CURLOPT_CUSTOMREQUEST, \"GET\");\n    }\n    else {\n        e[2] = curl_easy_setopt(this-&gt;curl_, CURLOPT_NOBODY, 0L);\n        e[3] = curl_easy_setopt(this-&gt;curl_, CURLOPT_CUSTOMREQUEST, nullptr);\n        e[4] = curl_easy_setopt(this-&gt;curl_, CURLOPT_HTTPGET, 1L);\n    }\n\n    ErrorCheck(e, 5, \"liboai::netimpl::Session::PrepareGet()\");\n\n    this-&gt;Prepare();\n}\n</code></pre><p></p> <p>\u200b\u76ee\u524d\u200b\u8bb2\u200b\u5230\u200b\u8fd9\u91cc\u200b\u4e86\u200b\uff0c\u200b\u5bf9\u200b\u6e90\u7801\u200b\u6709\u200b\u5174\u8da3\u200b\u7684\u200b\u670b\u53cb\u200b\u53ef\u4ee5\u200b\u81ea\u5df1\u200b\u53bb\u200b\u7814\u7a76\u200b\u4e00\u4e0b\u200b\u3002</p>"},{"location":"blog/%E5%AD%A6%E4%B9%A0openai-api%E5%AE%9E%E7%8E%B0%E7%9A%84%E7%9B%B8%E5%85%B3%E5%BA%93/#rust-async-openai","title":"rust async-openai","text":"<p>\u200b\u91c7\u7528\u200btokio\u200b\u7684\u200b\u5b9e\u73b0\u200b\u7684\u200b\u4e00\u4e2a\u200b\u5f02\u6b65\u200b\u5e93\u54c8\u200b\uff0capi\u200b\u4e5f\u200b\u5f88\u200b\u6e05\u6670\u200b\u3002\u200b\u8fd9\u91cc\u200b\u89c9\u5f97\u200b\u6709\u8da3\u200b\u7684\u200b\uff0c\u200b\u7b2c\u4e00\u4e2a\u200b\u53ef\u4ee5\u200b\u5b66\u4e60\u200b\u4e00\u4e0b\u200b\u8fd9\u4e2a\u200b\u5e93\u200b\uff0c\u200b\u7b2c\u4e8c\u4e2a\u200b\u6211\u200b\u53d1\u73b0\u200b\u4f5c\u8005\u200b\u81ea\u5df1\u200b\u5199\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u5e94\u7528\u200bSong search in Rust using OpenAI\u3002 \u200b\u548c\u200bRAG\u200b\u77e5\u8bc6\u5e93\u200b\u539f\u7406\u200b\u57fa\u672c\u200b\u4e00\u6837\u200b\uff0c\u200b\u628a\u200b\u6b4c\u8bcd\u200b\u548c\u200b\u4f5c\u8005\u200b\u4fe1\u606f\u200b\u7b49\u200b\u901a\u8fc7\u200bembedding\u200b\u6a21\u578b\u200b\u8f6c\u6362\u6210\u200bvector\u200b\u4fe1\u606f\u200b\uff0c\u200b\u5c06\u200b\u6b4c\u8bcd\u200b\u4fe1\u606f\u200b\u548c\u200bvector\u200b\u4fe1\u606f\u200b\u5b58\u50a8\u200b\u5230\u200b\u5411\u91cf\u200b\u6570\u636e\u5e93\u200b\u4e2d\u200b\uff0c\u200b\u7136\u540e\u200b\u901a\u8fc7\u200b\u8ddd\u79bb\u200b\u7b97\u6cd5\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u4f7f\u7528\u200b\u4e86\u200b\u4f59\u5f26\u200b\u8ddd\u79bb\u200b\uff0c\u200b\u8ba1\u7b97\u200b\u76f8\u4f3c\u200b\u5ea6\u200b\u3002\u200b\u7136\u540e\u200b\u641c\u7d22\u200b\u51fa\u200b\u6392\u540d\u200b\u9760\u200b\u524d\u200b\u7684\u200b\u97f3\u4e50\u200b\u3002</p>"},{"location":"blog/%E5%AD%A6%E4%B9%A0openai-api%E5%AE%9E%E7%8E%B0%E7%9A%84%E7%9B%B8%E5%85%B3%E5%BA%93/#async-openai-\u7528\u6cd5","title":"async-openai \u200b\u7528\u6cd5","text":"Rust<pre><code>use std::error::Error;\n\nuse async_openai::{\n    types::{\n        ChatCompletionRequestAssistantMessageArgs, ChatCompletionRequestSystemMessageArgs,\n        ChatCompletionRequestUserMessageArgs, CreateChatCompletionRequestArgs,\n    },\n    Client,\n};\n\n#[tokio::main]\nasync fn main() -&gt; Result&lt;(), Box&lt;dyn Error&gt;&gt; {\n    let client = Client::new();\n\n    let request = CreateChatCompletionRequestArgs::default()\n        .max_tokens(512u32)\n        .model(\"gpt-3.5-turbo\")\n        .messages([\n            ChatCompletionRequestSystemMessageArgs::default()\n                .content(\"You are a helpful assistant.\")\n                .build()?\n                .into(),\n            ChatCompletionRequestUserMessageArgs::default()\n                .content(\"Who won the world series in 2020?\")\n                .build()?\n                .into(),\n            ChatCompletionRequestAssistantMessageArgs::default()\n                .content(\"The Los Angeles Dodgers won the World Series in 2020.\")\n                .build()?\n                .into(),\n            ChatCompletionRequestUserMessageArgs::default()\n                .content(\"Where was it played?\")\n                .build()?\n                .into(),\n        ])\n        .build()?;\n\n    println!(\"{}\", serde_json::to_string(&amp;request).unwrap());\n\n    let response = client.chat().create(request).await?;\n\n    println!(\"\\nResponse:\\n\");\n    for choice in response.choices {\n        println!(\n            \"{}: Role: {}  Content: {:?}\",\n            choice.index, choice.message.role, choice.message.content\n        );\n    }\n\n    Ok(())\n}\n</code></pre>"},{"location":"blog/%E5%AD%A6%E4%B9%A0openai-api%E5%AE%9E%E7%8E%B0%E7%9A%84%E7%9B%B8%E5%85%B3%E5%BA%93/#\u4f7f\u7528openai\u8fdb\u884c\u97f3\u4e50\u641c\u7d22","title":"\u4f7f\u7528\u200bopenai\u200b\u8fdb\u884c\u200b\u97f3\u4e50\u200b\u641c\u7d22\u200b\ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350","text":"<p>\u200b\u6e90\u7801\u200b64bit/song-search-rust-openai\u3002 \u200b\u770b\u200b\u4e86\u200b\u4ee5\u540e\u200b\u53d1\u73b0\u200b\uff0c\u200b\u4f60\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u6253\u9020\u200b\u4e00\u4e2a\u200b\u81ea\u5df1\u200b\u7684\u200b\u5e94\u7528\u200b\uff0c\u200b\u662f\u4e0d\u662f\u200b\u5f88\u200b\u7b80\u5355\u200b\u3002 \u200b\u4f5c\u8005\u200b\u5f53\u65f6\u200b\u770b\u200b\u4e86\u200b\u5f88\u591a\u200b\u5411\u91cf\u200b\u6570\u636e\u5e93\u200b\u54c8\u200b\uff0c\u200b\u6700\u540e\u200b\u9009\u62e9\u200b\u4e86\u200b\u7528\u200bpgvector - Postgres\u200b\u6570\u636e\u5e93\u200b\u7684\u200b\u6269\u5c55\u200b\u3002\u200b\u91c7\u7528\u200bSQL\u200b\u8bed\u6cd5\u200b\uff0c\u200b\u5bf9\u200b\u5411\u91cf\u200b\u5b58\u50a8\u200b\u548c\u200b\u67e5\u8be2\u200b\u3002</p> <p>During my non-exhaustive search I found various vector databases and libraries like pinecone, milvus, Weaviate, and Faiss. And there are many more. But none of them seem to have an out-of-the-box ready to go library in Rust. Except pgvector - a Postgres extension to store and query vectors! The pgvector project provides Docker image with extension already installed as well as Rust library \ud83d\ude0e</p> <p>\u200b\u63d2\u5165\u200b\uff1a </p>Rust<pre><code>impl Song {\n    /// Save embedding for this Song in DB\n    pub async fn save_embedding(&amp;self, pg_pool: &amp;PgPool,\n      pgvector: pgvector::Vector) -&gt; Result&lt;()&gt; {\n\n        sqlx::query(r#\"INSERT INTO songs\n            (artist, title, album, lyric, embedding)\n            VALUES ($1, $2, $3, $4, $5)\"#)\n            .bind(self.artist.clone())\n            .bind(self.title.clone())\n            .bind(self.album.clone())\n            .bind(self.lyric.clone())\n            .bind(pgvector)\n            .execute(pg_pool)\n            .await?;\n\n        Ok(())\n    }\n}\n</code></pre><p></p> <p>\u200b\u641c\u7d22\u200b\uff1a </p>Rust<pre><code>// Search for nearest neighbors in database\nOk(sqlx::query(\n    r#\"SELECT artist, title, album, lyric\n        FROM songs ORDER BY embedding &lt;-&gt; $1 LIMIT $2::int\"#,\n)\n.bind(pgvector)\n.bind(n)\n.fetch_all(pg_pool)\n.await?\n.into_iter()\n.map(|r| Song {\n    artist: r.get(\"artist\"),\n    title: r.get(\"title\"),\n    album: r.get(\"album\"),\n    lyric: r.get(\"lyric\"),\n})\n.collect())\n</code></pre> bye\uff01\uff01\uff01\u200b\u6709\u200b\u5174\u8da3\u200b\u7684\u200b\u5c0f\u4f19\u4f34\u200b\u53ef\u4ee5\u200b\u8ddf\u7740\u200b\u6211\u200b\u7684\u200b\u94fe\u63a5\u200b\uff0c\u200b\u8be6\u7ec6\u200b\u770b\u4e00\u770b\u200b\u6e90\u7801\u200b\u3002<p></p> <ul> <li>\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bneovim\u200b\u63d2\u4ef6\u200bnvim_rotate_chars\u200b\u6765\u200b\u8f6e\u8f6c\u200b\u4ee3\u7801\u200b</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> <li>\u200b\u4ece\u200bDeepseek\u200b\u5f00\u6e90\u200b\u5e93\u200b3FS\u200b\u4e2d\u200b\u5b66\u4e60\u200bfuse\u200b\u7684\u200b\u4f7f\u7528\u200b-\u200b\u5982\u4f55\u200b\u5f00\u53d1\u200b\u4e00\u4e2a\u200b\u6587\u4ef6\u7cfb\u7edf\u200b\uff08\u200b\u4e00\u200b\uff09</li> <li>C++20\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u57fa\u4e8e\u200b\u5c5e\u6027\u200b\u6d4b\u8bd5\u200b\u7684\u200bquickcheck-cpp\u200b\u5e93\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> </ul>"},{"location":"blog/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAneovim%E6%8F%92%E4%BB%B6nvim_rotate_chars%E6%9D%A5%E8%BD%AE%E8%BD%AC%E4%BB%A3%E7%A0%81/","title":"\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bneovim\u200b\u63d2\u4ef6\u200bnvim_rotate_chars\u200b\u6765\u200b\u8f6e\u8f6c\u200b\u4ee3\u7801","text":"<p>\u200b\u6587\u7ae0\u200b\u4ecb\u7ecd\u200b\u4e86\u200b\u5982\u679c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u8f6e\u8f6c\u200b\u4ee3\u7801\u200b\u7684\u200bneovim\u200b\u63d2\u4ef6\u200b\uff0c\u200b\u7b80\u5355\u200b\u7684\u200b\u7b56\u7565\u200b\u5c31\u662f\u200ba-&gt;b, b-&gt;c, \u2026, z-&gt;a\u3002 \u200b\u8bd5\u60f3\u200b\u4e00\u4e0b\u200b\u4f60\u200b\u7684\u200b\u4ee3\u7801\u200b\u7ecf\u8fc7\u200b\u8f6e\u8f6c\u200b\u4ee5\u540e\u200b\u4f1a\u200b\u662f\u200b\u600e\u4e48\u6837\u200b\uff0c\u200b\u8f6e\u8f6c\u200b\u4e00\u4e2a\u200b\u4f4d\u7f6e\u200b\u3001n\u200b\u4e2a\u200b\u4f4d\u7f6e\u200b\u5462\u200b\uff1f\u200b\u914d\u200b\u4e0a\u200b\u5feb\u6377\u952e\u200b\uff0c\u200b\u5728\u200b\u522b\u4eba\u200b\u770b\u200b\u4f60\u200b\u4ee3\u7801\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u8f6e\u8f6c\u200b\u4e00\u4e0b\u200b\u5b57\u7b26\u200b\uff0c\u200b\u5411\u5de6\u8f6c\u200b\u4e86\u200b\u8fd8\u200b\u80fd\u200b\u652f\u6301\u200b\u5411\u200b\u53cd\u200b\u65b9\u5411\u200b\u8f6c\u200b\u56de\u6765\u200b\u3002\u200b\u9700\u8981\u200b\u5b9e\u73b0\u200b\u5982\u4e0b\u200b\u529f\u80fd\u200b:</p> <ul> <li>\u200b\u652f\u6301\u200b\u6307\u5b9a\u200b\u8f6e\u8f6c\u200b\u7684\u200b\u6b65\u6570\u200b\u3001\u200b\u65b9\u5411\u200b\uff08\u200b\u5373\u200b\u5411\u200b\u5de6\u5411\u53f3\u200b\uff09\uff1b</li> <li>\u200b\u652f\u6301\u200bunicode\u200b\u5b57\u7b26\u200b\uff0c\u200b\u6bd4\u5982\u200b\u4e2d\u6587\u200b\u5b57\u7b26\u200b\u7684\u200b\u6539\u53d8\u200b\uff1b</li> <li>neovim\u200b\u914d\u7f6e\u200b\u5feb\u6377\u952e\u200b\u548c\u200bcommand\u200b\u547d\u4ee4\u884c\u200b\u8f93\u5165\u200b\uff1b</li> <li>\u200b\u91c7\u7528\u200brust\u200b\u548c\u200blua\u200b\u7f16\u5199\u200b\uff0c\u200b\u57fa\u4e8e\u200bnvim-oxi\uff0c\u200b\u548c\u200b\u4f20\u7edf\u200brpc\u200b\u4e0d\u540c\u200b\uff0c\u200b\u76f4\u63a5\u200b\u8c03\u7528\u200bc-api bind\u3002</li> </ul> <p>\u200b\u542c\u200b\u8d77\u6765\u200b\u8fd8\u200b\u6709\u70b9\u200b\u4f20\u7edf\u200b\u7684\u200b\u4ee3\u7801\u200b\u52a0\u5bc6\u7b97\u6cd5\u200b\u7684\u200b\u610f\u601d\u200b\uff0c\u200b\u65cb\u8f6c\u200b\u52a0\u5bc6\u200b\u6216\u8005\u200b\u53eb\u200b\u8f6e\u8f6c\u673a\u200b\u52a0\u5bc6\u200b\u3002</p>"},{"location":"blog/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAneovim%E6%8F%92%E4%BB%B6nvim_rotate_chars%E6%9D%A5%E8%BD%AE%E8%BD%AC%E4%BB%A3%E7%A0%81/#\u7b80\u4ecb","title":"\u7b80\u4ecb","text":"<p>KenForever1/nvim-rotate-chars\u200b\u91c7\u7528\u200bnvim-oxi\u200b\u5f00\u53d1\u200b\u7684\u200bnvim\u200b\u63d2\u4ef6\u200b\uff0c\u200b\u7528\u4e8e\u200b\u65cb\u8f6c\u200b\u9009\u4e2d\u200b\u7684\u200b\u6587\u672c\u200b\u5b57\u7b26\u200b\u3002nvim-oxi\u200b\u63d0\u4f9b\u200b\u4e86\u200bNeovim\u200b\u7f16\u8f91\u5668\u200b\u7684\u200bRust API\u200b\u7ed1\u5b9a\u200b\u3002 \u200b\u4f20\u7edf\u200b\u7684\u200b\u63d2\u4ef6\u200b\u65b9\u6cd5\u200b\u6bd4\u5982\u200b\uff1aVimscript or Lua\u200b\u662f\u200b\u901a\u8fc7\u200bRPC channels\u200b\u548c\u200bneovim\u200b\u8fdb\u884c\u200b\u901a\u4fe1\u200b\uff0c\u200b\u91c7\u7528\u200bAPI\u200b\u7ed1\u5b9a\u200b\u7684\u200b\u65b9\u5f0f\u200b\u3002\u200b\u4e3b\u8981\u200b\u662f\u200b\u907f\u514d\u200b\u4e86\u200b\u5e8f\u5217\u5316\u200b\u5f00\u9500\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5728\u200b\u540c\u4e00\u4e2a\u200b\u8fdb\u7a0b\u200b\u4e2d\u200b\u76f4\u63a5\u200b\u8c03\u7528\u200bapi\u200b\u7ed1\u5b9a\u200b\u56de\u8c03\u200b\u51fd\u6570\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u7f16\u7a0b\u200b\u65f6\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u65b9\u4fbf\u200b\u7684\u200bapi\u200b\u63d0\u793a\u200b\u548c\u200b\u51fd\u6570\u200b\u89e3\u91ca\u200b\u3002\u200b\u4f18\u52bf\u200b\u7684\u8bdd\u200b\uff0c\u200b\u76f8\u6bd4\u200blua\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200brust\u200b\u4e30\u5bcc\u200b\u7684\u200bcrate\u200b\u5e93\u200b\uff0c\u200b\u8fd8\u6709\u200b\u7f16\u8bd1\u200b\u65f6\u200b\u68c0\u67e5\u200b\u3002</p> <p>nvim-oxi provides safe and idiomatic Rust bindings to the rich API exposed by the Neovim text editor.The project is mostly intended for plugin authors, although nothing\u2019s stopping end users from writing their Neovim configs in Rust.</p> <p>\u200b\u5982\u4f55\u200b\u5199\u200b\u4e00\u4e2a\u200b\u63d2\u4ef6\u200b\uff0c\u200b\u9996\u5148\u200b\u9700\u8981\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200blib\uff0clib.rs\u200b\u5185\u5bb9\u200b\uff1a </p>Rust<pre><code>use nvim_oxi::{Dictionary, Function, Object};\n\n#[nvim_oxi::plugin]\nfn calc() -&gt; Dictionary {\n    let add = Function::from_fn(|(a, b): (i32, i32)| a + b);\n\n    let multiply = Function::from_fn(|(a, b): (i32, i32)| a * b);\n\n    let compute = Function::from_fn(\n        |(fun, a, b): (Function&lt;(i32, i32), i32&gt;, i32, i32)| {\n            fun.call((a, b)).unwrap()\n        },\n    );\n\n    Dictionary::from_iter([\n        (\"add\", Object::from(add)),\n        (\"multiply\", Object::from(multiply)),\n        (\"compute\", Object::from(compute)),\n    ])\n}\n</code></pre> \u200b\u539f\u7406\u200b\u5c31\u662f\u200b\u7136\u540e\u200b\u901a\u8fc7\u200b\u6307\u5b9a\u200bcdylib\uff0c\u200b\u7f16\u8bd1\u6210\u200bc ABI\u200b\u7684\u200bso\u3002neovim\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u52a0\u8f7d\u200blua require(\u201cso_name\u201d), \u200b\u5c31\u200b\u53ef\u4ee5\u200b\u8c03\u7528\u200b\u63d2\u4ef6\u200b\u4e2d\u200b\u5b9e\u73b0\u200b\u7684\u200bcalc\u200b\u51fd\u6570\u200b\u4e86\u200b\u3002\u200b\u8be6\u7ec6\u200b\u53c2\u8003\u200b\uff1aexamples\u3002 Text Only<pre><code>[lib]\ncrate-type = [\"cdylib\"]\n\n[dependencies]\nnvim-oxi = \"0.3\"\n</code></pre><p></p>"},{"location":"blog/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAneovim%E6%8F%92%E4%BB%B6nvim_rotate_chars%E6%9D%A5%E8%BD%AE%E8%BD%AC%E4%BB%A3%E7%A0%81/#nvim-roate-chars-\u63d2\u4ef6","title":"nvim-roate-chars \u200b\u63d2\u4ef6","text":"<p>\u200b\u5b9e\u73b0\u200b\u7684\u200b\u529f\u80fd\u200b\uff0c\u200b\u6bd4\u5982\u200b\uff1a </p>Text Only<pre><code>aaa\nbbb\nccc\n</code></pre> \u200b\u5411\u200b\u53f3\u200b\u65cb\u8f6c\u200b1\u200b\u4e2a\u5b57\u7b26\u200b\uff0c\u200b\u7ed3\u679c\u200b\u4e3a\u200b\uff1a Text Only<pre><code>bbb\nccc\nddd\n</code></pre><p></p> <p>\u200b\u6548\u679c\u200b\uff1a</p> <ul> <li>\u200b\u5feb\u6377\u952e\u200b\u89e6\u53d1\u200b</li> </ul> <p></p> <ul> <li>command\u200b\u89e6\u53d1\u200b</li> </ul> <p></p>"},{"location":"blog/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAneovim%E6%8F%92%E4%BB%B6nvim_rotate_chars%E6%9D%A5%E8%BD%AE%E8%BD%AC%E4%BB%A3%E7%A0%81/#\u4f7f\u7528\u65b9\u6cd5","title":"\u4f7f\u7528\u200b\u65b9\u6cd5","text":""},{"location":"blog/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAneovim%E6%8F%92%E4%BB%B6nvim_rotate_chars%E6%9D%A5%E8%BD%AE%E8%BD%AC%E4%BB%A3%E7%A0%81/#\u4f7f\u7528\u65b9\u6cd51","title":"\u4f7f\u7528\u200b\u65b9\u6cd5\u200b1","text":"<p>\u200b\u901a\u8fc7\u200b\u5feb\u6377\u952e\u200b<code>&lt;leader-r&gt;</code>\u200b\u8fdb\u884c\u200b\u65cb\u8f6c\u200b\u3002\u200b\u6839\u636e\u200b\u63d0\u793a\u200b\u8f93\u5165\u200b\u9700\u8981\u200b\u65cb\u8f6c\u200b\u7684\u200b\u65b9\u5411\u200b\uff08true\u200b\u4ee3\u8868\u200b\u5411\u200b\u53f3\u200b\uff0c false\u200b\u4ee3\u8868\u200b\u5411\u200b\u5de6\u200b\uff09\u200b\u548c\u200b\u5b57\u7b26\u200b\u6570\u200b\u3002 \u200b\u4f8b\u5982\u200b\uff1avisual mode\u200b\u4e0b\u200b\u5c06\u200b\u9009\u4e2d\u200b\u7684\u200b\u884c\u200b\uff0c\u200b\u5411\u200b\u53f3\u200b\u65cb\u8f6c\u200b1\u200b\u4e2a\u5b57\u7b26\u200b\u3002 </p>Text Only<pre><code>Enter direction and rotation number: true 1\n</code></pre><p></p>"},{"location":"blog/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAneovim%E6%8F%92%E4%BB%B6nvim_rotate_chars%E6%9D%A5%E8%BD%AE%E8%BD%AC%E4%BB%A3%E7%A0%81/#\u4f7f\u7528\u65b9\u6cd52","title":"\u4f7f\u7528\u200b\u65b9\u6cd5\u200b2","text":"<p>\u200b\u901a\u8fc7\u200bCommand\u200b\u8f93\u5165\u200b\u8fdb\u884c\u200b\u65cb\u8f6c\u200b\u3002\u200b\u5728\u200b Neovim \u200b\u4e2d\u200b\u8fdb\u5165\u200b\u89c6\u89c9\u200b\u6a21\u5f0f\u200b\uff0c\u200b\u9009\u4e2d\u200b\u4e00\u6bb5\u200b\u6587\u672c\u200b\uff0c\u200b\u7136\u540e\u200b\u6267\u884c\u547d\u4ee4\u200b\uff1a </p>Text Only<pre><code>:RotateChars [direction] [steps]\n</code></pre> visual mode\u200b\u4e0b\u200b\u5c06\u200b\u9009\u4e2d\u200b\u7684\u200b\u884c\u200b\uff0c\u200b\u5411\u200b\u53f3\u200b\u65cb\u8f6c\u200b1\u200b\u4e2a\u5b57\u7b26\u200b\u3002 Bash<pre><code>:'&lt;,'&gt; RotateChars true 1\n</code></pre> \u200b\u5411\u200b\u5de6\u200b\u65cb\u8f6c\u200b1\u200b\u4e2a\u5b57\u7b26\u200b\u3002 Bash<pre><code>:'&lt;,'&gt; RotateChars false 1\n</code></pre><p></p>"},{"location":"blog/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAneovim%E6%8F%92%E4%BB%B6nvim_rotate_chars%E6%9D%A5%E8%BD%AE%E8%BD%AC%E4%BB%A3%E7%A0%81/#\u5b9e\u73b0\u4e00\u4e9b\u7ec6\u8282","title":"\u5b9e\u73b0\u200b\u4e00\u4e9b\u200b\u7ec6\u8282","text":""},{"location":"blog/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAneovim%E6%8F%92%E4%BB%B6nvim_rotate_chars%E6%9D%A5%E8%BD%AE%E8%BD%AC%E4%BB%A3%E7%A0%81/#\u91c7\u7528rayon\u5e76\u884c\u9ad8\u6548\u65cb\u8f6c\u5b57\u7b26","title":"\u91c7\u7528\u200brayon\u200b\u5e76\u884c\u200b\u9ad8\u6548\u200b\u65cb\u8f6c\u200b\u5b57\u7b26","text":"<p>\u200b\u547d\u4ee4\u200b\u53c2\u6570\u200b\uff1a\u200b\u547d\u4ee4\u200b RotateChars \u200b\u63a5\u53d7\u200b\u4e24\u4e2a\u200b\u53ef\u200b\u9009\u200b\u53c2\u6570\u200b\uff1a + direction\uff1a\u200b\u65cb\u8f6c\u200b\u65b9\u5411\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u662f\u200b \u201cleft\u201d \u200b\u6216\u200b \u201cright\u201d\uff0c\u200b\u9ed8\u8ba4\u200b \u201cright\u201d\u3002 + steps\uff1a\u200b\u65cb\u8f6c\u200b\u7684\u200b\u4f4d\u6570\u200b\uff0c\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b 1\u3002 \u200b\u5b57\u7b26\u200b\u8f6e\u8f6c\u200b\u903b\u8f91\u200b\uff1a</p> <p>rotate_char \u200b\u51fd\u6570\u200b\uff1a\u200b\u5224\u65ad\u200b\u5b57\u7b26\u200b\u662f\u5426\u200b\u5728\u200b a-z, A-Z, 0-9 \u200b\u8303\u56f4\u200b\u5185\u200b\uff0c\u200b\u5982\u679c\u200b\u662f\u200b\u8fdb\u884c\u200b\u8f6e\u8f6c\u200b\uff0c\u200b\u5426\u5219\u200b\u4fdd\u6301\u200b\u4e0d\u53d8\u200b\u3002</p> Rust<pre><code>use rayon::prelude::*;\n\n/// \u200b\u5047\u8bbe\u200b rotate_char \u200b\u662f\u200b\u4e00\u4e2a\u200b\u9ad8\u6548\u200b\u7684\u200b\u65cb\u8f6c\u200b\u5b57\u7b26\u200b\u51fd\u6570\u200b\n#[inline]\nfn rotate_char(c: u8, direction: bool, steps: u8) -&gt; u8 {\n    let steps = steps % 26;\n    // \u200b\u4f8b\u5982\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b Caesar cipher \u200b\u5b9e\u73b0\u200b\uff08\u200b\u5047\u8bbe\u200b\u8f93\u5165\u200b\u662f\u200b ASCII \u200b\u5b57\u6bcd\u200b\uff09\n    if (b'a'..=b'z').contains(&amp;c) {\n        let base = b'a';\n        ((c - base + if direction { steps } else { 26 - steps }) % 26) + base\n    } else if (b'A'..=b'Z').contains(&amp;c) {\n        let base = b'A';\n        ((c - base + if direction { steps } else { 26 - steps }) % 26) + base\n    } else {\n        c\n    }\n}\n\n/// \u200b\u9ad8\u6548\u200b\u65cb\u8f6c\u200b\u5185\u5bb9\u200b\u7684\u200b\u51fd\u6570\u200b\npub fn rotate_content(content: &amp;[String], direction: bool, steps: u8) -&gt; Vec&lt;String&gt; {\n    content\n        .par_iter() // \u200b\u4f7f\u7528\u200b Rayon \u200b\u8fdb\u884c\u200b\u5e76\u884c\u5904\u7406\u200b\n        .map(|line| {\n            let bytes = line.as_bytes();\n            let mut rotated = String::with_capacity(bytes.len());\n            for &amp;c in bytes {\n                rotated.push(rotate_char(c, direction, steps) as char);\n            }\n            rotated\n        })\n        .collect()\n}\n</code></pre>"},{"location":"blog/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAneovim%E6%8F%92%E4%BB%B6nvim_rotate_chars%E6%9D%A5%E8%BD%AE%E8%BD%AC%E4%BB%A3%E7%A0%81/#\u65cb\u8f6c\u5b57\u7b26\u903b\u8f91","title":"\u65cb\u8f6c\u200b\u5b57\u7b26\u200b\u903b\u8f91","text":"<p>\u200b\u901a\u8fc7\u200b\u8c03\u7528\u200bnvim-oxi::api\u200b\u4e2d\u200b\u7684\u200b\u51fd\u6570\u200b\u83b7\u53d6\u200b\u5f53\u524d\u200bBuffer\uff0c\u200b\u4ee5\u53ca\u200bget_lines\u3001set_lines\u3002 </p>Rust<pre><code>/// \u200b\u63d2\u4ef6\u200b\u7684\u200b\u4e3b\u8981\u200b\u903b\u8f91\u200b\u51fd\u6570\u200b\nfn rotate_chars(\n    buffer: &amp;mut api::Buffer,\n    row_range: std::ops::Range&lt;usize&gt;,\n    // col_range: std::ops::Range&lt;usize&gt;,\n    direction: bool,\n    steps: usize,\n) -&gt; oxi::Result&lt;()&gt; {\n    // \u200b\u83b7\u53d6\u200b\u9009\u4e2d\u200b\u7684\u200b\u8303\u56f4\u200blines [start_row, end_row)\n    let content = buffer.get_lines(row_range.to_owned(), false)?;\n\n    let content_string_list = content\n        .enumerate()\n        .map(|(_, s)| s.to_string())\n        .collect::&lt;Vec&lt;_&gt;&gt;();\n\n    // let rotated_content = rotate_content(&amp;content_string_list, direction, steps as u8);\n\n    let rotated_content = rotate_unicode_content(&amp;content_string_list, direction, steps as u8, false);\n\n    // \u200b\u66ff\u6362\u200b\u9009\u4e2d\u200b\u7684\u200b\u5185\u5bb9\u200b\n    buffer.set_lines(row_range, false, rotated_content)?;\n\n    Ok(())\n}\n</code></pre><p></p>"},{"location":"blog/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAneovim%E6%8F%92%E4%BB%B6nvim_rotate_chars%E6%9D%A5%E8%BD%AE%E8%BD%AC%E4%BB%A3%E7%A0%81/#neovim\u4e2dlua\u914d\u7f6e\u5b9e\u73b0","title":"neovim\u200b\u4e2d\u200blua\u200b\u914d\u7f6e\u200b\u5b9e\u73b0","text":""},{"location":"blog/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAneovim%E6%8F%92%E4%BB%B6nvim_rotate_chars%E6%9D%A5%E8%BD%AE%E8%BD%AC%E4%BB%A3%E7%A0%81/#lua\u914d\u7f6e\u5feb\u6377\u952e","title":"lua\u200b\u914d\u7f6e\u200b\u5feb\u6377\u952e","text":"Lua<pre><code>function processString(input)\n    local boolStr, numStr = input:match(\"^(%S+)%s+(%S+)$\")\n\n    if not boolStr or not numStr then\n        error(\"Input string does not contain exactly two parts.\")\n    end\n\n    local boolValue\n    if boolStr:lower() == \"true\" then\n        boolValue = true\n    elseif boolStr:lower() == \"false\" then\n        boolValue = false\n    else\n        error(\"Invalid boolean string: \" .. boolStr)\n    end\n\n    local numValue = tonumber(numStr)\n    if not numValue then\n        error(\"Invalid number string: \" .. numStr)\n    end\n\n    return boolValue, numValue\nend\n\nvim.keymap.set('v', '&lt;Leader&gt;r', function()\n  -- \u200b\u8bf7\u6c42\u200b\u7528\u6237\u200b\u8f93\u5165\u200b\u6570\u5b57\u200b\u53c2\u6570\u200b\n  vim.ui.input({ prompt = 'Enter direction and rotation number: ' }, function(input)\n    print(\"bool_val:\" .. input)\n    local bool_val, number_arg = processString(input)\n\n    print(\"bool_val:\" .. tostring(bool_val))\n    --print(\"bool_val:\" .. number_arg)\n\n    if number_arg == nil then\n      -- \u200b\u5982\u679c\u200b\u8f93\u5165\u200b\u4e0d\u662f\u200b\u6709\u6548\u6570\u5b57\u200b\uff0c\u200b\u5219\u200b\u63d0\u793a\u200b\u9519\u8bef\u200b\u5e76\u200b\u9000\u51fa\u200b\n      print(\"Error: Please enter a valid number.\")\n      return\n    end\n\n    -- \u200b\u83b7\u53d6\u200b\u9009\u533a\u200b\u7684\u200b\u8d77\u59cb\u200b\u548c\u200b\u7ed3\u675f\u200b\u884c\u200b\n    vim.cmd([[ execute \"normal! \\&lt;ESC&gt;\" ]])\n    local mode = vim.fn.visualmode()\n    local start_line = vim.fn.getpos(\"'&lt;\")[2] - 1\n    local end_line = vim.fn.getpos(\"'&gt;\")[2]\n\n    print(\"start \" .. start_line .. \"end \" .. end_line)\n    -- \u200b\u8c03\u7528\u200b\u63d2\u4ef6\u200b\u7684\u200b\u51fd\u6570\u200b\uff0c\u200b\u5c06\u200b\u8f93\u5165\u200b\u7684\u200b\u6570\u5b57\u200b\u4f5c\u4e3a\u200b\u53c2\u6570\u200b\n    require(\"nvim_rotate_chars\").RotateCharsWithRange(bool_val, number_arg, start_line, end_line)\n  end)\nend, { noremap = true, silent = true, desc = \"Rotate selected characters\" })\n</code></pre>"},{"location":"blog/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAneovim%E6%8F%92%E4%BB%B6nvim_rotate_chars%E6%9D%A5%E8%BD%AE%E8%BD%AC%E4%BB%A3%E7%A0%81/#lua\u914d\u7f6e\u5feb\u6377\u952e\u548ccommand","title":"lua\u200b\u914d\u7f6e\u200b\u5feb\u6377\u952e\u200b\u548c\u200bCommand\ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350","text":"Lua<pre><code>vim.api.nvim_create_user_command(\n  'RotateChars',\n  function(opts)\n    -- \u200b\u68c0\u67e5\u200b\u662f\u5426\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u6b63\u786e\u200b\u6570\u91cf\u200b\u7684\u200b\u53c2\u6570\u200b\n    if #opts.fargs &lt; 2 then\n      print(\"Usage: :RotateChars &lt;boolean&gt; &lt;number&gt;\")\n      return\n    end\n\n    -- \u200b\u5c06\u200b\u7b2c\u4e00\u4e2a\u200b\u53c2\u6570\u200b\u89e3\u6790\u200b\u4e3a\u200b\u5e03\u5c14\u503c\u200b\n    local bool_arg = opts.fargs[1] == \"true\"\n\n    -- \u200b\u5c1d\u8bd5\u200b\u5c06\u200b\u7b2c\u4e8c\u4e2a\u200b\u53c2\u6570\u200b\u89e3\u6790\u200b\u4e3a\u200b\u6570\u5b57\u200b\n    local num_arg = tonumber(opts.fargs[2])\n    if not num_arg then\n      print(\"Error: The second argument must be a number.\")\n      return\n    end\n\n    -- \u200b\u8c03\u7528\u200b\u63d2\u4ef6\u200b\u7684\u200b\u51fd\u6570\u200b\n    require(\"nvim_rotate_chars\").RotateChars(bool_arg, num_arg)\n  end,\n  { range = 2, nargs = \"+\" }\n)\n</code></pre> <p>\u200b\u901a\u8fc7\u200b\u8fd9\u200b\u7bc7\u6587\u7ae0\u200b\uff0c\u200b\u60a8\u200b\u5b66\u4f1a\u200b\u4e86\u200brust\u200b\u548c\u200blua\u200b\u914d\u5408\u200b\u7ed9\u200bneovim\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u81ea\u5b9a\u4e49\u200b\u7684\u200b\u63d2\u4ef6\u200b\uff0c\u200b\u53c8\u200b\u591a\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u6b66\u5668\u200b\u6280\u80fd\u200b\u3002 \u200b\u611f\u8c22\u60a8\u200b\u7684\u200b\u9605\u8bfb\u200b\uff01\uff01\uff01\u200b\u5f00\u6e90\u200b\u5730\u5740\u200b\uff1aKenForever1/nvim-rotate-chars\u3002</p> <ul> <li>\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bneovim\u200b\u63d2\u4ef6\u200b\u8f6c\u6362\u200bunicode\u200b\u5b57\u7b26\u200b\u5230\u200b\u4e2d\u6587\u200b\u663e\u793a\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>\u200b\u4ece\u200bDeepseek\u200b\u5f00\u6e90\u200b\u5e93\u200b3FS\u200b\u4e2d\u200b\u5b66\u4e60\u200bfuse\u200b\u7684\u200b\u4f7f\u7528\u200b-\u200b\u5982\u4f55\u200b\u5f00\u53d1\u200b\u4e00\u4e2a\u200b\u6587\u4ef6\u7cfb\u7edf\u200b\uff08\u200b\u4e00\u200b\uff09</li> <li>C++20\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u57fa\u4e8e\u200b\u5c5e\u6027\u200b\u6d4b\u8bd5\u200b\u7684\u200bquickcheck-cpp\u200b\u5e93\u200b</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAneovim%E6%8F%92%E4%BB%B6%E8%BD%AC%E6%8D%A2unicode%E5%AD%97%E7%AC%A6%E5%88%B0%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA/","title":"\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bneovim\u200b\u63d2\u4ef6\u200b\u8f6c\u6362\u200bunicode\u200b\u5b57\u7b26\u200b\u5230\u200b\u4e2d\u6587\u200b\u663e\u793a","text":"<p>\u200b\u4e0a\u200b\u4e00\u7bc7\u200b\u8bb2\u200b\u4e86\u200b\u5982\u4f55\u200b\u901a\u8fc7\u200bnvim-oxi\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bneovim\u200b\u63d2\u4ef6\u200bnvim_rotate_chars\u200b\u6765\u200b\u8f6e\u8f6c\u200b\u5b57\u7b26\u200b\uff0c\u200b\u8fd9\u200b\u4e00\u7bc7\u200b\u901a\u8fc7\u200b\u91c7\u7528\u200b\u76f8\u5173\u200b\u6280\u672f\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u4e00\u4e2a\u200bunicode\u200b\u5b57\u7b26\u200b\u8868\u793a\u200b\u8f6c\u6362\u6210\u200b\u6c49\u5b57\u200b\u663e\u793a\u200b\u3002\u200b\u8fd9\u4e9b\u200b\u5de5\u5177\u200b\u5728\u200b\u65e5\u5e38\u200b\u5f00\u53d1\u200b\u548c\u200b\u5de5\u4f5c\u200b\u4e2d\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u7528\u5230\u200b\uff0c\u200b\u81ea\u5df1\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u5b66\u5230\u200b\u65b0\u200b\u4e1c\u897f\u200b\u7ec3\u7ec3\u200b\u4ee3\u7801\u200b\u624b\u611f\u200b\u3002</p> <p>\u200b\u4e4b\u524d\u200b\u5728\u200b\u6587\u7ae0\u200bunicode\u200b\u7f16\u7801\u200b\u548c\u200butf-8\u200b\u8f6c\u6362\u200b\u4e0d\u540c\u200b\u8bed\u8a00\u200b\u5b9e\u73b0\u200b\u7684\u200b\u5dee\u522b\u200b\uff1f\u200b\u4ee5\u53ca\u200blocale\u200b\u6742\u8c08\u200b\u4e2d\u200b\u8bb2\u200b\u5230\u200b\u8fc7\u200b\u7531\u4e8e\u200b\u7cfb\u7edf\u200b\u7684\u200blocale\u200b\u8bbe\u7f6e\u200b\u4e0d\u200b\u6b63\u786e\u200b\uff0c\u200b\u9047\u5230\u200bunzip\u200b\u89e3\u538b\u200b\u51fa\u6765\u200b\u7684\u200b\u4e2d\u6587\u200b\u6587\u4ef6\u540d\u79f0\u200b\u90fd\u200b\u53d8\u6210\u200b\u4e86\u200bunicde\u200b\u7684\u200b16\u200b\u8fdb\u5236\u200b\u5b57\u7b26\u200b\u8868\u793a\u200b\u3002\u200b\u5f53\u7136\u200b\u4e5f\u200b\u4ecb\u7ecd\u200b\u4e86\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200bpython\u3001c++\u200b\u4ee5\u53ca\u200brust\u200b\u5b9e\u73b0\u200b\u8f6c\u6362\u200b\u3002\u200b\u5728\u200b\u8fd9\u91cc\u200b\u6211\u4eec\u200b\u5c06\u200b\u5b9e\u73b0\u200b\u79fb\u690d\u200b\u5230\u200b\u4e86\u200bneovim\u200b\u63d2\u4ef6\u200b\u4e2d\u200b\uff0c\u200b\u6253\u5f00\u200b\u6587\u4ef6\u200b\u4e00\u952e\u200b\u8f6c\u6362\u200b\u3002</p> <p>\u200b\u5b9e\u73b0\u200b\u7684\u200b\u6548\u679c\u200b\u662f\u200b\u8fd9\u6837\u200b\uff1a</p> <p></p>"},{"location":"blog/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAneovim%E6%8F%92%E4%BB%B6%E8%BD%AC%E6%8D%A2unicode%E5%AD%97%E7%AC%A6%E5%88%B0%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA/#\u7b80\u4ecb","title":"\u7b80\u4ecb","text":"<p>\u200b\u4f7f\u7528\u200b <code>nvim-oxi</code> \u200b\u7f16\u5199\u200b\u4e00\u4e2a\u200b\u5c06\u200b\u9009\u4e2d\u200b\u7684\u200b <code>\\uXXXX</code> Unicode \u200b\u7f16\u7801\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u6c49\u5b57\u200b\u5b57\u7b26\u200b\u7684\u200b Neovim \u200b\u63d2\u4ef6\u200bKenForever1/nvim_unicode_converter\u3002</p>"},{"location":"blog/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAneovim%E6%8F%92%E4%BB%B6%E8%BD%AC%E6%8D%A2unicode%E5%AD%97%E7%AC%A6%E5%88%B0%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA/#\u5b9e\u73b0\u7ec6\u8282","title":"\u5b9e\u73b0\u200b\u7ec6\u8282","text":""},{"location":"blog/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAneovim%E6%8F%92%E4%BB%B6%E8%BD%AC%E6%8D%A2unicode%E5%AD%97%E7%AC%A6%E5%88%B0%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA/#\u6838\u5fc3\u529f\u80fd\u5b9e\u73b0","title":"\u6838\u5fc3\u200b\u529f\u80fd\u200b\u5b9e\u73b0","text":"<p>\u200b\u5728\u200b <code>src/lib.rs</code> \u200b\u4e2d\u200b\u5b9e\u73b0\u200b\u63d2\u4ef6\u200b\u7684\u200b\u6838\u5fc3\u200b\u529f\u80fd\u200b\uff0c\u200b\u901a\u8fc7\u200bnvim-oxi\u200b\u63d0\u4f9b\u200b\u7684\u200bapi\u200b\u83b7\u53d6\u200b\u9009\u4e2d\u200b\u7684\u200b\u5f53\u524d\u200b\u884c\u200b\uff0c\u200b\u901a\u8fc7\u200b\u6b63\u5219\u8868\u8fbe\u5f0f\u200bregex\u200b\u5339\u914d\u200buxxxx\u200b\u683c\u5f0f\u200b\uff0c\u200b\u8f6c\u6362\u200b\u66ff\u6362\u200b\u3002</p> <p></p>Rust<pre><code>use nvim_oxi as oxi;\nuse oxi::{api, Dictionary, Function, Object};\nuse regex::Regex;\n\n#[oxi::plugin]\nfn nvim_unicode_converter() -&gt; Dictionary {\n    let convert_unicode = Function::from_fn(|()| {\n        // \u200b\u83b7\u53d6\u200b\u5f53\u524d\u200b\u9009\u4e2d\u200b\u7684\u200b\u6587\u672c\u200b\n        let current_selection = api::get_current_line().unwrap();\n\n        // \u200b\u6b63\u5219\u8868\u8fbe\u5f0f\u200b\u5339\u914d\u200b \\uXXXX \u200b\u683c\u5f0f\u200b\n        let re = Regex::new(r\"\\\\u([0-9a-fA-F]{4})\").unwrap();\n\n        // \u200b\u66ff\u6362\u200b\u5339\u914d\u200b\u7684\u200b\u90e8\u5206\u200b\n        let converted = re.replace_all(&amp;current_selection, |caps: &amp;regex::Captures| {\n            let code_point = u32::from_str_radix(&amp;caps[1], 16).unwrap();\n            std::char::from_u32(code_point).unwrap().to_string()\n        });\n\n        // \u200b\u5c06\u200b\u7ed3\u679c\u200b\u66ff\u6362\u200b\u5230\u200b\u5f53\u524d\u200b\u884c\u200b\n        let _ = api::set_current_line(converted);\n    });\n\n    Dictionary::from_iter([(\"convert_unicode\", Object::from(convert_unicode))])\n}\n</code></pre> toml\u200b\u914d\u7f6e\u200b: Text Only<pre><code>[package]\nname = \"nvim_unicode_converter\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[lib]\ncrate-type = [\"cdylib\"]\n\n[dependencies]\nnvim-oxi = { version = \"0.5.1\", features = [\"neovim-0-10\"] }\nregex = \"1.11.1\"\n</code></pre><p></p>"},{"location":"blog/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAneovim%E6%8F%92%E4%BB%B6%E8%BD%AC%E6%8D%A2unicode%E5%AD%97%E7%AC%A6%E5%88%B0%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA/#neovim\u63d2\u4ef6lua\u914d\u7f6e","title":"neovim\u200b\u63d2\u4ef6\u200blua\u200b\u914d\u7f6e\u200b\ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350","text":"<p>\u200b\u67e5\u770b\u200bruntimepath \u200b\u83b7\u53d6\u200b rplugin \u200b\u7684\u200b\u8def\u5f84\u200b </p>Bash<pre><code>:lua print(vim.inspect(vim.api.nvim_list_runtime_paths()))\n</code></pre><p></p> <p>\u200b\u8981\u200b\u5728\u200b Neovim \u200b\u4e2d\u200b\u4f7f\u7528\u200b\u8fd9\u4e2a\u200b\u63d2\u4ef6\u200b\uff0c\u200b\u9700\u8981\u200b\u5728\u200b\u4f60\u200b\u7684\u200b <code>init.lua</code>\uff08\u200b\u6216\u200b <code>init.vim</code>\uff09\u200b\u4e2d\u200b\u52a0\u8f7d\u200b\u8fd9\u4e2a\u200b Rust \u200b\u63d2\u4ef6\u200b\u3002\u200b\u5047\u8bbe\u200b\u4f60\u200b\u5df2\u7ecf\u200b\u5c06\u200b\u7f16\u8bd1\u200b\u597d\u200b\u7684\u200b\u5e93\u200b\u653e\u5728\u200b <code>~/.config/nvim/rplugin/rust</code> \u200b\u4e2d\u200b\uff1a</p> Lua<pre><code>-- \u200b\u7ed1\u5b9a\u200b\u547d\u4ee4\u200b\u6216\u200b\u6309\u952e\u200b\u8c03\u7528\u200b\u63d2\u4ef6\u200b\nvim.api.nvim_set_keymap('v', '&lt;leader&gt;u', ':lua require(\"nvim_unicode_converter\").convert_unicode()&lt;CR&gt;', { noremap = true, silent = true })\n</code></pre> <p></p>Bash<pre><code>1801\\u4e07\\u91cc\\u957f\\u57ce\\u6c38\\u4e0d\\u5012_123445_5_3811-3826s_000004.jpg\n</code></pre> \u200b\u5728\u200b Neovim \u200b\u4e2d\u200b\uff0c\u200b\u9009\u4e2d\u200b\u5305\u542b\u200b <code>\\uXXXX</code> \u200b\u7684\u200b\u6587\u672c\u200b\uff0c\u200b\u7136\u540e\u200b\u6309\u4e0b\u200b\u4f60\u200b\u7ed1\u5b9a\u200b\u7684\u200b\u5feb\u6377\u952e\u200b\uff08\u200b\u5982\u200b <code>&lt;leader&gt;u</code>\uff09\uff0c\u200b\u5373\u53ef\u200b\u5c06\u200b\u9009\u4e2d\u200b\u7684\u200b Unicode \u200b\u7f16\u7801\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u5b9e\u9645\u200b\u5b57\u7b26\u200b\u3002<p></p> <p>\u200b\u901a\u8fc7\u200b\u8fd9\u200b\u7bc7\u6587\u7ae0\u200b\uff0c\u200b\u60a8\u200b\u5b66\u4f1a\u200b\u4e86\u200brust\u200b\u548c\u200blua\u200b\u914d\u5408\u200b\u7ed9\u200bneovim\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u81ea\u5b9a\u4e49\u200b\u7684\u200b\u63d2\u4ef6\u200b\uff0c\u200b\u53c8\u200b\u591a\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u6b66\u5668\u200b\u6280\u80fd\u200b\u3002 \u200b\u611f\u8c22\u60a8\u200b\u7684\u200b\u9605\u8bfb\u200b\uff01\uff01\uff01\u200b\u5f00\u6e90\u200b\u5730\u5740\u200b\uff1aKenForever1/nvim_unicode_converter\u3002</p> <ul> <li>\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bneovim\u200b\u63d2\u4ef6\u200bnvim_rotate_chars\u200b\u6765\u200b\u8f6e\u8f6c\u200b\u4ee3\u7801\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>C++20\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u57fa\u4e8e\u200b\u5c5e\u6027\u200b\u6d4b\u8bd5\u200b\u7684\u200bquickcheck-cpp\u200b\u5e93\u200b</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> </ul>"},{"location":"blog/%E6%8E%A2%E7%B4%A2ggml%E7%9A%84%E5%AE%9E%E7%8E%B0/","title":"\u63a2\u7d22\u200bggml\u200b\u7684\u200b\u5b9e\u73b0","text":"<p>\u200b\u672c\u6587\u200b\u4e3b\u8981\u200b\u4ecb\u7ecd\u200bggml\u200b\u7684\u200b\u8c03\u8bd5\u200b\u5165\u95e8\u200b\u73af\u5883\u200b\u642d\u5efa\u200b\u3001ggml\u200b\u7684\u200b\u6838\u5fc3\u200b\u6570\u636e\u7ed3\u6784\u200b\u3001\u200b\u5185\u5b58\u200b\u7ba1\u7406\u200b\u4e0e\u200b\u5e03\u5c40\u200b\u3001\u200b\u8ba1\u7b97\u200b\u56fe\u200b\u6784\u5efa\u200b\u4e0e\u200b\u6267\u884c\u200b\u3001\u200b\u4ee5\u53ca\u200bgguf\u200b\u6587\u4ef6\u683c\u5f0f\u200b\u6784\u6210\u200b\uff0c\u200b\u4f1a\u200b\u5206\u6210\u200b\u591a\u4e2a\u200b\u5c0f\u8282\u200b\u4ecb\u7ecd\u200b\u3002</p> <p>\u200b\u672c\u6587\u200b\u8d77\u6e90\u4e8e\u200b\u4f5c\u8005\u200bggml\u200b\u5b66\u4e60\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u4e86\u89e3\u200b\u7684\u200b\u8d44\u6599\u200b\uff0c\u200b\u5305\u62ec\u200bxsxszab\u200b\u7684\u200bggml-deep-dive\u200b\u7cfb\u5217\u200b\u6587\u7ae0\u200b\u3001\u200b\u4ee5\u53ca\u200b\u9605\u8bfb\u200b\u6e90\u7801\u200b\uff0c\u200b\u8bb0\u5f55\u200b\u548c\u200b\u5206\u4eab\u200b\u81ea\u5df1\u200b\u7684\u200b\u7406\u89e3\u200b\u8fc7\u7a0b\u200b\u3002\uff08\u200b\u611f\u8c22\u200bxsxszab\u200b\u7ed8\u5236\u200b\u7684\u200b\u5173\u4e8e\u200b\u5185\u5b58\u200b\u5e03\u5c40\u200b\u7684\u200b\u56fe\u4f8b\u200b\uff0c\u200b\u4e3a\u200bggml\u200b\u7684\u200b\u7406\u89e3\u200b\u66f4\u52a0\u200b\u6d45\u663e\u6613\u61c2\u200b\u3002\uff09</p> <p>ggml\u200b\u662f\u200b\u91c7\u7528\u200bc/c++\u200b\u7f16\u5199\u200b\u9ad8\u5ea6\u200b\u4f18\u5316\u200b\u7684\u200btensor\u200b\u5f20\u91cf\u200b\u8ba1\u7b97\u200b\u5e93\u200b\uff0c\u200b\u6ca1\u6709\u200b\u5916\u90e8\u200b\u4f9d\u8d56\u200b\u3002\u200b\u5b58\u5728\u200b\u4e0d\u540c\u200b\u7684\u200bbackend\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u4ece\u200bmac\u200b\u7684\u200bmetal\u3001x86\u200b\u7684\u200bavx\u200b\u5b9e\u73b0\u200b\u4ee5\u53ca\u200barm\u200b\u7684\u200bneon\u200b\u6307\u4ee4\u200b\u5b9e\u73b0\u200b\u3001gpu\u200b\u7684\u200bcuda\u3001hip\u3001opencl\u200b\u7b49\u200b\u5b9e\u73b0\u200b\u3002llama.cpp\u200b\u9879\u76ee\u200b\u5c31\u662f\u200b\u4f7f\u7528\u200bggml\u200b\u8fdb\u884c\u200b\u6a21\u578b\u200b\u52a0\u8f7d\u200b\u3001\u200b\u63a8\u7406\u200b\u7684\u200b\u3002</p>"},{"location":"blog/%E6%8E%A2%E7%B4%A2ggml%E7%9A%84%E5%AE%9E%E7%8E%B0/#\u63a2\u7d22ggml\u7684\u5b9e\u73b0vscode\u8c03\u8bd5\u73af\u5883\u7684\u642d\u5efa","title":"\u63a2\u7d22\u200bggml\u200b\u7684\u200b\u5b9e\u73b0\u200b\u2013vscode\u200b\u8c03\u8bd5\u200b\u73af\u5883\u200b\u7684\u200b\u642d\u5efa","text":"<p>\u200b\u5728\u200b\u9605\u8bfb\u200b\u6e90\u7801\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u627e\u200b\u4e00\u4e2a\u200b\u6700\u200b\u7b80\u5355\u200b\u7684\u200bexample\u200b\u4f8b\u5b50\u200b\u8dd1\u901a\u200b\uff0c\u200b\u7136\u540e\u200b\u8ddf\u7740\u200b\u6e90\u7801\u200b\u8fdb\u884c\u200b\u8c03\u8bd5\u200b\uff0c\u200b\u662f\u200b\u5f88\u5feb\u200b\u7406\u89e3\u200b\u539f\u7406\u200b\u7684\u200b\u4e00\u79cd\u200b\u65b9\u6cd5\u200b\u3002 </p> <p>\u200b\u5728\u200blinux\u3001\u200b\u6216\u8005\u200bmac\u200b\u4e0b\u200b\u90fd\u200b\u65b9\u4fbf\u200b\u7f16\u8bd1\u200b\u3002</p> <p>\u200b\u7f16\u8bd1\u200b\u4f9d\u8d56\u200b\uff1a</p> <ul> <li>gcc/g++\u200b\u6216\u8005\u200b clang\u200b\u7f16\u8bd1\u200b</li> <li>cmake\uff1a \u200b\u7528\u4e8e\u200b\u7ba1\u7406\u200b\u6784\u5efa\u200b\u9879\u76ee\u200b</li> <li>ccache\uff1a\u200b\u53ef\u9009\u9879\u200b\uff0c\u200b\u52a0\u5feb\u200b\u7f16\u8bd1\u200b\u901f\u5ea6\u200b\u7528\u200b</li> </ul> Bash<pre><code>git clone https://github.com/ggml-org/ggml.git\n</code></pre> <p>\u200b\u4e0a\u9762\u200b\u7684\u200b\u4f9d\u8d56\u200b\u5b89\u88c5\u200b\u5f88\u200b\u7b80\u5355\u200b\uff0c\u200b\u4ee5\u200bubuntu\u200b\u4e3a\u4f8b\u200b\uff1a </p>Bash<pre><code>apt update\napt install -y gcc g++ cmake ccache\n</code></pre><p></p>"},{"location":"blog/%E6%8E%A2%E7%B4%A2ggml%E7%9A%84%E5%AE%9E%E7%8E%B0/#\u914d\u7f6e\u8c03\u8bd5\u76ee\u6807","title":"\u914d\u7f6e\u200b\u8c03\u8bd5\u200b\u76ee\u6807","text":"<p>ggml\u200b\u7684\u200bexample\u200b\u4e2d\u200b\u5305\u62ec\u200b\u4e86\u200b\u5f88\u591a\u200b\u4f8b\u5b50\u200b\uff0c\u200b\u5148\u200b\u4ece\u200b\u7b80\u5355\u200b\u7684\u200b\u4f8b\u5b50\u200b\u770b\u200b\u8d77\u200b\u3002</p> Bash<pre><code>examples/simple/simple-ctx.cpp\n</code></pre> <p>\u200b\u4fee\u6539\u200b\u9879\u76ee\u200b\u7684\u200bcmake\u200b\u914d\u7f6e\u200b\uff0c\u200b\u5373\u200b\u6dfb\u52a0\u200b-g\u200b\u65b9\u4fbf\u200bdebug\u200b\u8c03\u8bd5\u200b\u3002\u200b\u627e\u5230\u200bexamples/simple/CMakeLists.txt\u200b\u914d\u7f6e\u6587\u4ef6\u200b\uff0c\u200b\u4e3a\u200bsimple-ctx\u200b\u8fd9\u4e2a\u200b\u53ef\u6267\u884c\u6587\u4ef6\u200b\u6dfb\u52a0\u200b-g\u200b\u53c2\u6570\u200b\u3002 </p>Bash<pre><code>set(TEST_TARGET simple-ctx)\nadd_executable(${TEST_TARGET} simple-ctx.cpp)\ntarget_compile_options(${TEST_TARGET} PRIVATE -g)\ntarget_link_libraries(${TEST_TARGET} PRIVATE ggml)\n</code></pre> \u200b\u4e0a\u9762\u200b\u53ea\u662f\u200b\u4e3a\u200b\u53ef\u6267\u884c\u6587\u4ef6\u200b\u6dfb\u52a0\u200b\u4e86\u200b-g\u200b\u8c03\u8bd5\u4fe1\u606f\u200b\uff0c\u200b\u5982\u679c\u200b\u8981\u200b\u8c03\u8bd5\u200bggml.so\u200b\u8fd9\u4e2a\u200b\u5e93\u200b\uff0c\u200b\u5219\u200b\u9700\u8981\u200b\u7f16\u8bd1\u200bggml.so\u200b\u5e93\u65f6\u200b\u6307\u5b9a\u200bDebug\u200b\u7c7b\u578b\u200b\u3002<p></p> <p></p>Bash<pre><code>cmake -B build -S . -DCMAKE_BUILD_TYPE=DEBUG\ncmake --build build\n</code></pre> \u200b\u67e5\u770b\u200b\u7f16\u8bd1\u200b\u8f93\u51fa\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200bggml.so\u200b\u5e93\u200b\u88ab\u200b\u7f16\u8bd1\u6210\u200bwith debug_info\u3002 Bash<pre><code>file build/src/libggml.so \nbuild/src/libggml.so: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, BuildID[sha1]=db376e303daeef672c8002ed6cebed1da303a706, with debug_info, not stripped\n</code></pre><p></p>"},{"location":"blog/%E6%8E%A2%E7%B4%A2ggml%E7%9A%84%E5%AE%9E%E7%8E%B0/#vscode\u914d\u7f6edebug","title":"vscode\u200b\u914d\u7f6e\u200bdebug","text":"<p>\u200b\u70b9\u51fb\u200b\u53f3\u8fb9\u200b\u7684\u200bRun and Debug\u200b\u6309\u94ae\u200b\uff0ccreate a launch.json file\uff0c\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u914d\u7f6e\u6587\u4ef6\u200b\uff0c\u200b\u628a\u200b\u4e0b\u9762\u200b\u7684\u200b\u5185\u5bb9\u200b\u7c98\u8d34\u200b\u8fdb\u53bb\u200b\u3002</p> <p></p>JSON<pre><code>{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"debug simple-ctx\",\n            \"type\": \"lldb\",\n            \"request\": \"launch\",\n            \"program\": \"${workspaceFolder}/build/bin/simple-ctx\",\n            \"cwd\": \"${workspaceFolder}\"\n        }\n    ]\n}\n</code></pre> \u200b\u63a5\u4e0b\u6765\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u6309\u7167\u200bvscode\u200b\u7684\u200b\u754c\u9762\u200bbutton\u200b\u8c03\u8bd5\u200b\u4e86\u200b\uff0c\u200b\u5982\u679c\u200b\u8981\u200b\u8c03\u8bd5\u200b\u5176\u5b83\u200b\u53ef\u6267\u884c\u7a0b\u5e8f\u200b\uff0c\u200b\u4fee\u6539\u200blaunch.json\u200b\u7684\u200bprogram\u200b\u5b57\u200b\u6bb5\u200b\u5373\u53ef\u200b\u3002<p></p> <p>\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\uff0c\u200b\u901a\u8fc7\u200b\u4e0a\u9762\u200b\u7684\u200b\u7f16\u8bd1\u200bdebug\u200b\u6a21\u5f0f\u200b\u548c\u200b\u6dfb\u52a0\u200b-g\u200b\u53c2\u6570\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u8fdb\u5165\u200b\u53ef\u6267\u884c\u7a0b\u5e8f\u200b\u548c\u200bggml.so\u200b\u5e93\u200b\u7684\u200b\u6e90\u7801\u200b\u8fdb\u884c\u200b\u8c03\u8bd5\u200b\u4e86\u200b\u4e86\u200b\u3002</p> <p></p> <p></p>"},{"location":"blog/%E6%8E%A2%E7%B4%A2ggml%E7%9A%84%E5%AE%9E%E7%8E%B0/#\u63a2\u7d22ggml\u7684\u5b9e\u73b0\u5f20\u91cf\u8868\u793a","title":"\u63a2\u7d22\u200bggml\u200b\u7684\u200b\u5b9e\u73b0\u200b\u2013\u200b\u5f20\u91cf\u200b\u8868\u793a","text":""},{"location":"blog/%E6%8E%A2%E7%B4%A2ggml%E7%9A%84%E5%AE%9E%E7%8E%B0/#ggml_tensor-\u6570\u636e\u7ed3\u6784","title":"ggml_tensor \u200b\u6570\u636e\u7ed3\u6784","text":"<p>\u200b\u5728\u200bGGML\u200b\u4e2d\u200b\u901a\u8fc7\u200bggml_tensor\u200b\u7ed3\u6784\u200b\u4f53\u200b\u8868\u793a\u200b\u5f20\u91cf\u200b\uff0c\u200b\u7ed3\u6784\u200b\u4f53\u200b\u5b9a\u4e49\u200b\u5982\u4e0b\u200b\uff1a</p> C++<pre><code>// n-dimensional tensor\nstruct ggml_tensor {\n    // \u200b\u5f20\u91cf\u200b\u7684\u200b\u6570\u636e\u7c7b\u578b\u200b\uff1a\u200b\u4f8b\u5982\u200bGGML_TYPE_F32,GGML_TYPE_F16\uff0cGGML_TYPE_Q4_0\n    enum ggml_type type;\n\n    struct ggml_backend_buffer * buffer;\n\n    // \u200b\u6700\u5927\u200b\u7ef4\u5ea6\u200b\u4e3a\u200b4\uff0cGGML_MAX_DIMS\u200b\u4e3a\u200b4\n    // ne\u200b\u5b58\u50a8\u200b\u5f20\u91cf\u200b\u6bcf\u4e2a\u200b\u7ef4\u5ea6\u200b\u7684\u200b\u5143\u7d20\u200b\u4e2a\u6570\u200b\n    // nb\u200b\u5b58\u50a8\u200b\u5f20\u91cf\u200b\u6bcf\u4e2a\u200b\u7ef4\u200b\u7684\u200b\u5143\u7d20\u200b\u5927\u5c0f\u200b\n    int64_t ne[GGML_MAX_DIMS]; // number of elements\n    size_t  nb[GGML_MAX_DIMS]; // stride in bytes:\n                                // nb[0] = ggml_type_size(type)\n                                // nb[1] = nb[0]   * (ne[0] / ggml_blck_size(type)) + padding\n                                // nb[i] = nb[i-1] * ne[i-1]\n\n    // \u200b\u5f20\u91cf\u200bop\u200b\u7c7b\u578b\u200b\uff0c\u200b\u5728\u200b\u8ba1\u7b97\u200b\u56fe\u4e2d\u200b\u4f5c\u4e3a\u200bop node\uff0c\u200b\u540e\u9762\u200b\u4f1a\u200b\u63d0\u5230\u200b\n    // \u200b\u4f8b\u5982\u200b\u77e9\u9635\u200b\u4e58\u200b\u7c7b\u578b\u200b\uff0cGGML_OP_MUL_MAT\n    // compute data\n    enum ggml_op op;\n\n    // op params - allocated as int32_t for alignment\n    int32_t op_params[GGML_MAX_OP_PARAMS / sizeof(int32_t)];\n\n    int32_t flags;\n\n    // \u200b\u6307\u9488\u200b\u6307\u5411\u200b\u6b64\u200b\u5f20\u91cf\u200b\u7684\u200bsrc\u200b\u5f20\u91cf\u200b\n    // \u200b\u4f8b\u5982\u200b\u77e9\u9635\u200b\u4e58\u200bop tensor\u200b\u7684\u200bsrc\u200b\u5f20\u91cf\u200b\u662f\u200b\u77e9\u9635\u200bA tensor\u200b\u548c\u200b\u77e9\u9635\u200bB tensor\n    struct ggml_tensor * src[GGML_MAX_SRC];\n\n    // \u200b\u63cf\u8ff0\u200b\u5f20\u91cf\u200b\u89c6\u56fe\u200b\uff0c\u200b\u5982\u679c\u200b\u6b64\u200b\u5f20\u91cf\u200b\u662f\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u5f20\u91cf\u200b\uff08base\u200b\u5f20\u91cf\u200b\uff09\u200b\u7684\u200b\u89c6\u56fe\u200b\uff0c\u200b\u5219\u200b\u6307\u5411\u200bbase\u200b\u5f20\u91cf\u200b\n    // source tensor and offset for views\n    struct ggml_tensor * view_src;\n    // \u200b\u89c6\u56fe\u200b\u5f20\u91cf\u200b\u7684\u200b\u504f\u79fb\u91cf\u200b\n    size_t               view_offs;\n\n    // \u200b\u5b58\u50a8\u200b\u5f20\u91cf\u200b\u7684\u200b\u6570\u636e\u200b\n    void * data;\n\n    // \u200b\u5f20\u91cf\u200b\u7684\u200b\u540d\u79f0\u200b\n    char name[GGML_MAX_NAME];\n\n    void * extra; // extra things e.g. for ggml-cuda.cu\n\n    char padding[8];\n};\n</code></pre>"},{"location":"blog/%E6%8E%A2%E7%B4%A2ggml%E7%9A%84%E5%AE%9E%E7%8E%B0/#\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u5b66\u4e60tensor","title":"\u901a\u8fc7\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b\u5b66\u4e60\u200btensor","text":"<p>\u200b\u5728\u200bexamples\u200b\u6587\u4ef6\u5939\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u4e00\u4e2a\u200bsimple-add.cpp\u200b\u7684\u200b\u6587\u4ef6\u200b\uff0c\u200b\u6dfb\u52a0\u200b\u5982\u4e0b\u200b\u5185\u5bb9\u200b\uff1a </p>C++<pre><code>#include \"ggml.h\"\n#include \"ggml-cpu.h\"\n#include &lt;cstring&gt;\n#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nint main () {\n    struct ggml_init_params params {\n        /*.mem_size   =*/ 1024 * 1024 * 1024 + ggml_graph_overhead(),\n        /*.mem_buffer =*/ NULL,\n        /*.no_alloc   =*/ false,\n    };\n\n    ggml_context * ctx = ggml_init(params);\n\n    // --------------------\n    // Modify this section to test different tensor computations\n    float a_data[3 * 2] = {\n        1, 2,\n        3, 4,\n        5, 6\n    };\n\n    float b_data[3 * 2] = {\n        1, 1,\n        1, 1,\n        1, 1\n    };\n\n\n    // \u200b\u56e0\u4e3a\u200bggml\u200b\u4e2d\u200btensor\u200b\u8868\u793a\u200b\u548c\u200bpytorch\u200b\u76f8\u53cd\u200b\uff0c\u200b\u56e0\u6b64\u200b3\u200b\u884c\u200b2\u200b\u5217\u200b\u7684\u200b\u77e9\u9635\u200b\uff0c\u200b\u8868\u793a\u200b\u4e3a\u200b[2, 3]\n    ggml_tensor* a = ggml_new_tensor_2d(ctx, GGML_TYPE_F32, 2, 3);\n    ggml_tensor* b = ggml_new_tensor_2d(ctx, GGML_TYPE_F32, 2, 3); \n    memcpy(a-&gt;data, a_data, ggml_nbytes(a));\n    memcpy(b-&gt;data, b_data, ggml_nbytes(b));\n\n    ggml_tensor* result = ggml_add(ctx, a, b);\n    // --------------------\n\n    struct ggml_cgraph  * gf = ggml_new_graph(ctx);\n    ggml_build_forward_expand(gf, result);\n\n    ggml_graph_compute_with_ctx(ctx, gf, 1);\n\n    std::vector&lt;float&gt; out_data(ggml_nelements(result));\n    memcpy(out_data.data(), result-&gt;data, ggml_nbytes(result));\n\n    ggml_free(ctx);\n    return 0;\n}\n</code></pre> \u200b\u5b8c\u5584\u200bcmake\u200b\u914d\u7f6e\u200b\uff0c\u200b\u5728\u200bCMakeLists.txt\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u4ee5\u4e0b\u5185\u5bb9\u200b\uff1a CMake<pre><code>#\n# simple-add\n\nset(TEST_TARGET simple-add)\nadd_executable(${TEST_TARGET} simple-add.cpp)\ntarget_compile_options(${TEST_TARGET} PRIVATE -g)\ntarget_link_libraries(${TEST_TARGET} PRIVATE ggml)\n</code></pre> \u200b\u6839\u636e\u200b\u7b2c\u4e00\u8282\u200b\u7684\u200b\u5185\u5bb9\u200b\uff0c\u200b\u7f16\u8bd1\u200b\u7136\u540e\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u7528\u200bvscode debug\u200b\u8c03\u8bd5\u200b\u4e86\u200b\u3002\u200b\u5f53\u200b\u5b8c\u6210\u200bggml_new_tensor_2d\u200b\u521b\u5efa\u200b2\u200b\u7ef4\u200b\u5f20\u91cf\u200b\u65f6\u200b\uff0c\u200b\u5e76\u4e14\u200b\u901a\u8fc7\u200bmemcpy\u200b\u62f7\u8d1d\u200b\u8d4b\u503c\u200b\u540e\u200b\u3002\u200b\u6211\u4eec\u200b\u901a\u8fc7\u200bgdb\u200b\u6253\u5370\u200btensor\u200b\u7684\u200b\u6570\u636e\u200b\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u6570\u636e\u200b\u4e86\u200b\u3002 Bash<pre><code>&gt; p *a\n(ggml_tensor) {\n  type = GGML_TYPE_F32\n  buffer = nullptr\n  ne = ([0] = 2, [1] = 3, [2] = 1, [3] = 1)\n  nb = ([0] = 4, [1] = 8, [2] = 24, [3] = 24)\n  op = GGML_OP_NONE\n  op_params = {\n    [0] = 0\n    [1] = 0\n    [2] = 0\n    [3] = 0\n    [4] = 0\n    [5] = 0\n    [6] = 0\n    [7] = 0\n    [8] = 0\n    [9] = 0\n    [10] = 0\n    [11] = 0\n    [12] = 0\n    [13] = 0\n    [14] = 0\n    [15] = 0\n  }\n  flags = 0\n  src = {\n    [0] = nullptr\n    [1] = nullptr\n    [2] = nullptr\n    [3] = nullptr\n    [4] = nullptr\n    [5] = nullptr\n    [6] = nullptr\n    [7] = nullptr\n    [8] = nullptr\n    [9] = nullptr\n  }\n  view_src = nullptr\n  view_offs = 0\n  data = 0x00007fffb75eb1b0\n  name = \"\"\n  extra = 0x0000000000000000\n  padding = \"\"\n}\n</code></pre> \u200b\u4ece\u200b\u4e0a\u9762\u200b\u7684\u200b\u5185\u5bb9\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\uff0cggml_tensor\u200b\u7ed3\u6784\u200b\u4f53\u200b\u7684\u200bne\u200b\u6210\u5458\u200b\u53d8\u91cf\u200b\u662f\u200b\u4e00\u4e2a\u200b\u6570\u7ec4\u200b\uff0c\u200b\u6570\u7ec4\u200b\u7684\u200b\u5143\u7d20\u200b\u4e2a\u6570\u200b\u662f\u200b4\uff0c\u200b\u5206\u522b\u200b\u8868\u793a\u200b\u8be5\u200b\u5f20\u91cf\u200b\u7684\u200b\u7ef4\u5ea6\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u4e00\u4e2a\u4e8c\u7ef4\u200b\u77e9\u9635\u200b\u7684\u200bne\u200b\u6210\u5458\u200b\u53d8\u91cf\u200b\u4e3a\u200b[2, 3, 1, 1]\uff0c\u200b\u8868\u793a\u200b\u8be5\u200b\u77e9\u9635\u200b\u6709\u200b3\u200b\u884c\u200b2\u200b\u5217\u200b\uff0c\u200b\u4e14\u884c\u200b\u548c\u200b\u5217\u200b\u7684\u200b\u7d22\u5f15\u200b\u4ece\u200b0\u200b\u5f00\u59cb\u200b\u3002<p></p>"},{"location":"blog/%E6%8E%A2%E7%B4%A2ggml%E7%9A%84%E5%AE%9E%E7%8E%B0/#tensor\u7684\u5185\u5b58\u5e03\u5c40","title":"tensor\u200b\u7684\u200b\u5185\u5b58\u200b\u5e03\u5c40","text":""},{"location":"blog/%E6%8E%A2%E7%B4%A2ggml%E7%9A%84%E5%AE%9E%E7%8E%B0/#f32\u77e9\u9635","title":"f32\u200b\u77e9\u9635","text":"<p>\u200b\u5bf9\u4e8e\u200bne\u200b\u7684\u200b\u7406\u89e3\u200b\uff0c\u200b\u6bd4\u5982\u200b\u4e00\u4e2a\u200bRGB\u200b\u7684\u200b\u56fe\u7247\u200b\uff0cwidth\u200b\u4e3a\u200b1920\uff0cheight\u200b\u4e3a\u200b1080\uff0c \u200b\u7528\u200bpytorch\u200b\u8868\u793a\u200b\u7ef4\u5ea6\u200b\u4fe1\u606f\u200b\u5c31\u662f\u200b[1, 3, 1080, 1920],\u200b\u5373\u200b[N, C, H, W]\u3002\u200b\u800c\u200b\u5728\u200bGGML\u200b\u4e2d\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u7ef4\u5ea6\u200b\u4fe1\u606f\u200b\u8868\u793a\u200b\u4e3a\u200b\uff1a [1920, 1080, 3, 1]\u3002</p> <p></p>C++<pre><code>type = GGML_TYPE_F32\nbuffer = nullptr\nne = ([0] = 2, [1] = 3, [2] = 1, [3] = 1)\n// 4\u200b\u8868\u793a\u200b\u7b2c\u4e00\u200b\u7ef4\u200b\u6bcf\u4e2a\u200b\u5143\u7d20\u200b\u6240\u200b\u5360\u200b\u5b57\u8282\u6570\u200b\u30028\u200b\u8868\u793a\u200b\u6bcf\u884c\u200b\u5143\u7d20\u200b\u95f4\u9694\u200b8\u200b\u4e2a\u200b\u5b57\u8282\u200b\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200b\u95f4\u9694\u200b\u4e24\u4e2a\u200b\u5143\u7d20\u200b\u3002\n// \u200b\u4e5f\u200b\u5c31\u662f\u200b\u5728\u200b\u5185\u5b58\u200b\u5b58\u50a8\u200b\u7684\u200b\u5e03\u5c40\u200b\u662f\u200brow major\u200b\u8fde\u7eed\u200b\u5b58\u50a8\u200b\u7684\u200b\nnb = ([0] = 4, [1] = 8, [2] = 24, [3] = 24)\nop = GGML_OP_NONE\n</code></pre> ne\u200b\u53ea\u200b\u8868\u793a\u200b\u4e86\u200b\u77e9\u9635\u200b\u7684\u200b\u7ef4\u5ea6\u200b\uff0c\u200b\u800c\u200bnb\u200b\u8868\u793a\u200b\u4e86\u200b\u77e9\u9635\u200b\u5728\u200b\u5185\u5b58\u200b\u4e2d\u200b\u7684\u200b\u5b58\u50a8\u200b\u5e03\u5c40\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u6bcf\u884c\u200b\u5143\u7d20\u200b\u95f4\u9694\u200b\u3002<p></p>"},{"location":"blog/%E6%8E%A2%E7%B4%A2ggml%E7%9A%84%E5%AE%9E%E7%8E%B0/#\u91cf\u5316\u77e9\u9635","title":"\u91cf\u5316\u200b\u77e9\u9635","text":"<p>\u200b\u5728\u200b\u4e0a\u9762\u200b\u7684\u200b\u4f8b\u5b50\u200b\u4efb\u610f\u200b\u5730\u65b9\u200b\u52a0\u200b\u4e00\u884c\u200b\u8868\u793a\u200b\u4e00\u4e2a\u200b\u91cf\u5316\u200b\u77e9\u9635\u200b\u3002 </p>C++<pre><code>ggml_tensor* c = ggml_new_tensor_2d(ctx, GGML_TYPE_Q4_0, 32, 6);\n</code></pre><p></p> <p>\u200b\u901a\u8fc7\u200b<code>p *c</code> \u200b\u53ef\u4ee5\u200b\u67e5\u770b\u200b\u77e9\u9635\u200b\u7684\u200b\u8be6\u7ec6\u4fe1\u606f\u200b\u3002 </p>Bash<pre><code>&gt; p *c\n(ggml_tensor) {\n  type = GGML_TYPE_Q4_0\n  buffer = nullptr\n  ne = ([0] = 32, [1] = 6, [2] = 1, [3] = 1)\n  nb = ([0] = 18, [1] = 18, [2] = 108, [3] = 108)\n  op = GGML_OP_NONE\n  ......\n}\n</code></pre> \u200b\u4e0b\u9762\u200b\u5c31\u200b\u5206\u6790\u200b\u8ba4\u8bc6\u200b\u4e00\u4e9b\u200bQ4_0\u200b\u7c7b\u578b\u200b\u7684\u200b\u77e9\u9635\u200b\u8868\u793a\u200b\u6709\u200b\u4ec0\u4e48\u200b\u4e0d\u540c\u200b\u3002 C++<pre><code>typedef uint16_t ggml_half;\n#define QK4_0 32\ntypedef struct {\n    // 16bit\u200b\u5b58\u50a8\u200bdelta\u200b\u4fe1\u606f\u200b, 2\u200b\u4e2a\u200b\u5b57\u8282\u200b\n    ggml_half d;           // delta\n    // 8bit\u200b\u6570\u7ec4\u200b\uff0c\u200b\u6570\u7ec4\u200b\u957f\u5ea6\u200b\u4e3a\u200b\uff1a16\uff0c 16\u200b\u4e2a\u200b\u5b57\u8282\u200b\n    uint8_t qs[QK4_0 / 2]; // nibbles / quants\n} block_q4_0;\nstatic_assert(sizeof(block_q4_0) == sizeof(ggml_half) + QK4_0 / 2, \"wrong q4_0 block size/padding\");\n</code></pre> \u200b\u5728\u200bGGML\u200b\u4e2d\u200b\uff0c\u200b\u4e00\u4e2a\u200bblock_q4_0\u200b\u7ed3\u6784\u200b\u4f53\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u8868\u793a\u200b32\u200b\u4e2a\u200bint4\u200b\u5143\u7d20\u200b\uff0c\u200b\u518d\u200b\u52a0\u4e0a\u200b\u4e00\u4e2a\u200b16bit\u200b\u7684\u200bdelta\u200b\u4fe1\u606f\u200b\u3002<p></p> <p>\u200b\u6211\u4eec\u200bne[0]\u200b\u548c\u200bne[1]\u200b\u5206\u522b\u200b\u4e3a\u200b32, 16,\u200b\u8868\u793a\u200b\u4e86\u200b32\u200b\u884c\u200b\u548c\u200b16\u200b\u5217\u200b\u7684\u200bint4\u200b\u77e9\u9635\u200b\u3002\u200b\u800c\u200bnb[0]\u200b\u4e3a\u200b18\uff0c\u200b\u8868\u793a\u200bGGML\u200b\u7684\u200bq4_0\u200b\u91cf\u5316\u200b\u5c06\u200b32\u200b\u4e2a\u200bint4\u200b\u5143\u7d20\u200b\u7ec4\u5408\u200b\u5728\u200b\u4e00\u8d77\u200b\uff0c\u200b\u518d\u200b\u52a0\u4e0a\u200b\u4e00\u4e2a\u200b16\u200b\u4f4d\u200b\u7684\u200b\u5dee\u503c\u200b\uff0c\u200b\u6bcf\u7ec4\u200b\u5171\u200b18\u200b\u5b57\u8282\u200b\u3002</p> <p>[32, 6, 1, 1]\u200b\u7684\u200bQ4_0\u200b\u6570\u7ec4\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u770b\u6210\u200b[1,6,1,1]\uff0c\u200b\u56e0\u4e3a\u200b32\u200b\u4e2a\u200b\u5143\u7d20\u200b\u4e3a\u200b\u5185\u5b58\u200b\u4e0a\u200b\u7684\u200b\u6700\u5c0f\u200b\u5bfb\u5740\u200b\u5355\u5143\u200b\u3002\u200b\u66f4\u9ad8\u200b\u7ef4\u5ea6\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0cnb[i] = nb[i-1] * ne[i]\u3002</p>"},{"location":"blog/%E6%8E%A2%E7%B4%A2ggml%E7%9A%84%E5%AE%9E%E7%8E%B0/#\u77e9\u9635permute\u91cd\u6392\u5217","title":"\u77e9\u9635\u200bpermute\u200b\u91cd\u200b\u6392\u5217","text":"<p>\u200b\u770b\u200b\u4e00\u4e2a\u200bpytorch\u200b\u4f8b\u5b50\u200b\uff0c\u200b\u4e86\u89e3\u200bpermute\u200b\u662f\u200b\u4ec0\u4e48\u200b\uff1fpermute\u200b\u5c31\u662f\u200b\u5bf9\u200b\u6570\u636e\u200b\u7684\u200b\u7ef4\u5ea6\u200b\u53d8\u5316\u200b\u987a\u5e8f\u200b </p>C++<pre><code>import torch\nimport numpy as np\n\na=np.array([[[1,2,3],[4,5,6]]])\nunpermuted=torch.tensor(a)\nprint(unpermuted.size())              #  \u2014\u2014&gt;  torch.Size([1, 2, 3])\n\npermuted=unpermuted.permute(2,0,1)\nprint(permuted.size())                #  \u2014\u2014&gt;  torch.Size([3, 1, 2])\n</code></pre><p></p> C++<pre><code>tensor([[[ 1,  4]],\n        [[ 2,  5]],\n        [[ 3,  6]]])     # print(permuted)    \n</code></pre> <p>\u200b\u518d\u200b\u770b\u200bggml\u200b\u4e2d\u200b\u7684\u200bpermute\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u6dfb\u52a0\u200b\u5982\u4e0b\u200b\u4f8b\u5b50\u200b: </p>C++<pre><code>ggml_tensor* before = a;\n\n// Same as PyTorch's permute()\nggml_tensor* after = ggml_permute(ctx, before, 1, 0, 2, 3);\n</code></pre> \u200b\u89c2\u5bdf\u200bbefore\u200b\u548c\u200bafter tensor\u200b\u4fe1\u606f\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200bafter\u200b\u7684\u200bne\u200b\u548c\u200bnb\u200b\u4e2d\u200b\u7684\u200b0\u200b\u548c\u200b1\u200b\u7ef4\u5ea6\u200b\u4ea4\u6362\u200b\u4e86\u200b\uff0c\u200b\u4f46\u662f\u200b\u770b\u200bdata\uff0c\u200b\u5176\u5b9e\u200b\u6570\u636e\u200b\u5185\u5b58\u200b\u5b58\u50a8\u200b\u672c\u8eab\u200b\u662f\u200b\u6ca1\u6709\u200b\u53d8\u5316\u200b\u7684\u200b\u3002\u200b\u5bf9\u4e8e\u200b\u4e00\u4e2a\u200b\u5185\u5b58\u200b\u5b58\u50a8\u200b\uff0c\u200b\u8981\u200b\u6539\u53d8\u200bne\u200b\u7ef4\u5ea6\u200b\u4fe1\u606f\u200b\uff0c\u200b\u53ea\u200b\u9700\u8981\u200b\u6539\u53d8\u200bnb\u200b\u6bcf\u4e2a\u200b\u7ef4\u5ea6\u200b\u7684\u200b\u95f4\u9694\u200b\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200b\u6570\u636e\u200b\u8bbf\u95ee\u200b\u65b9\u5f0f\u200b\u3002<p></p> <p></p>Bash<pre><code>&gt; p *before\n(ggml_tensor) {\n  type = GGML_TYPE_F32\n  buffer = nullptr\n  ne = ([0] = 2, [1] = 3, [2] = 1, [3] = 1)\n  nb = ([0] = 4, [1] = 8, [2] = 24, [3] = 24)\n  op = GGML_OP_NONE\n  view_src = nullptr\n  view_offs = 0\n  data = 0x00007fffb77eb1b0\n}\n\n&gt; p *after\n(ggml_tensor) {\n  type = GGML_TYPE_F32\n  buffer = nullptr\n  ne = ([0] = 3, [1] = 2, [2] = 1, [3] = 1)\n  nb = ([0] = 8, [1] = 4, [2] = 24, [3] = 24)\n  op = GGML_OP_PERMUTE\n\n  view_src = 0x00007fffb77eb060\n  view_offs = 0\n  data = 0x00007fffb77eb1b0\n  name = \" (permuted)\"\n}\n</code></pre> \u200b\u4ece\u200bview_src\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u770b\u51fa\u200bafter\u200b\u53ea\u662f\u200bbefore\u200b\u7684\u200b\u89c6\u56fe\u200b\u3002<p></p> C++<pre><code>// Pseudo-code representation of tensor's memory layout\ndata = [1,2,3,4,5,6]\n\n// Accessing row 1 before permutation, nb[0] = 4\n// 1, 2,\n// 3, 4,\n// 5, 6\ne0 = (p + nb[0] * 0) = 1\ne1 = (p + nb[0] * 1) = 2\n\n// Accessing row 1 after permutation, nb[0] = 8\n// [[1,3,5],\n//  [2,4,6]]\ne0 = (p + nb[0] * 0) = 0\ne1 = (p + nb[0] * 1) = (p + 8) = 3\ne1 = (p + nb[0] * 2) = (p + 16) = 5\n</code></pre>"},{"location":"blog/%E6%8E%A2%E7%B4%A2ggml%E7%9A%84%E5%AE%9E%E7%8E%B0/#\u5f20\u91cf\u89c6\u56fe","title":"\u5f20\u91cf\u200b\u89c6\u56fe","text":"<p>\u200b\u89c6\u56fe\u200b\u53ef\u4ee5\u200b\u5bf9\u200b\u5f20\u91cf\u200b\u5185\u5b58\u200b\u8fdb\u884c\u200b\u590d\u7528\u200b\uff0c\u200b\u907f\u514d\u200b\u62f7\u8d1d\u200b\u3001\u200b\u907f\u514d\u200b\u4f4e\u6548\u200b\u7684\u200b\u4e3a\u200b\u6bcf\u4e2a\u200b\u5f20\u91cf\u200b\u5206\u914d\u200b\u4e00\u4e2a\u200b\u72ec\u7279\u200b\u7684\u200b\u5185\u5b58\u200b\u5757\u200b\u3002</p> <p>\u200b\u4ee5\u200bggml_cpy\u200b\u64cd\u4f5c\u200b\u4e3a\u4f8b\u200b\uff0c\u200b\u62f7\u8d1d\u200b\u7684\u200bb tensor\u200b\u5c31\u662f\u200b\u76f8\u5bf9\u200b\u4e8e\u200ba\u200b\u521b\u5efa\u200b\u7684\u200b\u4e00\u4e2a\u200b\u89c6\u56fe\u200b\u3002</p> C++<pre><code>// ggml_cpy\nstatic struct ggml_tensor * ggml_cpy_impl(\n        struct ggml_context * ctx,\n        struct ggml_tensor  * a,\n        struct ggml_tensor  * b) {\n    GGML_ASSERT(ggml_nelements(a) == ggml_nelements(b));\n\n    // make a view of the destination\n    struct ggml_tensor * result = ggml_view_tensor(ctx, b);\n    if (strlen(b-&gt;name) &gt; 0) {\n        ggml_format_name(result, \"%s (copy of %s)\", b-&gt;name, a-&gt;name);\n    } else {\n        ggml_format_name(result, \"%s (copy)\", a-&gt;name);\n    }\n\n    result-&gt;op     = GGML_OP_CPY;\n    result-&gt;src[0] = a;\n    result-&gt;src[1] = b;\n\n    return result;\n}\n</code></pre> <p>\u200b\u4ee5\u200bLLM\u200b\u4e2d\u200bQ\u3001K\u3001V tensor\u200b\u4e3a\u4f8b\u200b\uff0c\u200b\u4e0b\u9762\u200b\u7684\u200bQcur\u3001Kcur\u3001Vcur\u200b\u53ef\u4ee5\u200b\u8868\u793a\u200b\u6210\u200b\u521b\u5efa\u200b\u7684\u200btensor_input\u200b\u7684\u200b\u4e00\u90e8\u5206\u200b\u3002\u200b\u6240\u4ee5\u200b\u89c6\u56fe\u200b\u4e0d\u7528\u200b\u662f\u200bbase tensor\u200b\u7684\u200b\u5168\u90e8\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u53ea\u662f\u200b\u4e00\u90e8\u5206\u200b\uff0c\u200b\u901a\u8fc7\u200boffset\u200b\u53ef\u4ee5\u200b\u8bbe\u7f6e\u200b\u76f8\u5bf9\u200bbase tensor\u200b\u7684\u200b\u504f\u79fb\u91cf\u200b\u3002 </p>C++<pre><code>struct ggml_tensor* tensor_input = ggml_new_tensor_2d(ctx, GGML_TYPE_32, 768*3, seq_len);\n\n// Create a view tensor of shape (768, seq_len) with offset 0\n// The last parameter of ggml_view_2d specifies the view's offset (in bytes)\nstruct ggml_tensor *Qcur = ggml_view_2d(ctx0, tensor_input, 768, seq_len, cur-&gt;nb[1], 0 * sizeof(float) * 768);\n\n// Create a view tensor of shape (768, seq_len) with offset 768\nstruct ggml_tensor *Kcur = ggml_view_2d(ctx0, tensor_input, 768, seq_len, cur-&gt;nb[1], 1 * sizeof(float) * 768);\n\n// Create a view tensor of shape (768, seq_len) with offset 768 * 2\nstruct ggml_tensor *Vcur = ggml_view_2d(ctx0, tensor_input, 768, seq_len, cur-&gt;nb[1], 2 * sizeof(float) * 768);\n</code></pre><p></p>"},{"location":"blog/%E6%8E%A2%E7%B4%A2ggml%E7%9A%84%E5%AE%9E%E7%8E%B0/#\u63a2\u7d22ggml\u7684\u5b9e\u73b0ggml\u7684\u5185\u5b58\u7ba1\u7406","title":"\u63a2\u7d22\u200bggml\u200b\u7684\u200b\u5b9e\u73b0\u200b\u2013GGML\u200b\u7684\u200b\u5185\u5b58\u200b\u7ba1\u7406","text":"<p>\u200b\u672c\u200b\u5c0f\u8282\u200b\u901a\u8fc7\u200b\u6700\u200b\u7b80\u5355\u200b\u7684\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b, ./examples/simple/simple-ctx.cpp\uff0c\u200b\u7406\u89e3\u200bGGML\u200b\u5b9e\u73b0\u200b\u4e24\u4e2a\u200b\u77e9\u9635\u200b\u6267\u884c\u200b\u77e9\u9635\u200b\u4e58\u6cd5\u200b\u7684\u200b\u6838\u5fc3\u200b\u5de5\u4f5c\u200b\u6d41\u7a0b\u200b\u3002</p> <p>\u200b\u8fd9\u4e2a\u200b\u4f8b\u5b50\u200b\u5177\u6709\u200b\u4ee5\u4e0b\u200b\u7279\u70b9\u200b\uff0c\u200b\u4e5f\u200b\u56e0\u6b64\u200b\u4f5c\u4e3a\u200b\u6211\u4eec\u200b\u7406\u89e3\u200b\u7684\u200b\u8d77\u70b9\u200b\u3002</p> <ul> <li> <p>\u200b\u5728\u200bcpu\u200b\u4e0a\u200b\u6267\u884c\u200b\u6700\u200b\u7b80\u5355\u200b\u7684\u200b\u4e24\u4e2a\u200b\u77e9\u9635\u200b\u7684\u200b\u4e58\u6cd5\u200b\u8ba1\u7b97\u200b\uff0c\u200b\u4e0e\u200b\u786c\u4ef6\u200b\u663e\u5361\u200b\u65e0\u5173\u200b</p> </li> <li> <p>\u200b\u6240\u6709\u200b\u7684\u200b\u8ba1\u7b97\u200b\u90fd\u200b\u5728\u200bcpu\u200b\u4e0a\u200b\u6267\u884c\u200b\uff0c\u200b\u6240\u6709\u200b\u7684\u200b\u5185\u5b58\u200b\u5206\u914d\u200b\u90fd\u200b\u5728\u200bRAM\u200b\u4e2d\u200b\u5b8c\u6210\u200b</p> </li> </ul> <p>!!![warning]     GGML\u200b\u91c7\u7528\u200bc\u200b\u8bed\u8a00\u200b\u98ce\u683c\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u6240\u4ee5\u200b\u5728\u200b\u5185\u5b58\u200b\u7ba1\u7406\u200b\u4e0a\u200b\uff0c\u200b\u901a\u8fc7\u200bstruct\u200b\u4e2d\u200b\u7684\u200b\u6307\u9488\u200b\u548c\u200b\u504f\u79fb\u91cf\u200b\u6765\u200b\u7ba1\u7406\u200b\u5185\u5b58\u200b\uff0c\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u8ddf\u8e2a\u200b\u6307\u9488\u200b\u503c\u200b\u3001\u200b\u8ba1\u7b97\u200b\u504f\u79fb\u91cf\u200b\uff0c\u200b\u6765\u200b\u7406\u89e3\u200b\u5b83\u200b\u7684\u200b\u5185\u5b58\u200b\u5e03\u5c40\u200b\u3002</p>"},{"location":"blog/%E6%8E%A2%E7%B4%A2ggml%E7%9A%84%E5%AE%9E%E7%8E%B0/#\u8ba4\u8bc6ggml_context","title":"\u8ba4\u8bc6\u200bggml_context","text":"<p>\u200b\u8df3\u8fc7\u200b\u4e0d\u200b\u91cd\u8981\u200b\u7684\u200b\u51fd\u6570\u200b\uff08\u200b\u6bd4\u5982\u200b\uff1a ggml_time_init\uff09\uff0c\u200b\u65ad\u70b9\u200bdebug\u200b\u8fdb\u5165\u200bload_model\u200b\u51fd\u6570\u200b\u3002\u200b\u9996\u5148\u200b\u770b\u5230\u200b\u4e00\u4e2a\u200bctx_size\u200b\u7684\u200b\u8ba1\u7b97\u200b\uff0c\u200b\u901a\u8fc7\u200bctx_size\u200b\u4f5c\u4e3a\u200b\u53c2\u6570\u200b\uff0c\u200b\u8c03\u7528\u200b\u4e86\u200bggml_init\u200b\u51fd\u6570\u200b, \u200b\u521d\u59cb\u5316\u200b\u4e86\u200bstruct ggml_context *\u3002</p> <p></p> <p>\u200b\u6682\u65f6\u200b\u5148\u200b\u8df3\u200b\u8fc7\u200b\u590d\u6742\u200b\u7684\u200bctx_size\u200b\u8ba1\u7b97\u200b\uff0c\u200b\u91cd\u70b9\u200b\u5173\u6ce8\u200b\u8fd9\u4e2a\u200bGGML\u200b\u6700\u200b\u91cd\u8981\u200b\u7684\u200b\u51fd\u6570\u200b\u4e4b\u4e00\u200b\uff1aggml_init\u3002</p>"},{"location":"blog/%E6%8E%A2%E7%B4%A2ggml%E7%9A%84%E5%AE%9E%E7%8E%B0/#\u7406\u89e3ggml_init","title":"\u7406\u89e3\u200bggml_init","text":"<p>ggml_init\u200b\u51fd\u6570\u200b\u63a5\u53d7\u200b\u4e00\u4e2a\u200b\u53c2\u6570\u200bggml_init_params\uff0c\u200b\u8fd9\u4e2a\u200b\u53c2\u6570\u200b\u4e2d\u200b\u5305\u542b\u200b\u5185\u5b58\u200b\u5206\u914d\u200b\u7684\u200b\u53c2\u6570\u200b\u3002</p> <ul> <li> <p>mem_size_: \u200b\u5185\u5b58\u200b\u6c60\u200b\u5927\u5c0f\u200b\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200bctx_size\uff08\u200b\u63d0\u524d\u200b\u8ba1\u7b97\u51fa\u6765\u200b\u7684\u200b\uff09</p> </li> <li> <p>mem_buffer_: \u200b\u5185\u5b58\u200b\u6c60\u200b\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200bctx_buffer\uff0c\u200b\u8fd9\u4e2a\u200b\u5185\u5b58\u200b\u6c60\u200b\u7528\u4e8e\u200b\u5b58\u50a8\u200bggml_tensor\u200b\u7ed3\u6784\u200b\u4f53\u200b\u548c\u200b\u6570\u636e\u200b\u3002\u200b\u8fd9\u91cc\u200b\u4f20\u9012\u200b\u7684\u200bNULL\u200b\u521d\u59cb\u5316\u200b\uff0c\u200b\u8868\u793a\u200b\u7531\u200b\u5185\u90e8\u200b\u5206\u914d\u200b</p> </li> <li> <p>no_alloc_: \u200b\u662f\u5426\u200b\u4f7f\u7528\u200b\u7528\u6237\u200b\u4f20\u9012\u200b\u7684\u200b\u5185\u5b58\u200b\u6c60\u200b\uff0c\u200b\u5982\u679c\u200b\u4e3a\u200btrue\uff0c\u200b\u5219\u200b\u4f7f\u7528\u200b\u7528\u6237\u200b\u4f20\u9012\u200b\u7684\u200b\u5185\u5b58\u200b\u6c60\u200b\u3002\u200b\u8fd9\u4e2a\u200b\u4f20\u9012\u200b\u7684\u200bfalse\uff0c\u200b\u8868\u793a\u200b\u7531\u200b\u5185\u90e8\u200b\u5206\u914d\u5185\u5b58\u200b\u6c60\u200b\u3002</p> </li> </ul> C++<pre><code>struct ggml_context * ggml_init(struct ggml_init_params params) {\n    // ......\n}\n\nstruct ggml_init_params {\n    // memory pool\n    size_t mem_size;   // bytes\n    void * mem_buffer; // if NULL, memory will be allocated internally\n    bool   no_alloc;   // don't allocate memory for the tensor data\n};\n</code></pre> <p>\u200b\u8fdb\u5165\u200bggml_init\u200b\u51fd\u6570\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\uff0c\u200b\u9996\u5148\u200b\u5728\u200b\u5806\u200b\u4e0a\u200b\u5206\u914d\u200b\u4e86\u200b\u4e00\u4e2a\u200bstruct ggml_context *\u3002</p> <p></p> <p>\u200b\u5230\u200b\u8fd9\u91cc\u200b\uff0cggml_context\u200b\u5185\u5b58\u200b\u5e03\u5c40\u200b\u5982\u4e0b\u200b\u56fe\u200b\u6240\u793a\u200b\uff0c\u200b\u6211\u4eec\u200b\u63a5\u4e0b\u6765\u200b\u4f1a\u200b\u4e00\u6b65\u200b\u4e00\u6b65\u200b\u4e86\u89e3\u200b\u5185\u90e8\u200b\u7684\u200b\u8fdb\u4e00\u6b65\u200b\u5206\u914d\u200b\u3002</p> <p></p>"},{"location":"blog/%E6%8E%A2%E7%B4%A2ggml%E7%9A%84%E5%AE%9E%E7%8E%B0/#ggml\u7684tensor\u8868\u793a","title":"GGML\u200b\u7684\u200btensor\u200b\u8868\u793a","text":"<p>\u200b\u5728\u200bggml_init\u200b\u51fd\u6570\u200b\u6267\u884c\u200b\u5b8c\u6210\u200b\u540e\u200b\uff0c\u200b\u7d27\u63a5\u7740\u200b\u5c31\u662f\u200b\u5bf9\u200b\u4e24\u4e2a\u200b\u77e9\u9635\u200btensor\u200b\u7684\u200b\u521b\u5efa\u200b\u548c\u200b\u5185\u5b58\u200b\u8d4b\u503c\u200b\u3002\u200b\u5305\u62ec\u200b\u4e86\u200bggml_new_tensor_2d\u200b\u7684\u200b\u8c03\u7528\u200b\uff0c\u200b\u4e00\u76f4\u200b\u8c03\u7528\u200b\u5230\u200b\u771f\u6b63\u200b\u7684\u200b\u5b9e\u73b0\u200b\u51fd\u6570\u200bggml_new_tensor_impl\u3002</p> C++<pre><code>// create tensors\nmodel.a = ggml_new_tensor_2d(model.ctx, GGML_TYPE_F32, cols_A, rows_A);\nmodel.b = ggml_new_tensor_2d(model.ctx, GGML_TYPE_F32, cols_B, rows_B);\n\nmemcpy(model.a-&gt;data, a, ggml_nbytes(model.a));\nmemcpy(model.b-&gt;data, b, ggml_nbytes(model.b));\n</code></pre> <p>\u200b\u5173\u4e8e\u200bview_src\u200b\u7684\u200b\u5185\u5bb9\u200b\u53ef\u4ee5\u200b\u8df3\u8fc7\u200b\uff0c\u200b\u4e3b\u8981\u200b\u7528\u4e8e\u200b\u5904\u7406\u200b\u5f20\u91cf\u200b\u89c6\u56fe\u200b\uff0c\u200b\u73b0\u5728\u200b\u53ef\u4ee5\u200b\u4e0d\u7528\u200b\u5173\u5fc3\u200b\u3002</p> <p></p> <p>\u200b\u9996\u5148\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u95ee\u9898\u200b\u5c31\u662f\u200b\uff1aGGML\u200b\u7684\u200b\u5f20\u91cf\u200b\u7ef4\u5ea6\u200b\u662f\u200b\u5982\u4f55\u200b\u8868\u793a\u200b\u7684\u200b\uff1f</p> <p>\u200b\u8fd9\u91cc\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u548c\u200bpytorch\u200b\u7684\u200b\u5f20\u91cf\u200b\u8868\u793a\u200b\u8fdb\u884c\u200b\u5bf9\u6bd4\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u53d1\u73b0\u200b\uff0c\u200b\u5b83\u4eec\u200b\u7684\u200b\u8868\u793a\u200b\u65b9\u5f0f\u200b\u6b63\u597d\u200b\u76f8\u53cd\u200b\u3002</p> <p>ggml\u200b\u91c7\u7528\u200b\u4e00\u4e2a\u200b\u56db\u7ef4\u200b\u6570\u7ec4\u200b\u8868\u793a\u200bshape\u200b\u4fe1\u606f\u200b\u3002\u200b\u5728\u200bpytorch\u200b\u4e2d\u200b\u4e00\u4e2a\u200b[batch, channels, height, width]\u200b\u7684\u200b\u5f20\u91cf\u200b\uff0cggml\u200b\u4e2d\u200b\u8868\u793a\u200b\u4e3a\u200b[width, height, channels, batch]\u3002</p> <p>pytorch\u200b\u4ece\u200b\u6700\u200b\u5916\u5c42\u200b\u5230\u200b\u6700\u200b\u5185\u5c42\u200b\u7684\u200b\u6570\u636e\u200b\uff0c\u200b\u662f\u200b\u4ece\u5de6\u5230\u53f3\u200b\u8868\u793a\u200b\u7684\u200b\u3002\u200b\u8fd9\u91cc\u200b\u6700\u200b\u5185\u5c42\u200b\uff0c\u200b\u8868\u793a\u200b\u5728\u200b\u5185\u5b58\u200b\u5b58\u50a8\u200b\u4e0a\u200b\u8fde\u7eed\u200b\u7684\u200b\u7ef4\u5ea6\u200b\u3002</p> <p>\u200b\u6bd4\u5982\u200brow\u200b\u4f18\u5148\u200b\u5b58\u50a8\u200b\uff0c\u200b\u4e00\u4e2a\u200b3 * 4\u200b\u7684\u200b\u77e9\u9635\u200b\uff083\u200b\u884c\u200b\uff0c4\u200b\u5217\u200b\uff09\uff0c\u200b\u90a3\u200b\u6700\u200b\u5185\u5c42\u200b\u7ef4\u5ea6\u200b\u5c31\u662f\u200b\u5217\u200b\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200b4\u200b\u5217\u200b\u3002pytorch\u200b\u8868\u793a\u200b\u4e3a\u200b[3, 4]\uff0cggml\u200b\u8868\u793a\u200b\u4e3a\u200b[4, 3]\u3002</p> <p></p> <p>\u200b\u4e0a\u9762\u200b\u8ba1\u7b97\u200b\u51fa\u200b\u7684\u200bdata_size\uff0c\u200b\u5148\u200b\u8ba1\u7b97\u200b\u5355\u884c\u200b\u7684\u200bsize\uff0c\u200b\u7136\u540e\u200b\u4e58\u4ee5\u200b\u884c\u200b\u6570\u200b\uff0c\u200b\u5f97\u5230\u200b\u77e9\u9635\u200b\u7684\u200bsize\u3002\u200b\u8fd9\u91cc\u200b\u7684\u200btype\u200b\u662f\u200bfloat32\u200b\u7c7b\u578b\u200b\uff0c\u200b\u5982\u679c\u200b\u662f\u200b\u91cf\u5316\u200b\u7c7b\u578b\u200b\uff0csize\u200b\u5c31\u200b\u4f1a\u200b\u4e0d\u540c\u200b\uff0c\u200b\u540e\u9762\u200b\u7528\u5230\u200b\u5728\u200b\u8ba8\u8bba\u200b\u3002</p> C++<pre><code>size_t obj_alloc_size = 0;\n\nif (view_src == NULL &amp;&amp; !ctx-&gt;no_alloc) {\n    // allocate tensor data in the context's memory pool\n    obj_alloc_size = data_size;\n}\n\nstruct ggml_object * const obj_new = ggml_new_object(ctx, GGML_OBJECT_TYPE_TENSOR, GGML_TENSOR_SIZE + obj_alloc_size);\nGGML_ASSERT(obj_new);\n</code></pre> <p>\u200b\u5982\u679c\u200bview_src\u200b\u4e3a\u7a7a\u200b\uff0c\u200b\u4e14\u200bno_alloc\u200b\u4e3a\u200bfalse\uff0c\u200b\u5219\u200b\u8c03\u7528\u200bggml_new_object\u200b\u51fd\u6570\u200b\uff0c\u200b\u5206\u914d\u200b\u4e00\u4e2a\u200bstruct ggml_object *\uff0c\u200b\u5e76\u200b\u521d\u59cb\u5316\u200b\u3002\u200b\u5206\u914d\u200b\u7684\u200bsize\u200b\u5c31\u662f\u200btensor\u200b\u7684\u200bsize\uff0c\u200b\u8fd9\u91cc\u200b\u5c31\u662f\u200bdata_size\u3002</p> <p>!!! [warning]     view_src\u200b\u8868\u793a\u200b\u8be5\u200bobj\u200b\u662f\u200b\u5176\u5b83\u200b\u5185\u5b58\u200b\u7684\u200b\u89c6\u56fe\u200b\uff0c\u200b\u4e0d\u200b\u9700\u8981\u200b\u5206\u914d\u5185\u5b58\u200b\uff0c\u200b\u76f4\u63a5\u200b\u590d\u7528\u200b\u5185\u5b58\u200b\u3002</p> <p>\u200b\u5206\u914d\u200b\u7684\u200bggml_object\u200b\u7ed3\u6784\u200b\u4f53\u6709\u200b\u4ec0\u4e48\u200b\u7528\u200b\u5462\u200b\uff1f</p>"},{"location":"blog/%E6%8E%A2%E7%B4%A2ggml%E7%9A%84%E5%AE%9E%E7%8E%B0/#\u7406\u89e3ggml_new_object","title":"\u7406\u89e3\u200bggml_new_object","text":"<p>\u200b\u76f4\u63a5\u200b\u770b\u200b\u4ee3\u7801\u200b\uff0c\u200b\u53ef\u80fd\u200b\u6709\u70b9\u200b\u56f0\u96be\u200b\uff0c\u200b\u6211\u4eec\u200b\u5bf9\u200b\u5173\u952e\u70b9\u200b\u8fdb\u884c\u200b\u603b\u7ed3\u200b\u3002</p> <ul> <li> <p>\u200b\u5728\u200b\u8fd9\u4e2a\u200b\u4f8b\u5b50\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u9996\u5148\u200b\u8ba1\u7b97\u200b\u4e86\u200bcontext\u200b\u7684\u200bsize\uff0c\u200b\u636e\u6b64\u200b\u5206\u914d\u200b\u4e86\u200bggml_context\u3002\u200b\u63a5\u4e0b\u6765\u200b\u7684\u200b\u5185\u5b58\u200b\u5206\u914d\u200b\uff0c\u200b\u5305\u62ec\u200bobj\u200b\u7684\u200b\u5206\u914d\u200b\uff0c\u200b\u90fd\u200b\u662f\u200b\u5728\u200bcontext\u200b\u7684\u200bmemory pool\u200b\u4e2d\u200b\u5b8c\u6210\u200b\u3002</p> </li> <li> <p>ggml_object\u200b\u7684\u200b\u5b9a\u4e49\u200b\u53ef\u4ee5\u200b\u770b\u51fa\u200b\uff0c\u200b\u6709\u200b\u4e00\u4e2a\u200bnext\u200b\u6307\u9488\u200b\u6307\u5411\u200b\u4e0b\u200b\u4e00\u4e2a\u200bggml_object\u3002\u200b\u56e0\u6b64\u200b\u5b83\u200b\u662f\u200b\u901a\u8fc7\u200b\u94fe\u8868\u200b\u6765\u200b\u7ba1\u7406\u200b\u5185\u5b58\u200b\u7684\u200b\uff0c\u200b\u6bcf\u4e2a\u200bggml_object\u200b\u5bf9\u8c61\u200b\u90fd\u200b\u662f\u200b\u4e00\u4e2a\u200b\u94fe\u8868\u200b\u8282\u70b9\u200b\u3002</p> </li> <li> <p>\u200b\u521d\u59cb\u72b6\u6001\u200b\u4e0b\u200b\uff0cggml_object\u200b\u7684\u200bobjects_begin\u200b\u548c\u200bobjects_end\u200b\u90fd\u200b\u4e3a\u200bNULL\uff0c\u200b\u8868\u793a\u200b\u8fd9\u4e2a\u200b\u94fe\u8868\u200b\u4e3a\u7a7a\u200b\u3002</p> </li> <li> <p>ggml_object\u200b\u7684\u200b\u7528\u9014\u200b\u662f\u200b\u4ec0\u4e48\u200b\u5462\u200b\uff1fggml\u200b\u901a\u8fc7\u200b\u5b83\u6765\u200b\u9690\u5f0f\u200b\u7684\u200b\u7ba1\u7406\u200b\u5404\u79cd\u200b\u8d44\u6e90\u200b\u2013\u200b\u5305\u62ec\u200btensor\u200b\u5f20\u91cf\u200b\u3001\u200b\u8ba1\u7b97\u200b\u56fe\u200b\u3001work buffer\u200b\u7b49\u200b\u3002\u200b\u94fe\u63a5\u200b\u5177\u6709\u200bO(n)\u200b\u7684\u200b\u67e5\u627e\u65f6\u95f4\u200b\u590d\u6742\u5ea6\u200b\u3002</p> </li> </ul> <p></p> <p>\u200b\u5206\u914d\u200b\u4e00\u4e2a\u200bggml_object\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u9700\u8981\u200b\u591a\u5927\u200b\u7684\u200b\u5185\u5b58\u200b\u5462\u200b\uff1f</p> C++<pre><code>struct ggml_object * const obj_new = ggml_new_object(ctx, GGML_OBJECT_TYPE_TENSOR, GGML_TENSOR_SIZE + obj_alloc_size);\n\nstatic const size_t GGML_TENSOR_SIZE = sizeof(struct ggml_tensor);\n</code></pre> <p>\u200b\u4ee5\u200b\u8fd9\u91cc\u200bggml_object\u200b\u5206\u914d\u200b\u7684\u200b\u662f\u200btensor\u200b\u7c7b\u578b\u200b\u4e3a\u200b\u4f8b\u5b50\u200b\uff1a \u200b\u5305\u62ec\u200b\u4e86\u200b struct ggml_object\u200b\u7684\u200bsize + struct ggml_tensor\u200b\u7684\u200bsize + obj_alloc_size\uff08\u200b\u4e5f\u200b\u5c31\u662f\u200btensor\u200b\u7684\u200bdata\u200b\u5185\u5b58\u5927\u5c0f\u200b\uff09\u3002\u200b\u5f53\u7136\u200bggml_tensor struc\u200b\u7684\u200bsize\u200b\u548c\u200bobj_alloc_size\u200b\u8fd8\u200b\u9700\u8981\u200b\u8fdb\u884c\u200b\u5185\u5b58\u200b\u5bf9\u9f50\u200b\u3002</p> <p>\u200b\u5230\u200b\u6b64\u200b\uff0c\u200b\u6211\u4eec\u200b\u7684\u200bggml_context\u200b\u5185\u5b58\u200b\u5e03\u5c40\u200b\uff08\u200b\u6ca1\u6709\u200b\u5206\u914d\u200b\u65b0\u200b\u7684\u200b\u5185\u5b58\u200b\uff0c\u200b\u6240\u6709\u200b\u7684\u200b\u5185\u5b58\u200b\u90fd\u200b\u662f\u200b\u5206\u914d\u200bctx\u200b\u65f6\u200b\u5206\u914d\u200b\uff09\u200b\u5982\u4e0b\u200b\u56fe\u200b\u6240\u793a\u200b\uff1a</p> <p></p>"},{"location":"blog/%E6%8E%A2%E7%B4%A2ggml%E7%9A%84%E5%AE%9E%E7%8E%B0/#ggml_tensor\u5982\u4f55\u5b9a\u4e49","title":"ggml_tensor\u200b\u5982\u4f55\u200b\u5b9a\u4e49","text":"<p>\u200b\u4e0a\u200b\u8282\u200b\uff0c\u200b\u6211\u4eec\u200b\u7684\u200b\u7b2c\u4e00\u4e2a\u200btensor\uff0c\u200b\u4ee5\u53ca\u200b\u901a\u8fc7\u200bggml_object\u200b\u8fdb\u884c\u200b\u4e86\u200b\u8868\u793a\u200b\u7ba1\u7406\u200b\uff0c\u200b\u5e76\u200b\u4e3a\u200b\u5176\u200b\u5728\u200bggml_context\u200b\u4e2d\u200b\u5206\u914d\u200b\u4e86\u200b\u5185\u5b58\u200b\uff0c\u200b\u90a3\u4e48\u200bggml_tensor\u200b\u7ed3\u6784\u200b\u4f53\u200b\u7684\u200b\u5b9a\u4e49\u200b\u5462\u200b\uff1f</p> <p>\u200b\u6211\u4eec\u200b\u7ee7\u7eed\u200b\u770b\u200bggml_new_tensor_impl\u200b\u51fd\u6570\u200b\u4e2d\u200b\u7684\u200b\u4e0b\u200b\u534a\u200b\u90e8\u5206\u200b\u5185\u5bb9\u200b\u3002</p> C++<pre><code>struct ggml_tensor * const result = (struct ggml_tensor *)((char *)ctx-&gt;mem_buffer + obj_new-&gt;offs);\n\n*result = (struct ggml_tensor) {\n    /*.type         =*/ type,\n    /*.buffer       =*/ NULL,\n    /*.ne           =*/ { 1, 1, 1, 1 },\n    /*.nb           =*/ { 0, 0, 0, 0 },\n    /*.op           =*/ GGML_OP_NONE,\n    /*.op_params    =*/ { 0 },\n    /*.flags        =*/ 0,\n    /*.src          =*/ { NULL },\n    /*.view_src     =*/ view_src,\n    /*.view_offs    =*/ view_offs,\n    /*.data         =*/ obj_alloc_size &gt; 0 ? (void *)(result + 1) : data,\n    /*.name         =*/ { 0 },\n    /*.extra        =*/ NULL,\n    /*.padding      =*/ { 0 },\n};\n\nfor (int i = 0; i &lt; n_dims; i++) {\n    result-&gt;ne[i] = ne[i];\n}\n\nresult-&gt;nb[0] = ggml_type_size(type);\nresult-&gt;nb[1] = result-&gt;nb[0]*(result-&gt;ne[0]/ggml_blck_size(type));\nfor (int i = 2; i &lt; GGML_MAX_DIMS; i++) {\n    result-&gt;nb[i] = result-&gt;nb[i - 1]*result-&gt;ne[i - 1];\n}\n\nctx-&gt;n_objects++;\n\nreturn result;\n</code></pre> <p>result\u200b\u6307\u9488\u200b\u6307\u5411\u200b\u4e86\u200bctx-&gt;mem_buffer + obj_new-&gt;offs\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200bggml_tensor\u200b\u7ed3\u6784\u200b\u4f53\u200b\u5bf9\u8c61\u200b\u6240\u200b\u5206\u914d\u200b\u7684\u200b\u5185\u5b58\u200b\u3002</p> <p></p> <p>ggml_tensor\u200b\u7ed3\u6784\u200b\u4f53\u200b\u7684\u200b\u5173\u952e\u5b57\u200b\u6bb5\u200b\u5982\u4e0b\u200b\uff1a</p> <ul> <li> <p>data\uff1a\u200b\u6307\u5411\u200btensor\u200b\u5f20\u91cf\u200b\u6570\u636e\u200b\u5b58\u50a8\u200b\u8d77\u59cb\u200b\u5730\u5740\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u5c31\u662f\u200bggml_tensor\u200b\u7ed3\u6784\u200b\u4f53\u200b\u81ea\u8eab\u200b\u4e4b\u540e\u200b\u7684\u200b\u7b2c\u4e00\u4e2a\u200b\u5b57\u8282\u200b\u3002</p> </li> <li> <p>ne\uff1a\u200b\u4e00\u4e2a\u200b\u5927\u5c0f\u200b\u4e3a\u200b4\u200b\u7684\u200b\u6570\u7ec4\u200b\uff0c\u200b\u8868\u793a\u200b\u6bcf\u4e2a\u200b\u7ef4\u5ea6\u200b\u7684\u200b\u5143\u7d20\u200b\u6570\u91cf\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u662f\u200b[2, 4, 1, 1]\u3002</p> </li> <li> <p>nb\uff1a\u200b\u4e00\u4e2a\u200b\u5927\u5c0f\u200b\u4e3a\u200b4\u200b\u7684\u200b\u6570\u7ec4\u200b\uff0c\u200b\u8868\u793a\u200b\u6bcf\u4e2a\u200b\u7ef4\u5ea6\u200b\u7684\u200b\u5143\u7d20\u200b\u5b57\u8282\u6570\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u662f\u200b[4, 8, 32, 32]\u3002</p> </li> </ul> <p>\u200b\u5982\u679c\u200b\u4e0d\u200b\u8003\u8651\u200b\u91cf\u5316\u200b\uff0c\u200b\u8ba1\u7b97\u200b\u65b9\u5f0f\u200b\u5982\u4e0b\u200b:</p> C++<pre><code>nb[0] = sizeof(float);\nnb[1] = nb[0] * ne[0];\nnb[2] = nb[1] * ne[1];\nnb[3] = nb[2] * ne[2];\n</code></pre> <p>\u200b\u901a\u8fc7\u200b\u4e0a\u9762\u200b\u7684\u200b\u5185\u5bb9\u200b\u6211\u4eec\u200b\u4ee5\u53ca\u200b\u4e86\u89e3\u200b\u4e86\u200bggml_new_tensor_2d\u200b\u7684\u200b\u5de5\u4f5c\u200b\u539f\u7406\u200b\u3002\u200b\u5728\u200bsimple-ctx\u200b\u4f8b\u5b50\u200b\u4e2d\u200b\uff0c\u200b\u4f1a\u200b\u8c03\u7528\u200b\u4e24\u6b21\u200b\u4ee5\u200b\u5206\u914d\u200b\u4e24\u4e2a\u200btensor\u200b\u5f20\u91cf\u200b\uff0c\u200b\u4e00\u6b21\u200b\u4e3a\u200bx\uff0c\u200b\u4e00\u6b21\u200b\u4e3a\u200by\uff0c\u200b\u5206\u914d\u200b\u540e\u200b\u7684\u200b\u5185\u5b58\u200b\u5e03\u5c40\u200b\u5982\u4e0b\u200b\u56fe\u200b\u6240\u793a\u200b\uff1a</p> <p></p> <p>\u200b\u7136\u540e\u200b\u901a\u8fc7\u200bmemcpy\u200b\u5c06\u200b\u6570\u636e\u200b\u590d\u5236\u5230\u200bggml_tensor\u200b\u7684\u200bdata\u200b\u5b57\u6bb5\u200b\u4e2d\u200b\u3002</p> <p></p> <p>\u200b\u8fd9\u91cc\u200b\u7684\u200b\u5f20\u91cf\u200b\u6570\u636e\u200b\u76f4\u63a5\u200b\u786c\u200b\u7f16\u7801\u200b\u5b9a\u4e49\u200b\u5230\u200b\u4e86\u200b\u6e90\u4ee3\u7801\u200b\u4e2d\u200b\uff0c\u200b\u56e0\u6b64\u200b\u4e0d\u200b\u9700\u8981\u200b\u52a0\u8f7d\u200bGGU\u200b\u6587\u4ef6\u200b\uff0c\u200b\u518d\u200b\u66f4\u200b\u590d\u6742\u200b\u7684\u200b\u4f8b\u5b50\u200b\u4e2d\u200b\u4f1a\u200b\u901a\u8fc7\u200bGGU\u200b\u6587\u4ef6\u200b\u52a0\u8f7d\u200b\u6570\u636e\u200b\u3002</p>"},{"location":"blog/%E6%8E%A2%E7%B4%A2ggml%E7%9A%84%E5%AE%9E%E7%8E%B0/#\u8981\u70b9","title":"\u8981\u70b9","text":"<ul> <li> <p>ggml \u200b\u901a\u8fc7\u200bggml_context\u200b\u6765\u200b\u5904\u7406\u200b\u5185\u5b58\u200b\u5206\u914d\u200b</p> </li> <li> <p>ggml_context\u200b\u4e2d\u200b\u901a\u8fc7\u200b\u94fe\u8868\u200b\u6765\u200b\u7ba1\u7406\u200b\u5185\u5b58\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u8282\u70b9\u200b\u90fd\u200b\u662f\u200bggml_object\u200b\u7ed3\u6784\u200b\u4f53\u200b\uff0c\u200b\u9690\u5f0f\u200b\u7ba1\u7406\u200btensor\u200b\u5f20\u91cf\u200b\u3001\u200b\u8ba1\u7b97\u200b\u56fe\u200b\u3001work buffer\u200b\u7b49\u200b\u8d44\u6e90\u200b\u3002</p> </li> <li> <p>ggml_tensor\u200b\u7684\u200b\u7ef4\u5ea6\u200b\u8868\u793a\u200b\u548c\u200bpytorch\u200b\u662f\u200b\u76f8\u53cd\u200b\u7684\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u9700\u8981\u200b\u6ce8\u610f\u200b\u3002</p> </li> </ul>"},{"location":"blog/%E6%8E%A2%E7%B4%A2ggml%E7%9A%84%E5%AE%9E%E7%8E%B0/#\u63a2\u7d22ggml\u7684\u5b9e\u73b0ggml\u8ba1\u7b97\u56fe\u6784\u5efa","title":"\u63a2\u7d22\u200bggml\u200b\u7684\u200b\u5b9e\u73b0\u200b\u2013GGML\u200b\u8ba1\u7b97\u200b\u56fe\u200b\u6784\u5efa","text":"<p>\u200b\u672c\u200b\u5c0f\u8282\u200b\u4ecb\u7ecd\u200bGGML\u200b\u5982\u4f55\u200b\u6784\u5efa\u200b\u548c\u200b\u7ba1\u7406\u200b\u8ba1\u7b97\u200b\u56fe\u200b\u76f8\u5173\u200b\u7684\u200b\u6570\u636e\u7ed3\u6784\u200b\u3002</p>"},{"location":"blog/%E6%8E%A2%E7%B4%A2ggml%E7%9A%84%E5%AE%9E%E7%8E%B0/#\u5728ggml_context\u4e2d\u521b\u5efa\u8ba1\u7b97\u56fe","title":"\u5728\u200bggml_context\u200b\u4e2d\u200b\u521b\u5efa\u200b\u8ba1\u7b97\u200b\u56fe","text":"<p>\u200b\u4e0a\u200b\u4e00\u8282\u200b\uff0c\u200b\u5b8c\u6210\u200b\u4e86\u200bggml_context\u200b\u7684\u200b\u521b\u5efa\u200b\uff0c\u200b\u5e76\u4e14\u200b\u5b8c\u6210\u200b\u4e86\u200b\u77e9\u9635\u200b\u8ba1\u7b97\u6240\u200b\u9700\u200b\u7684\u200bggml_tensor\u200b\u5f20\u91cf\u200b\u7684\u200b\u521b\u5efa\u200b\u3002(load_model\u200b\u51fd\u6570\u200b\u4e2d\u200b\u5b9e\u73b0\u200b\u7684\u200b\u529f\u80fd\u200b)</p> C++<pre><code>simple_model model;\nload_model(model, matrix_A, matrix_B, rows_A, cols_A, rows_B, cols_B);\n\n// perform computation in cpu\nstruct ggml_tensor * result = compute(model);\n</code></pre> <p>\u200b\u63a5\u4e0b\u6765\u200b\u91cd\u70b9\u200b\u7814\u7a76\u200b\u7684\u200b\u5c31\u662f\u200bcompute\u200b\u51fd\u6570\u200b\uff0c\u200b\u5206\u4e3a\u200b\u6784\u5efa\u200b\u8ba1\u7b97\u200b\u56fe\u200b\u3001\u200b\u6267\u884c\u200b\u56fe\u200b\u8ba1\u7b97\u200b\u3001\u200b\u83b7\u53d6\u200b\u7ed3\u679c\u200b\uff08\u200b\u83b7\u53d6\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u8ba1\u7b97\u200b\u8282\u70b9\u200b\u7684\u200b\u8f93\u51fa\u200b\u7ed3\u679c\u200b\uff09\u200b\u4e09\u4e2a\u200b\u6b65\u9aa4\u200b\u3002</p> C++<pre><code>// compute with backend\nstruct ggml_tensor * compute(const simple_model &amp; model) {\n    struct ggml_cgraph * gf = build_graph(model);\n\n    int n_threads = 1; // number of threads to perform some operations with multi-threading\n\n    ggml_graph_compute_with_ctx(model.ctx, gf, n_threads);\n\n    // in this case, the output tensor is the last one in the graph\n    return ggml_graph_node(gf, -1);\n}\n</code></pre> <p>\u200b\u5728\u200bbuild_graph\u200b\u51fd\u6570\u200b\u4e2d\u200b\uff0c\u200b\u9996\u5148\u200b\u4f1a\u200b\u8c03\u7528\u200bggml_new_graph\uff0c\u200b\u8fd9\u4e2a\u200b\u51fd\u6570\u200b\u53ef\u4ee5\u200b\u548c\u200b\u524d\u200b\u4e00\u8282\u200b\u4e2d\u200bggml_new_tensor\u200b\u51fd\u6570\u200b\u4e00\u6837\u200b\u7684\u200b\u65b9\u5f0f\u200b\u7406\u89e3\u200b\u3002\u200b\u5b83\u200b\u4e5f\u200b\u662f\u200b\u521b\u5efa\u200b\u4e86\u200bggml_object\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u4f46\u662f\u200b\u4e0d\u540c\u200b\u7684\u200b\u662f\u200b\uff0c\u200b\u8fd9\u4e2a\u200bobject\u200b\u7ba1\u7406\u200b\u7684\u200b\u662f\u200b\u8ba1\u7b97\u200b\u56fe\u200b\uff08ggml_cgraph\u200b\u7ed3\u6784\u200b\u4f53\u200b\u5bf9\u8c61\u200b\uff09\uff0c\u200b\u800c\u200b\u4e0d\u662f\u200btensor\u200b\u5f20\u91cf\u200b\u3002</p> <p></p> <ul> <li> <p>\u200b\u901a\u8fc7\u200bggml_graph_nbytes\u200b\u51fd\u6570\u200b\u83b7\u53d6\u200b\u8ba1\u7b97\u200b\u56fe\u200b\u9700\u8981\u200b\u5360\u7528\u200b\u7684\u200b\u5185\u5b58\u5927\u5c0f\u200b</p> </li> <li> <p>ggml_new_object\u200b\u6839\u636e\u200b\u8ba1\u7b97\u200b\u56fe\u200b\u5927\u5c0f\u200b\u5728\u200bggml_context\u200b\u5185\u5b58\u200b\u533a\u57df\u200b\u4e2d\u200b\u5206\u914d\u200b\u4e00\u5757\u200b\u5185\u5b58\u200b\uff0c\u200b\u521b\u5efa\u200bggml_object\u200b\u5bf9\u8c61\u200b</p> </li> <li> <p>\u200b\u901a\u8fc7\u200boffs\u200b\u504f\u79fb\u200b\u83b7\u53d6\u200bggml_object\u200b\u4e2d\u200b\u7ba1\u7406\u200b\u7684\u200bggml_cgraph\u200b\u7ed3\u6784\u200b\u4f53\u200b\u5bf9\u8c61\u200b\u6307\u9488\u200b\uff0c\u200b\u5b8c\u6210\u200b\u8ba1\u7b97\u200b\u56fe\u200b\u7684\u200b\u6784\u5efa\u200b</p> </li> </ul> <p>\u200b\u73b0\u5728\u200b\u6211\u4eec\u200b\u518d\u200b\u5bf9\u200b\u7ec6\u8282\u200b\u8fdb\u884c\u200b\u5c55\u5f00\u200b\u4ecb\u7ecd\u200b\uff1a</p>"},{"location":"blog/%E6%8E%A2%E7%B4%A2ggml%E7%9A%84%E5%AE%9E%E7%8E%B0/#ggml_gral_nbytes\u8ba1\u7b97\u7ec6\u8282","title":"ggml_gral_nbytes\u200b\u8ba1\u7b97\u200b\u7ec6\u8282","text":"<p>GGML_DEFAULT_GRAPH_SIZE\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5b8f\u200b\u5b9a\u4e49\u200b\uff0c\u200b\u9ed8\u8ba4\u503c\u200b\u4e3a\u200b2048\u3002\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u5355\u4e2a\u200bggml_cgraph\u200b\u4e2d\u200b\u53ef\u200b\u5206\u914d\u200b\u7684\u200b\u6700\u5927\u200b\u8282\u70b9\u200b\u6811\u200b\u548c\u200bleaf\uff08\u200b\u53f6\u200b\u8282\u70b9\u200b\uff09\u200b\u5f20\u91cf\u200b\u6570\u200b\u3002\u200b\u7136\u540e\u200b\u4f7f\u7528\u200bggml_hash_size\u200b\u51fd\u6570\u200b\u8ba1\u7b97\u200bhash\u200b\u8868\u200b\u9700\u8981\u200b\u7684\u200b\u5185\u5b58\u5927\u5c0f\u200b\uff0c\u200b\u4e58\u4ee5\u200b2\u200b\u662f\u200b\u9700\u8981\u200b\u7ba1\u7406\u200bnodes\u200b\u548c\u200bleafs\u200b\u4e24\u79cd\u200b\u7c7b\u578b\u200b\u3002</p> C++<pre><code>// \u200b\u8c03\u7528\u200bggml_new_graph_custom\u200b\u4f20\u9012\u200b\u7684\u200b\u53c2\u6570\u200b\nggml_new_graph_custom(ctx, GGML_DEFAULT_GRAPH_SIZE, false);\n\n#define GGML_DEFAULT_GRAPH_SIZE 2048\n\nstatic size_t ggml_graph_nbytes(size_t size, bool grads) {\n    size_t hash_size = ggml_hash_size(size * 2);\n    void * p = 0;\n    incr_ptr_aligned(&amp;p, sizeof(struct ggml_cgraph), 1);\n    incr_ptr_aligned(&amp;p, size * sizeof(struct ggml_tensor *), sizeof(struct ggml_tensor *)); // nodes\n    incr_ptr_aligned(&amp;p, size * sizeof(struct ggml_tensor *), sizeof(struct ggml_tensor *)); // leafs\n    incr_ptr_aligned(&amp;p, hash_size * sizeof(int32_t), sizeof(int32_t)); // use_counts\n    incr_ptr_aligned(&amp;p, hash_size * sizeof(struct ggml_tensor *), sizeof(struct ggml_tensor *)); // hash keys\n    if (grads) {\n        incr_ptr_aligned(&amp;p, hash_size * sizeof(struct ggml_tensor *), sizeof(struct ggml_tensor *)); // grads\n        incr_ptr_aligned(&amp;p, hash_size * sizeof(struct ggml_tensor *), sizeof(struct ggml_tensor *)); // grad_accs\n    }\n    // \u200b\u8ba1\u7b97\u200bhash_size\u200b\u9700\u8981\u200b\u591a\u5c11\u200b\u4e2a\u200bggml_bitset_t\u200b\u8868\u793a\u200b\u72b6\u6001\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u591a\u4e2a\u200bggml_bitset_t\u200b\u6784\u6210\u200b\u4e86\u200bbit\u200b\u4f4d\u200b\u56fe\u200b\n    incr_ptr_aligned(&amp;p, ggml_bitset_size(hash_size) * sizeof(ggml_bitset_t), sizeof(ggml_bitset_t));\n\n    size_t nbytes = (size_t) p;\n    return nbytes;\n}\n</code></pre> <p>ggml_hash_size\u200b\u4ece\u200b\u5176\u200b\u5b9e\u73b0\u200b\u6765\u770b\u200b\uff0c\u200b\u901a\u8fc7\u200b\u4e8c\u5206\u200b\u67e5\u627e\u200b\u627e\u5230\u200b\u5927\u4e8e\u200b\u6216\u200b\u7b49\u4e8e\u200b2 * GGML_DEFAULT_GRAPH_SIZE\u200b\u7684\u200b\u6700\u5c0f\u200b\u8d28\u6570\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u8d28\u6570\u200b\u51b3\u5b9a\u200b\u4e86\u200b\u8ba1\u7b97\u200b\u56fe\u200b\u54c8\u5e0c\u200b\u8868\u200b\u7684\u200b\u5927\u5c0f\u200b\u3002\u200b\u9009\u62e9\u200b\u8d28\u6570\u200b\u4e3b\u8981\u200b\u662f\u200b\u51fa\u4e8e\u200b\u6027\u80fd\u200b\u8003\u8651\u200b\uff1aGGML\u200b\u91c7\u7528\u200b\u4e86\u200b\u4e00\u79cd\u200b\u7b80\u5355\u200b\u7684\u200b\u5f00\u653e\u200b\u5730\u5740\u200b\u54c8\u5e0c\u200b\u51fd\u6570\u200b\uff0c\u200b\u5e76\u200b\u4f7f\u7528\u200b\u7ebf\u6027\u200b\u63a2\u6d4b\u200b\u6cd5\u200b\u3002</p> C++<pre><code>// the last 4 bits are always zero due to alignment\nKey = (ggml_tensor_pointer_value &gt;&gt; 4) % table_size\n</code></pre> <p>\u200b\u4f7f\u7528\u200b\u8d28\u6570\u200b\u8868\u200b\u5927\u5c0f\u200b\u6709\u52a9\u4e8e\u200b\u66f4\u200b\u5747\u5300\u200b\u5730\u200b\u5206\u5e03\u200b\u952e\u200b\uff0c\u200b\u51cf\u5c11\u200b\u805a\u96c6\u200b\u3001\u200b\u63d0\u9ad8\u200b\u67e5\u627e\u200b\u6548\u7387\u200b\u3002</p> <p>ggml_graph\u200b\u7684\u200b\u5185\u5b58\u200b\u5e03\u5c40\u200b\uff1a</p> <ul> <li> <p>ggml_cgraph\u200b\u7ed3\u6784\u200b\u4f53\u200b\u5bf9\u8c61\u200b\u5360\u7528\u200b\u7a7a\u95f4\u200b\uff1asizeof(struct ggml_cgraph)</p> </li> <li> <p>2048\u200b\u4e2a\u200btensor\u200b\u5f20\u91cf\u200b\u6307\u9488\u200b\uff0c\u200b\u6307\u5411\u200bnodes</p> </li> <li> <p>2048\u200b\u4e2a\u200btensor\u200b\u5f20\u91cf\u200b\u6307\u9488\u200b\uff0c\u200b\u6307\u5411\u200bleafs</p> </li> <li> <p>hash_size\u200b\u4e2a\u200bint32_t\uff0c\u200b\u7528\u4e8e\u200b\u8bb0\u5f55\u200b\u5f20\u91cf\u200b\u7684\u200b\u4f7f\u7528\u200b\u6b21\u6570\u200b</p> </li> <li> <p>hash_size\u200b\u4e2a\u200btensor\u200b\u5f20\u91cf\u200b\u6307\u9488\u200b\uff0c\u200b\u7528\u4e8e\u200b\u5b58\u50a8\u200b\u5f20\u91cf\u200b\u7684\u200b\u54c8\u5e0c\u200b\u952e\u200b</p> </li> <li> <p>\u200b\u68af\u5ea6\u200b\u76f8\u5173\u200b\uff0csimple_ctx\u200b\u4f8b\u5b50\u200b\u4e0d\u200b\u6d89\u53ca\u200b</p> </li> <li> <p>\u200b\u54c8\u5e0c\u200b\u8868\u200bbit\u200b\u4f4d\u200b\u56fe\u200b\uff0c\u200b\u7528\u4e8e\u200b\u8bb0\u5f55\u200b\u5f20\u91cf\u200b\u7684\u200b\u4f7f\u7528\u200b\u60c5\u51b5\u200b</p> </li> </ul> <p>\u200b\u5173\u4e8e\u200bbit\u200b\u4f4d\u200b\u56fe\u200b\uff0c</p> C++<pre><code>typedef uint32_t ggml_bitset_t;\n\nstatic_assert(sizeof(ggml_bitset_t) == 4, \"bitset_t constants must be updated\");\n#define BITSET_SHR 5 // log2(sizeof(ggml_bitset_t)*8)\n#define BITSET_MASK (sizeof(ggml_bitset_t)*8 - 1)\n\n\n// &gt;&gt; BITSET_SHR\u200b\u76f8\u5f53\u4e8e\u200b\u9664\u4ee5\u200b32\uff0c\u200b\u8868\u793a\u200b\u6570\u5b57\u200bn\u200b\u7684\u200bbit\u200b\u8bb0\u5f55\u200b\u4f4d\u4e8e\u200b\u7b2c\u51e0\u4e2a\u200bggml_bitset_t\u200b\u4e2d\u200b\n// \u200b\u4e00\u4e2a\u200bggml_bitset_t\u200b\u53ef\u4ee5\u200b\u8868\u793a\u200b32\u200b\u4e2a\u6570\u200b\u7684\u200b\u72b6\u6001\u200b\uff0c\u200b\u5728\u200b\u672c\u6587\u200b\u4e0a\u4e0b\u6587\u200b\u4e2d\u5373\u200b\u8868\u793a\u200b\u4e00\u4e2a\u200bhash\u200b\u4f4d\u7f6e\u200b\nstatic size_t ggml_bitset_size(size_t n) {\n    return (n + BITSET_MASK) &gt;&gt; BITSET_SHR;\n}\n</code></pre> <p>\u200b\u6839\u636e\u200bggml_graph_nbytes\u200b\u51fd\u6570\u200b\u8ba1\u7b97\u51fa\u6765\u200b\u7684\u200b\u5185\u5b58\u5927\u5c0f\u200b\uff0c\u200b\u5728\u200bctx\u200b\u4e2d\u200b\u5206\u914d\u5185\u5b58\u200b\uff0c\u200b\u5206\u914d\u200b\u540e\u200b\u7684\u200b\u5185\u5b58\u200b\u5e03\u5c40\u200b\u5982\u4e0b\u200b\uff1a</p> <p></p> <p>\u200b\u5305\u62ec\u200b\u8ba1\u7b97\u200b\u56fe\u200b\u5bf9\u8c61\u200b\u3001\u200b\u8282\u70b9\u200b\u6307\u9488\u200b\u3001\u200b\u53f6\u5b50\u200b\u6307\u9488\u200b\u3001\u200b\u4f7f\u7528\u200b\u6b21\u6570\u200b\u3001\u200b\u54c8\u5e0c\u200b\u952e\u200b\u3001\u200b\u68af\u5ea6\u200b\u3001\u200b\u54c8\u5e0c\u200b\u8868\u200bbit\u200b\u4f4d\u200b\u56fe\u200b\u3002\u200b\u63a5\u4e0b\u6765\u200b\u7684\u200b\u51e0\u884c\u200b\u4ee3\u7801\u200b\u521d\u59cb\u5316\u200b\u6307\u5411\u200b\u5df2\u200b\u5206\u914d\u5185\u5b58\u200b\u4e2d\u200b\u4e0d\u540c\u200b\u533a\u57df\u200b\u7684\u200b\u6307\u9488\u200b\uff0c\u200b\u5e76\u200b\u5c06\u200b\u5b83\u4eec\u200b\u5b58\u50a8\u200b\u5728\u200bggml_cgraph\u200b\u7ed3\u6784\u200b\u4f53\u4e2d\u200b\u3002\u200b\u6700\u540e\u200b\uff0c\u200b\u54c8\u5e0c\u200b\u8868\u200b\u88ab\u200b\u91cd\u7f6e\u200b\uff0c\u200b\u6240\u6709\u200b\u69fd\u200b\u4f4d\u200b\u90fd\u200b\u88ab\u200b\u6807\u8bb0\u200b\u4e3a\u200b\u672a\u200b\u5360\u7528\u200b\u3002</p> <p></p>"},{"location":"blog/%E6%8E%A2%E7%B4%A2ggml%E7%9A%84%E5%AE%9E%E7%8E%B0/#\u6784\u5efa\u77e9\u9635\u4e58\u8ba1\u7b97\u56fe","title":"\u6784\u5efa\u200b\u77e9\u9635\u200b\u4e58\u200b\u8ba1\u7b97\u200b\u56fe","text":"<p>\u200b\u524d\u9762\u200b\u7684\u200b\u5185\u5bb9\u200b\u4ecb\u7ecd\u200b\u4e86\u200b\u5728\u200bggml_context\u200b\u4e2d\u200b\u5206\u914d\u200b\u4e00\u4e2a\u200b\u8ba1\u7b97\u200b\u56fe\u200b\u5185\u5b58\u200b\uff0c\u200b\u5e76\u4e14\u200b\u521d\u59cb\u5316\u200b\u4e86\u200b\u76f8\u5173\u200b\u6210\u5458\u200b\u9ed8\u8ba4\u503c\u200b\u3002</p> C++<pre><code>struct ggml_cgraph  * gf = ggml_new_graph(model.ctx);\n\n// \u200b\u7528\u200bgf\u200b\u8868\u793a\u200b\u77e9\u9635\u200b\u4e58\u200b\u4efb\u52a1\u200b\n// result = a*b^T\nstruct ggml_tensor * result = ggml_mul_mat(model.ctx, model.a, model.b);\nggml_build_forward_expand(gf, result);\n</code></pre> <p>\u200b\u73b0\u5728\u200b\u8fd9\u4e2a\u200b\u8ba1\u7b97\u200b\u56fe\u200bgf\u200b\u652f\u6301\u200b\u6dfb\u52a0\u200b2048\u200b\u4e2a\u200b\u5f20\u91cf\u200b\u8282\u70b9\u200b\u548c\u200b\u53f6\u200b\u8282\u70b9\u200b\uff0c\u200b\u4f46\u662f\u200b\u8fd8\u200b\u6ca1\u6709\u200b\u5c06\u200b\u77e9\u9635\u200b\u4e58\u200b\u8fd9\u4e2a\u200b\u8ba1\u7b97\u200b\u7684\u200b\u8282\u70b9\u200b\u52a0\u5165\u200b\u8ba1\u7b97\u200b\u56fe\u200b\u3002\u200b\u63a5\u4e0b\u6765\u200b\u7684\u200b\u5185\u5bb9\u200b\u5c31\u662f\u200b\u4ecb\u7ecd\u200b\u5982\u4f55\u200b\u5c06\u200b\u77e9\u9635\u200b\u4e58\u200b\u4efb\u52a1\u200b\u4fe1\u606f\u200b\u7528\u200b\u8ba1\u7b97\u200b\u56fe\u200b\u8fdb\u884c\u200b\u8868\u793a\u200b\u3002</p> <p>\u200b\u5728\u200bggml_mul_mat\u200b\u51fd\u6570\u200b\u4e2d\u200b\uff0c\u200b\u9996\u5148\u200b\u68c0\u67e5\u200b\u8f93\u5165\u200b\u5f20\u91cf\u200b\u7684\u200b\u5408\u6cd5\u6027\u200b\uff0c\u200b\u7136\u540e\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u7ed3\u679c\u200b\u5f20\u91cf\u200b\uff0c\u200b\u5e76\u200b\u8bbe\u7f6e\u200b\u5f20\u91cf\u200b\u7684\u200b\u8fd0\u7b97\u200b\u7c7b\u578b\u200b\u4e3a\u200b\u77e9\u9635\u200b\u4e58\u200b\u3002 </p>C++<pre><code>struct ggml_tensor * ggml_mul_mat(\n        struct ggml_context * ctx,\n        struct ggml_tensor  * a,\n        struct ggml_tensor  * b) {\n    GGML_ASSERT(ggml_can_mul_mat(a, b));\n    GGML_ASSERT(!ggml_is_transposed(a));\n\n    // \u200b\u8ba1\u7b97\u7ed3\u679c\u200b\u7684\u200bshape\n    const int64_t ne[4] = { a-&gt;ne[1], b-&gt;ne[1], b-&gt;ne[2], b-&gt;ne[3] };\n    struct ggml_tensor * result = ggml_new_tensor(ctx, GGML_TYPE_F32, 4, ne);\n\n    // \u200b\u5c06\u200b\u52a0\u5165\u200bgraph nodes\u200b\u4e2d\u200b\u7684\u200b\u4e00\u4e2a\u200bnode\uff0c\u200b\u7c7b\u578b\u200b\u4f4d\u200b\u77e9\u9635\u200b\u4e58\u200b\n    result-&gt;op     = GGML_OP_MUL_MAT;\n    result-&gt;src[0] = a;\n    result-&gt;src[1] = b;\n\n    return result;\n}\n</code></pre><p></p> <p>\u200b\u73b0\u5728\u200b\uff0c\u200b\u5230\u200b\u4e86\u200b\u6211\u4eec\u200b\u6784\u5efa\u200b\u8ba1\u7b97\u200b\u56fe\u200b\u7684\u200b\u6700\u540e\u200b\u9636\u6bb5\u200b\u4e86\u200b\uff0c\u200b\u79d8\u5bc6\u200b\u5c31\u200b\u85cf\u200b\u5728\u200bggml_build_forward_expand\u200b\u51fd\u6570\u200b\u4e2d\u200b\u3002</p> <p>\u200b\u51fd\u6570\u200b\u7684\u200b\u8f93\u5165\u200b\u53c2\u6570\u200b\u662f\u200b\u6211\u4eec\u200b\u521b\u5efa\u200b\u7684\u200b\u201c\u200b\u7a7a\u56fe\u200b\u201d\u200b\u548c\u200b\u77e9\u9635\u200b\u4e58\u200b\u4efb\u52a1\u200b\u6240\u200b\u8fd4\u56de\u200b\u7684\u200b\u77e9\u9635\u200b\u4e58\u200b\u7ed3\u679c\u200b\u8282\u70b9\u200b\uff08\u200b\u5728\u200b\u590d\u6742\u200b\u7684\u200b\u6848\u4f8b\u200b\u4e2d\u200b\uff0c\u200b\u5c31\u662f\u200b\u6a21\u578b\u200b\u7684\u200b\u8f93\u51fa\u200b\u8282\u70b9\u200b\u6216\u8005\u200bLLM\u200b\u4e2d\u200b\u7684\u200blogits\uff09\u3002</p>"},{"location":"blog/%E6%8E%A2%E7%B4%A2ggml%E7%9A%84%E5%AE%9E%E7%8E%B0/#ggml_build_forward_expand-\u51fd\u6570\u7ec6\u8282\u63a2\u7d22","title":"ggml_build_forward_expand \u200b\u51fd\u6570\u200b\u7ec6\u8282\u200b\u63a2\u7d22","text":"<p>\u200b\u8be5\u200b\u51fd\u6570\u8c03\u7528\u200b\u5230\u200b\u4e86\u200bggml_build_forward_impl\u200b\u51fd\u6570\u200b\uff0c\u200b\u6838\u5fc3\u200b\u5b9e\u73b0\u200b\u5728\u200bggml_visit_parents\u200b\u4e2d\u200b\u3002</p> C++<pre><code>static void ggml_build_forward_impl(struct ggml_cgraph * cgraph, struct ggml_tensor * tensor, bool expand) {\n    const int n0 = cgraph-&gt;n_nodes;\n\n    ggml_visit_parents(cgraph, tensor);\n\n    const int n_new = cgraph-&gt;n_nodes - n0;\n    GGML_PRINT_DEBUG(\"%s: visited %d new nodes\\n\", __func__, n_new);\n\n    if (n_new &gt; 0) {\n        // the last added node should always be starting point\n        GGML_ASSERT(cgraph-&gt;nodes[cgraph-&gt;n_nodes - 1] == tensor);\n    }\n}\n</code></pre> <p>ggml_visit_parents\u200b\u51fd\u6570\u200b\u901a\u8fc7\u200b\u9012\u5f52\u200b\u7684\u200b\u65b9\u5f0f\u200b\u6784\u5efa\u200b\u4e86\u200b\u8ba1\u7b97\u200b\u56fe\u200b\u3002</p> <p></p> <p></p> <p>\u200b\u6838\u5fc3\u200b\u903b\u8f91\u200b\uff1a</p> <ul> <li> <p>\u200b\u68c0\u67e5\u200b\u5f53\u524d\u200b\u5f20\u91cf\u200b\u662f\u5426\u200b\u5df2\u200b\u5b58\u5728\u200b\u4e8e\u200b\u54c8\u5e0c\u200b\u8868\u4e2d\u200b\u3002\u200b\u5982\u679c\u200b\u5b58\u5728\u200b\uff0c\u200b\u5219\u200b\u505c\u6b62\u200b\u6267\u884c\u200b\u5e76\u200b\u8fd4\u56de\u200b\u3002</p> </li> <li> <p>\u200b\u5bf9\u200b\u6240\u6709\u200bsrc\u200b\u5f20\u91cf\u200b\u9012\u5f52\u200b\u8c03\u7528\u200bggml_visit_parents\u200b\u51fd\u6570\u200b\u3002</p> </li> <li> <p>\u200b\u5982\u679c\u200b\u5b83\u200b\u662f\u200b\u4e00\u4e2a\u200b\u53f6\u200b\u8282\u70b9\u200b\uff08\u200b\u5373\u200b\u5e38\u91cf\u200b\u5f20\u91cf\u200b\u6216\u200b\u4e0d\u7531\u200b\u8fd0\u7b97\u200b\u751f\u6210\u200b\u7684\u200b\u8f93\u5165\u200b\u5f20\u91cf\u200b\uff09\uff0c\u200b\u5219\u200b\u5c06\u200b\u5176\u200b\u5b58\u50a8\u200b\u5728\u200b\u56fe\u200b\u7684\u200b\u53f6\u200b\u6570\u7ec4\u200b\uff08leafs\u200b\u6570\u7ec4\u200b\uff09\u200b\u4e2d\u200b\u3002</p> </li> <li> <p>\u200b\u5426\u5219\u200b\uff0c\u200b\u5c06\u200b\u5176\u200b\u5b58\u50a8\u200b\u5728\u200b\u56fe\u200b\u7684\u200b\u8282\u70b9\u200b\u6570\u7ec4\u200b\uff08nodes\u200b\u6570\u7ec4\u200b\uff09\u200b\u4e2d\u200b\u3002</p> </li> </ul> <p>\u200b\u6240\u6709\u200b\u9012\u5f52\u200b\u8c03\u7528\u200b\u8fd4\u56de\u200b\u540e\u200b\uff0c\u200b\u6700\u540e\u200b\u4e00\u6b21\u200b\u68c0\u67e5\u200b\u4f1a\u200b\u786e\u4fdd\u200b\u6700\u540e\u200b\u8bb0\u5f55\u200b\u7684\u200b\u8282\u70b9\u200b\u662f\u200b\u7ed3\u679c\u200b\u5f20\u91cf\u200b\u3002\u200b\u56e0\u4e3a\u200b\u4f7f\u7528\u200b\u4e86\u200b\u540e\u5e8f\u200b\u904d\u5386\u200b\uff0c\u200b\u8fd9\u200b\u610f\u5473\u7740\u200b\u8f93\u5165\u200b\u8282\u70b9\u200b\uff08\u200b\u5f20\u91cf\u200b\uff09\u200b\u662f\u200b\u6700\u540e\u200b\u63d2\u5165\u200b\u7684\u200b\u3002</p> <p>\u200b\u91c7\u7528\u200bdebug\u200b\u6253\u5370\u200bgf\u200b\u8ba1\u7b97\u200b\u56fe\u200b\u4fe1\u606f\u200b\uff0c1\u200b\u4e2a\u200bnode\u200b\u8282\u70b9\u200b\u5c31\u662f\u200bmat mul op\u200b\u8282\u70b9\u200b\uff0c\u200b\u4e24\u4e2a\u200bleaf\u200b\u8282\u70b9\u200b\u5c31\u662f\u200b\u4e24\u4e2a\u200b\u8f93\u5165\u200b\u5f20\u91cf\u200ba\u3001b\u200b\u77e9\u9635\u200b\u3002 </p>C++<pre><code>&gt; p *gf\n(ggml_cgraph) {\n  size = 2048\n  n_nodes = 1\n  n_leafs = 2\n  nodes = 0x000055555556ddd8\n  grads = nullptr\n  grad_accs = nullptr\n  leafs = 0x0000555555571dd8\n  use_counts = 0x0000555555575dd8\n  visited_hash_set = {\n    size = 4099\n    used = 0x0000555555581e00\n    keys = 0x0000555555579de8\n  }\n  order = GGML_CGRAPH_EVAL_ORDER_LEFT_TO_RIGHT\n}\n</code></pre><p></p> <p>\u200b\u5230\u200b\u76ee\u524d\u4e3a\u6b62\u200b\uff0c\u200b\u6211\u4eec\u200b\u5df2\u7ecf\u200b\u6784\u5efa\u200b\u597d\u200b\u4e86\u200ba\u3001b\u200b\u77e9\u9635\u200b\u4e58\u200b\u8fd9\u4e2a\u200b\u4efb\u52a1\u200b\u7684\u200b\u8ba1\u7b97\u200b\u56fe\u200b\uff0c\u200b\u63a5\u4e0b\u6765\u200b\u5c31\u662f\u200b\u770b\u200bGGML\u200b\u5982\u4f55\u200b\u6267\u884c\u200b\u8fd9\u4e2a\u200b\u8ba1\u7b97\u200b\u56fe\u200b\u5e76\u200b\u83b7\u53d6\u200b\u8ba1\u7b97\u7ed3\u679c\u200b\u4e86\u200b\u3002</p>"},{"location":"blog/%E6%8E%A2%E7%B4%A2ggml%E7%9A%84%E5%AE%9E%E7%8E%B0/#\u63a2\u7d22ggml\u7684\u5b9e\u73b0\u6267\u884cggml\u8ba1\u7b97\u56fe","title":"\u63a2\u7d22\u200bggml\u200b\u7684\u200b\u5b9e\u73b0\u200b\u2013\u200b\u6267\u884c\u200bGGML\u200b\u8ba1\u7b97\u200b\u56fe","text":"<p>\u200b\u8fd9\u8282\u200b\u4e3b\u8981\u200b\u4ecb\u7ecd\u200b\u5982\u4f55\u200b\u8ba1\u7b97\u200bGGML\u200b\u8ba1\u7b97\u200b\u56fe\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u7684\u200b\u6838\u5fc3\u200b\u903b\u8f91\u200b\u5728\u200bggml_graph_compute_with_ctx\u200b\u51fd\u6570\u200b\u4e2d\u200b\u3002</p> C++<pre><code>int n_threads = 1; // number of threads to perform some operations with multi-threading\n\nggml_graph_compute_with_ctx(model.ctx, gf, n_threads);\n\n// in this case, the output tensor is the last one in the graph\nreturn ggml_graph_node(gf, -1);\n</code></pre> <p>\u200b\u5728\u200b\u8be5\u200b\u51fd\u6570\u200b\u4e2d\u200b\uff0c\u200b\u9996\u5148\u200b\u521b\u5efa\u200b\u4e86\u200b\u4e2a\u200b\u4e00\u4e2a\u200b\u8ba1\u7b97\u200b\u8ba1\u5212\u200b\uff0c\u200b\u5e76\u4e14\u200b\u6839\u636e\u200bcplan\u200b\u7684\u200bwork_size\u200b\u5206\u914d\u200b\u4e86\u200b\u5b8c\u6210\u200b\u8fd9\u4e2a\u200bplan\u200b\u6240\u200b\u9700\u200b\u7684\u200bbuffer\uff0c\u200b\u7136\u540e\u200b\u8c03\u7528\u200bggml_graph_compute\u200b\u51fd\u6570\u200b\u6267\u884c\u200b\u8ba1\u7b97\u200b\u8ba1\u5212\u200b\u3002</p> C++<pre><code>enum ggml_status ggml_graph_compute_with_ctx(struct ggml_context * ctx, struct ggml_cgraph * cgraph, int n_threads) {\n    struct ggml_cplan cplan = ggml_graph_plan(cgraph, n_threads, NULL);\n\n    cplan.work_data = (uint8_t *)ggml_new_buffer(ctx, cplan.work_size);\n\n    return ggml_graph_compute(cgraph, &amp;cplan);\n}\n</code></pre> <p>ggml_cplan\u200b\u7ed3\u6784\u200b\u4f53\u200b\u7684\u200b\u6838\u5fc3\u200b\u76ee\u7684\u200b\u662f\u200b\uff1a\u200b\u786e\u5b9a\u200b\u8ba1\u7b97\u200b\u7684\u200b\u5173\u952e\u200b\u6267\u884c\u200b\u53c2\u6570\u200b\u3002</p> <ul> <li> <p>n_threads\uff1a\u200b\u7528\u4e8e\u200b\u56fe\u200b\u8ba1\u7b97\u200b\u7684\u200b\u7ebf\u7a0b\u200b\u6570\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u8bbe\u7f6e\u200b\u4e3a\u4e86\u200b1\u3002</p> </li> <li> <p>work_size\uff1a\u200b\u8ba1\u7b97\u200b\u8ba1\u5212\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u4e34\u65f6\u200b\u5185\u5b58\u5927\u5c0f\u200b\uff08\u200b\u5b57\u8282\u200b\u4e3a\u200b\u5355\u4f4d\u200b\uff09\u3002\u200b\u5728\u200bsimple-ctx\u200b\u8fd9\u4e2a\u200b\u793a\u4f8b\u200b\u4e2d\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u503c\u200b\u88ab\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b0\uff0c\u200b\u4e0d\u540c\u200b\u7684\u200b\u540e\u200b\u7aef\u200b\u548c\u200bop\u200b\u9700\u8981\u200b\u7684\u200bwork_size\u200b\u6709\u200b\u4e0d\u540c\u200b\u3002</p> </li> </ul>"},{"location":"blog/%E6%8E%A2%E7%B4%A2ggml%E7%9A%84%E5%AE%9E%E7%8E%B0/#\u63a2\u7d22ggml_graph_plan\u7ec6\u8282","title":"\u63a2\u7d22\u200bggml_graph_plan\u200b\u7ec6\u8282","text":""},{"location":"blog/%E6%8E%A2%E7%B4%A2ggml%E7%9A%84%E5%AE%9E%E7%8E%B0/#\u5982\u4f55\u786e\u5b9a\u7ebf\u7a0b\u6570\u91cf","title":"\u5982\u4f55\u200b\u786e\u5b9a\u200b\u7ebf\u7a0b\u200b\u6570\u91cf","text":"<p>ggml_graph_plan\u200b\u51fd\u6570\u200b\u5b9e\u73b0\u200b\u7684\u200b\u4e3b\u8981\u200b\u529f\u80fd\u200b\u5c31\u662f\u200b\u786e\u5b9a\u200b\u8ba1\u7b97\u200b\u8ba1\u5212\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u7ebf\u7a0b\u200b\u6570\u200b\u548c\u200b\u4e34\u65f6\u200b\u5185\u5b58\u5927\u5c0f\u200b\u3002</p> <p>\u200b\u786e\u5b9a\u200b\u7ebf\u7a0b\u200b\u6570\u200b\u7684\u200b\u903b\u8f91\u200b\uff1a</p> <ul> <li> <p>\u200b\u9996\u5148\u200b\uff0c\u200b\u4f20\u9012\u200b\u7684\u200b\u53c2\u6570\u200bn_threads\u200b\u51b3\u5b9a\u200b\u4e86\u200bcplan\u200b\u7684\u200b\u7ebf\u7a0b\u200b\u6570\u200b\u4e0a\u9650\u200b\u3002</p> </li> <li> <p>\u200b\u901a\u8fc7\u200b\u8fed\u4ee3\u200b\u6240\u6709\u200b\u7684\u200bop node\uff0c\u200b\u6839\u636e\u200bop\u200b\u7c7b\u578b\u200b\u7684\u200b\u7ebf\u7a0b\u200b\u9650\u5236\u200b\u548c\u200bn_threads\u200b\u53c2\u6570\u200b\uff0c\u200b\u786e\u200bmax_threads\u3002\uff08\u200b\u901a\u8fc7\u200bop\u200b\u7684\u200bswich case\u200b\u5b9e\u73b0\u200b\uff09</p> </li> <li> <p>\u200b\u6700\u7ec8\u200b\u7ebf\u7a0b\u200b\u8ba1\u7b97\u200b\u5982\u4e0b\u200b\uff1a</p> </li> </ul> C++<pre><code>final_n_threads = MIN(n_threads, MAX(each node's maximum multithreading count))\n</code></pre>"},{"location":"blog/%E6%8E%A2%E7%B4%A2ggml%E7%9A%84%E5%AE%9E%E7%8E%B0/#\u786e\u5b9a\u5de5\u4f5c\u7f13\u5b58\u533a\u5927\u5c0f","title":"\u786e\u5b9a\u200b\u5de5\u4f5c\u200b\u7f13\u5b58\u200b\u533a\u200b\u5927\u5c0f","text":"<ul> <li> <p>\u200b\u904d\u5386\u200b\u6240\u6709\u200b\u7684\u200bop node\uff0c\u200b\u6839\u636e\u200b\u6bcf\u4e2a\u200bop type\u200b\u4ee5\u53ca\u200b\u8ba1\u7b97\u200b\u7684\u200b\u6570\u636e\u7c7b\u578b\u200b\uff08\u200b\u6bd4\u5982\u200b\u8ba1\u7b97\u200b\u7684\u200b\u77e9\u9635\u200b\u4e58\u200b\u4e24\u4e2a\u200b\u53c2\u6570\u200b\u6570\u636e\u200b\u7c7b\u200b\u4e0d\u540c\u200b\uff0c\u200b\u9700\u8981\u200b\u989d\u5916\u200b\u7684\u200b\u7f13\u5b58\u200b\u533a\u200b\uff09\uff0c\u200b\u786e\u5b9a\u200b\u9700\u8981\u200b\u7684\u200b\u4e34\u65f6\u200b\u5185\u5b58\u5927\u5c0f\u200b\u3002</p> </li> <li> <p>\u200b\u6700\u7ec8\u200b\u5de5\u4f5c\u200b\u7f13\u5b58\u200b\u533a\u200b\u5927\u5c0f\u200b\u8ba1\u7b97\u200b\u5982\u4e0b\u200b\uff1a </p>C++<pre><code>final_work_buffer_size = MAX(each node's required work buffer size)\n</code></pre><p></p> </li> </ul> <p>\u200b\u5728\u200bsimple-ctx\u200b\u8fd9\u4e2a\u200b\u4f8b\u5b50\u200b\u4e2d\u200b\uff0cthreads_count = 1\uff0c work_buffer_size = 0\u3002\u200b\u5728\u200b\u63a5\u4e0b\u6765\u200b\u7684\u200b\u51fd\u6570\u200bggml_new_buffer\u200b\u4e2d\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u5206\u914d\u200b\u7684\u200bwork_buffer_size\u200b\u5927\u5c0f\u200b\u7684\u200b\u7f13\u5b58\u200b\u533a\u200b\uff0c\u200b\u4e5f\u200b\u662f\u200b\u5728\u200bcontext\u200b\u7684\u200b\u5185\u5b58\u200bbuffer\u200b\u4e2d\u200b\u5206\u914d\u200b\u7684\u200b\u3002</p> C++<pre><code>&gt; p cplan\n(ggml_cplan) {\n  work_size = 0\n  work_data = 0x00005555555821d0 \"\"\n  n_threads = 1\n  threadpool = NULL\n  abort_callback = 0x0000000000000000\n  abort_callback_data = 0x0000000000000000\n}\n</code></pre>"},{"location":"blog/%E6%8E%A2%E7%B4%A2ggml%E7%9A%84%E5%AE%9E%E7%8E%B0/#\u8ba1\u7b97\u56fe\u7684\u6267\u884c\u8ba1\u7b97","title":"\u8ba1\u7b97\u200b\u56fe\u200b\u7684\u200b\u6267\u884c\u200b\u8ba1\u7b97","text":"<p>\u200b\u5230\u200b\u76ee\u524d\u4e3a\u6b62\u200b\uff0c\u200b\u4e3a\u4e86\u200b\u6267\u884c\u200b\u8ba1\u7b97\u200b\u56fe\u200b\uff0c\u200b\u5df2\u7ecf\u200b\u51c6\u5907\u200b\u597d\u200b\u4e86\u200b\u5f20\u91cf\u200b\u6570\u636e\u200b\u3001\u200b\u8ba1\u7b97\u200b\u56fe\u200b\u3001\u200b\u8ba1\u7b97\u200b\u8ba1\u5212\u200b\uff08plan\uff09\uff0c\u200b\u6267\u884c\u200b\u7684\u200b\u5173\u952e\u200b\u903b\u8f91\u200b\u6765\u5230\u200b\u4e86\u200bggml_graph_compute\u200b\u51fd\u6570\u200b\uff0c\u200b\u5c06\u200b\u8ba1\u7b97\u200b\u56fe\u200bcgraph\u200b\u548c\u200bcplan\u200b\u4f5c\u4e3a\u200b\u53c2\u6570\u200b\u4f20\u5165\u200b\u3002</p> C++<pre><code>ggml_graph_compute(cgraph, &amp;cplan);\n</code></pre> <p></p> <p>\u200b\u5728\u200bggml_graph_compute\u200b\u51fd\u6570\u200b\u4e2d\u200b, \u200b\u5b9e\u73b0\u200b\u4e86\u200b\u5982\u4e0b\u200b\u6838\u5fc3\u200b\u529f\u80fd\u200b\uff1a</p> <ul> <li>\u200b\u5728\u200bggml_cpu_init\u200b\u51fd\u6570\u200b\u4e2d\u200b\uff0c\u200b\u521b\u5efa\u200b\u4e86\u200b\u4e00\u4e9b\u200b\u5feb\u901f\u200b\u8ba1\u7b97\u200b\u7684\u200b\u67e5\u627e\u200b\u8868\u200b\u3002\u200b\u6bd4\u5982\u200bf32\u200b\u5230\u200bf16\u200b\u7684\u200b\u8f6c\u6362\u200b\u8868\u200b\u3001gelu\u200b\u8ba1\u7b97\u200b\u7684\u200b\u67e5\u627e\u200b\u8868\u200b\u3002</li> </ul> C++<pre><code>ggml_table_f32_f16[i] = f;\nggml_table_gelu_f16[i] = GGML_CPU_FP32_TO_FP16(ggml_gelu_f32(f));\nggml_table_gelu_quick_f16[i] = GGML_CPU_FP32_TO_FP16(ggml_gelu_quick_f32(f));\n</code></pre> <ul> <li>\u200b\u521b\u5efa\u200b\u4e86\u200b\u7ebf\u7a0b\u200b\u6c60\u200b\uff0c\u200b\u5c06\u200b\u8ba1\u7b97\u200b\u56fe\u200b\u548c\u200b\u8ba1\u7b97\u200b\u4efb\u52a1\u200bdispath\u200b\u7ed9\u200b\u7ebf\u7a0b\u200b\u6c60\u200b\u6267\u884c\u200b\u3002\u200b\u5728\u200blinux\u200b\u4e0b\u200b\uff0cggml\u200b\u91c7\u7528\u200bpthread\u200b\u5b9e\u73b0\u200b\u7ebf\u7a0b\u200b\u76f8\u5173\u200b\u64cd\u4f5c\u200b\u3002\uff08\u200b\u5173\u4e8e\u200bGGML_USE_OPENMP\u200b\u7684\u200b\u903b\u8f91\u200b\u53ef\u4ee5\u200b\u5148\u200b\u8df3\u200b\u8fc7\u200b\uff09</li> </ul>"},{"location":"blog/%E6%8E%A2%E7%B4%A2ggml%E7%9A%84%E5%AE%9E%E7%8E%B0/#ggml\u7ebf\u7a0b\u6c60\u5b9e\u73b0","title":"GGML\u200b\u7ebf\u7a0b\u200b\u6c60\u200b\u5b9e\u73b0","text":"<p>GGML \u200b\u5b9e\u73b0\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u7ebf\u7a0b\u200b\u6c60\u200b\uff0c\u200b\u8be5\u200b\u7ebf\u7a0b\u200b\u6c60\u200b\u7ecf\u8fc7\u200b\u4f18\u5316\u200b\uff0c\u200b\u53ef\u200b\u9ad8\u6548\u200b\u8fd0\u884c\u200b\u8ba1\u7b97\u200b\u56fe\u200b\uff0c\u200b\u5e76\u200b\u9488\u5bf9\u200b NUMA \u200b\u67b6\u6784\u200b\u8fdb\u884c\u200b\u4e86\u200b\u4f18\u5316\u200b\u3002</p> <p>ggml\u200b\u9996\u5148\u200b\u4f7f\u7528\u200b\u9ed8\u8ba4\u200b\u53c2\u6570\u200b\u521d\u59cb\u5316\u200b\u4e00\u4e2a\u200bggml_thread_pool\u200b\u7ed3\u6784\u200b\u4f53\u200b\uff0c\u200b\u7136\u540e\u200b\u4e3a\u200b\u6bcf\u4e2a\u200b\u5de5\u4f5c\u200b\u7ebf\u7a0b\u200b\u5206\u914d\u200b\u4e00\u4e2a\u200b\u72b6\u6001\u200b\u7ed3\u6784\u200b\u4f53\u200b\uff08ggml_compute_state\uff09\uff0c\u200b\u8d1f\u8d23\u200b\u7ebf\u7a0b\u200b\u6c60\u4e2d\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u7ebf\u7a0b\u200b\u7684\u200b\u72b6\u6001\u200b\u8bb0\u5f55\u200b\uff1a </p>C++<pre><code>// Per-thread state\nstruct ggml_compute_state {\n#ifndef GGML_USE_OPENMP\n    // linux\u200b\u4e0b\u200b\u5b9e\u9645\u200b\u4e3a\u200bpthread\n    ggml_thread_t thrd;\n    // \u200b\u7528\u4e8e\u200b\u8bbe\u7f6e\u200bcpu\u200b\u4eb2\u548c\u6027\u200b\uff08NUMA\u200b\u76f8\u5173\u200b\u4f18\u5316\u200b\uff09\n    bool cpumask[GGML_MAX_N_THREADS];\n    int  last_graph;\n    bool pending;\n#endif\n    // \u200b\u6307\u5411\u200b\u7ebf\u7a0b\u200b\u6c60\u200b\u7684\u200b\u6307\u9488\u200b\n    struct ggml_threadpool * threadpool;\n    // \u200b\u7ebf\u7a0b\u200b\u7f16\u53f7\u200b\n    int ith;\n};\n</code></pre><p></p> <p>\u200b\u5982\u679c\u200b\u542f\u7528\u200b\u4e86\u200b OpenMP\uff0c\u200b\u7ebf\u7a0b\u200b\u7ba1\u7406\u200b\u4f1a\u200b\u81ea\u52a8\u200b\u5904\u7406\u200b\uff1b\u200b\u5426\u5219\u200b\uff0cGGML \u200b\u4f1a\u200b\u624b\u52a8\u200b\u521b\u5efa\u200b\u548c\u200b\u7ba1\u7406\u200b pthread\uff0c\u200b\u5373\u200b\u624b\u52a8\u200b\u8bbe\u7f6e\u200bcpu\u200b\u4eb2\u548c\u6027\u200b\u7b49\u200b\u64cd\u4f5c\u200b\u3002</p> <p></p>"},{"location":"blog/%E6%8E%A2%E7%B4%A2ggml%E7%9A%84%E5%AE%9E%E7%8E%B0/#cpu\u4eb2\u548c\u6027\u8bbe\u7f6e","title":"cpu\u200b\u4eb2\u548c\u6027\u200b\u8bbe\u7f6e","text":"<p>\u200b\u7531\u4e8e\u200b\u5728\u200bnuma\u200b\u67b6\u6784\u200b\u4e0b\u200b\uff0c\u200b\u672c\u5730\u200b/\u200b\u8fdc\u7a0b\u200b\u5185\u5b58\u200b\u8bbf\u95ee\u901f\u5ea6\u200b\u5dee\u5f02\u200b\u5927\u200b\uff0c\u200b\u901a\u8fc7\u200bNUMA\u200b\u611f\u77e5\u200b\u8c03\u5ea6\u200b\uff08\u200b\u5982\u200b\u7ebf\u7a0b\u200b\u7ed1\u5b9a\u200b\u3001\u200b\u5185\u5b58\u200b\u5206\u914d\u200b\u4f18\u5316\u200b\uff09\u200b\u53ef\u200b\u63d0\u5347\u200b\u6027\u80fd\u200b\u200c\u3002\u200b\u901a\u8fc7\u200b\u8bbe\u7f6e\u200bcpu\u200b\u4eb2\u548c\u6027\u200b\uff0c\u200b\u7ed1\u5b9a\u200b\u7ebf\u7a0b\u200b\u5230\u200b\u672c\u5730\u200bNUMA\u200b\u8282\u70b9\u200b\uff0c\u200b\u51cf\u5c11\u200b\u8fdc\u7a0b\u200b\u8bbf\u95ee\u200b\u200c\u3002</p> <p>\u200b\u5728\u200bggml\u200b\u7684\u200b\u5b9e\u73b0\u200b\u4e2d\u200b\uff0c\u200b\u901a\u8fc7\u200b\u51fd\u6570\u200bggml_thread_cpumask_next()\u200b\u4e3a\u200b\u6bcf\u4e2a\u200bworker\u200b\u7ebf\u7a0b\u200b\u5206\u914d\u200bcpu\u200b\u4eb2\u548c\u6027\u200b\u3002</p> C++<pre><code>static void ggml_thread_cpumask_next(const bool * global_mask, bool * local_mask, bool strict, int32_t* iter) {\n    if (!strict) {\n        memcpy(local_mask, global_mask, GGML_MAX_N_THREADS);\n        return;\n    } else {\n        memset(local_mask, 0, GGML_MAX_N_THREADS);\n        int32_t base_idx = *iter;\n        for (int32_t i = 0; i &lt; GGML_MAX_N_THREADS; i++) {\n            int32_t idx = base_idx + i;\n            if (idx &gt;= GGML_MAX_N_THREADS) {\n                // Just a cheaper modulo\n                idx -= GGML_MAX_N_THREADS;\n            }\n            if (global_mask[idx]) {\n                local_mask[idx] = 1;\n                *iter = idx + 1;\n                return;\n            }\n        }\n    }\n}\n</code></pre> <p>\u200b\u5728\u200b\u8be5\u200b\u51fd\u6570\u200b\u4e2d\u200b\u901a\u8fc7\u200bstrict\u200b\u53c2\u6570\u200b\u63a7\u5236\u7ebf\u200b\u7a0b\u200b\u7684\u200b\u4eb2\u548c\u6027\u200b\u8bbe\u7f6e\u200b\u3002</p> <ul> <li> <p>\u200b\u5982\u679c\u200bstrict\u200b\u4e3a\u200bfalse\uff0c\u200b\u5219\u200b\u5c06\u200b\u5168\u5c40\u200bmask\u200b\u590d\u5236\u200b\u7ed9\u200b\u7ebf\u7a0b\u200b\u7684\u200bmask\u3002\u200b\u5728\u200b\u6ca1\u6709\u200bNUMA\u200b\u7684\u200b\u67b6\u6784\u200b\u4e2d\u200b\uff0c\u200b\u8fd9\u4f1a\u200b\u5bfc\u81f4\u200b\u6240\u6709\u200b\u7ebf\u7a0b\u200b\u90fd\u200b\u88ab\u200b\u5141\u8bb8\u200b\u5728\u200b\u4efb\u4f55\u200b\u6838\u5fc3\u200b\u4e0a\u200b\u8fd0\u884c\u200b\u3002</p> </li> <li> <p>\u200b\u5982\u679c\u200bstrict\u200b\u4e3a\u200btrue\uff0c\u200b\u5219\u200b\u901a\u8fc7\u200b\u5faa\u73af\u200b\u904d\u5386\u200b\u5168\u5c40\u200bmask\uff0c\u200b\u627e\u5230\u200b\u7b2c\u4e00\u4e2a\u200b\u53ef\u7528\u200b\u7684\u200bCPU\u200b\u6838\u5fc3\u200b\uff0c\u200b\u5e76\u200b\u5c06\u200b\u5176\u200b\u5206\u914d\u200b\u7ed9\u200b\u7ebf\u7a0b\u200b\u3002</p> </li> </ul> <p>\u200b\u8fd9\u79cd\u200b\u903b\u8f91\u200b\u786e\u4fdd\u200b\u7ebf\u7a0b\u200b\u5728\u200b\u53ef\u7528\u200b\u7684\u200bCPU\u200b\u6838\u5fc3\u200b\u4e4b\u95f4\u200b\u5747\u5300\u5206\u5e03\u200b\uff0c\u200b\u4ece\u800c\u200b\u51cf\u5c11\u200b\u7ade\u4e89\u200b\u3002</p>"},{"location":"blog/%E6%8E%A2%E7%B4%A2ggml%E7%9A%84%E5%AE%9E%E7%8E%B0/#\u8ba1\u7b97\u56fe\u5de5\u4f5c\u7ebf\u7a0b\u521b\u5efa\u53ca\u8c03\u5ea6","title":"\u8ba1\u7b97\u200b\u56fe\u200b\u5de5\u4f5c\u200b\u7ebf\u7a0b\u200b\u521b\u5efa\u200b\u53ca\u200b\u8c03\u5ea6","text":"<p>\u200b\u4e0a\u9762\u200b\u7684\u200b\u903b\u8f91\u200b\u5b8c\u6210\u200b\u4e86\u200b\u7ebf\u7a0b\u200b\u6c60\u200b\u7684\u200b\u521b\u5efa\u200b\u3001\u200b\u4eb2\u548c\u6027\u200b\u7684\u200b\u8bbe\u7f6e\u200b\uff0c\u200b\u63a5\u4e0b\u6765\u200b\u5c31\u662f\u200b\u521b\u5efa\u200b\u5177\u4f53\u200b\u7684\u200b\u5de5\u4f5c\u200b\u7ebf\u7a0b\u200b\u4e86\u200b\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200b\u7ebf\u7a0b\u200b\u8dd1\u200b\u8d77\u6765\u200b\u8981\u200b\u6267\u884c\u200b\u600e\u6837\u200b\u7684\u200b\u8fd0\u7b97\u200b\u903b\u8f91\u200b\u3002</p> <p>\u200b\u6ce8\u610f\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u521b\u5efa\u200b\u5de5\u4f5c\u200b\u7ebf\u7a0b\u200b\u662f\u4ece\u200bthread 1\u200b\u5f00\u59cb\u200b\u7684\u200b\uff0c\u200b\u56e0\u4e3a\u200bthread 0\u200b\u7684\u200b\u89e6\u53d1\u200b\u4e0d\u200b\u5728\u200b\u8fd9\u91cc\u200b\u3002 </p>C++<pre><code>for (int j = 1; j &lt; tpp-&gt;n_threads; j++) {\n    int32_t rc = ggml_thread_create(&amp;workers[j].thrd, NULL, ggml_graph_compute_secondary_thread, &amp;workers[j]);\n}\n</code></pre><p></p> <p>\u200b\u63a5\u4e0b\u6765\u200b\uff0c\u200b\u8bf7\u200b\u770b\u200bggml_graph_compute_secondary_thread\u200b\u51fd\u6570\u200b\u3002</p> <p></p>C++<pre><code>static thread_ret_t ggml_graph_compute_secondary_thread(void* data) {\n    struct ggml_compute_state * state = (struct ggml_compute_state *) data;\n    struct ggml_threadpool * threadpool = state-&gt;threadpool;\n\n    // \u200b\u8bbe\u7f6e\u200b\u7ebf\u7a0b\u200b\u4f18\u5148\u7ea7\u200b\n    ggml_thread_apply_priority(threadpool-&gt;prio);\n    if (ggml_thread_cpumask_is_valid(state-&gt;cpumask)) {\n        // \u200b\u8bbe\u7f6e\u200b\u7ebf\u7a0b\u200b affinity\n        ggml_thread_apply_affinity(state-&gt;cpumask);\n    }\n\n    while (true) {\n        // Check if we need to sleep\n        while (threadpool-&gt;pause) {\n            GGML_PRINT_DEBUG(\"thread #%d inside pause loop\\n\", state-&gt;ith);\n            ggml_mutex_lock_shared(&amp;threadpool-&gt;mutex);\n            if (threadpool-&gt;pause) {\n                ggml_cond_wait(&amp;threadpool-&gt;cond, &amp;threadpool-&gt;mutex);\n            }\n            GGML_PRINT_DEBUG(\"thread #%d resuming after wait\\n\", state-&gt;ith);\n            ggml_mutex_unlock_shared(&amp;threadpool-&gt;mutex);\n        }\n\n        // This needs to be checked for after the cond_wait\n        if (threadpool-&gt;stop) break;\n\n        // Check if there is new work\n        // The main thread is the only one that can dispatch new work\n\n        ggml_graph_compute_check_for_work(state);\n        if (state-&gt;pending) {\n            state-&gt;pending = false;\n\n            ggml_graph_compute_thread(state);\n        }\n    }\n\n    return (thread_ret_t) 0;\n}\n</code></pre> \u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u5de5\u4f5c\u200b\u7ebf\u7a0b\u200b\u4e0d\u662f\u200b\u4e0a\u6765\u200b\u5c31\u200b\u5f00\u59cb\u200b\u6267\u884c\u200b\uff0c\u200b\u800c\u662f\u200b\u901a\u8fc7\u200bthreadpool-&gt;pause\u200b\u8fdb\u884c\u200b\u4e86\u200b\u6682\u505c\u200b\u7b49\u5f85\u200b\u3002<p></p> <p>\u200b\u8ba9\u200b\u6211\u4eec\u200b\u56de\u5934\u200b\u770b\u770b\u200b\u4e3b\u7ebf\u200b\u7a0b\u4e2d\u200b\u7684\u200bggml_graph_compute\u200b\u903b\u8f91\u200b\uff0c\u200b\u5b83\u200b\u9996\u5148\u200b\u521b\u5efa\u200b\u7ebf\u7a0b\u200b\u6c60\u200b\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200b\u4e0a\u9762\u200b\u7684\u200b\u90e8\u5206\u200b\u3002\u200b\u521b\u5efa\u200b\u597d\u200b\u4ece\u200b1\u200b\u5f00\u59cb\u200b\u7684\u200b\u5de5\u4f5c\u200b\u7ebf\u7a0b\u200b\u540e\u200b\uff0c\u200b\u7136\u540e\u200b\u8c03\u7528\u200b\u4e86\u200bggml_graph_compute_kickoff\uff0c\u200b\u5c31\u662f\u200b\u5b83\u200b\u628a\u200b\u7ebf\u7a0b\u200b\u6c60\u200b\u7684\u200bpause\u200b\u8bbe\u7f6e\u200b\u4e3a\u200bfalse\u3002</p> <p>\u200b\u7136\u540e\u200b\u7ebf\u7a0b\u200b0\u200b\u5728\u200b\u8fd9\u4e2a\u200b\u542f\u52a8\u200b\u5176\u5b83\u200b\u7ebf\u7a0b\u200b\u7684\u200b\u7ebf\u7a0b\u200b\u5f00\u59cb\u200b\u6267\u884c\u200bggml_graph_compute_thread\u200b\u8ba1\u7b97\u200b\u4efb\u52a1\u200b\u3002 </p>C++<pre><code>enum ggml_status ggml_graph_compute(struct ggml_cgraph * cgraph, struct ggml_cplan * cplan) {\n    // Kick all threads to start the new graph\n    ggml_graph_compute_kickoff(threadpool, n_threads);\n\n    // This is a work thread too\n    ggml_graph_compute_thread(&amp;threadpool-&gt;workers[0]);\n}\n</code></pre><p></p>"},{"location":"blog/%E6%8E%A2%E7%B4%A2ggml%E7%9A%84%E5%AE%9E%E7%8E%B0/#\u591a\u7ebf\u7a0b\u5982\u4f55\u6267\u884c\u77e9\u9635\u4e58\u5f20\u91cf\u8ba1\u7b97","title":"\u591a\u7ebf\u7a0b\u200b\u5982\u4f55\u200b\u6267\u884c\u200b\u77e9\u9635\u200b\u4e58\u200b\u5f20\u91cf\u200b\u8ba1\u7b97","text":"<p>GGML\u200b\u7684\u200b\u6240\u6709\u200b\u7ebf\u7a0b\u200b\u6bcf\u6b21\u200b\u53ea\u200b\u5904\u7406\u200b\u4e00\u4e2a\u200b\u8282\u70b9\u200b\u3002\u200b\u8ba9\u200b\u6211\u4eec\u200b\u770b\u770b\u200bggml_compute_forward\uff0c\u200b\u5176\u4e2d\u200b\u4f1a\u200b\u6839\u636e\u200b\u8282\u70b9\u200b\u7684\u200b\u8fd0\u7b97\u7b26\u200b\u7c7b\u578b\u200b\u9009\u62e9\u200b\u5b9e\u9645\u200b\u7684\u200b\u8ba1\u7b97\u200b\u51fd\u6570\u200b\u3002\u200b\u8fd9\u662f\u200b\u901a\u8fc7\u200b\u4e00\u4e2a\u200b\u5e9e\u5927\u200b\u7684\u200bswitch-case\u200b\u8bed\u53e5\u200b\u5757\u200b\u6765\u200b\u5904\u7406\u200b\u7684\u200b\u3002</p> <p></p>C++<pre><code>static thread_ret_t ggml_graph_compute_thread(void * data) {\n    struct ggml_compute_state * state = (struct ggml_compute_state *) data;\n    struct ggml_threadpool    * tp    = state-&gt;threadpool;\n\n    const struct ggml_cgraph * cgraph = tp-&gt;cgraph;\n    const struct ggml_cplan  * cplan  = tp-&gt;cplan;\n\n    set_numa_thread_affinity(state-&gt;ith);\n\n    struct ggml_compute_params params = {\n        /*.ith       =*/ state-&gt;ith,\n        /*.nth       =*/ atomic_load_explicit(&amp;tp-&gt;n_threads_cur, memory_order_relaxed),\n        /*.wsize     =*/ cplan-&gt;work_size,\n        /*.wdata     =*/ cplan-&gt;work_data,\n        /*.threadpool=*/ tp,\n    };\n\n    for (int node_n = 0; node_n &lt; cgraph-&gt;n_nodes &amp;&amp; atomic_load_explicit(&amp;tp-&gt;abort, memory_order_relaxed) != node_n; node_n++) {\n        struct ggml_tensor * node = cgraph-&gt;nodes[node_n];\n\n        ggml_compute_forward(&amp;params, node);\n\n        if (state-&gt;ith == 0 &amp;&amp; cplan-&gt;abort_callback &amp;&amp;\n                cplan-&gt;abort_callback(cplan-&gt;abort_callback_data)) {\n            atomic_store_explicit(&amp;tp-&gt;abort, node_n + 1, memory_order_relaxed);\n            tp-&gt;ec    = GGML_STATUS_ABORTED;\n        }\n\n        if (node_n + 1 &lt; cgraph-&gt;n_nodes) {\n            ggml_barrier(state-&gt;threadpool);\n        }\n    }\n\n    ggml_barrier(state-&gt;threadpool);\n\n    return 0;\n}\n</code></pre> ggml_compute_forward\u200b\u8c03\u7528\u200b\u7684\u200b\u662f\u200bggml_compute_forward_mul_mat\u200b\u7684\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u5b8c\u6210\u200b\u77e9\u9635\u200b\u4e58\u6cd5\u200b\u3002<p></p> C++<pre><code>case GGML_OP_MUL_MAT:\n    {\n        ggml_compute_forward_mul_mat(params, tensor);\n    } break;\n</code></pre> <p>\u200b\u67e5\u770b\u200bggml_compute_forward_mul_mat\u200b\u7684\u200b\u5b9e\u73b0\u200b\u53ef\u77e5\u200b\uff0c\u200b\u77e9\u9635\u200b\u7684\u200b\u8ba1\u7b97\u200b\u4e0d\u662f\u200b\u4e00\u4e2a\u200b\u7ebf\u7a0b\u200b\u5b8c\u6210\u200b\u6574\u4e2a\u200b\u77e9\u9635\u200b\u7684\u200b\u8ba1\u7b97\u200b\uff0c\u200b\u800c\u662f\u200b\u4f20\u9012\u200b\u4e86\u200bthread_id\u200b\u53c2\u6570\u200b\uff0c\u200b\u6839\u636e\u200bthread_id\u200b\u6765\u200b\u62c6\u5206\u200b\u77e9\u9635\u200b\u5757\u200b\uff0c\u200b\u5206\u5757\u200b\u8ba1\u7b97\u200b\u3002</p> <p>\u200b\u8fd9\u91cc\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200bGGML\u200b\u7684\u200b\u8ba1\u7b97\u200b\u56fe\u200b\u6267\u884c\u200b\u8c03\u5ea6\u200b\u548c\u200b\u4e00\u822c\u200b\u56fe\u200b\u8ba1\u7b97\u200b\u7684\u200b\u533a\u522b\u200b\uff0c\u200b\u4e00\u822c\u200b\u573a\u666f\u200b\u7684\u200b\u6709\u200b\u5411\u200b\u65e0\u200b\u73af\u56fe\u200b\uff0c\u200b\u591a\u4e2a\u200b\u7ebf\u7a0b\u200b\u5e76\u884c\u6267\u884c\u200b\u591a\u4e2a\u200b\u53ef\u4ee5\u200b\u5e76\u884c\u200b\u7684\u200bnode\uff0c\u200b\u8fd9\u91cc\u200bGGML\u200b\u662f\u200b\u4e00\u6b21\u200b\u53ea\u200b\u6267\u884c\u200b\u4e00\u4e2a\u200bnode\uff0cnode\u200b\u4e2d\u200b\u591a\u4e2a\u200b\u7ebf\u7a0b\u200b\u5206\u5757\u200b\u8ba1\u7b97\u200b\u3002\u200b\u7136\u540e\u200b\u8fdb\u5165\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u8282\u70b9\u200b\u8ba1\u7b97\u200b\u3002</p> <p>\u200b\u4e00\u65e6\u200b\u4e00\u4e2a\u200b\u8282\u70b9\u200bnode\u200b\u7684\u200b\u8ba1\u7b97\u200b\u5b8c\u6210\u200b\uff0c\u200b\u6240\u6709\u200b\u7ebf\u7a0b\u200b\u90fd\u200b\u4f1a\u200b\u5728\u200b\u5c4f\u969c\u200bggml_barrier\u200b\u5904\u200b\u540c\u6b65\u200b\uff0c\u200b\u786e\u4fdd\u200b\u5b83\u4eec\u200b\u5728\u200b\u8fdb\u5165\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u8282\u70b9\u200b\u4e4b\u524d\u200b\u5b8c\u6210\u200b\u5f53\u524d\u200b\u8282\u70b9\u200b\u7684\u200b\u8ba1\u7b97\u200b\u3002\u200b\u8fd9\u4e2a\u200b\u8fc7\u7a0b\u200b\u4f1a\u200b\u91cd\u590d\u200b\u8fdb\u884c\u200b\uff0c\u200b\u76f4\u5230\u200b\u56fe\u4e2d\u200b\u7684\u200b\u6240\u6709\u200b\u8282\u70b9\u200b\u90fd\u200b\u88ab\u200b\u8bc4\u4f30\u200b\u5b8c\u6bd5\u200b\u3002</p> <p>\u200b\u4e0a\u9762\u200b\u66f4\u200b\u591a\u200b\u7684\u200b\u8c08\u5230\u200b\u7684\u200b\u662f\u200b\u4e0d\u200b\u4f7f\u7528\u200bOpenMP\uff0c\u200b\u624b\u52a8\u200b\u7ba1\u7406\u200b\u7ebf\u7a0b\u200b\u7684\u200b\u51e1\u662f\u200b\u3002\u200b\u5982\u679c\u200b\u542f\u7528\u200bOpenMP\u200b\u540e\u200b\uff0c\u200b\u5b83\u4f1a\u200b\u81ea\u52a8\u200b\u7ba1\u7406\u200b\u5e76\u884c\u8ba1\u7b97\u200b\uff0c\u200b\u65e0\u9700\u200b\u624b\u52a8\u200b\u521b\u5efa\u200b\u548c\u200b\u540c\u6b65\u200b\u7ebf\u7a0b\u200b\u3002\u200b\u6211\u4eec\u200b\u65e0\u9700\u200b\u81ea\u5df1\u200b\u5904\u7406\u200b\u7ebf\u7a0b\u200b\u6c60\u200b\u3001\u200b\u6761\u4ef6\u200b\u53d8\u91cf\u200b\u548c\u200b\u7ade\u4e89\u200b\u6761\u4ef6\u200b\uff0c\u200b\u53ea\u200b\u9700\u200b\u8bbe\u7f6e\u200b\u7ebf\u7a0b\u200b\u6570\u91cf\u200b\uff0c\u200b\u8ba9\u200b\u6bcf\u4e2a\u200b\u7ebf\u7a0b\u200b\u6267\u884c\u200bggml_graph_compute_thread\u200b\u5373\u53ef\u200b\u3002</p>"},{"location":"blog/%E6%8E%A2%E7%B4%A2ggml%E7%9A%84%E5%AE%9E%E7%8E%B0/#\u83b7\u53d6\u8ba1\u7b97\u7ed3\u679c","title":"\u83b7\u53d6\u200b\u8ba1\u7b97\u7ed3\u679c\u200b\ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350","text":"C++<pre><code>// perform computation in cpu\nstruct ggml_tensor * result = compute(model);\n\n// get the result data pointer as a float array to print\nstd::vector&lt;float&gt; out_data(ggml_nelements(result));\nmemcpy(out_data.data(), result-&gt;data, ggml_nbytes(result));\n\n// expected result:\n// [ 60.00 55.00 50.00 110.00\n//   90.00 54.00 54.00 126.00\n//   42.00 29.00 28.00 64.00 ]\n</code></pre> <p>\u200b\u6700\u540e\u200b\u5c31\u662f\u200b\u83b7\u53d6\u200bresult node\uff0c\u200b\u7136\u540e\u200b\u5c06\u200b\u8ba1\u7b97\u7ed3\u679c\u200b\u62f7\u8d1d\u200b\u51fa\u6765\u200b\u3002\u200b\u5230\u200b\u6b64\u200b\uff0c\u200b\u901a\u8fc7\u200bsimple-ctx\u200b\u7684\u200b\u4f8b\u5b50\u200b\uff0c\u200b\u6211\u4eec\u200b\u4ece\u200b\u6e90\u7801\u200b\u7406\u89e3\u200b\u4e86\u200bGGML\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u5728\u200bggml_context\u200b\u4e2d\u200b\u5206\u914d\u200b\u6240\u6709\u200b\u9700\u8981\u200b\u7684\u200b\u5185\u5b58\u200b\uff0c\u200b\u901a\u8fc7\u200bcpu backend\u200b\u7684\u200b\u65b9\u5f0f\u200b\u6267\u884c\u200b\u8ba1\u7b97\u200b\u56fe\u200b\u3002</p> <ul> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>C++20\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u57fa\u4e8e\u200b\u5c5e\u6027\u200b\u6d4b\u8bd5\u200b\u7684\u200bquickcheck-cpp\u200b\u5e93\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82deepseek-v3_mla%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/","title":"\u4e00\u6587\u200b\u641e\u61c2\u200bDeepSeek-V3_MLA\u200b\u6ce8\u610f\u529b\u200b\u673a\u5236","text":"<p>DeepSeek-V3\uff1a\u200b\u591a\u5934\u200b\u6f5c\u5728\u200b\u6ce8\u610f\u529b\u200b(MLA)</p> <p>MLA\u200b\u662f\u200bDeepSeek-V2 \u200b\u548c\u200b DeepSeek-V3 \u200b\u80cc\u540e\u200b\u7684\u200b\u5173\u952e\u200b\u67b6\u6784\u200b\u521b\u65b0\u200b\uff0c\u200b\u53ef\u200b\u5b9e\u73b0\u200b\u66f4\u5feb\u200b\u7684\u200b\u63a8\u7406\u200b\u3002</p> <p>DeepSeek-V3 \u200b\u7684\u200b\u4e3b\u8981\u200b\u67b6\u6784\u200b\u521b\u65b0\u200b\uff0c\u200b\u5305\u62ec\u200b MLA\uff08\u200b\u591a\u5934\u200b\u6f5c\u5728\u200b\u6ce8\u610f\u529b\u200b\uff09\u3001DeepSeekMoE\u3001\u200b\u8f85\u52a9\u200b\u65e0\u635f\u200b\u8d1f\u8f7d\u200b\u5747\u8861\u200b\uff08auxiliary-loss-free load balancing\uff09\u200b\u548c\u200b\u591a\u200b\u6807\u8bb0\u200b\u9884\u6d4b\u200b\u8bad\u7ec3\u200b\uff08multi-token prediction training\uff09\u3002</p> <p>\u200b\u672c\u6587\u200b\u8bb2\u89e3\u200b\u7684\u200bMLA\u200b\u6280\u672f\u200b\uff0c\u200b\u5728\u200b DeepSeek-V2 \u200b\u7684\u200b\u5f00\u53d1\u200b\u4e2d\u200b\u88ab\u200b\u63d0\u51fa\u200b\uff0c\u200b\u540e\u6765\u200b\u4e5f\u200b\u88ab\u200b\u7528\u4e8e\u200b DeepSeek-V3 \u200b\u4e2d\u200b\u3002</p> <p>\u200b\u8bba\u6587\u200b\u5730\u5740\u200b\uff1a DeepSeek-V2: A Strong, Economical, and Efficient Mixture-of-Experts Language Model</p> <p>\u200b\u4e3a\u4e86\u200b\u641e\u61c2\u200bMLA\uff0c\u200b\u6211\u4eec\u200b\u4ece\u200b\u6807\u51c6\u200b\u7684\u200b MHA \u200b\u5f00\u59cb\u200b\uff0c\u200b\u89e3\u91ca\u200b\u4e3a\u4ec0\u4e48\u200b\u6211\u4eec\u200b\u5728\u200b\u63a8\u7406\u200b\u9636\u6bb5\u200b\u9700\u8981\u200b Key-Value \u200b\u7f13\u5b58\u200b\uff0cMQA \u200b\u548c\u200b GQA \u200b\u5982\u4f55\u200b\u5c1d\u8bd5\u200b\u4f18\u5316\u200b\u5b83\u200b\uff0c\u200b\u4ee5\u53ca\u200b RoPE \u200b\u662f\u200b\u5982\u4f55\u200b\u5de5\u4f5c\u200b\u7684\u200b\uff0c\u200b\u7b49\u7b49\u200b\u3002\u200b\u7136\u540e\u200b\uff0c\u200b\u6df1\u5165\u200b\u4ecb\u7ecd\u200b MLA\uff0c\u200b\u5305\u62ec\u200b\u5176\u200b\u52a8\u673a\u200b\u3001\u200b\u4e3a\u4ec0\u4e48\u200b\u9700\u8981\u200b\u89e3\u200b\u8026\u200b RoPE \u200b\u53ca\u5176\u200b\u6027\u80fd\u200b\u3002</p>"},{"location":"blog/%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82deepseek-v3_mla%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/#deepseek-v3\u4ecb\u7ecd","title":"DeepSeek-V3\u200b\u4ecb\u7ecd","text":"<p>DeepSeek-V3 \u200b\u7684\u200b\u6a21\u578b\u200b\u7ed3\u6784\u200b\u4e0e\u200b DeepSeek-V2 \u200b\u4e00\u81f4\u200b\uff0c\u200b\u91c7\u7528\u200b\u4e86\u200b MLA + DeepSeekMoE\uff0c\u200b\u603b\u200b\u53c2\u6570\u200b 671B\uff0c\u200b\u6fc0\u6d3b\u200b\u53c2\u6570\u200b 37B\u3002\u200b\u603b\u5171\u200b 61 \u200b\u5c42\u200b\uff0cHidden \u200b\u7ef4\u5ea6\u200b\u4e3a\u200b 7168</p> <p></p> <ul> <li>Attention Head \u200b\u4e2a\u6570\u200b n_h\uff1a128</li> <li>\u200b\u6bcf\u4e2a\u200b Head \u200b\u7684\u200b\u7ef4\u5ea6\u200b d_h\uff1a128\uff08\u200b\u975e\u200b MLA \u200b\u65f6\u200b\uff0cn_h * d_h = Hidden \u200b\u7ef4\u5ea6\u200b\uff1b\u200b\u800c\u200b MLA \u200b\u4e2d\u200b\uff0cd_h \u200b\u5927\u4e8e\u200b Hidden \u200b\u7ef4\u5ea6\u200b / n_h\uff0c\u200b\u6bd4\u5982\u200b\u56fe\u4e2d\u200b\u7684\u200b 128 &gt; 7168/128 = 56\uff09</li> <li>KV \u200b\u538b\u7f29\u200b\u7ef4\u5ea6\u200b (c_t^{KV})\uff1a512</li> <li>Q \u200b\u538b\u7f29\u200b\u7ef4\u5ea6\u200b\uff08c_t^Q\uff09\uff1a1536</li> <li>\u200b\u89e3\u200b\u8026\u200b\u7684\u200b Q \u200b\u548c\u200b K\uff08RoPE\uff09\u200b\u7684\u200b\u7ef4\u5ea6\u200b\uff1a64</li> </ul>"},{"location":"blog/%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82deepseek-v3_mla%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/#\u80cc\u666f\u77e5\u8bc6","title":"\u80cc\u666f\u200b\u77e5\u8bc6","text":""},{"location":"blog/%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82deepseek-v3_mla%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/#transformers\u89e3\u7801\u5668\u4e2d\u7684mha","title":"Transformers\u200b\u89e3\u7801\u5668\u200b\u4e2d\u200b\u7684\u200bMHA","text":"<p>MLA \u200b\u7684\u200b\u5f00\u53d1\u200b\u662f\u200b\u4e3a\u4e86\u200b\u52a0\u5feb\u200b\u81ea\u200b\u56de\u5f52\u200b\u6587\u672c\u200b\u751f\u6210\u200b\u7684\u200b\u63a8\u7406\u200b\u901f\u5ea6\u200b\uff0c\u200b\u56e0\u6b64\u200b\u6211\u4eec\u200b\u5728\u200b\u6b64\u200b\u4e0a\u4e0b\u6587\u200b\u4e2d\u200b\u8ba8\u8bba\u200b\u7684\u200b MHA \u200b\u4ec5\u200b\u9002\u7528\u200b\u4e8e\u200b Transformer Decoder\uff08\u200b\u89e3\u7801\u5668\u200b\uff09\u3002</p> <p>\u200b\u4e0b\u56fe\u200b\u6bd4\u8f83\u200b\u4e86\u200b\u7528\u4e8e\u200b\u89e3\u7801\u200b\u7684\u200b\u4e09\u79cd\u200b Transformer \u200b\u67b6\u6784\u200b\uff0c\u200b\u5176\u4e2d\u200b \uff08a\uff09 \u200b\u663e\u793a\u200b\u4e86\u200b\u539f\u59cb\u200b\u8bba\u6587\u200b\u201cAttention is All You Need\u201d\u200b\u4e2d\u200b\u63d0\u51fa\u200b\u7684\u200b\u7f16\u7801\u5668\u200b\u548c\u200b\u89e3\u7801\u5668\u200b\u3002\u200b\u7136\u540e\u200b\u901a\u8fc7\u200b\u7b80\u5316\u200b\u5176\u200b\u89e3\u7801\u5668\u200b\u90e8\u5206\u200b\uff0c\u200b\u4ece\u800c\u200b\u5f97\u5230\u200b \uff08b\uff09 \u200b\u6240\u793a\u200b\u7684\u200b\u4ec5\u200b\u89e3\u7801\u5668\u200b\u7684\u200b Transformer \u200b\u6a21\u578b\u200b\uff0c\u200b\u8be5\u200b\u6a21\u578b\u200b\u540e\u6765\u200b\u88ab\u200b\u7528\u4e8e\u200b\u8bb8\u591a\u200b\u751f\u6210\u200b\u6a21\u578b\u200b\uff0c\u200b\u5982\u200b GPT\u3002</p> <p>\u200b\u5982\u4eca\u200b\uff0cLLM \u200b\u66f4\u200b\u666e\u904d\u200b\u5730\u200b\u9009\u62e9\u200b \uff08c\uff09 \u200b\u4e2d\u200b\u6240\u793a\u200b\u7684\u200b\u7ed3\u6784\u200b\u4ee5\u200b\u83b7\u5f97\u200b\u66f4\u200b\u7a33\u5b9a\u200b\u7684\u200b\u8bad\u7ec3\u200b\uff0c\u200b\u5bf9\u200b\u8f93\u5165\u200b\u800c\u200b\u4e0d\u662f\u200b\u8f93\u51fa\u200b\u8fdb\u884c\u200b\u5f52\u4e00\u5316\u200b\uff0c\u200b\u5e76\u200b\u5c06\u200b LayerNorm \u200b\u5347\u7ea7\u200b\u5230\u200b RMS Norm\u3002\u200b\u8fd9\u200b\u5c06\u200b\u4f5c\u4e3a\u200b\u6211\u4eec\u200b\u5c06\u200b\u5728\u200b\u672c\u6587\u200b\u4e2d\u200b\u8ba8\u8bba\u200b\u7684\u200b\u57fa\u51c6\u200b\u67b6\u6784\u200b\u3002</p> <p></p> <p>\u200b\u5728\u200b\u8fd9\u79cd\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0cMHA \u200b\u8ba1\u7b97\u200b\u4e3b\u8981\u200b\u9075\u5faa\u200b\u4e2d\u200b\u7684\u200b\u8fc7\u7a0b\u200b\uff0c\u200b\u5982\u4e0b\u200b\u56fe\u200b\u6240\u793a\u200b\uff1a</p> <p></p> <p>\u200b\u5047\u8bbe\u200b\u6211\u4eec\u200b\u6709\u200b n_h \u200b\u4e2a\u200b\u6ce8\u610f\u200b\u5934\u200b\uff0c\u200b\u5e76\u4e14\u200b\u6bcf\u4e2a\u200b\u6ce8\u610f\u200b\u5934\u200b\u7684\u200b\u7ef4\u5ea6\u200b\u90fd\u200b\u8868\u793a\u200b\u4e3a\u200b d_h\uff0c\u200b\u56e0\u6b64\u200b\u8fde\u63a5\u200b\u7684\u200b\u7ef4\u5ea6\u200b\u5c06\u200b\u4e3a\u200b \uff08n_h \u00b7d_h\uff09\u3002</p> <p>\u200b\u7ed9\u5b9a\u200b\u4e00\u4e2a\u200b\u5177\u6709\u200b l \u200b\u5c42\u200b\u7684\u200b\u6a21\u578b\u200b\uff0c\u200b\u5982\u679c\u200b\u6211\u4eec\u200b\u5c06\u200b\u8be5\u200b\u5c42\u200b\u4e2d\u200b\u7b2c\u200b t \u200b\u4e2a\u200b\u6807\u8bb0\u200b\uff08token\uff09\u200b\u7684\u200b\u8f93\u5165\u200b\u8868\u793a\u200b\u4e3a\u200b \u200b\u7ef4\u6570\u200b\u4e3a\u200b d \u200b\u7684\u200b h_t \uff0c\u200b\u5219\u200b\u9700\u8981\u200b\u4f7f\u7528\u200b\u7ebf\u6027\u200b\u6620\u5c04\u200b\u77e9\u9635\u200b\u5c06\u200b h_t \u200b\u7684\u200b\u7ef4\u6570\u200b\u4ece\u200b d \u200b\u6620\u5c04\u200b\u5230\u200b \uff08n_h \u00b7d_h\uff09\u3002\u200b\u5982\u4e0b\u200b\u56fe\u200b\u65b9\u7a0b\u200b\u6240\u793a\u200b\uff1a</p> <p></p> <p>\u200b\u5176\u4e2d\u200b W^Q\u3001W^K \u200b\u548c\u200b W^V \u200b\u662f\u200b\u7ebf\u6027\u200b\u6620\u5c04\u200b\u77e9\u9635\u200b\u3002</p> <p></p> <p>\u200b\u5728\u200b\u8fd9\u6837\u200b\u7684\u200b\u6620\u5c04\u200b\u4e4b\u540e\u200b\uff0cq_t\u3001k_t \u200b\u548c\u200b v_t \u200b\u5c06\u200b\u88ab\u200b\u5206\u6210\u200b n_h \u200b\u4e2a\u5934\u200b\u6765\u200b\u8ba1\u7b97\u200b\u7f29\u653e\u200b\u7684\u200b\u70b9\u79ef\u200b\u6ce8\u610f\u529b\u200b\uff1a</p> <p></p> <p>\u200b\u5176\u4e2d\u200b W^O \u200b\u662f\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u6295\u5f71\u200b\u77e9\u9635\u200b\uff0c\u200b\u7528\u4e8e\u200b\u4ece\u200b \uff08n_h \u00b7d_h\uff09\u200b\u81f3\u200b d \u200b\u7684\u200b\u6620\u5c04\u200b\u3002</p> <p></p> <p>\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u4e0a\u8ff0\u200b\u65b9\u7a0b\u200b \uff081\uff09 \u200b\u81f3\u200b \uff088\uff09 \u200b\u63cf\u8ff0\u200b\u7684\u200b\u8fc7\u7a0b\u200b\u4ec5\u200b\u9002\u7528\u200b\u4e8e\u200b\u5355\u4e2a\u200btoken\u3002\u200b\u5728\u200b\u63a8\u7406\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u5bf9\u200b\u6bcf\u4e2a\u200b\u65b0\u200b\u751f\u6210\u200b\u7684\u200b Token \u200b\u91cd\u590d\u200b\u8fd9\u4e2a\u200b\u8fc7\u7a0b\u200b\uff0c\u200b\u8fd9\u200b\u6d89\u53ca\u200b\u5230\u200b\u5927\u91cf\u200b\u7684\u200b\u91cd\u590d\u200b\u8ba1\u7b97\u200b\u3002\u200b\u8fd9\u200b\u5bfc\u81f4\u200b\u4e86\u200b\u4e00\u79cd\u200b\u79f0\u4e3a\u200b Key-Value \u200b\u7f13\u5b58\u200b\u7684\u200b\u6280\u672f\u200b\u3002</p>"},{"location":"blog/%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82deepseek-v3_mla%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/#key-value-\u7f13\u5b58","title":"Key-Value \u200b\u7f13\u5b58","text":"<p>Key-Value cache \u200b\u662f\u200b\u4e00\u79cd\u200b\u65e8\u5728\u200b\u901a\u8fc7\u200b\u7f13\u5b58\u200b\u548c\u200b\u91cd\u7528\u200b\u4ee5\u524d\u200b\u7684\u200b key \u200b\u548c\u200b values \u200b\u6765\u200b\u52a0\u901f\u200b\u81ea\u200b\u56de\u5f52\u200b\u8fc7\u7a0b\u200b\u7684\u200b\u6280\u672f\u200b\uff0c\u200b\u800c\u200b\u4e0d\u200b\u9700\u8981\u200b\u5728\u200b\u6bcf\u4e2a\u200b\u89e3\u7801\u200b\u6b65\u9aa4\u200b\u4e2d\u200b\u91cd\u65b0\u200b\u8ba1\u7b97\u200b\u5b83\u4eec\u200b\u3002KV \u200b\u7f13\u5b58\u200b\u901a\u5e38\u200b\u4ec5\u200b\u5728\u200b\u63a8\u7406\u200b\u9636\u6bb5\u200b\u4f7f\u7528\u200b\uff0c\u200b\u7528\u4e8e\u200b\u52a0\u901f\u200b\u63a8\u7406\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5728\u200b\u8bad\u7ec3\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u4ecd\u7136\u200b\u9700\u8981\u200b\u5e76\u884c\u5904\u7406\u200b\u6574\u4e2a\u200b\u8f93\u5165\u200b\u5e8f\u5217\u200b\u3002</p> <p>KV \u200b\u7f13\u5b58\u200b\u901a\u5e38\u200b\u901a\u8fc7\u200brolling buffer\u200b\u5b9e\u73b0\u200b\u3002\u200b\u5728\u200b\u6bcf\u4e2a\u200b\u89e3\u7801\u200b\u6b65\u9aa4\u200b\u4e2d\u200b\uff0c\u200b\u53ea\u200b\u8ba1\u7b97\u200b\u65b0\u200b\u7684\u200b\u67e5\u8be2\u200b Q\uff0c\u200b\u800c\u200b\u5b58\u50a8\u200b\u5728\u200b\u7f13\u5b58\u200b\u4e2d\u200b\u7684\u200b K \u200b\u548c\u200b V \u200b\u5c06\u200b\u88ab\u200b\u91cd\u7528\u200b\uff0c\u200b\u56e0\u6b64\u200b\u5c06\u200b\u4f7f\u7528\u200b\u65b0\u200b\u7684\u200b Q \u200b\u548c\u200b\u7f13\u5b58\u200b\u7684\u200b K\u3001V \u200b\u6765\u200b\u8ba1\u7b97\u200b\u6ce8\u610f\u529b\u200b\u3002\u200b\u540c\u65f6\u200b\uff0c\u200b\u65b0\u200b Token \u200b\u7684\u200b K \u200b\u548c\u200b V \u200b\u4e5f\u200b\u4f1a\u200b\u88ab\u200b\u8ffd\u52a0\u200b\u5230\u200b\u7f13\u5b58\u200b\u4e2d\u200b\uff0c\u200b\u4f9b\u200b\u4ee5\u540e\u200b\u4f7f\u7528\u200b\u3002</p> <p>\u200b\u7136\u800c\u200b\uff0cKV \u200b\u7f13\u5b58\u200b\u5b9e\u73b0\u200b\u7684\u200b\u52a0\u901f\u200b\u662f\u200b\u4ee5\u200b\u5185\u5b58\u200b\u4e3a\u200b\u4ee3\u4ef7\u200b\u7684\u200b\uff0c\u200b\u56e0\u4e3a\u200b KV \u200b\u7f13\u5b58\u200b\u7684\u200b\u5927\u5c0f\u200b\u548c\u200b \u200b\u6279\u5904\u7406\u200b\u5927\u5c0f\u200b\u00d7\u200b\u5e8f\u5217\u200b\u957f\u5ea6\u200b\u00d7hidden\u200b\u6570\u200b\u00d7head\u200b\u6570\u200b\uff08batch size \u00d7 sequence length \u00d7 hidden size \u00d7 number of heads\uff09 \u200b\u606f\u606f\u76f8\u5173\u200b\uff0c\u200b\u5f53\u200b\u6211\u4eec\u200b\u62e5\u6709\u200b\u66f4\u5927\u200b\u7684\u200b\u6279\u5904\u7406\u200b\u5927\u5c0f\u200b\u6216\u200b\u66f4\u957f\u200b\u7684\u200b\u5e8f\u5217\u200b\u65f6\u200b\uff0c\u200b\u4f1a\u200b\u5bfc\u81f4\u200b\u5185\u5b58\u200b\u74f6\u9888\u200b\u3002</p> <p>\u200b\u4e3a\u4e86\u200b\u89e3\u51b3\u200b\u8fd9\u4e2a\u200b\u95ee\u9898\u200b\uff0c\u200b\u63a8\u51fa\u200b\u4e86\u200b\u4e24\u79cd\u200b\u65e8\u5728\u200b\u89e3\u51b3\u200b\u6b64\u200b\u9650\u5236\u200b\u7684\u200b\u6280\u672f\u200b\uff1aMulti-Query Attention\uff08MQA\uff09 \u200b\u548c\u200b Grouped-Query Attention\uff08GQA\uff09\u3002</p>"},{"location":"blog/%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82deepseek-v3_mla%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/#\u591a\u67e5\u8be2\u6ce8\u610f\u529b\u673a\u5236-mqa-vs-\u5206\u7ec4\u67e5\u8be2\u6ce8\u610f\u529b\u673a\u5236-gqa","title":"\u591a\u200b\u67e5\u8be2\u200b\u6ce8\u610f\u529b\u200b\u673a\u5236\u200b (MQA) vs \u200b\u5206\u7ec4\u200b\u67e5\u8be2\u200b\u6ce8\u610f\u529b\u200b\u673a\u5236\u200b (GQA)","text":"<p>\u200b\u4e0b\u56fe\u200b\u663e\u793a\u200b\u4e86\u200b\u539f\u59cb\u200b MHA\u3001\u200b\u5206\u7ec4\u200b\u67e5\u8be2\u200b\u6ce8\u610f\u529b\u200b \uff08GQA\uff09 \u200b\u548c\u200b\u591a\u200b\u67e5\u8be2\u200b\u6ce8\u610f\u529b\u200b \uff08MQA\uff09 \u200b\u4e4b\u95f4\u200b\u7684\u200b\u6bd4\u8f83\u200b\u3002</p> <p></p> <p>MQA \u200b\u7684\u200b\u57fa\u672c\u200b\u601d\u60f3\u200b\u662f\u200b\u5728\u200b\u6240\u6709\u200b\u67e5\u8be2\u200b\u5934\u200b\u4e4b\u95f4\u200b\u5171\u4eab\u200b\u5355\u4e2a\u200b key \u200b\u548c\u200b\u5355\u4e2a\u200b\u503c\u5934\u200b\uff0c\u200b\u8fd9\u200b\u53ef\u4ee5\u200b\u663e\u8457\u200b\u7684\u200b\u51cf\u5c11\u200b\u5185\u5b58\u200b\u4f7f\u7528\u200b\uff0c\u200b\u4f46\u200b\u4e5f\u200b\u4f1a\u200b\u5f71\u54cd\u200b attention \u200b\u7684\u200b\u51c6\u786e\u6027\u200b\u3002</p> <p>GQA \u200b\u53ef\u4ee5\u200b\u770b\u4f5c\u200b\u662f\u200b MHA \u200b\u548c\u200b MQA \u200b\u4e4b\u95f4\u200b\u7684\u200b\u4e00\u79cd\u200b\u63d2\u503c\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u5176\u4e2d\u200b\u4e00\u5bf9\u200b\u952e\u200b\u548c\u200b\u503c\u5934\u200b\u5c06\u200b\u4ec5\u200b\u7531\u200b\u4e00\u7ec4\u200b\u67e5\u8be2\u200b\u5934\u200b\u5171\u4eab\u200b\uff0c\u200b\u800c\u200b\u4e0d\u662f\u200b\u7531\u200b\u6240\u6709\u200b\u67e5\u8be2\u200b\u5171\u4eab\u200b\u3002\u200b\u4f46\u200b\u4e0e\u200b MHA \u200b\u76f8\u6bd4\u200b\uff0c\u200b\u8fd9\u200b\u4ecd\u7136\u200b\u4f1a\u200b\u5bfc\u81f4\u200b\u8f83\u5dee\u200b\u7684\u200b\u7ed3\u679c\u200b\u3002</p> <p>\u200b\u7136\u540e\u200b\u5c31\u200b\u5f15\u5165\u200b\u4e86\u200b\uff0cMLA\u200b\u6280\u672f\u200b\u5982\u4f55\u200b\u8bbe\u6cd5\u200b\u5728\u200b\u5185\u5b58\u200b\u6548\u7387\u200b\u548c\u200b\u6a21\u578b\u200b\u51c6\u786e\u7387\u200b\u4e4b\u95f4\u200b\u5bfb\u6c42\u200b\u5e73\u8861\u200b\u3002</p>"},{"location":"blog/%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82deepseek-v3_mla%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/#rope-rotary-positional-embeddings-\u65cb\u8f6c\u4f4d\u7f6e\u5d4c\u5165\u6280\u672f","title":"RoPE (Rotary Positional Embeddings) \u200b\u65cb\u8f6c\u200b\u4f4d\u7f6e\u200b\u5d4c\u5165\u200b\u6280\u672f","text":"<p>\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u63d0\u5230\u200b\u7684\u200b\u6700\u540e\u200b\u4e00\u70b9\u200b\u80cc\u666f\u200b\u662f\u200b RoPE \uff0c\u200b\u5b83\u200b\u901a\u8fc7\u200b\u4f7f\u7528\u200b\u6b63\u5f26\u200b\u51fd\u6570\u200b\u65cb\u8f6c\u200b\u591a\u5934\u200b\u6ce8\u610f\u529b\u200b\u4e2d\u200b\u7684\u200bQuery\u200b\u548c\u200bKey\u200b\u5411\u91cf\u200b\uff0c\u200b\u5c06\u200b\u4f4d\u7f6e\u200b\u4fe1\u606f\u200b\u76f4\u63a5\u200b\u7f16\u7801\u200b\u5230\u200b\u6ce8\u610f\u529b\u200b\u673a\u5236\u200b\u4e2d\u200b\u3002</p> <p>\u200b\u66f4\u200b\u5177\u4f53\u5730\u8bf4\u200b\uff0cRoPE \u200b\u5c06\u200b\u4f4d\u7f6e\u200b\u76f8\u5173\u200b\u7684\u200b\u65cb\u8f6c\u200b\u77e9\u9635\u200b\u5e94\u7528\u200b\u4e8e\u200b\u6bcf\u4e2a\u200bToken\u200b\u5904\u200b\u7684\u200bQuery\u200b\u548c\u200bKey\u200b\u5411\u91cf\u200b\uff0c\u200b\u5e76\u200b\u4f7f\u7528\u200b\u6b63\u5f26\u200b\u548c\u200b\u4f59\u5f26\u200b\u51fd\u6570\u200b\u4f5c\u4e3a\u200b\u5176\u200b\u57fa\u7840\u200b\uff0c\u200b\u4ee5\u200b\u72ec\u7279\u200b\u7684\u200b\u65b9\u5f0f\u200b\u5e94\u7528\u200b\u5b83\u4eec\u200b\u6765\u200b\u5b9e\u73b0\u200b\u65cb\u8f6c\u200b\u3002</p> <p>\u200b\u4e0b\u9762\u200b\u7528\u200b\u4e00\u4e2a\u200b\u4f8b\u5b50\u200b\uff0c\u200b\u6765\u200b\u5b66\u4e60\u200bRoPE\u200b\u6280\u672f\u200b\u3002</p> <p>\u200b\u8981\u200b\u4e86\u89e3\u200b\u662f\u200b\u4ec0\u4e48\u200b\u4f7f\u200b\u5b83\u200b\u4f9d\u8d56\u4e8e\u200b\u4f4d\u7f6e\u200b\uff0c\u200b\u8bf7\u200b\u8003\u8651\u200b\u4e00\u4e2a\u200b\u53ea\u6709\u200b 4 \u200b\u4e2a\u200b\u5143\u7d20\u200b\u7684\u200b\u73a9\u5177\u200b\u5d4c\u5165\u200b\u5411\u91cf\u200b\uff08embedding vector\uff09\uff0c\u200b\u5373\u200b \uff08x_1\u3001x_2\u3001x_3\u3001x_4\uff09\u3002</p> <p>\u200b\u4e3a\u4e86\u200b\u5e94\u7528\u200b RoPE\uff0c\u200b\u6211\u4eec\u200b\u9996\u5148\u200b\u5c06\u200b\u8fde\u7eed\u200b\u7ef4\u5ea6\u200b\u5206\u7ec4\u200b\u4e3a\u200b\u4e00\u5bf9\u200b\u6570\u636e\u200b\uff1a</p> <ul> <li>\uff08x_1\u3001x_2\uff09 -&gt; \u200b\u4f4d\u7f6e\u200b 1</li> <li>\uff08x_3\u3001x_4\uff09 -&gt; \u200b\u4f4d\u7f6e\u200b 2</li> </ul> <p>\u200b\u7136\u540e\u200b\uff0c\u200b\u6211\u4eec\u200b\u5e94\u7528\u200b\u4e00\u4e2a\u200b\u65cb\u8f6c\u200b\u77e9\u9635\u200b\u6765\u200b\u65cb\u8f6c\u200b\u6bcf\u200b\u5bf9\u200b\u6570\u636e\u200b\uff0c\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\uff1a</p> <p></p> <p>\u200b\u5176\u4e2d\u200b \u03b8=\u03b8(p)=p\u22c5\u03b8_0 \uff0c\u03b8_0 \u200b\u662f\u200b\u57fa\u9891\u200b\u3002\u200b\u5728\u200b\u6211\u4eec\u200b\u7684\u200b4\u200b\u7ef4\u200b\u73a9\u5177\u200b\u793a\u4f8b\u200b\u4e2d\u200b\uff0c\u200b\u8fd9\u200b\u610f\u5473\u7740\u200b \uff08x_1\uff0c x_2\uff09 \u200b\u5c06\u200b\u65cb\u8f6c\u200b \u03b8_0\uff0c\u200b\u800c\u200b \uff08x_3\uff0c x_4\uff09 \u200b\u5c06\u200b\u65cb\u8f6c\u200b 2\u22c5\u03b8_0\u3002</p> <p>\u200b\u8fd9\u200b\u5c31\u662f\u200b\u4e3a\u4ec0\u4e48\u200b\u6211\u4eec\u200b\u79f0\u200b\u8fd9\u4e2a\u200b\u65cb\u8f6c\u200b\u77e9\u9635\u200b\u4e3a\u200b\u4f4d\u7f6e\u200b\u76f8\u5173\u77e9\u9635\u200b\uff1a\u200b\u5728\u200b\u6bcf\u4e2a\u200b\u4f4d\u7f6e\u200b\uff08\u200b\u6216\u200b\u6bcf\u200b\u5bf9\u200b\u6570\u636e\u200b\uff09\u200b\u5904\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u5e94\u7528\u200b\u4e0d\u540c\u200b\u7684\u200b\u65cb\u8f6c\u200b\u77e9\u9635\u200b\uff0c\u200b\u5176\u4e2d\u200b\u65cb\u8f6c\u200b\u89d2\u5ea6\u200b\u7531\u200b\u4f4d\u7f6e\u200b\u51b3\u5b9a\u200b\u3002</p> <p>RoPE \u200b\u56e0\u200b\u5176\u200b\u7f16\u7801\u200b\u957f\u200b\u5e8f\u5217\u200b\u7684\u200b\u6548\u7387\u200b\u800c\u200b\u5e7f\u6cdb\u200b\u7528\u4e8e\u200b\u73b0\u4ee3\u200b LLM\uff0c\u200b\u4f46\u200b\u4ece\u200b\u4e0a\u9762\u200b\u7684\u200b\u516c\u5f0f\u200b\u4e2d\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u770b\u51fa\u200b\uff0c\u200b\u5b83\u200b\u5bf9\u200b Q \u200b\u548c\u200b K \u200b\u90fd\u200b\u5bf9\u200b\u4f4d\u7f6e\u200b\u654f\u611f\u200b\uff0c\u200b\u8fd9\u200b\u4f7f\u5f97\u200b\u5b83\u200b\u5728\u200b\u67d0\u4e9b\u200b\u65b9\u9762\u200b\u4e0e\u200b MLA \u200b\u4e0d\u200b\u517c\u5bb9\u200b\u3002</p>"},{"location":"blog/%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82deepseek-v3_mla%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/#multi-head-latent-attention-\u591a\u5934\u6f5c\u5728\u6ce8\u610f\u529b\u673a\u5236","title":"Multi-head Latent Attention \u200b\u591a\u5934\u200b\u6f5c\u5728\u200b\u6ce8\u610f\u529b\u200b\u673a\u5236","text":"<p>\u200b\u901a\u8fc7\u200b\u4e0a\u9762\u200b\u7684\u200b\u80cc\u666f\u200b\u77e5\u8bc6\u200b\u4ecb\u7ecd\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u7ee7\u7eed\u200b\u8ba8\u8bba\u200b MLA \u200b\u90e8\u5206\u200b\u3002\u200b\u5728\u200b\u672c\u8282\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u9996\u5148\u200b\u6982\u8ff0\u200b MLA \u200b\u7684\u200b\u9ad8\u7ea7\u200b\u6982\u5ff5\u200b\uff0c\u200b\u7136\u540e\u200b\u66f4\u200b\u6df1\u5165\u200b\u5730\u200b\u63a2\u8ba8\u200b\u4e3a\u4ec0\u4e48\u200b\u5b83\u200b\u9700\u8981\u200b\u4fee\u6539\u200b RoPE\u3002\u200b\u6700\u540e\u200b\uff0c\u200b\u6211\u4eec\u200b\u4ecb\u7ecd\u200b\u4e86\u200b MLA \u200b\u7684\u200b\u8be6\u7ec6\u200b\u7b97\u6cd5\u200b\u53ca\u5176\u200b\u6027\u80fd\u200b\u3002</p>"},{"location":"blog/%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82deepseek-v3_mla%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/#mla-\u6280\u672f\u601d\u60f3","title":"MLA \u200b\u6280\u672f\u200b\u601d\u60f3","text":"<p>MLA \u200b\u7684\u200b\u57fa\u672c\u200b\u601d\u60f3\u200b\u662f\u200b\u5c06\u200b\u6ce8\u610f\u529b\u200b\u8f93\u5165\u200bh_t\u200b\u538b\u7f29\u6210\u200b\u7ef4\u6570\u200b\u4e3a\u200b d_c \u200b\u7684\u200b\u4f4e\u7ef4\u200b\u6f5c\u5728\u200b\u5411\u91cf\u200b\uff0c\u200b\u5176\u4e2d\u200b d_c \u200b\u8fdc\u200b\u4f4e\u4e8e\u200b\u539f\u59cb\u200b\u5411\u91cf\u200b \uff08n_h \u00b7d_h\uff09\u3002\u200b\u7a0d\u540e\u200b\u5f53\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u8ba1\u7b97\u200b\u6ce8\u610f\u529b\u200b\u65f6\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u8fd9\u4e2a\u200b latent vector \u200b\u6620\u5c04\u200b\u56de\u9ad8\u200b\u7ef4\u7a7a\u95f4\u200b\uff0c\u200b\u4ee5\u200b\u6062\u590d\u200b key \u200b\u548c\u200b value\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u53ea\u200b\u9700\u8981\u200b\u5b58\u50a8\u200b latent vector \uff0c\u200b\u4ece\u800c\u200b\u663e\u8457\u200b\u51cf\u5c11\u200b\u5185\u5b58\u200b\u3002</p> <p>\u200b\u8fd9\u4e2a\u200b\u8fc7\u7a0b\u200b\u53ef\u4ee5\u200b\u7528\u200b\u4ee5\u4e0b\u200b\u65b9\u7a0b\u5f0f\u200b\u63cf\u8ff0\u200b\uff0c\u200b\u5176\u4e2d\u200b c^{KV}_t \u200b\u662f\u200b\u6f5c\u5728\u200b\u5411\u91cf\u200b\uff0cW^{DKV} h_t\u200b\u662f\u4ece\u200b \uff08h_n \u00b7d_h\uff09\u200b\u5230\u200b d_c\uff08\u200b\u6b64\u5904\u200b\u4e0a\u6807\u200b\u4e2d\u200b\u7684\u200b D \u200b\u4ee3\u8868\u200b\u201c\u200b\u5411\u4e0b\u200b\u6295\u5f71\u200b\u201d\uff0c\u200b\u610f\u601d\u200b\u662f\u200b\u538b\u7f29\u200b\u7ef4\u5ea6\u200b\uff09\uff0c\u200b\u800c\u200b W^{UK} \u200b\u548c\u200b W^{UV} \u200b\u90fd\u200b\u662f\u200b\u5411\u4e0a\u200b\u6295\u5f71\u200b\u77e9\u9635\u200b\uff0c\u200b\u5b83\u4eec\u200b\u5c06\u200b\u5171\u4eab\u200b\u7684\u200b\u6f5c\u5728\u200b\u5411\u91cf\u200b\u6620\u5c04\u200b\u56de\u9ad8\u200b\u7ef4\u7a7a\u95f4\u200b\u3002</p> <p>\u200b\u8fd9\u4e2a\u200b\u8fc7\u7a0b\u200b\u53ef\u4ee5\u200b\u7528\u200b\u4ee5\u4e0b\u200b\u65b9\u7a0b\u5f0f\u200b\u66f4\u200b\u6b63\u5f0f\u200b\u5730\u200b\u63cf\u8ff0\u200b\uff0c\u200b\u5176\u4e2d\u200b c^{KV}_t \u200b\u662f\u200b\u6f5c\u5728\u200b\u5411\u91cf\u200b\uff0cW^{DKV} \u200b\u662f\u200bh_t\u200b\u4ece\u200b \uff08h_n \u00b7d_h\uff09\u200b\u5230\u200b d_c\u200b\u6295\u5f71\u200b\u7684\u200b\u538b\u7f29\u200b\u77e9\u9635\u200b\uff08\u200b\u6b64\u5904\u200b\u4e0a\u6807\u200b\u4e2d\u200b\u7684\u200b D \u200b\u4ee3\u8868\u200b\u201c\u200b\u5411\u4e0b\u200b\u6295\u5f71\u200b\u201d\uff0c\u200b\u610f\u601d\u200b\u662f\u200b\u538b\u7f29\u200b\u7ef4\u5ea6\u200b\uff09\uff0c\u200b\u800c\u200b W^{UK} \u200b\u548c\u200b W^{UV} \u200b\u90fd\u200b\u662f\u200b\u5411\u4e0a\u200b\u6295\u5f71\u200b\u77e9\u9635\u200b\uff0c\u200b\u5b83\u4eec\u200b\u5c06\u200b\u5171\u4eab\u200b\u7684\u200b\u6f5c\u5728\u200b\u5411\u91cf\u200b\u6620\u5c04\u200b\u56de\u9ad8\u200b\u7ef4\u7a7a\u95f4\u200b\u3002</p> <p></p> <p>\u200b\u540c\u6837\u200b\uff0c\u200b\u6211\u4eec\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u5c06\u200bQuery\u200b\u6620\u5c04\u200b\u5230\u200b\u4e00\u4e2a\u200b\u6f5c\u5728\u200b\u7684\u200b\u4f4e\u7ef4\u200b\u5411\u91cf\u200b\uff0c\u200b\u7136\u540e\u200b\u5c06\u200b\u5176\u200b\u6620\u5c04\u200b\u56de\u200b\u539f\u59cb\u200b\u7684\u200b\u9ad8\u200b\u7ef4\u7a7a\u95f4\u200b\uff1a</p> <p></p>"},{"location":"blog/%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82deepseek-v3_mla%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/#\u4e3a\u4ec0\u4e48\u9700\u8981\u89e3\u8026\u7684rope","title":"\u4e3a\u4ec0\u4e48\u200b\u9700\u8981\u200b\u89e3\u200b\u8026\u200b\u7684\u200bRoPE","text":"<p>\u200b\u6b63\u5982\u200b\u6211\u4eec\u200b\u4e4b\u524d\u200b\u63d0\u5230\u200b\u7684\u200b\uff0c RoPE \u200b\u662f\u200b\u8bad\u7ec3\u200b\u751f\u6210\u200b\u6a21\u578b\u200b\u5904\u7406\u200b\u957f\u200b\u5e8f\u5217\u200b\u7684\u200b\u5e38\u89c1\u200b\u9009\u62e9\u200b\u3002\u200b\u5982\u679c\u200b\u6211\u4eec\u200b\u76f4\u63a5\u200b\u5e94\u7528\u200b\u4e0a\u8ff0\u200b MLA \u200b\u7b56\u7565\u200b\uff0c\u200b\u90a3\u200b\u5c06\u200b\u4e0e\u200b RoPE \u200b\u4e0d\u200b\u517c\u5bb9\u200b\u3002</p> <p>\u200b\u4e3a\u4e86\u200b\u66f4\u200b\u6e05\u695a\u200b\u5730\u200b\u770b\u5230\u200b\u8fd9\u200b\u4e00\u70b9\u200b\uff0c\u200b\u8bf7\u200b\u8003\u8651\u4e00\u4e0b\u200b\u5f53\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b\u524d\u9762\u200b\u63d0\u5230\u200b\u7684\u200b\u65b9\u7a0b\u200b\uff087\uff09\u200b\u8ba1\u7b97\u200b\u6ce8\u610f\u529b\u200b\u65f6\u4f1a\u200b\u53d1\u751f\u200b\u4ec0\u4e48\u200b\uff1a\u200b\u5f53\u200b\u6211\u4eec\u200b\u5c06\u200b\u8f6c\u7f6e\u200b\u7684\u200b q \u200b\u4e0e\u200b k \u200b\u76f8\u4e58\u200b\u65f6\u200b\uff0c\u200b\u77e9\u9635\u200b $ W^Q $ \u200b\u548c\u200b $ W^{UK} $ \u200b\u5c06\u200b\u51fa\u73b0\u200b\u5728\u200b\u4e2d\u95f4\u200b\uff0c\u200b\u5b83\u4eec\u200b\u7684\u200b\u7ec4\u5408\u200b\u7b49\u4ef7\u200b\u4e8e\u200b\u4ece\u200b d_c \u200b\u5230\u200b d \u200b\u7684\u200b\u5355\u4e2a\u200b\u6620\u5c04\u200b\u7ef4\u5ea6\u200b\u3002</p> <p>\u200b\u77e9\u9635\u200b\u7684\u200b\u8f6c\u7f6e\u200b\u8ba1\u7b97\u200b\uff1a$$ (ABC\u2026XYZ)^T = Z^{T} Y^{T} X^{T} \u2026 C^{T} B^{T} A^{T} $$ </p> <p></p> <p>\u200b\u5728\u200b\u539f\u59cb\u200b\u8bba\u6587\u200b \u200b\u4e2d\u200b\uff0c\u200b\u4f5c\u8005\u200b\u5c06\u200b\u5176\u200b\u63cf\u8ff0\u200b\u4e3a\u200b W^{UK} \u200b\u53ef\u4ee5\u200b\u88ab\u200b\u201c\u200b\u5438\u6536\u200b\u201d\u200b\u5230\u200b W^Q \u200b\u4e2d\u200b\uff0c\u200b\u56e0\u6b64\u200b\u6211\u4eec\u200b\u4e0d\u200b\u9700\u8981\u200b\u5c06\u200b W^{UK} \u200b\u5b58\u50a8\u200b\u5728\u200b\u7f13\u5b58\u200b\u4e2d\u200b\uff0c\u200b\u8fdb\u4e00\u6b65\u200b\u51cf\u5c11\u200b\u4e86\u200b\u5185\u5b58\u200b\u4f7f\u7528\u200b\u3002</p> <p>\u200b\u4f46\u662f\u200b\uff0c\u200b\u5f53\u200b\u6211\u4eec\u200b\u8003\u8651\u200b\u4e0a\u56fe\u200b\u4e2d\u200b\u63d0\u5230\u200b\u7684\u200b\u65cb\u8f6c\u200b\u77e9\u9635\u200b\u65f6\u200b\uff0c\u200b\u60c5\u51b5\u200b\u5e76\u975e\u5982\u6b64\u200b\uff0c\u200b\u56e0\u4e3a\u200b RoPE \u200b\u5c06\u200b\u5728\u200b W^{UK} \u200b\u7684\u200b\u5de6\u4fa7\u200b\u5e94\u7528\u200b\u65cb\u8f6c\u200b\u77e9\u9635\u200b\uff0c\u200b\u5e76\u4e14\u200b\u8be5\u200b\u65cb\u8f6c\u200b\u77e9\u9635\u200b\u6700\u7ec8\u200b\u5c06\u200b\u4f4d\u4e8e\u200b\u8f6c\u7f6e\u200b\u7684\u200b W^Q \u200b\u548c\u200b W^{UK} \u200b\u4e4b\u95f4\u200b\u3002</p> <p></p> <p>\u200b\u6b63\u5982\u200b\u6211\u4eec\u200b\u5728\u200b\u80cc\u666f\u200b\u90e8\u5206\u200b\u6240\u200b\u89e3\u91ca\u200b\u7684\u200b\u90a3\u6837\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u65cb\u8f6c\u200b\u77e9\u9635\u200b\u662f\u200b\u4e0e\u200b\u4f4d\u7f6e\u200b\u76f8\u5173\u200b\u7684\u200b\uff0c\u200b\u8fd9\u200b\u610f\u5473\u7740\u200b\u6bcf\u4e2a\u200b\u4f4d\u7f6e\u200b\u7684\u200b\u65cb\u8f6c\u200b\u77e9\u9635\u200b\u90fd\u200b\u4e0d\u540c\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0cW^{UK} \u200b\u4e0d\u80fd\u200b\u518d\u200b\u88ab\u200b W^Q \u200b\u5438\u6536\u200b\u3002</p> <p>\u200b\u4e3a\u4e86\u200b\u89e3\u51b3\u200b\u8fd9\u4e00\u200b\u51b2\u7a81\u200b\uff0c\u200b\u4f5c\u8005\u200b\u63d0\u51fa\u200b\u4e86\u200b\u4ed6\u4eec\u200b\u6240\u8c13\u200b\u7684\u200b\u201c\u200b\u89e3\u200b\u8026\u200b RoPE\u201d\uff0c\u200b\u901a\u8fc7\u200b\u5f15\u5165\u200b\u989d\u5916\u200b\u7684\u200bquery\u200b\u5411\u91cf\u200b\u548c\u200b\u5171\u4eab\u200b\u7684\u200bKey\u200b\u5411\u91cf\u200b\uff0c\u200b\u5e76\u4e14\u200b\u4ec5\u200b\u5728\u200b RoPE \u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u8fd9\u4e9b\u200b\u989d\u5916\u200b\u7684\u200b\u5411\u91cf\u200b\uff0c\u200b\u540c\u65f6\u200b\u4fdd\u6301\u200b\u539f\u59cb\u200bKey\u200b\u4e0e\u200b\u65cb\u8f6c\u200b\u77e9\u9635\u200b\u9694\u79bb\u200b\u3002</p> <p>MLA \u200b\u7684\u200b\u6574\u4e2a\u200b\u8fc7\u7a0b\u200b\u53ef\u4ee5\u200b\u603b\u7ed3\u200b\u5982\u4e0b\u200b:</p> <p></p> <ul> <li> <p>\u200b\u7b49\u5f0f\u200b \uff0837\uff09 \u200b\u5230\u200b \uff0840\uff09 \u200b\u63cf\u8ff0\u200b\u5982\u4f55\u200b\u5904\u7406\u200b\u67e5\u8be2\u200b\u6807\u8bb0\u200b\u3002</p> </li> <li> <p>\u200b\u7b49\u5f0f\u200b \uff0841\uff09 \u200b\u548c\u200b \uff0842\uff09 \u200b\u63cf\u8ff0\u200b\u4e86\u200b\u5982\u4f55\u200b\u5904\u7406\u200bkey tokens\u3002</p> </li> <li> <p>\u200b\u7b49\u5f0f\u200b \uff0843\uff09 \u200b\u548c\u200b \uff0844\uff09 \u200b\u63cf\u8ff0\u200b\u4e86\u200b\u5982\u4f55\u200b\u4e3a\u200b RoPE \u200b\u4f7f\u7528\u200b\u989d\u5916\u200b\u7684\u200b\u5171\u4eab\u200bkey\uff0c\u200b\u8bf7\u200b\u6ce8\u610f\u200b \uff0842\uff09 \u200b\u7684\u200b\u8f93\u51fa\u200b\u4e0d\u200b\u6d89\u53ca\u200b RoPE\u3002</p> </li> <li> <p>\u200b\u65b9\u7a0b\u200b \uff0845\uff09 \u200b\u63cf\u8ff0\u200b\u4e86\u200b\u5982\u4f55\u200b\u5904\u7406\u200bvalue tokens\u3002</p> </li> </ul> <p>\u200b\u5728\u200b\u6b64\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u53ea\u200b\u9700\u8981\u200b\u7f13\u5b58\u200b\u5e26\u6709\u200b\u6846\u200b\u7684\u200b\u84dd\u8272\u200b\u53d8\u91cf\u200b\u3002\u200b\u5bf9\u4e8e\u200b\u6bcf\u200b\u4e00\u4e2a\u200b Token\uff0c\u200b\u63a8\u7406\u200b\u65f6\u200b\u5728\u200b\u6bcf\u200b\u4e00\u4e2a\u200b Transformer Layer \u200b\u9700\u8981\u200b\u7f13\u5b58\u200b\u7684\u200b\u84dd\u8272\u200b\u7684\u200b\u4e24\u4e2a\u200b\u65b9\u5757\u200bCache\uff0c\u200b\u5927\u5c0f\u200b\u4e3a\u200b 512+64=576\u3002\u200b\u800c\u200b\u6807\u51c6\u200b MHA \u200b\u9700\u8981\u200b\u7f13\u5b58\u200b\u7684\u200b\u5927\u5c0f\u200b\u4e3a\u200b 2 * Hidden \u200b\u7ef4\u5ea6\u200b \uff0c\u200b\u5373\u200b 2*7168=14336\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200b DeepSeek V3 \u200b\u7684\u200b MLA \u200b\u7684\u200b Cache \u200b\u5927\u5c0f\u200b\u53ea\u6709\u200b MHA \u200b\u7684\u200b 1/25\u3002</p> <p>\u200b\u8fd9\u4e2a\u200b\u8fc7\u7a0b\u200b\u53ef\u4ee5\u200b\u7528\u200b\u6d41\u7a0b\u56fe\u200b\u66f4\u200b\u6e05\u695a\u200b\u5730\u200b\u8bf4\u660e\u200b\uff1a</p> <p></p>"},{"location":"blog/%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82deepseek-v3_mla%E6%B3%A8%E6%84%8F%E5%8A%9B%E6%9C%BA%E5%88%B6/#mla\u6027\u80fd\u6bd4\u8f83","title":"MLA\u200b\u6027\u80fd\u200b\u6bd4\u8f83","text":"<p>\u200b\u4e0b\u8868\u200b\u6bd4\u8f83\u200b\u4e86\u200b KV \u200b\u7f13\u5b58\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u5143\u7d20\u200b\u6570\u91cf\u200b\uff08\u200b\u6bcf\u4e2a\u200bToken\uff09\u200b\u4ee5\u53ca\u200b MHA\u3001GQA\u3001MQA \u200b\u548c\u200b MLA \u200b\u4e4b\u95f4\u200b\u7684\u200b\u5efa\u6a21\u200b\u80fd\u529b\u200b\uff0c\u200b\u8868\u660e\u200b MLA \u200b\u786e\u5b9e\u200b\u53ef\u4ee5\u200b\u5728\u200b\u5185\u5b58\u200b\u6548\u7387\u200b\u548c\u200b\u5efa\u6a21\u200b\u80fd\u529b\u200b\u4e4b\u95f4\u200b\u5b9e\u73b0\u200b\u66f4\u597d\u200b\u7684\u200b\u5e73\u8861\u200b\u3002</p> <p>\u200b\u6709\u8da3\u200b\u7684\u200b\u662f\u200b\uff0cMLA \u200b\u7684\u200b\u5efa\u6a21\u200b\u80fd\u529b\u200b\u751a\u81f3\u200b\u8d85\u8fc7\u200b\u4e86\u200b\u539f\u59cb\u200b MHA\u3002</p> <p></p> <p>\u200b\u66f4\u200b\u5177\u4f53\u5730\u8bf4\u200b\uff0c\u200b\u4e0b\u8868\u200b\u663e\u793a\u200b\u4e86\u200b MHA\u3001GQA \u200b\u548c\u200b MQA \u200b\u5728\u200b 7B \u200b\u578b\u53f7\u200b\u4e0a\u200b\u7684\u200b\u6027\u80fd\u200b\uff0c\u200b\u5176\u4e2d\u200b MHA \u200b\u660e\u663e\u200b\u4f18\u4e8e\u200b MQA \u200b\u548c\u200b GQA\u3002</p> <p></p> <p>\u200b\u4f5c\u8005\u200b\u5728\u200b\u6587\u7ae0\u200b\u4e2d\u200bTable-9\u200b\u8fd8\u200b\u5bf9\u200b MHA \u200b\u4e0e\u200b MLA \u200b\u8fdb\u884c\u200b\u4e86\u200b\u5206\u6790\u200b\uff0c\u200b\u7ed3\u679c\u200b\u603b\u7ed3\u200b\u5728\u200b\u4e0b\u8868\u4e2d\u200b\uff0c\u200b\u5176\u4e2d\u200b MLA \u200b\u603b\u4f53\u200b\u4e0a\u200b\u53d6\u5f97\u200b\u4e86\u200b\u66f4\u597d\u200b\u7684\u200b\u7ed3\u679c\u200b\u3002</p> <p></p> <p>(MLA\u200b\u6838\u5fc3\u5185\u5bb9\u200b\u6765\u6e90\u4e8e\u200bDeepSeek-V2: A Strong, Economical, and Efficient Mixture-of-Experts Language Model\u200b\u548c\u200b\u8bd1\u200b\u81ea\u200bdeepseek-v3-explained-1-multi-head-latent-attention, \u200b\u5e76\u200b\u7ed3\u5408\u200b\u5176\u4ed6\u200b\u8d44\u6599\u200b\u89e3\u91ca\u200b)</p> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>DeepSeek-R1\u200b\u548c\u200bFP8\u200b\u6df7\u5408\u200b\u7cbe\u5ea6\u200b\u8bad\u7ec3\u200b\u4ee5\u53ca\u200bFP8\u200b\u91cf\u5316\u200b\u5b9e\u73b0\u200b</li> <li>brpc\u200b\u4e2d\u200b\u7684\u200bprofile\u200b\u5b9e\u73b0\u200b</li> <li>\u200b\u4e00\u6587\u200b\u641e\u61c2\u200bc++\u200b\u4e2d\u200brvo\u200b\u8fd4\u56de\u503c\u200b\u4f18\u5316\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/%E6%90%9E%E6%87%82flash_attention/","title":"\u641e\u61c2\u200bflash_attention","text":"<p>\u200b\u672c\u6587\u200b\u8bb0\u5f55\u200b\u4e86\u200b\u5b66\u4e60\u200bflash_attention\u200b\u9047\u5230\u200b\u7684\u200b\u4e00\u4e9b\u200b\u597d\u200b\u7684\u200b\u6587\u7ae0\u200b\uff0c\u200b\u5e2e\u52a9\u200b\u4f60\u200b\u641e\u61c2\u200bflash_attention\u3002</p> <p>\u200b\u6211\u4eec\u200b\u77e5\u9053\u200b\u73b0\u5728\u200b\u7684\u200bLLM\u200b\u5927\u200b\u6a21\u578b\u200b\u4e3b\u6d41\u200b\u662f\u200b\u57fa\u4e8e\u200battention\u200b\u642d\u5efa\u200b\u7684\u200b\uff0cattention\u200b\u7684\u200b\u8ba1\u7b97\u200b\u6548\u7387\u200b\u4e5f\u200b\u51b3\u5b9a\u200b\u4e86\u200b\u751f\u4ea7\u200b\u573a\u666f\u200b\u4e2d\u200b\u5927\u200b\u6a21\u578b\u200b\u7684\u200b\u53ef\u7528\u6027\u200b\u3002flash_attention\u200b\u76ee\u524d\u200b\u6709\u200b\u4e09\u4e2a\u200b\u7248\u672c\u200b\uff0c\u200b\u5206\u522b\u200b\u662f\u200bflash_attention\u200b\u548c\u200bflash_attention2\u200b\u548c\u200bflash_attention3\uff0c\u200b\u5b83\u4eec\u200b\u7684\u200b\u76ee\u7684\u200b\u90fd\u200b\u662f\u200b\u91c7\u53d6\u200b\u4e00\u7cfb\u5217\u200b\u7684\u200b\u4f18\u5316\u200b\u624b\u6bb5\u200b\uff0c\u200b\u63d0\u9ad8\u200battention\u200b\u7684\u200b\u8ba1\u7b97\u200b\u6548\u7387\u200b\u3002</p> <p>\u200b\u6839\u636e\u200bFlash Attention\u200b\u539f\u7406\u200b\u8be6\u89e3\u200b\uff0cflashattention\u200b\u7684\u200b\u6838\u5fc3\u601d\u60f3\u200b\u662f\u200b\u51cf\u5c11\u200bHBM\u200b\u7684\u200b\u8bbf\u95ee\u200b\uff0c\u200b\u5c06\u200bQKV\u200b\u5207\u200b\u5206\u4e3a\u200b\u5c0f\u5757\u200b\u540e\u200b\u653e\u5165\u200bSRAM\u200b\u4e2d\u200b\u3002FlashAttention \u200b\u4f18\u5316\u200b\u4e86\u200b\u663e\u5b58\u200b\u5b58\u53d6\u200b\uff0c\u200b\u8981\u200b\u641e\u61c2\u200bflashattension\u200b\u5c31\u8981\u200b\u641e\u61c2\u200bsoftmax\u200b\u7684\u200b\u4f18\u5316\u200b\u8ba1\u7b97\u200b\uff0c\u200b\u624b\u200b\u6495\u200bonline softmax, Flash Attention\u200b\u524d\u4f20\u200b\uff0c\u200b\u4e00\u200b\u6495\u200b\u4e00\u4e2a\u200b\u4e0d\u200b\u5431\u58f0\u200b\uff0c\u200b\u624b\u200b\u6495\u200bLLM-Flash Attention\u200b\u4ece\u200bsoftmax\u200b\u8bf4\u8d77\u200b\u3002</p> Python<pre><code>X_batch = torch.randn(4, 6)\n_, d = X_batch.shape\n\nX_batch_block_0 = X_batch[:, :d//2]\nX_batch_block_1 = X_batch[:, d//2:]\n\n# we parallel calculate  different block max &amp; sum\nX_batch_0_max, _ = X_batch_block_0.max(dim = 1, keepdim = True)\nX_batch_0_sum = torch.exp(X_batch_block_0 - X_batch_0_max).sum(dim = 1, keepdim = True)\n\nX_batch_1_max, _ = X_batch_block_1.max(dim = 1, keepdim = True)\nX_batch_1_sum = torch.exp(X_batch_block_1 - X_batch_1_max).sum(dim = 1, keepdim = True)\n\n# online batch block update max &amp; sum\nX_batch_1_max_update = torch.maximum(X_batch_0_max, X_batch_1_max) # \u200b\u9010\u4e2a\u200b\u5143\u7d20\u200b\u627e\u200b\u6700\u5927\u503c\u200b\nX_batch_1_sum_update = X_batch_0_sum * torch.exp(X_batch_0_max - X_batch_1_max_update) \\\n                     + torch.exp(X_batch_block_1 - X_batch_1_max_update).sum(dim = 1, keepdim = True) # block sum\n\nX_batch_online_softmax = torch.exp(X_batch - X_batch_1_max_update) / X_batch_1_sum_update\nprint(X_batch_online_softmax)\n</code></pre> <p>\u200b\u4e0b\u9762\u200b\u8fd9\u53e5\u200b\u4e3a\u5565\u200b\u548c\u200b\u516c\u5f0f\u200b\u4e0d\u200b\u4e00\u6837\u200b\u5462\u200b\uff1f\u200b\u5b9e\u9645\u4e0a\u200b\u662f\u200b\u52a0\u200b\u7684\u200b\u4e0b\u9762\u200b\u56fe\u4e2d\u200b\u7684\u200b\u4e24\u4e2a\u200b\u7ea2\u6846\u200b\u3002</p> <p></p> Python<pre><code>X_batch_1_sum_update = X_batch_0_sum * torch.exp(X_batch_0_max - X_batch_1_max_update) \\\n                     + torch.exp(X_batch_block_1 - X_batch_1_max_update).sum(dim = 1, keepdim = True) # block sum\n</code></pre>"},{"location":"blog/%E6%90%9E%E6%87%82flash_attention/#flash_attention2","title":"flash_attention2","text":"<p>\u200b\u624b\u200b\u6495\u200bLLM-FlashAttention2\u200b\u53ea\u200b\u56e0\u200bFor\u200b\u5faa\u73af\u200b\u4f18\u5316\u200b\u7684\u200b\u592a\u7f8e\u200b,Flash Attention 2\u200b\u6bd4\u200bFlash Attention 1\u200b\u52a0\u901f\u200b2x, \u200b\u8ba1\u7b97\u200b\u6548\u7387\u200b\u8fbe\u5230\u200bGEMM\u200b\u6027\u80fd\u200b\u7684\u200b50~73%\u3002</p> <ul> <li>\u200b\u51cf\u5c11\u200b\u975e\u200b\u4e58\u6cd5\u200b\u8ba1\u7b97\u200b</li> <li>\u200b\u4f18\u5316\u200bQKV for\u200b\u5faa\u73af\u200b\u987a\u5e8f\u200b</li> <li>\u200b\u91c7\u7528\u200bshared memory\u200b\u51cf\u5c11\u200b\u901a\u4fe1\u200b</li> </ul>"},{"location":"blog/%E6%90%9E%E6%87%82flash_attention/#flash_attention3","title":"flash_attention3","text":"<p>gpu-mode-cutlass-and-flashattention-3</p>"},{"location":"blog/%E6%90%9E%E6%87%82flash_attention/#\u5b9e\u73b0softmax","title":"\u5b9e\u73b0\u200bSoftmax","text":"<p>\u200b\u4e3a\u4e86\u200b\u4f7f\u7528\u200bCUDA\u200b\u5b9e\u73b0\u200bSoftmax\u200b\u5e76\u200b\u901a\u8fc7\u200bPyTorch\u200b\u8c03\u7528\u200b\uff0c\u200b\u9700\u8981\u200b\u7f16\u5199\u200bCUDA\u200b\u6838\u200b\u51fd\u6570\u200b\u548c\u200bC++\u200b\u5305\u88c5\u200b\u5668\u200b, \u200b\u521b\u5efa\u200b\u4e24\u4e2a\u200b\u6587\u4ef6\u200b\uff1amain.cpp\u200b\u548c\u200bsoftmax.cu\u3002\u200b\u7136\u540e\u200b\uff0c\u200b\u5728\u200bPython\u200b\u4e2d\u200b\u52a0\u8f7d\u200b\u5e76\u200b\u8c03\u7528\u200bCUDA\u200b\u6269\u5c55\u200b\u3002</p> <p>\u200b\u8be6\u7ec6\u200b\u4ee3\u7801\u200b\u5b9e\u73b0\u200b\u53c2\u8003\u200bKenForever1/online_softmax\u3002</p>"},{"location":"blog/%E6%90%9E%E6%87%82flash_attention/#\u5b9e\u73b0flashattention","title":"\u5b9e\u73b0\u200bFlashAttention\ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350","text":"<p>tspeterkim/flash-attention-minimal\u3002</p> <ul> <li>LLM\u200b\u63a8\u7406\u200b\uff1aVLLM\u200b\u6295\u673a\u200b\u91c7\u6837\u200b\u5b9e\u73b0\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/%E6%B4%BE%E5%AF%B9%E7%9A%84%E6%9C%80%E5%A4%A7%E5%BF%AB%E4%B9%90%E5%80%BC/","title":"\u6d3e\u5bf9\u200b\u7684\u200b\u6700\u5927\u200b\u5feb\u4e50\u200b\u503c","text":"<p>\u200b\u516c\u53f8\u5458\u5de5\u200b\u53ef\u4ee5\u200b\u7528\u200b\u6811\u5f62\u200b\u7ed3\u6784\u200b\u8868\u793a\u200b\uff0c\u200b\u9664\u4e86\u200b\u8001\u677f\u200b\u4ee5\u5916\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u5458\u5de5\u200b\u90fd\u200b\u6709\u200b\u76f4\u5c5e\u200b\u4e0a\u7ea7\u200b\uff0c\u200b\u9664\u200b\u57fa\u5c42\u200b\u5458\u5de5\u200b\u5916\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u5458\u5de5\u200b\u90fd\u200b\u6709\u200b\u4e00\u4e2a\u200b\u6216\u8005\u200b\u591a\u4e2a\u200b\u4e0b\u7ea7\u200b\u3002\u200b\u516c\u53f8\u200b\u8981\u200b\u529e\u200bparty\uff0c\u200b\u8bf7\u200b\u8fd4\u56de\u200b\u6d3e\u5bf9\u200b\u7684\u200b\u6700\u5927\u200b\u5feb\u4e50\u200b\u503c\u200b\u3002</p> <ul> <li> <p>\u200b\u67d0\u4e2a\u200b\u5458\u5de5\u200b\u6765\u200b\u4e86\u200b\uff0c\u200b\u90a3\u200b\u4ed6\u200b\u7684\u200b\u76f4\u63a5\u200b\u4e0b\u7ea7\u200b\u4e0d\u80fd\u200b\u53c2\u52a0\u200b\u3002</p> </li> <li> <p>\u200b\u6d3e\u5bf9\u200b\u5feb\u4e50\u200b\u503c\u200b\u662f\u200b\u5230\u573a\u200b\u7684\u200b\u6240\u6709\u200b\u5458\u5de5\u200b\u5feb\u4e50\u200b\u503c\u200b\u7684\u200b\u7d2f\u52a0\u200b\u3002</p> </li> <li> <p>\u200b\u76ee\u6807\u200b\u662f\u200b\u8ba9\u200b\u6d3e\u5bf9\u200b\u5feb\u4e50\u200b\u503c\u200b\u6700\u5927\u200b\u3002</p> </li> </ul> <p>\u200b\u5047\u8bbe\u200b\u6709\u5934\u200b\u8282\u70b9\u200bX\uff0c\u200b\u5047\u8bbe\u200bX\u200b\u7684\u200b\u4e0b\u7ea7\u200b\u5458\u5de5\u200b\u4e3a\u200bA\uff0cB\uff0cC\u3002\uff0c\u200b\u90a3\u4e48\u200b\u5206\u4e3a\u200b\u4e24\u79cd\u200b\u60c5\u51b5\u200b\uff1a 1. X\u200b\u4e0d\u200b\u53c2\u52a0\u200b\u6d3e\u5bf9\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5feb\u4e50\u200b\u503c\u4e3a\u200b NO_X\u200b\u548c\u200bmax(YES_C, NO_C)\u3001max(YES_C, NO_C)\u3001max(YES_C, NO_C)\u3002 2. X\u200b\u53c2\u52a0\u200b\u6d3e\u5bf9\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5feb\u4e50\u200b\u503c\u4e3a\u200bYES_X\u200b\u548c\u200bNO_A\u3001NO_B\u3001NO_C\u200b\u7684\u200b\u5feb\u4e50\u200b\u503c\u200b\u7684\u200b\u548c\u200b\u3002</p> <p>\u200b\u663e\u7136\u200b\u662f\u200b\u4e2a\u200b\u9012\u5f52\u7ed3\u6784\u200b\uff0c\u200b\u5e76\u4e14\u200b\u9012\u5f52\u200b\u7684\u200b\u8fc7\u7a0b\u200b\u9700\u8981\u200b\u8fd4\u56de\u200bnode\u200b\u7684\u200bYES_node\u200b\u503c\u200b\u548c\u200bNO_node\u200b\u503c\u200b\u3002\uff08YES_node\u200b\u8868\u793a\u200bnode\u200b\u53c2\u52a0\u200b\uff0cNO_node\u200b\u8868\u793a\u200bnode\u200b\u4e0d\u200b\u53c2\u52a0\u200b\uff09\u3002</p> Rust<pre><code>use std::{cell::RefCell, rc::Rc};\nstruct Employ {\n    happy: i32, // \u200b\u5feb\u4e50\u200b\u503c\u200b\n    subordinates: Vec&lt;EmployRef&gt;, // \u200b\u4e0b\u7ea7\u200b\u5458\u5de5\u200b\n}\n\ntype EmployRef = Rc&lt;RefCell&lt;Employ&gt;&gt;;\n\nimpl Employ {\n    fn new(happy: i32) -&gt; Rc&lt;RefCell&lt;Employ&gt;&gt; {\n        Rc::new(RefCell::new(Employ { happy, subordinates: vec![] }))\n    }\n    fn get_happy(&amp;self) -&gt; i32 {\n        self.happy\n    }\n\n    fn add_subordinates&lt;I&gt;(&amp;mut self, subordinates: I)\n    where\n        I: IntoIterator&lt;Item = EmployRef&gt;,\n    {\n        for subordinate in subordinates {\n            self.subordinates.push(subordinate);\n        }\n    }\n\n    fn get_subordinates(&amp;self) -&gt; &amp;Vec&lt;EmployRef&gt; {\n        &amp;self.subordinates\n    }\n}\n\nstruct ReturnData {\n    yes_head_max: i32,\n    no_head_max: i32,\n}\n\nfn get_max_happy(employ: EmployRef) -&gt; ReturnData {\n    let mut yes = employ.borrow().get_happy();\n    let mut no = 0;\n\n    if employ.borrow().get_subordinates().is_empty() {\n        return ReturnData {\n            yes_head_max: yes,\n            no_head_max: no,\n        };\n    } else {\n        for sub in employ.borrow().get_subordinates() {\n            let data = get_max_happy(sub.clone());\n            yes += data.no_head_max;\n            no += data.yes_head_max.max(data.no_head_max);\n        }\n\n        return ReturnData {\n            yes_head_max: yes,\n            no_head_max: no,\n        };\n    }\n}\n\nfn max_happy(employ: EmployRef) -&gt; i32 {\n    let data = get_max_happy(employ);\n    return data.yes_head_max.max(data.no_head_max);\n}\n\n#[test]\nfn test() {\n    let employ = Employ::new(10);\n    let employ1 = Employ::new(20);\n    let employ2 = Employ::new(30);\n    let employ3 = Employ::new(40);\n\n    let employ_1_1 = Employ::new(50);\n    let employ_1_2 = Employ::new(60);\n\n    employ.borrow_mut().add_subordinates(vec![employ1.clone(), employ2.clone(), employ3.clone()]);\n    employ1.borrow_mut().add_subordinates(vec![employ_1_1.clone(), employ_1_2.clone()]);\n\n    assert_eq!(max_happy(employ), 180);\n}\n</code></pre> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>\u200b\u7edf\u8ba1\u200b\u548c\u200b\u751f\u6210\u200b\u6240\u6709\u200b\u4e0d\u540c\u200b\u7684\u200b\u4e8c\u53c9\u6811\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/%E7%94%A8%E4%B8%A4%E5%8F%A5%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%85%8D%E7%BD%AE%E4%BA%86%E4%B8%80%E4%B8%AAai%E7%BC%96%E7%A0%81%E7%9A%84vim%E7%BC%96%E8%BE%91%E5%99%A8/","title":"\u7528\u200b\u4e24\u53e5\u200b\u547d\u4ee4\u884c\u200b\u914d\u7f6e\u200b\u4e86\u200b\u4e00\u4e2a\u200bai\u200b\u7f16\u7801\u200b\u7684\u200bvim\u200b\u7f16\u8f91\u5668","text":""},{"location":"blog/%E7%94%A8%E4%B8%A4%E5%8F%A5%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%85%8D%E7%BD%AE%E4%BA%86%E4%B8%80%E4%B8%AAai%E7%BC%96%E7%A0%81%E7%9A%84vim%E7%BC%96%E8%BE%91%E5%99%A8/#\u7528\u4e24\u53e5\u547d\u4ee4\u884c\u914d\u7f6e\u4e86\u4e00\u4e2aai\u7f16\u7801\u7684vim\u7f16\u8f91\u5668","title":"\u7528\u200b\u4e24\u53e5\u200b\u547d\u4ee4\u884c\u200b\u914d\u7f6e\u200b\u4e86\u200b\u4e00\u4e2a\u200bai\u200b\u7f16\u7801\u200b\u7684\u200bvim\u200b\u7f16\u8f91\u5668","text":""},{"location":"blog/%E7%94%A8%E4%B8%A4%E5%8F%A5%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%85%8D%E7%BD%AE%E4%BA%86%E4%B8%80%E4%B8%AAai%E7%BC%96%E7%A0%81%E7%9A%84vim%E7%BC%96%E8%BE%91%E5%99%A8/#vim\u5b89\u88c5","title":"vim\u200b\u5b89\u88c5","text":"<p>\u200b\u5148\u200b\u770b\u770b\u200b\u754c\u9762\u200b\u6548\u679c\u200b\uff1a</p> <p></p> <p></p> <p></p> <p></p> <p>\u200b\u4f60\u200b\u60f3\u200b\u77e5\u9053\u200b\u6211\u200b\u600e\u4e48\u200b\u914d\u7f6e\u200b\u7684\u200b\u5417\u200b\uff1f </p>Bash<pre><code>sudo mv /usr/bin/vim /usr/bin/vim_old\nsudo ln -s /opt/helix-24.07-x86_64-linux/hx /usr/bin/vim\n</code></pre> \u200b\u200b\u662f\u4e0d\u662f\u200b\u8d85\u200b\u7b80\u5355\u200b\uff01 \u200b\u5bf9\u200b\u7684\u200b\uff0c\u200b\u6ca1\u9519\u200b\uff0c\u200b\u6211\u200b\u73a9\u200b\u4e86\u200b\u4e00\u4e0b\u200bhelix\uff0c\u200b\u91c7\u7528\u200brust\u200b\u5f00\u53d1\u200b\u7684\u200b\u4e00\u6b3e\u200b\u542f\u53d1\u200b\u4e8e\u200bvim\u200b\u548c\u200bKakoune\u200b\u7684\u200b\u7f16\u8f91\u5668\u200b\u3002\u200b\u5bf9\u4e8e\u200b\u559c\u6b22\u200bvim\u200b\u7684\u200b\u529f\u80fd\u200b\uff0c\u200b\u4f46\u662f\u200b\u4e0d\u60f3\u200b\u7ef4\u62a4\u200b\u63d2\u4ef6\u200b\u914d\u7f6e\u200b\u548c\u200b\u89e3\u51b3\u200b\u63d2\u4ef6\u200b\u51b2\u7a81\u200b\u7684\u200b\u4eba\u200b\u6765\u8bf4\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5c1d\u8bd5\u200b\u4f7f\u7528\u200bhelix\u3002 \u200b\u6211\u8bd5\u200b\u7740\u200b\u7528\u200bhelix\u200b\u7f16\u8f91\u200b\u6587\u4ef6\u200b\uff0c\u200b\u4e0d\u200b\u7528\u4e8e\u200b\u9879\u76ee\u200b\u5f00\u53d1\u200b\u3002\u200b\u9879\u76ee\u200b\u5f00\u53d1\u200b\u4e2d\u200bvscode\u200b\u5bf9\u200b\u6211\u200b\u66f4\u52a0\u200b\u65b9\u4fbf\u200b\u4e00\u4e9b\u200b\uff0c\u200b\u4fbf\u6377\u200b\u7684\u200b\u8fdc\u7a0b\u200b\u5f00\u53d1\u200b\u4ee5\u53ca\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200bvscode\u200b\u63d0\u4f9b\u200b\u7684\u200bai\u200b\u7f16\u7a0b\u200b\u5de5\u5177\u200b\uff0c\u200b\u4e0d\u7528\u200b\u81ea\u5df1\u200b\u6298\u817e\u200b\u3002 helix\u200b\u548c\u200bvim\u200b\u6309\u952e\u200b\u57fa\u672c\u76f8\u540c\u200b\uff0c\u200b\u533a\u522b\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200b\u6587\u7ae0\u200bMigrating from Vim\uff0c\u200b\u754c\u9762\u200b\u633a\u200b\u597d\u770b\u200b\u7684\u200b\u3002<p></p>"},{"location":"blog/%E7%94%A8%E4%B8%A4%E5%8F%A5%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%85%8D%E7%BD%AE%E4%BA%86%E4%B8%80%E4%B8%AAai%E7%BC%96%E7%A0%81%E7%9A%84vim%E7%BC%96%E8%BE%91%E5%99%A8/#ai\u7f16\u7a0b","title":"ai\u200b\u7f16\u7a0b","text":"<p>\u200b\u4e3a\u4e86\u200b\u5728\u200bhelix\u200b\u4e0a\u200b\u5c1d\u8bd5\u200b\u4e00\u4e9b\u200bgpt\u200b\u8f85\u52a9\u200b\u7f16\u7a0b\u200b\uff0c\u200b\u627e\u5230\u200b\u4e86\u200bhelix-gpt\u200b\u5f00\u6e90\u200b\u9879\u76ee\u200b\u3002\u200b\u6211\u200b\u6dfb\u52a0\u200b\u4e86\u200b\u5bf9\u200b\u901a\u4e49\u200b\u5343\u95ee\u200b\u7684\u200b\u8c03\u7528\u200b\uff0c\u200b\u5bf9\u200b\u4e00\u4e9b\u200bbug\u200b\u8fdb\u884c\u200b\u4e86\u200b\u4fee\u590d\u200b\u3002ai\u200b\u7f16\u7a0b\u200b\u63d0\u793a\u200b\u7684\u200b\u6548\u679c\u200b\uff0c\u200b\u548c\u200b\u6a21\u578b\u200b\u7684\u200b\u76f8\u5173\u6027\u200b\u7279\u522b\u200b\u9ad8\u200b\uff0c\u200b\u6bd4\u5982\u200b\u6536\u8d39\u200b\u6a21\u578b\u200b\u201dqwen-max\u201d\u200b\u76f8\u5bf9\u200b\u201dqwen1.5-1.8b-chat\u201d\u200b\u7684\u200b\u63d0\u793a\u200b\u662f\u200b\u53c8\u200b\u5feb\u53c8\u51c6\u200b\u3002\u200b\u770b\u770b\u200b\u6548\u679c\u200b\uff1a</p> <p></p>"},{"location":"blog/%E7%94%A8%E4%B8%A4%E5%8F%A5%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%85%8D%E7%BD%AE%E4%BA%86%E4%B8%80%E4%B8%AAai%E7%BC%96%E7%A0%81%E7%9A%84vim%E7%BC%96%E8%BE%91%E5%99%A8/#\u914d\u7f6e","title":"\u914d\u7f6e","text":"<p>\u200b\u914d\u7f6e\u200b\u4f7f\u7528\u200bhelix-gpt\uff0c </p>Bash<pre><code>vim ~/.config/helix/languages.toml\n</code></pre> TOML<pre><code>[language-server.gpt]\ncommand = \"helix-gpt\"\nargs = [\"--handler\", \"qianwen\", \"--logFile\", \"/home/ken/helix-gpt.log\"]\n\n[language-server.ts]\ncommand = \"typescript-language-server\"\nargs = [\"--stdio\"]\nlanguage-id = \"javascript\"\n\n[[language]]\nname = \"typescript\"\nlanguage-servers = [\n    \"gpt\",\n    \"ts\"\n]\n</code></pre><p></p> <p>\u200b\u9644\u200bhelix\u200b\u7b80\u5355\u200b\u914d\u7f6e\u200b\uff1a </p>Bash<pre><code>cat ~/.config/helix/config.toml\n</code></pre><p></p> TOML<pre><code>theme = \"onedark\"\n\n[editor]\nline-number = \"relative\"\nmouse = false\ntrue-color = true\n\n[editor.cursor-shape]\ninsert = \"bar\"\nnormal = \"block\"\nselect = \"underline\"\n\n[editor.file-picker]\nhidden = false\n\n[editor.soft-wrap]\nenable = true\n</code></pre> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> <li>git\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b\uff1f\u200b\u591a\u4e2a\u200b\u4fee\u6539\u200b\u5206\u200b\u591a\u4e2a\u200bcommit\u200b\u4fee\u6539\u200b</li> </ul>"},{"location":"blog/%E7%BB%9F%E8%AE%A1%E5%92%8C%E7%94%9F%E6%88%90%E6%89%80%E6%9C%89%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91/","title":"\u7edf\u8ba1\u200b\u548c\u200b\u751f\u6210\u200b\u6240\u6709\u200b\u4e0d\u540c\u200b\u7684\u200b\u4e8c\u53c9\u6811","text":"<p>\u200b\u7ed9\u5b9a\u200b\u4e00\u4e2a\u200b\u6574\u6570\u200bN\uff0c\u200b\u5982\u679c\u200bN&lt;1\uff0c\u200b\u4ee3\u8868\u200b\u7a7a\u6811\u200b\uff0c\u200b\u5426\u5219\u200b\u4ee3\u8868\u200b\u4e2d\u5e8f\u200b\u904d\u5386\u200b\u7ed3\u679c\u200b\u4e3a\u200b{1, 2, 3\u2026 N}\u3002\u200b\u8bf7\u200b\u8fd4\u56de\u200b\u53ef\u80fd\u200b\u7684\u200b\u4e8c\u53c9\u6811\u200b\u7ed3\u6784\u200b\u6709\u200b\u591a\u5c11\u200b\u3002</p>"},{"location":"blog/%E7%BB%9F%E8%AE%A1%E5%92%8C%E7%94%9F%E6%88%90%E6%89%80%E6%9C%89%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91/#\u7edf\u8ba1\u6240\u6709\u4e0d\u540c\u7684\u4e8c\u53c9\u6811","title":"\u7edf\u8ba1\u200b\u6240\u6709\u200b\u4e0d\u540c\u200b\u7684\u200b\u4e8c\u53c9\u6811","text":"<p>\u200b\u5982\u679c\u200b\u4e2d\u5e8f\u200b\u904d\u5386\u200b\u6709\u5e8f\u200b\u4e14\u200b\u65e0\u200b\u91cd\u590d\u200b\u503c\u200b\uff0c\u200b\u5219\u200b\u4e8c\u53c9\u6811\u200b\u5fc5\u4e3a\u200b\u641c\u7d22\u200b\u4e8c\u53c9\u6811\u200b\u3002</p> <p>\u200b\u91c7\u7528\u200b\u52a8\u6001\u200b\u89c4\u5212\u200b\u8ba1\u7b97\u200b\u3002data[i]\u200b\u4ee3\u8868\u200bi\u200b\u4e2a\u200b\u8282\u70b9\u200b\u7684\u200b\u641c\u7d22\u200b\u4e8c\u53c9\u6811\u200b\u6709\u200b\u591a\u5c11\u200b\u79cd\u200b\u53ef\u80fd\u200b\u3002\u200b\u53c8\u200b\u5305\u62ec\u200b\u4ee5\u200b1\u200b\u4e3a\u5934\u200b\u8282\u70b9\u200b\uff0c\u200b\u4ee5\u200b2\u200b\u4e3a\u5934\u200b\u8282\u70b9\u200b\uff0c\u2026\uff0c\u200b\u4e00\u76f4\u200b\u5230\u200b\u4ee5\u200bN\u200b\u4e3a\u5934\u200b\u8282\u70b9\u200b\u3002 \u200b\u4ee5\u200bi\u200b\u4e3a\u5934\u200b\u8282\u70b9\u200b\u65f6\u200b\uff0c\u200b\u7b49\u4e8e\u200b\u5de6\u5b50\u200b\u6811\u200b\u7684\u200b\u79cd\u6570\u200b\uff0c\u200b\u4e58\u4ee5\u200b\u53f3\u5b50\u200b\u6811\u200b\u7684\u200b\u79cd\u6570\u200b\u3002data[i] = data[i-1]* data[N-i]\u3002</p> Rust<pre><code>fn num_trees(n: i32) -&gt; i32 {\n    if n &lt; 2 {\n        return 1;\n    }\n\n    let mut data = vec![0; (n + 1) as usize];\n    data[0] = 1;\n    for i in 1..=n {\n        for j in 1..=i {\n            data[i as usize] += data[(j - 1) as usize] * data[(i - j) as usize];\n        }\n    }\n    return data[n as usize];\n}\n</code></pre>"},{"location":"blog/%E7%BB%9F%E8%AE%A1%E5%92%8C%E7%94%9F%E6%88%90%E6%89%80%E6%9C%89%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91/#\u8fdb\u9636-\u751f\u6210\u6240\u6709\u4e0d\u540c\u7684\u4e8c\u53c9\u6811","title":"\u8fdb\u9636\u200b \u200b\u751f\u6210\u200b\u6240\u6709\u200b\u4e0d\u540c\u200b\u7684\u200b\u4e8c\u53c9\u6811","text":"<p>N\u200b\u7684\u200b\u542b\u4e49\u200b\u4e0d\u53d8\u200b\uff0c\u200b\u5047\u8bbe\u200b\u53ef\u80fd\u200b\u7684\u200b\u4e8c\u53c9\u6811\u200b\u6709\u200bM\u200b\u79cd\u200b\uff0c\u200b\u8bf7\u200b\u8fd4\u56de\u200bM\u200b\u4e2a\u200b\u4e8c\u53c9\u6811\u200b\u5934\u200b\u8282\u70b9\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u4ee3\u8868\u200b\u4e00\u79cd\u200b\u7ed3\u6784\u200b\u3002</p>"},{"location":"blog/%E7%BB%9F%E8%AE%A1%E5%92%8C%E7%94%9F%E6%88%90%E6%89%80%E6%9C%89%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91/#rust\u5b9e\u73b0","title":"rust\u200b\u5b9e\u73b0","text":"Rust<pre><code>#[derive(Clone)]\npub struct Node {\n    pub val: i32,\n    pub left: Option&lt;Box&lt;Node&gt;&gt;,\n    pub right: Option&lt;Box&lt;Node&gt;&gt;,\n}\n\nimpl Node {\n    pub fn new(val: i32) -&gt; Self {\n        Node {\n            val,\n            left: None,\n            right: None,\n        }\n    }\n}\n\npub fn generate_trees(n: i32) -&gt; Vec&lt;Option&lt;Box&lt;Node&gt;&gt;&gt; {\n    generate(1, n)\n}\n\nfn generate(start: i32, end: i32) -&gt; Vec&lt;Option&lt;Box&lt;Node&gt;&gt;&gt; {\n    let mut res = Vec::new();\n    if start &gt; end {\n        res.push(None);\n        return res;\n    }\n\n    for i in start..=end {\n        let head = Node::new(i);\n        let left_trees = generate(start, i - 1);\n        let right_trees = generate(i + 1, end);\n\n        for left in &amp;left_trees {\n            for right in &amp;right_trees {\n                let mut new_head = head.clone();\n                new_head.left = left.clone();\n                new_head.right = right.clone();\n                res.push(Some(Box::new(new_head)));\n            }\n        }\n    }\n    res\n}\n\n#[cfg(test)]\nmod tests {\n\n    use crate::{generate_trees, num_trees};\n\n    #[test]\n    fn it_works() {\n        let res = num_trees(2);\n\n        assert_eq!(res, 2);\n    }\n\n    #[test]\n    fn it_works_2() {\n        let num = 4;\n        let res = generate_trees(num);\n        assert_eq!(res.len(), num_trees(num) as usize);\n    }\n}\n\n#### java\u200b\u7248\u672c\u200b\n\n\n```java\npublic List&lt;Node&gt; generateTrees(int n) {\n    return generate(1, n);\n}\n\nprivate List&lt;Node&gt; generate(int start, int end) {\n    List&lt;Node&gt; res = new ArrayList&lt;&gt;();\n    if (start &gt; end) {\n        res.add(null);\n    }\n\n    Node head = null;\n    for (int i = start; i &lt;= end; i++) {\n        head = new Node(i);\n        List&lt;Node&gt; left = generate(start, i - 1);\n        List&lt;Node&gt; right = generate(i + 1, end);\n        for (Node l : left) {\n            for (Node r : right) {\n                head.left = l;\n                head.right = r;\n                res.add(cloneTree(head));\n            }\n        }\n\n    }\n    return res;\n}\n\npublic Node cloneTree(Node root) {\n    if (root == null) return null;\n    Node node = new Node(root.val);\n    node.left = cloneTree(root.left);\n    node.right = cloneTree(root.right);\n    return node;\n}\n</code></pre>"},{"location":"blog/%E7%BB%9F%E8%AE%A1%E5%92%8C%E7%94%9F%E6%88%90%E6%89%80%E6%9C%89%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91/#box-clone","title":"Box clone\ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350","text":"<p>\u200b\u5728\u200b\u5806\u200b\u4e0a\u200b\u91cd\u65b0\u5206\u914d\u200b\u4e00\u5757\u200b\u533a\u57df\u200b\uff0c\u200b\u7528\u200b\u4e0d\u540c\u200b\u7684\u200b\u6307\u9488\u200b\u6307\u5411\u200b\u5206\u914d\u200b\u7684\u200b\u65b0\u200b\u533a\u57df\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u6709\u200b\u4e24\u4e2a\u200b\u4fdd\u5b58\u200b\u4e00\u6837\u200b\u6570\u636e\u200b\uff0c\u200b\u4f46\u662f\u200b\u5185\u5b58\u200b\u533a\u57df\u200b\u4e0d\u540c\u200b\u3002 </p>Rust<pre><code>fn main() {\n    let x = Box::new(5);\n    let y = x.clone();\n\n    // \u200b\u83b7\u53d6\u200b\u6307\u9488\u200b\u5730\u5740\u200b\n    let x_ptr = Box::into_raw(x); // \u200b\u83b7\u53d6\u200b x \u200b\u7684\u200b\u539f\u59cb\u200b\u6307\u9488\u200b\u5e76\u200b\u6d88\u8017\u200b Box\n    let y_ptr = Box::into_raw(y); // \u200b\u83b7\u53d6\u200b y \u200b\u7684\u200b\u539f\u59cb\u200b\u6307\u9488\u200b\u5e76\u200b\u6d88\u8017\u200b Box\n\n    // \u200b\u4f7f\u7528\u200b assert \u200b\u5224\u65ad\u200b\u5730\u5740\u200b\u662f\u5426\u200b\u76f8\u7b49\u200b\n    assert!(!std::ptr::eq(x_ptr, y_ptr), \"x \u200b\u548c\u200b y \u200b\u7684\u200b\u5730\u5740\u200b\u5e94\u8be5\u200b\u4e0d\u200b\u76f8\u7b49\u200b\");\n\n    // \u200b\u6253\u5370\u200b\u6307\u9488\u200b\u5730\u5740\u200b\n    println!(\"Address of x: {:p}\", x_ptr);\n    println!(\"Address of y: {:p}\", y_ptr);\n    println!(\"Address of z: {:p}\", y_ptr);\n\n    // \u200b\u8bb0\u5f97\u200b\u5728\u200b\u4f7f\u7528\u200b\u5b8c\u200b\u539f\u59cb\u200b\u6307\u9488\u200b\u540e\u200b\u91ca\u653e\u200b\u5185\u5b58\u200b\n    unsafe {\n        let _ = Box::from_raw(x_ptr);\n        let _ = Box::from_raw(y_ptr);\n    }\n\n    // Address of x: 0x55e91ead3b80\n    // Address of y: 0x55e91ead3ba0\n}\n</code></pre><p></p> <ul> <li>\u200b\u6d3e\u5bf9\u200b\u7684\u200b\u6700\u5927\u200b\u5feb\u4e50\u200b\u503c\u200b</li> <li>C++\u200b\u96f6\u200b\u62f7\u8d1d\u200b\u53cd\u200b\u5e8f\u5217\u5316\u200b\u5e93\u200bcista</li> <li>C++20\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u57fa\u4e8e\u200b\u5c5e\u6027\u200b\u6d4b\u8bd5\u200b\u7684\u200bquickcheck-cpp\u200b\u5e93\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"blog/%E9%80%9A%E8%BF%87%E5%85%88%E5%BA%8F%E5%92%8C%E4%B8%AD%E5%BA%8F%E6%95%B0%E7%BB%84%E7%94%9F%E6%88%90%E5%90%8E%E5%BA%8F%E6%95%B0%E7%BB%84/","title":"\u901a\u8fc7\u200b\u5148\u5e8f\u200b\u548c\u200b\u4e2d\u5e8f\u200b\u6570\u7ec4\u200b\u751f\u6210\u200b\u540e\u5e8f\u200b\u6570\u7ec4","text":"<p>\u200b\u5df2\u77e5\u200b\u4e00\u68f5\u200b\u4e8c\u53c9\u6811\u200b\u6240\u6709\u200b\u8282\u70b9\u200b\u503c\u200b\u90fd\u200b\u4e0d\u540c\u200b\uff0c\u200b\u7ed9\u5b9a\u200b\u8fd9\u4e2a\u200b\u4e8c\u53c9\u6811\u200b\u7684\u200b\u5148\u5e8f\u200b\u548c\u200b\u4e2d\u5e8f\u200b\u6570\u7ec4\u200b\uff0c\u200b\u4e0d\u8981\u200b\u91cd\u5efa\u200b\u6574\u68f5\u6811\u200b\uff0c\u200b\u800c\u662f\u200b\u901a\u8fc7\u200b\u8fd9\u200b\u4e24\u4e2a\u200b\u6570\u7ec4\u200b\u76f4\u63a5\u200b\u751f\u6210\u200b\u6b63\u786e\u200b\u7684\u200b\u540e\u5e8f\u200b\u6570\u7ec4\u200b\u3002</p> Rust<pre><code>use std::collections::HashMap;\n\nfn get_post_list(pre_list: Vec&lt;i32&gt;, in_list: Vec&lt;i32&gt;) -&gt; Option&lt;Vec&lt;i32&gt;&gt; {\n    if pre_list.is_empty() || in_list.is_empty() {\n        return None;\n    }\n\n    let len = pre_list.len();\n    assert_eq!(len, in_list.len());\n\n    let mut post_list = vec![0; len];\n\n    let in_record_map: HashMap&lt;i32, i32&gt; = in_list\n        .iter()\n        .enumerate()\n        .map(|(i, &amp;x)| (x, i as i32))\n        .collect();\n\n    process(\n        &amp;pre_list,\n        0,\n        len - 1,\n        &amp;in_list,\n        0,\n        len - 1,\n        &amp;mut post_list,\n        len - 1,\n        &amp;in_record_map,\n    );\n    Some(post_list)\n}\n\nfn process(\n    pre_list: &amp;Vec&lt;i32&gt;,\n    pre_start: usize,\n    pre_end: usize,\n    in_list: &amp;Vec&lt;i32&gt;,\n    in_start: usize,\n    in_end: usize,\n    post_list: &amp;mut Vec&lt;i32&gt;,\n    post_index: usize,\n    in_record_map: &amp;HashMap&lt;i32, i32&gt;,\n) -&gt; usize {\n    if pre_start &gt; pre_end {\n        return post_index;\n    }\n\n    post_list[post_index] = pre_list[pre_start];\n\n    if post_index == 0 {\n        return post_index;\n    }\n\n    let post_index = post_index - 1;\n\n    let split_index = in_record_map[&amp;pre_list[pre_start]] as usize;\n\n    let post_index = process(\n        pre_list,\n        split_index - in_start + pre_start + 1,\n        pre_end,\n        in_list,\n        split_index + 1,\n        in_end,\n        post_list,\n        post_index,\n        in_record_map,\n    );\n    return process(\n        pre_list,\n        pre_start + 1,\n        pre_start + split_index - in_start,\n        in_list,\n        in_start,\n        split_index - 1,\n        post_list,\n        post_index,\n        in_record_map,\n    );\n}\n\n#[cfg(test)]\n\nmod tests {\n    use std::vec;\n\n    #[test]\n    fn it_works() {\n        let pre_list = vec![1, 2, 4, 5, 3, 6, 7];\n        let in_list = vec![4, 2, 5, 1, 6, 3, 7];\n\n        let post_list = super::get_post_list(pre_list, in_list);\n\n        assert!(post_list.is_some());\n        assert_eq!(vec![4, 5, 2, 6, 7, 3, 1], post_list.unwrap());\n    }\n}\n</code></pre> \ud83d\udcda \u200b\u76f8\u5173\u200b\u6587\u7ae0\u200b\u63a8\u8350\u200b <ul> <li>\u200b\u6d3e\u5bf9\u200b\u7684\u200b\u6700\u5927\u200b\u5feb\u4e50\u200b\u503c\u200b</li> <li>helix-gpt\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bAI code\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b?</li> <li>C++\u200b\u4f7f\u7528\u200babseil-cpp\u200b\u9047\u5230\u200b\u7684\u200b\u5c0f\u200b\u95ee\u9898\u200b</li> <li>300\u200b\u884c\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bBoundedSPSCQueue</li> <li>netcap\u200b\u8c03\u8bd5\u200b</li> </ul>"},{"location":"flinks/","title":"\u53cb\u60c5\u94fe\u63a5","text":""},{"location":"flinks/#\u53cb\u60c5\u7ad9\u70b9","title":"\u53cb\u60c5\u200b\u7ad9\u70b9","text":"<p>\u200b\u4ee5\u4e0b\u200b\u7ad9\u70b9\u200b\u6309\u7167\u200b\u6dfb\u52a0\u200b\u7684\u200b\u65f6\u95f4\u200b\u987a\u5e8f\u6392\u5217\u200b\u3002</p> fasterthanli I make articles and videos about how computers work. teach Rust! arthurchiao \ud83d\udc4d\u200b\u643a\u7a0b\u200b\u4e91\u200b\u539f\u751f\u200b\uff0c\u200b\u7f51\u7ad9\u200b\u505a\u200b\u7684\u200b\u5f88\u200b\u597d\u200b\uff0c\u200b\u5305\u62ec\u200b\u4e00\u4e9b\u200b\u7ffb\u8bd1\u200b\u548c\u200b\u6df1\u5ea6\u200b\u6587\u7ae0\u200b\u3002"},{"location":"flinks/projects/","title":"\u6211\u200b\u7684\u200b\u9879\u76ee","text":""},{"location":"flinks/projects/#\u6211\u7684\u5f00\u6e90\u9879\u76ee","title":"\u6211\u200b\u7684\u200b\u5f00\u6e90\u200b\u9879\u76ee","text":"<ul> <li> <p> quickcheck-cpp</p> <p>\ud83d\ude3c\ud83d\ude3c\ud83d\ude3c\u200b\u57fa\u4e8e\u200b C++20 \u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u7b80\u5316\u7248\u200b\u7684\u200b quickcheck \u200b\u4e00\u4e2a\u200b\u57fa\u672c\u200b\u7684\u200b\u5c5e\u6027\u200b\u6d4b\u8bd5\u200b\u6846\u67b6\u200b\u3002</p> <p><code>quickcheck</code> \u200b\u662f\u200b\u4e00\u4e2a\u200b\u975e\u5e38\u200b\u5f3a\u5927\u200b\u7684\u200b\u5de5\u5177\u200b\uff01<code>quickcheck</code> \u200b\u662f\u200b\u4e00\u4e2a\u200b\u57fa\u4e8e\u200b\u5c5e\u6027\u200b\u6d4b\u8bd5\u200b\uff08Property-based Testing\uff09\u200b\u7684\u200b Rust \u200b\u5e93\u200b\uff0c\u200b\u7075\u611f\u200b\u6765\u81ea\u200b\u4e8e\u200b Haskell \u200b\u7684\u200b QuickCheck \u200b\u5e93\u200b\u3002\u200b\u5b83\u200b\u7684\u200b\u6838\u5fc3\u601d\u60f3\u200b\u662f\u200b\u901a\u8fc7\u200b\u81ea\u52a8\u200b\u751f\u6210\u200b\u5927\u91cf\u200b\u968f\u673a\u200b\u8f93\u5165\u200b\u6765\u200b\u6d4b\u8bd5\u4ee3\u7801\u200b\u7684\u200b\u5c5e\u6027\u200b\uff0c\u200b\u800c\u200b\u4e0d\u662f\u200b\u624b\u52a8\u200b\u7f16\u5199\u200b\u5177\u4f53\u200b\u7684\u200b\u6d4b\u8bd5\u7528\u4f8b\u200b\u3002</p> <p> Getting started</p> </li> <li> <p> vmtouch-rs</p> <p>\ud83d\udc32\ud83d\udc32\ud83d\udc32\u200b\u8be5\u200b\u9879\u76ee\u200b\u91c7\u7528\u200brust\u200b\u8bed\u8a00\u200b\u5b9e\u73b0\u200b\u4e86\u200bfincore\u200b\u5de5\u5177\u200b\u548c\u200bvmtouch\u200b\u5de5\u5177\u200b\u3002</p> <p>fincore\u200b\u5de5\u5177\u200b\u91c7\u7528\u200bmincore\u200b\u83b7\u53d6\u200b\u6587\u4ef6\u200b\u52a0\u8f7d\u200b\u5230\u200bcache\u200b\u4e2d\u200b\u7684\u200bpages\u3002fincore\u200b\u53ea\u80fd\u200b\u5bf9\u5355\u200b\u6587\u4ef6\u200b\u4ee5\u53ca\u200b*\u200b\u6587\u4ef6\u200b\u8fdb\u884c\u200b\u7edf\u8ba1\u200b\uff0c\u200b\u4e0d\u80fd\u200b\u9012\u5f52\u200b\u7edf\u8ba1\u200b\u76ee\u5f55\u200b\u3002\u200b\u76f8\u6bd4\u4e4b\u4e0b\u200bvmtouch\u200b\u66f4\u52a0\u200b\u5f3a\u5927\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u7edf\u8ba1\u200b\u76ee\u5f55\u200b\u4e2d\u200b\u6587\u4ef6\u200b\u52a0\u8f7d\u200b\u5230\u200b\u5185\u5b58\u200b\u4e2d\u200b\u7684\u200bpages\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u5bf9\u200b\u5185\u5b58\u200b\u4e2d\u200bpage\u200b\u8fdb\u884c\u200b\u9501\u4f4f\u200b(lock)\u3001\u200b\u56de\u6536\u200b(evict)\u200b\u7b49\u200b\u3002</p> <p> Getting started</p> </li> <li> <p> part-downloader</p> <p>\u2694\ufe0f\u2694\ufe0f\u2694\ufe0f\u200b\u91c7\u7528\u200brust\u200b\u5b9e\u73b0\u200b\u7684\u200b\u4e00\u4e2a\u200b\u547d\u4ee4\u884c\u200b\u5de5\u5177\u200b\u3002\u200b\u5c06\u200b\u5927\u200b\u6587\u4ef6\u200b\u5206\u6210\u200b\u591a\u4e2a\u200bpart\u200b\u4e0b\u8f7d\u200b\uff0c\u200b\u7136\u540e\u200b\u518d\u200b\u5408\u5e76\u200b\u6587\u4ef6\u200b\u3002\u200b\u5b9e\u73b0\u200b\u539f\u7406\u200b\uff0c\u200b\u91c7\u7528\u200b\u4e86\u200bHTTP\u200b\u8bf7\u6c42\u200b\u4e2d\u200b\u7684\u200bRANGE Header\u200b\u6307\u5b9a\u200b\u8303\u56f4\u200b\u3002</p> <p> Getting started</p> </li> <li> <p> nvim-rotate-chars</p> <p>\ud83d\udc0e\ud83d\udc0e\ud83d\udc0e\u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b\u91c7\u7528\u200bnvim-oxi\u200b\u5f00\u53d1\u200b\u7684\u200bnvim\u200b\u63d2\u4ef6\u200b\uff0c\u200b\u7528\u4e8e\u200b\u65cb\u8f6c\u200b\u9009\u4e2d\u200b\u7684\u200b\u6587\u672c\u200b\u5b57\u7b26\u200b\u3002</p> <p> Getting started</p> </li> <li> <p> nvim_unicode_converter</p> <p>\ud83d\udc03\ud83d\udc03\ud83d\udc03\u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b\u91c7\u7528\u200bnvim-oxi\u200b\u5f00\u53d1\u200b\u7684\u200bnvim\u200b\u63d2\u4ef6\u200b\uff0c\u200b\u7528\u4e8e\u200b\u5c06\u200bunicode\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u4e2d\u6587\u200b\u6c49\u5b57\u200b\u7b49\u200b\u5b57\u7b26\u200b\u3002</p> <p> Getting started</p> </li> <li> <p> qps_client</p> <p>\ud83d\udc35\ud83d\udc35\ud83d\udc35\u200b\u670d\u52a1\u200b\u8bf7\u6c42\u200b benchmark \u200b\u5de5\u5177\u200b\uff0c\u200b\u7528\u4e8e\u200b\u6d4b\u8bd5\u200b\u670d\u52a1\u200b\u7684\u200bqps\u200b\u548c\u200bdelay\u3002</p> <p> Getting started</p> </li> <li> <p> clang-format-cfg-generator-rs</p> <p>\ud83e\udd8d\ud83e\udd8d\ud83e\udd8dclang-format\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u751f\u6210\u200b\u5de5\u5177\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u751f\u6210\u200bclang-format\u200b\u7684\u200b\u914d\u7f6e\u6587\u4ef6\u200b\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u751f\u6210\u200b\u683c\u5f0f\u5316\u200b\u6587\u4ef6\u200b\u7684\u200b\u6a21\u7248\u200b\u3002</p> <p> Getting started</p> </li> <li> <p> F16cpp</p> <p>\ud83d\udc2f\ud83d\udc2f\ud83d\udc2fF16.hpp\u200b\u5b9e\u73b0\u200b\u4e86\u200bIEEE754-2008\u200b\u6807\u51c6\u200b\u7684\u200bFloat16\u200b\u7c7b\u578b\u200b\u8868\u793a\u200b, \u200b\u4ee5\u53ca\u200b\u5b9e\u73b0\u200b\u4e86\u200bFloat32\u200b\u548c\u200bFloat16\u200b\u7c7b\u578b\u200b\u7684\u200b\u4e92\u76f8\u200b\u8f6c\u6362\u200b\u3002F16\u200b\u7c7b\u578b\u200b\u7684\u200b\u76f4\u63a5\u200b\u6bd4\u8f83\u200b\u5927\u5c0f\u200b\u65b9\u6cd5\u200b\u3002</p> <p> Getting started</p> </li> <li> <p> docker-rs</p> <p>\ud83d\udc3c\ud83d\udc3c\ud83d\udc3c\u200b\u4f7f\u7528\u200brust\u200b\u5b9e\u73b0\u200b\u7b80\u5355\u200b\u7684\u200bdocker\uff0c\u200b\u719f\u6089\u200blinux cgroups\u3001pivotRoot\u3001overlayfs\u200b\u7b49\u200b\u3002\ud83d\udc3c\ud83d\udc3c\ud83d\udc3c</p> <p> Getting started</p> </li> </ul>"},{"location":"flinks/some_useful_links/","title":"Some useful links","text":""},{"location":"flinks/some_useful_links/#\u4e00\u4e9b\u6587\u7ae0","title":"\u4e00\u4e9b\u200b\u6587\u7ae0","text":"\u5206\u7c7b\u200b \u200b\u94fe\u63a5\u200b \u200b\u63cf\u8ff0\u200b ftrace https://linux.cn/article-9838-1.html ftrace gdb https://github.com/hellogcc/100-gdb-tips/blob/master/refcard.pdf\ufefflinux.cn\u200b\u7ffb\u8bd1\u200b\u7684\u200b\u4e00\u4e9b\u200b\u5e38\u7528\u200b\u7684\u200b\u547d\u4ee4\u200b\u00a0https://linux.cn/article-8900-1.html\ufeff100gdb\u200b\u7684\u200b\u5c0f\u200b\u6280\u5de7\u200b\uff0c\u200b\u5185\u5bb9\u200b\u4e0d\u200b\u591a\u200b\uff0c\u200b\u503c\u5f97\u4e00\u770b\u200b\uff1ahttps://www.kancloud.cn/wizardforcel/gdb-tips-100/146748\ufeffgdb\u200b\u7684\u200b\u4e00\u4e9b\u200b\u8c03\u8bd5\u200b\u6587\u6863\u200b\uff1ahttp://www.unknownroad.com/rtfm/gdbtut/ gdb \u200b\u5de5\u5177\u200b https://cppinsights.io/ \u200b\u67e5\u770b\u200b\u7f16\u8bd1\u200b\u7ed3\u679c\u200bhttps://godbolt.org/ \u200b\u67e5\u770b\u200b\u6c47\u7f16\u200b\ufeffhttps://sysctl-explorer.net/net/ipv4/tcp_fack/ \u200b\u67e5\u770b\u200bsysctl\u200b\u7684\u200b\u53c2\u6570\u200b\u8bf4\u660e\u200b\u7684\u200b\u4e00\u4e2a\u200b\u7f51\u7ad9\u200b\ufeffhttps://code.google.com/archive/p/shflags/\ufeff\ufeffhttps://raw.githubusercontent.com/kward/shflags/master/shflags\ufeffhttps://cppx.godbolt.org/z/cvWM3f \u200b\u535a\u5ba2\u200b https://zhuanlan.zhihu.com/c_130773972 smartx\u200b\u7684\u200b\u77e5\u4e4e\u200b\u4e13\u680f\u200b\uff0c\u200b\u6709\u200b\u5f88\u591a\u200b\u5173\u4e8e\u200b\u5b58\u50a8\u200b\uff0c\u200b\u7f16\u7a0b\u200b\u76f8\u5173\u200b\u7684\u200b\u5e72\u8d27\u200b\ufeffhttps://preshing.com/ \u200b\u5173\u4e8e\u200b\u539f\u5b50\u200b\u53d8\u91cf\u200b\u4ee5\u53ca\u200bmemory barrier\u200b\u7684\u200bpost\u200b\u975e\u5e38\u200b\u8457\u540d\u200b\ufeff\ufeffhttps://dirtysalt.github.io/html/blogs.htmlhttps://colobu.com/about/  go\u200b\u8bed\u8a00\u200b\u548c\u200brust\u200b\u8bed\u8a00\u200b\u5e03\u9053\u200b\u5e08\u200b\uff0c \u200b\u767e\u5ea6\u200b Go CMC \u200b\u59d4\u5458\u4f1a\u200b\u4e3b\u5e2d\u200b\u3002https://www.brendangregg.com/linuxperf.html \u200b\u4f5c\u8005\u200b\u662f\u200b\u7f51\u98de\u200b\u7684\u200b\u4e00\u540d\u200b\u5de5\u7a0b\u5e08\u200b\uff0c\u200b\u5199\u200b\u4e86\u200b\u975e\u5e38\u200b\u591a\u200b\u7684\u200b\u7f51\u7edc\u200b\u8c03\u4f18\u200b\uff0clinux\u200b\u7cfb\u7edf\u200b\u6027\u80fd\u200b\u8c03\u4f18\u200b\u7684\u200bpostshttps://tonybai.com/articles/ golanghttps://draveness.me/ \u200b\u6240\u6709\u200b\u7684\u200bpost\u200b\u90fd\u200b\u662f\u200b\u4ee5\u200b\u4e3a\u4ec0\u4e48\u200b\u5f00\u5934\u200b\u505a\u200b\u4e3a\u200b\u5207\u5165\u70b9\u200b\u8fdb\u884c\u200b\u5206\u6790\u200b\uff0c\u200b\u56fe\u200b\u505a\u200b\u7684\u200b\u975e\u5e38\u200b\u4e0d\u9519\u200bhttps://kingsamchen.github.io/source-code-reading/ \u200b\u4e00\u4e9b\u200b\u6e90\u7801\u200b\u9605\u8bfb\u200b\u548c\u200b\u603b\u7ed3"},{"location":"flinks/some_useful_links/#\u9879\u76ee","title":"\u9879\u76ee","text":"\u94fe\u63a5\u200b \u200b\u63cf\u8ff0\u200b https://github.com/mrpi/CoAwaitLib co::await at any point of your code with stackfull coroutines (C++14) https://github.com/taskflow/taskflow A General-purpose Task-parallel Programming System using Modern C++ https://github.com/apache/brpc/ brpc is an Industrial-grade RPC framework using C++ Language, which is often used in high performance system such as Search, Storage, Machine learning, Advertisement, Recommendation etc. \u201cbrpc\u201d means \u201cbetter RPC\u201d. https://github.com/katanemo/archgw Arch is an intelligent gateway for agents. Engineered with (fast) LLMs for the secure handling, rich observability, and seamless integration of prompts with your APIs - all outside business logic. Built by the core contributors of Envoy proxy, on Envoy. https://github.com/upvpn/upvpn-app UpVPN is the world\u2019s first Serverless VPN. The VPN app is available for macOS, Linux, Windows, tvOS, iOS, and Android. The UpVPN service can also be used with any WireGuard-compatible client through the Web Device feature https://github.com/kungfu-origin/kungfu \u200b\u91cf\u5316\u200b https://github.com/aklomp/base64 base64"},{"location":"flinks/some_useful_links/#bigmodel","title":"BigModel","text":"\u94fe\u63a5\u200b \u200b\u63cf\u8ff0\u200b https://openbmb.cn/home MiniCPM-V https://github.com/huggingface/text-generation-inference Large Language Model Text Generation Inference"},{"location":"flinks/some_useful_links/#doc-links","title":"Doc Links","text":"\u94fe\u63a5\u200b \u200b\u63cf\u8ff0\u200b https://abseil.io/about/design/swisstables https://protobuf.dev/reference/cpp/arenas/ C++ Arena Allocation Guide https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#S-concurrency"},{"location":"flinks/some_useful_links/#ai-\u5e94\u7528","title":"AI \u200b\u5e94\u7528","text":"\u94fe\u63a5\u200b \u200b\u63cf\u8ff0\u200b https://github.com/mediar-ai/screenpipe"},{"location":"flinks/some_useful_links/#code-tool","title":"Code Tool","text":"\u94fe\u63a5\u200b \u200b\u63cf\u8ff0\u200b https://cppinsights.io/"},{"location":"flinks/some_useful_links/#terminal-tool","title":"Terminal Tool","text":"\u94fe\u63a5\u200b \u200b\u63cf\u8ff0"},{"location":"flinks/some_useful_links/#other-tool","title":"Other Tool","text":"\u94fe\u63a5\u200b \u200b\u63cf\u8ff0\u200b rufus\u3001ventoy u\u200b\u76d8\u200b inno setup\u3001nsis windows\u200b\u6253\u5305\u200b\u5de5\u5177"},{"location":"notes/%23AI%E7%AF%87/llama/gguf%E4%BD%BF%E7%94%A8mmap%E8%BF%9B%E8%A1%8C%E9%AB%98%E6%95%88%E8%AF%BB%E5%8F%96%E5%92%8C%E4%BF%9D%E5%AD%98/","title":"Gguf\u200b\u4f7f\u7528\u200bmmap\u200b\u8fdb\u884c\u200b\u9ad8\u6548\u200b\u8bfb\u53d6\u200b\u548c\u200b\u4fdd\u5b58","text":""},{"location":"notes/%23AI%E7%AF%87/llama/gguf%E4%BD%BF%E7%94%A8mmap%E8%BF%9B%E8%A1%8C%E9%AB%98%E6%95%88%E8%AF%BB%E5%8F%96%E5%92%8C%E4%BF%9D%E5%AD%98/#llama\u4e2d\u7684gguf\u683c\u5f0f\u5982\u4f55\u52a0\u8f7d\u6a21\u578b\u6587\u4ef6","title":"llama\u200b\u4e2d\u200b\u7684\u200bGGUF\u200b\u683c\u5f0f\u200b\u5982\u4f55\u200b\u52a0\u8f7d\u200b\u6a21\u578b\u200b\u6587\u4ef6\u200b\uff1f","text":"<p>gguf\u200b\u662f\u200bgg\u200b\u5927\u4f6c\u200b\u53d1\u660e\u200b\u7684\u200b\u4fdd\u5b58\u200bllm\u200b\u6a21\u578b\u200b\u7684\u200b\u683c\u5f0f\u200b\u3002 \u200b\u4fdd\u5b58\u200b\u4e86\u200bheader\u3001k-v\u3001tensor\uff0c\u200b\u652f\u6301\u200b\u591a\u79cd\u200b\u6a21\u578b\u200b\uff0c\u200b\u4fdd\u5b58\u200bGPT\u3001Phi3\u3001transformer\u200b\u7b49\u7b49\u200b\uff0c\u200b\u652f\u6301\u200b\u6269\u5c55\u200b\u3002 \u200b\u5728\u200bgguf\u200b\u7ecf\u8fc7\u200b\u591a\u4e2a\u200b\u7248\u672c\u200b\u8fdb\u5316\u200b\u800c\u200b\u6765\u200b\uff0cggml\u3001GGJT\u3002 \u200b\u4ece\u200bGGJT\u200b\u5f00\u59cb\u200b\u652f\u6301\u200bmmap\u3002 \u200b\u6211\u4eec\u200b\u63a5\u4e0b\u6765\u200b\u8981\u200b\u804a\u200b\u4e00\u804a\u200b\u4e3a\u4ec0\u4e48\u200b\u8981\u200b\u652f\u6301\u200bmmap\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u6709\u200b\u4ec0\u4e48\u200b\u4f5c\u7528\u200b\uff1f gguf\u200b\u5728\u200b\u4fdd\u5b58\u200btensor\u200b\u6570\u636e\u200b\u65f6\u200b\u8fdb\u884c\u200b\u4e86\u200balign\u200b\u5bf9\u9f50\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u4f7f\u7528\u200bmmap\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u9ad8\u6548\u200b\u5feb\u901f\u200b\u7684\u200b\u52a0\u8f7d\u200b\u6570\u636e\u200b\u3002</p> <p>\u200b\u4e0b\u9762\u200b\u4ecb\u7ecd\u200b\u7684\u200b\u6e90\u7801\u200b\u90fd\u200b\u51fa\u81ea\u200bllama-cpp\u200b\u9879\u76ee\u200b\u4e2d\u200bllama.h\u200b\u548c\u200bllama.cpp\u3002</p>"},{"location":"notes/%23AI%E7%AF%87/llama/gguf%E4%BD%BF%E7%94%A8mmap%E8%BF%9B%E8%A1%8C%E9%AB%98%E6%95%88%E8%AF%BB%E5%8F%96%E5%92%8C%E4%BF%9D%E5%AD%98/#\u4e00\u8d77\u7aa5\u63a2\u6e90\u7801","title":"\u4e00\u8d77\u200b\u7aa5\u63a2\u200b\u6e90\u7801","text":"<p>\u200b\u5173\u952e\u200b\u662f\u200balign\u200b\u5bf9\u9f50\u200b\uff0c\u200b\u7136\u540e\u200b\u65b9\u4fbf\u4f7f\u7528\u200bmmap\u200b\u9ad8\u6548\u200bload\u200b\u8bfb\u53d6\u6570\u636e\u200b\u3002 \u200b\u5728\u200bllama_model_params\u200b\u4e2d\u200b\u5b9a\u4e49\u200b\u4e86\u200buse_mmap\uff0c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u547d\u4ee4\u884c\u200b\u7b49\u200b\u63a7\u5236\u200b\uff0c\u200b\u662f\u5426\u200b\u8981\u200b\u4f7f\u7528\u200bmmap\u3002 </p>C++<pre><code>// llama.h\nstruct llama_model_params {\n    bool use_mmap          = true;  // use mmap for faster loads\n    bool use_mlock         = false; // use mlock to keep model in memory\n}\n</code></pre> \u200b\u5728\u200bllama\u200b\u7684\u200b\u5b9e\u73b0\u200b\u4e2d\u200b\uff0cmmap\u200b\u5728\u200bwin\u200b\u5e73\u53f0\u200b\u548c\u200blinux\u200b\u5e73\u53f0\u200b\u5b9e\u73b0\u200bapi\u200b\u662f\u200b\u4e0d\u540c\u200b\u7684\u200b\uff0c\u200b\u901a\u8fc7\u200b\u5b8f\u200b\u5b9a\u4e49\u200b\u4f7f\u7528\u200b\u4e0d\u540c\u200b\u7684\u200b\u4ee3\u7801\u6bb5\u200b\uff0c\u200b\u4e0b\u9762\u200b\u4ecb\u7ecd\u200blinux\u200b\u5e73\u53f0\u200b\u5b9e\u73b0\u200b\uff0cwin\u200b\u53ef\u4ee5\u200b\u9605\u8bfb\u200b\u6e90\u7801\u200b\u3002<p></p>"},{"location":"notes/%23AI%E7%AF%87/llama/gguf%E4%BD%BF%E7%94%A8mmap%E8%BF%9B%E8%A1%8C%E9%AB%98%E6%95%88%E8%AF%BB%E5%8F%96%E5%92%8C%E4%BF%9D%E5%AD%98/#llama\u83b7\u53d6tensor\u6570\u636e","title":"llama\u200b\u83b7\u53d6\u200btensor\u200b\u6570\u636e","text":"<p>\u200b\u5728\u200b\u4e86\u89e3\u200bmmap\u200b\u4e4b\u524d\u200b\uff0c\u200b\u5148\u200b\u4ece\u200bllama\u200b\u7684\u200b\u4f7f\u7528\u200b\u4e0a\u200b\u9010\u6b65\u200b\u8fdb\u884c\u200b\u7aa5\u63a2\u200b\uff0c\u200b\u901a\u8fc7\u200bload_data_for\u200b\u51fd\u6570\u200b\u5bf9\u200bggml_tensor\u200b\u6743\u91cd\u200b\u6570\u636e\u200b\u8fdb\u884c\u200b\u7684\u200b\u8bfb\u53d6\u200b\u3002\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u5206\u4e3a\u200b\u4e24\u79cd\u200b\uff0c\u200b\u4ece\u200bmmap\u200b\u8bfb\u53d6\u200b\uff0c\u200b\u4ece\u200bfile\u200b\u8bfb\u53d6\u200b\u3002 </p>C++<pre><code>// llama.cpp\nvoid load_data_for(struct ggml_tensor * cur) const {\n    const auto &amp; w = require_weight(ggml_get_name(cur));\n\n    // \u200b\u5982\u679c\u200b\u4f7f\u7528\u200bmmap\uff0c\u200b\u76f4\u63a5\u200b\u4ece\u200bmmap\u200b\u83b7\u53d6\u6570\u636e\u200b\n    if (use_mmap) {\n        const auto &amp; mapping = mappings.at(w.idx);\n        if (cur-&gt;data == nullptr) {\n            // \u200b\u5c06\u200b\u6307\u9488\u200b\u8d4b\u503c\u200b\u7ed9\u200bcur-&gt;data\n            cur-&gt;data = (uint8_t *)mapping-&gt;addr + w.offs;\n        } else {\n            // \u200b\u62f7\u8d1d\u200b\u6570\u636e\u200b\u5230\u200bcur-&gt;data\n            memcpy(cur-&gt;data, (uint8_t *)mapping-&gt;addr + w.offs, ggml_nbytes(cur));\n        }\n    } else {\n        // \u200b\u901a\u8fc7\u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26\u200b\u8bfb\u53d6\u6570\u636e\u200b\n        GGML_ASSERT(cur-&gt;data != nullptr);\n        GGML_ASSERT(w.idx &lt; files.size());\n        const auto &amp; file = files.at(w.idx);\n        file-&gt;seek(w.offs, SEEK_SET);\n        file-&gt;read_raw(cur-&gt;data, ggml_nbytes(cur));\n    }\n\n    if (check_tensors &amp;&amp; !ggml_validate_row_data(cur-&gt;type, cur-&gt;data, ggml_nbytes(cur))) {\n        throw std::runtime_error(format(\"tensor '%s' has invalid data\", ggml_get_name(cur)));\n    }\n}\n</code></pre><p></p> <p>\u200b\u4e24\u79cd\u200b\u6570\u636e\u7ed3\u6784\u200bllama_mmap\u200b\u548c\u200bllama_file\uff0c\u200b\u5206\u522b\u200b\u5b9a\u4e49\u200b\u4e86\u200bmmap\u200b\u65b9\u5f0f\u200b\u548c\u200bfile\u200b\u8bfb\u53d6\u200b\u65b9\u5f0f\u200b\u3002</p>"},{"location":"notes/%23AI%E7%AF%87/llama/gguf%E4%BD%BF%E7%94%A8mmap%E8%BF%9B%E8%A1%8C%E9%AB%98%E6%95%88%E8%AF%BB%E5%8F%96%E5%92%8C%E4%BF%9D%E5%AD%98/#llama_mmap\u7c7b\u7684\u5b9e\u73b0","title":"llama_mmap\u200b\u7c7b\u200b\u7684\u200b\u5b9e\u73b0","text":"<p>\u200b\u5148\u200b\u770b\u770b\u200bllama_mmap, \u200b\u5728\u200bllama_mmap\u200b\u7684\u200b\u6784\u9020\u51fd\u6570\u200b\u4e2d\u200b\uff0c + 1. \u200b\u5148\u200b\u83b7\u53d6\u200bfile\u200b\u7684\u200bfd\u200b\u6587\u4ef6\u200b\u63cf\u8ff0\u7b26\u200b + 2. \u200b\u8c03\u7528\u200bmmap\u200b\u51fd\u6570\u200b\uff0c\u200b\u83b7\u53d6\u200b\u5230\u200b\u6620\u5c04\u200b\u7684\u200baddr\uff0c\u200b\u4e00\u4e2a\u200bllama_mmap\u200b\u5c31\u200b\u4fdd\u5b58\u200b\u4e86\u200b\u6620\u5c04\u200b\u6587\u4ef6\u200b\u540e\u200b\u7684\u200b\u5730\u5740\u200b\u548c\u200b\u6587\u4ef6\u200b\u7684\u200bsize + 3. \u200b\u5c06\u200b\u6587\u4ef6\u200bsize\u200b\u4fdd\u5b58\u200b\u5230\u200bmapped_fragments\u200b\u4e2d\u200b \u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u9664\u4e86\u200b\u4e0a\u9762\u200b\u7684\u200b\u903b\u8f91\u200b\uff0c\u200b\u8fd8\u6709\u200b\u4e00\u4e9b\u200b\u8c03\u7528\u200bposix_fadvise\u200b\u51fd\u6570\u200b\u7684\u200b\u4f18\u5316\u200b\uff0c\u200b\u6bd4\u5982\u200b\u5efa\u8bae\u200b\u5185\u6838\u200b\u987a\u5e8f\u200b\u8bfb\u53d6\u200b\u6587\u4ef6\u200b\u3001\u200b\u9884\u53d6\u200b\u7b49\u200b\u3002 </p>C++<pre><code>struct llama_mmap {\n    void * addr;\n    size_t size;\n\n    // list of mapped fragments (first_offset, last_offset)\n    std::vector&lt;std::pair&lt;size_t, size_t&gt;&gt; mapped_fragments;\n\n    llama_mmap(struct llama_file * file, size_t prefetch = (size_t) -1 /* -1 = max value */, bool numa = false) {\n        size = file-&gt;size;\n        int fd = fileno(file-&gt;fp);\n        int flags = MAP_SHARED;\n        // prefetch/readahead impairs performance on NUMA systems\n        if (numa)  { prefetch = 0; }\n    #ifdef __linux__\n        // advise the kernel to read the file sequentially (increases readahead)\n        if (posix_fadvise(fd, 0, 0, POSIX_FADV_SEQUENTIAL)) {\n            LLAMA_LOG_WARN(\"warning: posix_fadvise(.., POSIX_FADV_SEQUENTIAL) failed: %s\\n\",\n                    strerror(errno));\n        }\n        if (prefetch) { flags |= MAP_POPULATE; }\n    #endif\n        addr = mmap(NULL, file-&gt;size, PROT_READ, flags, fd, 0);\n        if (addr == MAP_FAILED) { // NOLINT\n            throw std::runtime_error(format(\"mmap failed: %s\", strerror(errno)));\n        }\n\n        if (prefetch &gt; 0) {\n            // advise the kernel to preload the mapped memory\n            if (posix_madvise(addr, std::min(file-&gt;size, prefetch), POSIX_MADV_WILLNEED)) {\n                LLAMA_LOG_WARN(\"warning: posix_madvise(.., POSIX_MADV_WILLNEED) failed: %s\\n\",\n                        strerror(errno));\n            }\n        }\n        if (numa) {\n            // advise the kernel not to use readahead\n            // (because the next page might not belong on the same node)\n            if (posix_madvise(addr, file-&gt;size, POSIX_MADV_RANDOM)) {\n                LLAMA_LOG_WARN(\"warning: posix_madvise(.., POSIX_MADV_RANDOM) failed: %s\\n\",\n                        strerror(errno));\n            }\n        }\n\n        // initialize list of mapped_fragments\n        mapped_fragments.emplace_back(0, file-&gt;size);\n    }\n}\nusing llama_mmaps = std::vector&lt;std::unique_ptr&lt;llama_mmap&gt;&gt;;\n</code></pre><p></p>"},{"location":"notes/%23AI%E7%AF%87/llama/gguf%E4%BD%BF%E7%94%A8mmap%E8%BF%9B%E8%A1%8C%E9%AB%98%E6%95%88%E8%AF%BB%E5%8F%96%E5%92%8C%E4%BF%9D%E5%AD%98/#llama_file\u7c7b\u7684\u5b9e\u73b0","title":"llama_file\u200b\u7c7b\u200b\u7684\u200b\u5b9e\u73b0","text":"<p>llama_file\u200b\u7c7b\u200b\u4f7f\u7528\u200bfopen\u200b\u6253\u5f00\u200b\u4e86\u200b\u6587\u4ef6\u200b\uff0c\u200b\u5c01\u88c5\u200b\u4e86\u200bfread\u3001fwrite\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u4fdd\u5b58\u200b\u4e86\u200b\u6587\u4ef6\u200b\u6d41\u200b\u6307\u9488\u200b\u548c\u200bsize\u3002</p> C++<pre><code>struct llama_file {\n    // use FILE * so we don't have to re-open the file to mmap\n    FILE * fp; // \u200b\u6587\u4ef6\u200b\u6d41\u200b\u6307\u9488\u200b\n    size_t size; // \u200b\u6587\u4ef6\u200bsize\n\n    llama_file(const char * fname, const char * mode) {\n        // ggml_fopen\u200b\u5c01\u88c5\u200b\u4e86\u200bwin32\u200b\u548c\u200blinux api\u200b\u7684\u200b\u533a\u522b\u200b\uff0c\u200b\u5728\u200blinux\u200b\u5b9e\u73b0\u200b\u8fd9\u91cc\u200b\u76f4\u63a5\u200b\u662f\u200bfopen(fname, mode)\n        fp = ggml_fopen(fname, mode);\n        if (fp == NULL) {\n            throw std::runtime_error(format(\"failed to open %s: %s\", fname, strerror(errno)));\n        }\n        seek(0, SEEK_END);\n        size = tell();\n        seek(0, SEEK_SET);\n    }\n}\n</code></pre> <p>fopen\u200b\u548c\u200bopen\u200b\u6700\u200b\u4e3b\u8981\u200b\u7684\u200b\u533a\u522b\u200b\u662f\u200bfopen\u200b\u5728\u200b\u7528\u6237\u200b\u6001\u4e0b\u200b\u5c31\u200b\u6709\u200b\u4e86\u200b\u7f13\u5b58\u200b\uff0c\u200b\u5728\u200b\u8fdb\u884c\u200bread\u200b\u548c\u200bwrite\u200b\u7684\u200b\u65f6\u5019\u200b\u51cf\u5c11\u200b\u4e86\u200b\u7528\u6237\u200b\u6001\u200b\u548c\u200b\u5185\u6838\u200b\u6001\u200b\u7684\u200b\u5207\u6362\u200b\uff0c\u200b\u800c\u200bopen\u200b\u5219\u200b\u6bcf\u6b21\u200b\u90fd\u200b\u9700\u8981\u200b\u8fdb\u884c\u200b\u5185\u6838\u200b\u6001\u200b\u548c\u200b\u7528\u6237\u200b\u6001\u200b\u7684\u200b\u5207\u6362\u200b\uff1b\u200b\u8868\u73b0\u200b\u4e3a\u200b\uff0c\u200b\u5982\u679c\u200b\u987a\u5e8f\u200b\u8bbf\u95ee\u200b\u6587\u4ef6\u200b\uff0cfopen\u200b\u7cfb\u5217\u200b\u7684\u200b\u51fd\u6570\u200b\u8981\u200b\u6bd4\u200b\u76f4\u63a5\u200b\u8c03\u7528\u200bopen\u200b\u7cfb\u5217\u200b\u5feb\u200b\uff1b\u200b\u5982\u679c\u200b\u968f\u673a\u200b\u8bbf\u95ee\u200b\u6587\u4ef6\u200bopen\u200b\u8981\u200b\u6bd4\u200bfopen\u200b\u5feb\u200b\u3002fopen\u200b\u8fd4\u56de\u200b\u6587\u4ef6\u200b\u6d41\u800c\u200b\u4e0d\u662f\u200blinux\u200b\u4e0b\u200b\u6587\u4ef6\u200b\u53e5\u67c4\u200b\u3002</p> <p>\u200b\u6240\u4ee5\u200b\uff0cllama\u200b\u5982\u679c\u200b\u4e0d\u200b\u4f7f\u7528\u200bmmap\u200b\u7684\u200b\u65b9\u5f0f\u200b\uff08use_mmap = false\u200b\u65f6\u200b\uff09\uff0c\u200b\u91c7\u7528\u200bfile\u200b\u8bfb\u53d6\u6570\u636e\u200b\u5728\u200blinux\u200b\u4e0b\u200b\u662f\u200b\u4f7f\u7528\u200bfread\u3001fwrite api\u200b\u5b9e\u73b0\u200b\u7684\u200b\u3002</p>"},{"location":"notes/%23AI%E7%AF%87/llama/gguf%E4%BD%BF%E7%94%A8mmap%E8%BF%9B%E8%A1%8C%E9%AB%98%E6%95%88%E8%AF%BB%E5%8F%96%E5%92%8C%E4%BF%9D%E5%AD%98/#llama\u521d\u59cb\u5316mmap","title":"llama\u200b\u521d\u59cb\u5316\u200bmmap","text":"<p>\u200b\u6709\u200b\u4e86\u200b\u4e0a\u9762\u200b\u7684\u200b\u6570\u636e\u7ed3\u6784\u200b\u4ecb\u7ecd\u200b\uff0c\u200b\u6211\u4eec\u200b\u518d\u200b\u6765\u200b\u770b\u770b\u200bmmaping\u200b\u521d\u59cb\u5316\u200b\u64cd\u4f5c\u200b\u5c31\u200b\u5f88\u200b\u6e05\u6670\u200b\u4e86\u200b\u3002\u200b\u5c06\u200b\u6a21\u578b\u200b\u6587\u4ef6\u200b\u8fdb\u884c\u200bmmap\uff0c\u200b\u4fdd\u5b58\u200bmmap\u200b\u4ee5\u540e\u200b\u7684\u200b\u5730\u5740\u200b\u3002\u200b\u5728\u200b\u4e0a\u9762\u200b\u63d0\u5230\u200b\u7684\u200bload_data_for()\u200b\u51fd\u6570\u200b\u4e2d\u200b\u4f7f\u7528\u200b\uff0cllama_mmap\u200b\u4fdd\u5b58\u200b\u7684\u200b\u5730\u5740\u200b\u8bfb\u53d6\u6570\u636e\u200b\u3002</p> <p>init_mappings\u200b\u51fd\u6570\u200b\u548c\u200bload_data_for\u200b\u51fd\u6570\u200b\u4e00\u6837\u200b\uff0c\u200b\u90fd\u200b\u5728\u200bllama_model_loader\u200b\u7c7b\u4e2d\u200b\u5b9a\u4e49\u200b\uff1a </p>C++<pre><code>struct llama_model_loader {\n    bool use_mmap = false;\n\n    llama_files files;\n    llama_mmaps mappings;\n}\n</code></pre><p></p> C++<pre><code>// llama.cpp\nvoid init_mappings(bool prefetch = true, llama_mlocks * mlock_mmaps = nullptr) {\n    if (use_mmap) {\n        mappings.reserve(files.size());\n        mmaps_used.reserve(files.size());\n        for (const auto &amp; file : files) {\n            std::unique_ptr&lt;llama_mmap&gt; mapping(new llama_mmap(file.get(), prefetch ? -1 : 0, ggml_is_numa()));\n            mmaps_used.emplace_back(mapping-&gt;size, 0);\n            if (mlock_mmaps) {\n                std::unique_ptr&lt;llama_mlock&gt; mlock_mmap(new llama_mlock());\n                mlock_mmap-&gt;init(mapping-&gt;addr);\n                mlock_mmaps-&gt;emplace_back(std::move(mlock_mmap));\n            }\n            mappings.emplace_back(std::move(mapping));\n        }\n    }\n\n    // compute the total size of all tensors for progress reporting\n    for (auto &amp; w : weights) {\n        size_data += ggml_nbytes(w.tensor);\n    }\n}\n</code></pre>"},{"location":"notes/%23AI%E7%AF%87/llama/gguf%E4%BD%BF%E7%94%A8mmap%E8%BF%9B%E8%A1%8C%E9%AB%98%E6%95%88%E8%AF%BB%E5%8F%96%E5%92%8C%E4%BF%9D%E5%AD%98/#\u518d\u6765\u804a\u4e00\u804amlock","title":"\u518d\u6765\u200b\u804a\u200b\u4e00\u804a\u200bmlock","text":"<p>\u200b\u4e66\u200b\u63a5\u4e0a\u200b\u6587\u200b\uff0c\u200b\u5728\u200bllama_model_params\u200b\u4e2d\u200b\u5b9a\u4e49\u200b\u4e86\u200buse_mmap\uff0c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u547d\u4ee4\u884c\u200b\u7b49\u200b\u63a7\u5236\u200b\uff0c\u200b\u662f\u5426\u200b\u8981\u200b\u4f7f\u7528\u200bmmap\u3002 </p>C++<pre><code>// llama.h\nstruct llama_model_params {\n    bool use_mmap          = true;  // use mmap for faster loads\n    bool use_mlock         = false; // use mlock to keep model in memory\n}\n</code></pre> \u200b\u5728\u200b\u524d\u9762\u200b\u7684\u200bllama_model_params\u200b\u53c2\u6570\u200b\u4e2d\u200b\u9664\u4e86\u200b\u63d0\u5230\u200b\u4e86\u200buse_mmap\u200b\u4ee5\u5916\u200b\uff0c\u200b\u8fd8\u6709\u200b\u4e00\u4e2a\u200b\u53c2\u6570\u200buse_mlock\u3002\u200b\u5b83\u200b\u7684\u200b\u610f\u601d\u200b\u662f\u200b\u5c06\u200b\u6a21\u578b\u200b\u7684\u200b\u5185\u5b58\u200b\u9501\u4f4f\u200b\uff0c\u200b\u907f\u514d\u200b\u56de\u6536\u200b\u3002\u200b\u4e5f\u200b\u5c31\u662f\u200b\u5c06\u200b\u6a21\u578b\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u4fdd\u5b58\u200b\u7684\u200btensors\u200b\u7684\u200bweight\u200b\u7559\u5728\u200b\u5185\u5b58\u200b\u4e2d\u200b\u3002<p></p>"},{"location":"notes/%23AI%E7%AF%87/llama/gguf%E4%BD%BF%E7%94%A8mmap%E8%BF%9B%E8%A1%8C%E9%AB%98%E6%95%88%E8%AF%BB%E5%8F%96%E5%92%8C%E4%BF%9D%E5%AD%98/#llama_mlock\u7c7b\u5982\u4f55\u5b9a\u4e49","title":"llama_mlock\u200b\u7c7b\u200b\u5982\u4f55\u200b\u5b9a\u4e49","text":"<p>\u200b\u5728\u200bllama\u200b\u4e2d\u200b\u5b9a\u4e49\u200b\u4e3a\u200bllama_mlock\u200b\u7ed3\u6784\u200b\u4f53\u200b\uff0c </p>C++<pre><code>// Represents some region of memory being locked using mlock or VirtualLock;\n// will automatically unlock on destruction.\nstruct llama_mlock {\n    void * addr = NULL;\n    size_t size = 0;\n\n    ~llama_mlock() {\n        if (size) {\n            // \u200b\u8c03\u7528\u200b\u4e86\u200bmunlock\u200b\u51fd\u6570\u200b\n            raw_unlock(addr, size);\n        }\n    }\n\n    void init(void * ptr) {\n        // NOLINT\u200b\u6ce8\u91ca\u200b\uff0c\u200b\u5982\u679c\u200b\u7f16\u7801\u200b\u8005\u200b\u786e\u8ba4\u200b\u6ca1\u200b\u95ee\u9898\u200b\uff0c\u200b\u662f\u200b\u8ba9\u200b\u4e00\u4e9b\u200b\u9759\u6001\u200b\u4ee3\u7801\u200b\u5206\u6790\u200b\u5de5\u5177\u200b\u4e0d\u200b\u62a5\u8b66\u200b\n        GGML_ASSERT(addr == NULL &amp;&amp; size == 0); // NOLINT\n        addr = ptr;\n    }\n\n    // \u200b\u5728\u200bllama_load_all \u200b\u51fd\u6570\u200b\u4e2d\u200b\u8c03\u7528\u200b\n    void grow_to(size_t target_size) {\n        GGML_ASSERT(addr);\n        if (failed_already) {\n            return;\n        }\n        // \u200b\u83b7\u53d6\u200bpagesize\n        size_t granularity = lock_granularity();\n        // \u200b\u5c06\u200btarget_size\u200b\u6309\u7167\u200bpage_size\u200b\u5bf9\u9f50\u200b\uff0c\u200b\u8fd9\u662f\u200b\u4e00\u79cd\u200b\u5e38\u7528\u200b\u7684\u200b\u5199\u6cd5\u200b\uff0c\u200b\u6bd4\u5982\u200b\u5c06\u200b\u6570\u5b57\u200b7\u200b\u6309\u7167\u200b8\u200b\u5bf9\u9f50\u200b\uff0c\u200b\u5bf9\u9f50\u200b\u7ed3\u679c\u200b\u5c31\u662f\u200b8\n        target_size = (target_size + granularity - 1) &amp; ~(granularity - 1);\n        if (target_size &gt; size) {\n            // \u200b\u8c03\u7528\u200bmlock\n            if (raw_lock((uint8_t *) addr + size, target_size - size)) {\n                size = target_size;\n            } else {\n                failed_already = true;\n            }\n        }\n    }\n\n    bool raw_lock(const void * addr, size_t size) const {\n        if (!mlock(addr, size)) {\n            return true;\n        }\n        ...\n        // \u200b\u5982\u679c\u200b\u5185\u5b58\u4e0d\u8db3\u200b\uff0c\u200b\u901a\u8fc7\u200bulimit -l\u200b\u8fdb\u884c\u200b\u67e5\u770b\u200b\uff0c\u200b\u901a\u8fc7\u200bulimit\u200b\u8bbe\u7f6e\u200b\u66f4\u5927\u200b\u7684\u200b\u6570\u503c\u200b\n        return false;\n    }\n}\n</code></pre><p></p> <p>\u200b\u4e00\u822c\u200b\u7528\u6237\u200b\u7a7a\u95f4\u200b\u5173\u8054\u200b\u7684\u200b\u7269\u7406\u200b\u9875\u9762\u200b\u662f\u200b\u6309\u200b\u9700\u200b\u901a\u8fc7\u200b\u7f3a\u9875\u200b\u5f02\u5e38\u200b\u7684\u200b\u65b9\u5f0f\u200b\u5206\u914d\u200b\u548c\u200b\u8c03\u9875\u200b\uff0c\u200b\u5f53\u200b\u7cfb\u7edf\u200b\u7269\u7406\u200b\u5185\u5b58\u4e0d\u8db3\u200b\u65f6\u200b\u9875\u9762\u200b\u56de\u6536\u200b\u7b97\u6cd5\u200b\u4f1a\u200b\u56de\u6536\u200b\u4e00\u4e9b\u200b\u6700\u8fd1\u200b\u5f88\u5c11\u200b\u4f7f\u7528\u200b\u7684\u200b\u9875\u9762\u200b\uff0c\u200b\u4f46\u662f\u200b\u6709\u65f6\u5019\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u9501\u4f4f\u200b\u4e00\u4e9b\u200b\u7269\u7406\u200b\u9875\u9762\u200b\u9632\u6b62\u200b\u5176\u200b\u88ab\u200b\u56de\u6536\u200b\uff08\u200b\u5982\u200b\u65f6\u95f4\u200b\u6709\u200b\u4e25\u683c\u8981\u6c42\u200b\u7684\u200b\u5e94\u7528\u200b\uff09\uff0cLinux\u200b\u4e2d\u200b\u63d0\u4f9b\u200b\u4e86\u200bmlock\u200b\u76f8\u5173\u200b\u7684\u200b\u7cfb\u7edf\u200b\u8c03\u7528\u200b\u4f9b\u200b\u7528\u6237\u200b\u7a7a\u95f4\u200b\u4f7f\u7528\u200b\u6765\u200b\u9501\u4f4f\u200b\u90e8\u5206\u200b\u6216\u200b\u5168\u90e8\u200b\u7684\u200b\u5730\u5740\u200b\u7a7a\u95f4\u200b\u5173\u8054\u200b\u7684\u200b\u7269\u7406\u200b\u9875\u9762\u200b\u3002</p>"},{"location":"notes/%23AI%E7%AF%87/llama/gguf%E4%BD%BF%E7%94%A8mmap%E8%BF%9B%E8%A1%8C%E9%AB%98%E6%95%88%E8%AF%BB%E5%8F%96%E5%92%8C%E4%BF%9D%E5%AD%98/#grow_to\u51fd\u6570\u7684\u8c03\u7528\u4e4bload_all_data","title":"grow_to\u200b\u51fd\u6570\u200b\u7684\u200b\u8c03\u7528\u200b\u4e4b\u200bload_all_data","text":"<p>llama\u200b\u63d0\u4f9b\u200b\u4e86\u200bgrow_to\u200b\u51fd\u6570\u200b\uff0c\u200b\u5bf9\u200btarget_size\u200b\u8fdb\u884c\u200bpagesize\u200b\u5bf9\u9f50\u200b\uff0c\u200b\u7136\u540e\u200bmlock\u200b\u4f4f\u200b\u8fd9\u5757\u200b\u5185\u5b58\u200b\u3002\u200b\u90a3\u4e48\u200b\u5b83\u200b\u662f\u200b\u5728\u200b\u54ea\u513f\u200b\u4f7f\u7528\u200b\u7684\u200b\u5462\u200b\uff1f \u200b\u8fd9\u200b\u5c31\u200b\u548c\u200b\u4e0a\u9762\u200b\u7684\u200buse_map\u200b\u8054\u7cfb\u200b\u8d77\u6765\u200b\u4e86\u200b\uff0c\u200b\u5728\u200bload_all_data\u200b\u51fd\u6570\u200b\u5b9e\u73b0\u200b\u4e2d\u6709\u200b\u5982\u4e0b\u200b\u4ee3\u7801\u200b\uff0c\u200b\u5728\u200b\u4f7f\u7528\u200buse_mmap\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u8c03\u7528\u200b\u4e86\u200bgrow_to\u200b\u51fd\u6570\u200b\u3002</p> C++<pre><code>struct llama_model_loader {\n    bool use_mmap = false;\n\n    llama_files files;\n    llama_mmaps mappings;\n\n    bool load_all_data(\n            struct ggml_context * ctx,\n            llama_buf_map &amp; bufs_mmap,\n            llama_mlocks * lmlocks,\n            llama_progress_callback progress_callback,\n            void * progress_callback_user_data);\n\n    void init_mappings(bool prefetch = true, llama_mlocks * mlock_mmaps = nullptr);\n\n    void load_data_for(struct ggml_tensor * cur);\n\n}\n</code></pre> C++<pre><code>bool load_all_data(\n            struct ggml_context * ctx,\n            llama_buf_map &amp; bufs_mmap,\n            llama_mlocks * lmlocks,\n            llama_progress_callback progress_callback,\n            void * progress_callback_user_data) {\n    // \u200b\u5faa\u73af\u200b\u5904\u7406\u200b\u6bcf\u200b\u4e00\u4e2a\u200btensor\n    for (struct ggml_tensor * cur = ggml_get_first_tensor(ctx); cur != NULL; cur = ggml_get_next_tensor(ctx, cur)) {\n        const auto * weight = get_weight(ggml_get_name(cur));\n            ......\n        if (use_mmap) {\n            // \u200b\u83b7\u53d6\u200b\u6bcf\u4e2a\u200btensor \u200b\u6743\u91cd\u200bweight\u200b\u7684\u200bmmaping\n            const auto &amp; mapping = mappings.at(weight-&gt;idx);\n            ggml_backend_buffer_t buf_mmap = nullptr;\n            if (bufs_mmap.count(weight-&gt;idx)) {\n                buf_mmap = bufs_mmap.at(weight-&gt;idx);\n            }\n            // \u200b\u6839\u636e\u200boffset\u200b\u5b9a\u4f4d\u200b\u5230\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u6743\u91cd\u200b\u4fdd\u5b58\u200b\u7684\u200b\u4f4d\u7f6e\u200b\uff0c\u200b\u83b7\u53d6\u200bmmap data\u200b\u6307\u9488\u200b\n            uint8_t * data = (uint8_t *) mapping-&gt;addr + weight-&gt;offs;\n\n            if (check_tensors) {\n                validation_result.emplace_back(std::async(std::launch::async, [cur, data, n_size] {\n                    return std::make_pair(cur, ggml_validate_row_data(cur-&gt;type, data, n_size));\n                }));\n            }\n\n            GGML_ASSERT(buf_mmap || cur-&gt;data); // either we have a buffer to allocate the tensor in, or it is already allocated\n            if (buf_mmap &amp;&amp; cur-&gt;data == nullptr) {\n                ggml_backend_tensor_alloc(buf_mmap, cur, data);\n                // \u200b\u9501\u4f4f\u200b\u4fdd\u5b58\u200bweight\u200b\u7684\u200b\u5185\u5b58\u200b\n                if (lmlocks) {\n                    const auto &amp; lmlock = lmlocks-&gt;at(weight-&gt;idx);\n                    lmlock-&gt;grow_to(weight-&gt;offs + n_size);\n                }\n\n                auto &amp; mmap_used = mmaps_used[weight-&gt;idx];\n                mmap_used.first  = std::min(mmap_used.first,  weight-&gt;offs);\n                mmap_used.second = std::max(mmap_used.second, weight-&gt;offs + n_size);\n            } else {\n                ggml_backend_tensor_set(cur, data, 0, n_size);\n            }\n        }\n    ....\n} \n</code></pre>"},{"location":"notes/%23AI%E7%AF%87/llama/gguf%E4%BD%BF%E7%94%A8mmap%E8%BF%9B%E8%A1%8C%E9%AB%98%E6%95%88%E8%AF%BB%E5%8F%96%E5%92%8C%E4%BF%9D%E5%AD%98/#\u53c2\u8003","title":"\u53c2\u8003","text":"<p>https://github.com/ggerganov/llama.cpp https://github.com/ggerganov/ggml/discussions/492 https://github.com/zylon-ai/private-gpt/issues/15</p>"},{"location":"notes/%23AI%E7%AF%87/llama/gguf%E4%BD%BF%E7%94%A8mmap%E8%BF%9B%E8%A1%8C%E9%AB%98%E6%95%88%E8%AF%BB%E5%8F%96%E5%92%8C%E4%BF%9D%E5%AD%98/#\u4e0b\u4e00\u8bb2","title":"\u4e0b\u200b\u4e00\u200b\u8bb2","text":"<p>\u200b\u5982\u4f55\u200balign\u200b\u5bf9\u9f50\u200b</p>"},{"location":"notes/%23AI%E7%AF%87/lmdeploy/Intervl2-8B%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%A2%84%E5%A4%84%E7%90%86preprocess%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C%3F/","title":"Intervl2 8B\u200b\u6a21\u578b\u200b\u7684\u200b\u9884\u5904\u7406\u200bpreprocess\u200b\u6709\u4f55\u200b\u4e0d\u540c\u200b?","text":"<p>Intervl2-8B\u200b\u6a21\u578b\u200b\u7684\u200b\u9884\u5904\u7406\u200bpreprocess\u200b\u6709\u4f55\u200b\u4e0d\u540c\u200b?</p> <p>Intervl2-8B\u200b\u6a21\u578b\u200b\u4f1a\u200b\u5bf9\u200b\u56fe\u7247\u200b\u8fdb\u884c\u200b\u5207\u56fe\u200b\uff0c\u200b\u5207\u6210\u200b448x448\u200b\u7684\u200b\u5b50\u200b\u56fe\u200b\u9001\u5165\u200b\u6a21\u578b\u200b\u3002\u200b\u548c\u200bQwenVL\u200b\u4e0d\u200b\u4e00\u6837\u200b\uff0cQwenVL\u200b\u53ef\u4ee5\u200b\u8f93\u5165\u200b\u4efb\u610f\u200b\u5927\u5c0f\u200b\u56fe\u7247\u200b\u3002</p> <p>\u200b\u5728\u200b~/lmdeploy/vl/model/builder.py\u200b\u4e2d\u200b\u6839\u636e\u200b\u6a21\u578b\u200b\u914d\u7f6e\u200bhf_config\uff0c\u200b\u83b7\u53d6\u200bmodel\u200b\u6a21\u5757\u200b\uff0c\u200b\u8c03\u7528\u200b\u9884\u5904\u7406\u200bbuild_preprocessor\u200b\u51fd\u6570\u200b\u3002 </p>Python<pre><code>_, hf_config = get_model_arch(model_path)\nkwargs = dict(model_path=model_path,\n                with_llm=with_llm,\n                max_memory=max_memory,\n                hf_config=hf_config,\n                backend=backend)\nfor name, module in VISION_MODELS.module_dict.items():\n    try:\n        if module.match(hf_config):\n            logger.info(f'matching vision model: {name}')\n            model = module(**kwargs)\n            model.build_preprocessor()\n            # build the vision part of a VLM model when backend is\n            # turbomind, or load the whole VLM model when `with_llm==True`\n            if backend == 'turbomind' or with_llm:\n                model.build_model()\n            return model\n    except Exception as e:\n        logger.error(f'build vision model {name} failed, {e}')\n        raise\n</code></pre><p></p> <p>\u200b\u67e5\u770b\u200bhf_config\uff0c\u200b\u6a21\u578b\u200b\u914d\u7f6e\u200b\u4fe1\u606f\u200b\u3002get_model_arch\u200b\u51fd\u6570\u200b\u4e2d\u200b\u7684\u200b\u903b\u8f91\u200b\uff1a</p> Python<pre><code>from transformers import AutoConfig\n\nmodel_path = \"/workspace/lm_deploy_repos/InternVL2-8B\"\ncfg = AutoConfig.from_pretrained(model_path,trust_remote_code=True)\n_cfg = cfg.to_dict()\nprint(_cfg)\n</code></pre> <p>\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\uff0c\u200b\u90e8\u5206\u200b\u6253\u5370\u200b\u5185\u5bb9\u200b\u5982\u4e0b\u200b\uff1a </p>Bash<pre><code>'use_backbone_lora': 0, 'use_llm_lora': 0, 'select_layer': -1, 'force_image_size': 448, 'downsample_ratio': 0.5, 'template': 'internlm2-chat', 'dynamic_image_size': True, 'use_thumbnail': True, 'ps_version': 'v2', 'min_dynamic_patch': 1, 'max_dynamic_patch': 12}\n</code></pre><p></p> <p>\u200b\u5728\u200b~/lmdeploy/vl/model/internvl.py\u200b\u4e2d\u200b\uff0c\u200b\u5982\u679c\u200b\u2019dynamic_image_size\u2019: True\uff0c\u200b\u5c31\u200b\u4f1a\u200b\u8d70\u200bv2\u200b\u7684\u200b\u524d\u200b\u5904\u7406\u200b\u903b\u8f91\u200b\uff1a</p> Python<pre><code>if dynamic_image_size or image_processor is None:\n    logger.info('using InternVL-Chat-V1-5 vision preprocess')\n    MEAN = (0.485, 0.456, 0.406)\n    STD = (0.229, 0.224, 0.225)\n    import torchvision.transforms as T\n    from torchvision.transforms.functional import InterpolationMode\n    input_size = self.config.vision_config.image_size\n    self.transform = T.Compose([\n        T.Lambda(lambda img: img.convert('RGB')\n                    if img.mode != 'RGB' else img),\n        T.Resize((input_size, input_size),\n                    interpolation=InterpolationMode.BICUBIC),\n        T.ToTensor(),\n        T.Normalize(mean=MEAN, std=STD)\n    ])\n    self.processor = self._preprocess_v1_5\n    self._forward_func = self._forward_v1_5\n</code></pre> Python<pre><code>def _preprocess_v1_5(self, image, params=None):\n    image_res = {'low': 6, 'medium': 12, 'high': 24}\n    max_num = params.get('max_dynamic_patch')\n    if max_num is None or not isinstance(max_num, int):\n        res_key = params.get('detail', 'default')\n        max_num = image_res.get(res_key, self.config.max_dynamic_patch)\n    out = dynamic_preprocess(\n        image,\n        min_num=self.config.min_dynamic_patch,\n        max_num=max_num,\n        image_size=self.config.vision_config.image_size,\n        use_thumbnail=self.config.use_thumbnail)\n    pixel_values = [self.transform(x) for x in out]\n    # (patch) x c x h x w\n    pixel_values = torch.stack(pixel_values)\n    return pixel_values\n</code></pre> <p>dynamic_preprocess\u200b\u51fd\u6570\u200b\u5728\u200bInternVL2-8B/summary\u200b\u8fd9\u91cc\u200bInference with Transformers\u200b\u5c0f\u8282\u200b\u4e5f\u200b\u6709\u200b\u4ecb\u7ecd\u200b\u3002</p> <p>\u200b\u548c\u200bQwenVL\u200b\u4e0d\u200b\u4e00\u6837\u200b\uff0cQwenVL\u200b\u53ef\u4ee5\u200b\u8f93\u5165\u200b\u4efb\u610f\u200b\u5927\u5c0f\u200b\u56fe\u7247\u200b\u3002</p> <p>\u200b\u591a\u200b\u6a21\u6001\u200b\u5927\u200b\u6a21\u578b\u200b\u5904\u7406\u200b\u56fe\u50cf\u200b\u65f6\u200b\u5c06\u200b\u56fe\u50cf\u200b\u5207\u200b\u5206\u6210\u200b\u591a\u4e2a\u200b448*448\u200b\u7684\u200b\u5b50\u200b\u56fe\u200b\uff0c\u200b\u6bcf\u4e2a\u200b448*448\u200b\u7684\u200b\u5b50\u200b\u56fe\u200b\u662f\u200bx\u200b\u4e2a\u200btoken\uff0c\u200b\u5b50\u56fe\u200b\u5207\u5206\u200b\u89c4\u5219\u200b\uff1a</p> <p>\u200b\u56fe\u50cf\u200b\u5bbd\u4e3a\u200b <code>width</code>\u3001\u200b\u56fe\u50cf\u200b\u9ad8\u4e3a\u200b <code>height</code>\u3001\u200b\u56fe\u50cf\u200b\u5bbd\u200b\u5207\u5206\u200b\u5757\u6570\u200b <code>m</code>\u3001\u200b\u56fe\u50cf\u200b\u9ad8\u200b\u5207\u5206\u200b\u5757\u6570\u200b<code>n</code>\u3001\u200b\u6700\u5927\u200b\u5207\u5206\u200b\u5757\u6570\u200b <code>block_count_max</code>\u3001\u200b\u6700\u5c0f\u200b\u5207\u5206\u200b\u5757\u6570\u200b <code>block_count_min</code>\uff0c\u200b\u5207\u5206\u200b\u7684\u200b <code>m</code>\u3001<code>n</code> \u200b\u540c\u65f6\u200b\u6ee1\u8db3\u200b\u4ee5\u4e0b\u200b\u6761\u4ef6\u200b:</p> <ol> <li> <p><code>block_count_min &lt;= m * n &lt;= block_count_max</code></p> </li> <li> <p><code>m / n</code>\u200b\u4e0e\u200b <code>width / height</code>\u200b\u7684\u200b\u5dee\u503c\u200b\u6700\u5c0f\u200b</p> </li> </ol> <p>token\u200b\u8ba1\u7b97\u516c\u5f0f\u200b\uff1a<code>token = m * n * x</code></p> <p>lmdeploy\u200b\u4e2d\u200b\u5b9e\u73b0\u200b\u5728\u200bmodel/internvl.py\u3002</p>"},{"location":"notes/%23AI%E7%AF%87/lmdeploy/%E9%80%9A%E8%BF%87lmdepoly%E5%AD%A6%E4%B9%A0Python%E4%B8%AD%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%B3%A8%E5%86%8C%E6%A8%A1%E5%BC%8F/","title":"\u901a\u8fc7\u200blmdepoly\u200b\u5b66\u4e60\u200bPython\u200b\u4e2d\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u6ce8\u518c\u200b\u6a21\u5f0f","text":"<p>\u200b\u5728\u200blmdeploy\u200b\u4e2d\u200b\u652f\u6301\u200b\u4e86\u200b\u5f88\u591a\u200b\u6a21\u578b\u200b\u7684\u200b\u63a8\u7406\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u6a21\u578b\u200b\u662f\u200b\u5982\u4f55\u200b\u6ce8\u518c\u200b\u7ed9\u200blmdeploy\u200b\u6846\u67b6\u200b\u7684\u200b\u5462\u200b\uff1f lmdeploy\u200b\u6846\u67b6\u200b\u53c8\u200b\u662f\u200b\u5982\u4f55\u200b\u8c03\u7528\u200b\u5230\u200b\u6b63\u786e\u200b\u7684\u200b\u6a21\u578b\u200b\u63a8\u7406\u200b\u7684\u200b\u5462\u200b?</p> <p>MMEngine \u200b\u5b9e\u73b0\u200b\u7684\u200b\u6ce8\u518c\u5668\u200b\u53ef\u4ee5\u200b\u770b\u4f5c\u200b\u4e00\u4e2a\u200b\u6620\u5c04\u200b\u8868\u200b\u548c\u200b\u6a21\u5757\u200b\u6784\u5efa\u200b\u65b9\u6cd5\u200b\uff08build function\uff09\u200b\u7684\u200b\u7ec4\u5408\u200b\u3002\u200b\u6620\u5c04\u200b\u8868\u200b\u7ef4\u62a4\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u4e32\u200b\u5230\u200b\u7c7b\u200b\u6216\u8005\u200b\u51fd\u6570\u200b\u7684\u200b\u6620\u5c04\u200b\uff0c\u200b\u4f7f\u5f97\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u501f\u52a9\u200b\u5b57\u7b26\u4e32\u200b\u67e5\u627e\u200b\u5230\u200b\u76f8\u5e94\u200b\u7684\u200b\u7c7b\u200b\u6216\u200b\u51fd\u6570\u200b\uff0c\u200b\u4f8b\u5982\u200b\u7ef4\u62a4\u200b\u5b57\u7b26\u4e32\u200b \u201cResNet\u201d \u200b\u5230\u200b ResNet \u200b\u7c7b\u200b\u6216\u200b\u51fd\u6570\u200b\u7684\u200b\u6620\u5c04\u200b\uff0c\u200b\u4f7f\u5f97\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b \u201cResNet\u201d \u200b\u627e\u5230\u200b ResNet \u200b\u7c7b\u200b\uff1b\u200b\u800c\u200b\u6a21\u5757\u200b\u6784\u5efa\u200b\u65b9\u6cd5\u200b\u5219\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u5982\u4f55\u200b\u6839\u636e\u200b\u5b57\u7b26\u4e32\u200b\u67e5\u627e\u200b\u5230\u200b\u5bf9\u5e94\u200b\u7684\u200b\u7c7b\u200b\u6216\u200b\u51fd\u6570\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u8fd9\u4e2a\u200b\u7c7b\u200b\u6216\u8005\u200b\u8c03\u7528\u200b\u8fd9\u4e2a\u200b\u51fd\u6570\u200b\uff0c\u200b\u4f8b\u5982\u200b\uff0c\u200b\u901a\u8fc7\u200b\u5b57\u7b26\u4e32\u200b \u201cbn\u201d \u200b\u627e\u5230\u200b nn.BatchNorm2d \u200b\u5e76\u200b\u5b9e\u4f8b\u200b\u5316\u200b BatchNorm2d \u200b\u6a21\u5757\u200b\uff1b\u200b\u53c8\u200b\u6216\u8005\u200b\u901a\u8fc7\u200b\u5b57\u7b26\u4e32\u200b \u201cbuild_batchnorm2d\u201d \u200b\u627e\u5230\u200b build_batchnorm2d \u200b\u51fd\u6570\u200b\u5e76\u200b\u8fd4\u56de\u200b\u8be5\u200b\u51fd\u6570\u200b\u7684\u200b\u8c03\u7528\u200b\u7ed3\u679c\u200b\u3002</p>"},{"location":"notes/%23AI%E7%AF%87/lmdeploy/%E9%80%9A%E8%BF%87lmdepoly%E5%AD%A6%E4%B9%A0Python%E4%B8%AD%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%B3%A8%E5%86%8C%E6%A8%A1%E5%BC%8F/#lmdepoy\u4e2d\u8c03\u7528\u6a21\u5757","title":"lmdepoy\u200b\u4e2d\u200b\u8c03\u7528\u200b\u6a21\u5757","text":"<p>\u200b\u4f7f\u7528\u200b\u6848\u4f8b\u200b\uff1a</p> Bash<pre><code>https://github1s.com/InternLM/lmdeploy/blob/main/lmdeploy/vl/model/builder.py#L65\n</code></pre> <p>\u200b\u5982\u679c\u200bVISION_MODELS\u200b\u4e2d\u200b\u7684\u200bmodule\u200b\u548c\u200bhf_config\u200b\u5339\u914d\u200b\uff0c\u200b\u5c31\u200b\u4f20\u9012\u200b\u53c2\u6570\u200b\u8c03\u7528\u200b\u6a21\u5757\u200b\u3002\u200b\u8c03\u7528\u200b\u6a21\u5757\u200b\u7684\u200b\u76f8\u5173\u200b\u51fd\u6570\u200b\u3002 </p>Python<pre><code>from lmdeploy.vl.model.base import VISION_MODELS\ndef load_vl_model(model_path: str,\n                  backend: str,\n                  with_llm: bool = False,\n                  backend_config: Optional[Union[TurbomindEngineConfig,\n                                                 PytorchEngineConfig]] = None):\n    ...\n    for name, module in VISION_MODELS.module_dict.items():\n    try:\n        if module.match(hf_config):\n            logger.info(f'matching vision model: {name}')\n            model = module(**kwargs)\n            model.build_preprocessor()\n            # build the vision part of a VLM model when backend is\n            # turbomind, or load the whole VLM model when `with_llm==True`\n            if backend == 'turbomind' or with_llm:\n                model.build_model()\n            return model\n    except Exception as e:\n        logger.error(f'build vision model {name} failed, {e}')\n        raise\n\n    raise ValueError(f'unsupported vl model with config {hf_config}')\n</code></pre><p></p>"},{"location":"notes/%23AI%E7%AF%87/lmdeploy/%E9%80%9A%E8%BF%87lmdepoly%E5%AD%A6%E4%B9%A0Python%E4%B8%AD%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%B3%A8%E5%86%8C%E6%A8%A1%E5%BC%8F/#\u5982\u4f55\u6ce8\u518cmodel\u7684\u5462","title":"\u5982\u4f55\u200b\u6ce8\u518c\u200bmodel\u200b\u7684\u200b\u5462\u200b\uff1f","text":"<p>\u200b\u5728\u200bvl/models\u200b\u76ee\u5f55\u200b\u4e2d\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u6ce8\u518c\u200b\u7684\u200b\u5f88\u591a\u200b\u6a21\u578b\u200b\uff0c\u200b\u6bd4\u5982\u200bqwen\u3001internvl\u200b\u7b49\u200b\u3002</p> <p>\u200b\u5728\u200blmdeploy/vl/model/internvl.py\u200b\u6587\u4ef6\u200b\u4e2d\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u5b9a\u4e49\u200bInternVLVisionModel\u200b\u7c7b\u65f6\u200b\uff0c\u200b\u901a\u8fc7\u200b@VISION_MODELS.register_module()\u200b\u8fdb\u884c\u200b\u4e86\u200b\u6ce8\u518c\u200b\u3002</p> Python<pre><code>@VISION_MODELS.register_module()\nclass InternVLVisionModel(VisonModel):\n    \"\"\"InternVL vision model.\"\"\"\n\n    _arch = 'InternVLChatModel'\n\n    def __init__(self,...):\n        ....\n</code></pre> <p>VISION_MODELS\u200b\u5c31\u662f\u200bmmengine\u200b\u4e2d\u200bRegistry\u200b\u7684\u200b\u4e00\u4e2a\u200b\u5b9e\u4f8b\u200b\u7c7b\u578b\u200b\u3002</p> Python<pre><code>from mmengine import Registry\nVISION_MODELS = Registry('vision_model')\n</code></pre> <p>\u200b\u5728\u200b\u4f60\u200b\u7684\u200b\u9879\u76ee\u200b\u4e2d\u200b\u5982\u679c\u200b\u4f60\u200b\u4e5f\u200b\u9700\u8981\u200b\u6839\u636e\u200b\u914d\u7f6e\u200b\uff0c\u200b\u8c03\u7528\u200b\u4e0d\u540c\u200b\u7684\u200b\u6a21\u5757\u200b\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u91c7\u7528\u200b\u8fd9\u79cd\u200b\u65b9\u6cd5\u200b\u3002\u200b\u6ce8\u518c\u200b\u7ed1\u5b9a\u200b\uff0c\u200b\u6700\u200b\u7b80\u5355\u200b\u7684\u200b\u5c31\u662f\u200b\u5efa\u7acb\u200b\u5b57\u7b26\u4e32\u200b\u548c\u200b\u7c7b\u200b\u7684\u200b\u6620\u5c04\u200b\u5173\u7cfb\u200b\u3002</p> <p>\u200b\u5728\u200b\u8fd9\u91cc\u200blmdeploy\u200b\u4f7f\u7528\u200b\u4e86\u200bmmengine\u200b\u4e2d\u200b\u7684\u200bRegistry\u200b\u6a21\u5757\u200b\u3002\u200b\u652f\u6301\u200b\u7684\u200b\u529f\u80fd\u200b\u66f4\u52a0\u200b\u5168\u9762\u200b\uff0c\u200b\u5305\u62ec\u200b\uff1a</p> <ul> <li>\u200b\u6a21\u5757\u200b\u7684\u200b\u6ce8\u518c\u200b\u548c\u200b\u8c03\u7528\u200b</li> <li>\u200b\u51fd\u6570\u200b\u7684\u200b\u6ce8\u518c\u200b\u548c\u200b\u8c03\u7528\u200b</li> <li>\u200b\u6a21\u5757\u200b\u95f4\u200b\u7236\u5b50\u5173\u7cfb\u200b\u5efa\u7acb\u200b\uff0c\u200b\u5982\u679c\u200b\u5b50\u200b\u8282\u70b9\u200b\u627e\u200b\u4e0d\u5230\u200b\uff0c\u200b\u5c31\u200b\u53bb\u200b\u7236\u200b\u8282\u70b9\u200b\u4e2d\u200b\u627e\u200b\u5bf9\u5e94\u200b\u6a21\u5757\u200b\u8c03\u7528\u200b</li> <li>\u200b\u5144\u5f1f\u200b\u8282\u70b9\u200b\u5173\u7cfb\u200b\u5efa\u7acb\u200b</li> </ul> <p>\u200b\u7b80\u5355\u200b\u4f7f\u7528\u200b\u4f8b\u5b50\u200b\uff1a \u200b\u4f7f\u7528\u200b\u6ce8\u518c\u5668\u200b\u7ba1\u7406\u200b\u4ee3\u7801\u200b\u5e93\u4e2d\u200b\u7684\u200b\u6a21\u5757\u200b\uff0c\u200b\u9700\u8981\u200b\u4ee5\u4e0b\u200b\u4e09\u4e2a\u200b\u6b65\u9aa4\u200b\u3002</p> <ul> <li> <p>\u200b\u521b\u5efa\u200b\u6ce8\u518c\u5668\u200b</p> </li> <li> <p>\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u7528\u4e8e\u200b\u5b9e\u4f8b\u200b\u5316\u7c7b\u200b\u7684\u200b\u6784\u5efa\u200b\u65b9\u6cd5\u200b\uff08\u200b\u53ef\u200b\u9009\u200b\uff0c\u200b\u5728\u200b\u5927\u591a\u6570\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u53ef\u4ee5\u200b\u53ea\u200b\u4f7f\u7528\u200b\u9ed8\u8ba4\u200b\u65b9\u6cd5\u200b\uff09</p> </li> <li> <p>\u200b\u5c06\u200b\u6a21\u5757\u200b\u52a0\u5165\u200b\u6ce8\u518c\u5668\u200b\u4e2d\u200b</p> </li> </ul> <p>\u200b\u5047\u8bbe\u200b\u6211\u4eec\u200b\u8981\u200b\u5b9e\u73b0\u200b\u4e00\u7cfb\u5217\u200b\u6fc0\u6d3b\u200b\u6a21\u5757\u200b\u5e76\u4e14\u200b\u5e0c\u671b\u200b\u4ec5\u200b\u4fee\u6539\u200b\u914d\u7f6e\u200b\u5c31\u200b\u80fd\u591f\u200b\u4f7f\u7528\u200b\u4e0d\u540c\u200b\u7684\u200b\u6fc0\u6d3b\u200b\u6a21\u5757\u200b\u800c\u200b\u65e0\u9700\u200b\u4fee\u6539\u200b\u4ee3\u7801\u200b\u3002 </p>Python<pre><code>from mmengine import Registry\n# scope \u200b\u8868\u793a\u200b\u6ce8\u518c\u5668\u200b\u7684\u200b\u4f5c\u7528\u57df\u200b\uff0c\u200b\u5982\u679c\u200b\u4e0d\u200b\u8bbe\u7f6e\u200b\uff0c\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b\u5305\u540d\u200b\uff0c\u200b\u4f8b\u5982\u200b\u5728\u200b mmdetection \u200b\u4e2d\u200b\uff0c\u200b\u5b83\u200b\u7684\u200b scope \u200b\u4e3a\u200b mmdet\n# locations \u200b\u8868\u793a\u200b\u6ce8\u518c\u200b\u5728\u200b\u6b64\u200b\u6ce8\u518c\u5668\u200b\u7684\u200b\u6a21\u5757\u200b\u6240\u200b\u5b58\u653e\u200b\u7684\u200b\u4f4d\u7f6e\u200b\uff0c\u200b\u6ce8\u518c\u5668\u200b\u4f1a\u200b\u6839\u636e\u200b\u9884\u5148\u200b\u5b9a\u4e49\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u5728\u200b\u6784\u5efa\u200b\u6a21\u5757\u200b\u65f6\u200b\u81ea\u52a8\u200b import\nACTIVATION = Registry('activation', scope='mmengine', locations=['mmengine.models.activations'])\n\n\nimport torch.nn as nn\n\n# \u200b\u4f7f\u7528\u200b\u6ce8\u518c\u5668\u200b\u7ba1\u7406\u200b\u6a21\u5757\u200b\n@ACTIVATION.register_module()\nclass Sigmoid(nn.Module):\n    def __init__(self):\n        super().__init__()\n\n    def forward(self, x):\n        print('call Sigmoid.forward')\n        return x\n\n@ACTIVATION.register_module()\nclass ReLU(nn.Module):\n    def __init__(self, inplace=False):\n        super().__init__()\n\n    def forward(self, x):\n        print('call ReLU.forward')\n        return x\n\n@ACTIVATION.register_module()\nclass Softmax(nn.Module):\n    def __init__(self):\n        super().__init__()\n\n    def forward(self, x):\n        print('call Softmax.forward')\n        return x\n\nprint(ACTIVATION.module_dict)\n# {\n#     'Sigmoid': __main__.Sigmoid,\n#     'ReLU': __main__.ReLU,\n#     'Softmax': __main__.Softmax\n# }\n</code></pre><p></p> <p>\u200b\u6ce8\u518c\u200b\u540e\u200b\uff0c\u200b\u4f7f\u7528\u200b\uff1a </p>Python<pre><code>import torch\n\ninput = torch.randn(2)\n\nact_cfg = dict(type='Sigmoid')\nactivation = ACTIVATION.build(act_cfg)\noutput = activation(input)\n# call Sigmoid.forward\nprint(output)\n\n\n\u200b\u5982\u679c\u200b\u6211\u4eec\u200b\u60f3\u200b\u4f7f\u7528\u200b ReLU\uff0c\u200b\u4ec5\u200b\u9700\u200b\u4fee\u6539\u200b\u914d\u7f6e\u200b\u3002\n\nact_cfg = dict(type='ReLU', inplace=True)\nactivation = ACTIVATION.build(act_cfg)\noutput = activation(input)\n# call ReLU.forward\nprint(output)\n</code></pre> \u200b\u8fdb\u9636\u200b\u529f\u80fd\u200b\u53c2\u8003\u200b\uff1ahttps://mmengine.readthedocs.io/zh-cn/latest/advanced_tutorials/registry.html\u3002<p></p>"},{"location":"notes/%23AI%E7%AF%87/mlir/debug_toy_config/","title":"Debug toy config","text":""},{"location":"notes/%23AI%E7%AF%87/mlir/debug_toy_config/#\u8c03\u8bd5mlir\u7684vscode\u73af\u5883\u914d\u7f6e","title":"\u8c03\u8bd5\u200bmlir\u200b\u7684\u200bvscode\u200b\u73af\u5883\u200b\u914d\u7f6e","text":"<p>\u200b\u9664\u4e86\u200b\u524d\u200b\u6587\u4e2d\u200b\u5728\u200b\u8fd0\u884c\u200b\u65f6\u200b\u6307\u5b9a\u200b\u8c03\u8bd5\u200b\u6253\u5370\u200b\u53c2\u6570\u200b\uff0c\u200b\u66f4\u52a0\u200b\u53cb\u597d\u200b\u7684\u200b\u65b9\u5f0f\u200b\u53ef\u80fd\u200b\u5c31\u662f\u200bgdb\u200b\u8c03\u8bd5\u200b\u4e86\u200b\u3002\u200b\u672c\u200b\u8282\u200b\u8bb2\u89e3\u200b\u4e00\u4e0b\u200bvscode\u200b\u8c03\u8bd5\u200b\u73af\u5883\u200b\u914d\u7f6e\u200b\u3002 \u200b\u9996\u5148\u200bvscode\u200b\u6253\u5f00\u200bllvm_project\u200b\u9879\u76ee\u200b\uff0c\u200b\u91c7\u7528\u200bdebug\u200b\u6a21\u5f0f\u200b\u7f16\u8bd1\u200b\u9879\u76ee\u200b: </p>Bash<pre><code>cd build\ncmake -G Ninja ../llvm    -DLLVM_ENABLE_PROJECTS=mlir    -DLLVM_BUILD_EXAMPLES=ON    -DLLVM_TARGETS_TO_BUILD=\"X86\"    -DCMAKE_BUILD_TYPE=Debug    -DLLVM_ENABLE_ASSERTIONS=ON  -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DLLVM_ENABLE_LLD=ON\n\ncmake --build . --target toyc-ch3\n</code></pre><p></p> <p>\u200b\u521b\u5efa\u200blaunch.json\uff0c\u200b\u6dfb\u52a0\u200b\u4ee5\u4e0b\u5185\u5bb9\u200b\uff1a </p>JSON<pre><code>{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"OK_Gdb_Debugger\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            //\u200b\u8981\u200b\u8c03\u8bd5\u200b\u7684\u200b\u7a0b\u5e8f\u200b\n            \"program\": \"${workspaceFolder}/build/bin/toyc-ch3\",\n            // \"args\": [\"${workspaceFolder}/mlir/test/Examples/Toy/Ch2/codegen.toy\",\"-emit=mlir\", \"-mlir-print-debuginfo\"],\n            \"args\": [\n                \"${workspaceFolder}/mlir/test/Examples/Toy/Ch3/transpose_transpose.toy\", \"-emit=mlir\", \"-opt\"\n            ],\n            \"stopAtEntry\": false,\n            \"cwd\": \"${workspaceFolder}\",\n            \"environment\": [],\n            \"externalConsole\": false,\n            \"MIMode\": \"gdb\",\n            \"miDebuggerPath\": \"/usr/bin/gdb\",\n\n            //gdb\u200b\u8def\u5f84\u200b\n            // \"miDebuggerPath\": \"/opt/gcc-arm-8.3-2019.03-x86_64-arm-linux-gnueabihf/bin/arm-linux-gnueabihf-gdb\",\n            // //\u200b\u8fdc\u7a0b\u200b\u8c03\u8bd5\u200b\uff0c\u200b\u670d\u52a1\u5668\u200b\u5730\u5740\u200b\uff0c\u200b\u7aef\u53e3\u53f7\u200b\u3002\n            // \"miDebuggerServerAddress\": \"192.168.1.188:9091\",\n            // \"additionalSOLibSearchPath\": \"${workspaceFolder}/build/lib/\"\n            // \"setupCommands\": [\n            //     {\n            //         \"description\": \"Enable pretty-printing for gdb\",\n            //         \"text\": \"-enable-pretty-printing\",\n            //         \"ignoreFailures\": true\n            //     }\n            // ]\n        }\n    ]\n}\n</code></pre> \u200b\u6838\u5fc3\u200b\u662f\u200bprogram\u200b\u548c\u200b\u53c2\u6570\u200bargs\u200b\u9009\u9879\u200b\uff0c\u200b\u6ce8\u91ca\u200b\u7684\u200b\u5185\u5bb9\u200b\u5982\u679c\u200b\u662f\u200b\u8fdc\u7a0b\u200b\u8c03\u8bd5\u200b\u53ef\u4ee5\u200b\u6839\u636e\u200b\u6b64\u6765\u200b\u505a\u200b\u4e00\u4e9b\u200b\u4fee\u6539\u200b\u3002Program\u200b\u9879\u200b\u6307\u5b9a\u200b\u4e86\u200btoyc-ch3\u200b\u8fd0\u884c\u200bbin\u200b\u6587\u4ef6\u200b\uff0cargs\u200b\u662f\u200b\u4f20\u9012\u200b\u7ed9\u200b\u5b83\u200b\u7684\u200b\u53c2\u6570\u200b\u3002 \u200b\u7136\u540e\u200b\u53ef\u4ee5\u200bdebug\u200b\u6e90\u7801\u200b\u4e86\u200b\u3002<p></p>"},{"location":"notes/%23AI%E7%AF%87/mlir/learn_toy2/","title":"MLIR\u200b\u521d\u9047\u200b&ndash;Toy2","text":""},{"location":"notes/%23AI%E7%AF%87/mlir/learn_toy2/#mlir\u521d\u9047toy2","title":"MLIR\u200b\u521d\u9047\u200b\u2013Toy2","text":""},{"location":"notes/%23AI%E7%AF%87/mlir/learn_toy2/#\u521d\u9047","title":"\u521d\u9047","text":"<ul> <li>AI\u200b\u7f16\u8bd1\u5668\u200b\u548c\u200bAI\u200b\u90e8\u7f72\u200b\u6846\u67b6\u200b\u7684\u200b\u533a\u522b\u200b\uff1f</li> <li>MLIR\u200b\u548c\u200btvm\u200b\u7684\u200b\u533a\u522b\u200b\uff1f</li> </ul>"},{"location":"notes/%23AI%E7%AF%87/mlir/learn_toy2/#mlir\u7684\u4f5c\u7528","title":"MLIR\u200b\u7684\u200b\u4f5c\u7528","text":"<p>\u200b\u521d\u6b21\u200b\u63a5\u89e6\u200bMLIR\u200b\u662f\u200b\u5bf9\u6a21\u578b\u200b\u8fdb\u884c\u200b\u91cf\u5316\u200b\u64cd\u4f5c\u200b\u7684\u200b\u5de5\u5177\u200b\uff0c\u200b\u901a\u8fc7\u200bMLIR\u200b\u591a\u200b\u5c42\u7ea7\u200b\u7684\u200b\u9010\u6b65\u200bLowering\uff0c\u200b\u7136\u540e\u200b\u53ef\u4ee5\u200b\u5bf9\u200b\u7b97\u5b50\u200b\u8fdb\u884c\u200b\u878d\u5408\u200b\u7b49\u200b\u4f18\u5316\u200b\u64cd\u4f5c\u200b\u3002 AI\u200b\u7f16\u8bd1\u5668\u200b\u6700\u200b\u5e38\u7528\u200b\u7684\u200b\u662f\u200b\u4f7f\u7528\u200bMLIR\u200b\u65b9\u5f0f\u200b\u548c\u200btvm\u200b\u65b9\u5f0f\u200b\uff0ctvm\u200b\u65b9\u5f0f\u200b\u91c7\u7528\u200b\u7c7b\u4f3c\u200b\u9057\u4f20\u7b97\u6cd5\u200b\u7b49\u200b\u5728\u200b\u4e00\u4e2a\u200b\u7a7a\u95f4\u200b\u8fdb\u884c\u200b\u81ea\u52a8\u200b\u641c\u7d22\u200b\uff0c\u200b\u5f97\u5230\u200b\u4f18\u5316\u200b\u7ed3\u679c\u200b\u3002MLIR\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u57fa\u7840\u200b\u7684\u200b\u6846\u67b6\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u5c06\u200b\u4e13\u5bb6\u200b\u77e5\u8bc6\u200b\u7f16\u5199\u6210\u200b\u5404\u79cd\u200bPass\uff0c\u200b\u9010\u5c42\u200b\u4f18\u5316\u200b\u7684\u200bIR\uff0c\u200b\u6700\u7ec8\u200b\u90e8\u7f72\u200b\u5230\u200b\u5404\u79cd\u200b\u786c\u4ef6\u200b\u8bbe\u5907\u200b\u4e0a\u200b\u3002</p> <p>\u200b\u6bd4\u5982\u200b\uff1a + sophgo tpu-mlir \u200b\u7b97\u80fd\u200b\u79d1\u6280\u200b\u7684\u200b\u7f16\u8bd1\u5668\u200b\uff0c\u200b\u5bf9\u6a21\u578b\u200b\u8fdb\u884c\u200b\u91cf\u5316\u200b\uff0c\u200b\u90e8\u7f72\u200b\u5230\u200bTPU\u200b\u4e0a\u200b\u3002 + triton\uff0c\u200b\u6709\u200b\u4e24\u4e2a\u200b\u77e5\u540d\u200b\u7684\u200b\u9879\u76ee\u200b\u90fd\u200b\u53eb\u505a\u200btriton\uff0c\u200b\u4e00\u4e2a\u200b\u662f\u200b\u82f1\u200b\u4f1f\u8fbe\u200b\u51fa\u200b\u7684\u200b\u670d\u52a1\u7aef\u200b\u90e8\u7f72\u200b\u6846\u67b6\u200btritonserver\uff0c\u200b\u4e00\u4e2a\u200b\u662f\u200bopenai\u200b\u6839\u636e\u200bmlir\u200b\u7684\u200b\u4e00\u4e2a\u200b\u7f16\u7a0b\u8bed\u8a00\u200b\u3002</p>"},{"location":"notes/%23AI%E7%AF%87/mlir/learn_toy2/#\u7f16\u8bd1llvm-project\u9879\u76ee","title":"\u7f16\u8bd1\u200bllvm-project\u200b\u9879\u76ee","text":"<p>\u200b\u901a\u8fc7\u200bllvm-project\u200b\u9879\u76ee\u200b\u4e2d\u200b\u7684\u200btoy example\u200b\u5bf9\u200bmlir\u200b\u8fdb\u884c\u200b\u4e86\u200b\u6e90\u7801\u200b\u5b66\u4e60\u200b\u548c\u200b\u8c03\u8bd5\u200b\uff0c\u200b\u4e00\u8d77\u200b\u4e00\u7aa5\u200b\u7a76\u7adf\u200b\u3002 \u200b\u7f16\u8bd1\u200b\u547d\u4ee4\u200b\uff1a </p>Bash<pre><code>cmake -G Ninja ../llvm    -DLLVM_ENABLE_PROJECTS=mlir    -DLLVM_BUILD_EXAMPLES=ON    -DLLVM_TARGETS_TO_BUILD=\"X86\"    -DCMAKE_BUILD_TYPE=Release    -DLLVM_ENABLE_ASSERTIONS=ON  -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DLLVM_ENABLE_LLD=ON\n\n# cmake -G Ninja ../llvm    -DLLVM_ENABLE_PROJECTS=mlir    -DLLVM_BUILD_EXAMPLES=ON    -DLLVM_TARGETS_TO_BUILD=\"X86\"    -DCMAKE_BUILD_TYPE=Debug    -DLLVM_ENABLE_ASSERTIONS=ON  -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DLLVM_ENABLE_LLD=ON\n\ncmake --build . --target check-mlir\n</code></pre><p></p>"},{"location":"notes/%23AI%E7%AF%87/mlir/learn_toy2/#\u81ea\u5b9a\u4e49op","title":"\u81ea\u5b9a\u4e49\u200bOp","text":"<p>\u200b\u6839\u636e\u200btoy2\u200b\u7684\u200b\u6587\u6863\u200b\u63cf\u8ff0\u200b\uff0c\u200b\u6211\u4eec\u200b\u77e5\u9053\u200b\u5b9a\u4e49\u200b\u4e00\u4e2a\u200bDialect\u200b\u548c\u200b\u76f8\u5173\u200b\u7684\u200bOp\uff0c\u200b\u53ef\u4ee5\u200b\u6709\u200b\u4e24\u79cd\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u7b2c\u4e00\u79cd\u200b\u662f\u200b\u91c7\u7528\u200b\u4ed6\u200b\u4e13\u95e8\u200b\u7684\u200b\u63cf\u8ff0\u8bed\u8a00\u200b\u7f16\u5199\u200btd\u200b\u6587\u4ef6\u200b\uff0c\u200b\u901a\u8fc7\u200bmlir-tblgen\u200b\u547d\u4ee4\u200b\u53ef\u4ee5\u200b\u751f\u6210\u200b\u5934\u6587\u4ef6\u200b\u58f0\u660e\u200b\u548c\u200b\u51fd\u6570\u200b\u5b9a\u4e49\u200b\u3002\u200b\u7b2c\u4e8c\u79cd\u200b\u662f\u200b\u624b\u52a8\u200b\u7f16\u5199\u200bcpp\u200b\u6587\u4ef6\u200b\u3002</p> <p>\u200b\u5728\u200btoy2\u200b\u7684\u200b </p>Bash<pre><code>.\n\u251c\u2500\u2500 CMakeLists.txt\n\u251c\u2500\u2500 include\n\u2502   \u251c\u2500\u2500 CMakeLists.txt\n\u2502   \u2514\u2500\u2500 toy\n\u2502       \u251c\u2500\u2500 AST.h\n\u2502       \u251c\u2500\u2500 CMakeLists.txt\n\u2502       \u251c\u2500\u2500 Dialect.h\n\u2502       \u251c\u2500\u2500 Lexer.h\n\u2502       \u251c\u2500\u2500 MLIRGen.h\n\u2502       \u251c\u2500\u2500 Ops.td\n\u2502       \u2514\u2500\u2500 Parser.h\n\u251c\u2500\u2500 mlir\n\u2502   \u251c\u2500\u2500 Dialect.cpp\n\u2502   \u2514\u2500\u2500 MLIRGen.cpp\n\u251c\u2500\u2500 parser\n\u2502   \u2514\u2500\u2500 AST.cpp\n\u2514\u2500\u2500 toyc.cpp\n\n4 directories, 13 files\n</code></pre><p></p> <p>\u200b\u9996\u5148\u200b\u5bf9\u200b\u6587\u4ef6\u200b\u76f8\u5173\u200b\u5185\u5bb9\u200b\u8fdb\u884c\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b\u4ecb\u7ecd\u200b\uff1a + AST\u200b\u548c\u200bParser\u200b\u76f8\u5173\u200b\u7684\u200b\u90fd\u200b\u662f\u200b\u5bf9\u200b\u81ea\u5b9a\u4e49\u200b\u7684\u200bToy\u200b\u8bed\u8a00\u200b\uff08\u200b\u7c7b\u4f3c\u200bpython\u200b\u51fd\u6570\u200b\u5b9a\u4e49\u200b\u8bed\u6cd5\u200bdef\uff0c\u200b\u53ea\u200b\u652f\u6301\u200bdouble\u200b\u7c7b\u578b\u200b\uff09\u200b\u8fdb\u884c\u200b\u8bcd\u6cd5\u200b\u8bed\u6cd5\u5206\u6790\u200b\u7684\u200b\u5185\u5bb9\u200b\uff0c\u200b\u5982\u679c\u200b\u53ea\u662f\u200b\u5b66\u4e60\u200bMLIR\u200b\u7f16\u8bd1\u200b\u53ef\u4ee5\u200b\u5148\u200b\u8df3\u200b\u8fc7\u200b + Dialect.h\u200b\u5bfc\u5165\u200b\u4e86\u200btd\u200b\u6587\u4ef6\u200b\u751f\u6210\u200b\u7684\u200b\u5934\u6587\u4ef6\u200b\u5b9a\u4e49\u200b\u548c\u200bmlir\u200b\u76f8\u5173\u200b\u5934\u6587\u4ef6\u200b + Ops.td\u200b\u6587\u4ef6\u200b\u901a\u8fc7\u200btd\u200b\u7279\u6709\u200b\u7684\u200b\u8fd9\u79cd\u200b\u9886\u57df\u200b\u8bed\u8a00\u200b\u63cf\u8ff0\u200b\u4e86\u200bToyDialect\u200b\u548c\u200bToyOp\uff0c\u200b\u901a\u8fc7\u200b\u547d\u4ee4\u200b\u751f\u6210\u200b\u4ee3\u7801\u200b\uff0c\u200b\u907f\u514d\u200b\u4e86\u200b\u5927\u91cf\u200b\u7684\u200b\u7f16\u5199\u200bcpp\u200b\u7684\u200b\u5de5\u4f5c\u200b + Dialect.cpp\u200b\u4e2d\u6709\u200b\u90e8\u5206\u200b\u624b\u5199\u200bcpp\u200b\u5b9e\u73b0\u200b\u7684\u200bOp\u200b\u7b49\u200b + toyc.cpp\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u547d\u4ee4\u884c\u200b\u8bfb\u53d6\u200b\uff0cDumpAst\uff0cDumpMlir\u200b\u7684\u200b\u529f\u80fd\u200b\uff0c\u200b\u539f\u751f\u200b\u7684\u200bMLIR\u200b\u80af\u5b9a\u200b\u4e0d\u80fd\u200b\u89e3\u6790\u200btoy\u200b\u5b9a\u4e49\u200b\u7684\u200b\u5185\u5bb9\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u539f\u751f\u200bMLIR\u200b\u63d0\u4f9b\u200b\u7684\u200b\u9ed8\u8ba4\u200bDialect\u200b\u6839\u672c\u200b\u90fd\u200b\u4e0d\u200b\u8ba4\u8bc6\u200bToy\u200b\u7684\u200b\u8bed\u6cd5\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5728\u200btoyc.cpp\u200b\u4e2d\u200b\u5bf9\u200bToyDialect\u200b\u8fdb\u884c\u200b\u4e86\u200b\u6ce8\u518c\u200b</p> <p>toy.cpp\u200b\u4e2d\u200b\u6ce8\u518c\u200btoyDialect\u200b\u7684\u200b\u903b\u8f91\u200b\uff1a </p>C++<pre><code>// toy.cpp\nint dumpMLIR() {\n  mlir::MLIRContext context;\n  // Load our Dialect in this MLIR Context.\n  context.getOrLoadDialect&lt;mlir::toy::ToyDialect&gt;();\n    ......\n}\n</code></pre> \u200b\u5728\u200binlude/toy/Ops.td\u200b\u6587\u4ef6\u200b\u4e2d\u200b\uff0c\u200b\u5b9a\u4e49\u200b\u4e86\u200bToyDialect\u200b\u548c\u200b\u76f8\u5173\u200b\u7684\u200bOp\uff0c\u200b\u6bd4\u5982\u200bPrintOp\u3002 \u200b\u5728\u200bmlir/Dialect.cpp\u200b\u4e2d\u200b\u624b\u52a8\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u90e8\u5206\u200bOp\uff0c\u200b\u6bd4\u5982\u200bConstantOp\u200b\u7684\u200bParse\u200b\u548c\u200bPrint\u200b\u51fd\u6570\u200b\u3002\u200b\u76f8\u5bf9\u200b\u6bd4\u200bPrintOp\u200b\u7684\u200bParse\u200b\u51fd\u6570\u200b\u548c\u200bPrint\u200b\u51fd\u6570\u200b\u662f\u200btd\u200b\u6587\u4ef6\u200b\u5b9a\u4e49\u200b\uff0c\u200b\u7136\u540e\u200b\u901a\u8fc7\u200bmlir-tblgen\u200b\u547d\u4ee4\u200b\u751f\u6210\u200b\u7684\u200b\u3002<p></p> <p>\u200b\u4e0b\u9762\u200b\u901a\u8fc7\u200b\u4ee3\u7801\u200b\u7684\u200b\u5c0f\u200b\u6539\u52a8\u200b\u6765\u200b\u4e86\u89e3\u200b\u8fd9\u4e2a\u200b\u8fc7\u7a0b\u200b\uff0c\u200b\u4f60\u200b\u5c06\u200b\u4f1a\u200b\u4e86\u89e3\u200b\u5230\u200b\u5982\u4e0b\u200b\u5185\u5bb9\u200b\uff1a + \u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b\u547d\u4ee4\u200b\u751f\u6210\u200bDialect\u200b\u7684\u200b\u58f0\u660e\u200b\u548c\u200b\u5b9a\u4e49\u200b\uff1f + \u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b\u547d\u4ee4\u200b\u751f\u6210\u200bOp\u200b\u7684\u200b\u58f0\u660e\u200b\u548c\u200b\u5b9a\u4e49\u200b\uff0c\u200b\u5982\u4f55\u200b\u8fc7\u6ee4\u200b\u53ea\u200b\u751f\u6210\u200b\u67d0\u4e2a\u200bOp\u200b\u7684\u200b\u58f0\u660e\u200b\u548c\u200b\u5b9a\u4e49\u200b\uff1f + \u200b\u5982\u4f55\u200b\u4e3a\u200bPrintOp\u200b\u624b\u5199\u200bParse\u200b\u51fd\u6570\u200b\u548c\u200bPrint\u200b\u51fd\u6570\u200b\uff1f + \u200b\u5982\u4f55\u200b\u5c06\u200b\u7f16\u8bd1\u200b\u4ee3\u7801\u200b\uff0c\u200b\u5c06\u200b\u6539\u52a8\u200b\u5e94\u7528\u200b\u5230\u200b\u751f\u6210\u200b\u7684\u200bmlir\u200b\u6587\u4ef6\u200b\u4e2d\u200b\uff1f</p>"},{"location":"notes/%23AI%E7%AF%87/mlir/learn_toy2/#\u6b63\u5e38\u7f16\u8bd1toy\u793a\u4f8b\u6d41\u7a0b","title":"\u6b63\u5e38\u200b\u7f16\u8bd1\u200btoy\u200b\u793a\u4f8b\u200b\u6d41\u7a0b","text":"<p>\u200b\u5148\u770b\u200b\u4e00\u4e0b\u200btoy\u200b\u4f8b\u5b50\u200b\u5b9a\u4e49\u200b\uff0c\u200b\u5728\u200bmlir/test/Examples/Toy/Ch2/codegen.toy\u200b\u6587\u4ef6\u200b\u4e2d\u200b\uff1a</p> <p></p>C++<pre><code>// codegen.toy\ndef multiply_transpose(a, b) {\n  return transpose(a) * transpose(b);\n}\n\ndef main() {\n  var a&lt;2, 3&gt; = [[1, 2, 3], [4, 5, 6]];\n  var b&lt;2, 3&gt; = [1, 2, 3, 4, 5, 6];\n  var c = multiply_transpose(a, b);\n  var d = multiply_transpose(b, a);\n  print(d);\n}\n</code></pre> \u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u4e24\u4e2a\u200b\u51fd\u6570\u200bmultiply_transpose\u200b\u548c\u200bmain\u200b\u4e3b\u200b\u51fd\u6570\u200b\uff0c\u200b\u5728\u200bmain\u200b\u51fd\u6570\u200b\u4e2d\u200b\u8c03\u7528\u200b\u4e86\u200bprint\u200b\u51fd\u6570\u200b\uff0c\u200b\u4e5f\u200b\u5c31\u662f\u200bprintOp\u3002 \u200b\u7b2c\u4e00\u6b65\u200b\uff0c\u200b\u7f16\u8bd1\u200btoy\u200b\u6587\u4ef6\u200b Bash<pre><code>#!/bin/bash\nmlir_src_root=$(pwd)/mlir\nbuild_root=$(pwd)/build\n\n${build_root}/bin/toyc-ch2 ${mlir_src_root}/test/Examples/Toy/Ch2/codegen.toy -emit=mlir -mlir-print-debuginfo\n</code></pre><p></p> <p>\u200b\u7f16\u8bd1\u200b\u540e\u200b\u751f\u6210\u200b\u7684\u200b\u5185\u5bb9\u200b\uff1a</p> <p></p>Text Only<pre><code>module {\n  toy.func @multiply_transpose(%arg0: tensor&lt;*xf64&gt; loc(\"/home/ken/Codes/mlir_about/llvm-project/mlir/test/Examples/Toy/Ch2/codegen.toy\":4:1), %arg1: tensor&lt;*xf64&gt; loc(\"/home/ken/Codes/mlir_about/llvm-project/mlir/test/Examples/Toy/Ch2/codegen.toy\":4:1)) -&gt; tensor&lt;*xf64&gt; {\n    %0 = toy.transpose(%arg0 : tensor&lt;*xf64&gt;) to tensor&lt;*xf64&gt; loc(\"/home/ken/Codes/mlir_about/llvm-project/mlir/test/Examples/Toy/Ch2/codegen.toy\":5:10)\n    %1 = toy.transpose(%arg1 : tensor&lt;*xf64&gt;) to tensor&lt;*xf64&gt; loc(\"/home/ken/Codes/mlir_about/llvm-project/mlir/test/Examples/Toy/Ch2/codegen.toy\":5:25)\n    %2 = toy.mul %0, %1 : tensor&lt;*xf64&gt; loc(\"/home/ken/Codes/mlir_about/llvm-project/mlir/test/Examples/Toy/Ch2/codegen.toy\":5:25)\n    toy.return %2 : tensor&lt;*xf64&gt; loc(\"/home/ken/Codes/mlir_about/llvm-project/mlir/test/Examples/Toy/Ch2/codegen.toy\":5:3)\n  } loc(\"/home/ken/Codes/mlir_about/llvm-project/mlir/test/Examples/Toy/Ch2/codegen.toy\":4:1)\n  toy.func @main() {\n    %0 = toy.constant dense&lt;[[1.000000e+00, 2.000000e+00, 3.000000e+00], [4.000000e+00, 5.000000e+00, 6.000000e+00]]&gt; : tensor&lt;2x3xf64&gt; loc(\"/home/ken/Codes/mlir_about/llvm-project/mlir/test/Examples/Toy/Ch2/codegen.toy\":9:17)\n    %1 = toy.reshape(%0 : tensor&lt;2x3xf64&gt;) to tensor&lt;2x3xf64&gt; loc(\"/home/ken/Codes/mlir_about/llvm-project/mlir/test/Examples/Toy/Ch2/codegen.toy\":9:3)\n    %2 = toy.constant dense&lt;[1.000000e+00, 2.000000e+00, 3.000000e+00, 4.000000e+00, 5.000000e+00, 6.000000e+00]&gt; : tensor&lt;6xf64&gt; loc(\"/home/ken/Codes/mlir_about/llvm-project/mlir/test/Examples/Toy/Ch2/codegen.toy\":10:17)\n    %3 = toy.reshape(%2 : tensor&lt;6xf64&gt;) to tensor&lt;2x3xf64&gt; loc(\"/home/ken/Codes/mlir_about/llvm-project/mlir/test/Examples/Toy/Ch2/codegen.toy\":10:3)\n    %4 = toy.generic_call @multiply_transpose(%1, %3) : (tensor&lt;2x3xf64&gt;, tensor&lt;2x3xf64&gt;) -&gt; tensor&lt;*xf64&gt; loc(\"/home/ken/Codes/mlir_about/llvm-project/mlir/test/Examples/Toy/Ch2/codegen.toy\":11:11)\n    %5 = toy.generic_call @multiply_transpose(%3, %1) : (tensor&lt;2x3xf64&gt;, tensor&lt;2x3xf64&gt;) -&gt; tensor&lt;*xf64&gt; loc(\"/home/ken/Codes/mlir_about/llvm-project/mlir/test/Examples/Toy/Ch2/codegen.toy\":12:11)\n    toy.print %5 : tensor&lt;*xf64&gt; loc(\"/home/ken/Codes/mlir_about/llvm-project/mlir/test/Examples/Toy/Ch2/codegen.toy\":13:3)\n    toy.return loc(\"/home/ken/Codes/mlir_about/llvm-project/mlir/test/Examples/Toy/Ch2/codegen.toy\":8:1)\n  } loc(\"/home/ken/Codes/mlir_about/llvm-project/mlir/test/Examples/Toy/Ch2/codegen.toy\":8:1)\n} loc(unknown)\n</code></pre> \u200b\u4e0a\u9762\u200b\u5c31\u662f\u200b\u7f16\u8bd1\u200b\u751f\u6210\u200b\u7684\u200bmlir\u200b\u7684\u200b\u5185\u5bb9\u200b\uff0c\u200b\u6211\u4eec\u200b\u5148\u200b\u5173\u6ce8\u200bprint\u200b\u8c03\u7528\u200b\u7684\u200b\u90e8\u5206\u200b\u4ee3\u7801\u200b\uff1a Text Only<pre><code>toy.print %5 : tensor&lt;*xf64&gt; loc(\"/home/ken/Codes/mlir_about/llvm-project/mlir/test/Examples/Toy/Ch2/codegen.toy\":13:3)\n</code></pre> \u200b\u6253\u5370\u200b\u4e2d\u200b\u7684\u200b\u5185\u5bb9\u200b\u548c\u200b\u683c\u5f0f\u200b\uff0c\u200b\u5728\u200btd\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u8fdb\u884c\u200b\u4e86\u200b\u5b9a\u4e49\u200b\uff1a Text Only<pre><code>def PrintOp : Toy_Op&lt;\"print\"&gt; {\n  let summary = \"print operation\";\n  let description = [{\n    The \"print\" builtin operation prints a given input tensor, and produces\n    no results.\n  }];\n\n  // The print operation takes an input tensor to print.\n  let arguments = (ins F64Tensor:$input);\n\n  let assemblyFormat = \"$input attr-dict `:` type($input)\";\n}\n</code></pre> assemblyFormat\u200b\u5c31\u662f\u200b\u8f93\u51fa\u200b\u7684\u200b\u5b9a\u4e49\u200b\uff0c\u200b\u5305\u62ec\u200b\u4e86\u200b$input\u200b\u4ee5\u53ca\u200b\u8f93\u5165\u200b\u7c7b\u578b\u200b\u7b49\u200b\u3002 Text Only<pre><code>let assemblyFormat = \"$input attr-dict `:` type($input)\";\n</code></pre> \u200b\u7b2c\u4e8c\u6b65\u200b\uff0c\u200b\u5bf9\u200bPrintOp\u200b\u7684\u200b\u58f0\u660e\u200b\u548c\u200b\u5b9a\u4e49\u200b\u8fdb\u884c\u200b\u751f\u6210\u200b\u3002 Text Only<pre><code>${build_root}/bin/mlir-tblgen -gen-op-decls ${mlir_src_root}/examples/toy/Ch2/include/toy/Ops.td --op-include-regex \"print\" -I ${mlir_src_root}/include/ \n</code></pre> op-include-regex\u200b\u5bf9\u200bop\u200b\u8fdb\u884c\u200b\u4e86\u200b\u8fc7\u6ee4\u200b\uff0c\u200b\u6307\u5b9a\u200b\u53ea\u200b\u751f\u6210\u200bprintOp\u200b\u7684\u200b\u58f0\u660e\u200b\u3002 \u200b\u6267\u884c\u200b\u7ed3\u679c\u200b\uff1a C++<pre><code>{{\n......\nclass PrintOp : public ::mlir::Op&lt;PrintOp, ::mlir::OpTrait::ZeroRegions, ::mlir::OpTrait::ZeroResults, ::mlir::OpTrait::ZeroSuccessors, ::mlir::OpTrait::OneOperand, ::mlir::OpTrait::OpInvariants&gt; {\npublic:\n  using Op::Op;\n  using Op::print;\n  using Adaptor = PrintOpAdaptor;\n  template &lt;typename RangeT&gt;\n  using GenericAdaptor = PrintOpGenericAdaptor&lt;RangeT&gt;;\n  using FoldAdaptor = GenericAdaptor&lt;::llvm::ArrayRef&lt;::mlir::Attribute&gt;&gt;;\n  static ::llvm::ArrayRef&lt;::llvm::StringRef&gt; getAttributeNames() {\n    return {};\n  }\n\n  static constexpr ::llvm::StringLiteral getOperationName() {\n    return ::llvm::StringLiteral(\"toy.print\");\n  }\n\n  std::pair&lt;unsigned, unsigned&gt; getODSOperandIndexAndLength(unsigned index) {\n    return {index, 1};\n  }\n\n  ::mlir::Operation::operand_range getODSOperands(unsigned index) {\n    auto valueRange = getODSOperandIndexAndLength(index);\n    return {std::next(getOperation()-&gt;operand_begin(), valueRange.first),\n             std::next(getOperation()-&gt;operand_begin(), valueRange.first + valueRange.second)};\n  }\n\n  ::mlir::TypedValue&lt;::mlir::TensorType&gt; getInput() {\n    return ::llvm::cast&lt;::mlir::TypedValue&lt;::mlir::TensorType&gt;&gt;(*getODSOperands(0).begin());\n  }\n\n  ::mlir::OpOperand &amp;getInputMutable() {\n    auto range = getODSOperandIndexAndLength(0);\n    return getOperation()-&gt;getOpOperand(range.first);\n  }\n\n  std::pair&lt;unsigned, unsigned&gt; getODSResultIndexAndLength(unsigned index) {\n    return {index, 1};\n  }\n\n  ::mlir::Operation::result_range getODSResults(unsigned index) {\n    auto valueRange = getODSResultIndexAndLength(index);\n    return {std::next(getOperation()-&gt;result_begin(), valueRange.first),\n             std::next(getOperation()-&gt;result_begin(), valueRange.first + valueRange.second)};\n  }\n\n  static void build(::mlir::OpBuilder &amp;odsBuilder, ::mlir::OperationState &amp;odsState, ::mlir::Value input);\n  static void build(::mlir::OpBuilder &amp;odsBuilder, ::mlir::OperationState &amp;odsState, ::mlir::TypeRange resultTypes, ::mlir::Value input);\n  static void build(::mlir::OpBuilder &amp;, ::mlir::OperationState &amp;odsState, ::mlir::TypeRange resultTypes, ::mlir::ValueRange operands, ::llvm::ArrayRef&lt;::mlir::NamedAttribute&gt; attributes = {});\n  static ::mlir::ParseResult parse(::mlir::OpAsmParser &amp;parser, ::mlir::OperationState &amp;result);\n  void print(::mlir::OpAsmPrinter &amp;p);\n  ::mlir::LogicalResult verifyInvariantsImpl();\n  ::mlir::LogicalResult verifyInvariants();\npublic:\n};\n} // namespace toy\n} // namespace mlir\nMLIR_DECLARE_EXPLICIT_TYPE_ID(::mlir::toy::PrintOp)\n</code></pre><p></p> <p>\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u58f0\u660e\u200b\u4e2d\u6709\u200bparse\u200b\u548c\u200bprint\u200b\u51fd\u6570\u200b\u3002\u200b\u4e0b\u9762\u200b\u518d\u200b\u751f\u6210\u200b\u51fd\u6570\u200b\u5b9a\u4e49\u200b\uff0c\u200b\u547d\u4ee4\u200b\u5982\u4e0b\u200b\uff1a </p>C++<pre><code>//===----------------------------------------------------------------------===//\n// ::mlir::toy::PrintOp definitions\n//===----------------------------------------------------------------------===//\n\nnamespace detail {\n} // namespace detail\nPrintOpAdaptor::PrintOpAdaptor(PrintOp op) : PrintOpGenericAdaptor(op-&gt;getOperands(), op) {}\n.......\n\n::mlir::ParseResult PrintOp::parse(::mlir::OpAsmParser &amp;parser, ::mlir::OperationState &amp;result) {\n  ::mlir::OpAsmParser::UnresolvedOperand inputRawOperand{};\n  ::llvm::ArrayRef&lt;::mlir::OpAsmParser::UnresolvedOperand&gt; inputOperands(&amp;inputRawOperand, 1);  ::llvm::SMLoc inputOperandsLoc;\n  (void)inputOperandsLoc;\n  ::mlir::Type inputRawType{};\n  ::llvm::ArrayRef&lt;::mlir::Type&gt; inputTypes(&amp;inputRawType, 1);\n\n  inputOperandsLoc = parser.getCurrentLocation();\n  if (parser.parseOperand(inputRawOperand))\n    return ::mlir::failure();\n  {\n    auto loc = parser.getCurrentLocation();(void)loc;\n    if (parser.parseOptionalAttrDict(result.attributes))\n      return ::mlir::failure();\n  }\n  if (parser.parseColon())\n    return ::mlir::failure();\n\n  {\n    ::mlir::TensorType type;\n    if (parser.parseCustomTypeWithFallback(type))\n      return ::mlir::failure();\n    inputRawType = type;\n  }\n  if (parser.resolveOperands(inputOperands, inputTypes, inputOperandsLoc, result.operands))\n    return ::mlir::failure();\n  return ::mlir::success();\n}\n\nvoid PrintOp::print(::mlir::OpAsmPrinter &amp;_odsPrinter) {\n  _odsPrinter &lt;&lt; ' ';\n  _odsPrinter &lt;&lt; getInput();\n  ::llvm::SmallVector&lt;::llvm::StringRef, 2&gt; elidedAttrs;\n  _odsPrinter.printOptionalAttrDict((*this)-&gt;getAttrs(), elidedAttrs);\n  _odsPrinter &lt;&lt; ' ' &lt;&lt; \":\";\n  _odsPrinter &lt;&lt; ' ';\n  {\n    auto type = getInput().getType();\n    if (auto validType = ::llvm::dyn_cast&lt;::mlir::TensorType&gt;(type))\n      _odsPrinter.printStrippedAttrOrType(validType);\n   else\n     _odsPrinter &lt;&lt; type;\n  }\n}\n\n} // namespace toy\n} // namespace mlir\nMLIR_DEFINE_EXPLICIT_TYPE_ID(::mlir::toy::PrintOp)\n</code></pre> \u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u751f\u6210\u200b\u7684\u200bparse\u200b\u51fd\u6570\u200b\u548c\u200bprint\u200b\u51fd\u6570\u200b\u7684\u200b\u5b9a\u4e49\u200b\uff0cprint\u200b\u51fd\u6570\u200b\u5f88\u200b\u597d\u200b\u7406\u89e3\u200b\uff0c\u200b\u83b7\u53d6\u200b\u5185\u5bb9\u200b\uff0c\u200b\u5982\u200bgetInput()\uff0c\u200b\u7136\u540e\u200b\u8c03\u7528\u200b _odsPrinter &lt;&lt; \u200b\u6253\u5370\u200b\u5185\u5bb9\u200b\uff0c\u200b\u5c31\u200b\u50cf\u200bcout\u200b\u4e00\u6837\u200b\u3002<p></p>"},{"location":"notes/%23AI%E7%AF%87/mlir/learn_toy2/#\u624b\u5199printop\u7684print\u548cparse\u65b9\u6cd5cpp\u5185\u5bb9","title":"\u624b\u5199\u200bPrintOp\u200b\u7684\u200bPrint\u200b\u548c\u200bParse\u200b\u65b9\u6cd5\u200bcpp\u200b\u5185\u5bb9","text":"<p>\u200b\u521a\u521a\u200b\u751f\u6210\u200b\u4e86\u200bPrint\u200b\u51fd\u6570\u200b\u548c\u200bParse\u200b\u51fd\u6570\u200b\u7684\u200b\u5b9a\u4e49\u200b\uff0c\u200b\u6211\u4eec\u200b\u5982\u679c\u200b\u8981\u200b\u624b\u52a8\u200b\u6539\u5199\u200bcpp\u200b\u600e\u4e48\u529e\u200b\u5462\u200b\uff1f\u200b\u806a\u660e\u200b\u5982\u200b\u4f60\u200b\u60f3\u5230\u200b\u4e86\u200b\uff0c\u200b\u628a\u200b\u751f\u6210\u200b\u7684\u200b\u4e24\u4e2a\u200b\u51fd\u6570\u200b\u7c98\u8d34\u200b\u5230\u200bDialect.cpp\u200b\u4e2d\u200b\u3002 \u200b\u90a3\u4e48\u200b\u600e\u4e48\u200b\u907f\u514d\u200b\u81ea\u52a8\u200b\u751f\u6210\u200b\u8fd9\u200b\u4e24\u4e2a\u200b\u51fd\u6570\u200b\u5462\u200b\uff1f\u200b\u53c2\u8003\u200bConstantOp\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u6539\u5199\u200b\u4e86\u200btd\u200b\u6587\u4ef6\u200b\u4e2d\u200bPrintOp\u200b\u7684\u200b\u5b9a\u4e49\u200b\uff0c\u200b\u6ce8\u91ca\u200b\u4e86\u200bassemblyFormat\uff0c\u200b\u6dfb\u52a0\u200bhasCustomAssemblyFormat\u3002\u200b\u610f\u601d\u200b\u662f\u200b\uff0c\u200b\u4e0d\u200b\u6307\u5b9a\u200bFormat\uff0c\u200b\u7136\u540e\u200b\u81ea\u5b9a\u4e49\u200bFormat\u3002</p> Text Only<pre><code>// Ops.td\ndef PrintOp : Toy_Op&lt;\"print\"&gt; {\n  let summary = \"print operation\";\n  let description = [{\n    The \"print\" builtin operation prints a given input tensor, and produces\n    no results.\n  }];\n\n  // The print operation takes an input tensor to print.\n  let arguments = (ins F64Tensor:$input);\n\n  // Indicate that the operation has a custom parser and printer method.\n  let hasCustomAssemblyFormat = 1;\n  // let assemblyFormat = \"$input attr-dict `:` type($input)\";\n}\n</code></pre> <p>\u200b\u7c98\u8d34\u200bPrint\u200b\u51fd\u6570\u200b\u548c\u200bParse\u200b\u51fd\u6570\u200b\u5230\u200bDialect.cpp\u200b\u4e2d\u200b\u3002 </p>C++<pre><code>void PrintOp::print(::mlir::OpAsmPrinter &amp;_odsPrinter) {\n  _odsPrinter &lt;&lt; ' ';\n  _odsPrinter &lt;&lt; getInput();\n  _odsPrinter &lt;&lt; \"hello_change\";\n  ::llvm::SmallVector&lt;::llvm::StringRef, 2&gt; elidedAttrs;\n  _odsPrinter.printOptionalAttrDict((*this)-&gt;getAttrs(), elidedAttrs);\n  _odsPrinter &lt;&lt; ' ' &lt;&lt; \":\";\n  _odsPrinter &lt;&lt; ' ';\n  {\n    auto type = getInput().getType();\n    if (auto validType = ::llvm::dyn_cast&lt;::mlir::TensorType&gt;(type))\n      _odsPrinter.printStrippedAttrOrType(validType);\n   else\n     _odsPrinter &lt;&lt; type;\n  }\n}\n</code></pre><p></p> <p>\u200b\u7531\u4e8e\u200b\u6539\u52a8\u200b\u4e86\u200bcpp\u200b\u6e90\u7801\u200b\uff0c\u200b\u9700\u8981\u200b\u5148\u200b\u7f16\u8bd1\u200btoy-ch2 </p>Bash<pre><code>cmake --build . --target toyc-ch2\n</code></pre><p></p> <p>\u200b\u91cd\u65b0\u200b\u6267\u884c\u200b\uff1a </p>Bash<pre><code>#!/bin/bash\nmlir_src_root=$(pwd)/mlir\nbuild_root=$(pwd)/build\n\n${build_root}/bin/toyc-ch2 ${mlir_src_root}/test/Examples/Toy/Ch2/codegen.toy -emit=mlir -mlir-print-debuginfo\n</code></pre> \u200b\u751f\u6210\u200b\u7684\u200bmlir\u200b\u5185\u5bb9\u200b\u5982\u4e0b\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u5176\u5b83\u200b\u5185\u5bb9\u200b\u6ca1\u6709\u200b\u53d1\u751f\u53d8\u5316\u200b\uff0c\u200b\u4f46\u662f\u200b\u589e\u52a0\u200b\u4e86\u200b\u6211\u4eec\u200b\u65b0\u200b\u6dfb\u52a0\u200b\u7684\u200b\u201dhello_change\u201d\u200b\u5185\u5bb9\u200b\u3002 Text Only<pre><code>module {\n  toy.func @multiply_transpose(%arg0: tensor&lt;*xf64&gt; loc(\"/home/ken/Codes/mlir_about/llvm-project/mlir/test/Examples/Toy/Ch2/codegen.toy\":4:1), %arg1: tensor&lt;*xf64&gt; loc(\"/home/ken/Codes/mlir_about/llvm-project/mlir/test/Examples/Toy/Ch2/codegen.toy\":4:1)) -&gt; tensor&lt;*xf64&gt; {\n    %0 = toy.transpose(%arg0 : tensor&lt;*xf64&gt;) to tensor&lt;*xf64&gt; loc(\"/home/ken/Codes/mlir_about/llvm-project/mlir/test/Examples/Toy/Ch2/codegen.toy\":5:10)\n    %1 = toy.transpose(%arg1 : tensor&lt;*xf64&gt;) to tensor&lt;*xf64&gt; loc(\"/home/ken/Codes/mlir_about/llvm-project/mlir/test/Examples/Toy/Ch2/codegen.toy\":5:25)\n    %2 = toy.mul %0, %1 : tensor&lt;*xf64&gt; loc(\"/home/ken/Codes/mlir_about/llvm-project/mlir/test/Examples/Toy/Ch2/codegen.toy\":5:25)\n    toy.return %2 : tensor&lt;*xf64&gt; loc(\"/home/ken/Codes/mlir_about/llvm-project/mlir/test/Examples/Toy/Ch2/codegen.toy\":5:3)\n  } loc(\"/home/ken/Codes/mlir_about/llvm-project/mlir/test/Examples/Toy/Ch2/codegen.toy\":4:1)\n  toy.func @main() {\n    %0 = toy.constant dense&lt;[[1.000000e+00, 2.000000e+00, 3.000000e+00], [4.000000e+00, 5.000000e+00, 6.000000e+00]]&gt; : tensor&lt;2x3xf64&gt; loc(\"/home/ken/Codes/mlir_about/llvm-project/mlir/test/Examples/Toy/Ch2/codegen.toy\":9:17)\n    %1 = toy.reshape(%0 : tensor&lt;2x3xf64&gt;) to tensor&lt;2x3xf64&gt; loc(\"/home/ken/Codes/mlir_about/llvm-project/mlir/test/Examples/Toy/Ch2/codegen.toy\":9:3)\n    %2 = toy.constant dense&lt;[1.000000e+00, 2.000000e+00, 3.000000e+00, 4.000000e+00, 5.000000e+00, 6.000000e+00]&gt; : tensor&lt;6xf64&gt; loc(\"/home/ken/Codes/mlir_about/llvm-project/mlir/test/Examples/Toy/Ch2/codegen.toy\":10:17)\n    %3 = toy.reshape(%2 : tensor&lt;6xf64&gt;) to tensor&lt;2x3xf64&gt; loc(\"/home/ken/Codes/mlir_about/llvm-project/mlir/test/Examples/Toy/Ch2/codegen.toy\":10:3)\n    %4 = toy.generic_call @multiply_transpose(%1, %3) : (tensor&lt;2x3xf64&gt;, tensor&lt;2x3xf64&gt;) -&gt; tensor&lt;*xf64&gt; loc(\"/home/ken/Codes/mlir_about/llvm-project/mlir/test/Examples/Toy/Ch2/codegen.toy\":11:11)\n    %5 = toy.generic_call @multiply_transpose(%3, %1) : (tensor&lt;2x3xf64&gt;, tensor&lt;2x3xf64&gt;) -&gt; tensor&lt;*xf64&gt; loc(\"/home/ken/Codes/mlir_about/llvm-project/mlir/test/Examples/Toy/Ch2/codegen.toy\":12:11)\n    toy.print %5hello_change : tensor&lt;*xf64&gt; loc(\"/home/ken/Codes/mlir_about/llvm-project/mlir/test/Examples/Toy/Ch2/codegen.toy\":13:3)\n    toy.return loc(\"/home/ken/Codes/mlir_about/llvm-project/mlir/test/Examples/Toy/Ch2/codegen.toy\":8:1)\n  } loc(\"/home/ken/Codes/mlir_about/llvm-project/mlir/test/Examples/Toy/Ch2/codegen.toy\":8:1)\n} loc(unknown)\n</code></pre><p></p>"},{"location":"notes/%23AI%E7%AF%87/mlir/learn_toy2/#\u53c2\u8003","title":"\u53c2\u8003","text":"<p>https://mlir.llvm.org/docs/Tutorials/Toy/Ch-2/</p>"},{"location":"notes/%23AI%E7%AF%87/mlir/learn_toy3/","title":"MLIR \u200b\u7cfb\u5217\u200b&ndash;Toy3 Rewrite Pass","text":""},{"location":"notes/%23AI%E7%AF%87/mlir/learn_toy3/#mlir-\u7cfb\u5217toy3-rewrite-pass","title":"MLIR \u200b\u7cfb\u5217\u200b\u2013Toy3 Rewrite Pass","text":"<p>\u200b\u4e0a\u200b\u4e00\u7bc7\u200b\uff1aMLIR\u200b\u521d\u9047\u200b\u2013Toy2</p> <p>https://mlir.llvm.org/docs/Tutorials/Toy/Ch-3/</p> <p>\u200b\u901a\u8fc7\u200b\u6a21\u5f0f\u5339\u914d\u200b\u5b8c\u6210\u200bOp\u200b\u7684\u200b\u4f18\u5316\u200b\uff0c\u200b\u6bd4\u5982\u200b\u5bf9\u200b\u4e00\u4e2a\u200b\u77e9\u9635\u200b\u505a\u200b\u4e24\u6b21\u200btranspose\u200b\u8f6c\u7f6e\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u7b49\u4e8e\u200b\u539f\u59cb\u200b\u77e9\u9635\u200b\u3002\u200b\u90a3\u4e48\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u4f18\u5316\u200b\u4e3a\u200b\u4e0d\u200b\u505a\u200b\u8fd9\u4e2a\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u8282\u7ea6\u200b\u4e24\u6b21\u200b\u64cd\u4f5c\u200b\u3002</p>"},{"location":"notes/%23AI%E7%AF%87/mlir/learn_toy3/#\u4e24\u79cd\u673a\u5236","title":"\u4e24\u79cd\u200b\u673a\u5236","text":"<ul> <li>cpp\u200b\u7ee7\u627f\u200bOpRewritePattern\u200b\u5b9e\u73b0\u200b</li> <li>\u200b\u901a\u8fc7\u200bDRR\u200b\u63cf\u8ff0\u200b</li> </ul>"},{"location":"notes/%23AI%E7%AF%87/mlir/learn_toy3/#cpp-rewrite-transpose\u64cd\u4f5c","title":"cpp Rewrite Transpose\u200b\u64cd\u4f5c","text":"<p>toy\u200b\u63cf\u8ff0\u200b\u5982\u4e0b\u200b\uff1a </p>Text Only<pre><code>def transpose_transpose(x) {\n  return transpose(transpose(x));\n}\n\ndef main() {\n  var a&lt;2, 3&gt; = [[1, 2, 3], [4, 5, 6]];\n  var b = transpose_transpose(a);\n  print(b);\n}\n</code></pre><p></p> <p>\u200b\u4f18\u5316\u200b\u524d\u200b\u751f\u6210\u200b\u7684\u200bmlir\u3002 </p>Bash<pre><code>${build_root}/bin/toyc-ch3 ${mlir_src_root}/test/Examples/Toy/Ch3/transpose_transpose.toy -emit=mlir\n</code></pre><p></p> Text Only<pre><code>module {\n  toy.func @transpose_transpose(%arg0: tensor&lt;*xf64&gt;) -&gt; tensor&lt;*xf64&gt; {\n    %0 = toy.transpose(%arg0 : tensor&lt;*xf64&gt;) to tensor&lt;*xf64&gt;\n    %1 = toy.transpose(%0 : tensor&lt;*xf64&gt;) to tensor&lt;*xf64&gt;\n    toy.return %1 : tensor&lt;*xf64&gt;\n  }\n  toy.func @main() {\n    %0 = toy.constant dense&lt;[[1.000000e+00, 2.000000e+00, 3.000000e+00], [4.000000e+00, 5.000000e+00, 6.000000e+00]]&gt; : tensor&lt;2x3xf64&gt;\n    %1 = toy.reshape(%0 : tensor&lt;2x3xf64&gt;) to tensor&lt;2x3xf64&gt;\n    %2 = toy.generic_call @transpose_transpose(%1) : (tensor&lt;2x3xf64&gt;) -&gt; tensor&lt;*xf64&gt;\n    toy.print %2 : tensor&lt;*xf64&gt;\n    toy.return\n  }\n}\n</code></pre> <p></p>Bash<pre><code>${build_root}/bin/toyc-ch3 ${mlir_src_root}/test/Examples/Toy/Ch3/transpose_transpose.toy -emit=mlir -opt\n</code></pre> \u200b\u4f18\u5316\u200b\u540e\u200b\u751f\u6210\u200b\u7684\u200bmlir\u3002 Text Only<pre><code>module {\n  toy.func @transpose_transpose(%arg0: tensor&lt;*xf64&gt;) -&gt; tensor&lt;*xf64&gt; {\n    toy.return %arg0 : tensor&lt;*xf64&gt;\n  }\n  toy.func @main() {\n    %0 = toy.constant dense&lt;[[1.000000e+00, 2.000000e+00, 3.000000e+00], [4.000000e+00, 5.000000e+00, 6.000000e+00]]&gt; : tensor&lt;2x3xf64&gt;\n    %1 = toy.generic_call @transpose_transpose(%0) : (tensor&lt;2x3xf64&gt;) -&gt; tensor&lt;*xf64&gt;\n    toy.print %1 : tensor&lt;*xf64&gt;\n    toy.return\n  }\n}\n</code></pre><p></p> <p>\u200b\u6211\u4eec\u200b\u5728\u200bmatchAndRewrite\u200b\u51fd\u6570\u200b\u4e2d\u200b\u52a0\u5165\u200b\u6253\u5370\u4fe1\u606f\u200b\uff1a </p>C++<pre><code>struct SimplifyRedundantTranspose : public mlir::OpRewritePattern&lt;TransposeOp&gt; {\n  /// We register this pattern to match every toy.transpose in the IR.\n  /// The \"benefit\" is used by the framework to order the patterns and process\n  /// them in order of profitability.\n  SimplifyRedundantTranspose(mlir::MLIRContext *context)\n      : OpRewritePattern&lt;TransposeOp&gt;(context, /*benefit=*/1) {}\n\n  /// This method attempts to match a pattern and rewrite it. The rewriter\n  /// argument is the orchestrator of the sequence of rewrites. The pattern is\n  /// expected to interact with it to perform any changes to the IR from here.\n  mlir::LogicalResult\n  matchAndRewrite(TransposeOp op,\n                  mlir::PatternRewriter &amp;rewriter) const override {\n    std::cout &lt;&lt; \"call matchAndRewrite transpose op \"&lt;&lt; op.getOperationName().str() &lt;&lt; \"\\n\";\n    // Look through the input of the current transpose.\n    mlir::Value transposeInput = op.getOperand();\n    TransposeOp transposeInputOp = transposeInput.getDefiningOp&lt;TransposeOp&gt;();\n\n    // Input defined by another transpose? If not, no match.\n    if (!transposeInputOp)\n      return failure();\n    op.emitWarning() &lt;&lt; \"arrive here\" &lt;&lt; \"\\n\";\n    // Otherwise, we have a redundant transpose. Use the rewriter.\n    rewriter.replaceOp(op, {transposeInputOp.getOperand()});\n    return success();\n  }\n};\n</code></pre><p></p> Text Only<pre><code>def transpose_transpose(x) {\n  return transpose1(transpose2(x));\n}\n</code></pre> <p>\u200b\u901a\u8fc7\u200b\u6253\u5370\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u5339\u914d\u200b\u4e86\u200b\u4e24\u6b21\u200b\uff0c\u200b\u5339\u914d\u200b\u5230\u200b\u4e86\u200btranspose(transpose())\u200b\u5f62\u5f0f\u200b\uff0c\u200b\u5bf9\u200b\u5176\u200b\u8fdb\u884c\u200b\u6d88\u9664\u200b\u3002 </p>Text Only<pre><code>call matchAndRewrite transpose op toy.transpose\ncall matchAndRewrite transpose op toy.transpose\narrive here\n</code></pre> debug\u200b\u6a21\u5f0f\u200b\u4e0b\u200b\u6253\u5370\u200b\u8ffd\u8e2a\u200b\u60c5\u51b5\u200b: Bash<pre><code>//===-------------------------------------------===//\n/xxx/llvm-project/mlir/test/Examples/Toy/Ch3/transpose_transpose.toy:5:20: warning: index : 1 call matchAndRewrite transpose op toy.transpose\n\n  return transpose(transpose(x));\n                   ^\n/xxx/llvm-project/mlir/test/Examples/Toy/Ch3/transpose_transpose.toy:5:20: note: see current operation: %0 = toy.transpose(%arg0 : tensor&lt;*xf64&gt;) to tensor&lt;*xf64&gt;\n/xxx/llvm-project/mlir/test/Examples/Toy/Ch3/transpose_transpose.toy:5:10: warning: index : 2 call matchAndRewrite transpose op toy.transpose\n\n  return transpose(transpose(x));\n         ^\n/xxx/llvm-project/mlir/test/Examples/Toy/Ch3/transpose_transpose.toy:5:10: note: see current operation: %1 = toy.transpose(%0 : tensor&lt;*xf64&gt;) to tensor&lt;*xf64&gt;\n/xxx/llvm-project/mlir/test/Examples/Toy/Ch3/transpose_transpose.toy:5:10: warning: arrive here\n\n  return transpose(transpose(x));\n         ^\n/xxx/llvm-project/mlir/test/Examples/Toy/Ch3/transpose_transpose.toy:5:10: note: see current operation: %1 = toy.transpose(%0 : tensor&lt;*xf64&gt;) to tensor&lt;*xf64&gt;\n</code></pre><p></p>"},{"location":"notes/%23AI%E7%AF%87/mlir/learn_toy3/#\u6ce8\u518c\u89c4\u8303\u5316canonicalizer\u673a\u5236","title":"\u6ce8\u518c\u200b\u89c4\u8303\u5316\u200b\uff08Canonicalizer\uff09\u200b\u673a\u5236","text":"<p>\u200b\u5728\u200b\u4e0a\u9762\u200b\u6211\u200b\u901a\u8fc7\u200b-opt\u200b\u6253\u5f00\u200b\u4e86\u200bCanonicalizer\u200b\u7684\u200b\u4f18\u5316\u200b\u9009\u9879\u200b\uff0c\u200b\u8fdb\u884c\u200b\u4e86\u200b\u6a21\u5f0f\u5339\u914d\u200b\u5e94\u7528\u200b\u6211\u4eec\u200b\u7684\u200b\u4f18\u5316\u200b\u89c4\u5219\u200b\u3002\u200b\u5bf9\u5e94\u200b\u7684\u200b\u5b9e\u73b0\u200b\u5728\u200btoyc.cpp\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u5982\u4e0b\u200b\uff0c </p>C++<pre><code>// \"toyc.cpp\"\nif (enableOpt) {\nmlir::PassManager pm(module.get()-&gt;getName());\n// Apply any generic pass manager command line options and run the pipeline.\nif (mlir::failed(mlir::applyPassManagerCLOptions(pm)))\n    return 4;\n\n// Add a run of the canonicalizer to optimize the mlir module.\npm.addNestedPass&lt;mlir::toy::FuncOp&gt;(mlir::createCanonicalizerPass());\nif (mlir::failed(pm.run(*module)))\n    return 4;\n}\n</code></pre><p></p> <p>\u200b\u5728\u200bToyCombine.cpp\u200b\u4e2d\u200b\uff0c\u200b\u5c06\u200bRewriter\u200b\u8fdb\u884c\u200b\u4e86\u200b\u6ce8\u518c\u200b\uff0c </p>C++<pre><code>// Register our patterns as \"canonicalization\" patterns on the TransposeOp so\n// that they can be picked up by the Canonicalization framework.\nvoid TransposeOp::getCanonicalizationPatterns(RewritePatternSet &amp;results,\n                                              MLIRContext *context) {\n  results.add&lt;SimplifyRedundantTranspose&gt;(context);\n}\n</code></pre><p></p>"},{"location":"notes/%23AI%E7%AF%87/mlir/learn_toy3/#drr\u65b9\u5f0frewrite-reshape","title":"DRR\u200b\u65b9\u5f0f\u200bRewrite Reshape","text":"Text Only<pre><code>module {\n  toy.func @main() {\n    %0 = toy.constant dense&lt;[1.000000e+00, 2.000000e+00]&gt; : tensor&lt;2xf64&gt;\n    %1 = toy.reshape(%0 : tensor&lt;2xf64&gt;) to tensor&lt;2x1xf64&gt;\n    %2 = toy.reshape(%1 : tensor&lt;2x1xf64&gt;) to tensor&lt;2x1xf64&gt;\n    %3 = toy.reshape(%2 : tensor&lt;2x1xf64&gt;) to tensor&lt;2x1xf64&gt;\n    toy.print %3 : tensor&lt;2x1xf64&gt;\n    toy.return\n  }\n}\n</code></pre> \u200b\u4e3b\u8981\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u4e24\u79cd\u200b\u4f18\u5316\u200b\uff1a + Reshape(x) -&gt; x \u200b\u4f18\u5316\u200b\u4e3a\u200b x\uff0c\u200b\u5373\u200bReshape\u200b\u7684\u200bsource\u200b\u548c\u200bdst\u200b\u4e00\u6837\u200b\u65f6\u200b\uff0c\u200b\u7701\u7565\u200bReshape\u200b\u64cd\u4f5c\u200b + Reshape(constant(x)) \u200b\u4f18\u5316\u200b\u4e3a\u200bx\uff0c\u200b\u5373\u200b\u5bf9\u200b\u4e00\u4e2a\u200bconstant\u200b\u505a\u200bReshape\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u7701\u7565\u200bReshape\u200b\u64cd\u4f5c\u200b Text Only<pre><code>module {\n  toy.func @main() {\n    %0 = toy.constant dense&lt;[[1.000000e+00], [2.000000e+00]]&gt; : tensor&lt;2x1xf64&gt;\n    toy.print %0 : tensor&lt;2x1xf64&gt;\n    toy.return\n  }\n}\n</code></pre> <p>DDR\u200b\u65b9\u5f0f\u200b\u63cf\u8ff0\u200b\u7684\u200b\u5185\u5bb9\u200b\u5728\u200bmlir/examples/toy/Ch3/mlir/ToyCombine.td\u200b\u4e2d\u200b\uff0c\u200b\u76f8\u5bf9\u200bcpp\u200b\u63cf\u8ff0\u200b\u7684\u200b\u65b9\u5f0f\u200b\u66f4\u52a0\u200b\u7b80\u5355\u200b\u3002 </p>Text Only<pre><code>def ReshapeReshapeOptPattern : Pat&lt;(ReshapeOp(ReshapeOp $arg)),\n                                   (ReshapeOp $arg)&gt;;\n\ndef ReshapeConstant :\n  NativeCodeCall&lt;\"$0.reshape(::llvm::cast&lt;ShapedType&gt;($1.getType()))\"&gt;;\ndef FoldConstantReshapeOptPattern : Pat&lt;\n  (ReshapeOp:$res (ConstantOp $arg)),\n  (ConstantOp (ReshapeConstant $arg, $res))&gt;;\n\ndef TypesAreIdentical : Constraint&lt;CPred&lt;\"$0.getType() == $1.getType()\"&gt;&gt;;\ndef RedundantReshapeOptPattern : Pat&lt;\n  (ReshapeOp:$res $arg), (replaceWithValue $arg),\n  [(TypesAreIdentical $res, $arg)]&gt;;\n</code></pre><p></p> <p>DDR\u200b\u8fd9\u79cd\u200b\u58f0\u660e\u200b\u7684\u200b\u65b9\u5f0f\u200b\u4e0d\u200b\u6e05\u6670\u200b\uff0c\u200b\u4e3a\u4e86\u200b\u770b\u200b\u751f\u6210\u200b\u7684\u200bcpp\u200b\u5185\u5bb9\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200bmlir-tblgen\u200b\u547d\u4ee4\u200b, \u2013gen-rewriters\u200b\u4f1a\u200b\u751f\u6210\u200brewriter\u200b\u5bf9\u5e94\u200b\u7684\u200bcpp\u200b\u4ee3\u7801\u200b\uff1a </p>Bash<pre><code>${build_root}/bin/mlir-tblgen --gen-rewriters  ${mlir_src_root}/examples/toy/Ch3/mlir/ToyCombine.td -I ${mlir_src_root}/include/  -I ${mlir_src_root}/examples/toy/Ch3/include\n</code></pre><p></p> <p>\u200b\u751f\u6210\u200b\u7684\u200bcpp\u200b\u5185\u5bb9\u200b\u90e8\u5206\u200b\u5982\u4e0b\u200b\uff0c\u200b\u4ee5\u200bReshapeReshapeOptPattern\u200b\u4e3a\u4f8b\u200b\uff0c\u200b\u5305\u62ec\u200b\u4e86\u200b\u89e3\u6790\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u62ff\u5230\u200b\u4e24\u4e2a\u200b\u7236\u5b50\u200bReshapeOp\u200b\u548c\u200b\u53c2\u6570\u200b\uff0c\u200b\u6267\u884c\u200brelapceOp\u200b\u64cd\u4f5c\u200b\u3002\u200b\u6700\u540e\u200b\u5bf9\u200bReshapeReshapeOptPattern\u200b\u8fdb\u884c\u200b\u6ce8\u518c\u200b\u3002 </p>C++<pre><code>struct ReshapeReshapeOptPattern : public ::mlir::RewritePattern {\n  ReshapeReshapeOptPattern(::mlir::MLIRContext *context)\n      : ::mlir::RewritePattern(\"toy.reshape\", 2, context, {\"toy.reshape\"}) {}\n  ::mlir::LogicalResult matchAndRewrite(::mlir::Operation *op0,\n      ::mlir::PatternRewriter &amp;rewriter) const override {\n    // Variables for capturing values and attributes used while creating ops\n    ::mlir::Operation::operand_range arg(op0-&gt;getOperands());\n    ::llvm::SmallVector&lt;::mlir::Operation *, 4&gt; tblgen_ops;\n\n    // Match\n    tblgen_ops.push_back(op0);\n    auto castedOp0 = ::llvm::dyn_cast&lt;::mlir::toy::ReshapeOp&gt;(op0); (void)castedOp0;\n    {\n      auto *op1 = (*castedOp0.getODSOperands(0).begin()).getDefiningOp();\n      if (!(op1)){\n        return rewriter.notifyMatchFailure(castedOp0, [&amp;](::mlir::Diagnostic &amp;diag) {\n          diag &lt;&lt; \"There's no operation that defines operand 0 of castedOp0\";\n        });\n      }\n      auto castedOp1 = ::llvm::dyn_cast&lt;::mlir::toy::ReshapeOp&gt;(op1); (void)castedOp1;\n      if (!(castedOp1)){\n        return rewriter.notifyMatchFailure(op1, [&amp;](::mlir::Diagnostic &amp;diag) {\n          diag &lt;&lt; \"castedOp1 is not ::mlir::toy::ReshapeOp type\";\n        });\n      }\n      arg = castedOp1.getODSOperands(0);\n      tblgen_ops.push_back(op1);\n    }\n\n    // Rewrite\n    auto odsLoc = rewriter.getFusedLoc({tblgen_ops[0]-&gt;getLoc(), tblgen_ops[1]-&gt;getLoc()}); (void)odsLoc;\n    ::llvm::SmallVector&lt;::mlir::Value, 4&gt; tblgen_repl_values;\n    ::mlir::toy::ReshapeOp tblgen_ReshapeOp_0;\n    {\n      ::llvm::SmallVector&lt;::mlir::Value, 4&gt; tblgen_values; (void)tblgen_values;\n      ::llvm::SmallVector&lt;::mlir::NamedAttribute, 4&gt; tblgen_attrs; (void)tblgen_attrs;\n      tblgen_values.push_back((*arg.begin()));\n      ::llvm::SmallVector&lt;::mlir::Type, 4&gt; tblgen_types; (void)tblgen_types;\n      for (auto v: castedOp0.getODSResults(0)) {\n        tblgen_types.push_back(v.getType());\n      }\n      tblgen_ReshapeOp_0 = rewriter.create&lt;::mlir::toy::ReshapeOp&gt;(odsLoc, tblgen_types, tblgen_values, tblgen_attrs);\n    }\n\n    for (auto v: ::llvm::SmallVector&lt;::mlir::Value, 4&gt;{ tblgen_ReshapeOp_0.getODSResults(0) }) {\n      tblgen_repl_values.push_back(v);\n    }\n\n    rewriter.replaceOp(op0, tblgen_repl_values);\n    return ::mlir::success();\n  };\n};\n\nvoid LLVM_ATTRIBUTE_UNUSED populateWithGenerated(::mlir::RewritePatternSet &amp;patterns) {\n  patterns.add&lt;FoldConstantReshapeOptPattern&gt;(patterns.getContext());\n  patterns.add&lt;RedundantReshapeOptPattern&gt;(patterns.getContext());\n  patterns.add&lt;ReshapeReshapeOptPattern&gt;(patterns.getContext());\n}\n</code></pre><p></p>"},{"location":"notes/%23AI%E7%AF%87/mlir/learn_toy3/#debug\u8c03\u8bd5\u5339\u914d\u8fc7\u7a0b","title":"debug\u200b\u8c03\u8bd5\u200b\u5339\u914d\u200b\u8fc7\u7a0b","text":"<p>\u200b\u5728\u200b\u6a21\u5f0f\u5339\u914d\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u5982\u4f55\u200b\u4e86\u89e3\u200b\u6a21\u5f0f\u5339\u914d\u200b\u7684\u200b\u8fc7\u7a0b\u200b\u5462\u200b\uff1f\u200b\u54ea\u4e9b\u200b\u6a21\u5f0f\u200b\u6210\u529f\u200b\u5339\u914d\u200b\u4e86\u200b\uff0c\u200b\u54ea\u4e9b\u200b\u6a21\u5f0f\u5339\u914d\u200b\u5931\u8d25\u200b\u4e86\u200b\u3002 \u200b\u5728\u200b\u8fd0\u884c\u200b\u547d\u4ee4\u200b\u7684\u200b\u65f6\u5019\u200b\u901a\u8fc7\u200b\uff1a-debug\u200b\u53c2\u6570\u200b\u3002\u200b\u4f8b\u5982\u200b\uff1a </p>Text Only<pre><code>${build_root}/bin/toyc-ch3 ${mlir_src_root}/test/Examples/Toy/Ch3/trivial_reshape.toy -emit=mlir -debug -opt\n</code></pre> \u200b\u4f1a\u200b\u6709\u200b\u5982\u4e0b\u200b\u6253\u5370\u4fe1\u606f\u200b\uff0c\u200b\u8fd9\u200b\u662f\u200b\u5728\u200b\u5339\u914d\u200b\u7b2c\u4e00\u4e2a\u200bReshape\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u5339\u914d\u200breshape\uff08constant\uff09\u200b\u6a21\u5f0f\u200b\u6210\u529f\u200b\uff0c\u200b\u751f\u6210\u200b\u4e86\u200bmlir\uff1a Bash<pre><code>  * Pattern (anonymous namespace)::ReshapeReshapeOptPattern : 'toy.reshape -&gt; (toy.reshape)' {\nTrying to match \"(anonymous namespace)::ReshapeReshapeOptPattern\"\n    ** Match Failure : castedOp1 is not ::mlir::toy::ReshapeOp type\n\"(anonymous namespace)::ReshapeReshapeOptPattern\" result 0\n  } -&gt; failure : pattern failed to match\n\n  * Pattern (anonymous namespace)::FoldConstantReshapeOptPattern : 'toy.reshape -&gt; (toy.constant)' {\nTrying to match \"(anonymous namespace)::FoldConstantReshapeOptPattern\"\n    ** Insert  : 'toy.constant'(0x56545bac1fc0)\n    ** Replace : 'toy.reshape'(0x56545baafaf0)\n    ** Modified: 'toy.reshape'(0x56545bab0640)\n    ** Erase   : 'toy.reshape'(0x56545baafaf0)\n\"(anonymous namespace)::FoldConstantReshapeOptPattern\" result 1\n  } -&gt; success : pattern applied successfully\n// *** IR Dump After Pattern Application ***\ntoy.func @main() {\n  %0 = toy.constant dense&lt;[1.000000e+00, 2.000000e+00]&gt; : tensor&lt;2xf64&gt;\n  %1 = toy.constant dense&lt;[[1.000000e+00], [2.000000e+00]]&gt; : tensor&lt;2x1xf64&gt;\n  %2 = toy.reshape(%1 : tensor&lt;2x1xf64&gt;) to tensor&lt;2x1xf64&gt;\n  %3 = toy.reshape(%2 : tensor&lt;2x1xf64&gt;) to tensor&lt;2x1xf64&gt;\n  toy.print %3 : tensor&lt;2x1xf64&gt;\n  toy.return\n}\n</code></pre><p></p> <p>\u200b\u5982\u679c\u200b\u8981\u200b\u6253\u5370\u4fe1\u606f\u200b\uff0c\u200b\u4f7f\u7528\u200bop.emitWarning()\u200b\u4ee3\u66ff\u200bcout\u200b\u4ee5\u53ca\u200bllvm::errs()\uff0c\u200b\u4fbf\u4e8e\u200b\u8c03\u8bd5\u200b\uff0c\u200b\u6709\u200bcolor\u200b\u63d0\u793a\u200b\uff0c\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b-mlir-print-stacktrace-on-diagnostic\u200b\u6253\u5370\u200b\u51fd\u6570\u8c03\u7528\u200b\u6808\u200b\uff1a</p> <p>https://mlir.llvm.org/getting_started/Debugging/</p> C++<pre><code>op.emitWarning() &lt;&lt; \"index : \"&lt;&lt; index++ &lt;&lt;\" call matchAndRewrite transpose op \"&lt;&lt; op.getOperationName().str() &lt;&lt; \"\\n\";\n</code></pre> <p>\u200b\u4f1a\u200b\u6253\u5370\u200b\u5982\u4e0b\u200b\u4fe1\u606f\u200b\uff1a </p>Text Only<pre><code>/xxx/llvm-project/mlir/test/Examples/Toy/Ch3/transpose_transpose.toy:5:20: warning: index : 1 call matchAndRewrite transpose op toy.transpose\n</code></pre><p></p>"},{"location":"notes/%23AI%E7%AF%87/mlir/learn_toy3/#\u53c2\u8003","title":"\u53c2\u8003","text":"<p>https://mlir.llvm.org/docs/Tutorials/Toy/Ch-3/</p>"},{"location":"notes/%23AI%E7%AF%87/mlir/learn_toy4/","title":"Learn toy4","text":""},{"location":"notes/%23AI%E7%AF%87/mlir/learn_toy4/#ir\u8f6c\u6362\u4e4b\u63a5\u53e3","title":"IR\u200b\u8f6c\u6362\u200b\u4e4b\u200b\u63a5\u53e3","text":"<p>\u200b\u8fd9\u200b\u4e00\u8282\u200b\u63d0\u5230\u200b\u7684\u200b\u662f\u200bInterfaces\uff0c\u200b\u662f\u200bMLIR\u200b\u4e3a\u4e86\u200b\u8f6c\u6362\u200b\u7684\u200b\u6269\u5c55\u6027\u200b\u63d0\u4f9b\u200b\u7684\u200b\u3002</p>"},{"location":"notes/%23AI%E7%AF%87/mlir/%E5%85%B3%E4%BA%8Emlir%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/","title":"\u5173\u4e8e\u200bmlir\u200b\u7684\u200b\u5b66\u4e60\u200b\u8d44\u6599","text":""},{"location":"notes/%23AI%E7%AF%87/mlir/%E5%85%B3%E4%BA%8Emlir%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/#\u5173\u4e8emlir\u7684\u4e00\u4e9b\u5b66\u4e60\u8d44\u6599\u548cblog","title":"\u5173\u4e8e\u200bmlir\u200b\u7684\u200b\u4e00\u4e9b\u200b\u5b66\u4e60\u200b\u8d44\u6599\u200b\u548c\u200bblog","text":""},{"location":"notes/%23AI%E7%AF%87/mlir/%E5%85%B3%E4%BA%8Emlir%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/#blog","title":"blog","text":"<ul> <li>Tutorials Toy</li> <li>MLIR-A-Brief-Survey</li> <li>Intro to LLVM and MLIR with Rust and Melior</li> <li>MLIR \u200b\u7684\u200b Pattern Rewrite \u200b\u673a\u5236\u200b</li> </ul>"},{"location":"notes/%23AI%E7%AF%87/mlir/%E5%85%B3%E4%BA%8Emlir%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/#rust-llvm-and-mlir","title":"rust llvm and mlir","text":"<ul> <li>https://github.com/TheDan64/inkwell</li> <li>https://github.com/raviqqe/melior</li> </ul>"},{"location":"notes/%23AI%E7%AF%87/mlir/%E5%85%B3%E4%BA%8Emlir%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/#\u4f7f\u7528mlir\u7684\u9879\u76ee","title":"\u4f7f\u7528\u200bmlir\u200b\u7684\u200b\u9879\u76ee","text":""},{"location":"notes/%23AI%E7%AF%87/mlir/%E5%85%B3%E4%BA%8Emlir%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/#openai-triton\u7f16\u8bd1\u5668","title":"OpenAI Triton\u200b\u7f16\u8bd1\u5668","text":"<p>OpenAI Triton\u200b\u7f16\u8bd1\u5668\u200b</p> <p> </p>"},{"location":"notes/%23AI%E7%AF%87/triton_server/TritonServer%E7%9A%84pythonbackend%E6%9D%82%E8%AE%B0/","title":"TritonServer\u200b\u7684\u200bpythonbackend\u200b\u6742\u8bb0","text":""},{"location":"notes/%23AI%E7%AF%87/triton_server/TritonServer%E7%9A%84pythonbackend%E6%9D%82%E8%AE%B0/#1-\u591a\u4e2a\u7248\u672cpython","title":"1 \u200b\u591a\u4e2a\u200b\u7248\u672c\u200bpython","text":"<p>\u200b\u4e0d\u540c\u200b\u7684\u200b\u6a21\u578b\u200b\u5305\u200b\u9700\u8981\u200b\u4f7f\u7528\u200b\u4e0d\u540c\u200b\u7684\u200bpython\u200b\u7248\u672c\u200b\uff0c\u200b\u6bd4\u5982\u200b3.8\uff0c3.10.</p> <p>\u200b\u90a3\u4e48\u200b\u4f60\u200b\u9700\u8981\u200b\u5206\u522b\u200b\u4e3a\u200b3.8\uff0c3.10\u200b\u7248\u672c\u200b\u7f16\u8bd1\u200bpython backend stub\u3002</p> <p>\u200b\u7f16\u8bd1\u200b\u53c2\u8003\u200b\uff1a[building-custom-python-backend-stub](https://github.com/triton-inference-server/python_backend#building-custom-python-backend-stub</p> Bash<pre><code>ls /opt/tritonserver/backends/python/\nlibtriton_python.so  __pycache__  triton_python_backend_stub  triton_python_backend_utils.py\n</code></pre> Bash<pre><code>ldd triton_python_backend_stub\n...\nlibpython3.6m.so.1.0 =&gt; /home/ubuntu/envs/miniconda3/envs/python-3-6/lib/libpython3.6m.so.1.0 (0x00007fbb69cf3000)\n...\n</code></pre> <p>libtriton_python.so \u200b\u662f\u200b\u6ca1\u6709\u200b\u94fe\u63a5\u200blibpythonxx.so\u200b\u7684\u200b\u3002 </p>Bash<pre><code> ldd /opt/tritonserver/backends/python/libtriton_python.so \n        linux-vdso.so.1 (0x00007ffc6e8df000)\n        librt.so.1 =&gt; /usr/lib/x86_64-linux-gnu/librt.so.1 (0x00007f9d74414000)\n        libtritonserver.so =&gt; not found\n        libarchive.so.13 =&gt; /usr/lib/x86_64-linux-gnu/libarchive.so.13 (0x00007f9d74347000)\n        libpthread.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f9d74324000)\n        libstdc++.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007f9d74142000)\n        libgcc_s.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007f9d74125000)\n        libc.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libc.so.6 (0x00007f9d73f33000)\n        /lib64/ld-linux-x86-64.so.2 (0x00007f9d744d8000)\n        libnettle.so.7 =&gt; /usr/lib/x86_64-linux-gnu/libnettle.so.7 (0x00007f9d73ef9000)\n        libacl.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libacl.so.1 (0x00007f9d73eee000)\n        liblzma.so.5 =&gt; /usr/lib/x86_64-linux-gnu/liblzma.so.5 (0x00007f9d73ec5000)\n        libzstd.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libzstd.so.1 (0x00007f9d73e1c000)\n        liblz4.so.1 =&gt; /usr/lib/x86_64-linux-gnu/liblz4.so.1 (0x00007f9d73df9000)\n        libbz2.so.1.0 =&gt; /usr/lib/x86_64-linux-gnu/libbz2.so.1.0 (0x00007f9d73de6000)\n        libz.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libz.so.1 (0x00007f9d73dca000)\n        libxml2.so.2 =&gt; /usr/lib/x86_64-linux-gnu/libxml2.so.2 (0x00007f9d73c10000)\n        libm.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libm.so.6 (0x00007f9d73ac1000)\n        libdl.so.2 =&gt; /usr/lib/x86_64-linux-gnu/libdl.so.2 (0x00007f9d73ab9000)\n        libicuuc.so.66 =&gt; /usr/lib/x86_64-linux-gnu/libicuuc.so.66 (0x00007f9d738d3000)\n        libicudata.so.66 =&gt; /usr/lib/x86_64-linux-gnu/libicudata.so.66 (0x00007f9d71e12000)\n</code></pre><p></p> <p>\u200b\u5e76\u4e14\u200b\u4ee5\u200b\u4e0d\u540c\u200b\u7684\u200b\u547d\u540d\u200b\u3002\u200b\u6bd4\u5982\u200b/opt/tritonserver/backends/python_3_8\u3002 \u200b\u5728\u200bconfig.pbtxt\u200b\u4e2d\u200b\u6307\u5b9a\u200bbackend:\u201dpython_3_8\u201d, \u200b\u800c\u200b\u4e0d\u662f\u200b\u201dpython\u201d\u3002</p> <p>I don\u2019t think Python backend will pick that environment if the Python version is different. The reason is that there is a Python interpreter embedded in the\u00a0<code>triton_python_backend_stub</code>\u00a0file that is not dependent on the Python version available in the environment (it is always 3.8 unless you are compiling your own stub). If the Python version is different you need to compile your own stub.</p> <p>you could create different backend directories and control it using the backend parameter field but you need to put the full Python backend compiled with different Python versions in the backends directory (it must include the stub file,\u00a0<code>triton_python_backend_utils</code>\u00a0and everything else included). For the environment you need to create a tar file using conda-pack and use that for each of the models.</p> <p>https://github.com/triton-inference-server/server/issues/3847</p> <p>\u200b\u901a\u8fc7\u200bconda-pack\u200b\u53ef\u4ee5\u200b\u5728\u200bconda\u200b\u4e2d\u200b\u5b89\u88c5\u200b\u4e0d\u540c\u200b\u7248\u672c\u200b\u7684\u200b\u73af\u5883\u200b\uff0c\u200b\u7136\u540e\u200bconda-pack\u200b\u5bfc\u51fa\u200b\u3002\u200b\u6ce8\u610f\u200b\u8981\u200b\u8bbe\u7f6e\u200b\u53c2\u6570\u200b\uff1a </p>Bash<pre><code>`export PYTHONNOUSERSITE=True`\n</code></pre> \u00a0make sure it is not using dependencies that are not available in the env.<p></p> Bash<pre><code>parameters: {\n  key: \"EXECUTION_ENV_PATH\",\n  value: {string_value: \"/home/iman/miniconda3/envs/python-3-6/python3.6.tar.gz\"}\n}\n</code></pre>"},{"location":"notes/%23AI%E7%AF%87/triton_server/TritonServer%E7%9A%84pythonbackend%E6%9D%82%E8%AE%B0/#2-malloc-set-tcmalloc-or-jemalloc","title":"2 Malloc set (TcMalloc or jemalloc)","text":"<p>model-control-mode-explicit</p> <p>switching from malloc to\u00a0tcmalloc\u00a0or\u00a0jemalloc\u00a0by setting the\u00a0<code>LD_PRELOAD</code>\u00a0environment variable when running Triton, as shown below:</p> Bash<pre><code># Using tcmalloc\nLD_PRELOAD=/usr/lib/$(uname -m)-linux-gnu/libtcmalloc.so.4:${LD_PRELOAD} tritonserver --model-repository=/models ...\n\n# Using jemalloc\nLD_PRELOAD=/usr/lib/$(uname -m)-linux-gnu/libjemalloc.so:${LD_PRELOAD} tritonserver --model-repository=/models ...\n</code></pre> Bash<pre><code># Install tcmalloc\napt-get install gperf libgoogle-perftools-dev\n\n# Install jemalloc\napt-get install libjemalloc-dev\n</code></pre>"},{"location":"notes/%23AI%E7%AF%87/triton_server/TritonServer%E7%9A%84pythonbackend%E6%9D%82%E8%AE%B0/#3-\u901a\u8fc7execution_env_path\u8bbe\u7f6epython\u6e90\u7801\u5b9e\u73b0","title":"3 \u200b\u901a\u8fc7\u200bEXECUTION_ENV_PATH\u200b\u8bbe\u7f6e\u200bpython\u200b\u6e90\u7801\u200b\u5b9e\u73b0","text":"Bash<pre><code>path_to_activate_ = python_execution_env + \"/bin/activate\";\n\npath_to_libpython_ = python_execution_env + \"/lib\";\n</code></pre> <p>https://github1s.com/triton-inference-server/python_backend/blob/main/src/stub_launcher.cc#L362-L376</p> <p>\u200b\u5982\u679c\u200bmodel_repository_path_\u200b\u8def\u5f84\u200b\u4e0b\u200b\u5b58\u5728\u200btriton_python_backend_stub\uff0c\u200b\u4f18\u5148\u200b\u4f7f\u7528\u200b\u3002\u200b\u8bbe\u7f6e\u200b\u7684\u200bEXECUTION_ENV_PATH\u200b\u4e0b\u200b\u7684\u200bpython\u200b\u9700\u8981\u200b\u6709\u200bactivate\u200b\u53ef\u6267\u884c\u6587\u4ef6\u200b\u3002\u200b\u4e00\u822c\u200b\u662f\u200b\u901a\u8fc7\u200bconda_pack\u200b\u6253\u5305\u200b\u7684\u200b\u3002</p> <p>\u200b\u4e3b\u8981\u200b\u5305\u62ec\u200bsource\u200b\u6fc0\u6d3b\u200bpython\u200b\u73af\u5883\u200b\uff0c\u200b\u8bbe\u7f6e\u200bLD_LIBRARY_PATH\uff0c\u200b\u6267\u884c\u200btriton_python_backend_stub\u3002 </p>C++<pre><code>TRITONSERVER_Error*\n\nStubLauncher::Launch(){\n\n// Default Python backend stub\n\nstd::string python_backend_stub = python_lib_ + \"/triton_python_backend_stub\";\n\n\n// Path to alternative Python backend stub\n\nstd::string model_python_backend_stub =\n\nstd::string(model_repository_path_) + \"/triton_python_backend_stub\";\n\n\n\nif (FileExists(model_python_backend_stub)) {\n\npython_backend_stub = model_python_backend_stub;\n\n}\n\n\nif (python_execution_env_ != \"\") {\n\n    std::stringstream ss;\n\n    // Need to properly set the LD_LIBRARY_PATH so that Python environments\n\n    // using different python versions load properly.\n\n    ss &lt;&lt; \"source \" &lt;&lt; path_to_activate_\n\n    &lt;&lt; \" &amp;&amp; exec env LD_LIBRARY_PATH=\" &lt;&lt; path_to_libpython_\n\n    &lt;&lt; \":$LD_LIBRARY_PATH \" &lt;&lt; python_backend_stub &lt;&lt; \" \" &lt;&lt; model_path_\n\n    &lt;&lt; \" \" &lt;&lt; shm_region_name_ &lt;&lt; \" \" &lt;&lt; shm_default_byte_size_ &lt;&lt; \" \"\n\n    &lt;&lt; shm_growth_byte_size_ &lt;&lt; \" \" &lt;&lt; parent_pid_ &lt;&lt; \" \" &lt;&lt; python_lib_\n\n    &lt;&lt; \" \" &lt;&lt; ipc_control_handle_ &lt;&lt; \" \" &lt;&lt; stub_name &lt;&lt; \" \"\n\n    &lt;&lt; runtime_modeldir_;\n\n    ipc_control_-&gt;uses_env = true;\n\n    bash_argument = ss.str();\n\n}\n}\n</code></pre><p></p>"},{"location":"notes/%23AI%E7%AF%87/triton_server/TritonServer%E7%9A%84pythonbackend%E6%9D%82%E8%AE%B0/#31-\u63d2\u5165\u4e00\u4e2a\u5c0ftrick","title":"3.1 \u200b\u63d2\u5165\u200b\u4e00\u4e2a\u200b\u5c0f\u200btrick","text":"<p>https://stackoverflow.com/questions/62347343/collect-return-exit-status-of-process-using-system-call-in-linux</p> <p>system \u200b\u8fd4\u56de\u200b\u7684\u200b\u662f\u200bwait\u200b\u8c03\u7528\u200b\u4e00\u6837\u200b\u7684\u200b\u8fd4\u56de\u503c\u200b\u683c\u5f0f\u200b\uff0c\u200b\u5982\u679c\u200b\u8981\u200b\u83b7\u53d6\u200bstatus_code\u200b\u9700\u8981\u200b\u8c03\u7528\u200bWEXITSTATUS\u200b\u5b8f\u200b\u5b9a\u4e49\u200b\u3002 \u200b\u8fd9\u91cc\u200b\u7684\u200b\u5e94\u7528\u200b\uff0c\u200b\u5982\u679c\u200b\u8fd4\u56de\u503c\u200b\u4e0d\u200b\u7b49\u4e8e\u200b1\uff0c\u200b\u5c31\u200b\u8868\u793a\u200b\u6ca1\u6709\u200b\u6267\u884c\u200b\u6743\u9650\u200b\uff0c\u200b\u91c7\u7528\u200bchmod\u200b\u6dfb\u52a0\u200b\u6743\u9650\u200b\u3002</p> C++<pre><code>int stub_status_code =\n\nsystem((python_backend_stub + \"&gt; /dev/null 2&gt;&amp;1\").c_str());\n\n\n// If running stub process without any arguments returns any status code,\n\n// other than 1, it can indicate a permission issue as a result of\n\n// downloading the stub process from a cloud object storage service.\n\nif (WEXITSTATUS(stub_status_code) != 1) {\n\n// Give the execute permission for the triton_python_backend_stub to the\n\n// owner.\n\nint error = chmod(python_backend_stub.c_str(), S_IXUSR);\n\nif (error != 0) {\n\nreturn TRITONSERVER_ErrorNew(\n\nTRITONSERVER_ERROR_INTERNAL,\n\n(std::string(\"Failed to give execute permission to \"\n\n\"triton_python_backend_stub in \") +\n\npython_backend_stub + \" \" + stub_name +\n\n\" Error No.: \" + std::to_string(error))\n\n.c_str());\n\n}\n\n}\n</code></pre> <p>https://github.com/triton-inference-server/server/issues/3608</p>"},{"location":"notes/%23AI%E7%AF%87/triton_server/TritonServer%E7%9A%84pythonbackend%E6%9D%82%E8%AE%B0/#4-ipc\u901a\u4fe1","title":"4 IPC\u200b\u901a\u4fe1","text":"<p>python backend\u200b\u5b50\u200b\u8fdb\u7a0b\u200b\u548c\u200btriton server\u200b\u901a\u8fc7\u200bshm\u200b\u8fdb\u884c\u200bipc\u200b\u8fdb\u7a0b\u200b\u95f4\u901a\u4fe1\u200b\u3002\u200b\u91c7\u7528\u200bboost\u200b\u4e2d\u200b </p>C++<pre><code>#include &lt;boost/interprocess/sync/interprocess_condition.hpp&gt;\n#include &lt;boost/interprocess/sync/interprocess_mutex.hpp&gt;\n#include \"shm_manager.h\"\nnamespace bi = boost::interprocess;\n</code></pre><p></p>"},{"location":"notes/%23AI%E7%AF%87/triton_server/tritonServer%E4%B8%AD%E7%9A%84decouple%E6%A8%A1%E5%BC%8F%E6%98%AF%E4%BB%80%E4%B9%88%3F/","title":"Triton\u200b\u63a8\u7406\u200b\u670d\u52a1\u5668\u200b\u4e2d\u200b\u7684\u200b\u89e3\u200b\u8026\u200b\u6a21\u5f0f","text":""},{"location":"notes/%23AI%E7%AF%87/triton_server/tritonServer%E4%B8%AD%E7%9A%84decouple%E6%A8%A1%E5%BC%8F%E6%98%AF%E4%BB%80%E4%B9%88%3F/#triton\u63a8\u7406\u670d\u52a1\u5668\u4e2d\u7684\u89e3\u8026\u6a21\u5f0f","title":"Triton\u200b\u63a8\u7406\u200b\u670d\u52a1\u5668\u200b\u4e2d\u200b\u7684\u200b\u89e3\u200b\u8026\u200b\u6a21\u5f0f","text":"<p>\u200b\u5728\u200bTriton\u200b\u63a8\u7406\u200b\u670d\u52a1\u5668\u200b\u4e2d\u200b\uff0c\u200b\u89e3\u200b\u8026\u200b\u6a21\u5f0f\u200b\u5141\u8bb8\u200b\u7528\u6237\u200b\u9488\u5bf9\u200b\u4e00\u4e2a\u200b\u8bf7\u6c42\u200b\u53d1\u9001\u200b\u591a\u4e2a\u200b\u54cd\u5e94\u200b\uff0c\u200b\u6216\u8005\u200b\u4e0d\u200b\u53d1\u9001\u200b\u4efb\u4f55\u200b\u54cd\u5e94\u200b\u3002\u200b\u6b64\u5916\u200b\uff0c\u200b\u6a21\u578b\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u6309\u7167\u200b\u4e0e\u200b\u8bf7\u6c42\u200b\u6279\u6b21\u200b\u6267\u884c\u200b\u987a\u5e8f\u200b\u4e0d\u540c\u200b\u7684\u200b\u987a\u5e8f\u200b\u53d1\u9001\u200b\u54cd\u5e94\u200b\u3002\u200b\u8fd9\u200b\u7c7b\u200b\u6a21\u578b\u200b\u88ab\u200b\u79f0\u4e3a\u200b\u89e3\u200b\u8026\u200b\u6a21\u578b\u200b\u3002\u200b\u8981\u200b\u4f7f\u7528\u200b\u8fd9\u79cd\u200b\u6a21\u5f0f\u200b\uff0c\u200b\u6a21\u578b\u200b\u914d\u7f6e\u200b\u4e2d\u200b\u7684\u200b\u4e8b\u52a1\u200b\u7b56\u7565\u200b\u5fc5\u987b\u200b\u8bbe\u7f6e\u200b\u4e3a\u89e3\u200b\u8026\u200b\u6a21\u5f0f\u200b\u3002</p> <p>\u200b\u5728\u200b\u89e3\u200b\u8026\u200b\u6a21\u5f0f\u200b\u4e0b\u200b\uff0c\u200b\u6a21\u578b\u200b\u5fc5\u987b\u200b\u4e3a\u200b\u6bcf\u4e2a\u200b\u8bf7\u6c42\u200b\u4f7f\u7528\u200b<code>InferenceResponseSender</code>\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u4e3a\u200b\u8be5\u200b\u8bf7\u6c42\u200b\u6301\u7eed\u200b\u521b\u5efa\u200b\u548c\u200b\u53d1\u9001\u200b\u4efb\u610f\u200b\u6570\u91cf\u200b\u7684\u200b\u54cd\u5e94\u200b\u3002\u200b\u6b64\u200b\u6a21\u5f0f\u200b\u4e0b\u200b\u7684\u200b\u5de5\u4f5c\u200b\u6d41\u7a0b\u200b\u53ef\u80fd\u200b\u5982\u4e0b\u200b\uff1a</p> <ol> <li> <p><code>execute</code>\u200b\u51fd\u6570\u200b\u63a5\u6536\u200b\u4e00\u4e2a\u200b<code>pb_utils.InferenceRequest</code>\u200b\u7684\u200b\u6279\u6b21\u200b\uff0c\u200b\u4f5c\u4e3a\u200b\u957f\u5ea6\u200b\u4e3a\u200bN\u200b\u7684\u200b\u6570\u7ec4\u200b\u3002</p> </li> <li> <p>\u200b\u8fed\u4ee3\u200b\u6bcf\u4e2a\u200b<code>pb_utils.InferenceRequest</code>\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u5e76\u200b\u4e3a\u200b\u6bcf\u4e2a\u200b\u5bf9\u8c61\u200b\u6267\u884c\u200b\u4ee5\u4e0b\u200b\u6b65\u9aa4\u200b\uff1a</p> </li> <li> <p>\u200b\u4f7f\u7528\u200b<code>InferenceRequest.get_response_sender()</code>\u200b\u83b7\u53d6\u200b\u8be5\u200b\u8bf7\u6c42\u200b\u7684\u200b<code>InferenceResponseSender</code>\u200b\u5bf9\u8c61\u200b\u3002</p> </li> <li> <p>\u200b\u521b\u5efa\u200b\u5e76\u200b\u586b\u5145\u200b\u8981\u200b\u53d1\u9001\u200b\u56de\u200b\u7684\u200b<code>pb_utils.InferenceResponse</code>\u3002</p> </li> <li> <p>\u200b\u4f7f\u7528\u200b<code>InferenceResponseSender.send()</code>\u200b\u53d1\u9001\u200b\u4e0a\u8ff0\u200b\u54cd\u5e94\u200b\u3002\u200b\u5982\u679c\u200b\u8fd9\u662f\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u8bf7\u6c42\u200b\uff0c\u200b\u5219\u200b\u5728\u200b<code>InferenceResponseSender.send()</code>\u200b\u4e2d\u200b\u4f20\u9012\u200b<code>pb_utils.TRITONSERVER_RESPONSE_COMPLETE_FINAL</code>\u200b\u4f5c\u4e3a\u200b\u6807\u5fd7\u200b\u3002\u200b\u5426\u5219\u200b\uff0c\u200b\u7ee7\u7eed\u6267\u884c\u200b\u6b65\u9aa4\u200b1\u200b\u4ee5\u200b\u53d1\u9001\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u8bf7\u6c42\u200b\u3002</p> </li> </ol> <p>\u200b\u5728\u200b\u8fd9\u79cd\u200b\u6a21\u5f0f\u200b\u4e0b\u200b\uff0c<code>execute</code>\u200b\u51fd\u6570\u200b\u7684\u200b\u8fd4\u56de\u503c\u200b\u5e94\u4e3a\u200b<code>None</code>\u3002</p> <p>\u200b\u4e0e\u200b\u4e0a\u8ff0\u200b\u7c7b\u4f3c\u200b\uff0c\u200b\u5982\u679c\u200b\u67d0\u4e2a\u200b\u8bf7\u6c42\u200b\u51fa\u73b0\u200b\u9519\u8bef\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b<code>TritonError</code>\u200b\u5bf9\u8c61\u200b\u4e3a\u200b\u8be5\u200b\u7279\u5b9a\u200b\u8bf7\u6c42\u200b\u8bbe\u7f6e\u200b\u9519\u8bef\u200b\u6d88\u606f\u200b\u3002\u200b\u5728\u200b\u4e3a\u200b<code>pb_utils.InferenceResponse</code>\u200b\u5bf9\u8c61\u200b\u8bbe\u7f6e\u200b\u9519\u8bef\u200b\u540e\u200b\uff0c\u200b\u4f7f\u7528\u200b<code>InferenceResponseSender.send()</code>\u200b\u5c06\u200b\u5e26\u6709\u200b\u9519\u8bef\u200b\u7684\u200b\u54cd\u5e94\u200b\u53d1\u9001\u200b\u56de\u200b\u7528\u6237\u200b\u3002</p> <p>\u200b\u4ece\u200b23.10\u200b\u7248\u672c\u200b\u5f00\u59cb\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u76f4\u63a5\u200b\u5728\u200b<code>InferenceResponseSender</code>\u200b\u5bf9\u8c61\u200b\u4e0a\u200b\u4f7f\u7528\u200b<code>response_sender.is_cancelled()</code>\u200b\u68c0\u67e5\u200b\u8bf7\u6c42\u200b\u53d6\u6d88\u200b\u72b6\u6001\u200b\u3002\u200b\u5373\u4f7f\u200b\u8bf7\u6c42\u200b\u5df2\u200b\u53d6\u6d88\u200b\uff0c\u200b\u4ecd\u200b\u9700\u8981\u200b\u5728\u200b\u54cd\u5e94\u200b\u672b\u5c3e\u200b\u53d1\u9001\u200b<code>TRITONSERVER_RESPONSE_COMPLETE_FINAL</code>\u200b\u6807\u5fd7\u200b\u3002</p>"},{"location":"notes/%23AI%E7%AF%87/triton_server/tritonServer%E4%B8%AD%E7%9A%84decouple%E6%A8%A1%E5%BC%8F%E6%98%AF%E4%BB%80%E4%B9%88%3F/#1-\u4f7f\u7528\u6848\u4f8b","title":"1 \u200b\u4f7f\u7528\u200b\u6848\u4f8b","text":"<p>\u200b\u89e3\u200b\u8026\u200b\u6a21\u5f0f\u200b\u529f\u80fd\u5f3a\u5927\u200b\uff0c\u200b\u652f\u6301\u200b\u591a\u79cd\u200b\u5176\u4ed6\u200b\u4f7f\u7528\u200b\u573a\u666f\u200b\uff1a</p> <ul> <li> <p>\u200b\u5982\u679c\u200b\u6a21\u578b\u200b\u4e0d\u200b\u9700\u8981\u200b\u4e3a\u200b\u8bf7\u6c42\u200b\u53d1\u9001\u200b\u4efb\u4f55\u200b\u54cd\u5e94\u200b\uff0c\u200b\u5219\u200b\u8c03\u7528\u200b<code>InferenceResponseSender.send()</code>\u200b\u65f6\u4e0d\u5e26\u200b\u54cd\u5e94\u200b\uff0c\u200b\u4f46\u200b\u6807\u5fd7\u200b\u53c2\u6570\u8bbe\u7f6e\u200b\u4e3a\u200b<code>pb_utils.TRITONSERVER_RESPONSE_COMPLETE_FINAL</code>\u3002</p> </li> <li> <p>\u200b\u6a21\u578b\u200b\u53ef\u4ee5\u200b\u4ee5\u200b\u4e0d\u540c\u4e8e\u200b\u63a5\u6536\u200b\u8bf7\u6c42\u200b\u7684\u200b\u987a\u5e8f\u200b\u53d1\u9001\u200b\u54cd\u5e94\u200b\u3002</p> </li> <li> <p>\u200b\u8bf7\u6c42\u200b\u6570\u636e\u200b\u548c\u200b<code>InferenceResponseSender</code>\u200b\u5bf9\u8c61\u200b\u53ef\u4ee5\u200b\u4f20\u9012\u200b\u7ed9\u200b\u6a21\u578b\u200b\u4e2d\u200b\u7684\u200b\u5355\u72ec\u200b\u7ebf\u7a0b\u200b\u3002\u200b\u8fd9\u200b\u610f\u5473\u7740\u200b\u4e3b\u200b\u8c03\u7528\u200b\u7ebf\u7a0b\u200b\u53ef\u4ee5\u200b\u4ece\u200b<code>execute</code>\u200b\u51fd\u6570\u200b\u4e2d\u200b\u9000\u51fa\u200b\uff0c\u200b\u800c\u200b\u6a21\u578b\u200b\u53ef\u4ee5\u200b\u7ee7\u7eed\u200b\u751f\u6210\u200b\u54cd\u5e94\u200b\uff0c\u200b\u53ea\u8981\u200b\u5b83\u200b\u6301\u6709\u200b<code>InferenceResponseSender</code>\u200b\u5bf9\u8c61\u200b\u5373\u53ef\u200b\u3002</p> </li> </ul> <p>\u200b\u89e3\u200b\u8026\u200b\u793a\u4f8b\u200b\u5c55\u793a\u200b\u4e86\u200b\u53ef\u4ee5\u200b\u4ece\u89e3\u200b\u8026\u200bAPI\u200b\u4e2d\u200b\u5b9e\u73b0\u200b\u7684\u200b\u5168\u90e8\u200b\u529f\u80fd\u200b\u3002\u200b\u8bf7\u200b\u9605\u8bfb\u200b\u89e3\u200b\u8026\u540e\u200b\u7aef\u200b\u548c\u200b\u6a21\u578b\u200b\u7684\u200b\u8be6\u7ec6\u4fe1\u606f\u200b\uff0c\u200b\u4ee5\u200b\u4e86\u89e3\u200b\u5982\u4f55\u200b\u6258\u7ba1\u200b\u89e3\u200b\u8026\u200b\u6a21\u578b\u200b\u3002</p> <p>https://github.com/triton-inference-server/python_backend?tab=readme-ov-file#decoupled-mode</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Bash/","title":"Bash","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Bash/#bash-scripting_cheatsheet_","title":"Bash scripting_cheatsheet_","text":"<p>https://devhints.io/bash \u200b\u8fd8\u6709\u200b\u5176\u4ed6\u200b\u8bed\u8a00\u200b\uff0c\u200b\u5de5\u5177\u200b\u7684\u200b\u4f7f\u7528\u200b\u8bf4\u660e\u200b\uff0ccheatsheet</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Bash/#pure-bash-bible","title":"pure-bash-bible","text":"<p>https://github.com/dylanaraps/pure-bash-bible \u200b\u5728\u200bvscode\u200b\u4e2d\u200b\uff0c\u200b\u901a\u8fc7\u200b\u5b89\u88c5\u200b Pure Bash Bible\u200b\u63d2\u4ef6\u200b\uff0c\u200b\u8f93\u5165\u200b\u51fd\u6570\u200b\u540d\u200b\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u81ea\u52a8\u200b\u8865\u5168\u200b\u8be5\u200b\u4ed3\u5e93\u200b\u4e2d\u200b\u7684\u200b\u51fd\u6570\u200b\uff0c\u200b\u63d0\u9ad8\u6548\u7387\u200b\u3002 vscode\u200b\u4e2d\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u5b89\u88c5\u200b\u5176\u4ed6\u200bbash\u200b\u76f8\u5173\u200b\u63d2\u4ef6\u200b\u3002</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Bash/#bash\u8bed\u6cd5","title":"bash\u200b\u8bed\u6cd5","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Bash/#31-internal-field-separator-ifs","title":"3.1 Internal Field Separator (IFS)","text":"<p>https://www.baeldung.com/linux/ifs-shell-variable \u200b\u67e5\u770b\u200b\u547d\u4ee4\u200b\u89e3\u91ca\u200b\uff0c\u200b\u5728\u200bbash\u200b\u7ec8\u7aef\u200b\uff1a</p> <p></p>Text Only<pre><code>help read\nhelp declare\n</code></pre> \u200b\u6ce8\u610f\u200b\uff0cman read\u200b\u662f\u200b\u67e5\u770b\u200blinux api\u3002<p></p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Bash/#32-bash-\u7279\u6b8a\u53d8\u91cf","title":"3.2 Bash \u200b\u7279\u6b8a\u200b\u53d8\u91cf","text":"<p>https://www.baeldung.com/linux/bash-special-variables</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Bash/#\u8f93\u5165\u53c2\u6570\u76f8\u5173\u7684\u53d8\u91cf","title":"\u8f93\u5165\u200b\u53c2\u6570\u200b\u76f8\u5173\u200b\u7684\u200b\u53d8\u91cf","text":"<ul> <li>${#}\uff0c\u200b\u8f93\u5165\u200b\u53c2\u6570\u200b\u7684\u200b\u4e2a\u6570\u200b</li> <li>${@}\uff0c\u200b\u8f93\u5165\u200b\u53c2\u6570\u200b\u62fc\u63a5\u200b\u5b57\u7b26\u4e32\u200b</li> <li>${*}\uff0c\u200b\u8f93\u5165\u200b\u53c2\u6570\u200b\u62fc\u63a5\u200b\u5b57\u7b26\u4e32\u200b\uff0c\u200b\u4ee5\u200bIFS\u200b\u7684\u200b\u7b2c\u4e00\u4e2a\u200b\u5b57\u7b26\u200b\u76f8\u8fde\u63a5\u200b</li> <li>${N}\uff0cN\u200b\u662f\u200b\u5177\u4f53\u200b\u7684\u200b\u6570\u5b57\u200b\uff0c\u200b\u4ee3\u8868\u200b\u4e86\u200b\u8f93\u5165\u200b\u53c2\u6570\u200b</li> </ul> <p>\u200b\u4f8b\u5982\u200b\uff1amy_func\u200b\u662f\u200b\u4e00\u4e2a\u200b\u81ea\u5b9a\u4e49\u200b\u7684\u200bbash\u200b\u51fd\u6570\u200b\u3002\u200b\u6267\u884c\u200b\u4e0b\u9762\u200b\u7684\u200b\u547d\u4ee4\u200b</p> <p></p>Text Only<pre><code>./my_func --user admin --pass hello\n</code></pre> \u200b\u5bf9\u5e94\u200b\u8f93\u5165\u200b\u53c2\u6570\u200b\u76f8\u5173\u200b\u53d8\u91cf\u200b\u7684\u200b\u503c\u200b\u5c31\u662f\u200b\uff1a<p></p> <p></p>Text Only<pre><code>${#} \uff1a4\n${@} : --useradmin--passhello\n${*} : --useradmin--passhello\n\n${0} : ./xxx.sh # xxx.sh\u200b\u662f\u200b\u5b9a\u4e49\u200bmy_func\u200b\u7684\u200b\u6587\u4ef6\u200b\n${1} : --user\n${2} : admin\n${3} : --pass\n</code></pre> \u200b\u5982\u679c\u200b\u5c06\u200bIFS\u200b\u6539\u4e3a\u200b\u2019:\u2019\u200b\u7b26\u53f7\u200b\uff0c\\({@}\u200b\u4e0d\u53d8\u200b\uff0c\\)\u200b\u4f1a\u200b\u53d1\u751f\u53d8\u5316\u200b\uff0c<p></p> Text Only<pre><code>${*} : --user:admin:--pass:hello\n</code></pre>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Bash/#\u8fdb\u7a0b\u76f8\u5173","title":"\u8fdb\u7a0b\u200b\u76f8\u5173","text":"<ul> <li>${?}\uff0c\u200b\u4e0a\u200b\u4e00\u4e2a\u200b\u6267\u884c\u200b\u7684\u200b\u8fdb\u7a0b\u200b\u8fd4\u56de\u200b\u7684\u200b\u72b6\u6001\u200b\u7801\u200b\uff0c\u200b\u5e38\u7528\u200b\u4e8e\u200b\u5224\u65ad\u200b\u8c03\u7528\u200b\u4e00\u4e2a\u200b\u51fd\u6570\u200b\u540e\u200b\u7684\u200b\u6267\u884c\u200b\u7ed3\u679c\u200b\u5224\u65ad\u200b</li> <li>${!}\uff0cget our background Job process id</li> <li>\\({\\)}\uff0ccurrent shell process ID</li> </ul> <p>\u200b\u83b7\u53d6\u200b\u540e\u53f0\u200b\u8fdb\u7a0b\u200bID\uff0c\u200b\u7b49\u5f85\u200b\u6267\u884c\u200b\u7ed3\u675f\u200b\u3002</p> <p></p>Text Only<pre><code>login &amp; \nwait ${!}\n</code></pre> watchdog\uff0c\u200b\u4f5c\u4e3a\u200b\u5728\u200b\u4e00\u4e9b\u200bdeamon\u200b\u8fdb\u7a0b\u200b\u4e2d\u200b\u5f88\u200b\u5e38\u89c1\u200b\u529f\u80fd\u200b\uff0c\u200b\u901a\u8fc7\u200b\u67e5\u770b\u200b/proc/$pid\u200b\u662f\u5426\u200b\u5b58\u5728\u200b\uff0c\u200b\u5224\u65ad\u200b\u8fdb\u7a0b\u200b\u662f\u5426\u200b\u5728\u200b\u6267\u884c\u200b\u3002<p></p> Text Only<pre><code>!/bin/bash\nfunction watchdog(){\n    pid=`cat ./shell.pid`\n    if [[ -e /proc/$pid ]];then\n        echo \"Login still running\"\n    else \n        echo \"Login is finished\"\n    fi\n}\nwatchdog\n</code></pre>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Bash/#33-\u5185\u7f6e\u51fd\u6570","title":"3.3 \u200b\u5185\u7f6e\u200b\u51fd\u6570","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Bash/#shift","title":"Shift","text":"<p>\u200b\u89e3\u91ca\u200b</p> Text Only<pre><code>function login(){\n     previous checks omitted \n    while [[ ${#} &gt; 0 ]]; do\n        case $1 in\n            -user) \n            user=${2};\n            shift;;\n            -pass)\n            pass=${2};\n            shift;;\n            *)\n            echo \"Bad Syntax. Usage: -user [username] -pass [password] required\"; \n            return;;\n        esac\n        shift\n    done\n    echo \"User=${user}\"\n    echo \"Pass=${pass}\"\n}\n</code></pre>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Bash/#declare","title":"declare","text":"Text Only<pre><code>function download_linux(){\n    declare -a linux_versions=(\"5.7\" \"5.6.16\" \"5.4.44\")\n    declare -a commands\n    mkdir linux\n    for version in ${linux_versions[@]}\n        do \n            curl -so ./linux/kernel-${version}.tar.xz -L \\\n            \"https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-${version}.tar.xz\" &amp;\n            echo \"Running with pid ${!}\"\n            commands+=(${!})\n        done   \n    for pid in ${commands[@]}\n        do\n            echo \"Waiting for pid ${pid}\"\n            wait $pid\n        done\n}\n</code></pre>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Git/","title":"Git","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Git/#\u5b66\u4e60\u7f51\u5740","title":"\u5b66\u4e60\u200b\u7f51\u5740","text":"<p>https://learngitbranching.js.org/?locale=zh_CN \u200b\u901a\u8fc7\u200b\u5b8c\u6210\u200b\u7f51\u5740\u200b\u7684\u200b\u5b9e\u9a8c\u200b\uff0c\u200b\u5df2\u7ecf\u200b\u53ef\u4ee5\u200b\u638c\u63e1\u200b\u5927\u591a\u6570\u200b\u6982\u5ff5\u200b\u548c\u200b\u64cd\u4f5c\u200b\u3002</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Git/#\u591a\u4eba\u540c\u4e00\u4e2a\u5206\u652f\u5f00\u53d1","title":"\u591a\u4eba\u200b\u540c\u4e00\u4e2a\u200b\u5206\u652f\u200b\u5f00\u53d1","text":"<p>git stash git pull \u2013rebase git stash pop git add -u git commit -m \u201c\u201d git push origin HEAD:refs/for/xxx \u200b\u5982\u679c\u200b\u5176\u4ed6\u4eba\u200b\u5728\u200bremote\u200b\u8fdb\u884c\u200b\u4e86\u200b\u63d0\u4ea4\u200b\uff0c\u200b\u672c\u5730\u200b\u505a\u200b\u4e86\u200b\u4fee\u6539\u200b\u51c6\u5907\u200b\u63d0\u4ea4\u200b git add git commit -m \u201c\u201d # \u200b\u9996\u5148\u200b\u63d0\u4ea4\u200b\u672c\u5730\u200b\u4fee\u6539\u200b, \u200b\u5f88\u200b\u91cd\u8981\u200b\uff0c\u200b\u5426\u5219\u200b\u4f1a\u200b\u4e22\u5931\u200b\u4ee3\u7801\u200b git pull \u2013rebase # git \u200b\u4f1a\u200b\u8fdb\u884c\u200b\u5bf9\u6bd4\u200b\u5408\u5e76\u200b git add # \u200b\u518d\u6b21\u200badd\u200b\u672c\u5730\u200b\u4fee\u6539\u200b git commit git push origin HEAD:refs/for/xxx \u200b\u63d0\u4ea4\u200b\u7684\u200b\u4ee3\u7801\u200b\u5ba1\u6838\u200b\u51fa\u73b0\u200b\u95ee\u9898\u200b\uff0c\u200b\u9700\u8981\u200b\u4fee\u6539\u200b \u200b\u4fee\u6539\u200b\u4ee3\u7801\u200b git add git commit \u2013amend \u2013no-edit # \u200b\u590d\u7528\u200b\u540c\u4e00\u4e2a\u200bcommit git push git \u200b\u63d0\u4ea4\u200b\u9519\u8bef\u200b(\u200b\u4e3a\u4e86\u200b\u5b89\u5168\u200b\u8d77\u200b\u89c1\u200b\uff0c\u200b\u5728\u200b\u64a4\u9500\u200b\u6709\u200b\u5176\u4ed6\u200b\u5f00\u53d1\u8005\u200b\u5de5\u4f5c\u200b\u7684\u200b repo \u200b\u4e2d\u200b\u7684\u200b\u4fee\u6539\u200b\u65f6\u200b\uff0c\u200b\u8bf7\u200b\u4f7f\u7528\u200bgit revert\u3002) git reset HEAD~1 git add  git commit git push \u2013force</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Git/#\u591a\u5206\u652f\u5f00\u53d1\u6d41\u7a0b","title":"\u591a\u200b\u5206\u652f\u200b\u5f00\u53d1\u200b\u6d41\u7a0b","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Git/#main\u548cdev\u5206\u652f","title":"main\u200b\u548c\u200bdev\u200b\u5206\u652f","text":"Rust<pre><code>git checkout -b dev\ngit commit -m \"add some thing\"\ngit rebase main dev \u200b\u6216\u8005\u200b git rebase main # \u200b\u62c9\u53d6\u200bmain\u200b\u5206\u652f\u200b\u7684\u200b\u4fee\u6539\u200b\uff0c\u200b\u53ef\u80fd\u200b\u5728\u200b\u5f00\u53d1\u200b\u7684\u200b\u8fc7\u7a0b\u200b\u4e2d\u200bmain\u200b\u63d0\u4ea4\u200b\u4e86\u200b\u65b0\u200b\u529f\u80fd\u200b\ngit push origin dev\ngit checkout main # \u200b\u5408\u5e76\u200bdev\u200b\u5206\u652f\u200b\ngit merge dev\ngit push origin main\n</code></pre>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Git/#git-rebase","title":"git rebase","text":"<p>git rebase \u200b\u548c\u200bgit merge\u200b\u90fd\u200b\u662f\u200b\u7528\u4e8e\u200b\u5408\u5e76\u200b\u5206\u652f\u200b\u7684\u200b\u64cd\u4f5c\u200b\u3002 \u200b\u533a\u522b\u200b\uff1a git merge \u200b\u4ea7\u751f\u200b\u4e00\u6761\u200b\u65b0\u200b\u7684\u200bcommit\uff0c\u200b\u5b83\u200b\u7684\u200bparent\u200b\u540c\u65f6\u200b\u6307\u5411\u200b\u4e86\u200b\u4e24\u4e2a\u200b\u5408\u5e76\u200b\u7684\u200b\u5206\u652f\u200b\u3002 git rebase \u200b\u5728\u200bHEAD\u200b\u4f4d\u7f6e\u200b\u91cd\u65b0\u200b\u5e94\u7528\u200b\u8981\u200b\u5408\u5e76\u200b\u7684\u200b\u63d0\u4ea4\u200b\u8bf7\u6c42\u200b\uff0c\u200b\u4e0d\u4f1a\u200b\u4ea7\u751f\u200b\u65b0\u200b\u7684\u200bcommit\u3002</p> <p>git \u200b\u591a\u200b\u5206\u652f\u200brebase\uff0c\u200b\u628a\u200b\u591a\u4e2a\u200b\u5206\u652f\u200b\u7684\u200b\u4fee\u6539\u200brebase\u200b\u5230\u200bmain\u200b\u5206\u652f\u200b\u3002 https://zhuanlan.zhihu.com/p/271677627 git rebase main bugFix \uff0cmain\u200b\u6307\u5b9a\u200b\u4e86\u200b\u76ee\u6807\u200b\u5206\u652f\u200b\uff0cbugFix\u200b\u6307\u5b9a\u200b\u4e86\u200b\u6267\u884c\u200b\u5206\u652f\u200b\u3002 \u200b\u7b49\u6548\u4e8e\u200b\uff1a </p>Rust<pre><code>git checkout bugFix\ngit rebase main\n</code></pre> Rust<pre><code>          A---B---C topic*\n         /\n    D---E---F---G master\n</code></pre> Rust<pre><code>                  A'--B'--C' topic*\n                 /\n    D---E---F---G master\n</code></pre> \u200b\u5728\u200b\u4e3b\u200b\u5206\u652f\u200bmain\u200b\u4e0a\u200b\u5e94\u7528\u200b\uff1agit checkout main; git merge bugFix\u3002<p></p> <p>\u200b\u5982\u679c\u200b\u5728\u200brebase\u200b\u7684\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u51fa\u9519\u200b\u4e86\u200b\uff0c\u200b\u60f3\u8981\u200b\u56de\u9000\u200b\u5230\u200brebase\u200b\u4e4b\u524d\u200b\u7684\u200b\u72b6\u6001\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5e94\u8be5\u200b\u7ed3\u5408\u200bgit reflog\u200b\u548c\u200bgit reset\u200b\u547d\u4ee4\u200b\uff0c https://zhuanlan.zhihu.com/p/462531895\u3002 </p>Rust<pre><code>git reflog\ngit reset --hard HEAD@{2} # HEAD@{2} \u200b\u662f\u200breflog\u200b\u547d\u4ee4\u200b\u6267\u884c\u200b\u540e\u200b\u663e\u793a\u200b\u7684\u200brebase\u200b\u524d\u200b\u7684\u200b\u72b6\u6001\u200b\u3002\n</code></pre><p></p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Git/#git-rebase--i","title":"git rebase -i","text":"<p>\u2013interactive\u200b\u7684\u200b\u7f29\u5199\u200b\uff0c\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e00\u79cd\u200b\u4ea4\u4e92\u5f0f\u200b\u7684\u200b\u65b9\u5f0f\u200b\u4fee\u6539\u200bgit\u200b\u63d0\u4ea4\u200b\uff0c\u200b\u6bd4\u5982\u200b\u4fee\u6539\u200b\u3001\u200b\u91cd\u6392\u200b\u5305\u62ec\u200bHEAD\u200b\u4ee5\u53ca\u200bHEAD\u200b\u7684\u200b\u524d\u200b\u4e09\u6761\u200bcommit\uff0c\u200b\u6267\u884c\u200b\uff1a git rebase -i HEAD~4 \u200b\u8be5\u200b\u64cd\u4f5c\u200b\u6267\u884c\u200b\u540e\u200b\uff0c\u200b\u4f1a\u200b\u6253\u5f00\u200bvim\uff0c\u200b\u5bf9\u200b\u4e0d\u540c\u200b\u7684\u200b\u63d0\u4ea4\u200b\u53ef\u4ee5\u200b\u91cd\u65b0\u200b\u6392\u5e8f\u200b\uff0c\u200b\u4ee5\u53ca\u200bpick\uff0comit\u200b\u5220\u9664\u200b\u7b49\u200b\u64cd\u4f5c\u200b\u3002</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Git/#git-head","title":"git HEAD","text":"<p>^: \u200b\u8868\u793a\u200b\u5f53\u524d\u200b\u4f4d\u7f6e\u200b\u7684\u200bparent ^^: \u200b\u8868\u793a\u200b\u5f53\u524d\u200b\u4f4d\u7f6e\u200b\u7684\u200bparent\u200b\u7684\u200bparent ~\uff1a\u200b\u8868\u793a\u200bHEAD\u200b\u7684\u200b\u4e0a\u200b\u4e00\u4e2a\u200b\u4f4d\u7f6e\u200b ~num\uff1a\u200b\u8868\u793a\u200bHEAD\u200b\u7684\u200b\u4e0a\u200bnum\u200b\u4e2a\u200b\u4f4d\u7f6e\u200b</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Git/#git-cherry-pick","title":"git cherry-pick","text":"<p>\u200b\u8be5\u200b\u64cd\u4f5c\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u4efb\u610f\u200b\u4e00\u4e2a\u200bhash\u200b\u63d0\u4ea4\u200b\u8bb0\u5f55\u200b\u5e94\u7528\u200b\u5230\u200bHEAD\u200b\u7684\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u4f4d\u7f6e\u200b\uff0c\u200b\u6bd4\u5982\u200bc1\u200b\u63d0\u4ea4\u200b\u5e94\u7528\u200b\u5230\u200bHEAD\u200b\u7684\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u4f4d\u7f6e\u200b\uff0c\u200b\u6267\u884c\u200b\uff1agit cherry-pick c1\u3002 \u200b\u5982\u679c\u200b\u6709\u200b\u591a\u4e2a\u200bc1\uff0cc2\uff0cc3\uff0c\u200b\u90a3\u4e48\u200b\u6267\u884c\u200b\uff1agit cherry-pick c1 c2 c3\uff0c\u200b\u5206\u652f\u200b\u53d8\u4e3a\u200b\uff1aHEAD-&gt;c1\u2019-&gt;c2\u2019-&gt;c3\u2019\u3002</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Git/#git-revert-\u548cgit-reset","title":"git revert \u200b\u548c\u200bgit reset","text":"<p>git revert \u200b\u4f1a\u200b\u901a\u8fc7\u200b\u589e\u52a0\u200b\u4e00\u4e2a\u200bcommit\u200b\u63d0\u4ea4\u200b\uff0c\u200b\u6bd4\u5982\u200bc1-&gt;c2\uff0c\u200b\u8981\u200b\u64a4\u9500\u200bc2\u200b\u63d0\u4ea4\u200b\uff0c\u200b\u5219\u200b\u6267\u884c\u200bgit revert\u200b\u4f1a\u200b\u53d8\u6210\u200bc1-&gt;c2-&gt;c3\uff0cc3\u200b\u5206\u652f\u200b\u7684\u200b\u72b6\u6001\u200b\u7b49\u6548\u4e8e\u200bc1\u3002 git reset \u200b\u76f4\u63a5\u200b\u5220\u9664\u200bc2 commit\uff0c\u200b\u4f46\u662f\u200b\u8981\u200b\u6ce8\u610f\u200bsoft\uff0chard ,\u200b\u4ee5\u53ca\u200bmix\u200b\u7684\u200b\u533a\u522b\u200b\uff0cgit\u200b\u9ed8\u8ba4\u200b\u2013mix\u3002</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Git/#git-\u5206\u79bbhead","title":"git \u200b\u5206\u79bb\u200bHEAD","text":"<p>\u200b\u4f7f\u7528\u200bgit checkout hash\uff0c\u200b\u53ef\u4ee5\u200b\u5c06\u200bHEAD\u200b\u6307\u5411\u200bhash\u200b\u6307\u5411\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u3002</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Git/#git-bisect-\u67e5\u9519\u547d\u4ee4","title":"git bisect \u200b\u67e5\u9519\u200b\u547d\u4ee4","text":"<p>https://ruanyifeng.com/blog/2018/12/git-bisect.html \u200b\u91c7\u7528\u200b\u4e8c\u5206\u6cd5\u200b\uff0c\u200b\u76f4\u5230\u200b\u627e\u51fa\u200b\u63d0\u4ea4\u200b\u4ea7\u751f\u200bbug\u200b\u7684\u200bcommit\u3002</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Git/#git-tag-\u6253\u6807\u7b7e","title":"git tag \u200b\u6253\u200b\u6807\u7b7e","text":"<p>git tag v1 c3 \u200b\u5728\u200bc3\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u6253\u200b\u4e0a\u200bv1\u200b\u7684\u200b\u6807\u7b7e\u200b\u3002</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Git/#git-describe","title":"git describe","text":"<p>\u200b\u67e5\u627e\u200b\u6700\u8fd1\u200b\u7684\u200btag\uff0c\u200b\u4ee5\u53ca\u200b\u8ddd\u79bb\u200b\uff0c\u200b\u63cf\u8ff0\u200b\u4fe1\u606f\u200b\u7b49\u200b</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Git/#git-\u5982\u4f55\u5408\u5e76\u548c\u538b\u7f29","title":"git \u200b\u5982\u4f55\u200b\u5408\u5e76\u200b\u548c\u200b\u538b\u7f29\u200b\uff1f","text":"<p>https://zhuanlan.zhihu.com/p/462532410 \u200b\u5c06\u200bfeature\u200b\u5206\u652f\u200b\u4e2d\u200b\u7684\u200b\u591a\u4e2a\u200bcommit\u200b\u5408\u5e76\u200b\u63d0\u4ea4\u200b\u5230\u200bmain\u200b\u5206\u652f\u200b </p>Rust<pre><code>git checkout main\ngit merge --squash feature\ngit commit -m \"\"\n</code></pre><p></p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Git/#git-fetch","title":"git fetch","text":"<p>git fetch\u200b\u53ea\u662f\u200b\u540c\u6b65\u200b\u8fdc\u7a0b\u200b\u5206\u652f\u200b\u5230\u200b\u672c\u5730\u200b\u7684\u200borigin/main\uff0c\u200b\u5982\u679c\u200b\u8981\u200b\u628a\u200b\u5b83\u200b\u540c\u6b65\u200b\u5230\u200bmain\u200b\u5206\u652f\u200b\uff0c\u200b\u8fd8\u200b\u9700\u8981\u200bgit merge \u200b\u6216\u8005\u200bgit rebase\u3002 git\u200b\u63d0\u4f9b\u200b\u4e86\u200bgit pull\uff0c\u200b\u7b49\u4e8e\u200bgit fetch \u200b\u52a0\u4e0a\u200b git merge origin/main\u3002 git pull \u2013rebase\uff0c\u200b\u7b49\u4e8e\u200bgit fetch \u200b\u52a0\u4e0a\u200b git rebase main origin/main\u3002</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Git/#\u8bbe\u7f6e\u8fdc\u7a0b\u8ddf\u8e2a\u5206\u652f","title":"\u8bbe\u7f6e\u200b\u8fdc\u7a0b\u200b\u8ddf\u8e2a\u200b\u5206\u652f","text":"<p>\u200b\u9ed8\u8ba4\u200b\u662f\u200bmain\u200b\u8ddf\u8e2a\u200borigin/main \u200b\u901a\u8fc7\u200b\u5982\u4e0b\u200b\u547d\u4ee4\u200b\uff0cfoo\u200b\u5c31\u200b\u4f1a\u200b\u8ddf\u8e2a\u200borigin/main\u200b\u5206\u652f\u200b\uff0cfoo\u200b\u5206\u652f\u200b\u7684\u200b\u63d0\u4ea4\u200b\u4e5f\u200b\u4f1a\u200b\u63d0\u4ea4\u200b\u5230\u200b\u8fdc\u7a0b\u200bmain\u200b\u5206\u652f\u200b\u3002 </p>Rust<pre><code>git checkout -b foo origin/main # \u200b\u6216\u8005\u200b\ngit branch -u origin/main foo\n</code></pre><p></p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Git/#git-push\u53c2\u6570","title":"git push\u200b\u53c2\u6570","text":"<ul> <li>git push</li> </ul> <p>git push orgin main \u200b\u7b49\u6548\u4e8e\u200bgit push origin main:main</p> <ul> <li>git push \u200b\u5982\u679c\u200b\u76ee\u7684\u5730\u200b\u548c\u200b\u63d0\u4ea4\u200b\u7684\u200b\u5206\u652f\u200b\u4e0d\u200b\u4e00\u6837\u200b\uff1a</li> </ul> <p>git push origin source:destination \u200b\u6bd4\u5982\u200b\uff1agit push origin man:NewDes\uff0c\u200b\u5c06\u200bmain\u200b\u5206\u652f\u200b\u4ee3\u7801\u200b\u63d0\u4ea4\u200b\u5230\u200b\u8fdc\u7a0b\u200b\u5206\u652f\u200bNewDes\u200b\u4e0a\u200b\u3002</p> <ul> <li>git fetch \u200b\u7684\u200b\u53c2\u6570\u200b\u548c\u200bpush\u200b\u7c7b\u4f3c\u200b\uff0c\u200b\u53ea\u662f\u200b\u65b9\u5411\u200b\u76f8\u53cd\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u662f\u200b\u4e0a\u4f20\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u662f\u200b\u62c9\u53d6\u200b\u3002</li> <li>git push origin :foo\uff0c\u200b\u5982\u679c\u200bsource\u200b\u7559\u7a7a\u200b\uff0c\u200b\u4f1a\u200b\u5220\u9664\u200b\u8fdc\u7a0b\u200b\u7684\u200bfoo\u200b\u5206\u652f\u200b\u3002</li> <li>git fetch origin :foo1\uff0c\u200b\u5982\u679c\u200bsource\u200b\u7559\u7a7a\u200b\uff0c\u200b\u4f1a\u200b\u5728\u200b\u672c\u5730\u200b\u521b\u5efa\u200bfoo1\u200b\u5206\u652f\u200b\u3002</li> </ul>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Linux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","title":"Linux\u200b\u5f00\u53d1\u200b\u73af\u5883\u200b\u914d\u7f6e","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Linux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#\u5f00\u53d1\u73af\u5883","title":"\u5f00\u53d1\u200b\u73af\u5883\u200b\uff1a","text":"<ul> <li>shell fish</li> <li>vim + tmux</li> <li>vscode</li> </ul> <p>vscode \u200b\u4f7f\u7528\u200b\u4e86\u200bremote explorer\u200b\u63d2\u4ef6\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u81ea\u52a8\u8bc6\u522b\u200bdocker container\uff0c\u200b\u76f4\u63a5\u200b\u8fde\u63a5\u200b\u8fdb\u5165\u200b\u5f00\u53d1\u200b\u73af\u5883\u200b\u3002\u200b\u76f8\u6bd4\u200bclion\uff0cclion docker\u200b\u63d2\u4ef6\u200b\u9700\u8981\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200bcontainer\uff0c\u200b\u800c\u200b\u4e0d\u662f\u200b\u8fde\u63a5\u200b\u4e00\u4e2a\u200b\u5b58\u5728\u200b\u7684\u200bcontainer\u3002</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Linux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#fish","title":"fish","text":"<p>\u200b\u4e0d\u7528\u200b\u50cf\u200bzsh\u200b\u4e00\u6837\u200b\u5927\u91cf\u200b\u914d\u7f6e\u200b\uff0c\u200b\u5f00\u7bb1\u200b\u5373\u7528\u200b\uff0c\u200b\u548c\u200bfzf\uff0criggrep\u200b\u7b49\u200b\u5de5\u5177\u200b\u90fd\u200b\u5f88\u200b\u597d\u200b\u517c\u5bb9\u200b\u3002</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Linux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#tmux","title":"tmux","text":"<p>tmux\u200b\u4f7f\u7528\u200b\u4e86\u200b\u9ed8\u8ba4\u200b\u5feb\u6377\u952e\u200b\uff0cCtrl-b\u200b\u89e6\u53d1\u200b</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Linux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#fzf","title":"fzf","text":"<p>fish \u200b\u8bbe\u7f6e\u200b\u73af\u5883\u53d8\u91cf\u200b\u8fc7\u6ee4\u200b\u76ee\u5f55\u200b\uff0c\u200b\u8bbe\u7f6e\u200bfd </p>Bash<pre><code>set -x FZF_DEFAULT_COMMAND \"fd --exclude={.git,.idea,.sass-cache,node_modules,build} --type f\"\n</code></pre><p></p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Linux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vim\u914d\u7f6e","title":"vim\u200b\u914d\u7f6e","text":"<p>\u200b\u5b89\u88c5\u200b vim9 </p>C++<pre><code>sudo add-apt-repository ppa:jonathonf/vim\nsudo apt install vim\n</code></pre> \u200b\u914d\u7f6e\u200b.vimrc Bash<pre><code>vim9script\n\n# basic setting\nset mouse=a\nset number\nset tabstop=4\nset encoding=utf-8 fileencodings=ucs-bom,utf-8,cp936\n# Set shift width to 4 spaces.\nset shiftwidth=4\n# Set tab width to 4 columns.\nset tabstop=4\nset showcmd\n\n# set xclip, Ctrl-C copy visual content to clipboard\nvnoremap &lt;C-c&gt; :w !xclip -selection clipboard&lt;CR&gt;\n\n# ale\ng:ale_linters_explicit = 1\ng:ale_linters = { 'cpp': ['gcc', 'clangd'] }\n# let g:ale_linters = {\n      # \\   'csh': ['shell'],\n        # \\   'zsh': ['shell'],\n          # \\   'go': ['gofmt', 'golint'],\n            # \\   'python': ['flake8', 'mypy', 'pylint'],\n          # \\   'c': ['gcc', 'cppcheck'],\n            # \\   'cpp': ['gcc', 'cppcheck'],\n              # \\   'text': [],\n                # \\}\ng:ale_completion_delay = 500\ng:ale_echo_delay = 20\ng:ale_lint_delay = 500\ng:ale_echo_msg_format = '[%linter%] %code: %%s'\ng:ale_lint_on_text_changed = 'normal'\ng:ale_lint_on_insert_leave = 1\ng:airline#extensions#ale#enabled = 1\ng:ale_c_gcc_options = '-Wall -O2 -std=c99'\ng:ale_cpp_gcc_options = '-Wall -O2 -std=c++11'\ng:ale_c_cppcheck_options = ''\ng:ale_cpp_cppcheck_options = ''\n\n# fzf, add to bashrc\n# export FZF_DEFAULT_COMMAND=\"fd --exclude={.git,.idea,.sass-cache,node_modules,build} --type f\"\n\n# Start NERDTree. If a file is specified, move the cursor to its window.\nautocmd StdinReadPre * let s:std_in=1\nautocmd VimEnter * NERDTree | if argc() &gt; 0 || exists(\"s:std_in\") | wincmd p | endif\n\nnnoremap &lt;leader&gt;n :NERDTreeFocus&lt;CR&gt;\nnnoremap &lt;C-n&gt; :NERDTree&lt;CR&gt;\nnnoremap &lt;C-t&gt; :NERDTreeToggle&lt;CR&gt;\nnnoremap &lt;C-f&gt; :NERDTreeFind&lt;CR&gt;\n\n# lsp\ninoremap &lt;expr&gt; &lt;Tab&gt; pumvisible() ? \"\\&lt;C-n&gt;\" : \"\\&lt;Tab&gt;\"\ninoremap &lt;expr&gt; &lt;S-Tab&gt; pumvisible() ? \"\\&lt;C-p&gt;\" : \"\\&lt;S-Tab&gt;\"\ninoremap &lt;expr&gt; &lt;cr&gt; pumvisible() ? \"\\&lt;C-y&gt;\\&lt;cr&gt;\" : \"\\&lt;cr&gt;\"\n\n\ncall plug#begin()\n\nPlug 'preservim/nerdtree', { 'on': 'NERDTreeToggle' }\n\n# fzf\nPlug 'junegunn/fzf', { 'do': { -&gt; fzf#install() } }\nPlug 'junegunn/fzf.vim'\n\n# c++\nPlug 'dense-analysis/ale'\n\nPlug 'terryma/vim-multiple-cursors'\n# Plug 'mg979/vim-visual-multi', {'branch': 'master'}\n\nPlug 'prabirshrestha/async.vim'\nPlug 'prabirshrestha/asyncomplete.vim'\nPlug 'prabirshrestha/vim-lsp'\nPlug 'prabirshrestha/asyncomplete-lsp.vim'\nPlug 'mattn/vim-lsp-settings'\n\n# theme\nPlug 'joshdick/onedark.vim'\nPlug 'itchyny/lightline.vim'\n\n# edit\nPlug 'tpope/vim-surround'\nPlug 'jiangmiao/auto-pairs'\n\n# async run\nPlug 'skywind3000/asyncrun.vim'\n\ncall plug#end()\n\n# set colorschema\nsyntax on\ncolorscheme onedark\n</code></pre><p></p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Linux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#clang-format","title":"clang-format","text":"Bash<pre><code>sudo update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-9 100\n</code></pre> <p>-i : \u200b\u76f4\u63a5\u200b\u66f4\u6539\u200b\u6587\u4ef6\u200b\uff0c\u200b\u4e0d\u52a0\u200b\u5c31\u200b\u7ec8\u7aef\u200b\u8f93\u51fa\u200b clang-format -style=file -i main.cpp</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Linux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#neovim\u7684\u4f7f\u7528","title":"neovim\u200b\u7684\u200b\u4f7f\u7528","text":"<p>neovim\u200b\u5f00\u6e90\u200b\u914d\u7f6e\u200b\uff0cgithub\u200b\u9ad8\u200bStar\u200b\u7684\u200b\u3002</p> <ul> <li>nvchad \u200b\u754c\u9762\u200b\u652f\u6301\u200b\u66f4\u52a0\u200b\u6839\u636e\u200b\u4e30\u5bcc\u200b</li> <li>lunarVim lua\u200b\u914d\u7f6e\u200b\u7684\u200bneovimIDE\uff0c\u200b\u652f\u6301\u200b</li> </ul> <p>\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u81ea\u5df1\u200b\u914d\u7f6e\u200b\uff0c\u200b\u4f46\u662f\u200b\u914d\u7f6e\u200b\u9700\u8981\u200b\u505a\u597d\u200b\u4e0d\u65ad\u66f4\u65b0\u200b\u548c\u200b\u7ef4\u62a4\u200b\uff0c\u200b\u4e0d\u7136\u200b\u4f1a\u200b\u63d2\u4ef6\u200b\u4e0d\u200b\u517c\u5bb9\u200b\u62a5\u9519\u200b\u7b49\u200b\u3002\u200b\u4f7f\u7528\u200b\u8fd9\u6837\u200b\u7684\u200b\u5f00\u6e90\u200b\u914d\u7f6e\u200b\u6709\u4e2a\u200b\u597d\u5904\u200b\uff0c\u200b\u7531\u200b\u4ed3\u5e93\u200b\u7ba1\u7406\u8005\u200b\u7ef4\u62a4\u200b\u7248\u672c\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u66f4\u52a0\u200b\u805a\u7126\u200b\u5b66\u4e60\u200b\u7f16\u8f91\u200b\u7684\u200b\u5185\u5bb9\u200b\uff0c\u200b\u8bb8\u591a\u200bvim\u200b\u5165\u95e8\u8005\u200b\u5728\u200bvim\u200b\u548c\u200bneovim\u200b\u914d\u7f6e\u200b\u4e0a\u200b\u82b1\u8d39\u200b\u4e86\u200b\u5927\u91cf\u200b\u65f6\u95f4\u200b\u3002</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Linux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vim\u65e0\u63d2\u4ef6\u7f16\u8f91","title":"vim\u200b\u65e0\u200b\u63d2\u4ef6\u200b\u7f16\u8f91","text":"<p>vim \u200b\u65e0\u200b\u63d2\u4ef6\u200b\u7f16\u8f91\u200b\uff0c\u200b\u65e0\u200b\u63d2\u4ef6\u200b\u4e5f\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5f88\u200b\u597d\u200b\u7684\u200b\u9009\u62e9\u200b\uff0c\u200b\u6bd4\u5982\u200b\uff1a\u200b\u5f53\u5e74\u200b\u5230\u200b\u540c\u4e8b\u200b\u7684\u200b\u673a\u5668\u200b\u4e0a\u200b\u7f16\u8f91\u200b\u4ee3\u7801\u200b\uff0c\u200b\u7ec8\u7aef\u200b\u4fee\u6539\u200b\u670d\u52a1\u5668\u200b\u914d\u7f6e\u200b\uff0c\u200b\u51fa\u5dee\u200b\u7f16\u8f91\u200b\u4ee3\u7801\u200b\uff0c\u200b\u65e0\u200b\u7f51\u7edc\u200b\u73af\u5883\u200b\u7f16\u8f91\u200b\u7b49\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u573a\u666f\u200b\u90fd\u200b\u53ea\u662f\u200b\u4e00\u4e2a\u200b\u5e72\u5e72\u51c0\u51c0\u200b\u7684\u200bvim\uff0c\u200b\u56e0\u6b64\u200b\u638c\u63e1\u200b\u4e86\u200b\u65e0\u200b\u63d2\u4ef6\u200b\u7f16\u8f91\u200b\u53ef\u4ee5\u200b\u63d0\u9ad8\u6548\u7387\u200b\uff0c \u200b\u540c\u65f6\u200b\u65e0\u200b\u63d2\u4ef6\u200b\u7f16\u8f91\u200b\u4e5f\u200b\u662f\u200bvim\u200b\u4f7f\u7528\u200b\u7684\u200b\u57fa\u7840\u200b\u3002 \u200b\u6211\u200b\u5728\u200b\u4f7f\u7528\u200b\u7ec8\u7aef\u200b\u65f6\u200b\uff0c\u200b\u4f1a\u200b\u5c3d\u91cf\u200b\u4f7f\u7528\u200b\u4e0d\u200b\u914d\u7f6e\u200b\u7684\u200btmux\uff0c\u200b\u4ee5\u53ca\u200b\u5b89\u88c5\u200bfish\u200b\u5f00\u7bb1\u200b\u5373\u7528\u200b\uff08\u200b\u800c\u200b\u4e0d\u662f\u200b\u9700\u8981\u200b\u5927\u91cf\u200b\u914d\u7f6e\u200b\u7684\u200b zsh\uff09\uff0c\u200b\u638c\u63e1\u200b\u9ed8\u8ba4\u200b\u7684\u200b\u6309\u952e\u200b\u89c4\u5219\u200b\u3002</p> <ul> <li>~\uff1a\u200b\u9009\u4e2d\u200b\u5b57\u7b26\u200b\u5927\u5c0f\u5199\u200b\u8f6c\u6362\u200b</li> <li>=\uff1a\u200b\u683c\u5f0f\u200b\u5bf9\u9f50\u200b\uff0cgg=G \u200b\u5bf9\u200b\u5168\u6587\u200b\u683c\u5f0f\u200b\u5bf9\u9f50\u200b</li> <li>u\uff1a\u200b\u64a4\u9500\u200b\uff0cCtrl-r\uff1au\u200b\u7684\u200b\u9006\u200b\u64cd\u4f5c\u200b</li> <li>\u200b\u6ce8\u91ca\u200b\u6dfb\u52a0\u200b\u201d//\u201d\uff0cCtrl-v\uff0c\u200b\u9009\u4e2d\u200b\u6dfb\u52a0\u200b\u6ce8\u91ca\u200b\u7684\u200b\u6bb5\u843d\u200b\uff0c\u200b\u7136\u540e\u200b\u6309\u200b\u2019I\u2019\u200b\u6216\u8005\u200b\u2019A\u2019\uff0c\u200b\u8f93\u5165\u200b\u2019//\u2019\uff0c\u200b\u518d\u200b\u6309\u200bESC\u200b\u9000\u51fa\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u6ce8\u91ca\u200b\u3002\u200b\u5220\u9664\u200b\u6ce8\u91ca\u200b\uff0cCtrl-v\uff0c\u200b\u9009\u4e2d\u200b\u6ce8\u91ca\u200b\u7b26\u53f7\u200b\uff0c\u200b\u7136\u540e\u200b\u6309\u200bd\uff0cESC\u3002</li> <li>bve\uff1a\u200b\u9009\u4e2d\u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u4e32\u200b</li> <li>\u200b\u7a97\u53e3\u200b\u5207\u6362\u200bCtrl-w-hjkl\uff0ctab\u200b\u5207\u6362\u200bgt\u200b\u548c\u200bgT</li> <li>:Te \u200b\u4ee5\u200btab\u200b\u7a97\u53e3\u200b\u5f62\u5f0f\u200b\u663e\u793a\u200b\u5f53\u524d\u76ee\u5f55\u200b \u200b\u7136\u540e\u200b\u53ef\u200b\u8fdb\u884c\u200b\u5207\u6362\u200b\u76ee\u5f55\u200b\u3001\u200b\u6253\u5f00\u200b\u67d0\u4e2a\u200b\u6587\u4ef6\u200b</li> <li>\u200b\u638c\u63e1\u200bvim\u200b\u4e0e\u200b\u7cfb\u7edf\u200b\u526a\u8d34\u677f\u200b\u7684\u200b\u4ea4\u4e92\u200b\uff0chttps://zhuanlan.zhihu.com/p/73984381</li> <li>\u200b\u81ea\u5e26\u200b\u7684\u200b\u6587\u4ef6\u200b\u6d4f\u89c8\u5668\u200bNetrw\uff0c\u200b\u6253\u5f00\u200b: E\uff0chttps://zhuanlan.zhihu.com/p/61588081</li> <li>\u200b\u5728\u200bex\u200b\u6a21\u5f0f\u200b\uff0c\u200b\u663e\u793a\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u7684\u200bCommands\uff0cCtrl-d</li> </ul>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Linux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#gnome-terminal-ubuntu-\u9ed8\u8ba4\u7ec8\u7aef","title":"GNOME Terminal (Ubuntu \u200b\u9ed8\u8ba4\u200b\u7ec8\u7aef\u200b)","text":"<p>\u200b\u638c\u63e1\u200b\u5feb\u6377\u952e\u200b\u53ef\u4ee5\u200b\u66f4\u52a0\u200b\u9ad8\u6548\u200b\uff1a</p> <ol> <li>\u200b\u5b57\u4f53\u200b\u8c03\u6574\u200b</li> <li>Ctrl-Shift-+ \uff1a\u200b\u653e\u5927\u200b\u7ec8\u7aef\u200b</li> <li>Ctrl\u2013\uff1a\u200b\u7f29\u5c0f\u200b\u7ec8\u7aef\u200b\uff08Ctrl\u200b\u952e\u200b\u548c\u200b\u51cf\u53f7\u200b\u952e\u200b\u4e00\u8d77\u200b\u4f7f\u7528\u200b\uff09</li> <li>\u200b\u6253\u5f00\u200b\u7ec8\u7aef\u200b Ctrl-Alt-t</li> <li>\u200b\u5728\u200b\u6253\u5f00\u200b\u7684\u200b\u7ec8\u7aef\u200b\u4e0a\u200b\u65b0\u200b\u589e\u52a0\u200bTab\uff1aCtrl-Shift-t\uff0c\u200b\u5173\u95ed\u200bTab\uff1aCtrl-Shift-w\uff08\u200b\u7c7b\u4f3c\u200bvscode\u200b\u9ed8\u8ba4\u200bCtrl-w\u200b\u5173\u95ed\u200bTab\uff09</li> <li>\u200b\u6253\u5f00\u200b\u591a\u4e2a\u200bTab\uff0c\u200b\u4f7f\u7528\u200b\u952e\u76d8\u200b\u5207\u6362\u200bTab\uff0cCtrl-Page Down\uff0cCtrl-PaOn\uff0cAlt+\u200b\u6570\u5b57\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u5207\u6362\u200b\u5230\u200b\u5bf9\u4e8e\u200b\u7684\u200bTab\u3002</li> <li>\u200b\u5168\u5c4f\u200b F11</li> <li>\u200b\u590d\u5236\u7c98\u8d34\u200b\uff1aCtrl-Shift-v\uff0cCtrl-Shift-c</li> <li>\u200b\u8df3\u8f6c\u200b\u5230\u200b\u547d\u4ee4\u200b\u6700\u200b\u524d\u9762\u200b\uff1aCtrl-a\uff0c\u200b\u547d\u4ee4\u200b\u672b\u5c3e\u200b\uff1aCtrl-e\uff0c\u200b\u548c\u200bEmacs\u200b\u4e00\u6837\u200b\u7684\u200b\u6309\u952e\u200b\u3002</li> </ol> <p>\u200b\u8fd9\u4e9b\u200b\u547d\u4ee4\u200b\u4e0d\u7528\u200b\u6b7b\u8bb0\u786c\u80cc\u200b\uff0c\u200b\u591a\u200b\u4f7f\u7528\u200b\u5c31\u200b\u80fd\u200b\u5f62\u6210\u200b\u808c\u8089\u200b\u8bb0\u5fc6\u200b\uff0c\u200b\u5fd8\u200b\u4e86\u200b\u67e5\u770b\u200bTerminal Help\u200b\u4e2d\u200b\u7684\u200b\u5feb\u6377\u952e\u200b\uff0c\u200b\u638c\u63e1\u200b\u8fd9\u4e9b\u200b\u547d\u4ee4\u200b\u53ef\u4ee5\u200b\u63d0\u9ad8\u6548\u7387\u200b\u3002</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Linux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vim\u7cfb\u7edf\u526a\u8d34\u677f","title":"vim\u200b\u7cfb\u7edf\u200b\u526a\u8d34\u677f","text":"<p>Vim \u200b\u526a\u8d34\u677f\u200b\u91cc\u9762\u200b\u7684\u200b\u4e1c\u897f\u200b \u200b\u7c98\u8d34\u200b\u5230\u200b\u7cfb\u7edf\u200b\u7c98\u8d34\u677f\u200b\uff1f - \u200b\u77e5\u4e4e\u200b</p> Text Only<pre><code>sudo apt install vim-gui-common # \u200b\u89e3\u51b3\u200b-clipboard \u200b\u95ee\u9898\u200b\uff0c\u200b\u4e0d\u7528\u200b\u91cd\u65b0\u200b\u88c5\u200bvim\nset clipboard=unnamedplus # \u200b\u73b0\u5728\u200b\u4f60\u200b\u7684\u200by\uff0cd\uff0cx\uff0cp\u200b\u5df2\u7ecf\u200b\u80fd\u200b\u548c\u200b ctrl-c\u200b\u548c\u200bctrl-v \u200b\u4e00\u4e2a\u200b\u6548\u679c\u200b\uff0c\u200b\u5e76\u4e14\u200b\u80fd\u200b\u4e92\u76f8\u200b\u6df7\u7528\u200b\u3002\n</code></pre>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/markdown/","title":"Markdown","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/markdown/#write-markdown-tools","title":"write markdown tools","text":"<p>https://markdown.com.cn/editor/</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E7%94%BB%E5%9B%BE%E5%B7%A5%E5%85%B7/","title":"\u753b\u56fe\u200b\u5de5\u5177","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E7%94%BB%E5%9B%BE%E5%B7%A5%E5%85%B7/#\u753b\u56fe\u5de5\u5177","title":"\u753b\u56fe\u200b\u5de5\u5177","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E7%94%BB%E5%9B%BE%E5%B7%A5%E5%85%B7/#\u753b\u56fe","title":"\u753b\u56fe","text":"<p>Excalidraw: excalidraw.com draw.io</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E7%94%BB%E5%9B%BE%E5%B7%A5%E5%85%B7/#\u4ee3\u7801\u622a\u56fe","title":"\u4ee3\u7801\u200b\u622a\u56fe","text":"<p>Carbon\uff1acarbon.now.sh</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E7%94%BB%E5%9B%BE%E5%B7%A5%E5%85%B7/#\u56fe\u5f62\u5904\u7406\u5de5\u5177","title":"\u56fe\u5f62\u5904\u7406\u200b\u5de5\u5177","text":"<p>webp\u200b\u52a8\u6001\u56fe\u200b\uff0c\u200b\u60f3\u200b\u8f6c\u6362\u6210\u200bgif</p> <p></p>Bash<pre><code>magick convert -format gif My_anim.webp animation.gif\n\nor\n\nmagick mogrify -format gif My_anim.webp\n</code></pre> https://superuser.com/questions/1795242/how-to-convert-webp-animation-to-gif-animation-with-ffmpeg https://imagemagick.org/script/download.php<p></p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E7%94%BB%E5%9B%BE%E5%B7%A5%E5%85%B7/#\u97f3\u8d28\u63d0\u5347\u5de5\u5177","title":"\u97f3\u8d28\u200b\u63d0\u5347\u200b\u5de5\u5177","text":"<p>https://podcast.adobe.com/</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E9%AB%98%E6%95%88%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/","title":"\u9ad8\u6548\u200b\u4f7f\u7528\u200b\u5de5\u5177","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E9%AB%98%E6%95%88%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/#\u76ee\u5f55\u8df3\u8f6c","title":"\u76ee\u5f55\u200b\u8df3\u8f6c","text":"Text Only<pre><code>pushd xxx\npopd\ncd - # \u200b\u8fd4\u56de\u200b\u4e0a\u200b\u4e00\u4e2a\u200b\u76ee\u5f55\u200b\n</code></pre>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E9%AB%98%E6%95%88%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/#tmux","title":"tmux","text":"Text Only<pre><code>https://www.hamvocke.com/blog/a-quick-and-easy-guide-to-tmux/\n\n\u200b\u4f9d\u6b21\u200b\u5305\u62ec\u200b\u5173\u7cfb\u200b\uff1a\nsession &gt; window &gt; pane\n\ntmux new -t ${session_name} # \u200b\u542f\u52a8\u200b\u4e00\u4e2a\u200bsession\uff0c\u200b\u6307\u5b9a\u200b\u540d\u5b57\u200b\nC-b d # \u200b\u9000\u51fa\u200bsession\uff0csession\u200b\u5728\u200b\u540e\u53f0\u200b\u8fd0\u884c\u200b\nC-b s # \u200b\u5217\u4e3e\u200b\u6240\u6709\u200b\u7684\u200bsession\uff0c\u200b\u53ef\u4ee5\u200b\u9009\u62e9\u200b\u5207\u6362\u200b\nC-b % # \u200b\u7ad6\u200b\u7740\u200b\u5207\u5206\u200bwindows\uff0c\u200b\u521b\u5efa\u200b\u65b0\u200b\u7684\u200bpane\nC-b \" # \u200b\u6a2a\u7740\u200b\u5207\u5206\u200bwindows\uff0c\u200b\u521b\u5efa\u200b\u65b0\u200b\u7684\u200bpane\nC-b \u200b\u65b9\u5411\u952e\u200b # \u200b\u5207\u6362\u200bpane\nCtrl+b x\uff1a\u200b\u5173\u95ed\u200b\u5f53\u524d\u200b\u9762\u677f\u200b\u3002\nC-b q # \u200b\u663e\u793a\u200b\u9762\u677f\u200b\u7f16\u53f7\u200b\n\nC-b c # \u200b\u521b\u5efa\u200b\u65b0\u200b\u7684\u200bwindow\nC-b p # \u200b\u524d\u200b\u4e00\u4e2a\u200bwindow\nC-b n # \u200b\u4e0b\u200b\u4e00\u4e2a\u200bwindow\nC-d # \u200b\u5173\u95ed\u200bwindow\nC-b w # window \u200b\u5207\u6362\u200b\n\nC-b ? # \u200b\u5e2e\u52a9\u200b\ntmux kill-session -t ${session_name} # \u200b\u6740\u6b7b\u200bsession\ntmux attach -t ${session_name} # \u200b\u8fdb\u5165\u200bsession\ntmux rename-sesstion -t ${old_name} ${new_name} # \u200b\u66f4\u6539\u200b\u540d\u5b57\u200b\n\nC-b [ # \u200b\u8fdb\u5165\u200b\u7ffb\u5c4f\u200b\u6a21\u5f0f\u200b\uff0cq\u200b\u9000\u51fa\u200b\n</code></pre> https://z.itpub.net/article/detail/C59A269E832907CB638881D21A64E135"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E9%AB%98%E6%95%88%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/#valgrind","title":"valgrind","text":"Text Only<pre><code>valgrind --track-origins=yes --keep-stacktraces=alloc-and-free --leak-check=full\n</code></pre>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E9%AB%98%E6%95%88%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/#conan","title":"conan","text":"<p>https://docs.conan.io/2/tutorial/consuming_packages/use_tools_as_conan_packages.html</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E9%AB%98%E6%95%88%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/#z","title":"z","text":"<p>https://github.com/rupa/z</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E9%AB%98%E6%95%88%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/#fzf","title":"fzf","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E9%AB%98%E6%95%88%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/#fzf-\u914d\u5408fish\u5feb\u6377\u952e\u4f7f\u7528","title":"fzf \u200b\u914d\u5408\u200bfish\u200b\u5feb\u6377\u952e\u200b\u4f7f\u7528","text":"<ul> <li>CTRL-T- Paste the selected files and directories onto the command-line</li> <li>CTRL-R- Paste the selected command from history onto the command-line</li> <li>ALT-C- cd into the selected directory</li> </ul>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E9%AB%98%E6%95%88%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/#vim-fzf","title":"vim $(fzf)","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E9%AB%98%E6%95%88%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/#vim\u4e2d\u4f7f\u7528-fzf","title":"vim\u200b\u4e2d\u200b\u4f7f\u7528\u200b :FZF","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E9%AB%98%E6%95%88%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/#ripgrep","title":"ripgrep","text":"<p>https://einverne.github.io/post/2019/09/ripgrep-recursively-searches-directories-using-regex-pattern.html rg\u200b\u547d\u4ee4\u200b</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E9%AB%98%E6%95%88%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/#cloc-\u4ee3\u7801\u7edf\u8ba1","title":"cloc \u200b\u4ee3\u7801\u200b\u7edf\u8ba1","text":"<p>cloc \u2013exclude-dir=build,ouput,encryption,verify_licence .</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E9%AB%98%E6%95%88%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/#ubuntu-\u78c1\u76d8\u4f7f\u7528\u5206\u6790","title":"ubuntu \u200b\u78c1\u76d8\u200b\u4f7f\u7528\u200b\u5206\u6790","text":"<p>sudo apt install baobab</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E9%AB%98%E6%95%88%E4%BD%BF%E7%94%A8%E5%B7%A5%E5%85%B7/#\u5e38\u7528\u547d\u4ee4","title":"\u5e38\u7528\u547d\u4ee4","text":"<ul> <li>Ctrl-z \u200b\u6302\u200b\u8d77\u200b\u7a0b\u5e8f\u200b</li> <li>jobs \u200b\u67e5\u770b\u200b\u540e\u53f0\u7a0b\u5e8f\u200b</li> <li>fg \u200b\u5c06\u200b\u540e\u53f0\u7a0b\u5e8f\u200b\u5230\u200b\u524d\u53f0\u200b\u8fd0\u884c\u200b</li> <li>bg</li> </ul>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Vscode/Vscode%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","title":"Vscode\u200b\u73af\u5883\u200b\u914d\u7f6e","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Vscode/Vscode%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode-\u5f00\u53d1c\u5b58\u5728\u4e24\u79cd\u63d2\u4ef6\u6a21\u5f0f","title":"vscode \u200b\u5f00\u53d1\u200bc++\u200b\u5b58\u5728\u200b\u4e24\u79cd\u200b\u63d2\u4ef6\u200b\u6a21\u5f0f\u200b:","text":"<p>(1) vscode c++: \u200b\u5fae\u8f6f\u200b\u5b98\u65b9\u200b (2) clangd + codeLLDB\uff1a\u200b\u66f4\u200b\u5f3a\u608d\u200b \u200b\u5176\u4ed6\u200b\u63d2\u4ef6\u200b\uff1a Cmake\u200b\u7528\u4e8e\u200b\u7f16\u8bd1\u200b\u9879\u76ee\u200b\u3002 Remote Explorer\uff1a\u200b\u8fde\u63a5\u200b\u8fdc\u7a0b\u200b\u5f00\u53d1\u200b\u673a\u5668\u200b\uff0c\u200b\u8fde\u63a5\u200bdocker\uff0c\u200b\u8fde\u63a5\u200bdocker\u200b\u6bd4\u200bClion\u200b\u66f4\u200b\u53cb\u597d\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u8fdb\u5165\u200b\u5df2\u7ecf\u200b\u5b58\u5728\u200b\u7684\u200bContainer\uff0c\u200b\u800c\u200bClion\u200b\u4f1a\u200b\u65b0\u200b\u542f\u52a8\u200b\u4e00\u4e2a\u200bContainer\u3002 \u200b\u5e38\u7528\u200b\u5feb\u6377\u952e\u200b\uff1a Ctrl+Shift+P\uff1a\u200b\u529f\u80fd\u200b\u9762\u677f\u200b\uff0c\u200b\u8f93\u5165\u200bCmake\uff0c\u200b\u5c31\u200b\u4f1a\u200b\u8df3\u51fa\u200b\u63d2\u4ef6\u200b\u652f\u6301\u200b\u7684\u200b\u529f\u80fd\u200b\uff0c\u200b\u6bd4\u5982\u200b\uff1aBuild\uff0cRun\u3002 Ctrl+R\uff1a\u200b\u5207\u6362\u200b\u9879\u76ee\u200b Ctrl+B\uff1a\u200b\u6253\u5f00\u200b/\u200b\u5173\u95ed\u200b\u76ee\u5f55\u200b\u6811\u200b Ctrl-Alt+-: \u200b\u56de\u5230\u200b\u4e0a\u200b\u4e00\u4e2a\u200b\u4f4d\u7f6e\u200b \u200b\u8c03\u8bd5\u200b\uff1a Ctrl+Shift+D\u200b\u70b9\u200b\u5de6\u8fb9\u200b\u680f\u200b\u7684\u200bdebug\u200b\u6309\u94ae\u200b\uff0c\u200b\u7136\u540e\u200b\u5e94\u8be5\u200b\u4f1a\u200b\u81ea\u52a8\u200b\u751f\u6210\u200b\u4e00\u4e2a\u200blaunch.json\u3002\u200b\u53ef\u4ee5\u200b\u5b89\u88c5\u200b\u4e00\u4e2a\u200b\u8c03\u8bd5\u200b\u811a\u672c\u200b\u81ea\u52a8\u200b\u751f\u6210\u200b\u63d2\u4ef6\u200b\uff0c\u200b\u7136\u540e\u200b\u5728\u200b\u57fa\u7840\u200b\u4e0a\u200b\u4fee\u6539\u200b\uff0c\u200b\u5982\u200b\u4fee\u6539\u200b\u53ef\u6267\u884c\u6587\u4ef6\u200b\u4f4d\u7f6e\u200b\uff0cgdb\u200b\u6267\u884c\u200b\u6587\u4ef6\u200b\u7b49\u200b\u3002\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u914d\u7f6e\u200b\u8fdc\u7a0b\u200bgdbserver\uff0cvscode\u200b\u8fde\u63a5\u200bgdbserver\u200b\u8fdb\u884c\u200b\u8c03\u8bd5\u200b\u3002 \u200b\u53c2\u8003\u200b\uff1ahttps://zhangjk98.xyz/vscode-c-and-cpp-develop-and-debug-setting/\u3002 \u200b\u5e38\u89c1\u95ee\u9898\u200b\uff1a</p> <ol> <li>\u200b\u91c7\u7528\u200bc/c++\u200b\u63d2\u4ef6\u200b\u65f6\u200b\uff0c\u200b\u5982\u679c\u200b\u4ee3\u7801\u200b\u4e0d\u80fd\u200b\u8df3\u8f6c\u200b\u5230\u200b\u5b9a\u4e49\u200b\u4f4d\u7f6e\u200b\uff0c\u200b\u4e00\u822c\u200b\u662f\u200b\u6ca1\u6709\u200b\u6253\u5f00\u200bIntelligence\uff0c\u200b\u53c2\u8003\u200b\uff1a\u200b\u53f3\u952e\u200b\u4ee3\u7801\u200b\u65e0\u200b\u8df3\u8f6c\u200b\uff0cVscode\u200b\u53f3\u952e\u200b\u65e0\u200b\u4ee3\u7801\u200b\u8df3\u8f6c\u200b\u95ee\u9898\u200b\u3002</li> <li>\u200b\u91c7\u7528\u200bclangd\u200b\u63d2\u4ef6\u200b\u65f6\u200b\uff0c\u200b\u4ee3\u7801\u200b\u4e0d\u80fd\u200b\u8df3\u8f6c\u200b\u5b9a\u4e49\u200b\u4f4d\u7f6e\u200b\uff0cvscode \u200b\u4e2d\u200b\u7528\u200bclang\u200b\u9047\u5230\u200b\u95ee\u9898\u200b\uff1aclang(pp_file_not_found)\uff0cclangd \u200b\u63d2\u4ef6\u200b\u8bbe\u7f6e\u200b\u4e2d\u200b\u52a0\u5165\u200b\u53c2\u6570\u200b\uff1a \u2013compile-commands-dir=${workspaceFolder}/build/ \u200b\u5e2e\u200b\u4f60\u200b\u627e\u5230\u200bcompile_commands.json\u3002\u200b\u8be5\u200b\u6587\u4ef6\u200b\u901a\u8fc7\u200b\u8bbe\u7f6e\u200bCmake\u200b\u63d2\u4ef6\u200b\u751f\u6210\u200b\uff0c\u200b\u9ed8\u8ba4\u200b\u6253\u5f00\u200b\u3002</li> <li>\u200b\u4e2d\u6587\u200b\u4e71\u7801\u200b\u95ee\u9898\u200b\uff0c\u200b\u6253\u5f00\u200b\u8bbe\u7f6e\u200b\u4e2d\u200b\u7684\u200b\u81ea\u52a8\u200b\u6587\u4ef6\u683c\u5f0f\u200b\u68c0\u6d4b\u200b\uff0c\u200b\u5173\u4e8e\u200bVS Code \u200b\u4e2d\u6587\u200b\u663e\u793a\u200b\u4e71\u7801\u200b_vscode \u200b\u4e71\u7801\u200b_Sean_gGo\u200b\u7684\u200b\u535a\u5ba2\u200b-CSDN\u200b\u535a\u5ba2\u200b\u3002vim\u200b\u4e2d\u200b\u4e5f\u200b\u6709\u200b\u7c7b\u4f3c\u200b\u7684\u200b\u8bbe\u7f6e\u200b\uff0cvim\u200b\u4e2d\u200b\u52a0\u5165\u200b\uff1a set encoding=utf-8 fileencodings=ucs-bom,utf-8,cp936\u3002</li> </ol>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Vscode/Vscode%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#\u5feb\u6377\u952e","title":"\u5feb\u6377\u952e","text":"<p>https://cloud.tencent.com/developer/article/1885451 Ctrl-d\uff1a\u200b\u4e00\u4e2a\u200b\u4e00\u4e2a\u200b\u9009\u62e9\u200b\u5339\u914d\u200b\u5230\u200b\u7684\u200b\uff0c\u200b\u591a\u200b\u5149\u6807\u200b\u9009\u62e9\u200b\u4fee\u6539\u200b Ctrl-u\uff1aCtrl-d\u200b\u5bf9\u5e94\u200b\u7684\u200b\u9006\u200b\u64cd\u4f5c\u200b Ctrl-g\uff1a\u200b\u8df3\u8f6c\u200b\u5230\u200b\u6307\u5b9a\u200b\u884c\u53f7\u200b\u4f4d\u7f6e\u200b Ctrl-w\uff1a\u200b\u5173\u95ed\u200bTab Ctrl-k-w\uff1a\u200b\u5173\u95ed\u200b\u6240\u6709\u200bTab Ctrl-Shit-a\uff1a\u200b\u6ce8\u91ca\u200b\u9009\u4e2d\u200b\u7684\u200b\u4e00\u6bb5\u200b\u4ee3\u7801\u200b Ctrl-\uff1a\u200b\u5206\u5272\u200b\u7a97\u53e3\u200b Ctrl-1\uff1a\u200b\u5207\u6362\u200b\u4e0a\u200b\u4e00\u4e2a\u200b\u7a97\u53e3\u200b Ctrl-2\uff1a\u200b\u5207\u6362\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u7a97\u53e3\u200b Ctrl-Tab\uff1a\u200b\u5207\u6362\u200bTab</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Vscode/Vscode%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode\u7ed3\u5408vim","title":"Vscode\u200b\u7ed3\u5408\u200bVim","text":"<p>https://www.barbarianmeetscoding.com/boost-your-coding-fu-with-vscode-and-vim </p>Bash<pre><code> \"vim.leader\": \"&lt;Space&gt;\",\n    \"vim.easymotion\": true,\n    \"vim.normalModeKeyBindingsNonRecursive\": [\n\n        {\n            \"before\" : [\"&lt;leader&gt;\",\"a\"],\n            \"commands\" : [\n              \"workbench.view.explorer\"\n            ]\n        },\n        {\n          \"before\": [\"J\"],\n          \"after\": [\"5\", \"j\"]\n        },\n        {\n          \"before\": [\"K\"],\n          \"after\": [\"5\", \"k\"]\n        },\n        {\n            \"before\": [\"&lt;Leader&gt;\", \"j\"],\n            \"after\": [\"J\"]\n        },\n        {\n            \"before\": [\"&lt;C-h&gt;\"],\n            \"after\": [\"&lt;C-w&gt;\", \"h\"]\n        },\n        {\n            \"before\": [\"&lt;C-j&gt;\"],\n            \"after\": [\"&lt;C-w&gt;\", \"j\"]\n        },\n        {\n          \"before\": [\"&lt;C-k&gt;\"],\n          \"after\": [\"&lt;C-w&gt;\", \"k\"]\n        },\n        {\n          \"before\": [\"&lt;C-l&gt;\"],\n          \"after\": [\"&lt;C-w&gt;\", \"l\"]\n        },\n        {\n          \"before\": [\"&lt;Leader&gt;\", \"t\", \"t\"],\n          \"commands\": [\":tabnew\"]\n        },\n        {\n          \"before\": [\"&lt;Leader&gt;\", \"t\", \"n\"],\n          \"commands\": [\":tabnext\"]\n        },\n        {\n          \"before\": [\"&lt;Leader&gt;\", \"t\", \"p\"],\n          \"commands\": [\":tabprev\"]\n        },\n        {\n          \"before\": [\"&lt;Leader&gt;\", \"t\", \"o\"],\n          \"commands\": [\":tabo\"]\n        },\n        {\n           \"before\": [\"&lt;Leader&gt;\", \"p\"],\n           \"commands\": [\n               \"workbench.action.showCommands\",\n           ]\n        },\n        {\n           \"before\": [\"&lt;Leader&gt;\", \"t\"],\n            \"commands\": [\n                \"workbench.action.gotoSymbol\",\n            ]\n        }\n\n    ],\n    \"vim.handleKeys\": {\n        \"&lt;C-f&gt;\": false\n    },\n</code></pre><p></p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Vscode/Vscode%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode\u5982\u4f55gdb","title":"Vscode\u200b\u5982\u4f55\u200bgdb","text":"<p>\u200b\u8c03\u8bd5\u200b\u666e\u901a\u200b\u53ef\u6267\u884c\u7a0b\u5e8f\u200b \u200b\u8c03\u8bd5\u200bso Python\u200b\u52a0\u8f7d\u200bso gdb\u200b\u7248\u672c\u200b\u4e5f\u200b\u53ef\u80fd\u200b\u5f71\u54cd\u200b</p> <p>\u200b\u542f\u52a8\u200bserver\uff1a /opt/gcc-arm-8.3-2019.03-x86_64-arm-linux-gnueabihf# find . -name gdbserver ./arm-linux-gnueabihf/libc/usr/bin/gdbserver cp gdbserver \u200b\u5230\u200b\u8fd0\u884c\u200b\u4e3b\u673a\u200b\u4e0a\u200b ${current_dir}/../gdbserver :9091 ${current_dir}/bin/main arg1 arg2  \u200b\u5728\u200b\u5f00\u53d1\u200b\u673a\u4e0a\u200b\uff1a /opt/gcc-arm-8.3-2019.03-x86_64-arm-linux-gnueabihf/bin# arm-linux-gnueabihf-gdb</p> <p></p>Bash<pre><code>{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"OK_Gdb_Debugger\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            //\u200b\u8981\u200b\u8c03\u8bd5\u200b\u7684\u200b\u7a0b\u5e8f\u200b\n            \"program\": \"${workspaceFolder}/build/bin/human_detect\",\n            \"args\": [],\n            \"stopAtEntry\": false,\n            \"cwd\": \"${workspaceFolder}\",\n            \"environment\": [],\n            \"externalConsole\": false,\n            \"MIMode\": \"gdb\",\n            //gdb\u200b\u8def\u5f84\u200b\n            \"miDebuggerPath\": \"/opt/gcc-arm-8.3-2019.03-x86_64-arm-linux-gnueabihf/bin/arm-linux-gnueabihf-gdb\",\n            //\u200b\u8fdc\u7a0b\u200b\u8c03\u8bd5\u200b\uff0c\u200b\u670d\u52a1\u5668\u200b\u5730\u5740\u200b\uff0c\u200b\u7aef\u53e3\u53f7\u200b\u3002\n            \"miDebuggerServerAddress\": \"192.168.1.188:9091\",\n            \"additionalSOLibSearchPath\": \"${workspaceFolder}/build/lib/\"\n            // \"setupCommands\": [\n            //     {\n            //         \"description\": \"Enable pretty-printing for gdb\",\n            //         \"text\": \"-enable-pretty-printing\",\n            //         \"ignoreFailures\": true\n            //     }\n            // ]\n        }\n    ]\n}\n</code></pre> \u200b\u9519\u8bef\u200b\uff1a \u200b\u4e0d\u80fd\u200b\u65ad\u70b9\u200bso\uff0cso\u200b\u8bbe\u7f6e\u200b\u4e86\u200b-g \u200b\u6ca1\u6709\u200b-O\u200b\u4f18\u5316\u200b\uff0ccmake\u200b\u8bbe\u7f6e\u200b\u4e86\u200bdebug\u200b\u7f16\u8bd1\u200b\uff0c\u200b\u4e0d\u80fd\u200b\u65ad\u70b9\u200b\u5230\u200bso\u200b\u7684\u200bcpp\u200b\u6587\u4ef6\u200b\uff0c\u200b\u62a5\u9519\u200b\u63d0\u793a\u200b\uff1a Module containing this breakpoint has not yet loaded or the breakpoint address could not be obtained. \u200b\u89e3\u51b3\u200b\u65b9\u5f0f\u200b\uff1a \u200b\u5c06\u200b\u5f00\u53d1\u200b\u673a\u200b\u7684\u200bbuild\u200b\u6587\u4ef6\u200b\u4e0b\u200b\u7684\u200blib\u200b\u76ee\u5f55\u200b\u6dfb\u52a0\u200b\u5230\u200badditionalSOLibSearchPath\uff1a \u201cadditionalSOLibSearchPath\u201d: \u201c${workspaceFolder}/build/lib/\u201d<p></p> <p>args \u200b\u548c\u200b env\u200b\u8bbe\u7f6e\u200b </p>C++<pre><code>\"args\": [\n            \"xxxx1\",\n            \"yyyy2\",\n            \"zzzz3\",\n            ],\n\"cwd\": \"${workspaceFolder}\",\n\"environment\": [\n    // {\n    //     \"name\": \"SHELL\",\n    //     \"value\": \"/bin/bash\"\n    // },\n    {\n        \"name\": \"LD_LIBRARY_PATH\",\n        \"value\": \"${LD_LIBRARY_PATH}:${workspaceFolder}/xxxx\"\n    }\n],\n</code></pre><p></p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Vscode/Vscode%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode\u914d\u7f6e\u4ea4\u53c9\u7f16\u8bd1\u5de5\u5177","title":"Vscode\u200b\u914d\u7f6e\u200b\u4ea4\u53c9\u200b\u7f16\u8bd1\u200b\u5de5\u5177","text":"<p>https://edgeai-lab.github.io/notebook/Embedded%20System/linux/compiler/cmake/vscode_camke_cross_compile/</p> Text Only<pre><code>vim .local/share/CMakeTools/cmake-tools-kits.json\n</code></pre> Text Only<pre><code>{\n    \"name\": \"arm_corss_compiler\",\n    \"toolchainFile\": \"/home/fhc/myWorkspace/cmake_project/cmake_cross_complie_base/toolchain.cmake\"\n}\n</code></pre> Text Only<pre><code>### toolchain.cmake ###\n# this is required\nSET(CMAKE_SYSTEM_NAME Linux)\n\n# specify the cross compiler\nSET(CMAKE_C_COMPILER   /home/fhc/linux_driver/gcc-3.4.5-glibc-2.3.6/bin/arm-linux-gcc)\nSET(CMAKE_CXX_COMPILER /home/fhc/linux_driver/gcc-3.4.5-glibc-2.3.6/bin/arm-linux-g++)\n\n# where is the target environment\nSET(CMAKE_FIND_ROOT_PATH  /home/fhc/linux_driver/gcc-3.4.5-glibc-2.3.6)\n\n# search for programs in the build host directories (not necessary)\nSET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n\n# for libraries and headers in the target directories\nSET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\nSET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\n</code></pre>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Vscode/Vscode%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#gdb\u66f4\u597d\u7684\u663e\u793ac-stl\u6570\u636e\u7ed3\u6784\u7684\u503c","title":"gdb\u200b\u66f4\u597d\u200b\u7684\u200b\u663e\u793a\u200bc++ STL\u200b\u6570\u636e\u7ed3\u6784\u200b\u7684\u200b\u503c","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/Vscode/Vscode%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#\u5f00\u542fpretty-print\u529f\u80fd","title":"\u5f00\u542f\u200bpretty-print\u200b\u529f\u80fd","text":"<p>\u200b\u5728\u200b\u4f7f\u7528\u200bvscode\u200b\u8c03\u8bd5\u200b\u65f6\u200b\uff0c\u200b\u4e0d\u80fd\u200b\u50cf\u200bclion\u200b\u4e00\u6837\u200b\u76f4\u63a5\u200b\u67e5\u770b\u200bSTL\u200b\u5bb9\u5668\u200b\u4e2d\u200b\u7684\u200b\u5185\u5bb9\u200b\uff0c\u200b\u6bd4\u5982\u200bString\uff0c\u200b\u53ea\u80fd\u200b\u770b\u5230\u200b\u6307\u9488\u200b\u548c\u200b\u957f\u5ea6\u200b\u7b49\u200b\u4fe1\u606f\u200b\uff0c\u200b\u4e0d\u80fd\u200b\u76f4\u63a5\u200b\u770b\u5230\u200b\u5b57\u7b26\u4e32\u200b\u3002 \u3010\u200b\u5de5\u5177\u200b\u3011\u2014\u2014VSCODE\u200b\u8c03\u8bd5\u200bC++\u200b\u65f6\u200b\u65e0\u6cd5\u200b\u663e\u793a\u200bVector\uff0cmap\u200b\u7b49\u200b\u5bb9\u5668\u200b\u7684\u200b\u503c\u200b_\u200b\u519c\u592b\u5c71\u6cc9\u200b2\u200b\u53f7\u200b\u7684\u200b\u535a\u5ba2\u200b-CSDN\u200b\u535a\u5ba2\u200b</p> <p></p>Text Only<pre><code>\"setupCommands\": [\n    {\n        \"description\": \"Test\",\n        \"text\": \"python import sys;sys.path.insert(0, '/usr/share/gcc-8/python');from libstdcxx.v6.printers import register_libstdcxx_printers;register_libstdcxx_printers(None)\",\n        \"ignoreFailures\": false\n    },\n    {\n        \"description\": \"Enable pretty-printing for gdb\",\n        \"text\": \"-enable-pretty-printing\",\n        \"ignoreFailures\": true\n    }\n]\n</code></pre> \u200b\u4f46\u662f\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u51fa\u73b0\u200b\u95ee\u9898\u200b\uff1aPython scripting is not supported in this copy of GDB \u200b\u89e3\u51b3\u200b\uff1a 1.\u200b\u67e5\u770b\u200b\u5f53\u524d\u200bgdb\u200b\u662f\u5426\u200b\u652f\u6301\u200bpretty-print\u200b\u529f\u80fd\u200b\uff0c\u200b\u4e24\u79cd\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u65b9\u6cd5\u200b\u4e00\u200b\uff0c\u200b\u5728\u200bgdb\u200b\u7ec8\u7aef\u200b\uff1a<p></p> <p></p>Text Only<pre><code>\uff08gdb\uff09info pretty-print\n</code></pre> \u200b\u5982\u679c\u200b\u652f\u6301\u200b\uff0c\u200b\u4f1a\u200b\u770b\u5230\u200b\u4ee5\u4e0b\u200b\u7c7b\u4f3c\u200b\u7684\u200b\u8f93\u51fa\u200b\uff1a<p></p> <p></p>Text Only<pre><code>global pretty-printers:\n  builtin\n    mpx_bound128\n</code></pre> \u200b\u65b9\u6cd5\u200b\u4e8c\u200b\uff1a \u200b\u5982\u679c\u200b\u662f\u200b\u4ea4\u53c9\u200b\u7f16\u8bd1\u200b\u7684\u200bgdb\uff0c\u200b\u8bf7\u200b\u5c06\u200b$(which gdb)\u200b\u6362\u6210\u200b\u5b9e\u9645\u200b\u7684\u200bgdb\u200b\u8def\u5f84\u200b\u3002<p></p> <p></p>Text Only<pre><code>readelf -d $(which gdb) | grep python\n</code></pre> \u200b\u5982\u679c\u200b\u6ca1\u6709\u200b\u6253\u5370\u200b\u7c7b\u4f3c\u200bpythonxxx\u200b\u7684\u200b\u5185\u5bb9\u200b\uff0c\u200b\u8bf4\u660e\u200b\u4e0d\u200b\u652f\u6301\u200b\uff0c\u200b\u9700\u8981\u200b\u91cd\u65b0\u200b\u7f16\u8bd1\u200b\u3002<p></p> <ol> <li>\u200b\u91cd\u65b0\u200b\u7f16\u8bd1\u200b</li> </ol> <p></p>Text Only<pre><code>sudo apt install python3 python3-dev\n</code></pre> \u200b\u7f16\u8bd1\u200b\u811a\u672c\u200b\u5982\u4e0b\u200b\uff1a<p></p> Text Only<pre><code>#!/bin/bash\n\ncd gdb-8.1.1/\n\n./configure --program-prefix=`aarch64-mix210-linux-` \\\n    --target=aarch64-mix210-linux \\\n    --prefix=`pwd`/out \\ \n    --with-python=\"/usr/bin/python3\"\n\n# \u200b\u589e\u52a0\u200b\u4e86\u200b--with-python\uff0c\u200b\u6dfb\u52a0\u200bpython\u200b\u652f\u6301\u200b\nmake -j2 \nmake install\n</code></pre>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/linux%E6%8F%90%E6%95%88/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","title":"Linux\u200b\u5e38\u7528\u547d\u4ee4","text":"<p>\u200b\u67e5\u770b\u200b\u624b\u518c\u200bINTRO </p>Bash<pre><code>man 2 intro \n</code></pre><p></p> <p>\u200b\u67e5\u770b\u200b\u624b\u518c\u200b\u4e2d\u200bEAGIN\u200b\u7684\u200b\u5185\u5bb9\u200b </p>Bash<pre><code>man 3 errno | less -Ip EAGAIN:\n</code></pre><p></p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/linux%E6%8F%90%E6%95%88/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/","title":"Linux\u200b\u5e38\u7528\u547d\u4ee4\u200b\u884c\u200b\u5de5\u5177","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/linux%E6%8F%90%E6%95%88/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/#linux\u5e38\u7528\u5de5\u5177","title":"Linux\u200b\u5e38\u7528\u5de5\u5177","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/linux%E6%8F%90%E6%95%88/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/#\u67e5\u770b\u4ee3\u7801\u7edf\u8ba1\u4fe1\u606f","title":"\u67e5\u770b\u200b\u4ee3\u7801\u200b\u7edf\u8ba1\u200b\u4fe1\u606f","text":"<p>tokei</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/linux%E6%8F%90%E6%95%88/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/#\u786c\u76d8\u5907\u4efd","title":"\u786c\u76d8\u200b\u5907\u4efd","text":"<p>clonezilla</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/linux%E6%8F%90%E6%95%88/Utils/","title":"Utils","text":"<p>convert png to ico</p> <p>https://png2icojs.com/</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/linux%E6%8F%90%E6%95%88/dotfiles%20config/","title":"Dotfiles config","text":"Text Only<pre><code># get bash script dir\ndirname \"$0\"\n</code></pre> <p>numToStr</p> <p>dotfiles \u200b\u94fe\u63a5\u200b\u7ba1\u7406\u8f6f\u4ef6\u200b stow</p> <p>nvim config</p> <p>zx script</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/linux%E6%8F%90%E6%95%88/dotfiles%20config/#install-fish","title":"install fish","text":"Text Only<pre><code>sudo apt-add-repository ppa:fish-shell/release-3\nsudo apt update\nsudo apt install fish\n</code></pre> <p>\u200b\u4ece\u200b Zsh \u200b\u8fc1\u79fb\u200b\u5230\u200b Fish\uff0c\u200b\u611f\u89c9\u200b\u8fd8\u200b\u4e0d\u9519\u200b</p> <p>tmux config</p> <p>\u200b\u4ece\u200bGoland\u200b\u8f6c\u200b\u5230\u200bNeovim</p> <p>packer \u200b\u5d29\u6e83\u200b\u4e34\u65f6\u200b\u89e3\u51b3\u200b\u65b9\u6cd5\u200b\uff1a \u200b\u5220\u9664\u200bpacker\u200b\u4ee5\u53ca\u200b\u5b89\u88c5\u200b\u7684\u200b\u63d2\u4ef6\u200b\uff0c\u200b\u91cd\u65b0\u5b89\u88c5\u200b</p> Text Only<pre><code>cd ~/.local/share/nvim/site/pack/packer/start\nrm -rf ./*\n\ngit clone --depth 1 https://github.com/wbthomason/packer.nvim\\\n                           ~/.local/share/nvim/site/pack/packer/start/packer.nvim\n</code></pre>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/linux%E6%8F%90%E6%95%88/linux%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%8A%80%E6%9C%AF/","title":"Linux\u200b\u96f6\u200b\u62f7\u8d1d\u200b\u6280\u672f","text":"<ol> <li>\u200b\u96f6\u200b\u62f7\u8d1d\u200b 2.1 direct IO 2.2 mmap + write 2.3 sendfile 2.4 splice 2.5 sockmap</li> </ol>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/linux%E6%8F%90%E6%95%88/right%20Network%20way/","title":"right Network way","text":"<p>proxy glados.rocks https://glados.network/</p> <p>net util clash</p> <p>cmd usage proxychains </p>Bash<pre><code>sudo apt install proxychains\nsudo vim /etc/proxychains.conf\n</code></pre><p></p> <p>add contents in proxychains.conf file. </p>Text Only<pre><code>socks5 127.0.0.1 7890\n</code></pre><p></p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/linux%E6%8F%90%E6%95%88/systemd%20use%20service/","title":"Systemd use service","text":"<ul> <li> <p>\u200b\u67e5\u770b\u200b\u670d\u52a1\u200b\u7684\u200b\u65e5\u5fd7\u200b </p>Text Only<pre><code>journalctl -u xxx.service -e\n</code></pre><p></p> </li> <li> <p>\u200b\u67e5\u770b\u200b\u672c\u200b\u673a\u200b\u6240\u6709\u200b\u7684\u200brunning\u200b\u7684\u200bservice </p>Text Only<pre><code>systemctl list-units --type=service --state=running | grep xxx\n</code></pre><p></p> </li> <li> <p>\u200b\u91cd\u542f\u200b\u670d\u52a1\u200b </p>Text Only<pre><code>systemctl start xxx.service\n</code></pre><p></p> </li> <li>\u200b\u90e8\u7f72\u200b\u670d\u52a1\u200b Text Only<pre><code>sudo cp xxx.service  /etc/systemd/system/\nsudo cp xxx.sh /usr/local/bin/\n</code></pre></li> </ul>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/linux%E6%8F%90%E6%95%88/systemd%20use%20service/#watch-dog","title":"watch dog","text":"Text Only<pre><code>#!/bin/bash\n\nSERVICE_COMMAND_NAME=\"xxx\"\nSERVICE_NAME=\"xxx.service\"\n\nwhile true; do\n  if ! pgrep -x \"$SERVICE_COMMAND_NAME\" &gt; /dev/null; then\n    echo \"$SERVICE_NAME is not running, restarting...\"\n    sudo systemctl restart \"$SERVICE_NAME\"\n  else\n    echo \"$SERVICE_NAME is running...\"\n  fi\n  sleep 10\ndone\n</code></pre>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/linux%E6%8F%90%E6%95%88/%E4%BB%A5%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E6%96%B9%E5%BC%8F%E5%90%AF%E5%8A%A8%E7%A8%8B%E5%BA%8F/","title":"\u4ee5\u200b\u7cfb\u7edf\u200b\u670d\u52a1\u200b\u65b9\u5f0f\u200b\u542f\u52a8\u200b\u7a0b\u5e8f","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/linux%E6%8F%90%E6%95%88/%E4%BB%A5%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E6%96%B9%E5%BC%8F%E5%90%AF%E5%8A%A8%E7%A8%8B%E5%BA%8F/#systemd-\u548c-initd-\u4e4b\u95f4\u7684\u533a\u522b","title":"systemd \u200b\u548c\u200b init.d \u200b\u4e4b\u95f4\u200b\u7684\u200b\u533a\u522b","text":"Text Only<pre><code>Sysvinit\n\n-is more closely related to Unix philosophy and design\n\n-Starts processes sequentially(ish)\n\n-Older than Systemd\n\nSystemd\n\n-not POSIX spirited\n\n-Starts processes in parallel\n\n-Adopted by most major Linux based distributions\n</code></pre>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/linux%E6%8F%90%E6%95%88/%E4%BB%A5%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E6%96%B9%E5%BC%8F%E5%90%AF%E5%8A%A8%E7%A8%8B%E5%BA%8F/#systemd\u65b9\u5f0f\u542f\u52a8\u7a0b\u5e8f","title":"systemd\u200b\u65b9\u5f0f\u200b\u542f\u52a8\u200b\u7a0b\u5e8f","text":"<p>how-to-run-a-linux-program-at-startup-with-systemd</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/linux%E6%8F%90%E6%95%88/%E5%86%85%E5%AD%98%E6%A3%80%E6%B5%8B%E5%8F%8A%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/","title":"\u5185\u5b58\u200b\u68c0\u6d4b\u200b\u53ca\u200b\u8c03\u8bd5\u200b\u5de5\u5177","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/linux%E6%8F%90%E6%95%88/%E5%86%85%E5%AD%98%E6%A3%80%E6%B5%8B%E5%8F%8A%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/#rr","title":"rr","text":"<p>\u200b\u51fa\u81ea\u200bMozilla\u200b\u7684\u200b\u53e6\u200b\u4e00\u6b3e\u200b\u8c03\u8bd5\u200bC\u200b\u7cfb\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u5229\u5668\u200b\uff0crr\u200b\u662f\u200bRecord and Replay\u3002\u200b\u7528\u4e8e\u200b\u4fdd\u5b58\u200b\u7a0b\u5e8f\u8fd0\u884c\u200b\u7684\u200b\u73af\u5883\u200b\uff0c\u200b\u4e0d\u505c\u200b\u7684\u200b\u91cd\u653e\u200b\u8c03\u8bd5\u200b\u3002</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/linux%E6%8F%90%E6%95%88/%E5%86%85%E5%AD%98%E6%A3%80%E6%B5%8B%E5%8F%8A%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/#valgrind","title":"valgrind","text":"<p>\u200b\u4e00\u6b3e\u200b\u5185\u5b58\u200b\u68c0\u6d4b\u5de5\u5177\u200b\u3002</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/linux%E6%8F%90%E6%95%88/%E5%86%85%E5%AD%98%E6%A3%80%E6%B5%8B%E5%8F%8A%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/#address-sanitizer","title":"Address sanitizer","text":"<p>Address sanitizer\u200b\u662f\u200b\u4e00\u6b3e\u200b\u5185\u5b58\u200b\u68c0\u6d4b\u5de5\u5177\u200b\uff0c \u200b\u76f8\u6bd4\u200bValgrind\u200b\u6548\u7387\u200b\u66f4\u9ad8\u200b\u3002</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/linux%E6%8F%90%E6%95%88/%E5%86%85%E5%AD%98%E6%A3%80%E6%B5%8B%E5%8F%8A%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/#cmake\u4e2d\u4f7f\u7528address-sanitizer","title":"cmake\u200b\u4e2d\u200b\u4f7f\u7528\u200bAddress sanitizer","text":"<p>\u200b\u5728\u200bcmakelist.txt \u200b\u6587\u4ef6\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\uff1a </p>Text Only<pre><code>set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -fno-omit-frame-pointer -fsanitize=address\")\nset(CMAKE_LINKER_FLAGS_DEBUG \"${CMAKE_LINKER_FLAGS_DEBUG} -fno-omit-frame-pointer -fsanitize=address\")\n</code></pre><p></p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/linux%E6%8F%90%E6%95%88/%E5%86%85%E5%AD%98%E6%A3%80%E6%B5%8B%E5%8F%8A%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/#cfilt","title":"c++filt","text":"<p>Demangle C++ and Java symbols</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/linux%E6%8F%90%E6%95%88/%E7%A3%81%E7%9B%98%E6%B8%85%E7%90%86%E5%B7%A5%E5%85%B7/","title":"\u78c1\u76d8\u6e05\u7406\u200b\u5de5\u5177","text":"<p>Disk Usage Analyzer</p> <p>install:</p> Text Only<pre><code>sudo apt install baobab\n</code></pre>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/linux%E6%8F%90%E6%95%88/%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8U%E7%9B%98%E5%88%B6%E4%BD%9C/","title":"\u7cfb\u7edf\u542f\u52a8\u200bU\u200b\u76d8\u200b\u5236\u4f5c","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/linux%E6%8F%90%E6%95%88/%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8U%E7%9B%98%E5%88%B6%E4%BD%9C/#\u7cfb\u7edf\u542f\u52a8u\u76d8\u5236\u4f5c\u65b9\u5f0f","title":"\u7cfb\u7edf\u542f\u52a8\u200bU\u200b\u76d8\u200b\u5236\u4f5c\u200b\u65b9\u5f0f","text":"<p>https://github.com/ventoy/Ventoy</p> <p>ventoy</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/linux%E6%8F%90%E6%95%88/%E8%87%AA%E5%AE%9A%E4%B9%89Linux%E5%8F%91%E8%A1%8C%E5%8C%85/","title":"\u81ea\u5b9a\u4e49\u200bLinux\u200b\u53d1\u884c\u200b\u5305","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E7%BC%96%E8%AF%91%E5%A4%A7%E6%B3%95/%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/","title":"\u4ea4\u53c9\u200b\u7f16\u8bd1","text":"<p>\u200b\u4f7f\u7528\u200bcrosstool-ng</p> <p>\u200b\u9996\u5148\u200b\uff0c\u200b\u5728\u200b\u4e3b\u673a\u200b\u7f16\u8bd1\u5668\u200b\u4f7f\u7528\u200bcrosstool-ng\u200b\u7f16\u8bd1\u200b\u751f\u6210\u200b\u76ee\u6807\u200b\u7f16\u8bd1\u200b\u94fe\u6761\u200b</p> <p>\u200b\u7136\u540e\u200b\uff0c\u200b\u914d\u7f6e\u200bcmake toolchain, \u200b\u4f7f\u7528\u200b\u76ee\u6807\u200b\u7f16\u8bd1\u200b\u94fe\u6761\u200b\u751f\u6210\u200b\u76ee\u6807\u200bABI\uff08Application Binary Interface\uff09\u200b\u73af\u5883\u200b\u7684\u200b\u53ef\u6267\u884c\u6587\u4ef6\u200b\u6216\u5e93\u200b\u3002</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E/AWK/","title":"AWK","text":"<p>book\uff1a https://github.com/wuzhouhui/awk game develop by awk\uff1a https://github.com/TheMozg/awk-raycaster https://lodev.org/cgtutor/raycasting.html vim sed awk https://github.com/adrianlarion</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E/Vim%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/","title":"Vim\u200b\u5947\u6deb\u200b\u6280\u5de7","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E/Vim%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/#\u6280\u5de7","title":"\u6280\u5de7","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E/Vim%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/#\u8df3\u8f6c","title":"\u8df3\u8f6c","text":"<ul> <li>:jumps</li> </ul> <p>\u200b\u67e5\u770b\u200b\u8df3\u8dc3\u200b\u5217\u8868\u200b</p> <ul> <li></li> </ul> <p>\u200b\u8df3\u8f6c\u200b\u5230\u200b\u4e0a\u200b\u4e00\u4e2a\u200b\u4f4d\u7f6e\u200b\uff0co\u200b\u53ef\u4ee5\u200b\u7406\u89e3\u200b\u4e3a\u200bold</p> <ul> <li></li> </ul> <p>\u200b\u548c\u200b\u76f8\u5bf9\u200b\u5e94\u200b\u914d\u5408\u200b\u4f7f\u7528\u200b\uff0c\u200b\u8df3\u8f6c\u200b\u65b9\u5411\u200b\u76f8\u53cd\u200b</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E/Vim%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/#\u63d2\u5165\u6a21\u5f0f","title":"\u63d2\u5165\u200b\u6a21\u5f0f","text":"<p>\uff081\uff09\u200b\u5728\u200b\u63d2\u5165\u200b\u6a21\u5f0f\u200b\u4e0b\u200b\uff0c\u200b\u4e3a\u4e86\u200b\u5feb\u901f\u200b\u5220\u9664\u200b\uff0c\u200b\u5220\u9664\u200bword\uff0c\u200b\u5220\u9664\u200b\u5230\u200b\u884c\u9996\u200b\u7b49\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\uff1a</p> <ul> <li> \u200b\u5220\u9664\u200b\u5230\u200b\u884c\u9996\u200b</li> <li> \u200b\u5411\u524d\u200b\u5220\u9664\u200b\u4e00\u4e2a\u200bword</li> <li> \u200b\u56de\u9000\u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u200b</li> </ul> <p>\uff082\uff09\u200b\u5feb\u901f\u200b\u63d2\u5165\u200b\u5bc4\u5b58\u5668\u200b\u5185\u5bb9\u200b\uff1a \u200b\u52a0\u4e0a\u200b\u5bc4\u5b58\u5668\u200b\u7684\u200b\u540d\u5b57\u200b\uff0c\u200b\u6bd4\u5982\u200b\uff1aa \uff083\uff09\u200b\u5feb\u901f\u200b\u8ba1\u7b97\u200b \u200b\u6bd4\u5982\u200b\u7f16\u5199\u200b\u56fe\u7247\u200b\u5904\u7406\u7a0b\u5e8f\u200b\uff0c\u200b\u9700\u8981\u200b\u8ba1\u7b97\u200b1080 * 1920 * 3\u200b\u7684\u200b\u503c\u200b\uff0c\u200b\u662f\u4e0d\u662f\u200b\u8981\u200b\u6253\u5f00\u200b\u4e00\u4e2a\u200b\u8ba1\u7b97\u5668\u200b\uff0c\u200b\u7136\u540e\u200b\u8ba1\u7b97\u200b\u590d\u5236\u7c98\u8d34\u200b\uff0c\u200b\u8fd9\u6837\u200b\u592a\u200b\u9ebb\u70e6\u200b\u4e86\u200b\u3002\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b =\uff0c\u200b\u7136\u540e\u200b\u63d0\u793a\u200b\u4f60\u200b\u8f93\u5165\u200b\u4e00\u4e2a\u200b\u8868\u8fbe\u5f0f\u200b\u6bd4\u5982\u200b\uff1a1920 * 1080 * 3\uff0c\u200b\u5c31\u200b\u4f1a\u200b\u81ea\u52a8\u200b\u63d2\u5165\u200b\u8ba1\u7b97\u7ed3\u679c\u200b\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200bpow\u200b\u51fd\u6570\u200b\u7b49\u200b\u8ba1\u7b97\u200b\u6b21\u65b9\u200b\u3002</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E/Vim%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/#\u5728ex\u6a21\u5f0f\u5feb\u901f\u63d2\u5165","title":"\u5728\u200bEx\u200b\u6a21\u5f0f\u200b\u5feb\u901f\u200b\u63d2\u5165","text":"<p>\u200b\u5728\u200bEx\u200b\u6a21\u5f0f\u200b\u4e0b\u200b\uff0c\u200b\u5982\u679c\u200b\u9700\u8981\u200b\u5c06\u200b\u5149\u6807\u200b\u4f4d\u7f6e\u200b\u7684\u200b\u957f\u200b\u5b57\u7b26\u4e32\u200b\u63d2\u5165\u200bEx\u200b\u8f93\u5165\u200b\u4e2d\u200b\uff0c \u200b\u6267\u884c\u200b\uff1a</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E/Vim%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/#\u5feb\u901f\u6253\u5f00\u7ec8\u7aef","title":"\u5feb\u901f\u200b\u6253\u5f00\u200b\u7ec8\u7aef","text":"<ul> <li>\u200b\u914d\u5408\u200bfg\u200b\u547d\u4ee4\u200b\u4f7f\u7528\u200b</li> <li>vim\u200b\u6267\u884c\u200b:ter\uff0c\u200b\u6253\u5f00\u200b\u4e00\u4e2a\u200b\u7ec8\u7aef\u200b\uff0c\u200b\u7136\u540e\u200bexit\u200b\u9000\u51fa\u200b</li> <li>vim\u200b\u6267\u884c\u200b:sh\uff0c\u200b\u6253\u5f00\u200b\u4e00\u4e2a\u200b\u7ec8\u7aef\u200b\uff0c\u200b\u7136\u540e\u200bexit\u200b\u9000\u51fa\u200b</li> </ul>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E/Vim%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/#quickfix\u7a97\u53e3","title":"quickfix\u200b\u7a97\u53e3","text":"<ul> <li>:ccl[ose] \u200b\u547d\u4ee4\u200b\u5173\u95ed\u200b\u7a97\u53e3\u200b</li> <li>:copen \u200b\u547d\u4ee4\u200b\u6253\u5f00\u200b\u7a97\u53e3\u200b</li> </ul>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E/Vim%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/#ex\u6a21\u5f0f\u63d0\u793a\u8f93\u5165","title":"Ex\u200b\u6a21\u5f0f\u200b\u63d0\u793a\u200b\u8f93\u5165","text":"<p>\u200b\u5728\u200bEx\u200b\u6a21\u5f0f\u200b\u8f93\u5165\u200b\u4e00\u90e8\u5206\u200b\u5b57\u7b26\u200b\u540e\u200b\uff0c\u200b\u5fd8\u8bb0\u200b\u4e86\u200b\u547d\u4ee4\u200b\uff0c\u200b\u6216\u8005\u200b\u9700\u8981\u200b\u63d0\u793a\u200b\uff0c\u200b\u6309\u4f1a\u200b\u51fa\u73b0\u200b\u63d0\u793a\u200b\u3002</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E/Vim%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/#\u6587\u4ef6\u8df3\u8f6c","title":"\u6587\u4ef6\u200b\u8df3\u8f6c","text":"<ul> <li>\u200b\u5728\u200bex\u200b\u6a21\u5f0f\u200b\uff0c\u200b\u6267\u884c\u200b :r !pwd \u200b\u53ef\u4ee5\u200b\u5728\u200b\u5149\u6807\u200b\u4f4d\u7f6e\u200b\u8f93\u5165\u200b\u5f53\u524d\u200b\u8def\u5f84\u200b\u3002</li> <li>\u200b\u5728\u200bnormal\u200b\u6a21\u5f0f\u200b\uff0c\u200b\u6572\u51fb\u200b fg \u200b\u53ef\u4ee5\u200b\u8df3\u8f6c\u200b\u6253\u5f00\u200b\u6587\u4ef6\u200b\uff0c\u200b\u5982\u679c\u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\u6709\u200b\u7a7a\u683c\u200b\uff0c\u200b\u5148\u200b\u9009\u4e2d\u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\uff0c\u200b\u518d\u200b\u4f7f\u7528\u200bfg\u3002</li> </ul>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E/Vim%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/#\u6253\u5f00\u6587\u4ef6\u7684\u4e0d\u540c\u65b9\u5f0f","title":"\u6253\u5f00\u200b\u6587\u4ef6\u200b\u7684\u200b\u4e0d\u540c\u200b\u65b9\u5f0f","text":"<ul> <li>vim -o * \u200b\u4f7f\u7528\u200bn\u200b\u4e2a\u200b\u6a2a\u5411\u200b\u7a97\u53e3\u200b\u6253\u5f00\u200b\u6587\u4ef6\u200b</li> <li>vim -O * \u200b\u4f7f\u7528\u200bn\u200b\u4e2a\u200b\u7eb5\u5411\u200b\u7a97\u53e3\u200b\uff08vertically\uff09\u200b\u6253\u5f00\u200b\u6587\u4ef6\u200b</li> <li>vim -p * \u200b\u5c06\u200b\u591a\u4e2a\u200b\u6587\u4ef6\u200b\u6309\u7167\u200b\u591a\u4e2a\u200btab\u200b\u6253\u5f00\u200b</li> </ul>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E/Vim%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/#\u81ea\u5e26\u7684\u81ea\u52a8\u8865\u5168","title":"\u81ea\u5e26\u200b\u7684\u200b\u81ea\u52a8\u200b\u8865\u5168","text":"<ul> <li> \u200b\u6b63\u5e8f\u200b\u904d\u5386\u200b\u63d0\u793a\u200b\u9879\u200b</li> <li> \u200b\u5012\u5e8f\u200b\u904d\u5386\u200b\u63d0\u793a\u200b\u9879\u200b</li> </ul>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E/Vim%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/#\u641c\u7d22","title":"\u641c\u7d22","text":"<ul> <li>/ </li> <li>\uff1f</li> <li>n next\uff0cp previous</li> <li>q/ \u200b\u4f1a\u200b\u6253\u5f00\u200b\u641c\u7d22\u200b\u5386\u53f2\u8bb0\u5f55\u200b\uff0c\u200b\u7136\u540e\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u5feb\u901f\u200b\u9009\u62e9\u200b\u641c\u7d22\u200b\u9879\u200b\uff0c\u200b\u518d\u6b21\u200b\u641c\u7d22\u200b\u3002</li> </ul>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E/Vim%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/#\u52a0\u5bc6\u6587\u4ef6","title":"\u52a0\u5bc6\u200b\u6587\u4ef6","text":"<p>vim -x file.txt \u200b\u952e\u5165\u200b\u4e24\u6b21\u200b\u5bc6\u7801\u200b\u786e\u8ba4\u200b\uff0c\u200b\u7136\u540e\u200b\u52a0\u5bc6\u200b\u6587\u4ef6\u200b \u200b\u6216\u8005\u200b\u5728\u200bex\u200b\u6a21\u5f0f\u200b\uff0c:X \uff08\u200b\u6ce8\u610f\u200b\u662f\u200b\u5927\u5199\u200bX\uff09\u200b\u52a0\u5bc6\u200b\u6587\u4ef6\u200b\uff0c\u200b\u6216\u8005\u200b\u4e24\u6b21\u200b\u56de\u8f66\u200b\u89e3\u5bc6\u200b\u6587\u4ef6\u200b\uff0c\u200b\u7136\u540e\u200b:wq\u200b\u4fdd\u5b58\u200b\u3002</p> <p>-x\u200b\u547d\u4ee4\u200b\u6253\u5f00\u200b\u6587\u4ef6\u200b\uff0c\u200b\u4f8b\u5982\u200b: vim -x t1.py\uff1b \u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u5728\u200b\u6253\u5f00\u200b\u6587\u4ef6\u200b\u540e\u200b\uff0c\u200b\u6267\u884c\u200b :X\uff0c\u200b\u6ce8\u610f\u200b\u8fd9\u91cc\u200b\u662f\u200b\u5927\u5199\u200b\u7684\u200bX\u3002 \u200b\u4f1a\u200b\u63d0\u793a\u200b\u4f60\u200b\u8f93\u5165\u200b\u4e24\u6b21\u200b\u5bc6\u7801\u200b\uff0c</p> <p></p>Text Only<pre><code>Enter encryption key: ***\nEnter same key again: ***\n</code></pre> \u200b\u7136\u540e\u200b\u6267\u884c\u200b:wq \u200b\u4fdd\u5b58\u200b\u9000\u51fa\u200b\u3002\u200b\u901a\u8fc7\u200bfile\u200b\u547d\u4ee4\u200b\u67e5\u770b\u200b\u6587\u4ef6\u200b\uff0c\u200b\u4f7f\u7528\u200bgedit\u200b\u7b49\u200b\u5de5\u5177\u200b\u6253\u5f00\u200b\u6587\u4ef6\u200b\uff0c\u200b\u4f1a\u200b\u53d1\u73b0\u200b\u6587\u4ef6\u200b\u662f\u200b\u52a0\u5bc6\u200b\u540e\u200b\u7684\u200b\u4e71\u7801\u200b\u3002<p></p> <p></p>Text Only<pre><code>$ file t1.py\nt1.py: Vim encrypted file data\n</code></pre> file\u200b\u547d\u4ee4\u200b\u67e5\u770b\u200b\u672a\u200b\u52a0\u5bc6\u200b\u6587\u4ef6\u200b:<p></p> <p></p>Text Only<pre><code>$ file t1.py\nt1.py: Python script, ASCII text executable\n</code></pre> \u200b\u89e3\u5bc6\u200b\uff1a \u200b\u8f93\u5165\u200b\u5bc6\u7801\u200b\u6253\u5f00\u200bt1.py\u200b\u6587\u4ef6\u200b\uff0c\u200b\u7136\u540e\u200b\u6267\u884c\u200b :X \u200b\u547d\u4ee4\u200b\u540e\u200b\uff0c\u200b\u63d0\u793a\u200b\u8f93\u5165\u200b\u5bc6\u7801\u200b\uff0c\u200b\u8fde\u7eed\u200b\u6309\u200b\u4e24\u6b21\u200b\u56de\u8f66\u200b\uff0c:wq \u200b\u4fdd\u5b58\u200b\u9000\u51fa\u200b\u3002 \u200b\u4f7f\u7528\u200bfile\u200b\u67e5\u770b\u200b\u89e3\u5bc6\u200b\u540e\u200b\u7684\u200b\u6587\u4ef6\u200b:<p></p> <p></p>Text Only<pre><code>Enter encryption key: \nEnter same key again:\n</code></pre> \u200b\u53c2\u8003\u200b\uff1ahttps://github.com/adrianlarion/wizardly-tips-vim#encrypt<p></p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E/Vim%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/#vim9script\u914d\u7f6e","title":"vim9script\u200b\u914d\u7f6e","text":"Text Only<pre><code>vim9script\n\n# basic setting\nset mouse=a\nset number\nset encoding=utf-8 fileencodings=ucs-bom,utf-8,cp936\n# Set shift width to 4 spaces.\nset shiftwidth=4\n# Set tab width to 4 columns.\nset tabstop=4\nset showcmd\n# autocomplete in ex mode, press tab \nset wildmenu\n\nset clipboard=unnamedplus\n\n# close quickfix list, such as after you excute :LspWorkspaceSymbols\n# :cclose\n# open quickfix list\n# :copen\n\n# goto previous place in jumps list, &lt;C-o&gt;, o mean : old\n# goto next place in jumps list, &lt;C-i&gt;\n\n# set xclip, Ctrl-C copy visual content to clipboard\n# vnoremap &lt;C-c&gt; :w !xclip -selection clipboard&lt;CR&gt;\n\n# ale\ng:ale_linters_explicit = 1\ng:ale_linters = {\n    'csh': ['shell'],\n    'python': ['flake8', 'mypy', 'pylint'],\n    'c': ['gcc', 'cppcheck'],\n    'cpp': ['gcc', 'cppcheck'],\n    'text': []\n}\n\ng:ale_completion_delay = 500\ng:ale_echo_delay = 20\ng:ale_lint_delay = 500\ng:ale_echo_msg_format = '[%linter%] %code: %%s'\ng:ale_lint_on_text_changed = 'normal'\ng:ale_lint_on_insert_leave = 1\ng:airline#extensions#ale#enabled = 1\ng:ale_c_gcc_options = '-Wall -O2 -std=c99'\ng:ale_cpp_gcc_options = '-Wall -O2 -std=c++11'\ng:ale_c_cppcheck_options = ''\ng:ale_cpp_cppcheck_options = ''\n\n# fzf, add to bashrc\n# export FZF_DEFAULT_COMMAND=\"fd --exclude={.git,.idea,.sass-cache,node_modules,build} --type f\"\n\n# Start NERDTree. If a file is specified, move the cursor to its window.\nautocmd StdinReadPre * let s:std_in=1\n# autocmd VimEnter * NERDTree | if argc() &gt; 0 || exists(\"s:std_in\") | wincmd p | endif\n\nnnoremap &lt;leader&gt;n :NERDTreeFocus&lt;CR&gt;\n# nnoremap &lt;C-n&gt; :NERDTree&lt;CR&gt;\nnnoremap &lt;C-t&gt; :NERDTreeToggle&lt;CR&gt;\nnnoremap &lt;C-f&gt; :NERDTreeFind&lt;CR&gt;\n\nnnoremap &lt;leader&gt;` :ter&lt;CR&gt;\n\n# lsp\nnnoremap &lt;leader&gt;gd :LspDefinition&lt;CR&gt;\nnnoremap &lt;leader&gt;ld :LspDeclaration&lt;CR&gt;\nnnoremap &lt;leader&gt;lh :LspHover&lt;CR&gt;\nnnoremap &lt;leader&gt;li :LspImplementation&lt;CR&gt;\nnnoremap &lt;leader&gt;ls :LspDocumentSymbol&lt;CR&gt;\nnnoremap &lt;leader&gt;lr :LspRename&lt;CR&gt;\nnnoremap &lt;leader&gt;lf :LspDocumentFormat&lt;CR&gt;\n\n# window resize\nnnoremap &lt;leader&gt;w+ :vertical resize +30&lt;CR&gt;\nnnoremap &lt;leader&gt;w- :vertical resize -30&lt;CR&gt;\nnnoremap &lt;leader&gt;r+ :resize +30&lt;CR&gt;\nnnoremap &lt;leader&gt;r- :resize -30&lt;CR&gt;\n\n# async run\nnnoremap &lt;F5&gt; :AsyncRun -mode=term -pos=gnome  ls -la&lt;CR&gt;\n# :AsyncRun -mode=term -pos=tmux  ls -la\n\n# lsp\ninoremap &lt;expr&gt; &lt;Tab&gt; pumvisible() ? \"\\&lt;C-n&gt;\" : \"\\&lt;Tab&gt;\"\ninoremap &lt;expr&gt; &lt;S-Tab&gt; pumvisible() ? \"\\&lt;C-p&gt;\" : \"\\&lt;S-Tab&gt;\"\ninoremap &lt;expr&gt; &lt;cr&gt; pumvisible() ? \"\\&lt;C-y&gt;\\&lt;cr&gt;\" : \"\\&lt;cr&gt;\"\n\n# snipt\n# \" If you want :UltiSnipsEdit to split your window.\ng:UltiSnipsEditSplit = \"vertical\"\n\n# mru\n# set max lenght for the mru file list\ng:mru_file_list_size = 7 \n# set path pattens that should be ignored\ng:mru_ignore_patterns = 'fugitive\\|\\.git/\\|\\_^/tmp/' \n\ncall plug#begin()\n\nPlug 'preservim/nerdtree', { 'on': 'NERDTreeToggle' }\n\n# fzf\nPlug 'junegunn/fzf', { 'do': { -&gt; fzf#install() } }\nPlug 'junegunn/fzf.vim'\n\n# c++\nPlug 'dense-analysis/ale'\n\nPlug 'terryma/vim-multiple-cursors'\n# Plug 'mg979/vim-visual-multi', {'branch': 'master'}\n\nPlug 'prabirshrestha/async.vim'\nPlug 'prabirshrestha/asyncomplete.vim'\nPlug 'prabirshrestha/vim-lsp'\nPlug 'prabirshrestha/asyncomplete-lsp.vim'\nPlug 'mattn/vim-lsp-settings'\n\nPlug 'rhysd/vim-lsp-ale'\n\n# theme\nPlug 'joshdick/onedark.vim'\nPlug 'itchyny/lightline.vim'\n\n# edit\nPlug 'tpope/vim-surround'\nPlug 'jiangmiao/auto-pairs'\n\n# async run\nPlug 'skywind3000/asyncrun.vim'\nPlug 'benmills/vimux'\n\n# recent files\nPlug 'lvht/mru'\n\n# ultisnips\nPlug 'SirVer/ultisnips'\nPlug 'thomasfaingnaert/vim-lsp-snippets'\nPlug 'thomasfaingnaert/vim-lsp-ultisnips'\n\ncall plug#end()\n\n# set colorschema\nsyntax on\ncolorscheme onedark\n</code></pre>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E/%E5%A6%82%E4%BD%95%E6%9B%B4%E6%96%B0neovim%E4%BB%A5%E5%8F%8A%E5%AE%89%E8%A3%85%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%AC/","title":"\u5982\u4f55\u200b\u66f4\u65b0\u200bneovim\u200b\u4ee5\u53ca\u200b\u5b89\u88c5\u200b\u6307\u5b9a\u200b\u7248\u672c\u200b.md","text":"<p>\u200b\u672c\u6587\u200b\u4ecb\u7ecd\u200b\u5982\u4f55\u200b\u66f4\u65b0\u200bneovim\u200b\u5230\u200b\u6700\u65b0\u200b\u7248\u672c\u200b\uff08dev\uff09\uff0c\u200b\u4ee5\u53ca\u200b\u5b89\u88c5\u200b\u6307\u5b9a\u200b\u7248\u672c\u200b\u7684\u200bneovim\u3002\u200b\u7531\u4e8e\u200bneovim\u200b\u7684\u200bdev\u200b\u7248\u672c\u200b\u6709\u200b\u5f88\u591a\u200bapi\u200b\u548c\u200b\u7279\u6027\u200b\u4e0e\u200bstable\u200b\u7248\u672c\u200b\u4e0d\u200b\u4e00\u6837\u200b\uff0c\u200b\u5982\u200bneovim 0.5\u200b\u7248\u672c\u200b\u4ee5\u540e\u200b\u7684\u200bundo file \u200b\u548c\u200bneovim 0.4\u200b\u7248\u672c\u200b\uff08\u200b\u4ee5\u53ca\u200bvim\uff09\u200b\u4e0d\u200b\u517c\u5bb9\u200b\uff0c\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u62a5\u9519\u200b\uff08 E824: Incompatible undo file: path-to-undo-file.\uff09pull 13973\u3002\u200b\u901a\u8fc7\u200b\u672c\u6587\u200b\u53ef\u4ee5\u200b\u65b9\u4fbf\u200b\u6211\u4eec\u200b\u4f53\u9a8c\u200bdev\u200b\u7248\u672c\u200b\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u91cd\u65b0\u5b89\u88c5\u200b\u5230\u200b\u6307\u5b9a\u200b\u7684\u200bstable\u200b\u7248\u672c\u200b\u3002</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E/%E5%A6%82%E4%BD%95%E6%9B%B4%E6%96%B0neovim%E4%BB%A5%E5%8F%8A%E5%AE%89%E8%A3%85%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%AC/#1-\u5b89\u88c5\u6700\u65b0\u7248\u672c\u7684neovim","title":"1. \u200b\u5b89\u88c5\u200b\u6700\u65b0\u200b\u7248\u672c\u200b\u7684\u200bneovim","text":"<ul> <li>\u200b\u6dfb\u52a0\u200b\u6e90\u200b</li> </ul> Text Only<pre><code># stable version\nsudo add-apt-repository ppa:neovim-ppa/stable\n\n# dev version\nsudo add-apt-repository ppa:neovim-ppa/unstable\n</code></pre> <ul> <li>\u200b\u66f4\u65b0\u200b\u6e90\u200b</li> </ul> Text Only<pre><code>sudo apt update\n\n# \u200b\u76f4\u63a5\u200b\u5b89\u88c5\u200b\u4e0d\u4f1a\u200b\u6210\u529f\u200b\uff0c\u200b\u4f1a\u200b\u63d0\u793a\u200b\n# \"The following packages have been kept back: ... \"\nsudo apt upgrade\n</code></pre> <ul> <li>\u200b\u5b89\u88c5\u200b</li> </ul> Text Only<pre><code>sudo apt-get install neovim\n</code></pre> <p>solve for kept back</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E/%E5%A6%82%E4%BD%95%E6%9B%B4%E6%96%B0neovim%E4%BB%A5%E5%8F%8A%E5%AE%89%E8%A3%85%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%AC/#2-\u5b89\u88c5\u6307\u5b9a\u7248\u672c\u7684neovim","title":"2. \u200b\u5b89\u88c5\u200b\u6307\u5b9a\u200b\u7248\u672c\u200b\u7684\u200bneovim","text":"<p>\u200b\u6211\u200b\u4e4b\u524d\u200b\u7684\u200bneovim\u200b\u7248\u672c\u200b\u662f\u200b0.4.4, \u200b\u6211\u200b\u81ea\u5df1\u200b\u7684\u200b\u914d\u7f6e\u200b\u4f7f\u7528\u200b\u4e86\u200bvim-startify\u200b\u63d2\u4ef6\u200b\uff0c\u200b\u5f53\u200b\u6211\u200b\u66f4\u65b0\u200b\u5230\u200bdev\u200b\u7248\u672c\u200b0.6\u200b\u4ee5\u540e\u200b\uff0c\u200b\u51fa\u73b0\u200b\u4e86\u200bundo file\u200b\u7684\u200b\u62a5\u9519\u200b\u3002\u200b\u4e3a\u4e86\u200b\u7a33\u5b9a\u6027\u200b\uff0c\u200b\u6211\u200b\u91cd\u65b0\u5b89\u88c5\u200b\u4e86\u200b0.4.4\u200b\u7248\u672c\u200b\u3002</p> <ul> <li>\u200b\u67e5\u770b\u200b\u6709\u200b\u54ea\u4e9b\u200bneovim\u200b\u7248\u672c\u200b</li> </ul> Text Only<pre><code>sudo apt install apt-show-versions \n\napt-show-versions -a neovim\n</code></pre> <ul> <li>\u200b\u5b89\u88c5\u200b\u67e5\u8be2\u200b\u7684\u200b\u7248\u672c\u200b</li> </ul> Text Only<pre><code>sudo apt-get install neovim=0.4.4-1~ubuntu20.04.1~ppa1\n</code></pre> <p>\u200b\u4ee5\u4e0a\u200b\u5c31\u662f\u200b\u5982\u4f55\u200b\u5b89\u88c5\u200b\u6307\u5b9a\u200b\u7684\u200bneovim\u200b\u7248\u672c\u200b\u7684\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u611f\u8c22\u60a8\u200b\u7684\u200b\u9605\u8bfb\u200b\u3002</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E/%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95vimscript%E7%A8%8B%E5%BA%8F/","title":"\u5982\u4f55\u200b\u8c03\u8bd5\u200bvimscript\u200b\u7a0b\u5e8f","text":"<p>\u200b\u5f53\u200b\u6211\u4eec\u200b\u4e3a\u200bvim\u200b\u6216\u8005\u200bnvim\u200b\u5199\u200b\u63d2\u4ef6\u200b\u65f6\u200b\uff0c\u200b\u9700\u8981\u200b\u7528\u5230\u200bvimscript\u200b\u8bed\u8a00\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u6211\u200b\u4ecb\u7ecd\u200b\u4e00\u4e0b\u200b\u8c03\u8bd5\u200b.vim\u200b\u6587\u4ef6\u200b\u7684\u200b\u65b9\u6cd5\u200b\u3002</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E/%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95vimscript%E7%A8%8B%E5%BA%8F/#\u521b\u5efavim-\u6587\u4ef6","title":"\u521b\u5efa\u200b.vim \u200b\u6587\u4ef6","text":"<p>\u200b\u9996\u5148\u200b\uff0c\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b my.vim \u200b\u6587\u4ef6\u200b\uff0c \u200b\u5e76\u4e14\u200b\u5c1d\u8bd5\u200b\u5199\u200b\u4e00\u4e9b\u200bvimscript\u200b\u4ee3\u7801\u200b\u3002 \u200b\u4f8b\u5982\u200b\uff1a</p> Text Only<pre><code>function Show(start, ...)\n  echohl Title\n  echo \"start is \" . a:start\n  echohl None\n  let index = 1\n  while index &lt;= a:0\n    echo \"  Arg \" . index . \" is \" . a:{index}\n    let index = index + 1\n  endwhile\nend\n</code></pre> <p>\u200b\u8fd9\u91cc\u200b\uff0c\u200b\u6211\u200b\u5199\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u51fd\u6570\u200b Show\uff0c\u200b\u8fd9\u4e2a\u200b\u51fd\u6570\u200b\u6700\u5c11\u200b\u8981\u4f20\u200b\u4e00\u4e2a\u200b\u53c2\u6570\u200bstart\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u52a8\u6001\u200b\u4f20\u5165\u200b\u591a\u4e2a\u200b\u53c2\u6570\u200b(\u200b\u52a8\u6001\u200b\u53c2\u6570\u200b\u7528\u200b\u2018\u2026\u2019\u200b\u8868\u793a\u200b)\u3002a:0\u200b\u8868\u793a\u200b\u6709\u200b\u51e0\u4e2a\u200b\u52a8\u6001\u200b\u53c2\u6570\u200b\uff0ca:1\u200b\u8868\u793a\u200b\u7b2c\u4e00\u4e2a\u200b\u52a8\u6001\u200b\u53c2\u6570\u200b\uff0ca:2\u200b\u8868\u793a\u200b\u7b2c\u4e8c\u4e2a\u200b\u52a8\u6001\u200b\u53c2\u6570\u200b\uff0c\u200b\u4ee5\u200b\u6b21\u200b\u7c7b\u63a8\u200b\u3002</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E/%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95vimscript%E7%A8%8B%E5%BA%8F/#\u6267\u884c\u4ee5\u53ca\u8fdb\u5165debug\u6a21\u5f0f","title":"\u6267\u884c\u200b\u4ee5\u53ca\u200b\u8fdb\u5165\u200bdebug\u200b\u6a21\u5f0f","text":"<p>vim\u200b\u6216\u8005\u200bneovim\u200b\u5e76\u4e0d\u77e5\u9053\u200b\u8fd9\u4e2a\u200bShow\u200b\u51fd\u6570\u200b\uff0c\u200b\u6240\u4ee5\u200b\u6211\u4eec\u200b\u5728\u200b\u8c03\u8bd5\u200b\u4e4b\u524d\u200b\uff0c\u200b\u5e94\u8be5\u200b\u5148\u200bsource\u200b\u8fd9\u4e2a\u200b\u6587\u4ef6\u200b\u3002\u200b\u5728\u200bvim\u200b\u4e0b\u200b\u547d\u4ee4\u884c\u200b\u6a21\u5f0f\u200b\uff08\u200b\u4ee5\u200b\u201d:\u201d\u200b\u8fdb\u5165\u200b\uff09\uff0c\u200b\u8f93\u5165\u200b\u201dsource my.vim\u201c\u3002\u200b\u7136\u540e\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u6267\u884c\u200bShow\u200b\u51fd\u6570\u200b\u4e86\u200b\u3002</p> <ul> <li>\u200b\u6b63\u5e38\u200b\u6267\u884c\u200b</li> </ul> <p></p>Text Only<pre><code>\uff1acall Show(\"hello\", \"aaa\", \"ccc\")\n</code></pre> + debug\u200b\u6267\u884c\u200b<p></p> Text Only<pre><code>: debug call Show(\"hello\", \"aaa\", \"ccc\")\n</code></pre> <p>\u200b\u4f7f\u7528\u200bdebug\u200b\u6a21\u5f0f\u200b\u7684\u200b\u65b9\u6cd5\u200b\u7c7b\u4f3c\u200b\u4e8e\u200bgdb\u200b\u7684\u200b\u4f7f\u7528\u200b\uff0c\u200b\u4f46\u662f\u200b\u4e5f\u200b\u6709\u200b\u4e00\u4e9b\u200b\u533a\u522b\u200b\u3002</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%AF%87/%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E/%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95vimscript%E7%A8%8B%E5%BA%8F/#debug\u6a21\u5f0f\u7684\u4f7f\u7528\u65b9\u6cd5","title":"debug\u200b\u6a21\u5f0f\u200b\u7684\u200b\u4f7f\u7528\u200b\u65b9\u6cd5","text":"<p>cont : \u200b\u4e00\u76f4\u200b\u6267\u884c\u200b\u5230\u200b\u65ad\u70b9\u200b\u5904\u200b\uff0c\u200b\u5982\u679c\u200b\u6ca1\u6709\u200b\u65ad\u70b9\u200b\u5219\u200b\u6267\u884c\u200b\u5b8c\u200b\u7a0b\u5e8f\u200b quit : \u200b\u505c\u6b62\u200b\u5f53\u524d\u200b\u6267\u884c\u200b\uff0c\u200b\u4f46\u200b\u4ecd\u4f1a\u200b\u5728\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u65ad\u70b9\u200b\u5904\u200b\u505c\u6b62\u200b step : \u200b\u6267\u884c\u200b\u5f53\u524d\u200b\u547d\u4ee4\u200b\u5e76\u200b\u5728\u200b\u5b8c\u6210\u200b\u540e\u200b\u8fd4\u56de\u200b\u8c03\u8bd5\u6a21\u5f0f\u200b next : \u200b\u548c\u200bstep\u200b\u76f8\u4f3c\u200b\uff0c\u200b\u4f46\u662f\u200b\u5b83\u4f1a\u200b\u8df3\u200b\u8fc7\u200b\u51fd\u6570\u8c03\u7528\u200b\uff0c\u200b\u4e0d\u200b\u8fdb\u5165\u200b\u51fd\u6570\u200b interrupt : \u200b\u7c7b\u4f3c\u200b\u4e8e\u200bquit\uff0c\u200b\u4f46\u200b\u8fd4\u56de\u200b\u5230\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u547d\u4ee4\u200b\u7684\u200b\u8c03\u8bd5\u6a21\u5f0f\u200b finish : \u200b\u5b8c\u6210\u200b\u5f53\u524d\u200b\u811a\u672c\u200b\u6216\u200b\u51fd\u6570\u200b\u5e76\u200b\u8fd4\u56de\u200b\u5230\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u547d\u4ee4\u200b\u7684\u200b\u8c03\u8bd5\u6a21\u5f0f\u200b </p> <ul> <li>\u200b\u6dfb\u52a0\u200b\u65ad\u70b9\u200b breakadd</li> </ul> Text Only<pre><code># \u200b\u4e3a\u200b\u51fd\u6570\u200b\u6dfb\u52a0\u200b\u65ad\u70b9\u200b\nbreakadd func [lineNumber] functionName\n# \u200b\u4e3a\u200b\u6587\u4ef6\u200b\u6dfb\u52a0\u200b\u65ad\u70b9\u200b\nbreakadd file [lineNumber] fileName\n# \u200b\u4e3a\u200b\u5f53\u524d\u200b\u6587\u4ef6\u200b\u7684\u200b\u5f53\u524d\u200b\u884c\u200b\u6dfb\u52a0\u200b\u65ad\u70b9\u200b\nbreakadd here\n</code></pre> <ul> <li>\u200b\u5220\u9664\u200b\u65ad\u70b9\u200b breakdel</li> </ul> Text Only<pre><code># \u200b\u4ece\u200b\u65ad\u70b9\u200b\u5217\u8868\u200b\u4e2d\u200b\u5220\u9664\u200b\u6307\u5b9a\u200bnumber\u200b\u7684\u200b\u65ad\u70b9\u200b\nbreakdel number\n# \u200b\u5220\u9664\u200b\u6240\u6709\u200b\u7684\u200b\u65ad\u70b9\u200b\nbreakdel *\n# \u200b\u5220\u9664\u200b\u51fd\u6570\u200b\u4e2d\u200b\u7684\u200b\u65ad\u70b9\u200b\nbreakdel func [lineNumber] functionName\n# \u200b\u5220\u9664\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u7684\u200b\u65ad\u70b9\u200b\nbreakdel file [lineNumber] fileName\n# \u200b\u5220\u9664\u200b\u5f53\u524d\u200b\u6587\u4ef6\u200b\u7684\u200b\u5f53\u524d\u200b\u884c\u200b\u7684\u200b\u65ad\u70b9\u200b\nbreakdel here\n</code></pre> <p>\u200b\u4ee5\u4e0a\u200b\u5c31\u662f\u200bdebug\u200b\u7684\u200b\u4f7f\u7528\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u8be6\u7ec6\u200b\u53c2\u8003\u200b\uff1a vim debug\u200b\u6587\u6863\u200b vim learn</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/QGIS%20%E4%BD%BF%E7%94%A8/","title":"Convert pyQt UI to python","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/QGIS%20%E4%BD%BF%E7%94%A8/#convert-pyqt-ui-to-python","title":"Convert pyQt UI to python","text":"Text Only<pre><code>pyuic5 input.ui -o output.py\n</code></pre> <p>convert gpkg file to shp file </p>Text Only<pre><code>ogr2ogr -f \"ESRI Shapefile\" output_folder input.gpkg \n</code></pre><p></p> <p>python shapely library and RTree</p> <p>\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u4f7f\u7528\u200bPython Rtree\u200b\u5e93\u200b\u8fdb\u884c\u200bRTree\u200b\u7a7a\u95f4\u200b\u7d22\u5f15\u200b\u7684\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u793a\u4f8b\u200b\u3002</p> <p>\u200b\u9996\u5148\u200b\uff0c\u200b\u9700\u8981\u200b\u5b89\u88c5\u200bRtree\u200b\u5e93\u200b\u3002\u200b\u4f7f\u7528\u200b\u4ee5\u4e0b\u200b\u547d\u4ee4\u200b\u5728\u200b\u63a7\u5236\u53f0\u200b\u4e2d\u200b\u5b89\u88c5\u200b\uff1a</p> Text Only<pre><code>pip install Rtree\n</code></pre> <p>\u200b\u5728\u200b\u4e0b\u9762\u200b\u7684\u200b\u793a\u4f8b\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b\u70b9\u200b\u6570\u636e\u200b\u96c6\u200b\u3002\u200b\u60a8\u200b\u9700\u8981\u200b\u5c06\u70b9\u200b\u5750\u6807\u200b\u4f5c\u4e3a\u200bx\u200b\u548c\u200by\u200b\u503c\u200b\u4f20\u9012\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u628a\u200b\u5b83\u4eec\u200b\u8f6c\u6362\u200b\u4e3a\u200bshapely\u200b\u5e93\u200b\u7684\u200bPoint\u200b\u5b9e\u4f8b\u200b\u3002\u200b\u793a\u4f8b\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u7684\u200b\u70b9\u200b\u662f\u4ece\u200bcsv\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u52a0\u8f7d\u200b\u7684\u200b\u3002</p> Python<pre><code>from rtree import index\nfrom shapely.geometry import Point\nimport csv\n\n# \u200b\u521b\u5efa\u200b\u7a7a\u95f4\u200b\u7d22\u5f15\u200b\nidx = index.Index()\n\n# \u200b\u4ece\u200bCSV\u200b\u6587\u4ef6\u200b\u52a0\u8f7d\u70b9\u200b\nwith open('points.csv') as csvfile:\n    points_reader = csv.reader(csvfile)\n    for id, row in enumerate(points_reader):\n        x, y = float(row[0]), float(row[1])\n        point = Point(x, y)\n        idx.insert(id, point.bounds)\n\n# \u200b\u67e5\u8be2\u200b\u70b9\u200b\nquery_point = Point(10, 10)\nresult_ids = list(idx.intersection(query_point.bounds))\n\n# \u200b\u5904\u7406\u7ed3\u679c\u200b\u70b9\u200bID\nfor id in result_ids:\n    print(f'Point {id} found')\n</code></pre> <p>\u200b\u5728\u200b\u4e0a\u9762\u200b\u7684\u200b\u4ee3\u7801\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u9996\u5148\u200b\u5bfc\u5165\u200b\u4e86\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u5e93\u200b\uff0c\u200b\u7136\u540e\u200b\u521b\u5efa\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200bRTree\u200b\u7d22\u5f15\u200bidx\u3002\u200b\u4f7f\u7528\u200bcsv\u200b\u8bfb\u53d6\u5668\u200b\u52a0\u8f7d\u70b9\u200b\u5750\u6807\u200b\uff0c\u200b\u8f6c\u6362\u200b\u4e3a\u200bShapely Point\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u5e76\u200b\u5c06\u200b\u5b83\u4eec\u200b\u6dfb\u52a0\u200b\u5230\u200bRtree\u200b\u7d22\u5f15\u200b\u4e2d\u200b\u3002</p> <p>\u200b\u4f7f\u7528\u200bShapely\u200b\u5e93\u4e2d\u200b\u7684\u200bPoint\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u67e5\u8be2\u200b\u70b9\u200bquery_point\u3002\u200b\u548c\u200b\u524d\u9762\u200b\u7684\u200b\u4ee3\u7801\u200b\u7c7b\u4f3c\u200b\uff0c\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200bShapely Point\u200b\u7684\u200b\u8fb9\u754c\u200b\u5c5e\u6027\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u67e5\u8be2\u200b\u8303\u56f4\u200b\uff0c\u200b\u5e76\u200b\u4f7f\u7528\u200bRtree\u200b\u7684\u200bintersection\u200b\u51fd\u6570\u200b\u627e\u5230\u200b\u4e0e\u200b\u67e5\u8be2\u200b\u8303\u56f4\u200b\u76f8\u4ea4\u200b\u7684\u200b\u5bf9\u8c61\u200b\u3002</p> <p>\u200b\u6700\u540e\u200b\uff0c\u200b\u5728\u200b\u904d\u5386\u200b\u7ed3\u679c\u200b\u7684\u200b\u70b9\u200bID\u200b\u65f6\u200b\uff0c\u200b\u8f93\u51fa\u200b\u7528\u4e8e\u200b\u6307\u793a\u200b\u8981\u7d20\u200b\u5df2\u200b\u627e\u5230\u200b\u7684\u200b\u6d88\u606f\u200b\u3002</p> <p>\u200b\u6ce8\u610f\u200b\uff0c\u200b\u4e0a\u9762\u200b\u7684\u200b\u793a\u4f8b\u200b\u53ea\u662f\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b\u6f14\u793a\u200b\uff0c\u200b\u56e0\u6b64\u200b\u4f7f\u7528\u200bcsv\u200b\u6587\u4ef6\u200b\u6765\u200b\u52a0\u8f7d\u70b9\u200b\u3002\u200b\u5728\u200b\u5b9e\u9645\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200bQGIS\u200b\u4e2d\u200b\u7684\u200b\u77e2\u91cf\u56fe\u200b\u5c42\u200b\u6216\u200b\u4f7f\u7528\u200b\u5176\u4ed6\u200b\u6280\u672f\u200b\u6765\u200b\u4ece\u200b\u6570\u636e\u5e93\u200b\u4e2d\u200b\u52a0\u8f7d\u200b\u7a7a\u95f4\u200b\u5bf9\u8c61\u200b\u3002</p> <p>\u200b\u7a7a\u95f4\u200b\u7d22\u5f15\u200b\u7b97\u6cd5\u200b\uff1aR\u200b\u6811\u200b\u6216\u200bQuadtree</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/blogs/","title":"Blogs","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/blogs/#other-blogs","title":"other blogs","text":"<p>http://senlinzhan.github.io/</p> <p>https://draveness.me/</p> <p>https://liu-jianhao.github.io/</p> <p>https://github.com/yanfeizhang/coder-kung-fu</p> <p>C++ \u200b\u5e76\u53d1\u200b\u7f16\u7a0b\u200b\uff08\u200b\u4ece\u200bC++11\u200b\u5230\u200bC++17\uff09</p> <p>C++ \u200b\u5185\u5b58\u200b\u6a21\u578b\u200b</p> <p>codedump</p> <p>fasterthanli</p> <p>https://liujiacai.net/</p> <p>https://blog.adamchalmers.com/</p> <p>https://hsqstephenzhang.github.io/</p> <p>https://www.ihcblog.com/</p> <p>https://youjiali1995.github.io/</p> <p>https://github.com/pymongo</p> <p>https://wanghenshui.github.io/</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/blogs/#\u65e0\u9501\u961f\u5217","title":"\u65e0\u9501\u200b\u961f\u5217","text":"<p>https://github.com/mutouyun/cpp-ipc</p> <p>https://www.cnblogs.com/gaochundong/p/lock_free_programming.html</p> <p>https://moodycamel.com/</p> <p>https://www.1024cores.net/home/scalable-architecture/case-study-actor-scheduler</p> <p>https://github.com/inkooboo/thread-pool-cpp</p> <p>https://www.cnblogs.com/shines77/p/4192787.html</p> <p>https://blog.nowcoder.net/raki7</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/blogs/#linux","title":"Linux","text":"<p>https://arthurchiao.art/</p> <p>http://lishiwen4.github.io/linux/vdso-and-syscall</p> <p>http://linuxperf.com/</p> <p>https://www.zhihu.com/people/lan-xin-yu</p> <p>http://www.wowotech.net/</p> <p>https://www.beikejiedeliulangmao.top/categories/Linux/page/2/</p> <p>http://husharp.today/tag/#Linux</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/blogs/#c","title":"C++","text":"<p>https://zsmj2017.tech/</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/windows%E4%B8%8B%E6%89%93%E5%8C%85exe%E6%96%87%E4%BB%B6%E6%8A%80%E6%B3%95/","title":"Windows\u200b\u4e0b\u200b\u6253\u5305\u200bexe\u200b\u6587\u4ef6\u200b\u6280\u6cd5","text":"<p>inno setip compiler</p> <p>\u200b\u6253\u5305\u200bexe\u200b\u6559\u7a0b\u200b</p> <p>\u200b\u75c5\u6bd2\u200b\u95ee\u9898\u200b\uff1a\u200b\u5c06\u200b\u538b\u7f29\u200b\u65b9\u6cd5\u200bcompression\u200b\u4ece\u200blzma\u200b\u6539\u4e3a\u200bzip</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E4%BB%98%E8%B4%B9%E8%8E%B7%E5%8F%96%E5%AF%86%E7%A0%81%E5%B9%B3%E5%8F%B0%E5%8E%9F%E7%90%86/","title":"\u4ed8\u8d39\u200b\u83b7\u53d6\u200b\u5bc6\u7801\u200b\u5e73\u53f0\u200b\u539f\u7406","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E4%BB%98%E8%B4%B9%E8%8E%B7%E5%8F%96%E5%AF%86%E7%A0%81%E5%B9%B3%E5%8F%B0%E5%8E%9F%E7%90%86/#\u4ed8\u8d39\u83b7\u53d6\u5bc6\u7801\u5e73\u53f0\u539f\u7406","title":"\u4ed8\u8d39\u200b\u83b7\u53d6\u200b\u5bc6\u7801\u200b\u5e73\u53f0\u200b\u539f\u7406","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E4%BB%98%E8%B4%B9%E8%8E%B7%E5%8F%96%E5%AF%86%E7%A0%81%E5%B9%B3%E5%8F%B0%E5%8E%9F%E7%90%86/#\u6545\u4e8b\u5f00\u59cb","title":"\u6545\u4e8b\u200b\u5f00\u59cb","text":"<p>\u200b\u5728\u200b\u7f51\u7edc\u200b\u4e0a\u200b\u627e\u200b\u4e00\u200b\u672c\u4e66\u200b\u7684\u200bpdf\uff0c\u200b\u901a\u8fc7\u200b\u4e00\u4e2a\u200b\u7f51\u5740\u200b\u627e\u5230\u200b\u4e86\u200b\u4e66\u7c4d\u200b\u5bf9\u5e94\u200b\u7684\u200b\u767e\u5ea6\u7f51\u200b\u76d8\u200b\u7684\u200bzip\u200b\u538b\u7f29\u5305\u200b</p> <p>\u200b\u5f00\u5fc3\u200b\u5f97\u200b\u4e0d\u5f97\u4e86\u200b\uff0c\u200b\u4ee5\u4e3a\u200b\u53ef\u4ee5\u200b\u767d\u200b\u5ad6\u200b\u4e86\u200bpdf\u200b\u4e86\u200b</p> <p>\u200b\u89e3\u538b\u200b\u4e66\u7c4d\u200b\uff0c\u200b\u91cc\u9762\u200b\u5305\u542b\u200b\u4e86\u200b\u4e00\u4e2a\u200bzip\u200b\u52a0\u5bc6\u200b\u538b\u7f29\u5305\u200b\uff08\u200b\u5305\u542b\u200b\u4e66\u7c4d\u200bpdf\uff09\uff0c\u200b\u4e00\u4e2a\u200btxt\u200b\u6587\u4ef6\u200b\uff08\u200b\u91cc\u9762\u200b\u5199\u200b\u4e86\u200b\u83b7\u53d6\u200b\u5bc6\u7801\u200b\u7684\u200b\u7f51\u5740\u200b\uff09</p> <p>\u200b\u539f\u6765\u200b\u662f\u200b\u8981\u200b\u53bb\u200b\u6307\u5b9a\u200b\u7f51\u5740\u200b\u652f\u4ed8\u200b\uff0c\u200b\u83b7\u53d6\u200b\u89e3\u538b\u5bc6\u7801\u200b\uff0c\u200b\u7136\u540e\u200b\u624d\u80fd\u200b\u83b7\u53d6\u200bpdf\u200b\u8d44\u6e90\u200b</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E4%BB%98%E8%B4%B9%E8%8E%B7%E5%8F%96%E5%AF%86%E7%A0%81%E5%B9%B3%E5%8F%B0%E5%8E%9F%E7%90%86/#\u83b7\u53d6\u5bc6\u7801\u5e73\u53f0\u7684\u539f\u7406","title":"\u83b7\u53d6\u200b\u5bc6\u7801\u200b\u5e73\u53f0\u200b\u7684\u200b\u539f\u7406","text":"<p>\u200b\u7f51\u5740\u200b\uff1ahttp://www.yiquma.com/?code=OrsmJ7b4yEmU212K</p> <ul> <li>\u200b\u5e73\u53f0\u200b\u652f\u6301\u200b\u5fae\u4fe1\u200b\u652f\u4ed8\u200b\u548c\u200b\u652f\u4ed8\u5b9d\u200b\u652f\u4ed8\u200b\uff0c\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e24\u79cd\u200b\u4e8c\u7ef4\u7801\u200b</li> <li>\u200b\u901a\u8fc7\u200burl\u200b\u4e2d\u200b\u7684\u200bcode\u200b\u4e0e\u200b\u6307\u5b9a\u200b\u4e66\u7c4d\u200b\u7ed1\u5b9a\u200b</li> <li>\u200b\u652f\u4ed8\u200b\u4ee5\u540e\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u5fae\u4fe1\u200b\u6216\u8005\u200b\u652f\u4ed8\u5b9d\u200b\u8fd4\u56de\u200b\u7684\u200b\u8ba2\u5355\u200b\u7f16\u53f7\u200b\uff0c\u200b\u67e5\u8be2\u200b\u5bc6\u7801\u200b</li> </ul> \u200b\u8868\u200b1 code \u200b\u6587\u4ef6\u540d\u200b \u200b\u5bc6\u7801\u200b \u200b\u8868\u200b2 \u200b\u8ba2\u5355\u200b\u7f16\u53f7\u200b code <p>\u200b\u8868\u200b1\u200b\u548c\u8868\u200b2\u200b\u662f\u200b\u4f5c\u8005\u200b\u731c\u6d4b\u200b\u7684\u200b\uff0c\u200b\u540e\u53f0\u200b\u901a\u8fc7\u200b\u8ba2\u5355\u200b\u7f16\u53f7\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u67e5\u8be2\u200b\u5bc6\u7801\u200b</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E5%8F%8C%E6%8B%BC%E4%BD%A0%E7%94%A8%E8%BF%87%E5%90%97/","title":"\u53cc\u62fc\u200b\u4f60\u200b\u7528\u200b\u8fc7\u200b\u5417","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E5%8F%8C%E6%8B%BC%E4%BD%A0%E7%94%A8%E8%BF%87%E5%90%97/#\u53cc\u62fc\u8f93\u5165\u6cd5","title":"\u53cc\u62fc\u200b\u8f93\u5165\u6cd5","text":"<p>\u200b\u53cc\u62fc\u200b\u8f93\u5165\u6cd5\u200b\u662f\u200b\u4e00\u79cd\u200b\u9ad8\u6548\u200b\u7684\u200b\u4e2d\u6587\u200b\u8f93\u5165\u6cd5\u200b\uff0c\u200b\u4e0b\u9762\u200b\u5217\u4e3e\u200b\u4e86\u200b\u5b66\u4e60\u200b\u53cc\u62fc\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u7684\u200b\u8d44\u6599\u200b\uff1a</p> <p>https://github.com/Yidadaa https://blog.simplenaive.cn/</p> <p>https://github.com/BlueSky-07 https://ihint.me/</p> <p>https://api.ihint.me/shuang/</p> <p>https://blog.simplenaive.cn/shuangpin/#/</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8%E7%9A%84%E5%89%8D%E8%BF%9B-%E5%9B%9E%E9%80%80%E6%8C%89%E9%92%AE%E9%80%BB%E8%BE%91/","title":"\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u6587\u4ef6\u200b\u7ba1\u7406\u5668\u200b\u7684\u200b\u524d\u8fdb\u200b/\u200b\u56de\u9000\u200b\u6309\u94ae\u200b\u903b\u8f91","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8%E7%9A%84%E5%89%8D%E8%BF%9B-%E5%9B%9E%E9%80%80%E6%8C%89%E9%92%AE%E9%80%BB%E8%BE%91/#\u5982\u4f55\u5b9e\u73b0\u6587\u4ef6\u7ba1\u7406\u5668\u7684\u524d\u8fdb\u56de\u9000\u6309\u94ae\u903b\u8f91","title":"\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u6587\u4ef6\u200b\u7ba1\u7406\u5668\u200b\u7684\u200b\u524d\u8fdb\u200b/\u200b\u56de\u9000\u200b\u6309\u94ae\u200b\u903b\u8f91","text":"<p>\u200b\u672c\u6587\u200b\u8bb0\u5f55\u200b\u5728\u200b\u4f7f\u7528\u200bc# winform\u200b\u5f00\u53d1\u200b\u65f6\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u7c7b\u4f3c\u200bwindows\u200b\u6587\u4ef6\u200b\u8d44\u6e90\u7ba1\u7406\u200b\u5668\u200b\u7684\u200b\u524d\u8fdb\u200b/\u200b\u56de\u9000\u200b\u6309\u94ae\u200b\u529f\u80fd\u200b\u3002</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8%E7%9A%84%E5%89%8D%E8%BF%9B-%E5%9B%9E%E9%80%80%E6%8C%89%E9%92%AE%E9%80%BB%E8%BE%91/#windows\u6587\u4ef6\u8d44\u6e90\u7ba1\u7406\u5668","title":"windows\u200b\u6587\u4ef6\u200b\u8d44\u6e90\u7ba1\u7406\u200b\u5668","text":"<ul> <li>\u200b\u6253\u5f00\u200b\u65f6\u200b\uff0c\u200b\u521d\u59cb\u72b6\u6001\u200b\u4e3a\u200bback_button(\u200b\u56de\u9000\u200b\u6309\u94ae\u200b) \u200b\u548c\u200b forward_button(\u200b\u524d\u8fdb\u200b\u6309\u94ae\u200b) \u200b\u90fd\u200b\u4e3a\u200b\u7981\u7528\u200b\u72b6\u6001\u200b;</li> <li>\u200b\u53cc\u51fb\u200b\u6253\u5f00\u200b\u6587\u4ef6\u5939\u200b\u540e\u200b\uff0cforward_button\u200b\u53d8\u4e3a\u200b\u7981\u7528\u200b\u72b6\u6001\u200b\uff08\u200b\u5982\u679c\u200b\u539f\u6765\u200b\u4e3a\u200b\u7981\u7528\u200b\uff0c\u200b\u5219\u200b\u4ecd\u7136\u200b\u4e3a\u200b\u7981\u7528\u200b\u72b6\u6001\u200b\uff09\uff0cback_button\u200b\u53d8\u4e3a\u200b\u53ef\u7528\u200b\u72b6\u6001\u200b;</li> <li>\u200b\u53ef\u4ee5\u200b\u4e00\u76f4\u200b\u53cc\u51fb\u200b\u6253\u5f00\u200b\u5f53\u524d\u200b\u6587\u4ef6\u5939\u200b\u7684\u200b\u5b50\u200b\u6587\u4ef6\u5939\u200b\uff0c\u200b\u53ea\u8981\u200b\u53cc\u51fb\u200b\u4e86\u200b\u6587\u4ef6\u5939\u200b\uff0cforward_button\u200b\u5c31\u200b\u53d8\u4e3a\u200b\u7981\u7528\u200b\u72b6\u6001\u200b;</li> <li>\u200b\u5355\u51fb\u200bback_button\u200b\u540e\u200b\uff0cforward_button\u200b\u53d8\u4e3a\u200b\u53ef\u7528\u200b\u72b6\u6001\u200b;</li> <li>\u200b\u8fde\u7eed\u200b\u5355\u51fb\u200bn\u200b\u6b21\u200bback_button\uff0c\u200b\u53ef\u4ee5\u200b\u8fde\u7eed\u200b\u5355\u51fb\u200bn\u200b\u6b21\u200bforward_button\uff0c\u200b\u7136\u540e\u200bforward_button\u200b\u53d8\u4e3a\u200b\u7981\u7528\u200b\u72b6\u6001\u200b;</li> <li>\u200b\u5355\u51fb\u200bwindows\u200b\u6587\u4ef6\u200b\u5bfc\u822a\u200b\u680f\u4e2d\u200b\u7684\u200b\u6309\u94ae\u200b\u540e\u200b\uff0cforward_button\u200b\u53d8\u4e3a\u200b\u7981\u7528\u200b\u72b6\u6001\u200b\u3002</li> </ul>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8%E7%9A%84%E5%89%8D%E8%BF%9B-%E5%9B%9E%E9%80%80%E6%8C%89%E9%92%AE%E9%80%BB%E8%BE%91/#\u601d\u8def","title":"\u601d\u8def","text":"<p>\u200b\u901a\u8fc7\u200b\u5206\u6790\u200bwindows\u200b\u6587\u4ef6\u200b\u8d44\u6e90\u7ba1\u7406\u200b\u5668\u200b\u7684\u200b\u70b9\u51fb\u200b\u73b0\u8c61\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5f97\u51fa\u200b\uff1a + \u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u4e00\u4e2a\u200bList\u200b\u4fdd\u5b58\u200b\u70b9\u51fb\u200b\u8fc7\u200b\u7684\u200b\u6587\u4ef6\u5939\u200b + \u200b\u4f7f\u7528\u200b\u4e00\u4e2a\u200bcurrentPos\u200b\u4fdd\u5b58\u200b\u5f53\u524d\u200b\u5904\u4e8e\u200b\u7684\u200b\u6587\u4ef6\u5939\u200b\u4f4d\u7f6e\u200b + \u200b\u4f7f\u7528\u200b\u4e00\u4e2a\u200blastPos\u200b\u4fdd\u5b58\u200b\u5f53\u524d\u200b\u5904\u4e8e\u200b\u7684\u200b\u6587\u4ef6\u5939\u200b\u4f4d\u7f6e\u200b\u7684\u200b\u4e0a\u200b\u4e00\u4e2a\u200b\u4f4d\u7f6e\u200b</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8%E7%9A%84%E5%89%8D%E8%BF%9B-%E5%9B%9E%E9%80%80%E6%8C%89%E9%92%AE%E9%80%BB%E8%BE%91/#\u903b\u8f91\u5b9e\u73b0","title":"\u903b\u8f91\u200b\u5b9e\u73b0","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8%E7%9A%84%E5%89%8D%E8%BF%9B-%E5%9B%9E%E9%80%80%E6%8C%89%E9%92%AE%E9%80%BB%E8%BE%91/#\u53cc\u51fb\u6587\u4ef6\u5939\u6216\u8005\u5355\u51fbwindows\u6587\u4ef6\u5bfc\u822a\u680f\u4e2d\u7684\u6309\u94ae","title":"\u53cc\u51fb\u200b\u6587\u4ef6\u5939\u200b\u6216\u8005\u200b\u5355\u51fb\u200bwindows\u200b\u6587\u4ef6\u200b\u5bfc\u822a\u200b\u680f\u4e2d\u200b\u7684\u200b\u6309\u94ae","text":"<ol> <li>\u200b\u5220\u9664\u200bcurrentPos\u200b\u4e4b\u540e\u200b\u7684\u200b\u6240\u6709\u200b\u8282\u70b9\u200b\u4fe1\u606f\u200b</li> </ol> Text Only<pre><code>list.RemoveRange(currentPos + 1, list.Count - 1 - currentPos);\n</code></pre> <ol> <li>\u200b\u5411\u200bList\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u6587\u4ef6\u5939\u200b\u8282\u70b9\u200b\u4fe1\u606f\u200b</li> </ol> Text Only<pre><code>list.Add(node);\ncurrentPos++;\nif\uff08\uff01isFirst\uff09{\n  lastPos++;\n}\n</code></pre> <ol> <li>\u200b\u7981\u7528\u200bforward_button</li> </ol> Text Only<pre><code>this.forward_button.Enabled = false;\n</code></pre>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8%E7%9A%84%E5%89%8D%E8%BF%9B-%E5%9B%9E%E9%80%80%E6%8C%89%E9%92%AE%E9%80%BB%E8%BE%91/#\u5355\u51fbback_button","title":"\u5355\u51fb\u200bback_button","text":"<ol> <li>\u200b\u83b7\u53d6\u200bback_button\u200b\u70b9\u51fb\u200b\u540e\u200b\u5f97\u5230\u200b\u7684\u200b\u6587\u4ef6\u5939\u200b\u8282\u70b9\u200b\u4fe1\u606f\u200b</li> </ol> Text Only<pre><code>if (currentPos &gt; 0)\n  {\n      this.forward_button.Enabled = true;\n\n      currentPos--;\n      var node = list[currentPos];\n      lastPos--;\n\n      if (currentPos == 0)\n      {\n          this.back_button.Enabled = false;\n      }\n\n      return node;\n  }\n</code></pre>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8%E7%9A%84%E5%89%8D%E8%BF%9B-%E5%9B%9E%E9%80%80%E6%8C%89%E9%92%AE%E9%80%BB%E8%BE%91/#\u5355\u51fbforward_button","title":"\u5355\u51fb\u200bforward_button","text":"<ol> <li>\u200b\u83b7\u53d6\u200bforward_button\u200b\u70b9\u51fb\u200b\u540e\u200b\u5f97\u5230\u200b\u7684\u200b\u6587\u4ef6\u5939\u200b\u8282\u70b9\u200b\u4fe1\u606f\u200b</li> </ol> Text Only<pre><code>if (currentPos &lt; list.Count - 1)\n  {\n      lastPos++;\n      currentPos++;\n      if (currentPos == list.Count - 1)\n      {\n          this.forward_button.Enabled = false;\n      }\n\n      if (currentPos != 0)\n      {\n          this.back_button.Enabled = true;\n      }\n\n      return list[currentPos];\n  }\n</code></pre> <p>\u200b\u4ee5\u4e0a\u200b\u5c31\u662f\u200b\u5bf9\u200bwindows\u200b\u6587\u4ef6\u200b\u8d44\u6e90\u7ba1\u7406\u200b\u5668\u200b\u524d\u8fdb\u200b/\u200b\u56de\u9000\u200b\u6309\u94ae\u200b\u529f\u80fd\u200b\u7684\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u4f46\u662f\u200b\u6b64\u200b\u65b9\u6cd5\u200b\u4ec5\u4ec5\u200b\u662f\u200b\u4f5c\u8005\u200b\u89c2\u5bdf\u200b\u4e86\u200bwindows\u200b\u6587\u4ef6\u200b\u8d44\u6e90\u7ba1\u7406\u200b\u5668\u540e\u200b\u7684\u200b\u5b9e\u73b0\u200b\u65b9\u6cd5\u200b\u3002\u200b\u5fae\u8f6f\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u6b64\u200b\u529f\u80fd\u200b\u7684\u200b\uff0c\u200b\u8fd8\u200b\u9700\u8981\u200b\u8fdb\u4e00\u6b65\u200b\u67e5\u770b\u200b\u8d44\u6599\u200b\u4e86\u89e3\u200b\u3002</p> <p>\u200b\u4e0b\u200b\u4e00\u6b65\u200b\u5de5\u4f5c\u200b\uff1a\u200b\u67e5\u770b\u200b\u5fae\u8f6f\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200bwindows\u200b\u6587\u4ef6\u200b\u8d44\u6e90\u7ba1\u7406\u200b\u5668\u200b\u524d\u8fdb\u200b/\u200b\u56de\u9000\u200b\u903b\u8f91\u200b\u3002</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/Algorithm/ExamRoom/","title":"ExamRoom","text":"<p>```c++  #include </p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/Algorithm/ExamRoom/#include","title":"include","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/Algorithm/ExamRoom/#include_1","title":"include","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/Algorithm/ExamRoom/#include_2","title":"include","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/Algorithm/ExamRoom/#include_3","title":"include","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/Algorithm/ExamRoom/#include_4","title":"include","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/Algorithm/ExamRoom/#include_5","title":"include","text":"<p>using namespace std;</p> <p>class ExamRoom { public:     using CmpFunctionType = bool (*)(pair, pair);     unordered_map&gt; leftIntervalMap;     unordered_map&gt; rightIntervalMap;</p> Text Only<pre><code>set&lt;pair&lt;int, int&gt;&gt; pq;\nint N;\n</code></pre> <p>private:</p> Text Only<pre><code>void addInterval(pair&lt;int, int&gt; interval) {\n    pq.insert(interval);\n    leftIntervalMap[interval.first] = interval;\n    rightIntervalMap[interval.second] = interval;\n}\n\nvoid removeInterval(pair&lt;int, int&gt; interval) {\n    pq.erase(interval);\n    leftIntervalMap.erase(interval.first);\n    rightIntervalMap.erase(interval.second);\n}\n\nint distance(pair&lt;int, int&gt; interval) {\n    int x = interval.first;\n    int y = interval.second;\n    if (x == -1) {\n        return y;\n    }\n    if (y == N) {\n        return N - x - 1;\n    }\n    return (y - x) / 2;\n}\n</code></pre> <p>public:     ExamRoom(int n) {         this-&gt;N = n;         auto cmp = this {             auto distA = distance(a);             auto distB = distance(b);             if (distA == distB) {                 return a.first &gt; b.second;             }</p> Text Only<pre><code>        return distA &lt; distB;\n        return true;\n    };\n    pq = set&lt;pair&lt;int, int&gt;, decltype(cmp)&gt;(cmp);\n\n    auto mPair = std::make_pair(-1, n);\n    addInterval(mPair);\n}\n\nint seat() {\n    auto longest = *pq.rbegin();\n    int x = longest.first;\n    int y = longest.second;\n\n    int seat = 0;\n    if (x == -1) {\n        seat = 0;\n    } else if (y == N) {\n        seat = N - 1;\n    } else {\n        seat = (y - x) / 2 + x;\n    }\n\n    auto left = std::make_pair(x, seat);\n    auto right = std::make_pair(seat, y);\n    removeInterval(longest);\n    addInterval(left);\n    addInterval(right);\n    return seat;\n}\n\nvoid leave(int p) {\n    auto left = leftIntervalMap[p];\n    auto right = rightIntervalMap[p];\n\n    auto merged = std::make_pair(left.first, right.second);\n    removeInterval(left);\n    removeInterval(right);\n    addInterval(merged);\n}\n</code></pre> <p>};</p> <p>/  * Your ExamRoom object will be instantiated and called as such:  * ExamRoom obj = new ExamRoom(n);  * int param_1 = obj-&gt;seat();  * obj-&gt;leave(p);  / int main() {     printf(\u201chello world n\u201c);</p> <p>}  ```</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/Algorithm/LRU/","title":"LRU","text":"C++<pre><code>#include &lt;iostream&gt;\n#include &lt;list&gt;\n#include &lt;utility&gt;\n#include &lt;vector&gt;\n#include &lt;unordered_map&gt;\n#include &lt;memory&gt;\n\nusing namespace std;\n\nclass LRUCache {\n\npublic:\n    unordered_map&lt;int, list&lt;pair&lt;int, int&gt;&gt;::iterator&gt; keyToVal{};\n    list&lt;pair&lt;int, int&gt;&gt; Cache{};\n    int cap;\npublic:\n    explicit LRUCache(int _cap) : cap(_cap) {\n\n    }\n\n    int get(int key) {\n        if (keyToVal.find(key) == keyToVal.end()) {\n            return -1;\n        }\n        auto val = keyToVal.at(key)-&gt;second;\n        makeRecently(key);\n        return val;\n    }\n\n\n    void put(int key, int val) {\n        if (keyToVal.find(key) != keyToVal.end()) {\n            deleteKey(key);\n            addRecently(key, val);\n            return;\n        }\n\n        if (keyToVal.size() &gt;= cap) {\n            removeLeastUsage();\n        }\n\n        addRecently(key, val);\n    }\n\nprivate:\n\n    void makeRecently(int key) {\n        auto node = *keyToVal.at(key);\n        Cache.erase(keyToVal.at(key));\n        Cache.push_front(node);\n        keyToVal[key] = Cache.begin();\n    }\n\n    void addRecently(int key, int val) {\n        auto node = std::make_pair(key, val);\n        Cache.push_front(node);\n        keyToVal[key] = Cache.begin();\n    }\n\n    void removeLeastUsage() {\n        auto key = Cache.back().first;\n        keyToVal.erase(key);\n        Cache.pop_back();\n    }\n\n    void deleteKey(int key) {\n        auto node = keyToVal.at(key);\n        Cache.erase(node);\n        keyToVal.erase(key);\n    }\n};\n\n\nint main() {\n    std::cout &lt;&lt; \"Hello, World!\" &lt;&lt; std::endl;\n    LRUCache lRUCache(2);\n    lRUCache.put(1, 1); // \u200b\u7f13\u5b58\u200b\u662f\u200b {1=1}\n    lRUCache.put(2, 2); // \u200b\u7f13\u5b58\u200b\u662f\u200b {1=1, 2=2}\n    auto res = lRUCache.get(1);    // \u200b\u8fd4\u56de\u200b 1\n    lRUCache.put(3, 3); // \u200b\u8be5\u200b\u64cd\u4f5c\u200b\u4f1a\u200b\u4f7f\u5f97\u200b\u5173\u952e\u5b57\u200b 2 \u200b\u4f5c\u5e9f\u200b\uff0c\u200b\u7f13\u5b58\u200b\u662f\u200b {1=1, 3=3}\n    res = lRUCache.get(2);    // \u200b\u8fd4\u56de\u200b -1 (\u200b\u672a\u627e\u5230\u200b)\n    lRUCache.put(4, 4); // \u200b\u8be5\u200b\u64cd\u4f5c\u200b\u4f1a\u200b\u4f7f\u5f97\u200b\u5173\u952e\u5b57\u200b 1 \u200b\u4f5c\u5e9f\u200b\uff0c\u200b\u7f13\u5b58\u200b\u662f\u200b {4=4, 3=3}\n    res = lRUCache.get(1);    // \u200b\u8fd4\u56de\u200b -1 (\u200b\u672a\u627e\u5230\u200b)\n    res = lRUCache.get(3);    // \u200b\u8fd4\u56de\u200b 3\n    res = lRUCache.get(4);    // \u200b\u8fd4\u56de\u200b 4\n    return 0;\n}\n</code></pre>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/Algorithm/%E5%89%8D%E7%BC%80%E6%A0%91/","title":"\u524d\u7f00\u200b\u6811","text":"C++<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;unordered_map&gt;\n#include &lt;memory&gt;\n\ntemplate&lt;typename V&gt;\nclass TrieMap {\n\npublic:\n\n    class Option {\n    public:\n        V val{};\n        bool isNone = true;\n    };\n\nprivate:\n    class TrieNode {\n    public:\n        Option option;\n        std::unordered_map&lt;char, std::shared_ptr&lt;TrieNode&gt;&gt; children;\n    };\n\npublic:\n    /***** \u200b\u589e\u200b/\u200b\u6539\u200b *****/\n\n    // \u200b\u5728\u200b Map \u200b\u4e2d\u200b\u6dfb\u52a0\u200b key\n    void put(const std::string &amp;key, V val) {\n        if (!containsKey(key)) {\n            word_size++;\n        }\n\n        root = putImpl(root, key, val, 0);\n    }\n\n    /***** \u200b\u5220\u200b *****/\n\n    // \u200b\u5220\u9664\u200b\u952e\u200b key \u200b\u4ee5\u53ca\u200b\u5bf9\u5e94\u200b\u7684\u200b\u503c\u200b\n    void remove(const std::string &amp;key) {\n        if (!containsKey(key)) {\n            return;\n        }\n\n        root = removeImpl(root, key, 0);\n\n        word_size--;\n    }\n\n    /***** \u200b\u67e5\u200b *****/\n\n    // \u200b\u641c\u7d22\u200b key \u200b\u5bf9\u5e94\u200b\u7684\u200b\u503c\u200b\uff0c\u200b\u4e0d\u200b\u5b58\u5728\u200b\u5219\u200b\u8fd4\u56de\u200b null\n    // get(\"the\") -&gt; 4\n    // get(\"tha\") -&gt; null\n    TrieMap::Option get(const std::string &amp;key) {\n        auto x = getNode(root, key);\n        if (x == nullptr || x-&gt;option.isNone) {\n            TrieMap::Option tmp;\n\n            return tmp;\n        }\n\n        return x-&gt;option;\n    }\n\n    // \u200b\u5224\u65ad\u200b key \u200b\u662f\u5426\u200b\u5b58\u5728\u200b\u5728\u200b Map \u200b\u4e2d\u200b\n    // containsKey(\"tea\") -&gt; false\n    // containsKey(\"team\") -&gt; true\n    bool containsKey(const std::string &amp;key) {\n        return !get(key).isNone;\n    }\n\n    // \u200b\u5728\u200b Map \u200b\u7684\u200b\u6240\u6709\u200b\u952e\u4e2d\u200b\u641c\u7d22\u200b query \u200b\u7684\u200b\u6700\u200b\u77ed\u200b\u524d\u7f00\u200b\n    // shortestPrefixOf(\"themxyz\") -&gt; \"the\"\n    std::string shortestPrefixOf(const std::string &amp;query) {\n        auto p = root;\n        int i = 0;\n        for (auto ch: query) {\n            if (!p-&gt;children.count(ch)) {\n                return \"\";\n            }\n\n            if (!p-&gt;option.isNone) {\n                return query.substr(0, i);\n            }\n\n            p = p-&gt;children[ch];\n            i++;\n        }\n\n        if (p != nullptr &amp;&amp; !p-&gt;option.isNone) {\n            return query;\n        }\n\n        return \"\";\n\n    }\n\n    // \u200b\u5728\u200b Map \u200b\u7684\u200b\u6240\u6709\u200b\u952e\u4e2d\u200b\u641c\u7d22\u200b query \u200b\u7684\u200b\u6700\u957f\u200b\u524d\u7f00\u200b\n    // longestPrefixOf(\"themxyz\") -&gt; \"them\"\n    std::string longestPrefixOf(const std::string &amp;query) {\n        int max_len = 0;\n        auto p = root;\n        int i = 0;\n        for (auto ch: query) {\n            if (!p-&gt;children.count(ch)) {\n                return \"\";\n            }\n\n            if (!p-&gt;option.isNone) {\n                max_len = i;\n            }\n\n            p = p-&gt;children[ch];\n            i++;\n        }\n\n        if (p != nullptr &amp;&amp; !p-&gt;option.isNone) {\n            return query;\n        }\n\n        return query.substr(0, max_len);\n    }\n\n    // \u200b\u641c\u7d22\u200b\u6240\u6709\u200b\u524d\u7f00\u200b\u4e3a\u200b prefix \u200b\u7684\u200b\u952e\u200b\n    // keysWithPrefix(\"th\") -&gt; [\"that\", \"the\", \"them\"]\n    std::vector&lt;std::string&gt; keysWithPrefix(const std::string &amp;prefix) {\n        std::vector&lt;std::string&gt; res{};\n\n        auto x = getNode(root, prefix);\n\n        if (x == nullptr) {\n            return res;\n        }\n\n        traverse(x, prefix, res);\n        return res;\n\n    }\n\n    // \u200b\u5224\u65ad\u200b\u662f\u200b\u548c\u200b\u5426\u200b\u5b58\u5728\u200b\u524d\u7f00\u200b\u4e3a\u200b prefix \u200b\u7684\u200b\u952e\u200b\n    // hasKeyWithPrefix(\"tha\") -&gt; true\n    // hasKeyWithPrefix(\"apple\") -&gt; false\n    bool hasKeyWithPrefix(const std::string &amp;prefix) {\n        return getNode(root, prefix) != nullptr;\n    }\n\n    // \u200b\u901a\u914d\u7b26\u200b . \u200b\u5339\u914d\u200b\u4efb\u610f\u200b\u5b57\u7b26\u200b\uff0c\u200b\u641c\u7d22\u200b\u6240\u6709\u200b\u5339\u914d\u200b\u7684\u200b\u952e\u200b\n    // keysWithPattern(\"t.a.\") -&gt; [\"team\", \"that\"]\n    std::vector&lt;std::string&gt; keysWithPattern(const std::string &amp;pattern) {\n        std::vector&lt;std::string&gt; res{};\n        traversePattern(root, \"\", pattern, 0, res);\n        return res;\n    }\n\n    // \u200b\u901a\u914d\u7b26\u200b . \u200b\u5339\u914d\u200b\u4efb\u610f\u200b\u5b57\u7b26\u200b\uff0c\u200b\u5224\u65ad\u200b\u662f\u5426\u200b\u5b58\u5728\u200b\u5339\u914d\u200b\u7684\u200b\u952e\u200b\n    // hasKeyWithPattern(\".ip\") -&gt; true\n    // hasKeyWithPattern(\".i\") -&gt; false\n    bool hasKeyWithPattern(const std::string &amp;pattern) {\n        return hasKeyWithPatternImpl(root, pattern, 0);\n    }\n\n    // \u200b\u8fd4\u56de\u200b Map \u200b\u4e2d\u200b\u952e\u503c\u200b\u5bf9\u200b\u7684\u200b\u6570\u91cf\u200b\n    int size() {\n        return word_size;\n    }\n\n\nprivate:\n    std::shared_ptr&lt;TrieNode&gt; getNode(std::shared_ptr&lt;TrieNode&gt; node, const std::string &amp;key) {\n        auto p = node;\n\n        if (node == nullptr) {\n            return nullptr;\n        }\n\n        for (auto ch: key) {\n            if (!p-&gt;children.count(ch)) {\n                return nullptr;\n            }\n\n            p = p-&gt;children[ch];\n        }\n\n        return p;\n    }\n\n\n    void traverse(std::shared_ptr&lt;TrieNode&gt; node, std::string path, std::vector&lt;std::string&gt; &amp;res) {\n        if (node == nullptr) {\n            return;\n        }\n\n        if (!node-&gt;option.isNone) {\n            res.push_back(path);\n        }\n\n        for (const auto &amp;item: node-&gt;children) {\n            path.push_back(item.first);\n            traverse(item.second, path, res);\n            path.erase(path.end());\n        }\n    }\n\n    void traversePattern(std::shared_ptr&lt;TrieNode&gt; node, std::string path, const std::string &amp;pattern, int i,\n                         std::vector&lt;std::string&gt; &amp;res) {\n        if (node == nullptr) {\n            return;\n        }\n\n        if (i == pattern.length()) {\n            if (!node-&gt;option.isNone) {\n                res.push_back(path);\n            }\n            return;\n        }\n\n        char c = pattern[i];\n\n        if (c == '.') {\n            for (const auto &amp;item: node-&gt;children) {\n                path.push_back(item.first);\n                traversePattern(item.second, path, pattern, i + 1, res);\n                path.erase(path.end());\n            }\n        } else {\n            path.push_back(c);\n            traversePattern(node-&gt;children[c], path, pattern, i + 1, res);\n            path.erase(path.end());\n        }\n    }\n\n    bool hasKeyWithPatternImpl(std::shared_ptr&lt;TrieNode&gt; node, std::string pattern, int i) {\n        if (node == nullptr) {\n            return false;\n        }\n\n        if (i == pattern.length()) {\n            return !node-&gt;option.isNone;\n        }\n\n        char c = pattern[i];\n        if (c != '.') {\n            return hasKeyWithPatternImpl(node-&gt;children[c], pattern, i + 1);\n        }\n\n        for (const auto &amp;item: node-&gt;children) {\n            if (hasKeyWithPatternImpl(item.second, pattern, i + 1)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    std::shared_ptr&lt;TrieNode&gt; putImpl(std::shared_ptr&lt;TrieNode&gt; node, const std::string &amp;key, V val, int i) {\n        if (node == nullptr) {\n            node = std::make_shared&lt;TrieNode&gt;();\n        }\n\n        if (i == key.length()) {\n            node-&gt;option.isNone = false;\n            node-&gt;option.val = val;\n            return node;\n        }\n\n        char c = key[i];\n\n        node-&gt;children[c] = putImpl(node-&gt;children[c], key, val, i + 1);\n        return node;\n    }\n\n\n    std::shared_ptr&lt;TrieNode&gt; removeImpl(std::shared_ptr&lt;TrieNode&gt; node, const std::string &amp;key, int i) {\n        if (node == nullptr) {\n            return nullptr;\n        }\n\n        if (i == key.length()) {\n            node-&gt;option.isNone = true;\n        } else {\n            char c = key[i];\n            node-&gt;children[c] = removeImpl(node-&gt;children[c], key, i++);\n        }\n\n\n        if (!node-&gt;option.isNone) {\n            return node;\n        }\n\n        for (auto item: node-&gt;children) {\n            return node;\n        }\n\n        return nullptr;\n    }\n\nprivate:\n    int word_size = 0;\n    std::shared_ptr&lt;TrieNode&gt; root{};\n};\n\nclass TrieSet {\n    // \u200b\u5e95\u5c42\u200b\u7528\u200b\u4e00\u4e2a\u200b TrieMap\uff0c\u200b\u952e\u200b\u5c31\u662f\u200b TrieSet\uff0c\u200b\u503c\u200b\u4ec5\u4ec5\u200b\u8d77\u5230\u200b\u5360\u4f4d\u200b\u7684\u200b\u4f5c\u7528\u200b\n    // \u200b\u503c\u200b\u7684\u200b\u7c7b\u578b\u200b\u53ef\u4ee5\u200b\u968f\u4fbf\u200b\u8bbe\u7f6e\u200b\uff0c\u200b\u6211\u200b\u53c2\u8003\u200b Java \u200b\u6807\u51c6\u200b\u5e93\u200b\u8bbe\u7f6e\u200b\u6210\u200b Object\nprivate:\n    TrieMap&lt;int&gt; map{};\n\n    /***** \u200b\u589e\u200b *****/\n\n    // \u200b\u5728\u200b\u96c6\u5408\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u5143\u7d20\u200b key\npublic:\n    void add(const std::string &amp;key) {\n        map.put(key, -1);\n    }\n\n    /***** \u200b\u5220\u200b *****/\n\n    // \u200b\u4ece\u200b\u96c6\u5408\u200b\u4e2d\u200b\u5220\u9664\u200b\u5143\u7d20\u200b key\n    void remove(const std::string &amp;key) {\n        map.remove(key);\n    }\n\n    /***** \u200b\u67e5\u200b *****/\n\n    // \u200b\u5224\u65ad\u200b\u5143\u7d20\u200b key \u200b\u662f\u5426\u200b\u5b58\u5728\u200b\u96c6\u5408\u200b\u4e2d\u200b\n    bool contains(const std::string &amp;key) {\n        return map.containsKey(key);\n    }\n\n    // \u200b\u5728\u200b\u96c6\u5408\u200b\u4e2d\u200b\u5bfb\u627e\u200b query \u200b\u7684\u200b\u6700\u200b\u77ed\u200b\u524d\u7f00\u200b\n    std::string shortestPrefixOf(const std::string &amp;query) {\n        return map.shortestPrefixOf(query);\n    }\n\n    // \u200b\u5728\u200b\u96c6\u5408\u200b\u4e2d\u200b\u5bfb\u627e\u200b query \u200b\u7684\u200b\u6700\u957f\u200b\u524d\u7f00\u200b\n    std::string longestPrefixOf(const std::string &amp;query) {\n        return map.longestPrefixOf(query);\n    }\n\n    // \u200b\u5728\u200b\u96c6\u5408\u200b\u4e2d\u200b\u641c\u7d22\u200b\u524d\u7f00\u200b\u4e3a\u200b prefix \u200b\u7684\u200b\u6240\u6709\u200b\u5143\u7d20\u200b\n    std::vector&lt;std::string&gt; keysWithPrefix(const std::string &amp;prefix) {\n        return map.keysWithPrefix(prefix);\n    }\n\n    // \u200b\u5224\u65ad\u200b\u96c6\u5408\u200b\u4e2d\u200b\u662f\u5426\u200b\u5b58\u5728\u200b\u524d\u7f00\u200b\u4e3a\u200b prefix \u200b\u7684\u200b\u5143\u7d20\u200b\n    bool hasKeyWithPrefix(const std::string &amp;prefix) {\n        return map.hasKeyWithPrefix(prefix);\n    }\n\n    // \u200b\u901a\u914d\u7b26\u200b . \u200b\u5339\u914d\u200b\u4efb\u610f\u200b\u5b57\u7b26\u200b\uff0c\u200b\u8fd4\u56de\u200b\u96c6\u5408\u200b\u4e2d\u200b\u5339\u914d\u200b pattern \u200b\u7684\u200b\u6240\u6709\u200b\u5143\u7d20\u200b\n    std::vector&lt;std::string&gt; keysWithPattern(const std::string &amp;pattern) {\n        return map.keysWithPattern(pattern);\n    }\n\n    // \u200b\u901a\u914d\u7b26\u200b . \u200b\u5339\u914d\u200b\u4efb\u610f\u200b\u5b57\u7b26\u200b\uff0c\u200b\u5224\u65ad\u200b\u96c6\u5408\u200b\u4e2d\u200b\u662f\u5426\u200b\u5b58\u5728\u200b\u5339\u914d\u200b pattern \u200b\u7684\u200b\u5143\u7d20\u200b\n    bool hasKeyWithPattern(const std::string &amp;pattern) {\n        return map.hasKeyWithPattern(pattern);\n    }\n\n    // \u200b\u8fd4\u56de\u200b\u96c6\u5408\u200b\u4e2d\u200b\u5143\u7d20\u200b\u7684\u200b\u4e2a\u6570\u200b\n    int size() {\n        return map.size();\n    }\n};\n\n\nclass Trie {\npublic:\n    Trie() {\n\n    }\n\n    TrieSet mSet;\n\n\n    void insert(std::string word) {\n        mSet.add(word);\n    }\n\n    bool search(std::string word) {\n        return mSet.contains(word);\n    }\n\n    bool startsWith(std::string prefix) {\n        return mSet.hasKeyWithPrefix(prefix);\n    }\n\n};\n\nint main() {\n    printf(\"hello world \\n\");\n\n    Trie trie;\n    trie.insert(\"apple\");\n    auto res = trie.search(\"apple\");   // \u200b\u8fd4\u56de\u200b True\n    std::cout &lt;&lt; res &lt;&lt; std::endl;\n    res = trie.search(\"app\");     // \u200b\u8fd4\u56de\u200b False\n    std::cout &lt;&lt; res &lt;&lt; std::endl;\n    res = trie.startsWith(\"app\"); // \u200b\u8fd4\u56de\u200b True\n    std::cout &lt;&lt; res &lt;&lt; std::endl;\n    trie.insert(\"app\");\n    res = trie.search(\"app\");     // \u200b\u8fd4\u56de\u200b True\n    std::cout &lt;&lt; res &lt;&lt; std::endl;\n}\n</code></pre>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/Algorithm/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/","title":"\u5355\u8c03\u200b\u961f\u5217","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/Algorithm/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/#\u5355\u8c03\u961f\u5217c\u5b9e\u73b0","title":"\u5355\u8c03\u200b\u961f\u5217\u200bc++\u200b\u5b9e\u73b0","text":"<p>\u200b\u5355\u8c03\u200b\u961f\u5217\u200b\u4e2d\u200b\u7684\u200b\u5143\u7d20\u200b\u4ee5\u200b\u5355\u8c03\u200b\u9012\u589e\u200b\u6216\u200b\u9012\u51cf\u200b\u65b9\u5f0f\u200b\u6392\u5217\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u89e3\u51b3\u200bleetcode239. \u200b\u6ed1\u52a8\u200b\u7a97\u53e3\u200b\u6700\u5927\u503c\u200b\u3002</p> <p>\u200b\u8fd9\u91cc\u200b\u5355\u8c03\u200b\u961f\u5217\u200b\u4f7f\u7528\u200b\u4e86\u200bstd::list\u200b\u5373\u200b\u53cc\u7aef\u200b\u94fe\u8868\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u961f\u5217\u200b\u4e2d\u200b\u5143\u7d20\u200b\u5355\u8c03\u200b\u9012\u51cf\u200b\u6392\u5217\u200b\u3002</p> Text Only<pre><code>class MonotonicQueue{\n    public:\n        void push(int n){\n            // \u200b\u5c06\u200b\u961f\u5217\u200b\u4e2d\u200b\u5c0f\u4e8e\u200bn\u200b\u7684\u200b\u5143\u7d20\u200b\u5168\u90e8\u200b\u5220\u9664\u200b\n            while(!mQueue.empty() &amp;&amp; mQueue.back() &lt; n){\n                mQueue.pop_back();\n            }\n            mQueue.push_back(n);\n        }\n\n        int max(){\n            return mQueue.front();\n        }\n\n        void pop(int n){\n            // \u200b\u5143\u7d20\u200bn\u200b\u53ef\u80fd\u200b\u5728\u200b\u5165\u961f\u200b\u5224\u65ad\u200b\u65f6\u200b\u5df2\u7ecf\u200b\u5220\u9664\u200b\u4e86\u200b\n            if(n == mQueue.front()){\n                mQueue.pop_front();\n            }\n        }\n\n    private:\n        std::list&lt;int&gt; mQueue;\n    };\n</code></pre> <p>leetcode\u200b\u89e3\u7b54\u200b\uff1a</p> Text Only<pre><code> vector&lt;int&gt; maxSlidingWindow(vector&lt;int&gt;&amp; nums, int k) {\n        std::vector&lt;int&gt; res{};\n        MonotonicQueue q;\n\n        for(int i = 0;i &lt; nums.size();i++){\n            if(i&lt;k-1){\n                q.push(nums[i]);\n            }else{\n                q.push(nums[i]);\n                res.push_back(q.max());\n                q.pop(nums[i-k+1]);\n            }\n        }\n\n        return res;\n    }\n</code></pre>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/Algorithm/%E6%97%A0%E9%94%81%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0/","title":"\u65e0\u9501\u200b\u961f\u5217\u200b\u5b9e\u73b0","text":"<p>Bounded MPMC queue</p> <p>\u200b\u53c2\u8003\u200b\uff1ahttps://blog.dbplayer.org/crossbeam-note/</p> <p>\u200b\u8981\u200b\u8bb2\u200b\u660e\u767d\u200b\u8fd9\u79cd\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u9700\u8981\u200b\u8bf4\u660e\u200b\u66f4\u200b\u591a\u200b\u7684\u200b\u7ec6\u8282\u200b\uff1a</p> <p>head \u200b\u548c\u200b tail \u200b\u4e00\u822c\u200b\u4e0d\u200b\u5b58\u50a8\u200b array \u200b\u7684\u200b\u4e0b\u6807\u200b\uff0c\u200b\u800c\u662f\u200b\u4e00\u4e2a\u200b\u65e0\u9650\u200b\u9012\u589e\u200b\u7684\u200b\u5e8f\u5217\u53f7\u200b\uff0c\u200b\u7528\u4e8e\u200b\u907f\u514d\u200b ABA \u200b\u95ee\u9898\u200b\uff08\u200b\u6070\u597d\u200b\u5faa\u73af\u200b\u4e86\u200b\u4e00\u5708\u200b\u8fd8\u662f\u200b\u540c\u4e00\u4e2a\u200b\u8282\u70b9\u200b\u5bfc\u81f4\u200b\u7684\u200b\u5224\u65ad\u200b\u9519\u8bef\u200b\uff09 \u200b\u4ece\u200b\u5e8f\u5217\u53f7\u200b\u5230\u200b\u4e0b\u6807\u200b\uff0c\u200b\u5c31\u662f\u200b\u5bf9\u200b capacity(array size) \u200b\u7684\u200b\u53d6\u4f59\u200b\uff0c\u200b\u4e3a\u4e86\u200b\u52a0\u901f\u200b\u53d6\u4f59\u200b\u8fc7\u7a0b\u200b\uff0ccapacity \u200b\u4f1a\u53d6\u200b 2 \u200b\u7684\u200b\u5e42\u6b21\u200b\uff0c\u200b\u8fd9\u6837\u200b index = seq &amp; (capacity - 1) \u200b\u5177\u4f53\u200b\u5b9e\u73b0\u200b\uff1a</p> <p>\u200b\u6bcf\u4e2a\u200b\u8282\u70b9\u200b\u5b58\u200b\u4e86\u200b\u4e00\u4e2a\u200b stamp \u200b\u8868\u793a\u200b\u8282\u70b9\u200b\u7684\u200b\u72b6\u6001\u200b \u200b\u5982\u679c\u200b stamp \u200b\u6267\u884c\u200b\u4e86\u200b\u4e0b\u200b\u4e00\u5708\u200b\u5bf9\u5e94\u200b\u7684\u200b\u5e8f\u5217\u53f7\u200b\uff0c\u200b\u8868\u793a\u200b\u8282\u70b9\u200b\u662f\u200b\u7a7a\u95f2\u200b\u72b6\u6001\u200b \u200b\u9ed8\u8ba4\u200b\u5373\u200b\u7a7a\u95f2\u200b\u72b6\u6001\u200b\uff0c\u200b\u56e0\u6b64\u200b\u6240\u6709\u200b\u8282\u70b9\u200b\u7684\u200b stamp \u200b\u9ed8\u8ba4\u200b\u521d\u59cb\u5316\u200b\u4e3a\u200b\u8282\u70b9\u200b\u5bf9\u5e94\u200b\u7684\u200b\u4e0b\u6807\u200b i pop \u200b\u91ca\u653e\u200b\u540e\u200b\u8282\u70b9\u200b\u4f1a\u200b\u6307\u5411\u200b\u4e0b\u200b\u4e00\u4e2a\u5708\u200b\u7684\u200b i\uff0c\u200b\u5373\u200b capacity * cycle_count + i pop \u200b\u65f6\u53d6\u200b\u5230\u200b tail \u200b\u8282\u70b9\u200b\u65f6\u200b\uff0c\u200b\u53ea\u8981\u200b\u68c0\u67e5\u200b\u8282\u70b9\u200b stamp \u200b\u662f\u5426\u200b\u548c\u200b tail \u200b\u76f8\u7b49\u200b\uff0c\u200b\u5373\u53ef\u200b\u786e\u8ba4\u200b\u8282\u70b9\u200b\u662f\u5426\u200b\u7a7a\u95f2\u200b \u200b\u8282\u70b9\u200b\u88ab\u200b\u5360\u7528\u200b\u65f6\u200b\uff0cstamp \u200b\u4fee\u6539\u200b\u4e3a\u539f\u200b stamp + 1 \u200b\u5373\u53ef\u200b stamp \u200b\u8868\u793a\u200b\u7684\u200b\u662f\u200b\u8282\u70b9\u200b\u72b6\u6001\u200b\uff0c\u200b\u5e94\u8be5\u200b\u6700\u540e\u200b\u64cd\u4f5c\u200b\uff0cpush \u200b\u65f6\u8981\u200b\u5148\u200b\u4fee\u6539\u200b head \u200b\u518d\u200b\u586b\u5145\u200b\u503c\u200b\u518d\u200b\u6539\u200b stamp\uff0cpop \u200b\u65f6\u8981\u200b\u5148\u200b\u4fee\u6539\u200b tail \u200b\u7f13\u5b58\u200b\u503c\u200b\u518d\u200b\u4fee\u6539\u200b stamp pop \u200b\u65f6\u200b\u4fee\u6539\u200b stamp \u200b\u4e0d\u200b\u9700\u8981\u200b\u77e5\u9053\u200b cycle_count\uff0c\u200b\u53ea\u200b\u9700\u200b stamp = stamp + (capacity - 1) \u200b\u6539\u8fdb\u200b\u70b9\u200b\uff1a</p> <p>\u200b\u76f8\u6bd4\u200b\u4e8e\u200b\u4e09\u79cd\u200b\u72b6\u6001\u200b\uff0c\u200b\u53ea\u200b\u9700\u8981\u200b\u4e00\u6b21\u200b cas \u200b\u64cd\u4f5c\u200b \u200b\u67d0\u79cd\u7a0b\u5ea6\u200b\u4e0a\u200b\u53ef\u4ee5\u200b\u4fdd\u8bc1\u200b queue \u200b\u6709\u5e8f\u200b \u200b\u7edd\u5927\u90e8\u5206\u200b\u5730\u65b9\u200b\u7684\u200b\u5185\u5b58\u200b\u5e8f\u200b\u90fd\u200b\u662f\u200b relaxed\uff0c\u200b\u53ea\u6709\u200b\u4e24\u6b21\u200b\u5b58\u50a8\u200b\u9700\u8981\u200b\u662f\u200b release \u200b\u4e0d\u200b\u6d89\u53ca\u200b head \u200b\u548c\u200b tail \u200b\u4e4b\u95f4\u200b\u7684\u200b\u5173\u7cfb\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b cacheline padding \u200b\u7684\u200b\u6280\u5de7\u200b\u52a0\u901f\u200b\u7b97\u6cd5\u200b</p> Text Only<pre><code>template&lt;typename T&gt;\nclass mpmc_bounded_queue\n{\npublic:\n  mpmc_bounded_queue(size_t buffer_size)\n    : buffer_(new cell_t [buffer_size])\n    , buffer_mask_(buffer_size - 1)\n  {\n    // \u200b\u8981\u6c42\u200b buffer_size \u200b\u81f3\u5c11\u200b\u662f\u200b 2\uff08\u200b\u56e0\u4e3a\u200b\u5e8f\u5217\u53f7\u200b\u6539\u200b\u72b6\u6001\u200b\u8981\u200b +1\uff09 \u200b\u5927\u200b\u5e76\u4e14\u200b\u662f\u200b 2 \u200b\u7684\u200b\u500d\u6570\u200b\n    assert((buffer_size &gt;= 2) &amp;&amp;\n      ((buffer_size &amp; (buffer_size - 1)) == 0));\n\n    // \u200b\u521d\u59cb\u5316\u200b\u6bcf\u4e2a\u200b\u8282\u70b9\u200b\u4e2d\u200b\u7684\u200b sequence_\uff0c\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b i\uff0c\u200b\u5373\u200b\u7b2c\u4e00\u8f6e\u200b\u7684\u200b\u7a7a\u95f2\u200b\u72b6\u6001\u200b\n    for (size_t i = 0; i != buffer_size; i += 1)\n      buffer_[i].sequence_.store(i, std::memory_order_relaxed);\n\n    // \u200b\u521d\u59cb\u5316\u200b\u9996\u5c3e\u200b\u6307\u9488\u200b\n    enqueue_pos_.store(0, std::memory_order_relaxed);\n    dequeue_pos_.store(0, std::memory_order_relaxed);\n  }\n\n  ~mpmc_bounded_queue()\n  {\n    delete [] buffer_;\n  }\n\n  bool enqueue(T const&amp; data)\n  {\n    cell_t* cell;\n    // \u200b\u53d6\u200b tail \u200b\u5e8f\u5217\u53f7\u200b\n    size_t pos = enqueue_pos_.load(std::memory_order_relaxed);\n\n    for (;;)\n    {\n      // \u200b\u627e\u5230\u200b tail \u200b\u8282\u70b9\u200b\uff0c\u200b\u6ce8\u610f\u200b\uff0c\u200b\u65e0\u9501\u200b\u7b97\u6cd5\u200b\u4e2d\u200b\u8fd9\u4e9b\u200b\u5feb\u7167\u200b\u503c\u200b\u90fd\u200b\u53ef\u80fd\u200b\u662f\u200b\u8fc7\u671f\u200b\u7684\u200b\n      cell = &amp;buffer_[pos &amp; buffer_mask_];\n\n      // \u200b\u53d6\u200b\u8282\u70b9\u200b\u4e2d\u5b58\u200b\u7684\u200b\u5e8f\u5217\u53f7\u200b\n      size_t seq = \n        cell-&gt;sequence_.load(std::memory_order_acquire);\n\n      // \u200b\u5982\u679c\u200b\u548c\u200b tail \u200b\u7684\u200b\u5e8f\u5217\u53f7\u200b\u4e00\u81f4\u200b\uff0c\u200b\u8bf4\u660e\u200b\u8282\u70b9\u200b\u662f\u200b\u7a7a\u95f2\u200b\u72b6\u6001\u200b\n      // \u200b\u8fd9\u91cc\u200b\u4fdd\u8bc1\u200b\u4e86\u200b enqueue(push) \u200b\u64cd\u4f5c\u200b\u548c\u200b dequeue(pop) \u200b\u64cd\u4f5c\u200b\u662f\u200b\u4e92\u65a5\u200b\u7684\u200b\n      intptr_t dif = (intptr_t)seq - (intptr_t)pos;\n      if (dif == 0)\n      {\n        // CAS \u200b\u64cd\u4f5c\u200b\u4fee\u6539\u200b tail \u200b\u7684\u200b\u503c\u200b\n        // \u200b\u8fd9\u91cc\u200b\u4fdd\u8bc1\u200b enqueue(push) \u200b\u64cd\u4f5c\u200b\u4e4b\u95f4\u200b\u662f\u200b\u4e92\u65a5\u200b\u7684\u200b\n        if (enqueue_pos_.compare_exchange_weak\n            (pos, pos + 1, std::memory_order_relaxed))\n          break;\n      }\n      // \u200b\u8fd9\u200b\u8bf4\u660e\u200b\u8282\u70b9\u200b\u503c\u200b\u8fd8\u662f\u200b\u4e0a\u200b\u4e00\u8f6e\u200b\u7684\u200b\u503c\u200b\uff0c\u200b\u961f\u5217\u200b\u5df2\u6ee1\u200b\n      else if (dif &lt; 0)\n        return false;\n      // \u200b\u8d70\u200b\u5230\u200b\u8fd9\u91cc\u200b\u8bf4\u660e\u200b\u8282\u70b9\u200b\u5df2\u7ecf\u200b\u88ab\u200b\u5360\u7528\u200b\u4e86\u200b\uff0ctail \u200b\u503c\u200b\u4e0d\u662f\u200b\u6700\u65b0\u200b\u7684\u200b\uff0c\u200b\u9700\u8981\u200b\u66f4\u65b0\u200b\n      else\n        pos = enqueue_pos_.load(std::memory_order_relaxed);\n    }\n\n    // \u200b\u586b\u5145\u200b\u503c\u200b\u3001\u200b\u4fee\u6539\u200b stamp \u200b\u4ee5\u200b\u5141\u8bb8\u200b\u88ab\u200b pop\n    cell-&gt;data_ = data;\n    cell-&gt;sequence_.store(pos + 1, std::memory_order_release);\n    return true;\n\n  }\n\n  bool dequeue(T&amp; data)\n  {\n    cell_t* cell;\n    // \u200b\u53d6\u200b head \u200b\u7684\u200b\u5e8f\u5217\u53f7\u200b\n    size_t pos = dequeue_pos_.load(std::memory_order_relaxed);\n\n    for (;;)\n    {\n      // \u200b\u53d6\u200b head \u200b\u8282\u70b9\u200b\u548c\u200b\u5bf9\u5e94\u200b\u5e8f\u5217\u53f7\u200b\n      cell = &amp;buffer_[pos &amp; buffer_mask_];\n      size_t seq = \n        cell-&gt;sequence_.load(std::memory_order_acquire);\n\n      // \u200b\u901a\u8fc7\u200b\u5e8f\u5217\u53f7\u200b\u548c\u200b\u786e\u8ba4\u200b\u8282\u70b9\u200b\u662f\u200b\u53ef\u200b pop \u200b\u7684\u200b\uff0c\u200b\u4fdd\u8bc1\u200b dequeue \u200b\u548c\u200b enqueue \u200b\u4e92\u65a5\u200b\n      intptr_t dif = (intptr_t)seq - (intptr_t)(pos + 1);\n      if (dif == 0)\n      {\n        // \u200b\u4fee\u6539\u200b head\uff0c\u200b\u4fdd\u8bc1\u200b dequeue \u200b\u64cd\u4f5c\u200b\u4e4b\u95f4\u200b\u662f\u200b\u4e92\u65a5\u200b\u7684\u200b\n        if (dequeue_pos_.compare_exchange_weak\n            (pos, pos + 1, std::memory_order_relaxed))\n          break;\n      }\n      // \u200b\u961f\u5217\u200b\u7a7a\u200b\u4e86\u200b\n      else if (dif &lt; 0)\n        return false;\n      // \u200b\u66f4\u65b0\u200b\u5df2\u7ecf\u200b\u88ab\u200b\u66f4\u6539\u200b\u7684\u200b head\n      else\n        pos = dequeue_pos_.load(std::memory_order_relaxed);\n    }\n\n    // \u200b\u5b58\u200b\u6570\u636e\u200b\u5feb\u7167\u200b\uff0c\u200b\u4fee\u6539\u200b\u8282\u70b9\u200b\u7684\u200b\u5e8f\u5217\u53f7\u200b\u5230\u200b\u4e0b\u200b\u4e00\u5708\u200b\u7a7a\u95f2\u200b\u72b6\u6001\u200b\u7684\u200b\u503c\u200b\n    data = cell-&gt;data_;\n    cell-&gt;sequence_.store\n      (pos + buffer_mask_ + 1, std::memory_order_release);\n    return true;\n  }\n\nprivate:\n\n  struct cell_t\n  {\n    std::atomic&lt;size_t&gt;   sequence_;\n    T                     data_;\n  };\n\n  // \u200b\u4fdd\u8bc1\u200b head / tail \u200b\u5728\u200b\u4e0d\u540c\u200b\u7684\u200b cacheline \u200b\u4e2d\u200b\uff0c\u200b\u4fee\u6539\u200b\u66f4\u200b\u5feb\u200b\n  static size_t const     cacheline_size = 64;\n  typedef char            cacheline_pad_t [cacheline_size];\n  cacheline_pad_t         pad0_;\n  cell_t* const           buffer_;\n  size_t const            buffer_mask_;\n  cacheline_pad_t         pad1_;\n  std::atomic&lt;size_t&gt;     enqueue_pos_;\n  cacheline_pad_t         pad2_;\n  std::atomic&lt;size_t&gt;     dequeue_pos_;\n  cacheline_pad_t         pad3_;\n\n  mpmc_bounded_queue(mpmc_bounded_queue const&amp;);\n\n  void operator = (mpmc_bounded_queue const&amp;);\n}; \n</code></pre>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/","title":"hexo\u200b\u535a\u5ba2\u200b\u642d\u5efa\u200b\u8bb0\u5f55","text":"","tags":["hexo","blog"]},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/#hexo\u535a\u5ba2\u642d\u5efa\u8bb0\u5f55","title":"hexo\u200b\u535a\u5ba2\u200b\u642d\u5efa\u200b\u8bb0\u5f55","text":"<p>\u200b\u6700\u200b\u5f00\u59cb\u200bhexo\u200b\u535a\u5ba2\u200b\u662f\u56e0\u4e3a\u200b\u770b\u5230\u200b\u4e86\u200bCosmosNing\u200b\u7684\u200b\u4e2a\u4eba\u200b\u535a\u5ba2\u200b\uff0c\u200b\u611f\u89c9\u200b\u6548\u679c\u200b\u5f88\u200bNice\u3002</p> <p>\u200b\u5f00\u59cb\u200b\u53c2\u8003\u200b\u4ed6\u200b\u7684\u200b\u4f7f\u7528\u200b Hexo\u200b\u642d\u5efa\u200b\u5e76\u200b\u90e8\u7f72\u200b\u4e2a\u4eba\u200b\u535a\u5ba2\u200b\u7684\u200b\u8fd9\u200b\u7bc7\u6587\u7ae0\u200b\u3002\u200b\u4f46\u662f\u200b\u5728\u200b\u642d\u5efa\u200b\u7684\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u9047\u5230\u200b\u4e86\u200b\u4e00\u4e9b\u200b\u95ee\u9898\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u8bb0\u5f55\u4e0b\u6765\u200b\uff0c\u200b\u7ed9\u200b\u9700\u8981\u200b\u7684\u200b\u540c\u5b66\u200b\u53c2\u8003\u200b\u3002</p>","tags":["hexo","blog"]},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/#1\u5b89\u88c5hexo\u73af\u5883\u9047\u5230\u7684\u7f51\u7edc\u95ee\u9898","title":"1\u3001\u200b\u5b89\u88c5\u200bhexo\u200b\u73af\u5883\u200b\u9047\u5230\u200b\u7684\u200b\u7f51\u7edc\u200b\u95ee\u9898","text":"<p>\u200b\u5728\u200b\u4f7f\u7528\u200bubuntu\u200b\u7684\u200bapt\u200b\u547d\u4ee4\u200b\u5b89\u88c5\u200bnodejs\u200b\u548c\u200bnpm\u200b\u540e\u200b\uff0c\u200b\u5f00\u59cb\u200b\u4f7f\u7528\u200b\u5982\u4e0b\u200b\u547d\u4ee4\u200b\u5b89\u88c5\u200bhexo\u200b\u73af\u5883\u200b\u3002 </p>Text Only<pre><code>npm install -g hexo-cli\n</code></pre> \u200b\u4f46\u662f\u200b\uff0c\u200b\u9047\u5230\u200b\u4e86\u200b\u7f51\u7edc\u200b\u95ee\u9898\u200b\uff0c\u200b\u4e00\u76f4\u200b\u5361\u987f\u200b\uff0c\u200b\u548c\u200b\u5404\u79cd\u200b\u7f51\u7edc\u200b\u4e0d\u80fd\u200b\u8fde\u63a5\u200b\u7684\u200b\u62a5\u9519\u200b\uff01\u200b\u53c2\u8003\u200b\u4e86\u200b\u7f51\u4e0a\u200b\uff0c\u200b\u4ee3\u7406\u200b\u3001\u200b\u6362\u200b\u6dd8\u5b9d\u200b\u6e90\u200b\u3001\u200b\u4f7f\u7528\u200bcnpm\u200b\u7b49\u200b\uff0c\u200b\u90fd\u200b\u6ca1\u80fd\u200b\u89e3\u51b3\u200b\u3002 \u200b\u89e3\u51b3\u200b\u65b9\u6cd5\u200b\uff1a \u200b\u53c2\u8003\u200bHexo\u200b\u5b98\u65b9\u200b\u6587\u6863\u200b\uff0c\u200b\u4ece\u200bNodeSource\u200b\u5b89\u88c5\u200b\u6700\u65b0\u7248\u200b\u7684\u200bNodejs\u3002<p></p> Text Only<pre><code># Using Ubuntu \ncurl -sL https://deb.nodesource.com/setup_15.x | sudo -E bash -\nsudo apt-get install -y nodejs\n</code></pre>","tags":["hexo","blog"]},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/#2\u4f7f\u7528travisci\u90e8\u7f72\u65f6\u9047\u5230\u95ee\u9898","title":"2\u3001\u200b\u4f7f\u7528\u200bTravisCI\u200b\u90e8\u7f72\u200b\u65f6\u200b\u9047\u5230\u200b\u95ee\u9898","text":"<p>\u200b\u5728\u200b\u4f7f\u7528\u200bTravisCI\u200b\u90e8\u7f72\u200b\u535a\u5ba2\u200b\u65f6\u200b\uff0c\u200b\u9047\u5230\u200b\u4e86\u200b\u201c\u2013token\u201d \u200b\u76f8\u5173\u200b\u7684\u200b\u95ee\u9898\u200b\uff0c\u200b\u82b1\u8d39\u200b\u4e86\u200b\u5927\u91cf\u200b\u7684\u200b\u65f6\u95f4\u200b\uff0c\u200b\u6ca1\u6709\u200b\u89e3\u51b3\u200b\uff0c\u200b\u53d1\u73b0\u200b\u5728\u200bTravisCI\u200b\u4ed3\u5e93\u200b\u7684\u200bissues\u200b\u91cc\u200b\u4e5f\u200b\u6709\u200b\u8fd9\u4e2a\u200b\u95ee\u9898\u200b\u4e9f\u5f85\u89e3\u51b3\u200b\u3002 \u200b\u89e3\u51b3\u200b\u65b9\u6cd5\u200b \u200b\u6700\u7ec8\u200b\uff0c\u200b\u9009\u62e9\u200b\u4e86\u200bActions\u200b\u90e8\u7f72\u200bHexo\u3002 \u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200b\u6211\u200b\u5728\u200b\u201d.github/workflows/action.yaml\u201d\u200b\u4e2d\u200b\u7684\u200b\u81ea\u52a8\u200b\u90e8\u7f72\u200b\u914d\u7f6e\u200b\u3002</p>","tags":["hexo","blog"]},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/#3\u5728\u4f7f\u7528\u90e8\u7f72\u65f6\u9047\u5230xxxmd\u6587\u4ef6\u4e2d\u7684\u67d0\u4e2a\u5c5e\u6027\u4e0d\u80fd\u8bc6\u522b","title":"3\u3001\u200b\u5728\u200b\u4f7f\u7528\u200b\u90e8\u7f72\u200b\u65f6\u200b\uff0c\u200b\u9047\u5230\u200b\u201cxxx.md\u201d\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u7684\u200b\u67d0\u4e2a\u200b\u5c5e\u6027\u200b\u4e0d\u80fd\u200b\u8bc6\u522b","text":"<p>\u200b\u5728\u200b\u4f7f\u7528\u200b\u90e8\u7f72\u200b\u65f6\u200b\uff0c\u200b\u9047\u5230\u200b\u201cxxx.md\u201d\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u7684\u200b\u67d0\u4e2a\u200b\u5c5e\u6027\u200b\u4e0d\u80fd\u200b\u8bc6\u522b\u200b\uff0c\u200b\u5982\u200b\u6211\u200b\u9047\u5230\u200b\u4e86\u200bREADME.md\u200b\u4e2d\u200b\u7684\u200b\u201cnote\u201d\u200b\u5c5e\u6027\u200b\u4e0d\u80fd\u200b\u8bc6\u522b\u200b\uff0c\u200b\u4ea7\u751f\u200b\u62a5\u9519\u200b\u3002 \u200b\u89e3\u51b3\u200b\u65b9\u6cd5\u200b\uff1a \u200b\u76f4\u63a5\u200b\u5c06\u200bREDEME.md\u200b\u6587\u4ef6\u200b\u5220\u9664\u200b\uff0c\u200b\u5373\u200b\u76f4\u63a5\u200b\u5c06\u200b\u4ea7\u751f\u200b\u62a5\u9519\u200b\u7684\u200b\u6587\u4ef6\u200b\u5220\u9664\u200b\uff0c\u200b\u518d\u200b\u5c1d\u8bd5\u200b\u90e8\u7f72\u200b\u3002</p>","tags":["hexo","blog"]},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/#4\u5728\u90e8\u7f72\u6210\u529f\u540e\u8bbf\u95ee\u65f6\u663e\u793a404","title":"4\u3001\u200b\u5728\u200b\u90e8\u7f72\u200b\u6210\u529f\u200b\u540e\u200b\uff0c\u200b\u8bbf\u95ee\u200b\u65f6\u200b\u663e\u793a\u200b404","text":"<p>\u200b\u5728\u200b\u4f7f\u7528\u200bActions\u200b\u90e8\u7f72\u200b\u6210\u529f\u200b\u540e\u200b\uff0c\u200b\u4f46\u662f\u200b\u8bbf\u95ee\u200b\u65f6\u200b\u9047\u5230\u200b\u4e86\u200b404\u200b\u7684\u200b\u95ee\u9898\u200b\u3002 \u200b\u89e3\u51b3\u200b\u65b9\u6cd5\u200b\uff1a \u200b\u5728\u200byour_github_name.github.io\u200b\u4ed3\u5e93\u200b\u7684\u200bsetting\u200b\u4e2d\u200b\uff0c\u200b\u5c06\u200b\u4ed3\u5e93\u200b\u7684\u200b\u201dGithubPages\u201d\u200b\u7684\u200bSource\u200b\u8bbe\u7f6e\u200b\u4e3a\u200bmaster\u200b\u5206\u652f\u200b\u3002</p>","tags":["hexo","blog"]},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/how%20to%20deploy%20a%20mkdocks%20blog/","title":"How to deploy a mkdocks blog","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/how%20to%20deploy%20a%20mkdocks%20blog/#install-mkdocks","title":"install mkdocks","text":"<p>\u200b\u9996\u5148\u200b\uff0c\u200b\u4ecb\u7ecd\u200bblog\u200b\u642d\u5efa\u200b\u7528\u5230\u200b\u7684\u200b\u76f8\u5173\u200b\u6280\u672f\u200b\uff1a + mkdocks + github pages + github actions</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/how%20to%20deploy%20a%20mkdocks%20blog/#mkdocks\u6846\u67b6","title":"mkdocks\u200b\u6846\u67b6","text":"<p>\u200b\u4e0a\u200b\u4e00\u200b\u7248\u672c\u200b\u4f7f\u7528\u200b\u7684\u200b\u662f\u200bgithub pages\u200b\u548c\u200bhexo\u200b\u6846\u67b6\u200b\u642d\u5efa\u200b\u7684\u200bblog\uff0chexo\u200b\u9700\u8981\u200b\u5b89\u88c5\u200bnpm js\u200b\u7b49\u200b\u5f00\u53d1\u200b\u73af\u5883\u200b\uff0c\u200b\u7531\u4e8e\u200b\u6211\u200b\u662f\u200b\u540e\u200b\u7aef\u200b\u5f00\u53d1\u200b\uff0c\u200b\u4f7f\u7528\u200bpython\u200b\u811a\u672c\u200b\u66f4\u200b\u591a\u200b\uff0c\u200b\u800c\u200bmkdocks\u200b\u4f7f\u7528\u200bpython\u200b\u5f00\u53d1\u200b\uff0c\u200b\u56e0\u6b64\u200b\u611f\u89c9\u200b\u73af\u5883\u200b\u66f4\u52a0\u200b\u6574\u6d01\u200b\u3002</p> <p>mkdocks\u200b\u4f7f\u7528\u200bpip\u200b\u5de5\u5177\u200b\u8fdb\u884c\u200b\u7ba1\u7406\u200b\u548c\u200b\u5b89\u88c5\u200b\uff0c\u200b\u5b89\u88c5\u200bmkdocs\uff1a </p>Text Only<pre><code>python3 -m pip install mkdocks\n</code></pre><p></p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/how%20to%20deploy%20a%20mkdocks%20blog/#\u521b\u5efa\u65b0\u9879\u76ee","title":"\u521b\u5efa\u200b\u65b0\u200b\u9879\u76ee","text":"<p>\u200b\u6267\u884c\u547d\u4ee4\u200b\uff0c\u200b\u751f\u6210\u200b\u4e00\u4e2a\u200b\u9879\u76ee\u200b\u6a21\u677f\u200b\uff1a </p>Text Only<pre><code>mkdocs new mysite\n</code></pre><p></p> <p>\u200b\u672c\u5730\u200b\u90e8\u7f72\u200b\uff0c\u200b\u6253\u5f00\u200b\u6d4f\u89c8\u5668\u200b\u67e5\u770b\u200b </p>Text Only<pre><code>mkdocks serve\n</code></pre><p></p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/how%20to%20deploy%20a%20mkdocks%20blog/#\u5df2\u6709\u9879\u76ee","title":"\u5df2\u6709\u200b\u9879\u76ee","text":"<p>\u200b\u9488\u5bf9\u200b\u5df2\u6709\u200b\u7684\u200bblog\u200b\u9879\u76ee\u200b\uff0c\u200b\u6bd4\u5982\u200b\u4e4b\u524d\u200bhexo\u200b\u521b\u5efa\u200b\u7684\u200bblog\u200b\u9879\u76ee\u200b \u200b\u9996\u5148\u200b\uff0c\u200b\u62c9\u53d6\u200b\u539f\u6765\u200b\u7684\u200b\u4ed3\u5e93\u200b\uff0c\u200b\u6bd4\u5982\u200b\u5728\u200bxxx.github.io\u200b\u76ee\u5f55\u200b\u4e2d\u200b,\u200b\u5c06\u200b\u4e0a\u9762\u200b\u9879\u76ee\u200b\u6a21\u677f\u200b\u4e2d\u200b\u7684\u200bmkdocs.yml\u200b\u62f7\u8d1d\u5230\u200bxxx.github.io\u200b\u7684\u200b\u8ddf\u200b\u76ee\u5f55\u200b\u4e2d\u200b, \u200b\u4fdd\u8bc1\u200bdocs\u200b\u76ee\u5f55\u200b\u4e2d\u6709\u200bindex.md\u200b\u6216\u8005\u200bREADME.md\u200b\u6587\u4ef6\u200b,\u200b\u4f5c\u4e3a\u200bblog\u200b\u9996\u9875\u200b\u3002</p> Text Only<pre><code>proxychains4 git push origin main\n</code></pre>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/how%20to%20deploy%20a%20mkdocks%20blog/#\u81ea\u52a8\u5316ci","title":"\u81ea\u52a8\u5316\u200bci","text":"<p>\u200b\u5728\u200b\u9879\u76ee\u200b\u7684\u200b\u6839\u76ee\u5f55\u200b\u4e0b\u200b\uff0c\u200b\u521b\u5efa\u200b.github/workflows/ci.yml\u200b\u6587\u4ef6\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u6587\u4ef6\u200b\u4f1a\u200b\u9a71\u52a8\u200bgithub actions\u200b\u5bf9\u200bblog\u200b\u9879\u76ee\u200b\u4e2d\u200bmarkdown\uff08main\u200b\u5206\u652f\u200b\u4e2d\u200b\uff09\u200b\u8fdb\u884c\u200b\u7f16\u8bd1\u200b\u548c\u200b\u90e8\u7f72\u200b\uff0c\u200b\u751f\u6210\u200b\u9759\u6001\u200b\u524d\u7aef\u200b\u5c55\u793a\u200b\u9875\u9762\u200b\u6587\u4ef6\u200b\uff0c\u200b\u5728\u200bgh-pages\u200b\u5206\u652f\u200b\u4e0a\u200b\u3002 </p>Text Only<pre><code>name: ci \non:\n  push:\n    branches:\n      - master \n      - main\npermissions:\n  contents: write\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n      - run: echo \"cache_id=$(date --utc '+%V')\" &gt;&gt; $GITHUB_ENV \n      - uses: actions/cache@v3\n        with:\n          key: mkdocs-material-${{ env.cache_id }}\n          path: .cache\n          restore-keys: |\n            mkdocs-material-\n      - run: pip install mkdocs-material \n      - run: mkdocs gh-deploy --force\n</code></pre><p></p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/how%20to%20deploy%20a%20mkdocks%20blog/#github-pages\u8bbe\u7f6e","title":"github pages\u200b\u8bbe\u7f6e","text":"<p>\u200b\u8fdb\u5165\u200bxxx.github.io\u200b\u9879\u76ee\u200bgithub\u200b\u9875\u9762\u200b\u7684\u200bsetting\u200b\u4e2d\u200b,\u200b\u9009\u62e9\u200bpages,\u200b\u4e3b\u8981\u200b\u8bbe\u7f6e\u200bBuild and deployment.</p> <p>Source\u200b\u9009\u62e9\u200b: deploy from branch; Branch\u200b\u9009\u62e9\u200b: gh-pages, /root .</p> <p>\u200b\u7ecf\u8fc7\u200b\u4ee5\u4e0a\u200b\u8bbe\u7f6e\u200b,\u200b\u53ea\u8981\u200b\u66f4\u65b0\u200b\u4e86\u200b\u9879\u76ee\u200b\u6587\u4ef6\u200b,\u200b\u8fdb\u884c\u200bcommit push\u200b\u540e\u200b,\u200b\u5c31\u200b\u4f1a\u200b\u89e6\u53d1\u200bci,\u200b\u81ea\u52a8\u200b\u90e8\u7f72\u200bblog.</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/how%20to%20deploy%20a%20mkdocks%20blog/#\u4e3ablog\u6dfb\u52a0\u8bc4\u8bba\u7cfb\u7edf","title":"\u4e3a\u200bblog\u200b\u6dfb\u52a0\u200b\u8bc4\u8bba\u200b\u7cfb\u7edf","text":"<p>\u200b\u4e3a\u200bblog\u200b\u6dfb\u52a0\u200b\u8bc4\u8bba\u200b\u7cfb\u7edf\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200b\u8fd9\u200b\u7bc7\u6587\u7ae0\u200bhttps://fengchao.pro/blog/comment-system-with-giscus/\u3002</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/how%20to%20deploy%20a%20mkdocks%20blog/#\u53c2\u8003","title":"\u53c2\u8003","text":"<p>MkDocs \u200b\u5feb\u901f\u200b\u4e0a\u200b\u624b\u6307\u200b\u5357\u200b publishing-your-site</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/Docker%E6%8A%80%E5%B7%A7/","title":"Docker\u200b\u6280\u5de7","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/Docker%E6%8A%80%E5%B7%A7/#\u57fa\u7840\u5e94\u7528\u7bc7","title":"\u57fa\u7840\u200b\u5e94\u7528\u200b\u7bc7","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/Docker%E6%8A%80%E5%B7%A7/#docker\u4fee\u6539\u6587\u4ef6\u4e3b\u673a\u65e0\u6743\u9650","title":"docker\u200b\u4fee\u6539\u200b\u6587\u4ef6\u200b\uff0c\u200b\u4e3b\u673a\u200b\u65e0\u200b\u6743\u9650","text":"Text Only<pre><code>1.\u200b\u5728\u200b\u5bb9\u5668\u200b\u5916\u7528\u200bid\u200b\u547d\u4ee4\u200b\u83b7\u5f97\u200b\u81ea\u5df1\u200b\u7684\u200b\u7528\u6237\u200bID\u200b\u548c\u200b\u7ec4\u200bID\uff1a\n\n$ id\nuid=1001(us001) gid=1001(us001) groups=1001(us001),978(docker)\n2.\u200b\u8fdb\u5165\u200b\u5bb9\u5668\u200b\uff0c\u200b\u5c06\u200broot\u200b\u7528\u6237\u200b\u7684\u200b\u6587\u4ef6\u5939\u200b\uff0c\u200b\u6539\u6210\u200b\u81ea\u5df1\u200b\u7684\u200b\uff0c\u200b\u6ce8\u610f\u200b\u540e\u9762\u200b\u7684\u200b * \u200b\u8868\u793a\u200b\u6240\u6709\u200b\u7684\u200b\u6587\u4ef6\u200b\u53ca\u200b\u6587\u4ef6\u5939\u200b\n\n$ chown -R 1001:1001 *\n</code></pre>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/Docker%E6%8A%80%E5%B7%A7/#docker-\u6253\u5305\u955c\u50cf","title":"docker \u200b\u6253\u5305\u200b\u955c\u50cf","text":"<p>docker\u200b\u6253\u5305\u200b\u955c\u50cf\u200b</p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/Docker%E6%8A%80%E5%B7%A7/#docker\u8fd0\u884c\u547d\u4ee4\u793a\u4f8b","title":"docker\u200b\u8fd0\u884c\u200b\u547d\u4ee4\u200b\u793a\u4f8b","text":"Text Only<pre><code>docker run --gpus all --privileged=true --network=host --workdir=/workspace -v /home/xxx:/workspace -v /dev/shm -v /etc/profile.d:/etc/profile.d -v /etc/ld.so.conf.d:/etc/ld.so.conf.d --tmpfs /dev/shm:exec -e LOCAL_USER_ID=id --name my_dev -it d806c5ed0d21 /bin/bash\n</code></pre>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/Docker%E6%8A%80%E5%B7%A7/#docker\u8fdb\u7a0b\u76d1\u63a7\u5185\u5b58\u7bc7","title":"Docker\u200b\u8fdb\u7a0b\u200b\u76d1\u63a7\u200b\u2013\u200b\u5185\u5b58\u200b\u7bc7","text":"<p>\u200b\u67e5\u770b\u200b\u5185\u5b58\u200b\u662f\u5426\u200b\u6cc4\u9732\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5173\u6ce8\u200b\uff1a</p> <ul> <li>memory.stat[rss]</li> <li>free \u200b\u547d\u4ee4\u200b\u7684\u200bavailable\uff08\u200b\u5305\u62ec\u200bfree\u200b\u5b57\u6bb5\u200b\u548c\u200bpage cache\u200b\u5b57\u200b\u6bb5\u200b\uff09</li> <li>top\u200b\u547d\u4ee4\u200b \u200b\u8fdb\u7a0b\u200b\u5bf9\u5e94\u200b\u7684\u200bRES\u200b\u503c\u200b</li> <li>cat /proc/1442/status | grep RSS</li> <li>vmstat 2 \uff08\u200b\u6bcf\u9694\u200b2s\u200b\u6253\u5370\u200bfree\u200b\u503c\u200b\uff09</li> <li>cat /proc/1442/status | grep VmSize (vmpeak\uff1a\u200b\u8fdb\u7a0b\u200b\u5386\u53f2\u200b\u4e0a\u200b\u4f7f\u7528\u200b\u7684\u200b\u6700\u5927\u200b\u865a\u62df\u5185\u5b58\u200b\u5927\u5c0f\u200b\uff0c\u200b\u5355\u4f4d\u200b\u4e3a\u200b\u5b57\u8282\u200b\u3002vmsize\uff1a\u200b\u8fdb\u7a0b\u200b\u5f53\u524d\u200b\u4f7f\u7528\u200b\u7684\u200b\u865a\u62df\u5185\u5b58\u200b\u5927\u5c0f\u200b\uff0c\u200b\u5355\u4f4d\u200b\u4e3a\u200b\u5b57\u8282\u200b\u3002)</li> </ul> <p>\u200b\u5982\u679c\u200b\u4e00\u4e2a\u200b\u8fdb\u7a0b\u200b\u4e00\u76f4\u200b\u5728\u200bmalloc\u200b\u6570\u636e\u200b\uff0c\u200b\u4f46\u662f\u200b\u6ca1\u6709\u200b\u4f7f\u7528\u200b\uff0c\u200b\u4e14\u200b\u6ca1\u6709\u200bfree\u200b\u5185\u5b58\u200b\uff0c\u200b\u5e94\u8be5\u200b\u5173\u6ce8\u200b\u865a\u62df\u5185\u5b58\u200b\u662f\u5426\u200b\u4e0a\u6da8\u200b\u3002 \u200b\u5224\u65ad\u200b\u7a0b\u5e8f\u200b\u6216\u8005\u200b\u5bb9\u5668\u200b\u662f\u5426\u200bOMM-kill\uff0c\u200b\u53ef\u4ee5\u200b\u5173\u6ce8\u200b\uff1a</p> <ul> <li>journalctl -k </li> <li>docker inspect \u200b\u4e2d\u200b\u7684\u200bstatus</li> </ul> <p></p>Text Only<pre><code>docker stats $\u200b\u5bb9\u5668\u200b\u540d\u200b\ndocker inspect $\u200b\u5bb9\u5668\u200b\u540d\u200b\n\u200b\u67e5\u770b\u200b\u5185\u5b58\u200b\u60c5\u51b5\u200b\uff0c\u200b\u8fdb\u5165\u200b\u5bb9\u5668\u200bmemory cgroup\u200b\u76ee\u5f55\u200b\nfind /sys/fs/cgroup/memory/ -name *container_id*\ncd /sys/fs/cgroup/memory/container_id\n\nmemory.limit_in_bytes \u200b\u63a7\u5236\u7ec4\u200b\u91cc\u200b\u6240\u6709\u200b\u8fdb\u7a0b\u200b\u53ef\u200b\u4f7f\u7528\u200b\u5185\u5b58\u200b\u7684\u200b\u6700\u5927\u503c\u200b\nmemory.oom_control \u200b\u5f53\u200b\u63a7\u5236\u7ec4\u200b\u4e2d\u200b\u7684\u200b\u8fdb\u7a0b\u200b\u5185\u5b58\u200b\u4f7f\u7528\u200b\u8fbe\u5230\u200b\u4e0a\u200b\u9650\u503c\u200b\u65f6\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u53c2\u6570\u200b\u80fd\u591f\u200b\u51b3\u5b9a\u200b\u4f1a\u200b\u4e0d\u4f1a\u200b\u89e6\u53d1\u200b OOM Killer\n\n# \u200b\u6bcf\u200b\u4e24\u79d2\u949f\u200b\uff0c\u200b\u6bd4\u8f83\u200bmemory.usage_in_bytes\u200b\u6587\u4ef6\u200b\u6570\u636e\u200b\u53d8\u5316\u200b\uff0c-d \u200b\u6bd4\u8f83\u200b\u4e0d\u540c\u200b -n 2 \u200b\u6bcf\u9694\u200b2\u200b\u79d2\u200b\u66f4\u65b0\u200b\u4e00\u6b21\u200b\nwatch -n 2 -d cat memory.usage_in_bytes\n\nmemory.usage_in_bytes = memory.stat[rss] + memory.stat[cache] + memory.kmem.usage_in_bytes\n</code></pre> \u200b\u6211\u4eec\u200b\u901a\u8fc7\u200b\u67e5\u770b\u200b\u5185\u6838\u200b\u7684\u200b\u65e5\u5fd7\u200b\uff0c\u200b\u4f7f\u7528\u200b\u7528\u200b journalctl -k \u200b\u547d\u4ee4\u200b\uff0c\u200b\u6216\u8005\u200b\u76f4\u63a5\u200b\u67e5\u770b\u200b\u65e5\u5fd7\u200b\u6587\u4ef6\u200b /var/log/message\uff0c\u200b\u6211\u4eec\u200b\u4f1a\u200b\u53d1\u73b0\u200b\u5f53\u200b\u5bb9\u5668\u200b\u53d1\u751f\u200b OOM Kill \u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u5185\u6838\u200b\u4f1a\u200b\u8f93\u51fa\u200b\u4e0b\u9762\u200b\u7684\u200b\u8fd9\u6bb5\u200b\u4fe1\u606f\u200b\uff0c\u200b\u5927\u81f4\u200b\u5305\u542b\u200b\u4e0b\u9762\u200b\u8fd9\u4e09\u200b\u90e8\u5206\u200b\u7684\u200b\u4fe1\u606f\u200b\uff1a \u200b\u7b2c\u4e00\u4e2a\u200b\u90e8\u5206\u200b\u5c31\u662f\u200b\u5bb9\u5668\u200b\u91cc\u200b\u6bcf\u200b\u4e00\u4e2a\u200b\u8fdb\u7a0b\u200b\u4f7f\u7528\u200b\u7684\u200b\u5185\u5b58\u200b\u9875\u9762\u200b\u6570\u91cf\u200b\u3002\u200b\u5728\u200b\u201drss\u201d\u200b\u5217\u91cc\u200b\uff0c\u201crss\u2019\u200b\u662f\u200b Resident Set Size \u200b\u7684\u200b\u7f29\u5199\u200b\uff0c\u200b\u6307\u200b\u7684\u200b\u5c31\u662f\u200b\u8fdb\u7a0b\u200b\u771f\u6b63\u200b\u5728\u200b\u4f7f\u7528\u200b\u7684\u200b\u7269\u7406\u200b\u5185\u5b58\u200b\u9875\u9762\u200b\u6570\u91cf\u200b\u3002 \u200b\u4ece\u200b\u8fd9\u91cc\u200b\u6211\u4eec\u200b\u53d1\u73b0\u200b\uff0cPage Cache \u200b\u5185\u5b58\u200b\u5bf9\u200b\u6211\u4eec\u200b\u5224\u65ad\u200b\u5bb9\u5668\u200b\u5b9e\u9645\u200b\u5185\u5b58\u200b\u4f7f\u7528\u7387\u200b\u7684\u200b\u5f71\u54cd\u200b\uff0c\u200b\u76ee\u524d\u200b Page Cache \u200b\u5b8c\u5168\u200b\u5c31\u662f\u200bLinux \u200b\u5185\u6838\u200b\u7684\u200b\u4e00\u4e2a\u200b\u81ea\u52a8\u200b\u7684\u200b\u884c\u4e3a\u200b\uff0c\u200b\u53ea\u8981\u200b\u8bfb\u5199\u200b\u78c1\u76d8\u200b\u6587\u4ef6\u200b\uff0c\u200b\u53ea\u8981\u200b\u6709\u200b\u7a7a\u95f2\u200b\u7684\u200b\u5185\u5b58\u200b\uff0c\u200b\u5c31\u200b\u4f1a\u200b\u88ab\u200b\u7528\u4f5c\u200b Page Cache\u3002 \u200b\u6240\u4ee5\u200b\uff0c\u200b\u5224\u65ad\u200b\u5bb9\u5668\u200b\u771f\u5b9e\u200b\u7684\u200b\u5185\u5b58\u200b\u4f7f\u7528\u91cf\u200b\uff0c\u200b\u6211\u4eec\u200b\u4e0d\u80fd\u200b\u7528\u200b Memory Cgroup \u200b\u91cc\u200b\u7684\u200bmemory.usage_in_bytes\uff08rss + Page Cache\uff09\uff0c\u200b\u800c\u200b\u9700\u8981\u200b\u7528\u200bmemory.stat\u200b\u91cc\u200b\u7684\u200b rss \u200b\u503c\u200b\u3002 \u200b\u8fd9\u4e2a\u200b\u5f88\u200b\u50cf\u200b\u6211\u4eec\u200b\u7528\u200bfree\u200b\u547d\u4ee4\u200b\u67e5\u770b\u200b\u8282\u70b9\u200b\u7684\u200b\u53ef\u7528\u5185\u5b58\u200b\uff0c\u200b\u4e0d\u80fd\u200b\u770b\u200b\u201dfree\u201d\u200b\u5b57\u6bb5\u200b\u4e0b\u200b\u7684\u200b\u503c\u200b\uff0c\u200b\u800c\u200b\u8981\u200b\u770b\u200b\u5305\u62ec\u200b Page Cache \u200b\u4e4b\u540e\u200b\u7684\u200b\u201davailable\u201d\u200b\u5b57\u6bb5\u200b\u4e0b\u200b\u7684\u200b\u503c\u200b\u3002free \u200b\u548c\u200b available \u200b\u7684\u200b\u533a\u522b\u200b\u5728\u4e8e\u200b\uff0cfree \u200b\u8868\u793a\u200b\u7cfb\u7edf\u200b\u4e2d\u200b\u771f\u6b63\u200b\u7a7a\u95f2\u200b\u7684\u200b\u5185\u5b58\u200b\uff0c\u200b\u800c\u200b available \u200b\u8868\u793a\u200b\u7cfb\u7edf\u200b\u5f53\u524d\u200b\u53ef\u4ee5\u200b\u7528\u6765\u200b\u5206\u914d\u200b\u7ed9\u200b\u65b0\u200b\u8fdb\u7a0b\u200b\u7684\u200b\u5185\u5b58\u200b\uff0c\u200b\u5305\u62ec\u200b\u4e86\u200b\u90e8\u5206\u200b\u7528\u4f5c\u200b\u7f13\u5b58\u200b\u7684\u200b\u5185\u5b58\u200b\u3002 \u200b\u4f7f\u7528\u200btop\u200b\u547d\u4ee4\u200b\u67e5\u770b\u200b\uff1a\u200b\u5bf9\u5e94\u200b\u8fdb\u7a0b\u200b\u7684\u200bVIRT\u200b\u5bf9\u5e94\u200b\u7684\u200b\u662f\u200bmalloc\u200b\u7b49\u200b\u65b9\u5f0f\u200b\u7533\u8bf7\u200b\u7684\u200b\u865a\u62df\u5185\u5b58\u200b\uff0cRES\u200b\u548c\u200bRSS\u200b\u76f8\u540c\u200b\uff0c\u200b\u4ee3\u8868\u200b\u7684\u200b\u662f\u200b\u5b9e\u9645\u200b\u4f7f\u7528\u200b\u7684\u200b\u7269\u7406\u200b\u9875\u9762\u200b\u5927\u5c0f\u200b\u3002 \u200b\u53c2\u8003\u200b\uff1a \u3010\u200b\u7cbe\u9009\u200b\u3011Docker \u200b\u5bb9\u5668\u200b\u5185\u5b58\u200b\uff1a\u200b\u6211\u200b\u7684\u200b\u5bb9\u5668\u200b\u4e3a\u4ec0\u4e48\u200b\u88ab\u200b\u6740\u200b\u4e86\u200b\uff1f_docker oomkilled-CSDN\u200b\u535a\u5ba2\u200b \u3010\u200b\u7cbe\u9009\u200b\u301109 | Page Cache\uff1a\u200b\u4e3a\u4ec0\u4e48\u200b\u6211\u200b\u7684\u200b\u5bb9\u5668\u200b\u5185\u5b58\u200b\u4f7f\u7528\u91cf\u200b\u603b\u662f\u200b\u5728\u200b\u4e34\u754c\u70b9\u200b?_res pagecache-CSDN\u200b\u535a\u5ba2\u200b<p></p>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/FFmpeg%E6%8A%80%E5%B7%A7/","title":"FFmpeg\u200b\u6280\u5de7","text":"<ul> <li>\u200b\u56fe\u7247\u200b\u88c1\u526a\u200b</li> </ul> Text Only<pre><code>ffmpeg -i input.jpg -vf scale=320:240 output_320x240.png\n</code></pre> <ul> <li>\u200b\u67e5\u770b\u200b\u56fe\u7247\u200bsize</li> </ul> Text Only<pre><code>ffprobe xxx.png\n</code></pre>"},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/Opencv%E6%8A%80%E5%B7%A7/","title":"Opencv\u200b\u6280\u5de7","text":""},{"location":"notes/%23%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD%E7%AF%87/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/Opencv%E6%8A%80%E5%B7%A7/#opencv-\u4e0d\u80fd\u6253\u5f00\u89c6\u9891","title":"Opencv \u200b\u4e0d\u80fd\u200b\u6253\u5f00\u200b\u89c6\u9891","text":"<p>Opencv\u200b\u5904\u7406\u200bvideo\u200b\u662f\u200b\u901a\u8fc7\u200b\u540e\u200b\u7aef\u200b\u5904\u7406\u200b\u7684\u200b\uff0c\u200b\u5e38\u89c1\u200b\u7684\u200b\u6709\u200bffmpeg\u3001gstreamer\u3002\u200b\u9700\u8981\u200b\u67e5\u770b\u200bopencv\u200b\u5728\u200b\u7f16\u8bd1\u200b\u65f6\u200b\uff0c\u200b\u662f\u5426\u200b\u5f00\u542f\u200b\u4e86\u200b\u5bf9\u5e94\u200b\u529f\u80fd\u200b\u3002</p> <p></p>Text Only<pre><code>// Open video\n    cv::VideoCapture capture;\n    std::cout &lt;&lt; cv::getBuildInformation();\n    std::string video_out_name = \"output.mp4\";\n\n    std::cout &lt;&lt; \"oepn video file\" &lt;&lt; std::endl;\n    capture.open(video_path.c_str());\n    video_out_name =\n        video_path.substr(video_path.find_last_of(OS_PATH_SEP) + 1);\n\n    if (!capture.isOpened())\n    {\n        printf(\"can not open video : %s\\n\", video_path.c_str());\n        return;\n    }\n</code></pre> \u200b\u5982\u679c\u200bopenvideo\u200b\u5931\u8d25\u200b\uff0c\u200b\u901a\u8fc7\u200bstd::cout &lt;&lt; cv::getBuildInformation();\u200b\u67e5\u770b\u200b\u662f\u5426\u200b\u652f\u6301\u200bffmpeg<p></p> <p></p>Text Only<pre><code>Video I/O:\n    DC1394:                      NO\n    FFMPEG:                      NO\n      avcodec:                   NO\n      avformat:                  NO\n      avutil:                    NO\n      swscale:                   NO\n      avresample:                NO\n    GStreamer:                   NO\n    v4l/v4l2:                    YES (linux/videodev2.h)\n</code></pre> this means, you can use a webcam, but no video files at all. you\u2019ll have to go all the way back andbuild the opencv libs with either gstreamer or ffmpeg support \u200b\u53c2\u8003\u200b\uff1a https://answers.opencv.org/question/193543/how-to-solve-problem-with-videocapture-loading-in-linux/<p></p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Kotlin/","title":"Kotlin","text":""},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Kotlin/#kotlin-usage","title":"kotlin usage","text":""},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Kotlin/#gson","title":"gson","text":"<ul> <li>\u200b\u81ea\u5b9a\u4e49\u200b\u7c7b\u200b\u7684\u200b\u5e8f\u5217\u5316\u200b\u548c\u200b\u53cd\u200b\u5e8f\u5217\u5316\u200b Text Only<pre><code>class MenuContentInterfaceAdapter : JsonDeserializer&lt;Any&gt;, JsonSerializer&lt;Any&gt; {\n\n    companion object {\n        const val CLASSNAME = \"CLASSNAME\"\n        const val DATA  = \"DATA\"\n    }\n\n    @Throws(JsonParseException::class)\n    override fun deserialize(jsonElement: JsonElement, type: Type,\n                             jsonDeserializationContext: JsonDeserializationContext): Any {\n\n        val jsonObject = jsonElement.asJsonObject\n        val prim = jsonObject.get(CLASSNAME) as JsonPrimitive\n        val className = prim.asString\n        val objectClass = getObjectClass(className)\n        return jsonDeserializationContext.deserialize(jsonObject.get(DATA), objectClass)\n    }\n\n    override fun serialize(jsonElement: Any, type: Type, jsonSerializationContext: JsonSerializationContext): JsonElement {\n        val jsonObject = JsonObject()\n        jsonObject.addProperty(CLASSNAME, jsonElement.javaClass.name)\n        jsonObject.add(DATA, jsonSerializationContext.serialize(jsonElement))\n        return jsonObject\n    }\n\n    private fun getObjectClass(className: String): Class&lt;*&gt; {\n        try {\n            return Class.forName(className)\n        } catch (e: ClassNotFoundException) {\n            throw JsonParseException(e.message)\n        }\n\n    }\n}\n</code></pre></li> </ul> Text Only<pre><code>private var gson : Gson? = null\nval gsonBuilder = GsonBuilder()\ngsonBuilder.registerTypeAdapter(MenuContent::class.java, MenuContentInterfaceAdapter())\ngson = gsonBuilder.create()\n</code></pre> https://paul-stanescu.medium.com/custom-interface-adapter-to-serialize-and-deserialize-interfaces-in-kotlin-using-gson-8539c04b4c8f <ul> <li>enum \u200b\u5e8f\u5217\u200b\u5316\u6210\u200b\u6570\u5b57\u200b // https://ejin66.github.io/2018/12/19/gson-enum.html Text Only<pre><code>import com.google.gson.Gson\nimport com.google.gson.TypeAdapter\nimport com.google.gson.TypeAdapterFactory\nimport com.google.gson.annotations.SerializedName\nimport com.google.gson.reflect.TypeToken\nimport com.google.gson.stream.JsonReader\nimport com.google.gson.stream.JsonToken\nimport com.google.gson.stream.JsonWriter\n\n// https://ejin66.github.io/2018/12/19/gson-enum.html\n\nclass EnumTypeAdapterFactory: TypeAdapterFactory {\n    override fun &lt;T : Any&gt; create(gson: Gson, type: TypeToken&lt;T&gt;): TypeAdapter&lt;T&gt;? {\n        if (!type.rawType.isEnum) {\n            return null\n        }\n\n        val maps = mutableMapOf&lt;T, ValueType&gt;()\n\n        type.rawType.enumConstants.filter { it != null }.forEach {\n            val tt: T = it!! as T\n\n            val serializedName = tt.javaClass.getField(it.toString()).getAnnotation(SerializedName::class.java)\n\n            if (serializedName != null) {\n                maps[tt] = ValueType(serializedName.value, BasicType.STRING)\n                return@forEach\n            }\n\n            val field = tt.javaClass.declaredFields.firstOrNull { it2 -&gt;\n                BasicType.isBasicType(it2.type.name)\n            }\n            if (field != null) {\n                field.isAccessible = true\n                val basicType = BasicType.get(field.type.name)\n                val value: Any = when (basicType) {\n                    BasicType.INT -&gt; field.getInt(tt)\n                    BasicType.STRING -&gt; field.get(tt) as String\n                    BasicType.LONG -&gt; field.getLong(tt)\n                    BasicType.DOUBLE -&gt; field.getDouble(tt)\n                    BasicType.BOOLEAN -&gt; field.getBoolean(tt)\n                }\n                maps[tt] = ValueType(value, basicType)\n            } else {\n                maps[tt] = ValueType(tt.toString(), BasicType.STRING)\n            }\n        }\n\n        return object: TypeAdapter&lt;T&gt;() {\n            override fun write(out: JsonWriter, value: T?) {\n                if (value == null) {\n                    out.nullValue()\n                } else {\n                    val valueType = maps[value]!!\n                    when (valueType.type) {\n                        BasicType.INT -&gt; out.value(valueType.value as Int)\n                        BasicType.STRING -&gt; out.value(valueType.value as String)\n                        BasicType.LONG -&gt; out.value(valueType.value as Long)\n                        BasicType.DOUBLE -&gt; out.value(valueType.value as Double)\n                        BasicType.BOOLEAN -&gt; out.value(valueType.value as Boolean)\n                    }\n                }\n            }\n\n            override fun read(reader: JsonReader): T? {\n                if (reader.peek() == JsonToken.NULL) {\n                    reader.nextNull()\n                    return null\n                } else {\n                    val source = reader.nextString()\n                    var tt: T? = null\n                    maps.forEach { value, type -&gt;\n                        if (type.value.toString() == source) {\n                            tt = value\n                            return@forEach\n                        }\n                    }\n                    return tt\n                }\n            }\n\n        }\n    }\n\n    data class ValueType(var value: Any, var type: BasicType)\n\n    enum class BasicType(var value: String) {\n        INT(\"int\"),\n        STRING(\"java.lang.String\"),\n        LONG(\"long\"),\n        DOUBLE(\"double\"),\n        BOOLEAN(\"boolean\");\n\n\n        companion object {\n            fun isBasicType(name: String): Boolean {\n                return values().any { it.value == name }\n            }\n\n            fun get(name: String) = values().first { it.value == name }\n        }\n    }\n}\n</code></pre></li> </ul> Text Only<pre><code>gson = new GsonBuilder().registerTypeAdapterFactory(new EnumTypeAdapterFactory()).create();\n</code></pre>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Kotlin/#tcp-client","title":"tcp client","text":"Text Only<pre><code>import java.io.*;\nimport java.net.Socket;\nimport java.nio.ByteBuffer;\nimport java.nio.ByteOrder;\n\npublic class TCPClient {\n    String ip;\n    int port;\n\n    DataInputStream inFromServer;\n    DataOutputStream outToServer;\n\n    Socket clientSocket;\n\n    public Boolean connect(String _ip, int _port) {\n        ip = _ip;\n        port = _port;\n        try {\n            //create client socket, connect to server\n//            clientSocket = new Socket();\n//            SocketAddress endpoint = new InetSocketAddress(this.ip, this.port);\n//            clientSocket.connect(endpoint);\n            clientSocket = new Socket(this.ip, this.port);\n\n\n            //create output stream attached to socket\n            outToServer = new DataOutputStream(clientSocket.getOutputStream());\n\n            //create input stream attached to socket\n            inFromServer = new DataInputStream(clientSocket.getInputStream());\n\n        } catch (Exception ex) {\n\n        }\n        return true;\n    }\n\n    public byte[] recv(int len) throws IOException {\n        ByteArrayOutputStream res = new ByteArrayOutputStream();\n        ByteBuffer byteBuffer = ByteBuffer.allocate(len);\n\n        int dataLen = len;\n        while (dataLen != 0) {\n\n            int r = inFromServer.read(byteBuffer.array());\n            dataLen -= r;\n\n            byte[] b = new byte[r];\n            byteBuffer.get(b, 0, r);\n            res.write(b);\n        }\n        return res.toByteArray();\n    }\n\n\n    public Boolean send(byte[] data) throws IOException {\n\n        int dataLen = data.length;\n        ByteBuffer b = ByteBuffer.allocate(4);\n        b.order(ByteOrder.BIG_ENDIAN);\n        b.putInt(dataLen);\n\n//        ByteArrayOutputStream output = new ByteArrayOutputStream();\n//        output.write(b.array());\n//        output.write(data);\n//\n//        //send line to server\n//        outToServer.write(output.toByteArray());\n\n        byte[] bytesAll = new byte[4 + data.length];\n        ByteBuffer buffer = ByteBuffer.wrap(bytesAll);\n        buffer.put(b.array());\n        buffer.put(data);\n\n        //send line to server\n        outToServer.write(buffer.array());\n        outToServer.flush();\n        return true;\n    }\n}\n</code></pre>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/C%2B%2B%2020%20corutine%20generator/","title":"C++ 20 corutine generator","text":"<p>cmakeList.txt </p>Text Only<pre><code>cmake_minimum_required(VERSION 3.25)\nproject(co_generator)\n\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_FLAGS -fcoroutines)\n\nadd_executable(co_generator main.cpp)\n</code></pre><p></p> <p>main.cpp </p>C++<pre><code>#include &lt;iostream&gt;\n#include &lt;coroutine&gt;\n#include &lt;utility&gt;\n#include &lt;tuple&gt;\n\nstruct Generator {\n\n    struct promise_type {\n        Generator get_return_object() {\n            return {handle::from_promise(*this)};\n        }\n\n        auto initial_suspend() noexcept {\n            return std::suspend_never{};\n        }\n\n        auto final_suspend() noexcept {\n            return std::suspend_always{};\n        }\n\n        void unhandled_exception() {\n            std::terminate();\n        }\n\n        void return_void() {\n\n        }\n\n        auto yield_value(int value) {\n            current_value_ = value;\n            return std::suspend_always{};\n        }\n\n        int current_value_;\n    };\n\n    using handle = std::coroutine_handle&lt;promise_type&gt;;\n\n    void next() {\n        return coro_handle_.resume();\n    }\n\n    bool done() {\n        return coro_handle_.done();\n    }\n\n    int corrent_value() {\n        return coro_handle_.promise().current_value_;\n    }\n\n    Generator(std::coroutine_handle&lt;promise_type&gt; rhs) noexcept:\n            coro_handle_(std::exchange(rhs, {})) {\n    }\n\n    ~Generator() {\n        if (coro_handle_) {\n            coro_handle_.destroy();\n        }\n    }\n\nprivate:\n    handle coro_handle_;\n\n};\n\n\nGenerator fibo() {\n    int a = 1, b = 1;\n    while (a &lt; 1000000) {\n        co_yield a;\n        std::tie(a, b) = std::make_tuple(b, a + b);\n    }\n\n    co_return;\n}\n\n\nint main() {\n    std::cout &lt;&lt; \"Hello, World!\" &lt;&lt; std::endl;\n\n    for (auto f = fibo(); !f.done(); f.next()) {\n        std::cout &lt;&lt; f.corrent_value() &lt;&lt; std::endl;\n    }\n    return 0;\n}\n</code></pre><p></p> <p>gcc g++ version </p>Text Only<pre><code>g++-10 (Ubuntu 10.3.0-1ubuntu1~20.04) 10.3.0\n</code></pre><p></p> <p>result </p>Text Only<pre><code>1\n1\n2\n3\n5\n8\n13\n21\n34\n55\n89\n144\n233\n377\n610\n987\n1597\n2584\n4181\n6765\n10946\n17711\n28657\n46368\n75025\n121393\n196418\n317811\n514229\n832040\n</code></pre><p></p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/C%2B%2B/","title":"C++","text":""},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/C%2B%2B/#shared-ptr","title":"Shared Ptr","text":"<p>cpp\u200b\u6807\u51c6\u200b\u5e93\u200b\u7684\u200bshared_ptr\u200b\u4ee5\u53ca\u200b\u4e0a\u9762\u200b\u7684\u200b\u6837\u4f8b\u200b\u4ee3\u7801\u200b\u90fd\u200b\u4e0d\u662f\u200b\u7ebf\u7a0b\u200b\u5b89\u5168\u200b\u7684\u200b\u3002\u200b\u5982\u679c\u200b\u4e24\u4e2a\u200b\u7ebf\u7a0b\u200b\u540c\u65f6\u200b\u64cd\u4f5c\u200b\u4e00\u4e2a\u200bSharedPtr\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5f88\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5bfc\u81f4\u200b\u5185\u5b58\u200b\u9519\u8bef\u200b\u3002 \u200b\u4ee5\u200bFB\u200b\u7684\u200bfolly\u200b\u5e93\u200b\u7684\u200bAtomicSharedPtr\u200b\u4e3a\u200b\u4ee3\u8868\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u539f\u5b50\u200b\u53d8\u66f4\u200b\u201c\u200b\u5bf9\u8c61\u200b\u6307\u9488\u200b+\u200b\u5f15\u7528\u200b\u8ba1\u6570\u200b+alias\u200b\u5bf9\u8c61\u200b\u201d\u200b\u7684\u200b\u529f\u80fd\u200b\uff0c\u200b\u771f\u6b63\u200b\u5b9e\u73b0\u200b\u7ebf\u7a0b\u200b\u5b89\u5168\u200b\u7684\u200b\u539f\u5b50\u200b\u5f15\u7528\u200b\u8ba1\u6570\u200b\u5bf9\u8c61\u200b\u7ba1\u7406\u200b\u3002 \u200b\u5982\u679c\u200b\u8981\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200bAtomicSharedPtr\uff0c\u200b\u9700\u8981\u200b\u89e3\u51b3\u200b\u7684\u200b\u4e00\u4e2a\u200b\u95ee\u9898\u200b\u5c31\u662f\u200b\u5982\u4f55\u200b\u7528\u200b\u4e00\u4e2a\u200b\u539f\u5b50\u200b\u64cd\u4f5c\u200b\u540c\u65f6\u200b\u53d8\u66f4\u200b\u6307\u9488\u200b+\u200b\u5f15\u7528\u200b\u8ba1\u6570\u200b\u3002\u200b\u597d\u200b\u5728\u200bx64\u200b\u5e73\u53f0\u200b\u7684\u200b\u865a\u62df\u5185\u5b58\u200b\u5730\u5740\u200b\u6709\u4e2a\u200b\u673a\u5236\u200b\u662f\u200b\u5730\u5740\u200b\u7684\u200b\u9ad8\u200b16\u200b\u4f4d\u200b\u90fd\u200b\u662f\u200b0\uff0c\u200b\u53ef\u4ee5\u200b\u5229\u7528\u200b\u8fd9\u200b16\u200b\u4f4d\u200b\u505a\u200b\u5f15\u7528\u200b\u8ba1\u6570\u200b\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u57fa\u4e8e\u200b64\u200b\u4f4d\u200b\u7684\u200bCAS\u200b\u5b9e\u73b0\u200b\u540c\u65f6\u200b\u53d8\u66f4\u200b\u6307\u9488\u200b+\u200b\u5f15\u7528\u200b\u8ba1\u6570\u200b\u7684\u200b\u529f\u80fd\u200b\u4e86\u200b\u3002\u200b\u8fd9\u200b\u4e5f\u200b\u662f\u200bfolly\u200b\u4e2d\u200bPackedSyncPtr\u200b\u57fa\u672c\u539f\u7406\u200b\u3002\u200b\u57fa\u4e8e\u200b\u8fd9\u4e2a\u200b\u529f\u80fd\u200b\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u7ebf\u7a0b\u200b\u5b89\u5168\u200b\u7684\u200bAtomicSharedPtr\uff0c\u200b\u7528\u6765\u200b\u5728\u200b\u591a\u7ebf\u7a0b\u200b\u73af\u5883\u200b\u4e0b\u200b\u7ba1\u7406\u200b\u5bf9\u8c61\u200b\u7684\u200b\u751f\u547d\u5468\u671f\u200b\u4e86\u200b\u3002</p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/C%2B%2B/#\u52a8\u6001\u5e93\u7684\u53ef\u89c1\u6027","title":"\u52a8\u6001\u200b\u5e93\u200b\u7684\u200b\u53ef\u89c1\u200b\u6027","text":"<p>http://zh0ngtian.tech/posts/d979a13.html set(CMAKE_CXX_VISIBILITY_PRESET hidden) </p>Text Only<pre><code>void __attribute__ ((visibility (\"default\"))) visible_fun();\n</code></pre><p></p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/C%2B%2B/#conan","title":"conan","text":"<p>\u200b\u4e00\u4e2a\u200bc++ \u200b\u5305\u200b\u7ba1\u7406\u5668\u200b\uff0cpython\u200b\u7f16\u5199\u200b\uff0c\u200b\u4f7f\u7528\u200bpip\u200b\u5b89\u88c5\u200b\u3002 </p>Text Only<pre><code>pip install conan\n</code></pre> https://docs.conan.io/2/tutorial/consuming_packages.html conan1 \u200b\u548c\u200bconan2 \u200b\u7248\u672c\u200b\u4f7f\u7528\u200b\u4e0a\u200b\u5b58\u5728\u200b\u53d8\u6362\u200b\uff0cconan1\u200b\u5bf9\u200bCMakeLists.txt\u200b\u6587\u4ef6\u200b\u662f\u200b\u4fb5\u5165\u200b\u5f0f\u200b\u7684\u200b\uff0c\u200b\u4f7f\u7528\u200b\u4e2d\u200b\u9700\u8981\u200b\u5728\u200b\u5176\u4e2d\u200b\u52a0\u5165\u200b\uff1a Text Only<pre><code>include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)\nconan_basic_setup()\n</code></pre> conan2\u200b\u4e0d\u200b\u9700\u8981\u200b\uff0c\u200b\u63a8\u8350\u200b\u4f7f\u7528\u200bconan2\u3002 conan2 \u200b\u6709\u200b\u4e24\u79cd\u200bconanfile\uff0c\u200b\u5206\u522b\u200b\u662f\u200bconanfile.txt\u200b\u548c\u200bconanfile.py\uff0cpy\u200b\u6587\u4ef6\u200b\u63d0\u4f9b\u200b\u4e86\u200bpython\u200b\u63a5\u53e3\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u64cd\u4f5c\u200bbuild\u3001source\u3001package\u200b\u7b49\u200b\u9636\u6bb5\u200b\uff0c\u200b\u81ea\u5e26\u200bcmake\u200b\u5de5\u5177\u200b\u64cd\u4f5c\u200b\u63a5\u53e3\u200b\u3002 \u200b\u4f7f\u7528\u200b\uff1a Text Only<pre><code>conan install . --output-folder=build --build=missing\ncd build\ncmake .. -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release\ncmake --build .\n</code></pre><p></p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/C%2B%2B/#\u964d\u4f4e\u7f16\u8bd1\u65f6\u95f4","title":"\u964d\u4f4e\u200b\u7f16\u8bd1\u200b\u65f6\u95f4","text":"<p>https://blog.zaleos.net/giving-ccache-distcc-a-spin Ccache &amp; Distcc</p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/C%2B%2B/#cstl-\u5e76\u884c","title":"c++STL \u200b\u5e76\u884c","text":"<p>https://0cch.com/2021/04/05/parallel-algorithm-in-stl/ std::execution::par_unseq c++17</p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/C%2B%2B/#vector","title":"vector","text":"<ul> <li>clear vector</li> <li> <ol> <li>\u200b\u7b2c\u4e00\u79cd\u200b\uff0c\u200b\u4f7f\u7528\u200bclear\u200b\u65b9\u6cd5\u200b\u6e05\u7a7a\u200b\u6240\u6709\u200b\u5143\u7d20\u200b\u3002\u200b\u7136\u540e\u200b\u4f7f\u7528\u200bshrink_to_fit\u200b\u65b9\u6cd5\u200b\u628a\u200bcapacity\u200b\u548c\u200bsize\uff080\uff09\u200b\u5bf9\u9f50\u200b\uff0c\u200b\u8fbe\u5230\u200b\u91ca\u653e\u200b\u5185\u5b58\u200b\u7684\u200b\u4f5c\u7528\u200b Bash<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nint main(int argc, char const *argv[])\n{\n    std::vector&lt;int&gt; vi;\n    vi.reserve(1024);\n    for (int i = 0; i &lt; 1024; i++) vi.push_back(i);\n    std::cout &lt;&lt; vi.size() &lt;&lt; \" \" &lt;&lt; vi.capacity() &lt;&lt; std::endl;    //1024 1024\n    vi.clear(); \n    std::cout &lt;&lt; vi.size() &lt;&lt; \" \" &lt;&lt; vi.capacity() &lt;&lt; std::endl;    //0 1024\n    vi.shrink_to_fit(); \n    std::cout &lt;&lt; vi.size() &lt;&lt; \" \" &lt;&lt; vi.capacity() &lt;&lt; std::endl;    //0 0\n}\n</code></pre></li> </ol> </li> <li> <ol> <li>\u200b\u7b2c\u4e8c\u79cd\u200b\uff0c\u200b\u4f7f\u7528\u200bswap\u200b\u65b9\u6cd5\u200b\uff1b Bash<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nint main(int argc, char const *argv[])\n{\n    std::vector&lt;int&gt; vi;\n    vi.reserve(1024);\n    for (int i = 0; i &lt; 1024; i++) vi.push_back(i);\n    std::cout &lt;&lt; vi.size() &lt;&lt; \" \" &lt;&lt; vi.capacity() &lt;&lt; std::endl;    //1024 1024\n    std::vector&lt;int&gt;().swap(vi); //\u200b\u4f7f\u7528\u200b\u4e34\u65f6\u200b\u91cf\u200b\uff08size =0, capacity=0\uff09\u200b\u548c\u200bvi\u200b\u4ea4\u6362\u200b\uff0c\u200b\u4e34\u65f6\u200b\u91cf\u4f1a\u200b\u7acb\u5373\u200b\u6790\u6784\u200b\n    std::cout &lt;&lt; vi.size() &lt;&lt; \" \" &lt;&lt; vi.capacity() &lt;&lt; std::endl;    //0 0\n}\n</code></pre></li> </ol> </li> </ul>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/C%2B%2B/#core-guidline","title":"Core Guidline","text":"<p>https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#S-class</p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/C%2B%2B/#inline-namespace-c11","title":"inline namespace (c++11)","text":"<p>https://blog.csdn.net/craftsman1970/article/details/82872497 \u200b\u53ef\u4ee5\u200b\u5e94\u7528\u200b\u4e8e\u5e93\u200b\u7684\u200b\u7248\u672c\u5347\u7ea7\u200b</p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/C%2B%2B/#trivial_view-class","title":"trivial_view class","text":"<p>struck_pack\u200b\u6e90\u7801\u200b\u9605\u8bfb\u200b\u2013\u200b\u901a\u8fc7\u200btrivial_veiw\u200b\u51cf\u5c11\u200b\u5185\u5b58\u200b\u62f7\u8d1d\u200b https://github1s.com/alibaba/yalantinglibs/blob/main/include/ylt/struct_pack/trivial_view.hpp trivial_view\u200b\u901a\u8fc7\u200b\u5185\u90e8\u200b\u7684\u200b\u6307\u9488\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u539f\u59cb\u6570\u636e\u200b\u7684\u200b\u4e00\u4e2a\u200b\u89c6\u56fe\u200b\uff0c\u200b\u51cf\u5c11\u200b\u53c2\u6570\u4f20\u9012\u200b\u4e2d\u200b\u7684\u200b\u6570\u636e\u200b\u62f7\u8d1d\u200b\u3002 </p>C++<pre><code> * struct Data {\n *   int x[10000],y[10000],z[10000];\n * };\n *\n * struct Proto {\n *   std::string name;\n *   Data data;\n * };\n\n* struct ProtoView {\n *   std::string_view name;\n *   struct_pack::trivial_view&lt;Data&gt; data;\n * };\n</code></pre><p></p> <p></p>C++<pre><code>template &lt;typename T, typename&gt;\nstruct trivial_view {\n private:\n  const T* ref;\n\n public:\n  trivial_view(const T* t) : ref(t){};\n  trivial_view(const T&amp; t) : ref(&amp;t){};\n  trivial_view(const trivial_view&amp;) = default;\n  trivial_view(trivial_view&amp;&amp;) = default;\n  trivial_view() : ref(nullptr){};\n\n  trivial_view&amp; operator=(const trivial_view&amp;) = default;\n  trivial_view&amp; operator=(trivial_view&amp;&amp;) = default;\n\n  using value_type = T;\n\n  const T&amp; get() const {\n    assert(ref != nullptr);\n    return *ref;\n  }\n  const T* operator-&gt;() const {\n    assert(ref != nullptr);\n    return ref;\n  }\n};\n</code></pre> \u200b\u5728\u200bdeserilize\u200b\u65f6\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u4e86\u200bmemory_reader\u200b\u4ece\u200b\u5e8f\u5217\u5316\u200b\u7684\u200b\u5185\u5b58\u200b\u6570\u636e\u200b\u4e2d\u200b\u8bfb\u53d6\u200b\u5bf9\u8c61\u200b\u7684\u200bfield\u3002 C++<pre><code>struct memory_reader {\n  const char *now;\n  const char *end;\n  constexpr memory_reader(const char *beg, const char *end) noexcept\n      : now(beg), end(end) {}\n  bool read(char *target, size_t len) {\n    if SP_UNLIKELY (now + len &gt; end) {\n      return false;\n    }\n    memcpy(target, now, len);\n    now += len;\n    return true;\n  }\n  const char *read_view(size_t len) {\n    if SP_UNLIKELY (now + len &gt; end) {\n      return nullptr;\n    }\n    auto ret = now;\n    now += len;\n    return ret;\n  }\n  bool ignore(size_t len) {\n    if SP_UNLIKELY (now + len &gt; end) {\n      return false;\n    }\n    now += len;\n    return true;\n  }\n  std::size_t tellg() { return (std::size_t)now; }\n};\n</code></pre> \u200b\u5728\u200b\u53cd\u200b\u5e8f\u5217\u5316\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u5982\u679c\u200b\u662f\u200btrival_view\u200b\u7c7b\u578b\u200b\u5c31\u200b\u8c03\u7528\u200bread_view\uff0c\u200b\u5426\u5219\u200b\u8c03\u7528\u200bread\u3002\u200b\u4ece\u200b\u4e0a\u9762\u200b\u7684\u200bread_view\u200b\u5b9e\u73b0\u200b\u53ef\u4ee5\u200b\u770b\u51fa\u200b\uff0c\u200b\u76f8\u6bd4\u200bread\u200b\u7684\u200b\u5b9e\u73b0\u200b\uff0cread_view\u200b\u6ca1\u6709\u200b\u53d1\u751f\u200b\u5185\u5b58\u200b\u62f7\u8d1d\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u53ea\u662f\u200b\u6307\u9488\u200b\u6307\u5411\u200b\u4f4d\u7f6e\u200b\u7684\u200b\u6539\u53d8\u200b\u3002 C++<pre><code>if constexpr (is_trivial_view_v&lt;type&gt;) {\n      static_assert(view_reader_t&lt;Reader&gt;,\n                    \"The Reader isn't a view_reader, can't deserialize \"\n                    \"a trivial_view&lt;T&gt;\");\n      const char *view = reader_.read_view(sizeof(typename T::value_type));\n    ...\n}else{\n    ...\n    if SP_UNLIKELY (!reader_.read((char *)&amp;item, sizeof(type))) {\n        return struct_pack::errc::no_buffer_space;\n    }\n    ...\n}\n</code></pre><p></p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/C%2B%2B/#\u6e90\u7801\u9605\u8bfbiguana\u5982\u4f55\u5b9e\u73b0enum-reflection","title":"\u6e90\u7801\u200b\u9605\u8bfb\u200b\u2013iguana\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200benum reflection","text":"<p>\u200b\u6211\u4eec\u200b\u77e5\u9053\u200b\u901a\u8fc7\u200b\u53cd\u5c04\u200b\u53ef\u4ee5\u200b\u5728\u200b\u8fd0\u884c\u200b\u65f6\u200b\u83b7\u53d6\u200b\u7c7b\u540d\u200b\u3001\u200b\u7c7b\u578b\u200b\u7b49\u200b\u4e00\u4e9b\u200b\u4fe1\u606f\u200b\uff0c\u200b\u7136\u800c\u200bc++\u200b\u8bed\u8a00\u200b\u672c\u8eab\u200b\u6ca1\u6709\u200b\u63d0\u4f9b\u200b\u7c7b\u4f3c\u200bjava\u200b\u8fd9\u79cd\u200b\u53cd\u5c04\u200b\u673a\u5236\u200b\u3002\u200b\u5728\u200b\u9605\u8bfb\u200biguana\u200b\u5f00\u6e90\u200b\u5e93\u65f6\u200b\uff0c\u200b\u770b\u5230\u200b\u4e86\u200b\u4e00\u79cd\u200bEnumRefection\u200b\u7684\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u5206\u4eab\u200b\u7ed9\u200b\u5927\u5bb6\u200b\u3002 \u200b\u901a\u8fc7\u200b\u6a21\u677f\u200b\u4f20\u5165\u200b\u7c7b\u578b\u200bT\uff0c\u200b\u7136\u540e\u200b\u83b7\u53d6\u200b__PRETTY_FUNCTION__\u200b\u5b57\u7b26\u4e32\u200b\uff0c\u200b\u901a\u8fc7\u200bint\u200b\u9ed8\u8ba4\u200b\u7c7b\u578b\u200b\u627e\u5230\u200bT\u200b\u7c7b\u578b\u200b\u6240\u5728\u200b\u7684\u200b\u5f00\u59cb\u200b\u7ed3\u675f\u200b\u4f4d\u7f6e\u200b\uff0c\u200b\u7136\u540e\u200b\u901a\u8fc7\u200b\u5b57\u7b26\u4e32\u200b\u622a\u53d6\u200b\uff0c\u200b\u628a\u200bstring\u200b\u4fe1\u606f\u200b\u62ff\u200b\u51fa\u6765\u200b\uff0c\u200b\u4ee5\u200b\u5b9e\u73b0\u200b\u53cd\u5c04\u200b\u3002 \u200b\u5b9a\u4e49\u200b\u7684\u200b\u51fd\u6570\u200bget_raw_name\uff0c\u200b\u901a\u8fc7\u200bint\u200b\u8fdb\u884c\u200b\u6a21\u677f\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u4ee5\u540e\u200b\u8fd4\u56de\u200b\u7684\u200b\u5b57\u7b26\u4e32\u200b\u662f\u200b\uff1a std::string_view get_raw_name() [T = int]\uff0c\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u8fd9\u4e2a\u200b\u5b57\u7b26\u4e32\u200b\u4e2d\u200b\u5c31\u200b\u4fdd\u5b58\u200b\u4e86\u200bint\u200b\u7684\u200b\u7c7b\u578b\u4fe1\u606f\u200b\u3002 \u200b\u4e0b\u9762\u200b\u770b\u200b\u4e00\u4e0b\u200biguana\u200b\u5e93\u200b\u6e90\u7801\u200b\u4e2d\u200b\u7684\u200b\u5b9e\u73b0\u200b\uff0ciguana\u200b\u662f\u200b\u4e00\u4e2a\u200bc++\u200b\u5b9e\u73b0\u200b\u7684\u200b\u5e8f\u5217\u5316\u200b\u5e93\u200b\uff1a \u200b\u6e90\u7801\u200b\u5730\u5740\u200b\uff1ahttps://github1s.com/alibaba/yalantinglibs/blob/main/include/ylt/thirdparty/iguana/enum_reflection.hpp#L9-L53 \uff08\u200b\u6ce8\u200b\uff1a\u200b\u901a\u8fc7\u200b\u5728\u200bgithub.com\u200b\u4e2d\u200b\u52a0\u5165\u200b1s\uff0c\u200b\u5982\u200b\u4e0a\u9762\u200b\u7684\u200b\u94fe\u63a5\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u8fd9\u4e2a\u200b\u5de5\u5177\u200b\u6253\u5f00\u200b\u7f51\u9875\u200b\u7248\u200b\u7684\u200bvscode\u200b\u8fdb\u884c\u200b\u6e90\u7801\u200b\u9605\u8bfb\u200b\uff09 </p>C++<pre><code>template &lt;typename T&gt;\nconstexpr std::string_view get_raw_name() {\n    #ifdef _MSC_VER\n    return __FUNCSIG__;\n    #else\n    return __PRETTY_FUNCTION__;\n    #endif\n}\n\ntemplate &lt;auto T&gt;\nconstexpr std::string_view get_raw_name() {\n    #ifdef _MSC_VER\n    return __FUNCSIG__;\n    #else\n    return __PRETTY_FUNCTION__;\n    #endif\n}\n\ntemplate &lt;typename T&gt; // \u200b\u7528\u4e8e\u200b\u7c7b\u578b\u200b\ninline constexpr std::string_view type_string() {\n    constexpr std::string_view sample = get_raw_name&lt;int&gt;();\n    constexpr size_t pos = sample.find(\"int\"); // \u200b\u627e\u5230\u200b\u7c7b\u578b\u200b\u540d\u200b\u5f00\u59cb\u200b\u4f4d\u7f6e\u200b\n    constexpr std::string_view str = get_raw_name&lt;T&gt;();\n    constexpr auto next1 = str.rfind(sample[pos + 3]); // \u200b\u4ece\u53f3\u200b\u5f80\u524d\u200b\u627e\u200b\u7c7b\u578b\u200b\u7ed3\u675f\u200b\u540e\u200b\u7684\u200b\u5b57\u7b26\u200b\uff0c\u200b\u627e\u5230\u200b\u7c7b\u578b\u200b\u540d\u200b\u7ed3\u675f\u200b\u7684\u200b\u4f4d\u7f6e\u200b\n    #if defined(_MSC_VER)\n    constexpr auto s1 = str.substr(pos + 6, next1 - pos - 6);\n    #else\n    constexpr auto s1 = str.substr(pos, next1 - pos);\n    #endif\n    return s1;\n}\n\ntemplate &lt;auto T&gt; // \u200b\u7528\u4e8e\u200b\u503c\u200b\ninline constexpr std::string_view enum_string() {\n    constexpr std::string_view sample = get_raw_name&lt;int&gt;();\n    constexpr size_t pos = sample.find(\"int\");\n    constexpr std::string_view str = get_raw_name&lt;T&gt;();\n    constexpr auto next1 = str.rfind(sample[pos + 3]);\n    #if defined(__clang__) || defined(_MSC_VER)\n    constexpr auto s1 = str.substr(pos, next1 - pos);\n    #else\n    constexpr auto s1 = str.substr(pos + 5, next1 - pos - 5);\n    #endif\n    return s1;\n}\n</code></pre> \u200b\u4e0b\u9762\u200b\u901a\u8fc7\u200b\u4e00\u4e2a\u200bPerson\u200b\u7ed3\u6784\u200b\u4f53\u200b\uff0c\u200b\u4ee5\u53ca\u200benum Status\u200b\u8fdb\u884c\u200b\u7b80\u5355\u200b\u6d4b\u8bd5\u200b\uff1a C++<pre><code>struct Person{\n    std::string name;    \n    int age;\n};\n\nenum class Status{\n    Good,\n    Bad\n};\nint main(){\n\n    constexpr std::string_view sample = get_raw_name&lt;int&gt;();\n    std::cout &lt;&lt; sample &lt;&lt; std::endl;\n\n    constexpr std::string_view sample1 = get_raw_name&lt;Status::Good&gt;();\n    std::cout &lt;&lt; sample1 &lt;&lt; std::endl;\n\n    std::cout &lt;&lt; type_string&lt;float&gt;() &lt;&lt; std::endl;\n    std::cout &lt;&lt; enum_string&lt;12&gt;() &lt;&lt; std::endl;\n\n    std::cout &lt;&lt; type_string&lt;Person&gt;() &lt;&lt; std::endl;\n    std::cout &lt;&lt; enum_string&lt;Status::Good&gt;() &lt;&lt; std::endl;\n}\n</code></pre> \u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u503c\u200b\u548c\u200b\u7c7b\u578b\u200b\u7684\u200b\u53cd\u5c04\u200b\uff1a C++<pre><code>std::string_view get_raw_name() [T = int]\nstd::string_view get_raw_name() [T = Status::Good]\nfloat\n12\nPerson\nStatus::Good\n</code></pre> \u200b\u8fd0\u884c\u200b\u5de5\u5177\u200b\uff1ahttps://cpp.sh/<p></p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/C%2B%2B/#\u8865\u7801\u4e0e\u7c7b\u578b\u8f6c\u6362","title":"\u8865\u7801\u200b\u4e0e\u200b\u7c7b\u578b\u8f6c\u6362","text":"C++<pre><code>#include &lt;stdio.h&gt;\n\nint main(){\n    char a = 0b01111111;\n    // char a = 0x7f;\n\n    unsigned int b  = (unsigned int)a;\n    printf(\"%d\\n\", b); // 127\n    return 0;\n}\n</code></pre> C++<pre><code>#include &lt;stdio.h&gt;\n\nint main(){\n    { \n        char a = 0b11111111;\n        // char a = 0xff;\n\n        unsigned int b  = (unsigned int)a;\n        printf(\"%d\\n\", b); // -1\n    }\n\n    {\n        char a = 0b11111111;\n        // char a = 0xff;\n\n        int b  = (int)a;\n        printf(\"%d\\n\", b); // -1\n        return 0;\n    }\n\n    {\n        unsigned char a = 0b11111111;\n        // char a = 0xff;\n\n        int b  = a;\n        printf(\"%d\\n\", b); // 255\n        return 0;\n    }\n    return 0;\n}\n</code></pre> char\u200b\u7c7b\u578b\u200b\u662f\u200b\u6709\u200b\u7b26\u53f7\u200b\u7c7b\u578b\u200b\uff0c\u200b\u5f53\u200ba\u200b\u7684\u200b\u503c\u200b\u662f\u200b0xff\u200b\u65f6\u200b\uff0c\u200b\u6700\u9ad8\u200b\u4f4d\u65f6\u200b1\uff0c\u200b\u6839\u636e\u200b\u8865\u7801\u200b\u539f\u7406\u200b\uff0c\u200b\u8f6c\u6362\u6210\u200bunsigned int\u200b\u548c\u200bint \u200b\u65f6\u503c\u200b\u4e3a\u200b\u8d1f\u6570\u200b\uff0c\u200b\u5373\u200b-1\u3002 \u200b\u800c\u200bunsigned char\u200b\u7c7b\u578b\u200b\u662f\u200b\u65e0\u200b\u7b26\u53f7\u200b\u7c7b\u578b\u200b\uff0c\u200b\u8f6c\u6362\u6210\u200bunsigned int\u200b\u548c\u200bint \u200b\u65f6\u503c\u200b\u4e3a\u200b\u6b63\u6570\u200b255\u3002"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/C%2B%2B/#\u83b7\u53d6map\u8868","title":"\u83b7\u53d6\u200bmap\u200b\u8868","text":"<p>\u200b\u901a\u8fc7\u200b\u67e5\u9605\u200bmap\u200b\u8868\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u4e86\u89e3\u200b\u7a0b\u5e8f\u4ee3\u7801\u200b\u7684\u200b\u51fd\u6570\u200b\u5730\u5740\u200b\u4fe1\u606f\u200b\u3002 \u200b\u4ee5\u200bgcc\u200b\u4e3a\u4f8b\u200b\uff1a </p>C++<pre><code>gcc test.c -Xlinker -Map=my.map\n</code></pre><p></p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/C%2B%2B/#\u516d\u5927\u91d1\u521a","title":"\u516d\u5927\u200b\u91d1\u521a","text":"<p>https://modern-cpp.readthedocs.io/zh_CN/latest/gang_of_6.html#id7 </p>C++<pre><code>// Example program\n#include &lt;iostream&gt;\nstruct Foo {\n   Foo(int a) : p{new int(a)} {}\n\n   Foo(Foo const&amp; rhs) : p{new int(*rhs.p)} {\n        printf(\"Foo(Foo const&amp; rhs) \");\n    }\n   auto operator=(Foo const&amp; rhs) -&gt; Foo&amp; {\n       printf(\"operator=(Foo const&amp; rhs) \");\n     delete p; p = new int{*rhs.p};\n     return *this;\n   }\n\n   Foo(Foo&amp;&amp; rhs) : p{rhs.p} { \n       printf(\" Foo(Foo&amp;&amp; rhs) \");\n       rhs.p = nullptr; }\n   auto operator=(Foo&amp;&amp; rhs) -&gt; Foo&amp; {\n       printf(\"operator=(Foo&amp;&amp; rhs)\");\n\n     delete p; p = rhs.p; rhs.p = nullptr;\n     return *this;\n   }\n\n   ~Foo() { delete p; }\n\nprivate:\n   int* p;\n};\n\n\nstruct Bar : Foo {\n  using Foo::Foo;\n\n//   ~Bar() = default;\n\n//   ~Bar() { /* do something */ } // \u200b\u81ea\u5b9a\u4e49\u200b\u4e86\u6790\u6784\u200b\u51fd\u6570\u200b\uff0c\u200b\u5c31\u200b\u4e0d\u4f1a\u200b\u751f\u6210\u200b\u9ed8\u8ba4\u200b\u7684\u200bMove\u200b\u6784\u9020\u51fd\u6570\u200b\uff0c\u200b\u4f46\u662f\u200b\u4f1a\u200b\u751f\u6210\u200bCopy\u200b\u6784\u9020\u51fd\u6570\u200b\u3002\u200b\u6267\u884c\u200b\u4f1a\u200b\u6253\u5370\u200b\uff1aFoo(Foo const&amp; rhs)  \n// \uff0c\u200b\u6ce8\u91ca\u200b\u4ee5\u540e\u200b\u6267\u884c\u200b\u4f1a\u200b\u6253\u5370\u200b\uff1a Foo(Foo&amp;&amp; rhs)\n};\nint main()\n{\nBar bar{10};\nBar bar2{std::move(bar)};\n// Bar bar2(std::move(bar));\n}\n</code></pre><p></p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/C%2B%2B/#c-\u53d8\u91cf\u521d\u59cb\u5316","title":"C++ \u200b\u53d8\u91cf\u200b\u521d\u59cb\u5316","text":"C++<pre><code>#include &lt;iostream&gt;\nclass Config{\n    public:\n    Config(){\n        std::cout &lt;&lt; \"call Config ...\\n\";\n    }\n\n    Config(int _a){\n        std::cout &lt;&lt; \"call Config _a\\n\";\n        a = _a;\n    }\n    private:\n    int a;\n};\n\nint  main(){\n\n    int a;\n    Config config(a);\n\n    // Config config1(int a);\n    // config1(a);\n\n    // \u200b\u9519\u8bef\u200b\u521d\u59cb\u5316\u200b\u53d8\u91cf\u200b\uff0c\u200b\u7f16\u8bd1\u5668\u200b\u4f1a\u200b\u8ba4\u4e3a\u200b\u662f\u200b\u58f0\u660e\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u51fd\u6570\u200b\n    // warning: empty parentheses were disambiguated as a function declaration [-Wvexing-parse]\n    Config config2();\n\n    // \u200b\u6b63\u786e\u200b\u521d\u59cb\u5316\u200b\u53d8\u91cf\u200b\n    Config config3;\n\n    return 0;\n}\n</code></pre>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/C%2B%2B20%E4%B8%ADbarrier%E5%92%8Clatch%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C/","title":"C++20\u200b\u4e2d\u200bbarrier\u200b\u548c\u200blatch\u200b\u6709\u4f55\u200b\u4e0d\u540c","text":"<p><code>std::barrier</code> \u200b\u548c\u200b <code>std::latch</code> \u200b\u662f\u200b C++20 \u200b\u5f15\u5165\u200b\u7684\u200b\u540c\u6b65\u200b\u539f\u8bed\u200b\uff0c\u200b\u7528\u4e8e\u200b\u591a\u7ebf\u7a0b\u200b\u7f16\u7a0b\u200b\u4e2d\u200b\u7684\u200b\u7ebf\u7a0b\u200b\u534f\u8c03\u200b\u3002</p> <p>The class template std::barrier provides a thread-coordination mechanism that blocks a group of threads of known size until all threads in that group have reached the barrier. Unlike std::latch, barriers are reusable: once a group of arriving threads are unblocked, the barrier can be reused. Unlike std::latch, barriers execute a possibly empty callable before unblocking threads.</p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/C%2B%2B20%E4%B8%ADbarrier%E5%92%8Clatch%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C/#stdbarrier","title":"<code>std::barrier</code>","text":"<p><code>std::barrier</code> \u200b\u662f\u200b\u4e00\u4e2a\u200b\u53ef\u4ee5\u200b\u591a\u6b21\u200b\u4f7f\u7528\u200b\u7684\u200b\u540c\u6b65\u200b\u539f\u8bed\u200b\uff0c\u200b\u5141\u8bb8\u200b\u4e00\u7ec4\u200b\u7ebf\u7a0b\u200b\u5728\u200b\u67d0\u4e2a\u200b\u70b9\u200b\u8fdb\u884c\u200b\u540c\u6b65\u200b\u3002\u200b\u5b83\u200b\u7684\u200b\u4e3b\u8981\u7528\u9014\u200b\u662f\u200b\u5728\u7ebf\u200b\u7a0b\u200b\u9700\u8981\u200b\u5728\u200b\u67d0\u4e2a\u200b\u9636\u6bb5\u200b\u7b49\u5f85\u200b\u5176\u5b83\u200b\u7ebf\u7a0b\u200b\u5b8c\u6210\u200b\u67d0\u4e9b\u200b\u64cd\u4f5c\u200b\u65f6\u200b\u4f7f\u7528\u200b\u3002<code>std::barrier</code> \u200b\u7684\u200b\u4e00\u4e2a\u200b\u663e\u8457\u7279\u70b9\u200b\u662f\u200b\u5b83\u200b\u53ef\u4ee5\u200b\u88ab\u200b\u91cd\u7528\u200b\u3002</p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/C%2B%2B20%E4%B8%ADbarrier%E5%92%8Clatch%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C/#\u4f7f\u7528\u793a\u4f8b","title":"\u4f7f\u7528\u200b\u793a\u4f8b","text":"C++<pre><code>#include &lt;iostream&gt;\n#include &lt;barrier&gt;\n#include &lt;thread&gt;\n#include &lt;vector&gt;\n#include &lt;syncstream&gt;\n\nvoid task(std::barrier&lt;&gt; &amp;sync_point, int id)\n{\n\n    std::osyncstream(std::cout) &lt;&lt; \"Task \" &lt;&lt; id &lt;&lt; \" is starting.\\n\";\n\n    // \u200b\u6a21\u62df\u200b\u5de5\u4f5c\u200b\n\n    std::this_thread::sleep_for(std::chrono::milliseconds(100 * id));\n\n    std::osyncstream(std::cout) &lt;&lt; \"Task \" &lt;&lt; id &lt;&lt; \" is waiting at the barrier.\\n\";\n\n    sync_point.arrive_and_wait();\n\n    std::osyncstream(std::cout) &lt;&lt; \"Task \" &lt;&lt; id &lt;&lt; \" has passed the barrier.\\n\";\n}\n\nint main()\n{\n\n    const int num_threads = 5;\n\n    std::barrier sync_point(num_threads);\n\n    std::vector&lt;std::thread&gt; threads;\n\n    for (int i = 0; i &lt; num_threads; ++i)\n    {\n\n        threads.emplace_back(task, std::ref(sync_point), i);\n    }\n\n    for (auto &amp;t : threads)\n    {\n\n        t.join();\n    }\n\n    return 0;\n}\n</code></pre> Text Only<pre><code>g++ main.cpp -std=c++20\n</code></pre> Text Only<pre><code>Task 2 is starting.\nTask 1 is starting.\nTask 0 is starting.\nTask 3 is starting.\nTask 4 is starting.\nTask 0 is waiting at the barrier.\nTask 1 is waiting at the barrier.\nTask 2 is waiting at the barrier.\nTask 3 is waiting at the barrier.\nTask 4 is waiting at the barrier.\nTask 4 has passed the barrier.\nTask 3 has passed the barrier.\nTask 2 has passed the barrier.\nTask 1 has passed the barrier.\nTask 0 has passed the barrier.\n</code></pre>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/C%2B%2B20%E4%B8%ADbarrier%E5%92%8Clatch%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C/#stdlatch","title":"<code>std::latch</code>","text":"<p><code>std::latch</code> \u200b\u662f\u200b\u4e00\u4e2a\u200b\u4e00\u6b21\u6027\u200b\u4f7f\u7528\u200b\u7684\u200b\u540c\u6b65\u200b\u539f\u8bed\u200b\uff0c\u200b\u7528\u4e8e\u200b\u7b49\u5f85\u200b\u4e00\u7ec4\u200b\u7ebf\u7a0b\u200b\u5b8c\u6210\u200b\u4efb\u52a1\u200b\u3002\u200b\u5b83\u200b\u5728\u200b\u521d\u59cb\u5316\u200b\u65f6\u200b\u8bbe\u7f6e\u200b\u4e00\u4e2a\u200b\u8ba1\u6570\u5668\u200b\uff0c\u200b\u7ebf\u7a0b\u200b\u53ef\u4ee5\u200b\u8c03\u7528\u200b <code>count_down()</code> \u200b\u6765\u200b\u51cf\u5c11\u200b\u8ba1\u6570\u5668\u200b\uff0c\u200b\u5f53\u200b\u8ba1\u6570\u5668\u200b\u8fbe\u5230\u200b\u96f6\u65f6\u200b\uff0c\u200b\u7b49\u5f85\u200b\u7684\u200b\u7ebf\u7a0b\u200b\u5c06\u200b\u7ee7\u7eed\u6267\u884c\u200b\u3002</p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/C%2B%2B20%E4%B8%ADbarrier%E5%92%8Clatch%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C/#\u4f7f\u7528\u793a\u4f8b_1","title":"\u4f7f\u7528\u200b\u793a\u4f8b","text":"C++<pre><code>#include &lt;iostream&gt;\n\n#include &lt;latch&gt;\n\n#include &lt;thread&gt;\n\n#include &lt;vector&gt;\n\n#include &lt;syncstream&gt;\n\nvoid task(std::latch &amp;sync_point, int id)\n{\n\n    std::osyncstream(std::cout) &lt;&lt; \"Task \" &lt;&lt; id &lt;&lt; \" is starting.\\n\";\n\n    // \u200b\u6a21\u62df\u200b\u5de5\u4f5c\u200b\n\n    std::this_thread::sleep_for(std::chrono::milliseconds(100 * id));\n\n    std::osyncstream(std::cout) &lt;&lt; \"Task \" &lt;&lt; id &lt;&lt; \" is done.\\n\";\n\n    sync_point.count_down();\n}\n\nint main()\n{\n\n    const int num_threads = 5;\n\n    std::latch sync_point(num_threads);\n\n    std::vector&lt;std::thread&gt; threads;\n\n    for (int i = 0; i &lt; num_threads; ++i)\n    {\n\n        threads.emplace_back(task, std::ref(sync_point), i);\n    }\n\n    sync_point.wait(); // \u200b\u7b49\u5f85\u200b\u6240\u6709\u200b\u7ebf\u7a0b\u200b\u5b8c\u6210\u200b\n\n    for (auto &amp;t : threads)\n    {\n\n        t.join();\n    }\n\n    std::osyncstream(std::cout) &lt;&lt; \"All tasks have completed.\\n\";\n\n    return 0;\n}\n</code></pre> Text Only<pre><code> Task 0 is starting.\nTask 1 is starting.\nTask 2 is starting.\nTask 3 is starting.\nTask 0 is done.\nTask 4 is starting.\nTask 1 is done.\nTask 2 is done.\nTask 3 is done.\nTask 4 is done.\nAll tasks have completed.\n</code></pre>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/C%2B%2B20%E4%B8%ADbarrier%E5%92%8Clatch%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C/#\u603b\u7ed3","title":"\u603b\u7ed3","text":"<ul> <li><code>std::barrier</code> \u200b\u7528\u4e8e\u200b\u53ef\u200b\u91cd\u590d\u4f7f\u7528\u200b\u7684\u200b\u540c\u6b65\u200b\uff0c\u200b\u5141\u8bb8\u200b\u7ebf\u7a0b\u200b\u5728\u200b\u591a\u4e2a\u200b\u9636\u6bb5\u200b\u8fdb\u884c\u200b\u534f\u8c03\u200b\u3002</li> <li><code>std::latch</code> \u200b\u7528\u4e8e\u200b\u4e00\u6b21\u6027\u200b\u540c\u6b65\u200b\uff0c\u200b\u901a\u5e38\u200b\u7528\u4e8e\u200b\u7b49\u5f85\u200b\u4e00\u7ec4\u200b\u7ebf\u7a0b\u200b\u5b8c\u6210\u200b\u67d0\u4e2a\u200b\u4efb\u52a1\u200b\u3002</li> </ul>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/FileIO%E7%A4%BA%E4%BE%8B/","title":"FileIO\u200b\u793a\u4f8b","text":""},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/FileIO%E7%A4%BA%E4%BE%8B/#file-io-functions","title":"File IO Functions","text":"C++<pre><code>#include &lt;fstream&gt;\n#include &lt;vector&gt;\n#include &lt;string&gt;\n#include &lt;cstring&gt;\n#include &lt;climits&gt;\n#include &lt;sys/stat.h&gt;\n\nclass FileIO {\npublic:\n    static bool isFileExist(const std::string &amp;filename) {\n        std::ifstream file(filename);\n        return file.good();\n    }\n\n    static bool deleteFile(const std::string &amp;filename) {\n        if (!isFileExist(filename)) {\n            LOG(ERROR) &lt;&lt; \"delete file : \" &lt;&lt; filename &lt;&lt; \" does not exist\";\n            return false;\n        }\n        if (std::remove(filename.c_str()) != 0) {\n            LOG(ERROR) &lt;&lt; \"delete file : \" &lt;&lt; filename &lt;&lt; \" failed\";\n            return false;\n        }\n        return true;\n    }\n\n    static bool writeToFile(const std::string &amp;filename, const std::string &amp;data) {\n        if (isFileExist(filename)) {\n            LOG(ERROR) &lt;&lt; \"write file : \" &lt;&lt; filename &lt;&lt; \" already exist\";\n            return false;\n        }\n        std::ofstream file(filename, std::ios::out | std::ios::binary);\n        if (file) {\n            file.write(data.c_str(), data.size());\n            file.close();\n            return true;\n        }\n        return false;\n    }\n\n    /*\n     * replace ~ to home dir path\n     * */\n    static bool getFilePath(const std::string &amp;filename, std::string &amp;filePath) {\n        const char *homePath = getenv(\"HOME\");\n        if (homePath == nullptr) {\n            std::cerr &lt;&lt; \"Unable to retrieve HOME environment variable\" &lt;&lt; std::endl;\n            return false;\n        }\n\n        filePath = filename;\n        if (filename[0] == '~') {\n            filePath.replace(0, 1, homePath);\n        }\n        return true;\n    }\n\n\n    static bool createDirectory(const std::string &amp;path_str) {\n        struct stat info{};\n\n        auto path = path_str.c_str();\n        if (stat(path, &amp;info) != 0) {  // \u200b\u68c0\u67e5\u200b\u6587\u4ef6\u5939\u200b\u662f\u5426\u200b\u5df2\u7ecf\u200b\u5b58\u5728\u200b\n            if (mkdir(path, S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH) == 0) {\n                LOG(INFO) &lt;&lt; \"\u200b\u6587\u4ef6\u5939\u200b\u521b\u5efa\u200b\u6210\u529f\u200b\uff01\";\n                return true;\n            } else {\n                LOG(INFO) &lt;&lt; \"\u200b\u6587\u4ef6\u5939\u200b\u521b\u5efa\u200b\u5931\u8d25\u200b\uff01\";\n                return false;\n            }\n        } else {\n            LOG(INFO) &lt;&lt; \"\u200b\u6587\u4ef6\u5939\u200b\u5df2\u7ecf\u200b\u5b58\u5728\u200b\uff0c\u200b\u65e0\u9700\u200b\u521b\u5efa\u200b\uff01\";\n            return true;\n        }\n    }\n\n    static bool writeToFile(const std::string &amp;filename, const std::vector&lt;unsigned char&gt; &amp;data) {\n        if (isFileExist(filename)) {\n            LOG(ERROR) &lt;&lt; \"write file : \" &lt;&lt; filename &lt;&lt; \" already exist\";\n            return false;\n        }\n        std::ofstream file(filename, std::ios::out | std::ios::binary);\n        if (file) {\n            file.write(reinterpret_cast&lt;const char *&gt;(data.data()), data.size());\n            file.close();\n            return true;\n        }\n        return false;\n    }\n\n    static bool readFromFile(const std::string &amp;filename, std::string &amp;outData) {\n        std::ifstream file(filename, std::ios::in | std::ios::binary);\n        if (file) {\n            outData.assign(std::istreambuf_iterator&lt;char&gt;(file), std::istreambuf_iterator&lt;char&gt;());\n            file.close();\n            return true;\n        }\n        return false;\n    }\n\n    static bool readBytesFromFile(const std::string &amp;filename, std::vector&lt;unsigned char&gt; &amp;outData) {\n        std::ifstream file(filename, std::ios::in | std::ios::binary);\n        if (file) {\n            outData.assign(std::istreambuf_iterator&lt;char&gt;(file), std::istreambuf_iterator&lt;char&gt;());\n            file.close();\n            return true;\n        }\n        return false;\n    }\n};\n</code></pre>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/Handle%20abort%20signal/","title":"Handle abort signal","text":"C++<pre><code>#include &lt;csetjmp&gt;\n#include &lt;csignal&gt;\n#include &lt;cstdlib&gt;\n#include &lt;iostream&gt;\n#include &lt;dlfcn.h&gt;\n\njmp_buf env;\n\nvoid on_sigabrt(int signum) {\n    signal(signum, SIG_DFL);\n    longjmp(env, 1);\n}\n\nvoid try_and_catch_abort(void (*func)(void)) {\n    if (setjmp (env) == 0) {\n        signal(SIGABRT, &amp;on_sigabrt);\n        (*func)();\n        signal(SIGABRT, SIG_DFL);\n    } else {\n        std::cout &lt;&lt; \"aborted\\n\";\n    }\n}\n\nvoid do_stuff_aborted() {\n    std::cout &lt;&lt; \"step 1\\n\";\n    abort();\n    std::cout &lt;&lt; \"step 2\\n\";\n}\n\nvoid do_stuff() {\n    std::cout &lt;&lt; \"step 1\\n\";\n    std::cout &lt;&lt; \"step 2\\n\";\n}\n\nvoid load_so() {\n    typedef int (*some_func)(int);\n\n    void *myso = dlopen(\"libdemo_so.so\",\n                        RTLD_NOW);\n    auto func = (int (*)(int)) dlsym(myso, \"hello\");\n    auto res = func(10);\n    std::cout &lt;&lt; \"res is : \" &lt;&lt; res &lt;&lt; std::endl;\n    dlclose(myso);\n}\n\nint main() {\n//    try_and_catch_abort(&amp;do_stuff_aborted);\n//    try_and_catch_abort(&amp;do_stuff);\n//    do_stuff_aborted();\n\n//    try_and_catch_abort(&amp;load_so);\n    load_so();\n    do_stuff();\n}\n</code></pre> C++<pre><code>#include &lt;iostream&gt;\n\nextern \"C\" int hello(int num) {\n    std::cout &lt;&lt; \"num is : \" &lt;&lt; num &lt;&lt; std::endl;\n\n    abort();\n    return num - 1;\n}\n</code></pre> Text Only<pre><code>cmake_minimum_required(VERSION 3.24)\nproject(untitled)\n\nset(CMAKE_CXX_STANDARD 17)\n\nadd_executable(untitled main.cpp)\ntarget_link_libraries(untitled dl)\nset(CMAKE_POSITION_INDEPENDENT_CODE ON)\n\nadd_library(demo_so SHARED demo_so.cpp)\n</code></pre> <p>setjump and  longjump \u200b\u7528\u6cd5\u200b</p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/RapidJSON/","title":"RapidJSON","text":""},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/RapidJSON/#\u5e8f\u5217\u5316map-\u4e0enlohmann-json\u8f93\u51fa\u76f8\u540c","title":"\u5e8f\u5217\u5316\u200bMap, \u200b\u4e0e\u200bnlohmann json\u200b\u8f93\u51fa\u200b\u76f8\u540c","text":"C++<pre><code>#include &lt;map&gt;\n#include \"rapidjson/document.h\"\n#include \"rapidjson/writer.h\"\n#include \"rapidjson/stringbuffer.h\"\n\nusing namespace rapidjson;\nusing rapidjson::StringBuffer;\nusing rapidjson::Writer;\nusing namespace rapidjson;\n\nvoid serializeMaps(const std::map&lt;int, std::string&gt; &amp;m, rapidjson::Writer &lt;rapidjson::StringBuffer&gt; *writer) {\n    writer-&gt;StartArray();\n    for (std::map&lt;int, std::string&gt;::const_iterator it = m.begin(); it != m.end(); ++it){\n        writer-&gt;StartArray();\n        writer-&gt;Int(it-&gt;first);\n        writer-&gt;String(it-&gt;second.c_str());\n        writer-&gt;EndArray();\n    }\n    writer-&gt;EndArray();\n}\n\nint main() {\n    std::map&lt;int, std::string&gt; m;\n    m.emplace(1, \"111\");\n    m.emplace(2, \"222\");\n\n    StringBuffer sb;\n    Writer&lt;StringBuffer&gt; writer(sb);\n\n    writer.StartObject();\n    writer.Key(\"m\");\n    serializeMaps(m, &amp;writer);\n    writer.EndObject();\n\n    puts(sb.GetString());\n}\n</code></pre>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/Vector%E4%B8%8E%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E7%A4%BA%E4%BE%8B/","title":"Vector\u200b\u4e0e\u200b\u5e38\u7528\u200b\u6570\u636e\u200b\u7c7b\u578b\u8f6c\u6362\u200b\u793a\u4f8b","text":""},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/Vector%E4%B8%8E%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E7%A4%BA%E4%BE%8B/#convert-functions","title":"Convert Functions","text":"<p>\u200b\u4e00\u4e2a\u200b\u5404\u79cd\u200b\u5e38\u7528\u200b\u6570\u636e\u7c7b\u578b\u200b\u548c\u200bVector\u200b\u4e92\u76f8\u200b\u8f6c\u6362\u200b\u7684\u200b\u4f8b\u5b50\u200b\uff1a </p>C++<pre><code>#include &lt;vector&gt;\n#include &lt;memory&gt;\n#include &lt;cstring&gt;\ntemplate&lt;typename T&gt;\nT VecToType(const std::vector&lt;unsigned char&gt; &amp;vec) {\n    if (sizeof(T) != vec.size()) {\n        throw std::runtime_error(\"vec2type failed: sizeof(T) != vec.size()\");\n    }\n    T t;\n    std::memcpy(&amp;t, vec.data(), sizeof(T));\n    return std::move(t);\n}\n\ntemplate&lt;typename T&gt;\nstd::vector&lt;unsigned char&gt; TypeToVec(const T &amp;data) {\n    std::vector&lt;unsigned char&gt; ret;\n    ret.resize(sizeof(data));\n    memcpy(ret.data(), &amp;data, sizeof(data));\n    return ret;\n}\n\ntemplate&lt;class T&gt;\nstatic inline std::vector&lt;unsigned char&gt; toVector(const T &amp;data) {\n    std::vector&lt;unsigned char&gt; ret;\n    ret.resize(sizeof(T));\n    memcpy(ret.data(), &amp;data, sizeof(T));\n    return ret;\n}\n\ntemplate&lt;&gt;\ninline std::vector&lt;unsigned char&gt; toVector(const std::string &amp;data) {\n    return {data.begin(), data.end()};\n}\n\n\ntemplate&lt;typename T&gt;\nstatic inline T toType( std::vector&lt;unsigned char&gt; data) {\n    return *reinterpret_cast&lt;T *&gt;(data.data());\n}\n\ntemplate&lt;&gt;\ninline std::string toType(std::vector&lt;unsigned char&gt; data) {\n    return {data.begin(), data.end()};\n}\n</code></pre><p></p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/c%2B%2B%20macro/","title":"C++ macro","text":"C++<pre><code>#include &lt;iostream&gt;\n\n#define GET_NTH_ARG(_1, _2, _3, _4, _5, _6, _7, _8, n, ...) n\n//#define GET_ARG_COUNT(...) GET_NTH_ARG(__VA_ARGS__, 8, 7, 6, 5, 4, 3, 2, 1)\n#define GET_ARG_COUNT(args...) GET_NTH_ARG(args, 8, 7, 6, 5, 4, 3, 2, 1)\n\n#define REPEAT_1(f, i, arg) f(i, arg)\n#define REPEAT_2(f, i, arg, ...) f(i, arg) REPEAT_1(f, i+1, __VA_ARGS__)\n#define REPEAT_3(f, i, arg, ...) f(i, arg) REPEAT_2(f, i+1, __VA_ARGS__)\n#define REPEAT_4(f, i, arg, ...) f(i, arg) REPEAT_3(f, i+1, __VA_ARGS__)\n#define REPEAT_5(f, i, arg, ...) f(i, arg) REPEAT_4(f, i+1, __VA_ARGS__)\n#define REPEAT_6(f, i, arg, ...) f(i, arg) REPEAT_5(f, i+1, __VA_ARGS__)\n#define REPEAT_7(f, i, arg, ...) f(i, arg) REPEAT_6(f, i+1, __VA_ARGS__)\n#define REPEAT_8(f, i, arg, ...) f(i, arg) REPEAT_7(f, i+1, __VA_ARGS__)\n\n#define hello_f(_i, arg) puts(arg);\n\n\n//struct Point {\n//    template&lt;typename, size_t&gt;\n//    struct FIELD;\n//\n//    static constexpr size_t _filed_count_ = 2;\n//    double x;\n//\n//    template&lt;typename T&gt;\n//    struct FIELD&lt;T, 0&gt; {\n//        T &amp;obj;\n//\n//        auto value() -&gt; decltype(auto) {\n//            return (obj.x);\n//        }\n//\n//        static constexpr const char *name() {\n//            return \"x\";\n//        }\n//    };\n//\n//    double y;\n//    template&lt;typename T&gt;\n//    struct FIELD&lt;T, 1&gt; {\n//        T &amp;obj;\n//\n//        auto value() -&gt; decltype(auto) {\n//            return (obj.y);\n//        }\n//\n//        static constexpr const char *name() {\n//            return \"y\";\n//        }\n//    };\n//};\n\n\n#define PARE(...) __VA_ARGS__\n#define PAIR(x) PARE x\n\n#define EAT(...)\n#define STRIP(x) EAT x\n\n#define PASTE(x, y) CONCATE(x, y)\n#define CONCATE(x, y) x##y\n\n#define STRING(x) \"x\"\n\n#define FIELD_EACH(i, arg) \\\n    PAIR(arg);              \\\n    template &lt;typename T&gt;  \\\n    struct FIELD&lt;T, i&gt; {   \\\n        T &amp;obj;            \\\n        auto value() -&gt; decltype(auto) {return (obj.STRIP(arg));} \\\n        static constexpr const char * name() {return STRING(STRIP(arg));} \\\n    };\n\n#define DEFINE_SCHEMA(st, ...) \\\n    struct st {                \\\n        template &lt;typename, size_t&gt; struct FIELD; \\\n        static constexpr size_t _filed_count_ = GET_ARG_COUNT(__VA_ARGS__); \\\n        PASTE(REPEAT_, GET_ARG_COUNT(__VA_ARGS__)) (FIELD_EACH, 0, __VA_ARGS__)\\\n    };\n\nDEFINE_SCHEMA(Point, (double) x, (double) y)\n\nint main() {\n//    std::cout &lt;&lt; GET_ARG_COUNT(a, b, c) &lt;&lt; std::endl;\n//    REPEAT_3(hello_f, 0, \"hello\", \"wold\", \"!\")\n\n    return 0;\n}\n</code></pre>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/c%2B%2B%E6%98%93%E9%94%99%E4%BB%A3%E7%A0%81%E6%9D%82%E8%AE%B0/","title":"C++\u200b\u6613\u9519\u200b\u4ee3\u7801\u200b\u6742\u8bb0","text":"C++<pre><code>std::vector&lt;int&gt; mi{1,2,2};\nauto s = mi.size();\n// vector \u200b\u7684\u200bsize()\u200b\u51fd\u6570\u200b\u8fd4\u56de\u200b\u7684\u200b\u662f\u200bunsigne Long\u200b\u578b\u200b\nfor(auto i = s -1; i &gt;= 0;i--){\n    std::cout &lt;&lt; i &lt;&lt; std::endl;\n}\n</code></pre> Text Only<pre><code>2\n1\n0\n18446744073709551615\n18446744073709551614\n18446744073709551613\n18446744073709551612\n...\n</code></pre>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/c%2B%2B%E7%BC%96%E8%AF%91%E4%B8%AD%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E7%9A%84%E5%BC%95%E5%85%A5/","title":"C++\u200b\u7f16\u8bd1\u200b\u4e2d\u200b\u7b2c\u4e09\u65b9\u200b\u5e93\u200b\u7684\u200b\u5f15\u5165","text":"<p>\u200b\u5728\u200bc++\u200b\u5f00\u53d1\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u907f\u514d\u200b\u4e0d\u4e86\u200b\u5f15\u5165\u200b\u7b2c\u4e09\u65b9\u200b\u5e93\u200b\uff0c\u200b\u6bd4\u5982\u200b\u89c6\u9891\u200b\u8bfb\u53d6\u200b\u3001\u200b\u56fe\u7247\u200b\u7f16\u8f91\u200b\u9700\u8981\u200b\u5f15\u5165\u200bopencv\u200b\u5e93\u200b\uff0copencv\u200b\u7684\u200b\u89c6\u9891\u200b\u5904\u7406\u200b\u9700\u8981\u200bffmpeg\uff08\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u9009\u62e9\u200bgstreamer\u200b\u7b49\u200b\u5f15\u64ce\u200b\uff09\uff0c\u200b\u800c\u200bjson\u200b\u5904\u7406\u200b\uff0c\u200b\u9700\u8981\u200b\u5f15\u5165\u200bjsoncpp\u200b\u7b49\u200bjson\u200b\u5e93\u200b\u3002 \u200b\u5f53\u200b\u7a0b\u5e8f\u200b\u9700\u8981\u200b\u7f16\u8bd1\u200b\u6253\u5305\u200b\u6210\u200b\u53ef\u6267\u884c\u6587\u4ef6\u200b\u4ee5\u53ca\u200b\u52a8\u6001\u94fe\u63a5\u5e93\u200b\uff0c\u200b\u7136\u540e\u200b\u5230\u200b\u53e6\u4e00\u53f0\u200b\u673a\u5668\u200b\u4e0a\u200b\u8fd0\u884c\u200b\u65f6\u200b\uff0c\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u51fa\u73b0\u200b\u4e00\u4e9b\u200b\u95ee\u9898\u200b\u3002\u200b\u6bd4\u5982\u200b\uff1a</p> <ol> <li>\u200b\u52a8\u6001\u94fe\u63a5\u5e93\u200b\u7248\u672c\u200b\u4e0d\u200b\u5339\u914d\u200b\uff0c\u200b\u5728\u200b\u5f00\u53d1\u200b\u673a\u4e0a\u200b\u4f7f\u7528\u200b\u4e86\u200bjsoncpp1.9.5\u200b\u7248\u672c\u200b\uff0c\u200b\u4f46\u662f\u200b\u5728\u200b\u90e8\u7f72\u200b\u673a\u4e0a\u200b\u4f7f\u7528\u200b\u4e86\u200bjsoncpp1.7.4\u200b\u7248\u672c\u200b\uff0c\u200b\u90a3\u4e48\u200b\u7a0b\u5e8f\u200b\u5728\u200b\u6267\u884c\u200b\u65f6\u200b\uff0c\u200b\u52a8\u6001\u200b\u94fe\u63a5\u200b\u5c31\u200b\u4f1a\u200b\u62a5\u9519\u200b\u627e\u200b\u4e0d\u5230\u200blibjsoncpp.so.xx\u200b\u7684\u200b\u6587\u4ef6\u200b\u3002opencv\u200b\u7b49\u5e93\u200b\u540c\u6837\u200b\u4e5f\u200b\u5b58\u5728\u200b\u8fd9\u6837\u200b\u7684\u200b\u95ee\u9898\u200b\uff0c\u200b\u6bd4\u5982\u200bopencv3\u200b\u548c\u200bopencv4\u200b\u7248\u672c\u200b\u7684\u200b\u4e0d\u540c\u200b\u3002</li> <li>\u200b\u5f53\u200b\u9047\u5230\u200b\u7248\u672c\u200b\u4e0d\u200b\u5339\u914d\u200b\u65f6\u200b\uff0c\u200b\u5f80\u5f80\u200b\u9009\u62e9\u200b\u5378\u8f7d\u200b\u5f53\u524d\u200b\u7248\u672c\u200b\uff0c\u200b\u5b89\u88c5\u200b\u5339\u914d\u200b\u7684\u200b\u7248\u672c\u200b\u3002\u200b\u4f46\u662f\u200b\uff0c\u200b\u5982\u679c\u200b\u6ca1\u6709\u200b\u4f7f\u7528\u200b\u6b63\u786e\u200b\u7684\u200b\u5378\u8f7d\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u6bd4\u5982\u200b\u53ea\u662f\u200b\u53bb\u200b/usr/local/lib\u200b\u4e2d\u200b\u5220\u9664\u200b\u4e86\u200b.so\u200b\u548c\u200b.a\u200b\u6587\u4ef6\u200b\uff0c/usr/local/include\u200b\u6216\u8005\u200b\u5176\u4ed6\u200b\u76ee\u5f55\u200b\u4e2d\u200b\u539f\u6765\u200b\u7684\u200b\u5934\u6587\u4ef6\u200b\u8fd8\u200b\u5b58\u5728\u200b\u3002\u200b\u7136\u540e\u200b\u5b89\u88c5\u200b\u4e86\u200b\u5339\u914d\u200b\u7248\u672c\u200b\u5728\u200b\u67d0\u4e2a\u200b\u76ee\u5f55\u200b\uff0c\u200b\u7f16\u8bd1\u7a0b\u5e8f\u200b\u65f6\u200b\uff0c\u200b\u5982\u679c\u200b\u9996\u5148\u200b\u627e\u5230\u200b\u7684\u200b\u8fd8\u662f\u200b\u539f\u6765\u200b\u7684\u200b\u5934\u6587\u4ef6\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5c31\u200b\u4f1a\u200b\u62a5\u9519\u200b\uff1a\u200b\u672a\u5b9a\u4e49\u200b\u7684\u200bxxx\uff08undefined\uff09\uff0c\u200b\u8fd9\u4e2a\u200b\u65f6\u5019\u200b\u4e0d\u662f\u200b\u56e0\u4e3a\u200b\u6ca1\u6709\u200b\u627e\u5230\u200bso\uff08\u200b\u662f\u56e0\u4e3a\u200b\u627e\u9519\u200b\u4e86\u200b\u5934\u6587\u4ef6\u200b\uff09\u3002\u200b\u89e3\u51b3\u200b\u65b9\u5f0f\u200b:\u200b\u5220\u9664\u200b\u4e4b\u524d\u200b\u7248\u672c\u200b\u7684\u200b\u5934\u6587\u4ef6\u200b\u3002</li> <li>\u200b\u5728\u200b\u4e0d\u540c\u200b\u7684\u200b\u5f00\u53d1\u200b\u5e73\u53f0\u200b\u4e0a\u200b\uff0c\u200b\u5b89\u88c5\u200b\u7b2c\u4e09\u65b9\u200b\u5e93\u200b\u7684\u200b\u65b9\u5f0f\u200b\u4e0d\u200b\u4e00\u6837\u200b\u3002\u200b\u4ee5\u200bubuntu\u200b\u5f00\u53d1\u200b\u4e3a\u4f8b\u200b\uff0c\u200b\u5728\u200bubuntu20.04\u200b\u4ee5\u53ca\u200b\u4ee5\u540e\u200b\u7248\u672c\u200b\u4e2d\u200b\u5f80\u5f80\u200b\u53ef\u4ee5\u200b\u76f4\u63a5\u200b\u91c7\u7528\u200bapt\u200b\u65b9\u5f0f\u200b\u5b89\u88c5\u200b\uff08\u200b\u6bd4\u5982\u200b:apt install opencv\uff09\uff0c\u200b\u800c\u200b\u5728\u200bubuntu18.04\u200b\u4ee5\u53ca\u200b\u4ee5\u4e0b\u200b\u7248\u672c\u200b\u4e2d\u200b\uff0c\u200b\u5f80\u5f80\u200b\u9700\u8981\u200b\u6e90\u7801\u200b\u7f16\u8bd1\u200b\u5b89\u88c5\u200b\uff08sudo apt install python3-opencv\u200b\u7684\u200b\u65b9\u5f0f\u200b\u5b89\u88c5\u200b\u7684\u200b\u529f\u80fd\u200b\u4e0d\u5168\u200b\uff09\u3002\u200b\u4f46\u662f\u200b\u4f7f\u7528\u200b\u6e90\u7801\u200b\u8fdb\u884c\u200b\u7f16\u8bd1\u200b\u5b89\u88c5\u200b\u7f16\u8bd1\u200b\u8017\u65f6\u200b\u4e14\u200b\u9ebb\u70e6\u200b\uff0c\u200b\u591a\u4e2a\u200b\u7248\u672c\u200b\u5207\u6362\u200b\u4e0d\u200b\u65b9\u4fbf\u200b\u3002\u200b\u8fd9\u4e2a\u200b\u65f6\u5019\u200b\u9700\u8981\u200b\u4f7f\u7528\u200b\u5305\u200b\u7ba1\u7406\u5de5\u5177\u200b\uff0cc++\u200b\u5e73\u53f0\u200b\u7684\u200b\u5305\u200b\u7ba1\u7406\u5de5\u5177\u200b\u6bd4\u5982\u200bconan\u3002</li> <li>\u200b\u5728\u200b\u4f7f\u7528\u200bopencv\u200b\u65f6\u200b\uff0c\u200b\u5982\u679c\u200b\u51fa\u73b0\u200bcv::videocapture\u200b\u65f6\u200b\uff0c\u200b\u53d1\u73b0\u200bopen\u200b\u51fd\u6570\u200b\u4e0d\u80fd\u200b\u6253\u5f00\u200b\u89c6\u9891\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u8003\u8651\u200bffmpeg\u200b\u5b89\u88c5\u200b\u9519\u8bef\u200b\uff0c\u200b\u6216\u8005\u200b\u5f00\u53d1\u200b\u673a\u4e0a\u200b\u5b58\u5728\u200b\u591a\u4e2a\u200bffmpeg\u200b\u7248\u672c\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u65f6\u5019\u200b\u9996\u5148\u200b\u9700\u8981\u200b\u89e3\u51b3\u200bffmpeg\u200b\u7684\u200b\u7248\u672c\u200b\u51b2\u7a81\u200b\u3002\u200b\u67e5\u770b\u200b\u673a\u5668\u200b\u4e0a\u200b\u7684\u200bffmpeg\u200b\u60c5\u51b5\u200b\uff0c\u200b\u6700\u200b\u7b80\u5355\u200b\u7684\u200b\u6682\u65f6\u200b\u5c06\u200b\u51b2\u7a81\u200b\u7684\u200bffmpeg\u200b\u76ee\u5f55\u200b\u6539\u200b\u4e00\u4e2a\u200b\u540d\u5b57\u200b\u3002</li> </ol> <p></p>Text Only<pre><code>whereis ffmpeg\nwhich ffmpeg\n</code></pre> \u200b\u524d\u9762\u200b\u63d0\u5230\u200b\u4e86\u200b\u4f7f\u7528\u200b\u5305\u200b\u7ba1\u7406\u5de5\u5177\u200b\uff0c\u200b\u5728\u200bwindows\u200b\u4e0a\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200bvcpkg\uff0c\u200b\u5728\u200blinux\u200b\u5e73\u53f0\u200b\u4e0a\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200bconan\uff0c\u200b\u7c7b\u4f3c\u200bpython\u200b\u7684\u200bpip\u200b\u5305\u200b\u7ba1\u7406\u5de5\u5177\u200b\u3002\u200b\u6211\u200b\u53ea\u200b\u4f7f\u7528\u200b\u8fc7\u200bconan\uff0c\u200b\u56e0\u6b64\u200b\u5bf9\u200bconan\u200b\u505a\u200b\u4e00\u4e0b\u200b\u4f7f\u7528\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u7684\u200b\u5206\u4eab\u200b\u3002<p></p> <ul> <li>conan\u200b\u5305\u200b\u7ba1\u7406\u5de5\u5177\u200b</li> </ul> <p>conan\u200b\u53ef\u4ee5\u200b\u5728\u200b\u9879\u76ee\u200b\u4e2d\u200b\u5f88\u200b\u65b9\u4fbf\u200b\u7684\u200b\u5207\u6362\u200b\u591a\u4e2a\u200b\u7248\u672c\u200b\u7b2c\u4e09\u65b9\u200b\u5e93\u200b\uff0c\u200b\u800c\u200b\u6240\u6709\u200b\u7684\u200b\u7b2c\u4e09\u65b9\u200b\u5e93\u200b\u90fd\u200b\u53ea\u4f1a\u200b\u5b58\u5728\u200b\u4e00\u6b21\u200b\u5728\u200b\u672c\u5730\u200b\u7684\u200b\u4e00\u4e2a\u200b\u7edf\u4e00\u200b\u76ee\u5f55\u200b\u4e0b\u200b\uff0c\u200b\u6bd4\u5982\u200b.conan\u200b\u76ee\u5f55\u200b\u4e2d\u200b\u3002\u200b\u800c\u4e14\u200b\u4f7f\u7528\u200bconnan search\u200b\u53ef\u4ee5\u200b\u641c\u7d22\u200b\u5230\u200b\u6709\u200b\u54ea\u4e9b\u200b\u5305\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\uff0c\u200b\u907f\u514d\u200b\u4e86\u200b\u6e90\u7801\u200b\u7f16\u8bd1\u200b\u8017\u8d39\u200b\u592a\u200b\u591a\u200b\u65f6\u95f4\u200b\u7684\u200b\u95ee\u9898\u200b\u3002\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u597d\u5904\u200b\u662f\u200bconan\u200b\u53ef\u4ee5\u200b\u5f88\u200b\u65b9\u4fbf\u200b\u7684\u200b\u548c\u200bcmake\u200b\u7b49\u200b\u7f16\u8bd1\u200b\u6784\u5efa\u200b\u7cfb\u7edf\u200b\u7ed3\u5408\u200b\uff0c\u200b\u7279\u522b\u200b\u662f\u200bconan2.0\u200b\u4e0d\u200b\u9700\u8981\u200b\u4fb5\u5165\u200bCmakeLists.txt\u200b\u6587\u4ef6\u200b\uff0c\u200b\u53ea\u200b\u9700\u8981\u200b\u5355\u72ec\u200b\u589e\u52a0\u200b\u4e00\u4e2a\u200bconanfile.txt\u200b\u6216\u8005\u200bconanfile.py\u200b\u6587\u4ef6\u200b\u3002</p> <p></p>Text Only<pre><code>conan search \"opencv\"\n\u200b\u7ed3\u679c\u200b\uff1a\nconancenter\n  opencv\n    opencv/2.4.13.7\n    opencv/3.4.12\n    opencv/3.4.17\n    opencv/4.1.2\n    opencv/4.5.0\n    opencv/4.5.1\n    opencv/4.5.2\n    opencv/4.5.3\n    opencv/4.5.5\n</code></pre> conanfile.txt\u200b\u6587\u4ef6\u200b\u793a\u4f8b\u200b\uff1a<p></p> <p></p>Text Only<pre><code>[requires]\njsoncpp/1.9.5\nopencv/3.4.12\n\n[generators]\nCMakeDeps\nCMakeToolchain\n</code></pre> \u200b\u5728\u200bconan2.0\u200b\u4e2d\u200b\u4e0d\u200b\u9700\u8981\u200b\u5bf9\u200bCmakeLists.txt\u200b\u505a\u200b\u4efb\u4f55\u200b\u66f4\u6539\u200b\uff0c\u200b\u9996\u5148\u200b\u6839\u636e\u200bconanfile\u200b\u4e0b\u8f7d\u200b\u4f9d\u8d56\u200b:<p></p> <p></p>Text Only<pre><code>conan install . --output-folder=build --build=missing\n</code></pre> \u200b\u7136\u540e\u200b\u518d\u200b\u7f16\u8bd1\u200bcmake\u200b\u65f6\u200b\uff0c\u200b\u901a\u8fc7\u200b-D\u200b\u9009\u9879\u200b\u4f7f\u7528\u200bbuild\u200b\u6587\u4ef6\u200b\u4e0b\u200bconan\u200b\u751f\u6210\u200b\u7684\u200b\u4f9d\u8d56\u200b\u6587\u4ef6\u200b:<p></p> <p></p>Text Only<pre><code>$ cd build\n$ cmake .. -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release\n$ cmake --build .\n</code></pre> \u200b\u53c2\u8003\u200b\uff1ahttps://docs.conan.io/2/tutorial/consuming_packages/build_simple_cmake_project.html \u200b\u5f53\u7136\u200b\uff0cconan\u200b\u8fd8\u6709\u200b\u5f88\u591a\u200b\u9ad8\u7ea7\u200b\u7684\u200b\u529f\u80fd\u200b\uff0c\u200b\u6bd4\u5982\u200b\u4f7f\u7528\u200bconanfile.py\u200b\u53ef\u4ee5\u200b\u81ea\u5b9a\u4e49\u200b\u7f16\u8bd1\u200b\u7684\u200b\u903b\u8f91\u200b\uff0c\u200b\u6bd4\u5982\u200b\u533a\u5206\u200b\u4e0d\u540c\u200b\u7684\u200b\u5e73\u53f0\u200b\u5904\u7406\u200b\u4e0d\u540c\u200b\u7684\u200b\u7f16\u8bd1\u200b\u903b\u8f91\u200b\u7b49\u200b\u3002\u200b\u5728\u200b\u4e0d\u540c\u200b\u7a0b\u5e8f\u8bed\u8a00\u200b\u4e2d\u200b\uff0c\u200b\u6709\u200b\u5f88\u591a\u200b\u7c7b\u4f3c\u200b\u7684\u200b\u5de5\u5177\u200b\uff0c\u200b\u6bd4\u5982\u200b\u7c7b\u4f3c\u200brust\u200b\u4e2d\u200bcargo toml\u200b\u6587\u4ef6\u200b\u5b9a\u4e49\u200b\u4e09\u65b9\u200b\u5e93\u200b\u7684\u200b\u4f7f\u7528\u200b\u4ee5\u53ca\u200bbuild.rs\u200b\u5b9a\u4e49\u200b\u7f16\u8bd1\u200b\u8fc7\u7a0b\u200b\u3002<p></p> <ul> <li>CPM\uff1aCmake\u200b\u4f9d\u8d56\u200b\u7ba1\u7406\u200b</li> </ul> <p>https://github.com/cpm-cmake/CPM.cmake </p>Text Only<pre><code>cmake_minimum_required(VERSION 3.14 FATAL_ERROR)\n\n# create project\nproject(MyProject)\n\n# add executable\nadd_executable(main main.cpp)\n\n# add dependencies\ninclude(cmake/CPM.cmake)\n\nCPMAddPackage(\"gh:fmtlib/fmt#7.1.3\")\nCPMAddPackage(\"gh:nlohmann/json@3.10.5\")\nCPMAddPackage(\"gh:catchorg/Catch2@3.2.1\")\n\n# link dependencies\ntarget_link_libraries(main fmt::fmt nlohmann_json::nlohmann_json Catch2::Catch2WithMain)\n</code></pre><p></p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/std%20sort%E5%B4%A9%E6%BA%83%E8%AE%B0%E5%BD%95/","title":"Std sort\u200b\u5d29\u6e83\u200b\u8bb0\u5f55","text":"<p>https://blog.sina.com.cn/s/blog_532f6e8f01014c7y.html</p> <p>https://en.cppreference.com/w/cpp/named_req/Compare</p> Text Only<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\n\nvoid func()\n{\n    std::vector&lt;int&gt; v1;\n\n    for (auto i = 0; i &lt; 18; i++)\n    {\n        v1.push_back(1);\n    }\n    std::cout &lt;&lt; \"v1 addr : \" &lt;&lt; &amp;v1[0] &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"befor sort\" &lt;&lt; std::endl;\n    std::sort(v1.begin(), v1.end(), [](int a, int b) { return a &gt;= b; });\n    std::cout &lt;&lt; \"after sort\" &lt;&lt; std::endl;\n}\n\nint main(int, char **)\n{\n    func();\n}\n</code></pre> Text Only<pre><code>v1 addr : 0x55e0ab6d1f30\nbefor sort\nafter sort\ndouble free or corruption (out)\nfish: Job 1, './hello/\u2026' terminated by signal SIGABRT (Abort)\n</code></pre> <p></p>Text Only<pre><code>(gdb) b 14\n(gdb) b 16\n(gdb) r\n(gdb) x/26wd 0x55555576df20\n0x55555576df20: 0       0       145     0\n0x55555576df30: 1       1       1       1\n0x55555576df40: 1       1       1       1\n0x55555576df50: 1       1       1       1\n0x55555576df60: 1       1       1       1\n0x55555576df70: 1       1       0       0\n0x55555576df80: 0       0\n(gdb) until 2\n(gdb) x/26wd 0x55555576df20\n0x55555576df20: 0       0       145     1\n0x55555576df30: 1       0       1       1\n0x55555576df40: 1       1       1       1\n0x55555576df50: 1       1       1       1\n0x55555576df60: 1       1       1       1\n0x55555576df70: 1       1       0       0\n0x55555576df80: 0       0\n</code></pre> \u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u5185\u5b58\u200b\u6570\u636e\u200b\u88ab\u200b\u6539\u200b\u4e86\u200b\uff0c\u200b\u5f53\u200b\u628a\u200bset *(0x55555576df2c)=0\uff0c\u200b\u5c31\u200b\u4e0d\u4f1a\u200b\u62a5\u9519\u200b\u4e86\u200b\u3002\u200b\u8fd9\u91cc\u200b\u4e0e\u200bvector\u200b\u7684\u200b\u6790\u6784\u200b\u51fd\u6570\u8c03\u7528\u200b\u6709\u5173\u200b\u3002 \u200b\u5728\u200b\u9879\u76ee\u200b\u4ee3\u7801\u200b\u4e2d\u200b\uff0c\u200b\u5982\u679c\u200bvector\u200b\u4e2d\u4f7f\u200b\u4e00\u4e2a\u200bclass\u200b\u6216\u8005\u200bstd::string\uff0c\u200b\u90a3\u4e48\u200b\u62a5\u9519\u200b\u73b0\u8c61\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u662f\u200bstd::bad_alloc\uff0c\u200b\u6790\u6784\u200bstd::string\u200b\u51fa\u9519\u200b\uff0c\u200b\u6216\u8005\u200b\u6790\u6784\u200bclass\u200b\u51fa\u9519\u200b\uff0c\u200b\u4f46\u200b\u672c\u8d28\u200b\u662f\u56e0\u4e3a\u200bstd::sort\u200b\u7684\u200bcmp\u200b\u51fd\u6570\u200b\u5b9a\u4e49\u200b\u4e0d\u200b\u6b63\u786e\u200b\uff0c\u200b\u5bfc\u81f4\u200b\u5185\u5b58\u200b\u88ab\u200b\u66f4\u6539\u200b\u3002<p></p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/%E5%A4%9AGCC%E7%8E%AF%E5%A2%83%E4%B8%8B%E8%AE%BE%E7%BD%AE%E7%BC%96%E8%AF%91%E5%99%A8%E7%89%88%E6%9C%AC/","title":"\u591a\u200bGCC\u200b\u73af\u5883\u200b\u4e0b\u200b\u8bbe\u7f6e\u200b\u7f16\u8bd1\u5668\u200b\u7248\u672c","text":"<p>\u200b\u8fd9\u662f\u200bcentos7\u200b\u4e2d\u200b\u5b89\u88c5\u200bgcc8\u200b\u4ee5\u540e\u200b\uff0c\u200b\u6fc0\u6d3b\u200bgcc8\u200b\u73af\u5883\u200b\u7684\u200b\u811a\u672c\u200b\uff0csource /opt/rh/devtoolset-8/enable\u3002\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u901a\u8fc7\u200b\u8bbe\u7f6e\u200b\u5982\u4e0b\u200b\u53d8\u91cf\u200b\uff0c\u200b\u4f7f\u5f97\u200b\u7f16\u8bd1\u200b\u65f6\u200b\u4f7f\u7528\u200b\u8be5\u200b\u6307\u5b9a\u200b\u7248\u672c\u200bgcc\u200b\u5de5\u5177\u200b\u548c\u200b\u76f8\u5e94\u200b\u7684\u200b\u5e93\u200b\u6587\u4ef6\u200b\u3002</p> Text Only<pre><code>export PATH=/opt/rh/devtoolset-8/root/usr/bin${PATH:+:${PATH}}\nexport MANPATH=/opt/rh/devtoolset-8/root/usr/share/man:${MANPATH}\nexport INFOPATH=/opt/rh/devtoolset-8/root/usr/share/info${INFOPATH:+:${INFOPATH}}\nexport PCP_DIR=/opt/rh/devtoolset-8/root\n# Some perl Ext::MakeMaker versions install things under /usr/lib/perl5\n# even though the system otherwise would go to /usr/lib64/perl5.\nexport PERL5LIB=/opt/rh/devtoolset-8/root//usr/lib64/perl5/vendor_perl:/opt/rh/devtoolset-8/root/usr/lib/perl5:/opt/rh/devtoolset-8/root//usr/share/perl5/vendor_perl${PERL5LIB:+:${PERL5LIB}}\n# bz847911 workaround:\n# we need to evaluate rpm's installed run-time % { _libdir }, not rpmbuild time\n# or else /etc/ld.so.conf.d files?\nrpmlibdir=$(rpm --eval \"%{_libdir}\")\n# bz1017604: On 64-bit hosts, we should include also the 32-bit library path.\nif [ \"$rpmlibdir\" != \"${rpmlibdir/lib64/}\" ]; then\n  rpmlibdir32=\":/opt/rh/devtoolset-8/root${rpmlibdir/lib64/lib}\"\nfi\nexport LD_LIBRARY_PATH=/opt/rh/devtoolset-8/root$rpmlibdir$rpmlibdir32${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\nexport LD_LIBRARY_PATH=/opt/rh/devtoolset-8/root$rpmlibdir$rpmlibdir32:/opt/rh/devtoolset-8/root$rpmlibdir/dyninst$rpmlibdir32/dyninst${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\n# duplicate python site.py logic for sitepackages\npythonvers=2.7\nexport PYTHONPATH=/opt/rh/devtoolset-8/root/usr/lib64/python$pythonvers/site-packages:/opt/rh/devtoolset-8/root/usr/lib/python$pythonvers/site-packages${PYTHONPATH:+:${PYTHONPATH}}\nexport PKG_CONFIG_PATH=/opt/rh/devtoolset-8/root/usr/lib64/pkgconfig${PKG_CONFIG_PATH:+:${PKG_CONFIG_PATH}}\n</code></pre> Text Only<pre><code>GCC_VERSION=\"8.2\"\nexport CC=/opt/compiler/gcc-${GCC_VERSION}/bin/gcc\nexport CXX=/opt/compiler/gcc-${GCC_VERSION}/bin/g++\nexport PATH=/opt/compiler/gcc-${GCC_VERSION}/bin${PATH:+:${PATH}}\nexport LD_LIBRARY_PATH=/opt/compiler/gcc-${GCC_VERSION}/bin:${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\nexport PKG_CONFIG_PATH=/opt/compiler/gcc-${GCC_VERSION}/lib/pkgconfig${PKG_CONFIG_PATH:+:${PKG_CONFIG_PATH}}\n</code></pre>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/%E6%A8%A1%E6%9D%BF%E5%85%83%E7%BC%96%E7%A8%8B/","title":"\u6a21\u677f\u200b\u5143\u200b\u7f16\u7a0b","text":"<p>\u200b\u73b0\u4ee3\u200b\u6a21\u677f\u200b\u5143\u200b\u7f16\u7a0b\u200b - \u200b\u7b2c\u4e00\u200b\u90e8\u5206\u200b - Cppcon 2014 - Walter E. Brown</p> Text Only<pre><code>#include&lt;stdio.h&gt;\n\n// example 1\ntemplate&lt;unsigned M, unsigned N&gt;\nstruct gcd\n{\n    static int const value = gcd&lt;N, M % N&gt;::value;\n};\n\ntemplate&lt;unsigned M&gt;\nstruct gcd&lt;M, 0&gt; \n{   \n    static_assert(M != 0);\n    static int const value = M;\n};\n\n// example 2\ntemplate&lt;class T&gt;\nstruct rank\n{\n    static size_t const value = 0u;\n};\n\ntemplate&lt;class U, size_t N&gt;\nstruct rank&lt;U[N]&gt;\n{\n    static size_t const value = 1u + rank&lt;U&gt;::value;\n};\n\n// example 3\n\ntemplate&lt;class T&gt;\nstruct remove_const\n{\n    using type = T;\n};\n\ntemplate&lt;class U&gt;\nstruct remove_const&lt;U const&gt;\n{\n    using type = U;\n};\n\n// example 4\ntemplate&lt;class T&gt;\nstruct type_is\n{\n    using type = T;\n};\n\ntemplate&lt;class T&gt;\nstruct remove_volatile : type_is&lt;T&gt; {};\n\n\ntemplate&lt;class U&gt;\nstruct remove_volatile&lt;U volatile&gt; : type_is&lt;U&gt; {};\n\n// example 5\n\n// primary template\ntemplate&lt;bool, class T,class&gt;\nstruct  IF : type_is&lt;T&gt; {};\n\n// spetialization\ntemplate&lt;class T, class F&gt;\nstruct IF&lt;false, T, F&gt; : type_is&lt;F&gt; {};\n\n\nint main(){\n    printf(\"%d\\n\", gcd&lt;666,324&gt;::value);\n\n\n    using array_t = int[10][20][30];\n    printf(\"%ld\\n\", rank&lt;array_t&gt;::value);\n\n\n    remove_const&lt;int const&gt;::type t;\n    // remove_const_t&lt;int const&gt; t; // in c++14\n}\n</code></pre>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/%E7%BC%96%E8%AF%91ABI%E9%97%AE%E9%A2%98/","title":"\u7f16\u8bd1\u200bABI\u200b\u95ee\u9898","text":"Text Only<pre><code>nm -DC libpaddle_inference.so | grep paddle::AnalysisConfig::EnableXpu\n0000000003632660 T paddle::AnalysisConfig::EnableXpu(int, bool, bool, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, bool, bool)\n</code></pre> Text Only<pre><code>undefined reference to `paddle::AnalysisConfig::EnableXpu(int, bool, bool, std::string const&amp;, std::string const&amp;, bool, bool)'\n</code></pre> \u200b\u4ee5\u200bgcc5.1\u200b\u4e3a\u200b\u754c\u9650\u200b\uff0c\u200b\u4e4b\u524d\u200b\u4f7f\u7528\u200b\u7684\u200b\u662f\u200bstd::string\uff0c\u200b\u4e4b\u540e\u200b\u5982\u679c\u200b\u7f16\u8bd1\u200b\u65f6\u200b\u4f7f\u7528\u200b\u7528\u200b\u4e86\u200bstdc++11\u200b\u6807\u51c6\u200b\uff0c\u200b\u9ed8\u8ba4\u200b\u662f\u200bstd::__cxx::string\u3002gcc5.1\u200b\u4e3b\u8981\u200b\u66f4\u6539\u200b\u4e86\u200bstd::string copy on write\u200b\u5b9e\u73b0\u200b\u548c\u200bstd::list \u200b\u7684\u200bsize\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u4e3a\u4e86\u200b\u517c\u5bb9\u200b\u65e7\u7248\u672c\u200b\uff0c\u200b\u901a\u8fc7\u200b\u5b8f\u200b\u5b9a\u4e49\u200b\uff0cadd_compile_definitions(_GLIBCXX_USE_CXX11_ABI=0)\u200b\u63a7\u5236\u200b\uff0c\u200b\u4e3a\u200b0\u200b\u4f7f\u7528\u200b\u4e4b\u524d\u200b\u7684\u200b\uff0c\u200b\u4e3a\u200b1\u200b\u4f7f\u7528\u200b\u65b0\u200b\u7684\u200b\u3002 \u200b\u5728\u200b\u4e00\u4e2a\u200b\u9879\u76ee\u200b\u4e2d\u200b\uff0c\u200b\u65b0\u200bABI\u200b\u548c\u200b\u65e7\u200bABI\u200b\u4e0d\u80fd\u200b\u540c\u65f6\u200b\u4f7f\u7528\u200b\u3002\u200b\u5982\u679c\u200b\u62a5\u9519\u200b\uff1a Text Only<pre><code>undefined func(std::__cxx11:string ....)\n</code></pre> \u200b\u4e00\u822c\u200b\u662f\u56e0\u4e3a\u200b\uff0c\u200b\u52a0\u8f7d\u200b\u7684\u200bfunc\u200b\u51fd\u6570\u200b\u7684\u200b\u8fd9\u4e2a\u200bso\u200b\u52a8\u6001\u200b\u5e93\u200b\u4f7f\u7528\u200b\u4e86\u200b\u65e7\u200b\u7684\u200bABI\u200b\u7f16\u8bd1\u200b\uff0c\u200b\u800c\u200b\u5f53\u524d\u200b\u9879\u76ee\u200b\u4f7f\u7528\u200b\u4e86\u200b\u65b0\u200b\u7684\u200bABI\u200b\u7f16\u8bd1\u200b\u3002\u200b\u9700\u8981\u200b\u91cd\u65b0\u200b\u7f16\u8bd1\u200bso\u200b\u5e93\u200b\u3002 \u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200bnm\u200b\u547d\u4ee4\u200b\u67e5\u770b\u200b\u7b26\u53f7\u200b\uff0c\u200b\u5982\u679c\u200b\u663e\u793a\u200b\u7ed3\u679c\u200b\u6709\u200b[abi:cxx11], \u200b\u5c31\u200b\u4ee3\u8868\u200bso\u200b\u662f\u200b\u4f7f\u7528\u200b\u7684\u200b\u65b0\u200bABI\u200b\u7f16\u8bd1\u200b\u7684\u200b\u3002 Text Only<pre><code>0000000001b24120 T paddle_infer::Predictor::GetInputTensorShape[abi:cxx11]()\n</code></pre> \u200b\u5982\u679c\u200b\u8981\u200b\u8bbe\u7f6e\u200badd_compile_definitions(_GLIBCXX_USE_CXX11_ABI=0)\u200b\u4ee5\u53ca\u200bset (CMAKE_CXX_STANDARD 11)\uff0c\u200b\u6ce8\u610f\u200b\u68c0\u6d4b\u200bconan\u200b\u7684\u200bcmake\u200b\u6587\u4ef6\u200bconan_toolchain.cmake\uff0c\u200b\u8fd9\u200b\u91cc\u9762\u200b\u53ef\u80fd\u200b\u4e5f\u200b\u5bf9\u200b\u8fd9\u4e9b\u200b\u9009\u9879\u200b\u8fdb\u884c\u200b\u4e86\u200b\u8bbe\u7f6e\u200b\u3002\u200b\u4ee5\u53ca\u200b\u5176\u4ed6\u200b\u5730\u65b9\u200b\u6709\u6ca1\u6709\u200b\u8bbe\u7f6e\u200b\u3002 \u200b\u53c2\u8003\u200b\uff1a https://www.cnblogs.com/oloroso/p/11307804.html https://www.cnblogs.com/stdxxd/p/16491854.html https://gcc.gnu.org/onlinedocs/libstdc++/manual/using_dual_abi.html"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/%E7%BC%96%E8%AF%91ABI%E9%97%AE%E9%A2%98/#gflags","title":"gflags","text":"<p>https://github.com/gflags/gflags/issues/203 https://stackoverflow.com/questions/33394934/converting-std-cxx11string-to-stdstring \u200b\u8fd8\u200b\u548c\u200bclang gcc\uff0c\u200b\u4ee5\u53ca\u200b\u4f7f\u7528\u200b\u7684\u200blibc++.so \u200b\u6216\u8005\u200blibstdc++.so\u200b\u6709\u5173\u200b \u200b\u5982\u679c\u200b\u660e\u660e\u200b\u522b\u4eba\u200b\u63d0\u4f9b\u200b\u7b2c\u4e09\u65b9\u200b\u5e93\u200b\u4e5f\u200b\u662f\u200bGCC 5.3 \u200b\u7f16\u8bd1\u200b\u7684\u200b\uff0c\u200b\u4f60\u200b\u672c\u5730\u200b\u4e5f\u200b\u662f\u200b\u6307\u5b9a\u200b\u7684\u200bGCC 5.3\u200b\u7248\u672c\u200b\uff0c\u200b\u4f46\u662f\u200b\u8fd8\u662f\u200b\u6709\u200bABI\u200b\u95ee\u9898\u200b\uff0c\u200b\u90a3\u200b\u6211\u200b\u731c\u200b\u4f60\u200b\u662f\u4e0d\u662f\u200b\u672c\u5730\u200b\u9ed8\u8ba4\u200b\u7684\u200bGCC\u200b\u7248\u672c\u200b\u662f\u200b4.x\uff0c\u200b\u6216\u8005\u200b\u4f60\u200b\u94fe\u63a5\u200b\u4e86\u200blibstdc++.a\u200b\u9759\u6001\u200b\u5e93\u200b\uff1f\u200b\u6211\u200b\u5c31\u200b\u9047\u5230\u200b\u4e86\u200b\u8fd9\u4e2a\u200b\u60c5\u51b5\u200b\u3002 \u200b\u6211\u200b\u672c\u5730\u200b\u9ed8\u8ba4\u200bGCC\u200b\u7248\u672c\u200b\u662f\u200b4.8\uff0c\u200b\u5728\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u76ee\u5f55\u200b/buildtools/gcc5.3\u200b\u5b89\u88c5\u200b\u4e86\u200bGCC 5.3\u3002\u200b\u5728\u200b\u7f16\u8bd1\u200b\u65f6\u200b\u6307\u5b9a\u200b\u4e86\u200bCMAKE_CXX_COMPILER\u200b\u4e3a\u200bGCC5.3\u200b\u7684\u200b\u5bf9\u5e94\u200b\u76ee\u5f55\u200b\u3002\u200b\u4f46\u662f\u200b\u7f16\u8bd1\u200b\u65f6\u200b\u4f9d\u7136\u200b\u4f1a\u200b\u62a5\u200bABI\u200b\u7684\u200b\u95ee\u9898\u200b\u3002\u200b\u88ab\u200b\u8fd9\u4e2a\u200b\u95ee\u9898\u200b\u6298\u78e8\u200b\u4e86\u200b\u4e00\u5929\u200b\u540e\u200b\uff0c\u200b\u53c8\u200b\u548c\u200b\u7b2c\u4e09\u65b9\u200b\u5bf9\u9f50\u200b\u4e86\u200b\u4e00\u4e0b\u200bcmake\u200b\u7248\u672c\u200b\uff0c\u200b\u7136\u540e\u200b\u5c06\u200bcmake\u200b\u5347\u7ea7\u200b\u4e3a\u200b\u6700\u65b0\u200b\u7248\u672c\u200b\uff0c\u200b\u5b83\u200b\u5c45\u7136\u200b\u591a\u200b\u4e86\u200b\u4e2a\u200b\u62a5\u8b66\u200b\uff1a</p> <p></p>Text Only<pre><code>CMake Warning at CMakeLists.txt:75 (add_executable):\n  Cannot generate a safe linker search path for target MyBinary because\n  files in some directories may conflict with libraries in implicit\n  directories:\n\n    link library [libstdc++.a] in /build_tools/gcc-5.3.21/lib64 may be hidden by files in:\n      /usr/lib/gcc/x86_64-redhat-linux/4.8.5\n\n  Some of these libraries may not be found correctly.\n</code></pre> C++ ABI \u200b\u95ee\u9898\u200b\u5b9a\u4f4d\u200b\u89e3\u51b3\u200b_abi\u200b\u95ee\u9898\u200b-CSDN\u200b\u535a\u5ba2\u200b \u200b\u7cfb\u7edf\u200b\u4e0a\u200b\u5b58\u5728\u200b\u591a\u4e2a\u200bgcc\u200b\u7248\u672c\u200b\uff0c\u200b\u5bfc\u81f4\u200b\u94fe\u63a5\u200b\u9519\u200b\u4e86\u200bso\u200b\u6587\u4ef6\u200b\uff0c\u200b\u4e5f\u200b\u4f1a\u200b\u4ea7\u751f\u200b\u8fd9\u4e2a\u200b\u95ee\u9898\u200b<p></p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/Abseil/C%2B%2B%20Tips/","title":"C++ Tips","text":""},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/Abseil/C%2B%2B%20Tips/#httpsabseiliotips","title":"https://abseil.io/tips/","text":""},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/Abseil/C%2B%2B%20Tips/#stringview","title":"StringView","text":""},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/Abseil/C%2B%2B%20Tips/#\u7528\u6cd5","title":"\u7528\u6cd5","text":"C++<pre><code>// C Convention\nvoid TakesCharStar(const char* s);\n\n// Old Standard C++ convention\nvoid TakesString(const std::string&amp; s);\n\n// string_view C++ conventions\nvoid TakesStringView(absl::string_view s);    // Abseil\nvoid TakesStringView(std::string_view s);     // C++17\n</code></pre> \u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200bStringView\u200b\u63d0\u4f9b\u200b\u4e00\u4e2a\u200b\u63a5\u53e3\u200b\uff0c\u200b\u4ee3\u66ff\u200bconst char \u200b\u548c\u200bconst std::string &amp;\u3002 StringView \u200b\u53ea\u662f\u200b\u5bf9\u200b\u5b58\u5728\u200b\u7684\u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u4e32\u200b\u7f13\u5b58\u200b\u533a\u200bbuffer\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u89c6\u56fe\u200b\uff08view\uff09\uff0c\u200b\u53ea\u200b\u5305\u62ec\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u6307\u5411\u200b\u8fd9\u90e8\u5206\u200b\u5b57\u7b26\u4e32\u200b\u7684\u200b\u6307\u9488\u200b\u548c\u200b\u957f\u5ea6\u200b\uff0c\u200b\u5e76\u200b\u4e0d\u200b\u5305\u62ec\u200b\u5b57\u7b26\u4e32\u200bbuffer\u3002 StringView\u200b\u662f\u200b\u4e0d\u200b\u80fd\u591f\u200b\u4fee\u6539\u200bbuffer\u200b\u7684\u200b\uff0c\u200b\u5c31\u200b\u50cf\u200bconst char \u200b\u4e0d\u80fd\u200b\u4fee\u6539\u200b\u6307\u5411\u200b\u7684\u200b\u5185\u5b58\u200b\u6570\u636e\u200b\u4e00\u6837\u200b\u3002\u200b\u5982\u679c\u200b\u8981\u200b\u4fee\u6539\u200bStringView\u200b\u6307\u5411\u200b\u7684\u200bdata\uff0c\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200bstring(string_view_obj)\u200b\u8f6c\u6362\u6210\u200bstring\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u7136\u540e\u200b\u8fdb\u884c\u200b\u4fee\u6539\u200b\u3002 \u200b\u56e0\u6b64\u200b\u5bf9\u200bStringView\u200b\u7684\u200b\u62f7\u8d1d\u200b\u53ea\u662f\u200b\u6d45\u200b\u62f7\u8d1d\u200b\uff0c\u200b\u4e0d\u200b\u6d89\u53ca\u200bbuffer\u200b\u5185\u5b58\u200b\u62f7\u8d1d\u200b\uff0c\u200b\u6548\u7387\u200b\u8f83\u200b\u9ad8\u200b\u3002 \u200b\u56e0\u4e3a\u200bStringView\u200b\u4e0d\u200b\u62e5\u6709\u200bbuffer\u200b\u7684\u200b\u6240\u6709\u6743\u200b\uff0c\u200b\u56e0\u6b64\u200b\u9700\u8981\u200bbuffer\u200b\u7684\u200b\u751f\u547d\u5468\u671f\u200b\u957f\u4e8e\u200bStringView\u200b\u5bf9\u8c61\u200b\u7684\u200b\u751f\u547d\u5468\u671f\u200b\u3002 <p>tips\uff1a</p> <ul> <li>const stringView \u200b\u4e2d\u200b\u7684\u200bconst\u200b\u53ea\u662f\u200b\u4fee\u9970\u200bstringView\u200b\u6307\u5411\u200bbuffer\u200b\u7684\u200b\u6307\u9488\u200b\u53ef\u4e0d\u53ef\u4ee5\u200b\u53d8\u5316\u200b\uff0cstringview\u200b\u59cb\u7ec8\u200b\u4e0d\u80fd\u200b\u6539\u53d8\u200bbuffer\u200b\u7684\u200b\u5185\u5bb9\u200b\u3002</li> <li>Adding string_view into an existing codebase is not always the right answer: changing parameters to pass by string_view can be inefficient if those are then passed to a function requiring a std::string or a NUL-terminated const char*. It is best to adopt string_view starting at the utility code and working upward, or with complete consistency when starting a new project.</li> </ul> <p>\u200b\u4f7f\u7528\u200bStringView\u200b\u7684\u200b\u597d\u5904\u200b\uff1a\u200b\u4f5c\u4e3a\u200b\u51fd\u6570\u53c2\u6570\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u51cf\u5c11\u200b\u6570\u636e\u200b\u62f7\u8d1d\u200b\u548c\u200bstrlen\uff08\uff09\u200b\u51fd\u6570\u200b\u7684\u200b\u8c03\u7528\u200b\u3002</p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/Abseil/C%2B%2B%20Tips/#\u6e90\u7801","title":"\u6e90\u7801","text":""},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/Abseil/C%2B%2B%20Tips/#\u6210\u5458\u53d8\u91cf","title":"\u6210\u5458\u200b\u53d8\u91cf","text":"C++<pre><code>  const char* ptr_;\n  size_type length_;\n};\n</code></pre> \u200b\u4fdd\u5b58\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u6307\u9488\u200b\u548c\u200b\u957f\u5ea6\u200b\uff0c\u200b\u5e76\u200b\u4e0d\u200b\u6301\u6709\u200bstring\u200b\u7684\u200b\u5185\u5b58\u200b\u3002"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/Abseil/C%2B%2B%20Tips/#\u6784\u9020\u51fd\u6570\u7684\u4e00\u4e2a\u5c0f\u6280\u5de7","title":"\u6784\u9020\u51fd\u6570\u200b\u7684\u200b\u4e00\u4e2a\u200b\u5c0f\u200b\u6280\u5de7","text":"C++<pre><code>template &lt;typename Allocator&gt;\nstring_view(  // NOLINT(runtime/explicit)\nconst std::basic_string&lt;char, std::char_traits&lt;char&gt;, Allocator&gt;&amp; str\nABSL_ATTRIBUTE_LIFETIME_BOUND) noexcept\n// This is implemented in terms of `string_view(p, n)` so `str.size()`\n// doesn't need to be reevaluated after `ptr_` is set.\n// The length check is also skipped since it is unnecessary and causes\n// code bloat.\n: string_view(str.data(), str.size(), SkipCheckLengthTag{}) {}\n\n// Implicit constructor of a `string_view` from a `const char*` and length.\nconstexpr string_view(const char* data, size_type len)\n: ptr_(data), length_(CheckLengthInternal(len)) {}\n</code></pre> C++<pre><code>private:\n  // The constructor from std::string delegates to this constructor.\n  // See the comment on that constructor for the rationale.\n  struct SkipCheckLengthTag {};\n  string_view(const char* data, size_type len, SkipCheckLengthTag) noexcept\n      : ptr_(data), length_(len) {}\n</code></pre> \u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\uff0c\u200b\u901a\u8fc7\u200b\u5b9a\u4e49\u200b\u7ed3\u6784\u200b\u4f53\u200bSkipCheckLengthTag\uff0c\u200b\u8c03\u7528\u200b\u5230\u200b\u4e86\u200b\u7b2c\u4e8c\u4e2a\u200b\u4ee3\u7801\u200b\u5757\u200b\u4e2d\u200b\u7684\u200b\u6784\u9020\u51fd\u6570\u200b\uff0c\u200b\u7701\u53bb\u200b\u4e86\u200bCheckLengthInternal\u200b\u7684\u200b\u64cd\u4f5c\u200b\u3002"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/Abseil/C%2B%2B%20Tips/#str-len\u8ba1\u7b97","title":"Str Len\u200b\u8ba1\u7b97","text":"C++<pre><code>  static constexpr size_type StrlenInternal(const char* str) {\n#if defined(_MSC_VER) &amp;&amp; _MSC_VER &gt;= 1910 &amp;&amp; !defined(__clang__)\n    // MSVC 2017+ can evaluate this at compile-time.\n    const char* begin = str;\n    while (*str != '\\0') ++str;\n    return str - begin;\n#elif ABSL_HAVE_BUILTIN(__builtin_strlen) || \\\n    (defined(__GNUC__) &amp;&amp; !defined(__clang__))\n    // GCC has __builtin_strlen according to\n    // https://gcc.gnu.org/onlinedocs/gcc-4.7.0/gcc/Other-Builtins.html, but\n    // ABSL_HAVE_BUILTIN doesn't detect that, so we use the extra checks above.\n    // __builtin_strlen is constexpr.\n    return __builtin_strlen(str);\n#else\n    return str ? strlen(str) : 0;\n#endif\n  }\n</code></pre> \u200b\u6839\u636e\u200b\u5b8f\u200b\u5b9a\u4e49\u200b\u6761\u4ef6\u200b\u5224\u65ad\u200b\uff0c\u200b\u9009\u62e9\u200b\u4e0d\u540c\u200b\u7684\u200b\u8ba1\u7b97\u65b9\u6cd5\u200b\uff0c\u200b\u8fdb\u884c\u200b\u4f18\u5316\u200b\u3002"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/Abseil/C%2B%2B%20Tips/#find\u51fd\u6570\u4f18\u5316","title":"find\u200b\u51fd\u6570\u200b\u4f18\u5316","text":"C++<pre><code>class LookupTable {\n public:\n  // For each character in wanted, sets the index corresponding\n  // to the ASCII code of that character. This is used by\n  // the find_.*_of methods below to tell whether or not a character is in\n  // the lookup table in constant time.\n  explicit LookupTable(string_view wanted) {\n    for (char c : wanted) {\n      table_[Index(c)] = true;\n    }\n  }\n  bool operator[](char c) const { return table_[Index(c)]; }\n\n private:\n  static unsigned char Index(char c) { return static_cast&lt;unsigned char&gt;(c); }\n  bool table_[UCHAR_MAX + 1] = {};\n};\n\n}  // namespace\n\nstring_view::size_type string_view::find_first_of(\n    string_view s, size_type pos) const noexcept {\n  if (empty() || s.empty()) {\n    return npos;\n  }\n  // Avoid the cost of LookupTable() for a single-character search.\n  if (s.length_ == 1) return find_first_of(s.ptr_[0], pos);\n  LookupTable tbl(s);\n  for (size_type i = pos; i &lt; length_; ++i) {\n    if (tbl[ptr_[i]]) {\n      return i;\n    }\n  }\n  return npos;\n}\n</code></pre> \u200b\u6839\u636e\u200b\u67e5\u627e\u200b\u5b57\u7b26\u200b\u7684\u200b\u957f\u5ea6\u200b\uff0c\u200b\u5982\u679c\u200b\u957f\u5ea6\u200b==1\uff0c\u200b\u76f4\u63a5\u200b\u67e5\u627e\u200b\uff0c\u200b\u4e0d\u200b\u7b49\u4e8e\u200b1\uff0c\u200b\u901a\u8fc7\u200bLookupTable\u200b\u8fdb\u884c\u200b\u7d22\u5f15\u200b\uff0c\u200b\u5feb\u901f\u200b\u67e5\u627e\u200b\u3002"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/Abseil/C%2B%2B%20Tips/#operator\u548cstrcat","title":"operator\u200b\u548c\u200bstrCat","text":"C++<pre><code>std::string foo = LongString1();\nstd::string bar = LongString2();\nstd::string foobar = foo + bar;\n\nstd::string foo = LongString1();\nstd::string bar = LongString2();\nstd::string foobar = absl::StrCat(foo, bar);\n</code></pre> foo+bar\u200b\u4f1a\u200b\u8c03\u7528\u200b+ operator\u200b\u51fd\u6570\u200b\u3002 C++<pre><code>std::string foo = LongString1();\nstd::string bar = LongString2();\nstd::string baz = LongString3();\nstd::string foobarbaz = foo + bar + baz;\n\nstd::string foo = LongString1();\nstd::string bar = LongString2();\nstd::string baz = LongString3();\nstd::string foobarbaz = absl::StrCat(foo, bar, baz);\n</code></pre> foo + bar + baz\u200b\u4e0d\u200b\u5b58\u5728\u200b\u8c03\u7528\u200b\u4e09\u4e2a\u200b\u5bf9\u8c61\u200b\u76f8\u52a0\u200b\u7684\u200boperator\u200b\u51fd\u6570\u200b\uff0c\u200b\u5b9e\u9645\u4e0a\u200b\u8fc7\u7a0b\u200b\u5982\u4e0b\u200b\uff1a Text Only<pre><code>std::string temp = foo + bar;\nstd::string foobarbaz = std::move(temp) + baz;\n</code></pre> \u200b\u4f1a\u200b\u53d1\u751f\u200b\u4e34\u65f6\u200b\u5bf9\u8c61\u200b\u7684\u200b\u751f\u6210\u200b\uff0c\u200b\u7136\u540e\u200b\u5728\u200b\u8c03\u7528\u200b+ operator\u3002\u200b\u5728\u200bc++ 11\u200b\u91cc\u9762\u200bstd::move(temp) + baz\u200b\u7b49\u6548\u200bstd::move(temp.append(baz))\uff0c\u200b\u4e0d\u4f1a\u200b\u521b\u5efa\u200b\u7b2c\u4e8c\u4e2a\u200b\u4e34\u65f6\u200b\u5bf9\u8c61\u200b\u3002\u200b\u4f46\u662f\u200b\u5982\u679c\u200btemp\u200b\u7684\u200b\u5185\u5b58\u7a7a\u95f4\u200b\u4e0d\u591f\u200b\uff0cappend\u200b\u7684\u200b\u65f6\u5019\u200b\u5c31\u200b\u4f1a\u200b\u7533\u8bf7\u200b\u65b0\u200b\u5185\u5b58\u200b\uff0c\u200b\u7136\u540e\u200b\u8fdb\u884c\u200b\u62f7\u8d1d\u200b\uff0c\u200b\u56e0\u6b64\u200b\u6bd4\u8f83\u200b\u4f4e\u6548\u200b\u3002 absl\u200b\u7684\u200bstrCat\u200b\u51fd\u6570\u200b\u5b9e\u73b0\u200b\u53ef\u4ee5\u200b\u8ba1\u7b97\u200b\u4e00\u5171\u200b\u9700\u8981\u200b\u591a\u5c11\u200b\u7a7a\u95f4\u200b\uff0c\u200b\u7136\u540e\u200breserve\uff0c\u200b\u518d\u200b\u5f62\u6210\u200b\u65b0\u200b\u7684\u200b\u5b57\u7b26\u4e32\u200b\uff0c\u200b\u66f4\u52a0\u200b\u9ad8\u6548\u200b\u3002"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/Abseil/C%2B%2B%20Tips/#absl-strsplit","title":"absl StrSplit","text":"C++<pre><code>// Splits on commas. Stores in vector of string_view (no copies).\nstd::vector&lt;absl::string_view&gt; v = absl::StrSplit(\"a,b,c\", ',');\n\n// Splits on commas. Stores in vector of string (data copied once).\nstd::vector&lt;std::string&gt; v = absl::StrSplit(\"a,b,c\", ',');\n\n// Splits on literal string \"=&gt;\" (not either of \"=\" or \"&gt;\")\nstd::vector&lt;absl::string_view&gt; v = absl::StrSplit(\"a=&gt;b=&gt;c\", \"=&gt;\");\n\n// Splits on any of the given characters (',' or ';')\nusing absl::ByAnyChar;\nstd::vector&lt;std::string&gt; v = absl::StrSplit(\"a,b;c\", ByAnyChar(\",;\"));\n\n// Stores in various containers (also works w/ absl::string_view)\nstd::set&lt;std::string&gt; s = absl::StrSplit(\"a,b,c\", ',');\nstd::multiset&lt;std::string&gt; s = absl::StrSplit(\"a,b,c\", ',');\nstd::list&lt;std::string&gt; li = absl::StrSplit(\"a,b,c\", ',');\n\n// Equiv. to the mythical SplitStringViewToDequeOfStringAllowEmpty()\nstd::deque&lt;std::string&gt; d = absl::StrSplit(\"a,b,c\", ',');\n\n// Yields \"a\"-&gt;\"1\", \"b\"-&gt;\"2\", \"c\"-&gt;\"3\"\nstd::map&lt;std::string, std::string&gt; m = absl::StrSplit(\"a,1,b,2,c,3\", ',');\n</code></pre>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/Abseil/C%2B%2B%20Tips/#rvo-\u8fd4\u56de\u503c\u4f18\u5316","title":"RVO \u200b\u8fd4\u56de\u503c\u200b\u4f18\u5316","text":"<p>\u200b\u6240\u6709\u200b\u73b0\u4ee3\u200bC++\u200b\u7f16\u8bd1\u5668\u200b\u90fd\u200b\u9ed8\u8ba4\u200b\u6267\u884c\u200bRVO\uff0c\u200b\u5373\u4f7f\u200b\u5728\u200b\u8c03\u8bd5\u200b\u6784\u5efa\u200b\u4e2d\u200b\u4e5f\u200b\u662f\u200b\u5982\u6b64\u200b\uff0c\u200b\u5373\u4f7f\u200b\u662f\u200b\u5bf9\u4e8e\u200b\u975e\u200b\u5185\u8054\u200b\u51fd\u6570\u200b\u4e5f\u200b\u662f\u200b\u5982\u6b64\u200b\u3002 \u200b\u7f16\u8bd1\u5668\u200b\u4f1a\u200b\u8fdb\u884c\u200bRVO\u200b\u7684\u200b\u60c5\u51b5\u200b\uff1a </p>C++<pre><code>class SomeBigObject {\n public:\n  SomeBigObject() { ... }\n  SomeBigObject(const SomeBigObject&amp; s) {\n    printf(\"Expensive copy \u2026\\n\", \u2026);\n    \u2026\n  }\n  SomeBigObject&amp; operator=(const SomeBigObject&amp; s) {\n    printf(\"Expensive assignment \u2026\\n\", \u2026);\n    \u2026\n    return *this;\n  }\n  ~SomeBigObject() { ... }\n  \u2026\n};\n\nSomeBigObject SomeBigObject::SomeBigObjectFactory(...) {\n  SomeBigObject local;\n  \u2026\n  return local;\n}\n// No message about expensive operations:\nSomeBigObject obj = SomeBigObject::SomeBigObjectFactory(...);\n</code></pre> \u200b\u4e0d\u4f1a\u200bRVO\u200b\u7684\u200b\u60c5\u51b5\u200b\uff1a<p></p> <ul> <li> <p>1\u3001\u200b\u8c03\u7528\u51fd\u6570\u200b\u4f7f\u7528\u200b\u4e00\u4e2a\u200b\u5df2\u7ecf\u200b\u5b58\u5728\u200b\u7684\u200b\u53d8\u91cf\u200b\u63a5\u6536\u200b\u8fd4\u56de\u503c\u200b </p>C++<pre><code>// RVO won\u2019t happen here; prints message \"Expensive assignment ...\":\nobj = SomeBigObject::SomeBigObjectFactory(s2);\n</code></pre><p></p> </li> <li> <p>2\u3001\u200b\u88ab\u200b\u8c03\u7528\u51fd\u6570\u200b\u6709\u200b\u591a\u4e2a\u200b\u8fd4\u56de\u503c\u200b\u53d8\u91cf\u200b </p>C++<pre><code>// RVO won\u2019t happen here:\nstatic SomeBigObject NonRvoFactory(...) {\n  SomeBigObject object1, object2;\n  object1.DoSomethingWith(...);\n  object2.DoSomethingWith(...);\n  if (flag) {\n    return object1;\n  } else {\n    return object2;\n  }\n}\n</code></pre> \u200b\u4f46\u662f\u200b\uff0c\u200b\u5982\u679c\u200b\u8fd4\u56de\u503c\u200b\u662f\u200b\u4e00\u4e2a\u200b\u53d8\u91cf\u200b\uff0c\u200b\u5728\u200b\u591a\u4e2a\u200b\u5730\u65b9\u200b\u8fd4\u56de\u200b\uff0c\u200b\u4e5f\u200b\u4f1a\u200b\u8fdb\u884c\u200bRVO\u3002\u200b\u4f8b\u5982\u200b\uff1a C++<pre><code>// RVO will happen here:\nSomeBigObject local;\nif (...) {\n  local.DoSomethingWith(...);\n  return local;\n} else {\n  local.DoSomethingWith(...);\n  return local;\n}\n</code></pre> \u200b\u4e0d\u200b\u58f0\u660e\u200b\u53d8\u91cf\u200b\uff0c\u200b\u8fd4\u56de\u200b\u4e34\u65f6\u200b\u53d8\u91cf\u200b\uff0cRVO\u200b\u4e5f\u200b\u8d77\u200b\u4f5c\u7528\u200b\u3002 C++<pre><code>// RVO works here:\nSomeBigObject SomeBigObject::ReturnsTempFactory(...) {\n  return SomeBigObject::SomeBigObjectFactory(...);\n}\n</code></pre> C++<pre><code>// No message about expensive operations:\nEXPECT_EQ(SomeBigObject::SomeBigObjectFactory(...).Name(), s);\n</code></pre><p></p> </li> </ul>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/Abseil/C%2B%2B%20Tips/#absl-substitute","title":"absl Substitute","text":"C++<pre><code>std::string GetErrorMessage(absl::string_view op, absl::string_view user,\n                            int id) {\n  return absl::Substitute(\"Error in $0 for user $1 ($2)\", op, user, id);\n}\n</code></pre>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/Abseil/C%2B%2B%20Tips/#absl-status\u5f3a\u5236\u8c03\u7528\u8005\u5904\u7406\u9519\u8bef","title":"absl Status\uff0c\u200b\u5f3a\u5236\u200b\u8c03\u7528\u8005\u200b\u5904\u7406\u9519\u8bef","text":"C++<pre><code>absl::Status Foo();\n\nvoid CallFoo1() {\n  Foo();\n}\n</code></pre> \u200b\u4ee5\u4e0a\u200b\u51fd\u6570\u200b\u4f7f\u7528\u200babsl Status\u200b\u4f5c\u4e3a\u200b\u51fd\u6570\u200b\u7684\u200b\u8fd4\u56de\u503c\u200b\uff0c\u200b\u4f1a\u200b\u5f3a\u5236\u200b\u51fd\u6570\u8c03\u7528\u200b\u8005\u200b\uff08caller\uff09\u200b\u5bf9\u200b\u9519\u8bef\u200b\u8fdb\u884c\u200b\u5904\u7406\u200b\uff0c\u200b\u5426\u5219\u200b\u7f16\u8bd1\u200b\u51fa\u9519\u200b\u3002 C++<pre><code>void CallFoo2() {\n  Foo().IgnoreError();\n}\n\nvoid CallFoo3() {\n  if (!status.ok()) std::abort();\n}\n\nvoid CallFoo4() {\n  absl::Status status = Foo();\n  if (!status.ok()) LOG(ERROR) &lt;&lt; status;\n}\n</code></pre> \u200b\u4f7f\u7528\u200bStatus\uff0c\u200b\u53ef\u4ee5\u200b\u4fdd\u8bc1\u200b\u5bf9\u200b\u9519\u8bef\u200b\u7684\u200b\u5904\u7406\u200b\uff0c\u200b\u5373\u4f7f\u200b\u8c03\u7528\u200bIgnoreError\u200b\u51fd\u6570\u200b\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u4f7f\u200bCode ReViewer\u200b\u4e0d\u200b\u56f0\u60d1\u200b\uff0c\u200b\u4ed6\u4f1a\u200b\u8ba4\u4e3a\u200b\u8c03\u7528\u8005\u200b\u77e5\u9053\u200b\u8fd9\u91cc\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5b58\u5728\u200b\u9519\u8bef\u200b\uff0c\u200b\u4f46\u662f\u200b\u9519\u8bef\u200b\u65e0\u5173\u7d27\u8981\u200b\uff0c\u200b\u4e0d\u200b\u9700\u8981\u200b\u7279\u6b8a\u200b\u5904\u7406\u200b\u3002 \u200b\u5f53\u5bf9\u200b\u9519\u8bef\u200b\u5982\u4f55\u200b\u5904\u7406\u200b\u4e0d\u200b\u6e05\u695a\u200b\u65f6\u200b\uff0c\u200b\u901a\u8fc7\u200b\u8fd4\u56de\u200bStatus\uff0c\u200b\u5c06\u200b\u72b6\u6001\u200b\u4fe1\u606f\u200b\u5411\u4e0a\u200b\u4f20\u9012\u200b\uff0c\u200b\u7531\u200b\u4e0a\u5c42\u200b\u8fdb\u884c\u200b\u5904\u7406\u200b\u3002 It forces engineers to decide how to handle errors, and explicitly documents that in compilable code."},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/Abseil/C%2B%2B%20Tips/#std-invoke","title":"std invoke","text":"<p>\u200b\u4ece\u200b C++17 \u200b\u8d77\u200b\uff0cC++\u200b\u63d0\u4f9b\u200b\u4e86\u200b<code>std::invoke&lt;&gt;()</code>[1]\u200b\u6765\u200b\u7edf\u4e00\u200b\u6240\u6709\u200b\u7684\u200b callback \u200b\u5f62\u5f0f\u200b</p> <ul> <li>Function</li> <li>Function Ptr</li> <li>lamda</li> <li>Functor</li> <li>Member Func C++<pre><code>template &lt;typename Iter, typename Callable, typename... Args&gt;\nvoid foreach (Iter current, Iter end, Callable op, Args const &amp;... args) {\n    while (current != end) {     // as long as not reached the end of the elements\n        std::invoke(op,            // call passed callable with\n            args...,       // any additional args\n            *current);     // and the current element\n        ++current;\n    }\n}\n</code></pre> https://www.zhihu.com/column/c_1306966457508118528</li> </ul>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/Abseil/C%2B%2B%20Tips/#\u51fd\u6570\u6a21\u7248\u4e0d\u80fd\u504f\u7279\u5316","title":"\u51fd\u6570\u200b\u6a21\u7248\u200b\u4e0d\u80fd\u200b\u504f\u200b\u7279\u5316","text":""},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/Abseil/C%2B%2B%20Tips/#\u5728\u7c7b\u6a21\u677f\u4e2d\u7c7b\u6a21\u677f\u51fd\u6570\u53ea\u6709\u5728\u88ab\u8c03\u7528\u65f6\u624d\u4f1a\u88abinstantiate","title":"\u5728\u200b\u7c7b\u200b\u6a21\u677f\u200b\u4e2d\u200b\uff0c\u200b\u7c7b\u200b\u6a21\u677f\u200b\u51fd\u6570\u200b\u53ea\u6709\u200b\u5728\u200b\u88ab\u200b\u8c03\u7528\u200b\u65f6\u624d\u200b\u4f1a\u200b\u88ab\u200binstantiate\u3002","text":""},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/Abseil/C%2B%2B%20Tips/#\u6a21\u677f\u5143\u7f16\u7a0b\u4f8b\u5b50","title":"\u6a21\u677f\u200b\u5143\u200b\u7f16\u7a0b\u200b\u4f8b\u5b50","text":"<p>https://github1s.com/abseil/abseil-cpp/blob/HEAD/absl/base/internal/invoke.h invoke\u200b\u7684\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u91c7\u7528\u200b\u4e86\u200b\u6a21\u677f\u200b\u5143\u200b\u7f16\u7a0b\u200b\uff0c\u200b\u901a\u8fc7\u200bSFINCE\u200b\u539f\u7406\u200b\u8fdb\u884c\u200b\u5339\u914d\u200b\uff0c\u200b\u5339\u914d\u200b\u51fd\u6570\u200b\u548c\u200b\u53c2\u6570\u200b\u7684\u200b\u7c7b\u578b\u200b\u7136\u540e\u200b\u6267\u884c\u200b\u4e0d\u540c\u200b\u7684\u200binvoke\u200b\u65b9\u6cd5\u200b\u3002 void_t\u200b\u7ed3\u5408\u200bSFINAE\u200b\u6280\u672f\u200b\u8fdb\u884c\u200b\u7c7b\u578b\u200b\u9009\u62e9\u200b\u63a8\u65ad\u200b\u4e0e\u200b\u7f16\u8bd1\u200b\u671f\u200b\u8868\u8fbe\u5f0f\u200b\u5408\u6cd5\u6027\u200b\u68c0\u6d4b\u200b https://zhuanlan.zhihu.com/p/377561143</p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/Abseil/FTADLE%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/","title":"FTADLE\u200b\u8bbe\u8ba1\u6a21\u5f0f","text":""},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/Abseil/FTADLE%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#ftadle","title":"FTADLE","text":"C++<pre><code>#include &lt;iostream&gt;\n\ntemplate &lt;typename FormatSink&gt;\nvoid AbslStringify(FormatSink&amp; sink, int a) {\n    sink &lt;&lt; \"int stringify : \" &lt;&lt; a &lt;&lt; std::endl;\n}\n\ntemplate &lt;typename FormatSink&gt;\nvoid AbslStringify(FormatSink&amp; sink, float a) {\n    sink &lt;&lt; \"float stringify : \" &lt;&lt; a &lt;&lt; std::endl;\n}\n\nstruct PointStringify {\ntemplate &lt;typename FormatSink&gt;\nfriend void AbslStringify(FormatSink&amp; sink, const PointStringify&amp; p) {\n    // sink.Append(\"(\");\n    // sink.Append(absl::StrCat(p.x));\n    // sink.Append(\", \");\n    // sink.Append(absl::StrCat(p.y));\n    // sink.Append(\")\");\n    sink &lt;&lt; \" x : \" &lt;&lt; p.x &lt;&lt; \" y : \" &lt;&lt; p.y &lt;&lt; std::endl;\n}\n\ndouble x = 10.0;\ndouble y = 20.0;\n};\n\nstruct AStringify {\ntemplate &lt;typename FormatSink&gt;\nfriend void AbslStringify(FormatSink&amp; sink, const AStringify&amp; p) {\n    sink &lt;&lt; p.a &lt;&lt; std::endl;\n}\n\nstd::string a = \"hello i am a\";\n};\n\nnamespace b {\n    void func(const std::string&amp; s) {}\n    namespace internal {\n        void func(int a) {}\n        namespace deep {\n            void test() {\n                std::string s = \"hello\";\n                b::func(s);\n            }\n        }  // namespace deep\n    }  // namespace internal\n}  // namespace b\n\nint main() {\n    b::internal::deep::test();\n\n    int i = 111;\n    AbslStringify(std::cout, i);\n\n    float b = 111.222;\n    AbslStringify(std::cout, b);\n\n    PointStringify p;\n    AbslStringify(std::cout, p);\n\n    AStringify a;\n    AbslStringify(std::cout, a);\n    return 0;\n}\n</code></pre> C++<pre><code>int stringify : 111\nfloat stringify : 111.222\n x : 10 y : 20\nhello i am a\n</code></pre>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/Abseil/FTADLE%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#adl","title":"ADL","text":"<p>argument-dependent lookup ADL \u200b\u51fa\u73b0\u200b\u5728\u200b C++98/C++03 \u200b\u4e2d\u200b\uff0c\u200b\u662f\u200b\u5bf9\u200b\u51fd\u6570\u200b\u8868\u8fbe\u5f0f\u200b\u4e2d\u975e\u200b\u9650\u5b9a\u200b\u51fd\u6570\u200b\u540d\u200b\u67e5\u627e\u200b\u7684\u200b\u89c4\u5219\u200b\uff0c\u200b\u6bd4\u5982\u200b\u67e5\u627e\u200boperator\u200b\u7684\u200b\u91cd\u8f7d\u200b\u51fd\u6570\u200b\u3002\u200b\u975e\u200b\u9650\u5b9a\u200b\u5b57\u9762\u200b\u610f\u601d\u200b\u662f\u200b\u6ca1\u6709\u200b\u505a\u200b\u4efb\u4f55\u200b\u9650\u5236\u200b\uff0c\u200b\u6bd4\u5982\u200b\u6ca1\u6709\u200b\u6307\u5b9a\u200bnamespace\u3002\u200b\u901a\u8fc7\u200bADL\u200b\u65b9\u5f0f\u200b\u53ef\u4ee5\u200b\u4f9d\u636e\u200b\u51fd\u6570\u53c2\u6570\u200b\u7684\u200bnamespace\u200b\u8fdb\u884c\u200b\u51fd\u6570\u200b\u540d\u200b\u67e5\u627e\u200b\u3002 \u200b\u4f9d\u8d56\u200b ADL \u200b\u6709\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5bfc\u81f4\u200b\u8bed\u4e49\u200b\u95ee\u9898\u200b\uff0c\u200b\u8fd9\u200b\u4e5f\u200b\u662f\u200b\u4e3a\u4ec0\u4e48\u200b\u6709\u200b\u7684\u200b\u65f6\u5019\u200b\u9700\u8981\u200b\u5728\u200b\u51fd\u6570\u200b\u524d\u9762\u200b\u52a0\u200b::\uff0c\u200b\u6216\u8005\u200b\u4e00\u822c\u200b\u63a8\u8350\u200b\u4f7f\u7528\u200b xxx::func\uff0c\u200b\u800c\u200b\u4e0d\u662f\u200b using namespace xxx \u3002\u200b\u56e0\u4e3a\u200b\u524d\u8005\u200b\u662f\u200b qualified name\uff0c\u200b\u6ca1\u6709\u200b ADL \u200b\u7684\u200b\u8fc7\u7a0b\u200b\u3002</p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/Abseil/Status%E5%AE%9E%E7%8E%B0%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/","title":"Status\u200b\u5b9e\u73b0\u200b\u6e90\u7801\u200b\u9605\u8bfb","text":""},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/Abseil/Status%E5%AE%9E%E7%8E%B0%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#status-and-statusor","title":"Status and StatusOr","text":"<p>https://github1s.com/abseil/abseil-cpp/blob/HEAD/absl/status/status.h#L849-L862</p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/Abseil/Status%E5%AE%9E%E7%8E%B0%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#status-\u5b9e\u73b0","title":"Status \u200b\u5b9e\u73b0","text":"<p>Status\u200b\u62bd\u8c61\u200b\u4e86\u200b\u5f88\u591a\u200b\u72b6\u6001\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5b58\u50a8\u200benum status\u3001message\u3001\u200b\u4ee5\u53ca\u200bPayload\u3002 \u200b\u5206\u4e3a\u200b\u4e24\u79cd\u200b\u6a21\u5f0f\u200b\uff0cinline\uff1a\u200b\u4e0d\u200b\u5305\u62ec\u200bmessage\u200b\u548c\u200bPayload\uff0c\u200b\u975e\u200binline\u3002 Status\u200b\u548c\u200b\u666e\u901a\u200b\u7684\u200benum\u200b\u4e0d\u540c\u200b\uff0c\u200b\u5728\u200b\u5185\u90e8\u200b\u5b58\u50a8\u200b\u7684\u200b\u6570\u636e\u200b\u4e0d\u662f\u200b\u76f4\u63a5\u200b\u7684\u200benum\u200b\u6570\u636e\u200b\uff0c\u200b\u800c\u662f\u200b\u7ecf\u8fc7\u200b\u8f6c\u6362\u200b\u7684\u200b\uff0c\u200b\u6bd4\u5982\u200b\u5728\u200bStatus\u200b\u4e2d\u200b\u901a\u8fc7\u200b\u201c\uff5c2\u201d\u200b\u64cd\u4f5c\u200b\u5728\u200b\u4e8c\u8fdb\u5236\u4f4d\u200b\u8868\u793a\u200b\u662f\u5426\u200bMoveBy\u3002\u200b\u901a\u8fc7\u200b\u201c&amp;1\u201d\u200b\u8868\u793a\u200b\u662f\u5426\u200binline\u3002 \u200b\u8bbe\u8ba1\u200b\u5f88\u200b\u5de7\u5999\u200b\uff0c\u200b\u901a\u8fc7\u200bStatus\u200b\u7684\u200b\u6570\u636e\u200b\u6210\u5458\u200brep_\u200b\u7684\u200b\u4e24\u79cd\u200b\u4e0d\u540c\u200b\u8868\u793a\u200b\u5b9e\u73b0\u200b\u3002 </p>Text Only<pre><code>  // Status supports two different representations.\n  //  - When the low bit is set it is an inlined representation.\n  //    It uses the canonical error space, no message or payload.\n  //    The error code is (rep_ &gt;&gt; 2).\n  //    The (rep_ &amp; 2) bit is the \"moved from\" indicator, used in IsMovedFrom().\n  //  - When the low bit is off it is an external representation.\n  //    In this case all the data comes from a heap allocated Rep object.\n  //    rep_ is a status_internal::StatusRep* pointer to that structure.\n  uintptr_t rep_;\n</code></pre><p></p> Text Only<pre><code>inline bool Status::IsMovedFrom(uintptr_t rep) { return (rep &amp; 2) != 0; }\n\ninline uintptr_t Status::MovedFromRep() {\n  return CodeToInlinedRep(absl::StatusCode::kInternal) | 2;\n}\n\ninline uintptr_t Status::CodeToInlinedRep(absl::StatusCode code) {\n  return (static_cast&lt;uintptr_t&gt;(code) &lt;&lt; 2) + 1;\n}\n\ninline absl::StatusCode Status::InlinedRepToCode(uintptr_t rep) {\n  assert(IsInlined(rep));\n  return static_cast&lt;absl::StatusCode&gt;(rep &gt;&gt; 2);\n}\n</code></pre>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/C%2B%2B/Abseil/Status%E5%AE%9E%E7%8E%B0%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/#statusor-\u5b9e\u73b0","title":"StatusOr \u200b\u5b9e\u73b0","text":"<p>StatusOr\u200b\u548c\u200bRust\u200b\u4e2d\u200b\u7684\u200bResult\u200b\u5f88\u200b\u76f8\u4f3c\u200b\uff0c\u200b\u5b58\u5728\u200bError\u200b\u548c\u200bOk\u200b\u4e24\u79cd\u200b\u72b6\u6001\u200b\uff0cOk\u200b\u72b6\u6001\u200b\u65f6\u200b\u8fd8\u200b\u5305\u62ec\u200b\u4e86\u200b\u6570\u636e\u200bData\uff0cdata\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u6a21\u7248\u200b\u6307\u5b9a\u200b\u7c7b\u578b\u200b\uff0c\u200b\u6bd4\u5982\u200bStatusOr\u3002 </p>Text Only<pre><code>template &lt;typename T&gt;\nclass StatusOr : private internal_statusor::StatusOrData&lt;T&gt;,\n                 private internal_statusor::CopyCtorBase&lt;T&gt;,\n                 private internal_statusor::MoveCtorBase&lt;T&gt;,\n                 private internal_statusor::CopyAssignBase&lt;T&gt;,\n                 private internal_statusor::MoveAssignBase&lt;T&gt; {\n...\n                 }\n</code></pre> StatusOr\u200b\u5b58\u50a8\u200b\u6570\u636e\u200bData\u200b\u662f\u200b\u901a\u8fc7\u200b\u6a21\u7248\u200b\u7ee7\u627f\u200b\u5b9e\u73b0\u200b\u7684\u200b\uff0c\u200b\u7ee7\u627f\u200b\u4e86\u200bStatusOrData\u200b\u7c7b\u200b\uff0c\u200b\u5728\u200bStatusOrData\u200b\u4e2d\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u5982\u4e0b\u200b\u6570\u636e\u200b\u5206\u522b\u200b\u8868\u793a\u200b\u6570\u636e\u200b\u548c\u200bStatus\u3002 Text Only<pre><code>  // status_ will always be active after the constructor.\n  // We make it a union to be able to initialize exactly how we need without\n  // waste.\n  // Eg. in the copy constructor we use the default constructor of Status in\n  // the ok() path to avoid an extra Ref call.\n  union {\n    Status status_;\n  };\n\n  // data_ is active iff status_.ok()==true\n  struct Dummy {};\n  union {\n    // When T is const, we need some non-const object we can cast to void* for\n    // the placement new. dummy_ is that object.\n    Dummy dummy_;\n    T data_;\n  };\n</code></pre> \u200b\u4e3a\u4ec0\u4e48\u200b\u8981\u200b\u8bbe\u8ba1\u200bunion\u200b\u5462\u200b\uff1f<p></p> <ul> <li>Status\u200b\u4e3a\u4ec0\u4e48\u200b\u8981\u200bunion\uff1f</li> <li>data_\u200b\u4e3a\u4ec0\u4e48\u200b\u8981\u200bunion\uff1f</li> </ul> <p>\u200b\u8fd9\u91cc\u200b\u4e3e\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b\u4f8b\u5b50\u200b\uff0c\u200b\u4f1a\u200b\u62a5\u9519\u200b\u5982\u4e0b\u200b\uff1a </p>Text Only<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nint main()\n{\n  const int a = 4;\n  void *p = &amp;a;\n  std::cout &lt;&lt; p &lt;&lt; std::endl;\n}\n</code></pre> Text Only<pre><code>main.cpp:8:9: error: cannot initialize a variable of type 'void *' with an rvalue of type 'const int *'\n  void *p = &amp;a;\n        ^   ~~\n1 error generated.\n</code></pre> \u200b\u800c\u200b\u901a\u8fc7\u200bunion\uff0cdummy_\u200b\u548c\u200bdata_\u200b\u6307\u5411\u200b\u540c\u4e00\u4e2a\u200b\u5185\u5b58\u200b\u533a\u57df\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200bdummy\u200b\u53d6\u200b\u5730\u5740\u200b\uff0c\u200b\u4f20\u9012\u200bvoid \u200b\u7c7b\u578b\u200b\u4f9b\u200bPlacementNew\u200b\u51fd\u6570\u200b\u4f7f\u7528\u200b\uff0c\u200b\u907f\u514d\u200b\u4e86\u200bT\u200b\u7c7b\u578b\u200b\u662f\u200bconst\u200b\u7684\u200b\u60c5\u51b5\u200b\u3002 \u200b\u901a\u8fc7\u200bnew\u200b\u6784\u9020\u200b\u6570\u636e\u200b\u548c\u200bStatus\uff1a\u200b\u8fd9\u91cc\u200b\u4f7f\u7528\u200b\u4e86\u200bPlacementNew\u200b\u7684\u200b\u7528\u6cd5\u200b\u3002 placement new\u200b\u5c31\u662f\u200b\u5728\u200b\u7528\u6237\u200b\u6307\u5b9a\u200b\u7684\u200b\u5185\u5b58\u200b\u4f4d\u7f6e\u200b\u4e0a\u200b*\uff08\u200b\u8fd9\u4e2a\u200b\u5185\u5b58\u200b\u662f\u200b\u5df2\u7ecf\u200b\u9884\u5148\u200b\u5206\u914d\u200b\u597d\u200b\u7684\u200b\uff09\u200b\u6784\u5efa\u200b\u65b0\u200b\u7684\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u56e0\u6b64\u200b\u8fd9\u4e2a\u200b\u6784\u5efa\u200b\u8fc7\u7a0b\u200b\u4e0d\u200b\u9700\u8981\u200b\u989d\u5916\u200b\u5206\u914d\u5185\u5b58\u200b\uff0c\u200b\u53ea\u200b\u9700\u8981\u200b\u8c03\u7528\u200b\u5bf9\u8c61\u200b\u7684\u200b\u6784\u9020\u51fd\u6570\u200b\u5728\u200b\u8be5\u200b\u5185\u5b58\u200b\u4f4d\u7f6e\u200b\u4e0a\u200b\u6784\u9020\u200b\u5bf9\u8c61\u200b\u5373\u53ef\u200b\u3002\u200b\u5728\u200b\u5df2\u200b\u5206\u914d\u200b\u597d\u200b\u7684\u200b\u5185\u5b58\u200b\u4e0a\u200b\u8fdb\u884c\u200b\u5bf9\u8c61\u200b\u7684\u200b\u6784\u5efa\u200b\uff0c\u200b\u6784\u5efa\u200b\u901f\u5ea6\u200b\u5feb\u200b\uff0c\u200b\u5df2\u200b\u5206\u914d\u200b\u597d\u200b\u7684\u200b\u5185\u5b58\u200b\u53ef\u4ee5\u200b\u53cd\u590d\u200b\u5229\u7528\u200b\uff0c\u200b\u6709\u6548\u200b\u7684\u200b\u907f\u514d\u200b\u5185\u5b58\u200b\u788e\u7247\u200b\u95ee\u9898\u200b\u3002 \uff08\u200b\u5f15\u7528\u200b\uff1ahttps://blog.csdn.net/qq_41453285/article/details/103547699\uff09 Text Only<pre><code>// Construct the value (ie. data_) through placement new with the passed\n// argument.\ntemplate &lt;typename... Arg&gt;\nvoid MakeValue(Arg&amp;&amp;... arg) {\n  internal_statusor::PlacementNew&lt;T&gt;(&amp;dummy_, std::forward&lt;Arg&gt;(arg)...);\n}\n\n// Construct the status (ie. status_) through placement new with the passed\n// argument.\ntemplate &lt;typename... Args&gt;\nvoid MakeStatus(Args&amp;&amp;... args) {\n  internal_statusor::PlacementNew&lt;Status&gt;(&amp;status_,\n                                          std::forward&lt;Args&gt;(args)...);\n}\n\n// Construct an instance of T in `p` through placement new, passing Args... to\n// the constructor.\n// This abstraction is here mostly for the gcc performance fix.\ntemplate &lt;typename T, typename... Args&gt;\nABSL_ATTRIBUTE_NONNULL(1) void PlacementNew(void* p, Args&amp;&amp;... args) {\n  new (p) T(std::forward&lt;Args&gt;(args)...);\n}\n</code></pre><p></p> <p>\u200b\u6570\u636e\u200b\u6790\u6784\u200b\u51fd\u6570\u200b\u4e2d\u200b\u91ca\u653e\u200b\u5185\u5b58\u200b\u3002 </p>Text Only<pre><code>  ~StatusOrData() {\n    if (ok()) {\n      status_.~Status();\n      data_.~T();\n    } else {\n      status_.~Status();\n    }\n  }\n</code></pre><p></p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/FFI%E8%B7%A8%E8%AF%AD%E8%A8%80%E8%B0%83%E7%94%A8/ctypes%E5%9C%B0%E5%9D%80%E4%BC%A0%E9%80%92%E6%88%AA%E6%96%AD%E9%97%AE%E9%A2%98/","title":"Ctypes\u200b\u5730\u5740\u200b\u4f20\u9012\u200b\u622a\u65ad\u200b\u95ee\u9898","text":""},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/FFI%E8%B7%A8%E8%AF%AD%E8%A8%80%E8%B0%83%E7%94%A8/ctypes%E5%9C%B0%E5%9D%80%E4%BC%A0%E9%80%92%E6%88%AA%E6%96%AD%E9%97%AE%E9%A2%98/#ctypes\u5730\u5740\u622a\u65ad\u95ee\u9898","title":"ctypes\u200b\u5730\u5740\u200b\u622a\u65ad\u200b\u95ee\u9898","text":"<p>\u200b\u5728\u200b\u4f7f\u7528\u200bctypes\u200b\u5f00\u53d1\u200bpython\u200b\u8c03\u7528\u200bc\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u63a5\u53e3\u51fd\u6570\u200b\u65f6\u200b\uff0c\u200b\u9700\u8981\u200b\u5728\u200bpython\u200b\u7a0b\u5e8f\u200b\u548c\u200bc\u200b\u7a0b\u5e8f\u200b\u4e4b\u95f4\u200b\u4f20\u9012\u200b\u5730\u5740\u200b\uff0c\u200b\u4e0d\u7ba1\u200b\u662f\u200b\u5806\u200b\u4e0a\u200b\u7684\u200b\u5730\u5740\u200b\u8fd8\u662f\u200b\u6808\u4e0a\u200b\u7684\u200b\u5730\u5740\u200b\uff0c\u200b\u5982\u679c\u200b\u6ca1\u6709\u200b\u8bbe\u7f6e\u200b\u51fd\u6570\u200b\u7684\u200brestype\u200b\u548c\u200bargtypes\u200b\u65f6\u200b\uff0c\u200b\u5f88\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5f15\u8d77\u200bSegment Fault\u200b\u9519\u8bef\u200b\u3002</p> <p>\u200b\u8fd9\u200b\u662f\u56e0\u4e3a\u200b\u5728\u200b\u9ed8\u8ba4\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u5730\u5740\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u88ab\u200b\u622a\u65ad\u200b\uff0c\u200b\u5bfc\u81f4\u200b\u8bbf\u95ee\u200b\u5730\u5740\u200b\u65f6\u200b\uff0c\u200b\u8bbf\u95ee\u200b\u5230\u200b\u9519\u8bef\u200b\u7684\u200b\u5730\u5740\u200b\uff0c\u200b\u51fa\u73b0\u200bSegment Fault\u3002</p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/FFI%E8%B7%A8%E8%AF%AD%E8%A8%80%E8%B0%83%E7%94%A8/ctypes%E5%9C%B0%E5%9D%80%E4%BC%A0%E9%80%92%E6%88%AA%E6%96%AD%E9%97%AE%E9%A2%98/#\u89e3\u51b3\u65b9\u6cd5","title":"\u89e3\u51b3\u200b\u65b9\u6cd5","text":"<p>\u200b\u5728\u200b\u6bcf\u4e2a\u200b\u9700\u8981\u200b\u4f20\u9012\u200b\u5730\u5740\u200b\u7684\u200b\u5730\u65b9\u200b\uff0c\u200b\u8bbe\u7f6e\u200brestype\u200b\u548c\u200bargstype\uff1a</p> <p>\u200b\u5982\u200b\uff1a</p> <p></p>Text Only<pre><code>myfunc.restype = ctypes.c_uint64 \nmyfunc.argtypes = [ctypes.c_uint64]\n</code></pre> \u200b\u5728\u200b\u8bbe\u7f6e\u200bargtypes\u200b\u65f6\u200b\uff0c\u200b\u5982\u679c\u200b\u6709\u200b\u591a\u4e2a\u200b\u53c2\u6570\u200b\u53ef\u4ee5\u200b\u53ea\u200b\u8bbe\u7f6e\u200b\u90e8\u5206\u200b\u53c2\u6570\u200b\u7684\u200bargtype\u3002<p></p> <p>\u200b\u4e5f\u200b\u6709\u200b\u8bf4\u200b\u53ef\u4ee5\u200b\u5c06\u200brestype\u200b\u8bbe\u7f6e\u200b\u4e3a\u200bctypes.c_void_p\u200b\u7c7b\u578b\u200b\u3002</p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/FFI%E8%B7%A8%E8%AF%AD%E8%A8%80%E8%B0%83%E7%94%A8/ctypes%E5%9C%B0%E5%9D%80%E4%BC%A0%E9%80%92%E6%88%AA%E6%96%AD%E9%97%AE%E9%A2%98/#\u5efa\u8bae","title":"\u5efa\u8bae","text":"<p>\u200b\u6211\u200b\u6700\u521d\u200b\u4e5f\u200b\u6ca1\u6709\u200b\u6bcf\u4e2a\u200b\u51fd\u6570\u200b\u90fd\u200b\u53bb\u200b\u8bbe\u7f6e\u200brestype\u200b\u548c\u200bargtypes\uff0c\u200b\u53d1\u73b0\u200b\u5728\u200b\u5df2\u6709\u200b\u7684\u200b\u6d4b\u8bd5\u4ee3\u7801\u200b\u90fd\u200b\u6210\u529f\u200b\u540e\u200b\uff0c\u200b\u5c31\u200b\u89c9\u5f97\u200b\u6ca1\u6709\u200b\u95ee\u9898\u200b\u4e86\u200b\uff0c\u200b\u4f46\u662f\u200b\u540e\u9762\u200b\u9047\u5230\u200b\u4e86\u200bSegment Fault\u3002\u200b\u8fd9\u200b\u5c31\u200b\u5efa\u8bae\u200b\u6211\u4eec\u200b\u5728\u200b\u4f7f\u7528\u200bctypes\u200b\u5728\u200bpython\u200b\u548c\u200bc\u200b\u4e4b\u95f4\u200b\u4f20\u9012\u200b\u5730\u5740\u200b\u65f6\u200b\uff0c\u200b\u4e00\u5b9a\u200b\u8981\u200b\u8bbe\u7f6e\u200brestype\u200b\u548c\u200bargtypes\u3002</p> <p>\u200b\u4e24\u79cd\u200b\u56e0\u4e3a\u200b\u6ca1\u6709\u200b\u8bbe\u7f6e\u200brestype\u200b\u548c\u200bargtypes\u200b\u6709\u8da3\u200b\u7684\u200b\u62a5\u9519\u200b\u7ecf\u5386\u200b\uff1a + \u200b\u76f8\u540c\u200b\u7684\u200b\u4e00\u4e2a\u200b\u51fd\u6570\u200b\u63a5\u53e3\u200b\uff0c\u200b\u8bbe\u7f6e\u200brestype\u200b\u65f6\u200b\uff0c\u200b\u6211\u200b\u5728\u200b\u4f7f\u7528\u200b\u51fd\u6570\u200b\u76f4\u63a5\u200b\u8c03\u7528\u200b\u65f6\u200b\uff0c\u200b\u6ca1\u6709\u200b\u51fa\u73b0\u200bSegment Fault\uff0c\u200b\u4f46\u662f\u200b\u5728\u200bpython\u200b\u4f20\u9012\u200b\u7684\u200b\u4e00\u4e2a\u200b\u7ed9\u200bc\u200b\u7684\u200b\u56de\u8c03\u200b\u51fd\u6570\u200b\u4e2d\u200b\u8c03\u7528\u200b\u4e86\u200b\u8fd9\u4e2a\u200b\u51fd\u6570\u200b\uff0c\u200b\u51fa\u73b0\u200b\u4e86\u200bSegment Fault\u3002</p> <ul> <li>\u200b\u5728\u200b\u666e\u901a\u200bPython\u200b\u73af\u5883\u200b\u548c\u200bvirtual env\u200b\u73af\u5883\u200b\u4e2d\u200b\u90fd\u200b\u6ca1\u6709\u200b\u51fa\u73b0\u200b\u9519\u8bef\u200b\uff0c\u200b\u4f46\u662f\u200b\u5728\u200bconda\u200b\u73af\u5883\u200b\u4e2d\u200b\u76f4\u63a5\u200bSegment Fault\u3002</li> </ul>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/FFI%E8%B7%A8%E8%AF%AD%E8%A8%80%E8%B0%83%E7%94%A8/ctypes%E5%9C%B0%E5%9D%80%E4%BC%A0%E9%80%92%E6%88%AA%E6%96%AD%E9%97%AE%E9%A2%98/#\u4f7f\u7528gdb-debug","title":"\u4f7f\u7528\u200bgdb debug","text":"<p>\u200b\u5728\u200b\u4f7f\u7528\u200bpython ctypes\u200b\u8c03\u7528\u200bc\u200b\u51fd\u6570\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u5982\u679c\u200b\u51fa\u73b0\u200b\u4e86\u200bSegment Fault\u200b\u7b49\u200b\u9519\u8bef\u200b\u65f6\u200b\uff0c\u200b\u5f88\u96be\u200b\u8c03\u8bd5\u200b\uff0c\u200b\u7279\u522b\u200b\u662f\u200b\u5728\u200bpython\u200b\u4f20\u9012\u200b\u56de\u8c03\u200b\u51fd\u6570\u200b\u7ed9\u200bc\u200b\u4f7f\u7528\u200b\u65f6\u200b\u3002</p> <p>\u200b\u4e24\u79cd\u200b\u8c03\u8bd5\u200b\u7684\u200b\u65b9\u6cd5\u200b\uff1a</p> <ul> <li>\u200b\u5728\u200b\u56de\u8c03\u200b\u51fd\u6570\u200b\u7684\u200b\u60c5\u51b5\u200b\uff0c\u200b\u6211\u200b\u53ea\u200b\u4f7f\u7528\u200b\u4e86\u200b\u6253\u5370\u200b\u7684\u200b\u529e\u6cd5\u200b\uff0c\u200b\u6682\u65f6\u200b\u6ca1\u6709\u200b\u53d1\u73b0\u200b\u66f4\u597d\u200b\u7684\u200b\u529e\u6cd5\u200b\u3002</li> </ul> <p>\u200b\u5728\u200bc++\u200b\u8fd9\u8fb9\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u5982\u4e0b\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u6253\u5370\u200b\u51fa\u200b16\u200b\u8fdb\u5236\u200b\u5730\u5740\u200b\uff1a </p>Text Only<pre><code>std::cout &lt;&lt; std::hex &lt;&lt; ptrVar &lt;&lt; std::endl;\n</code></pre><p></p> <p>\u200b\u5728\u200bpython\u200b\u8fd9\u8fb9\u200b\uff1a </p>Text Only<pre><code>print(hex(ptrVar))\n</code></pre> \u200b\u901a\u8fc7\u200b\u5bf9\u6bd4\u200b\u5730\u5740\u200b\u662f\u5426\u200b\u4e00\u6837\u200b\uff0c\u200b\u6765\u200b\u5224\u65ad\u200b\u662f\u5426\u200b\u51fa\u73b0\u200b\u5730\u5740\u200b\u622a\u65ad\u200b\u95ee\u9898\u200b\u3002<p></p> <ul> <li>\u200b\u4f7f\u7528\u200bgdb \u200b\u4f7f\u7528\u200bgdb\u200b\u542f\u52a8\u200b\u6d4b\u8bd5\u7a0b\u5e8f\u200b\uff0c Text Only<pre><code>gdb -args python test_file.py\n</code></pre> \u200b\u5728\u200bgdb\u200b\u4e2d\u200b\u6267\u884c\u200brun\uff0c\u200b\u6267\u884c\u7a0b\u5e8f\u200b\uff0c Text Only<pre><code>run\n</code></pre> \u200b\u5f53\u200b\u51fd\u6570\u200b\u62a5\u9519\u200b\u65f6\u200b\uff0c\u200b\u6253\u5370\u200bbacktrace\uff0c Text Only<pre><code>backtrace\n// \u200b\u6216\u8005\u200b\u4f7f\u7528\u200b\u7f29\u5199\u200b bt\n</code></pre> \u200b\u4f7f\u7528\u200bframe\uff0c\u200b\u5c55\u793a\u200b\u6808\u5e27\u200b Text Only<pre><code>frame number\n</code></pre></li> </ul> <p>\u200b\u7136\u540e\u200b\u901a\u8fc7\u200b\u6253\u5370\u4fe1\u606f\u200b\uff0c\u200b\u5904\u7406\u200b\u89e3\u51b3\u200b\u62a5\u9519\u200b\u95ee\u9898\u200b\u3002</p> <p>\u200b\u6ce8\u610f\u200b: \u200b\u5728\u200b\u4f7f\u7528\u200bgdb\u200b\u8c03\u8bd5\u200b\u7684\u200b\u65f6\u5019\u200b\uff0cc\u200b\u7a0b\u5e8f\u200b\u8fd9\u8fb9\u200b\u5982\u679c\u200b\u65f6\u200bso\uff0c\u200b\u5219\u200b\u8981\u200b\u4f7f\u7528\u200bdebug\u200b\u6a21\u5f0f\u200b\u8fdb\u884c\u200b\u7f16\u8bd1\u200b\uff0c\u200b\u624d\u80fd\u200b\u6253\u5370\u200b\u51fa\u200b\u8be6\u7ec6\u200b\u7684\u200b\u62a5\u9519\u200b\u4f4d\u7f6e\u200b\u3002</p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/FFI%E8%B7%A8%E8%AF%AD%E8%A8%80%E8%B0%83%E7%94%A8/python%E8%B0%83%E7%94%A8c%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/","title":"python\u200b\u8c03\u7528\u200bc\u200b\u8e29\u200b\u5751\u200b\u8bb0\u5f55","text":""},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/FFI%E8%B7%A8%E8%AF%AD%E8%A8%80%E8%B0%83%E7%94%A8/python%E8%B0%83%E7%94%A8c%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/#python\u8c03\u7528c\u8e29\u5751\u8bb0\u5f55","title":"python\u200b\u8c03\u7528\u200bc\u200b\u8e29\u200b\u5751\u200b\u8bb0\u5f55","text":"<p>\u200b\u6700\u8fd1\u200b\u9879\u76ee\u200b\u9700\u6c42\u200b\uff0c\u200b\u4f7f\u7528\u200bpython\u200b\u8c03\u7528\u200bc\u200b\u8bed\u8a00\u200b\u5199\u200b\u7684\u200bso\u200b\u5e93\u200b</p> <p>\u200b\u91c7\u7528\u200b\u4e86\u200bpython\u200b\u7684\u200bctypes\u200b\u6a21\u5757\u200b</p> <p>\u200b\u603b\u7ed3\u200b\u9047\u5230\u200b\u7684\u200b\u4e00\u4e9b\u200b\u5751\u200b</p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/FFI%E8%B7%A8%E8%AF%AD%E8%A8%80%E8%B0%83%E7%94%A8/python%E8%B0%83%E7%94%A8c%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/#\u8981\u70b9","title":"\u8981\u70b9","text":""},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/FFI%E8%B7%A8%E8%AF%AD%E8%A8%80%E8%B0%83%E7%94%A8/python%E8%B0%83%E7%94%A8c%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/#\u7c7b\u578b\u5173\u7cfb","title":"\u7c7b\u578b\u200b\u5173\u7cfb","text":"<ul> <li>\u200b\u8981\u200b\u6ce8\u610f\u200bpython\u200b\u548c\u200bc\u200b\u8bed\u8a00\u200b\u7684\u200b\u53d8\u91cf\u200b\u7c7b\u578b\u200b\u7684\u200b\u5bf9\u5e94\u200b\u5173\u7cfb\u200b\uff0c\u200b\u8fd9\u200b\u5728\u200b\u9ad8\u7ea7\u200b\u8bed\u8a00\u200b\u548c\u200b\u8c03\u7528\u200bc\u200b\u8bed\u8a00\u200b\u4e0a\u200b\u662f\u200b\u7279\u522b\u200b\u91cd\u8981\u200b\u7684\u200b\uff0c\u200b\u5728\u200bjava\u200b\u8c03\u7528\u200bc\u200b\u8bed\u8a00\u200b\u4f7f\u7528\u200bJNA\u200b\u65f6\u200b\u4e5f\u200b\u5c24\u5176\u200b\u91cd\u8981\u200b\u3002</li> <li>\u200b\u4f7f\u7528\u200b\u6700\u591a\u4e14\u200b\u5c24\u5176\u200b\u6ce8\u610f\u200b\u7684\u200b\u662f\u200b\u6307\u9488\u200b\u7c7b\u578b\u200b\uff0c\u200b\u5982\u200bctype\u200b\u7c7b\u5e93\u200b\u4e2d\u6709\u200bc_void _p()\u3001c_char_p()\u200b\u4e24\u79cd\u200b\u6307\u9488\u200b\u7c7b\u578b\u200b\u3002\u200b\u9664\u4e86\u200b\u81ea\u5e26\u200b\u7684\u200b\u4ee5\u4e0a\u200b\u4e24\u79cd\u200b\uff0c\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u5728\u200bpython\u200b\u4e2d\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u7c7b\u200b\u7ee7\u627f\u200bctypes.Structure\u200b\u7c7b\u200b\uff0c\u200b\u7136\u540e\u200b\u4f7f\u7528\u200bctype.POINTER\u200b\u83b7\u53d6\u200b\u5176\u200b\u6307\u9488\u200b\u3002</li> </ul>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/FFI%E8%B7%A8%E8%AF%AD%E8%A8%80%E8%B0%83%E7%94%A8/python%E8%B0%83%E7%94%A8c%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/#python\u7684\u5bf9\u8c61\u751f\u547d\u5468\u671f","title":"python\u200b\u7684\u200b\u5bf9\u8c61\u200b\u751f\u547d\u5468\u671f","text":"<ul> <li>python\u200b\u5728\u200b\u4f7f\u7528\u200breturn\u200b\u8fd4\u56de\u503c\u200b\u65f6\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5728\u200b\u8fd4\u56de\u200b\u4ee5\u540e\u200b\u5373\u200b\u51fd\u6570\u200b\u7ed3\u675f\u200b\u540e\u200b\u5c31\u200b\u4f1a\u200b\u91ca\u653e\u200b\u5bf9\u8c61\u200b\u3002</li> <li>python\u200b\u8c03\u7528\u200bc\u200b\u8bed\u8a00\u200b\u7684\u200b\u5bf9\u8c61\u200b\u65f6\u200b\uff0cc\u200b\u8bed\u8a00\u200b\uff08\u200b\u901a\u200bextern \u201cC\u201d\u200b\u5c06\u200bc++\u200b\u6309\u7167\u200bc\u200b\u8bed\u8a00\u200b\u7f16\u8bd1\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200bnew\u200b\u521b\u5efa\u200b\u5806\u4e0a\u200b\u7684\u200b\u5bf9\u8c61\u200b\u4e86\u200b\uff09\u200b\u901a\u8fc7\u200bnew\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u5806\u4e0a\u200b\u7684\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u7136\u540e\u200b\u5c06\u200b\u5c06\u200b\u6307\u9488\u200b\u4ee5\u200bvoid *\u200b\u7c7b\u578b\u200b\u8fd4\u56de\u200b\u7ed9\u200bpython\u3002\u200b\u5982\u679c\u200b\u4ee5\u540e\u200b\u90fd\u200b\u4e0d\u200b\u4f7f\u7528\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u5fc5\u987b\u200b\u5728\u200bc\u200b\u7c7b\u5e93\u200b\u8fd9\u8fb9\u200b\u5c01\u88c5\u200bdispose\u200b\u51fd\u6570\u200b\uff08\u200b\u7528\u4e8e\u200b\u8c03\u7528\u200bdelete\u200b\u91ca\u653e\u200bnew\u200b\u521b\u5efa\u200b\u7684\u200b\u8d44\u6e90\u200b\uff09\uff0c\u200b\u7136\u540e\u200b\u901a\u8fc7\u200bpython\u200b\u8c03\u7528\u200bc\u200b\u5c01\u88c5\u200b\u7684\u200bdispose\u200b\u51fd\u6570\u200b\u91ca\u653e\u200b\u8d44\u6e90\u200b\u3002\u200b\u4e00\u200b\u5f00\u59cb\u200b\uff0c\u200b\u51c6\u5907\u200b\u5c06\u200b\u8c03\u7528\u200bdispose\u200b\u7684\u200b\u4ee3\u7801\u200b\u5199\u200b\u5728\u200bpython\u200b\u7684\u200b\u4e00\u4e2a\u200b\u5c01\u88c5\u200b\u7684\u200b\u6307\u9488\u200b\u5bf9\u8c61\u200b\u7684\u200b__delete__\uff08\uff09\u200b\u51fd\u6570\u200b\u4e2d\u200b\uff0c\u200b\u4f46\u662f\u200b\u7531\u4e8e\u200b\u7b2c\u4e00\u6761\u200b\uff0c\u200b\u5219\u200b\u9009\u62e9\u200b\u4e86\u200b\u5199\u200b\u5728\u200b\u4e00\u4e2a\u200b\u5c01\u88c5\u200b\u7684\u200b\u6307\u9488\u200b\u5bf9\u8c61\u200b\u7684\u200bdispose\uff08\uff09\u200b\u51fd\u6570\u200b\u4e2d\u200b\uff0c\u200b\u624b\u52a8\u200b\u8c03\u7528\u200bdispose\uff08\uff09\u200b\u51fd\u6570\u200b\u8fdb\u884c\u200b\u8d44\u6e90\u200b\u91ca\u653e\u200b\u3002</li> </ul>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/FFI%E8%B7%A8%E8%AF%AD%E8%A8%80%E8%B0%83%E7%94%A8/python%E8%B0%83%E7%94%A8c%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/#\u56de\u8c03\u51fd\u6570","title":"\u56de\u8c03\u200b\u51fd\u6570","text":"<ul> <li>python\u200b\u5c06\u200b\u51fd\u6570\u200b\u901a\u8fc7\u200b\u6307\u9488\u200b\u7684\u200b\u5f62\u5f0f\u200b\u4f20\u7ed9\u200bc\u200b\u7c7b\u5e93\u200b\u4e2d\u200b\u51fd\u6570\u6307\u9488\u200b\uff0c\u200b\u7136\u540e\u200b\u5728\u200bc\u200b\u7c7b\u5e93\u200b\u4e2d\u200b\u8fdb\u884c\u200b\u8c03\u7528\u200b\u3002</li> <li>\u200b\u89c2\u5bdf\u200b\u5230\u200bpython\u200b\u56de\u8c03\u200b\u51fd\u6570\u200b\u4e2d\u200b\u6253\u5370\u200b\u7684\u200bc\u200b\u7c7b\u5e93\u200b\u4e2d\u200b\u6307\u9488\u200b\u7684\u200b\u5730\u5740\u200b\u6bd4\u200b\u666e\u901a\u200b\u51fd\u6570\u200b\u4e2d\u200b\u957f\u200b\uff0c\u200b\u662f\u56e0\u4e3a\u200bpython\u200b\u56de\u8c03\u200b\u51fd\u6570\u200b\u662f\u200b\u5728\u200bc\u200b\u7c7b\u5e93\u200b\u4e2d\u200b\u8c03\u7528\u200b\u7684\u200b\uff0c\u200b\u6240\u4ee5\u200b\u662f\u200b\u5728\u200b\u6808\u200b\u7a7a\u95f4\u200b\u3002\u200b\u666e\u901a\u200b\u51fd\u6570\u200b\u5728\u200bpython\u200b\u8fd9\u8fb9\u200b\u6267\u884c\u200b\uff0c\u200b\u662f\u200bc\u200b\u7c7b\u5e93\u200bnew\u200b\u7684\u200b\u5bf9\u8c61\u200b\u6307\u9488\u200b\u4f20\u9012\u200b\u8fc7\u6765\u200b\u7684\u200b\uff0c\u200b\u6240\u4ee5\u200b\u5728\u200b\u5806\u200b\u4e0a\u200b\u3002\u200b\u6240\u4ee5\u200b\u5728\u200bpython\u200b\u7684\u200b\u56de\u8c03\u200b\u51fd\u6570\u200b\u4e2d\u200b\uff0c\u200b\u8981\u200b\u6307\u5b9a\u200b\u8c03\u7528\u200bc\u200b\u7c7b\u200b\u5e93\u51fd\u6570\u200b\u65f6\u200b\u4f20\u5165\u200b\u7684\u200b\u53c2\u6570\u200b\u6307\u9488\u200b\u7684\u200b\u957f\u5ea6\u200b\u548c\u200b\u8fd4\u56de\u503c\u200b\u7684\u200b\u6307\u9488\u200b\u7684\u200b\u957f\u5ea6\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u51fd\u6570\u200b\u540d\u200b.retypes = ctypes.c_u_int_64\uff0c\u200b\u51fd\u6570\u200b\u540d\u200b.argstypes = [c_void_p,c_void_p]\u200b\u6307\u5b9a\u200b\uff0c\u200b\u4e0d\u7136\u200bpython\u200b\u4f1a\u200b\u5c06\u200b\u5730\u5740\u200b\u957f\u5ea6\u200b\u5207\u65ad\u200b\uff0c\u200b\u5730\u5740\u200b\u53d8\u77ed\u200b\uff0c\u200b\u6307\u9488\u200b\u503c\u200b\u9519\u8bef\u200b\uff0c\u200b\u627e\u200b\u4e0d\u5230\u200b\u6307\u9488\u200b\u3002</li> <li>\u200b\u5728\u200b\u56de\u8c03\u200b\u51fd\u6570\u200b\u4f20\u5165\u200b\u65f6\u200b\uff0cpython\u200b\u7684\u200b\u56de\u8c03\u200b\u51fd\u6570\u200b\u8981\u200b\u52a0\u4e0a\u200bself. \u200b\u6216\u8005\u200b \u200b\u8bbe\u7f6e\u200b\u4e3a\u200b\u5168\u5c40\u53d8\u91cf\u200b\uff0c\u200b\u5ef6\u957f\u200b\u56de\u8c03\u200b\u51fd\u6570\u200b\u7684\u200b\u751f\u547d\u5468\u671f\u200b\uff0c\u200b\u4e0d\u7136\u200b\u6ce8\u518c\u200b\u51fd\u6570\u200b\u7ed3\u675f\u200b\u540e\u200b\uff0c\u200b\u56de\u8c03\u200b\u51fd\u6570\u200b\u5c31\u200b\u88ab\u200b\u56de\u6536\u200b\u4e86\u200b\uff0cc\u200b\u7c7b\u5e93\u200b\u90a3\u8fb9\u200b\u5c06\u200b\u627e\u200b\u4e0d\u5230\u200b\uff0c\u200b\u53d1\u751f\u200b\u6bb5\u200b\u9519\u8bef\u200b\u3002</li> </ul> <p>\u200b\u672a\u5b8c\u5f85\u7eed\u200b\uff0c\u200b\u540e\u9762\u200b\u5c06\u200b\u8865\u5145\u200b\u4f8b\u5b50\u200b\u8fdb\u884c\u200b\u89e3\u91ca\u200b\u2026</p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/Python/","title":"Python","text":""},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/Python/#python\u52a8\u6001\u53c2\u6570\u4f20\u9012","title":"Python\u200b\u52a8\u6001\u200b\u53c2\u6570\u4f20\u9012","text":"<p>\u200b\u5728\u200bpython\u200b\u4e2d\u200b\u7684\u200b\u52a8\u6001\u200b\u53c2\u6570\u4f20\u9012\u200b\u4f7f\u7528\u200bargs \u200b\u548c\u200b kargs\u3002\u200b\u5176\u4e2d\u200bargs\u200b\u88ab\u200b\u89e3\u6790\u200b\u4e3a\u200b\u5143\u7ec4\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5305\u62ec\u200b\u4e0d\u540c\u200b\u7c7b\u578b\u200b\u7684\u200b\u53c2\u6570\u200b\uff0c\u200b\u6bd4\u5982\u200b\uff0812, \u2018s\u2019\uff09\u3002kargs\u200b\u88ab\u200b\u89e3\u6790\u200b\u4e3a\u200b\u5b57\u5178\u200b\uff0c{\u201ck1\u201d: \u201cv1\u201d, \u201ck2\u201d:233}\u3002 \u200b\u5728\u200b\u7f16\u7a0b\u200b\u4e2d\u200b\u9047\u5230\u200b\u4e00\u4e2a\u200b\u95ee\u9898\u200b\uff1a </p>Python<pre><code>def func(*args, **kargs):\n    pass\n\nfunc(name = \"tom\", age = 18)\n</code></pre> \u200b\u4e0a\u9762\u200b\u7684\u200b\u65b9\u5f0f\u200b\u53ef\u4ee5\u200b\u5bf9\u200bfunc\u200b\u8fdb\u884c\u200b\u8c03\u7528\u200b\uff0c\u200b\u4f46\u662f\u200b\u5982\u4f55\u200b\u4f7f\u5f97\u200bname \u200b\u548c\u200b age\u200b\u6210\u4e3a\u200b\u53c2\u6570\u200b\u5462\u200b\uff1f \u200b\u89e3\u51b3\u200b\u65b9\u6cd5\u200b\uff1a\u200b\u901a\u8fc7\u200b\u5b9a\u4e49\u200b\u5b57\u5178\u200bd\uff0c\u200b\u7136\u540e\u200bfunc(*d)\u200b\u89e3\u51b3\u200b\u3002 Python<pre><code>d = {\n    \"name\" = \"tom\",\n    \"age\" = 18\n}\nfunc(**d)\n</code></pre> \u200b\u8fd9\u6837\u200bname\u200b\u548c\u200bage\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u4ee5\u200b\u53d8\u91cf\u200b\u7684\u200b\u5f62\u5f0f\u200b\u52a8\u6001\u200b\u4f20\u9012\u200b\u4e86\u200b\u3002\u200b\u4f8b\u5982\u200b\uff1a Python<pre><code>def func(*args, **kargs):\n    print(args)\n\n    print(kargs)\n    return 0\nfunc(1, 2, 3, a= \"bbb\")\nfunc(a = \"aaa\", b = 1)\n\nd1 = {\n    \"hello\": \"world\",\n    \"abc\": \"def\",\n    \"kkk\": 124\n}\n\nfunc(**d1)\n\n\nl1 = (1,2, \"adfaf\")\nfunc(*l1)\n\na = \"image\"\na_v = 1234\nd2 = {\n    a:a_v\n}\n\nfunc(**d2)\n</code></pre> Bash<pre><code>(1, 2, 3)\n{'a': 'bbb'}\n()\n{'a': 'aaa', 'b': 1}\n()\n{'hello': 'world', 'abc': 'def', 'kkk': 124}\n(1, 2, 'adfaf')\n{}\n()\n{'image': 1234}\n</code></pre><p></p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/Python/#python\u4ee3\u7801\u79fb\u690d\u6210c","title":"python\u200b\u4ee3\u7801\u200b\u79fb\u690d\u200b\u6210\u200bc++","text":"<p>\u200b\u5728\u200b\u6df1\u5ea6\u200b\u5b66\u4e60\u200b\u7b49\u200b\u9886\u57df\u200b\uff0c\u200b\u9996\u5148\u200b\u4f1a\u200b\u901a\u8fc7\u200bpython\u200b\u5f00\u53d1\u200b\u9a8c\u8bc1\u200b\uff0c\u200b\u4f46\u662f\u200b\u5728\u200b\u90e8\u7f72\u200b\u65f6\u200b\uff0c\u200b\u4e3a\u4e86\u200b\u63d0\u9ad8\u200b\u7a0b\u5e8f\u6267\u884c\u200b\u6548\u7387\u200b\uff0c\u200b\u9700\u8981\u200b\u5c06\u200bpython\u200b\u5b9e\u73b0\u200b\u7684\u200b\u7b97\u6cd5\u200b\u5904\u7406\u200b\u4ee3\u7801\u200b\u8f6c\u6362\u200b\u6210\u4e3a\u200bc++\u200b\u4ee3\u7801\u200b\uff0c \u200b\u901a\u8fc7\u200b\u8c03\u7814\u200b\u6709\u200b\u51e0\u79cd\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u6bd4\u5982\u200b\uff1a</p> <ul> <li>\u200b\u4f7f\u7528\u200b\u4e00\u4e9b\u200b\u81ea\u52a8\u200b\u8f6c\u6362\u200b\u5de5\u5177\u200b</li> <li>\u200b\u5728\u200bc++\u200b\u91cc\u9762\u200b\u4f7f\u7528\u200b\uff0cEigen\u200b\u5e93\u200b\u3001NumCpp\u200b\u5e93\u200b\u7b49\u200b\u53bb\u200b\u7f16\u5199\u200bpython\u200b\u91cc\u200bNumpy\u200b\u5904\u7406\u200b\u903b\u8f91\u200b</li> <li>\u200b\u76f4\u63a5\u200b\u6784\u9020\u200bVector\u200b\u7528\u200b\u4e00\u7ef4\u200b\u8868\u793a\u200bpython Numpy\u200b\u591a\u7ef4\u200b\u6570\u7ec4\u200b\uff0c\u200b\u7136\u540e\u200b\u7f16\u5199\u200b\u64cd\u4f5c\u200b\u903b\u8f91\u200b</li> </ul> <p>\u200b\u4e0b\u9762\u200b\u5bf9\u200b\u51e0\u79cd\u200b\u65b9\u5f0f\u200b\u7684\u200b\u4f18\u7f3a\u70b9\u200b\u8fdb\u884c\u200b\u603b\u7ed3\u200b\uff1a     \u200b\u81ea\u52a8\u200b\u8f6c\u6362\u200b\u5de5\u5177\u200b\u4e00\u822c\u200b\u53ef\u4ee5\u200b\u8f6c\u6362\u200b\u5178\u578b\u200b\u7684\u200bPython\u200b\u4ee3\u7801\u200b\uff0c\u200b\u4f46\u662f\u200b\u4e0d\u200b\u652f\u6301\u200b\u6240\u6709\u200b\u7684\u200b\u3002 \u200b\u7b2c\u4e09\u65b9\u200b\u5e93\u200b\u7684\u200b\u4f7f\u7528\u200b\u5206\u200b\u4e24\u79cd\u200b\u60c5\u51b5\u200b\uff0c\u200b\u5982\u679c\u200bpython\u200b\u4ee3\u7801\u200b\u903b\u8f91\u200b\u7b80\u5355\u200b\uff0c\u200b\u5f15\u5165\u200b\u7b2c\u4e09\u65b9\u200b\u5e93\u200b\uff0c\u200b\u4f1a\u200b\u589e\u52a0\u200b\u6210\u672c\u200b\uff0c\u200b\u6bd4\u5982\u200b\u5b66\u4e60\u200b\u6210\u672c\u200b\u3001\u200b\u7f16\u8bd1\u200b\u6210\u672c\u200b\uff0c\u200b\u800c\u4e14\u200b\u4e09\u65b9\u200b\u5e93\u200b\u5982\u679c\u200b\u4e0d\u200b\u719f\u6089\u200b\u4ea7\u751f\u200bbug\uff0c\u200b\u96be\u4ee5\u89e3\u51b3\u200b\u3002\u200b\u5982\u679c\u200bpython\u200b\u4ee3\u7801\u200b\u903b\u8f91\u200b\u590d\u6742\u200b\uff0c\u200b\u6bd4\u5982\u200b\u4f7f\u7528\u200b\u4e86\u200b\u5f88\u591a\u200b\u7ebf\u6027\u4ee3\u6570\u200b\u7b49\u200b\u51fd\u6570\u200b\u8ba1\u7b97\u200b\uff0c\u200b\u8fd9\u65f6\u200b\u53ef\u4ee5\u200b\u6781\u5927\u200b\u63d0\u9ad8\u6548\u7387\u200b\u3002 \u200b\u5728\u200b\u4f7f\u7528\u200b\u7b2c\u4e09\u65b9\u200b\u5e93\u65f6\u200b\uff0c\u200b\u8fd8\u200b\u9700\u8981\u200b\u8003\u8651\u200b\u90e8\u7f72\u200b\u73af\u5883\u200b\u7684\u200bC++\u200b\u7248\u672c\u200b\u8981\u6c42\u200b\uff0c\u200b\u5373\u200b\u7f16\u8bd1\u5668\u200b\u7248\u672c\u200bgcc\u3001clang\u200b\u7684\u200b\u7248\u672c\u200b\u652f\u6301\u200b\u60c5\u51b5\u200b\uff0c\u200b\u6bd4\u5982\u200bNumCpp\u200b\u662f\u200b\u9700\u8981\u200b C++17\u200b\u7248\u672c\u200b\u4ee5\u4e0a\u200b\u8981\u6c42\u200b\u7684\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5728\u200b\u4e00\u4e9b\u200b\u90e8\u7f72\u200b\u73af\u5883\u200b\u4e2d\u200b\u53ef\u80fd\u200b\u5c31\u200b\u4e0d\u80fd\u200b\u4f7f\u7528\u200b\u3002\u200b\u5f53\u7136\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u9009\u62e9\u200b\u652f\u6301\u200bc++\u200b\u7248\u672c\u200b\u66f4\u200b\u9ad8\u200b\u7684\u200b\u4ea4\u53c9\u200b\u7f16\u8bd1\u200b\u73af\u5883\u200b\uff0c\u200b\u63d0\u9ad8\u200b\u5f00\u53d1\u200b\u4f53\u9a8c\u200b\u3002 \u200b\u901a\u8fc7\u200bVector\u200b\u4ee5\u53ca\u200b\u5176\u5b83\u200bC++\u200b\u539f\u751f\u200b\u6570\u636e\u7ed3\u6784\u200b\u7f16\u5199\u200b\uff0c\u200b\u5177\u6709\u200b\u66f4\u5927\u200b\u7684\u200b\u53ef\u63a7\u6027\u200b\u3002\u200b\u5728\u200bcpu\u200b\u773c\u91cc\u200b\uff0c\u200b\u591a\u7ef4\u200b\u6570\u7ec4\u200b\u90fd\u200b\u662f\u200b\u88ab\u200b\u5f53\u4f5c\u200b\u4e00\u7ef4\u200b\u6570\u7ec4\u200b\u6765\u200b\u5904\u7406\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u5e93\u200b\u53ea\u662f\u200b\u5728\u200b\u4e0a\u5c42\u200b\u8fdb\u884c\u200b\u4e86\u200b\u5c01\u88c5\u200b\u3002\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200bPaddleDetection\u200b\u4e2d\u200bdeploy\u200b\u7684\u200b\u4f8b\u5b50\u200b\uff0cpython\u200b\u548c\u200bC++\u200b\u7a0b\u5e8f\u200b\u5982\u4f55\u200b\u8f6c\u6362\u200b\u7684\u200b\u3002</p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/PyQt%E6%8A%80%E6%B3%95/Network%20Graph%20of%20PyQt5/","title":"Network Graph of PyQt5","text":"Python<pre><code>import math\nimport sys\nfrom typing import Dict\n\nfrom PyQt5.QtCore import (QEasingCurve, QLineF,\n                          QParallelAnimationGroup, QPointF,\n                          QPropertyAnimation, QRectF, Qt)\nfrom PyQt5.QtGui import QBrush, QColor, QPainter, QPen, QPolygonF\nfrom PyQt5.QtWidgets import (QApplication, QComboBox, QGraphicsItem,\n                             QGraphicsObject, QGraphicsScene, QGraphicsView,\n                             QStyleOptionGraphicsItem, QVBoxLayout, QWidget)\n\nimport networkx as nx\n\n\nclass Node(QGraphicsObject):\n    \"\"\"A QGraphicsItem representing node in a graph\"\"\"\n\n    def __init__(self, name: str, nodeArgs: Dict = None, parent=None):\n        \"\"\"Node constructor\n\n        Args:\n            name (str): Node label\n        \"\"\"\n        super().__init__(parent)\n        self._name = name\n        self._edges = []\n        if nodeArgs.get(\"color\") is None:\n            self._color = \"#5AD469\"\n        else:\n            self._color = nodeArgs.get(\"color\")\n        self._radius = 30\n        self._rect = QRectF(0, 0, self._radius * 2, self._radius * 2)\n\n        self.setFlag(QGraphicsItem.ItemIsMovable)\n        self.setFlag(QGraphicsItem.ItemSendsGeometryChanges)\n        self.setCacheMode(QGraphicsItem.DeviceCoordinateCache)\n\n    def boundingRect(self) -&gt; QRectF:\n        \"\"\"Override from QGraphicsItem\n\n        Returns:\n            QRect: Return node bounding rect\n        \"\"\"\n        return self._rect\n\n    def paint(self, painter: QPainter, option: QStyleOptionGraphicsItem, widget: QWidget = None):\n        \"\"\"Override from QGraphicsItem\n\n        Draw node\n\n        Args:\n            painter (QPainter)\n            option (QStyleOptionGraphicsItem)\n        \"\"\"\n        painter.setRenderHints(QPainter.Antialiasing)\n        painter.setPen(\n            QPen(\n                QColor(self._color).darker(),\n                2,\n                Qt.SolidLine,\n                Qt.RoundCap,\n                Qt.RoundJoin,\n            )\n        )\n        painter.setBrush(QBrush(QColor(self._color)))\n        painter.drawEllipse(self.boundingRect())\n        painter.setPen(QPen(QColor(\"white\")))\n        painter.drawText(self.boundingRect(), Qt.AlignCenter, self._name)\n\n    def add_edge(self, edge):\n        \"\"\"Add an edge to this node\n\n        Args:\n            edge (Edge)\n        \"\"\"\n        self._edges.append(edge)\n\n    def itemChange(self, change: QGraphicsItem.GraphicsItemChange, value):\n        \"\"\"Override from QGraphicsItem\n\n        Args:\n            change (QGraphicsItem.GraphicsItemChange)\n            value (Any)\n\n        Returns:\n            Any\n        \"\"\"\n        if change == QGraphicsItem.ItemPositionHasChanged:\n            for edge in self._edges:\n                edge.adjust()\n\n        return super().itemChange(change, value)\n\n\nclass Edge(QGraphicsItem):\n    def __init__(self, source, dest, edgeArgs, parent=None):\n        \"\"\"Edge constructor\n\n        Args:\n            source (Node): source node\n            dest (Node): destination node\n        \"\"\"\n        super().__init__(parent)\n        self._source = source\n        self._dest = dest\n\n        self._tickness = 2\n\n        if edgeArgs.get(\"color\") is None:\n            self._color = QColor(\"#2BB53C\")\n        else:\n            self._color = edgeArgs.get(\"color\")\n\n        self._arrow_size = 20\n\n        self._source.add_edge(self)\n        self._dest.add_edge(self)\n\n        self._line = QLineF()\n        self.setZValue(-1)\n        self.adjust()\n\n    def boundingRect(self):\n        \"\"\"Override from QGraphicsItem\n\n        Returns:\n            QRectF: Return node bounding rect\n        \"\"\"\n        return QRectF(self._line.p1(), self._line.p2()).normalized().adjusted(\n            -self._tickness - self._arrow_size,\n            -self._tickness - self._arrow_size,\n            self._tickness + self._arrow_size,\n            self._tickness + self._arrow_size,\n        )\n\n    def adjust(self):\n        \"\"\"\n        Update edge position from source and destination node.\n        This method is called from Node::itemChange\n        \"\"\"\n        self.prepareGeometryChange()\n        self._line = QLineF(\n            self._source.pos() + self._source.boundingRect().center(),\n            self._dest.pos() + self._dest.boundingRect().center(),\n        )\n\n    def _draw_arrow(self, painter, start, end):\n        \"\"\"Draw arrow from start point to end point.\n\n        Args:\n            painter (QPainter)\n            start (QPointF): start position\n            end (QPointF): end position\n        \"\"\"\n        painter.setBrush(QBrush(QColor(self._color)))\n\n        line = QLineF(end, start)\n\n        angle = math.atan2(-line.dy(), line.dx())\n        arrow_p1 = line.p1() + QPointF(\n            math.sin(angle + math.pi / 3) * self._arrow_size,\n            math.cos(angle + math.pi / 3) * self._arrow_size,\n        )\n        arrow_p2 = line.p1() + QPointF(\n            math.sin(angle + math.pi - math.pi / 3) * self._arrow_size,\n            math.cos(angle + math.pi - math.pi / 3) * self._arrow_size,\n        )\n\n        arrow_head = QPolygonF()\n        arrow_head.clear()\n        arrow_head.append(line.p1())\n        arrow_head.append(arrow_p1)\n        arrow_head.append(arrow_p2)\n        painter.drawLine(line)\n        painter.drawPolygon(arrow_head)\n\n    def _arrow_target(self):\n        \"\"\"Calculate the position of the arrow taking into account the size of the destination node\n\n        Returns:\n            QPointF\n        \"\"\"\n        target = self._line.p1()\n        center = self._line.p2()\n        radius = self._dest._radius\n        vector = target - center\n        length = math.sqrt(vector.x() ** 2 + vector.y() ** 2)\n        if length == 0:\n            return target\n        normal = vector / length\n        target = QPointF(center.x() + (normal.x() * radius), center.y() + (normal.y() * radius))\n\n        return target\n\n    def paint(self, painter, option, widget=None):\n        \"\"\"Override from QGraphicsItem\n\n        Draw Edge. This method is called from Edge.adjust()\n\n        Args:\n            painter (QPainter)\n            option (QStyleOptionGraphicsItem)\n        \"\"\"\n\n        if self._source and self._dest:\n            painter.setRenderHints(QPainter.Antialiasing)\n\n            painter.setPen(\n                QPen(\n                    QColor(self._color),\n                    self._tickness,\n                    Qt.SolidLine,\n                    Qt.RoundCap,\n                    Qt.RoundJoin,\n                )\n            )\n            painter.drawLine(self._line)\n            self._draw_arrow(painter, self._line.p1(), self._arrow_target())\n            self._arrow_target()\n\n\nclass GraphView(QGraphicsView):\n    def __init__(self, graph: nx.DiGraph, parent=None):\n        \"\"\"GraphView constructor\n\n        This widget can display a directed graph\n\n        Args:\n            graph (nx.DiGraph): a networkx directed graph\n        \"\"\"\n        super().__init__()\n        self._graph = graph\n        self._scene = QGraphicsScene()\n        self.setScene(self._scene)\n\n        # Used to add space between nodes\n        self._graph_scale = 200\n\n        # Map node name to Node object {str=&gt;Node}\n        self._nodes_map = {}\n\n        # List of networkx layout function\n        self._nx_layout = {\n            \"circular\": nx.circular_layout,\n            \"planar\": nx.planar_layout,\n            \"random\": nx.random_layout,\n            \"shell_layout\": nx.shell_layout,\n            \"kamada_kawai_layout\": nx.kamada_kawai_layout,\n            \"spring_layout\": nx.spring_layout,\n            \"spiral_layout\": nx.spiral_layout,\n        }\n\n        self._load_graph()\n        self.set_nx_layout(\"circular\")\n\n    def get_nx_layouts(self) -&gt; list:\n        \"\"\"Return all layout names\n\n        Returns:\n            list: layout name (str)\n        \"\"\"\n        return self._nx_layout.keys()\n\n    def set_nx_layout(self, name: str):\n        \"\"\"Set networkx layout and start animation\n\n        Args:\n            name (str): Layout name\n        \"\"\"\n        if name in self._nx_layout:\n            self._nx_layout_function = self._nx_layout[name]\n\n            # Compute node position from layout function\n            positions = self._nx_layout_function(self._graph)\n\n            # Change position of all nodes using an animation\n            self.animations = QParallelAnimationGroup()\n            for node, pos in positions.items():\n                x, y = pos\n                x *= self._graph_scale\n                y *= self._graph_scale\n                item = self._nodes_map[node]\n\n                animation = QPropertyAnimation(item, b\"pos\")\n                animation.setDuration(1000)\n                animation.setEndValue(QPointF(x, y))\n                animation.setEasingCurve(QEasingCurve.OutExpo)\n                self.animations.addAnimation(animation)\n\n            self.animations.start()\n\n    def _load_graph(self):\n        \"\"\"Load graph into QGraphicsScene using Node class and Edge class\"\"\"\n\n        self.scene().clear()\n        self._nodes_map.clear()\n\n        # Add nodes\n        for node in self._graph:\n            nodeAttr = self._graph.nodes.get(node)\n            item = Node(node, nodeAttr)\n            self.scene().addItem(item)\n            self._nodes_map[node] = item\n\n        # Add edges\n        for a, b, attr in self._graph.edges(data=True):\n            source = self._nodes_map[a]\n            dest = self._nodes_map[b]\n            edgeArgs = attr\n            self.scene().addItem(Edge(source, dest, edgeArgs))\n\n\nclass MainWindow(QWidget):\n    def __init__(self, parent=None):\n        super().__init__()\n\n        self.graph = nx.DiGraph()\n\n        self.graph.add_node(\"1\", color=\"red\")\n\n        self.graph.add_edges_from(\n            [\n                (\"1\", \"2\", {\"color\": \"blue\"}),\n                (\"2\", \"1\"),\n                (\"2\", \"3\"),\n                (\"3\", \"4\"),\n                (\"1\", \"5\"),\n                (\"1\", \"6\"),\n                (\"1\", \"7\"),\n            ]\n        )\n\n        self.view = GraphView(self.graph)\n        self.choice_combo = QComboBox()\n        self.choice_combo.addItems(self.view.get_nx_layouts())\n        v_layout = QVBoxLayout(self)\n        v_layout.addWidget(self.choice_combo)\n        v_layout.addWidget(self.view)\n        self.choice_combo.currentTextChanged.connect(self.view.set_nx_layout)\n\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n\n    # Create a networkx graph\n\n    widget = MainWindow()\n    widget.show()\n    widget.resize(800, 600)\n    sys.exit(app.exec())\n</code></pre> <p>PySide6 Example</p> <ul> <li>add update graph function, and use signal emit graph update Python<pre><code>import math\nimport sys\nimport time\nfrom typing import Dict\n\nfrom PyQt5.QtCore import (QEasingCurve, QLineF,\n                          QParallelAnimationGroup, QPointF,\n                          QPropertyAnimation, QRectF, Qt, pyqtSignal, QThread)\nfrom PyQt5.QtGui import QBrush, QColor, QPainter, QPen, QPolygonF\nfrom PyQt5.QtWidgets import (QApplication, QComboBox, QGraphicsItem,\n                             QGraphicsObject, QGraphicsScene, QGraphicsView,\n                             QStyleOptionGraphicsItem, QVBoxLayout, QWidget)\n\nimport networkx as nx\n\n\nclass Node(QGraphicsObject):\n    \"\"\"A QGraphicsItem representing node in a graph\"\"\"\n\n    def __init__(self, name: str, nodeArgs: Dict = None, parent=None):\n        \"\"\"Node constructor\n\n        Args:\n            name (str): Node label\n        \"\"\"\n        super().__init__(parent)\n        self._name = name\n        self._edges = []\n        if nodeArgs.get(\"color\") is None:\n            self._color = \"#5AD469\"\n        else:\n            self._color = nodeArgs.get(\"color\")\n        self._radius = 30\n        self._rect = QRectF(0, 0, self._radius * 2, self._radius * 2)\n\n        self.setFlag(QGraphicsItem.ItemSendsGeometryChanges)\n        self.setCacheMode(QGraphicsItem.DeviceCoordinateCache)\n\n    def boundingRect(self) -&gt; QRectF:\n        \"\"\"Override from QGraphicsItem\n\n        Returns:\n            QRect: Return node bounding rect\n        \"\"\"\n        return self._rect\n\n    def paint(self, painter: QPainter, option: QStyleOptionGraphicsItem, widget: QWidget = None):\n        \"\"\"Override from QGraphicsItem\n\n        Draw node\n\n        Args:\n            painter (QPainter)\n            option (QStyleOptionGraphicsItem)\n        \"\"\"\n        painter.setRenderHints(QPainter.Antialiasing)\n        painter.setPen(\n            QPen(\n                QColor(self._color).darker(),\n                2,\n                Qt.SolidLine,\n                Qt.RoundCap,\n                Qt.RoundJoin,\n            )\n        )\n        painter.setBrush(QBrush(QColor(self._color)))\n        painter.drawEllipse(self.boundingRect())\n        painter.setPen(QPen(QColor(\"white\")))\n        painter.drawText(self.boundingRect(), Qt.AlignCenter, self._name)\n\n    def add_edge(self, edge):\n        \"\"\"Add an edge to this node\n\n        Args:\n            edge (Edge)\n        \"\"\"\n        self._edges.append(edge)\n\n    def itemChange(self, change: QGraphicsItem.GraphicsItemChange, value):\n        \"\"\"Override from QGraphicsItem\n\n        Args:\n            change (QGraphicsItem.GraphicsItemChange)\n            value (Any)\n\n        Returns:\n            Any\n        \"\"\"\n        if change == QGraphicsItem.ItemPositionHasChanged:\n            for edge in self._edges:\n                edge.adjust()\n\n        return super().itemChange(change, value)\n\n\nclass Edge(QGraphicsItem):\n    def __init__(self, source, dest, edgeArgs, parent=None):\n        \"\"\"Edge constructor\n\n        Args:\n            source (Node): source node\n            dest (Node): destination node\n        \"\"\"\n        super().__init__(parent)\n        self._source = source\n        self._dest = dest\n\n        self._tickness = 2\n\n        if edgeArgs.get(\"color\") is None:\n            self._color = QColor(\"#2BB53C\")\n        else:\n            self._color = edgeArgs.get(\"color\")\n\n        self._arrow_size = 20\n\n        self._source.add_edge(self)\n        self._dest.add_edge(self)\n\n        self._line = QLineF()\n        self.setZValue(-1)\n        self.adjust()\n\n    def boundingRect(self):\n        \"\"\"Override from QGraphicsItem\n\n        Returns:\n            QRectF: Return node bounding rect\n        \"\"\"\n        return QRectF(self._line.p1(), self._line.p2()).normalized().adjusted(\n            -self._tickness - self._arrow_size,\n            -self._tickness - self._arrow_size,\n            self._tickness + self._arrow_size,\n            self._tickness + self._arrow_size,\n        )\n\n    def adjust(self):\n        \"\"\"\n        Update edge position from source and destination node.\n        This method is called from Node::itemChange\n        \"\"\"\n        self.prepareGeometryChange()\n        self._line = QLineF(\n            self._source.pos() + self._source.boundingRect().center(),\n            self._dest.pos() + self._dest.boundingRect().center(),\n        )\n\n    def _draw_arrow(self, painter, start, end):\n        \"\"\"Draw arrow from start point to end point.\n\n        Args:\n            painter (QPainter)\n            start (QPointF): start position\n            end (QPointF): end position\n        \"\"\"\n        painter.setBrush(QBrush(QColor(self._color)))\n\n        line = QLineF(end, start)\n\n        angle = math.atan2(-line.dy(), line.dx())\n        arrow_p1 = line.p1() + QPointF(\n            math.sin(angle + math.pi / 3) * self._arrow_size,\n            math.cos(angle + math.pi / 3) * self._arrow_size,\n        )\n        arrow_p2 = line.p1() + QPointF(\n            math.sin(angle + math.pi - math.pi / 3) * self._arrow_size,\n            math.cos(angle + math.pi - math.pi / 3) * self._arrow_size,\n        )\n\n        arrow_head = QPolygonF()\n        arrow_head.clear()\n        arrow_head.append(line.p1())\n        arrow_head.append(arrow_p1)\n        arrow_head.append(arrow_p2)\n        painter.drawLine(line)\n        painter.drawPolygon(arrow_head)\n\n    def _arrow_target(self):\n        \"\"\"Calculate the position of the arrow taking into account the size of the destination node\n\n        Returns:\n            QPointF\n        \"\"\"\n        target = self._line.p1()\n        center = self._line.p2()\n        radius = self._dest._radius\n        vector = target - center\n        length = math.sqrt(vector.x() ** 2 + vector.y() ** 2)\n        if length == 0:\n            return target\n        normal = vector / length\n        target = QPointF(center.x() + (normal.x() * radius), center.y() + (normal.y() * radius))\n\n        return target\n\n    def paint(self, painter, option, widget=None):\n        \"\"\"Override from QGraphicsItem\n\n        Draw Edge. This method is called from Edge.adjust()\n\n        Args:\n            painter (QPainter)\n            option (QStyleOptionGraphicsItem)\n        \"\"\"\n\n        if self._source and self._dest:\n            painter.setRenderHints(QPainter.Antialiasing)\n\n            painter.setPen(\n                QPen(\n                    QColor(self._color),\n                    self._tickness,\n                    Qt.SolidLine,\n                    Qt.RoundCap,\n                    Qt.RoundJoin,\n                )\n            )\n            painter.drawLine(self._line)\n            self._draw_arrow(painter, self._line.p1(), self._arrow_target())\n            self._arrow_target()\n\n\nclass GraphView(QGraphicsView):\n\n    def __init__(self, graph: nx.DiGraph, parent=None):\n        \"\"\"GraphView constructor\n\n        This widget can display a directed graph\n\n        Args:\n            graph (nx.DiGraph): a networkx directed graph\n        \"\"\"\n        super().__init__()\n        self._graph = graph\n        self._scene = QGraphicsScene()\n        self.setScene(self._scene)\n\n        # Used to add space between nodes\n        self._graph_scale = 200\n\n        # Map node name to Node object {str=&gt;Node}\n        self._nodes_map = {}\n        self._load_graph()\n        self.set_nx_layout_circulator()\n\n    def set_nx_layout_circulator(self):\n        \"\"\"Set networkx layout and start animation\n        \"\"\"\n        self._nx_layout_function = nx.circular_layout\n\n        # Compute node position from layout function\n        positions = self._nx_layout_function(self._graph)\n\n        # Change position of all nodes using an animation\n        self.animations = QParallelAnimationGroup()\n        for node, pos in positions.items():\n            x, y = pos\n            x *= self._graph_scale\n            y *= self._graph_scale\n            item = self._nodes_map[node]\n\n            animation = QPropertyAnimation(item, b\"pos\")\n            animation.setDuration(1000)\n            animation.setEndValue(QPointF(x, y))\n            animation.setEasingCurve(QEasingCurve.OutExpo)\n            self.animations.addAnimation(animation)\n\n        self.animations.start()\n\n    def _load_graph(self):\n        \"\"\"Load graph into QGraphicsScene using Node class and Edge class\"\"\"\n        self.scene().clear()\n        self._nodes_map.clear()\n\n        # Add nodes\n        for node in self._graph:\n            nodeAttr = self._graph.nodes.get(node)\n            item = Node(node, nodeAttr)\n            self.scene().addItem(item)\n            self._nodes_map[node] = item\n\n        # Add edges\n        for a, b, attr in self._graph.edges(data=True):\n            source = self._nodes_map[a]\n            dest = self._nodes_map[b]\n            edgeArgs = attr\n            self.scene().addItem(Edge(source, dest, edgeArgs))\n\n    def update_graph(self, graph):\n        \"\"\"Clear scene, load new graph, and set layout\"\"\"\n        self._graph = graph\n        self._load_graph()\n        self.set_nx_layout_circulator()\n\n\nclass MainWindow(QWidget):\n    graph_changed = pyqtSignal(nx.DiGraph)\n\n    def __init__(self, parent=None):\n        super().__init__()\n        self.graph = nx.DiGraph()\n        self.graph.add_node(\"1\", color=\"red\")\n        self.graph.add_edges_from(\n            [\n                (\"1\", \"2\", {\"color\": \"blue\"}),\n                (\"2\", \"1\"),\n                (\"2\", \"3\"),\n                (\"3\", \"4\"),\n                (\"1\", \"5\"),\n                (\"1\", \"6\"),\n                (\"1\", \"7\"),\n            ]\n        )\n        self.view = GraphView(self.graph)\n        v_layout = QVBoxLayout(self)\n        v_layout.addWidget(self.view)\n\n        self.graph_changed.connect(self.view.update_graph)\n\n        self.graphUpdateThread = GraphUpdateThread(self.graph_changed)\n        self.graphUpdateThread.start()\n\n\nclass GraphUpdateThread(QThread):\n    def __init__(self, signal):\n        super(GraphUpdateThread, self).__init__()\n        self.graph_changed = signal\n\n    def __del__(self):\n        # self.wait()\n        pass\n\n    def run(self):\n        grhDict = {}\n        index = 1\n        gh = nx.DiGraph()\n        gh.add_edges_from([(\"1\", \"2\"), (\"2\", \"3\")])\n        grhDict[index] = gh\n        index += 1\n\n        gh = nx.DiGraph()\n        gh.add_edges_from([(\"1\", \"2\"), (\"2\", \"3\"), (\"3\", \"4\"), (\"4\", \"1\")])\n        grhDict[index] = gh\n\n        index += 1\n        gh = nx.DiGraph()\n        gh.add_edges_from([(\"1\", \"2\"), (\"2\", \"3\"), (\"3\", \"4\"), (\"2\", \"1\")])\n        grhDict[index] = gh\n\n        for i in range(10):\n            index = i % 3 + 1\n            ph = grhDict[index]\n            self.graph_changed.emit(ph)\n            time.sleep(1)\n\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n\n    # Create a networkx graph\n\n    widget = MainWindow()\n    widget.show()\n    widget.resize(800, 600)\n    sys.exit(app.exec())\n</code></pre></li> </ul> <p>nx plot</p> <p>an example draw networkx graph with Qt5</p> Python<pre><code>import networkx as nx\nimport matplotlib.pyplot as plt\nfrom matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas\nfrom PyQt5.QtWidgets import QMainWindow, QApplication, QWidget, QVBoxLayout\n\n# class NodeGraph(object):\n#     def __int__(self):\n\n\nclass MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n\n    def initUI(self):\n        # Create a QWidget object and add a QVBoxLayout to it\n        centralWidget = QWidget(self)\n        layout = QVBoxLayout(centralWidget)\n\n        # Create a FigureCanvas object and add it to the QVBoxLayout\n        fig, ax = plt.subplots()\n        canvas = FigureCanvas(fig)\n        layout.addWidget(canvas)\n\n        # Create an nx graph and draw it using matplotlib\n        G = nx.DiGraph()\n        G.add_node(\"1\", color=\"red\")\n        G.add_edges_from(\n            [\n                (\"1\", \"2\", {\"color\": \"blue\"}),\n                (\"2\", \"1\"),\n                (\"2\", \"2\"),\n                (\"2\", \"3\"),\n                (\"3\", \"4\"),\n                (\"1\", \"5\"),\n                (\"1\", \"6\"),\n                (\"1\", \"7\"),\n            ]\n        )\n        pos = nx.circular_layout(G)\n        # nx.draw_networkx_nodes(G, pos, ax=ax)\n        # nx.draw_networkx_labels(G, pos, ax=ax)\n        # nx.draw_networkx_edges(G, pos, ax=ax)\n        # nx.draw_networkx(G, pos, ax=ax)\n        nx.draw_networkx(G, pos, ax=ax,node_size = 800, node_color = \"white\", edge_color = \"red\", width=1.0)\n        ax.set_axis_off()\n\n        # Set the FigureCanvas object as the central widget of the QMainWindow\n        self.setCentralWidget(centralWidget)\n\n        # reload the Graph\n        # ax.cla()\n        # G = nx.DiGraph()\n        # G.add_edges_from([(\"1\", \"2\"), (\"2\", \"3\"), (\"3\", \"4\"), (\"4\", \"1\")])\n        # pos = nx.circular_layout(G)\n        # # nx.draw_networkx_nodes(G, pos, ax=ax)\n        # # nx.draw_networkx_labels(G, pos, ax=ax)\n        # # nx.draw_networkx_edges(G, pos, ax=ax)\n        # nx.draw_networkx(G, pos, ax=ax)\n        # ax.set_axis_off()\n        # canvas.draw()\n\nif __name__ == '__main__':\n    app = QApplication([])\n    win = MainWindow()\n    win.show()\n    app.exec_()\n</code></pre> Python<pre><code>import networkx as nx\nimport matplotlib.pyplot as plt\nfrom matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas\nfrom PyQt5.QtWidgets import QMainWindow, QApplication, QWidget, QVBoxLayout\n\n\nclass NetGraph2(object):\n    def __init__(self, parent_layout, G: nx.DiGraph = None):\n        self.layout = parent_layout\n        # Create a FigureCanvas object and add it to the QVBoxLayout\n        self.fig, self.ax = plt.subplots()\n        self.fig.set_facecolor('#001528')\n        self.fig.set_figwidth(5)\n        self.canvas = FigureCanvas(self.fig)\n        self.layout.addWidget(self.canvas)\n        self.edge_color = \"#4DCAD2\"\n        self.node_color = \"#70CFED\"\n        self.line_width = 1.5\n        self.node_size = 600\n\n        if G is not None:\n            # Create an nx graph and draw it using matplotlib\n            # G = nx.DiGraph()\n            # G.add_node(\"1\", color=\"red\")\n            # G.add_edges_from(\n            #     [\n            #         (\"1\", \"2\", {\"color\": \"blue\"}),\n            #         (\"2\", \"1\"),\n            #         (\"2\", \"2\"),\n            #         (\"2\", \"3\"),\n            #         (\"3\", \"4\"),\n            #         (\"1\", \"5\"),\n            #         (\"1\", \"6\"),\n            #         (\"1\", \"7\"),\n            #     ]\n            # )\n            pos = nx.circular_layout(G)\n            # nx.draw_networkx_nodes(G, pos, ax=ax)\n            # nx.draw_networkx_labels(G, pos, ax=ax)\n            # nx.draw_networkx_edges(G, pos, ax=ax)\n            # nx.draw_networkx(G, pos, ax=ax)\n            nx.draw_networkx(G, pos, ax=self.ax,\n                             node_size=self.node_size,\n                             node_color=self.node_color,\n                             edge_color=self.edge_color,\n                             width=self.line_width)\n            self.ax.set_axis_off()\n\n    def update_graph(self, G: nx.DiGraph):\n        # reload the Graph\n        self.ax.cla()\n        pos = nx.circular_layout(G)\n        # nx.draw_networkx_nodes(G, pos, ax=ax)\n        # nx.draw_networkx_labels(G, pos, ax=ax)\n        # nx.draw_networkx_edges(G, pos, ax=ax)\n        nx.draw_networkx(G, pos, ax=self.ax,\n                         node_size=self.node_size,\n                         node_color=self.node_color,\n                         edge_color=self.edge_color,\n                         width=self.line_width,\n                         arrowsize=15,\n                         font_size=16\n                         # style='dashed'\n                         )\n        self.ax.set_axis_off()\n        self.canvas.draw()\n\n\nclass MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n\n    def initUI(self):\n        # Create a QWidget object and add a QVBoxLayout to it\n        centralWidget = QWidget(self)\n        layout = QVBoxLayout(centralWidget)\n        G = nx.DiGraph()\n        G.add_node(\"1\", color=\"red\")\n        G.add_edges_from(\n            [\n                (\"1\", \"2\", {\"color\": \"blue\"}),\n                (\"2\", \"1\"),\n                (\"2\", \"2\"),\n                (\"2\", \"3\"),\n                (\"3\", \"4\"),\n                (\"1\", \"5\"),\n                (\"1\", \"6\"),\n                (\"1\", \"7\"),\n            ]\n        )\n        view = NetGraph2(layout, G)\n\n        # Set the FigureCanvas object as the central widget of the QMainWindow\n        self.setCentralWidget(centralWidget)\n\n\nif __name__ == '__main__':\n    app = QApplication([])\n    win = MainWindow()\n    win.show()\n    app.exec_()\n</code></pre>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/PyQt%E6%8A%80%E6%B3%95/NetworkGraph%20add%20self%20loop%20edge%20of%20PyQt5/","title":"NetworkGraph add self loop edge of PyQt5","text":"Python<pre><code>import math\nimport sys\nimport time\nfrom typing import Dict\n\nfrom PyQt5.QtCore import (QEasingCurve, QLineF,\n                          QParallelAnimationGroup, QPointF,\n                          QPropertyAnimation, QRectF, Qt, pyqtSignal, QThread)\nfrom PyQt5.QtGui import QBrush, QColor, QPainter, QPen, QPolygonF\nfrom PyQt5.QtWidgets import (QApplication, QComboBox, QGraphicsItem,\n                             QGraphicsObject, QGraphicsScene, QGraphicsView,\n                             QStyleOptionGraphicsItem, QVBoxLayout, QWidget)\n\nimport networkx as nx\n\n\n\nclass Node(QGraphicsObject):\n    \"\"\"A QGraphicsItem representing node in a graph\"\"\"\n\n    def __init__(self, name: str, nodeArgs: Dict = None, parent=None):\n        \"\"\"Node constructor\n\n        Args:\n            name (str): Node label\n        \"\"\"\n        super().__init__(parent)\n        self._name = name\n        self._edges = []\n        if nodeArgs.get(\"color\") is None:\n            self._color = \"#5AD469\"\n        else:\n            self._color = nodeArgs.get(\"color\")\n        self._radius = 30\n        self._rect = QRectF(0, 0, self._radius * 2, self._radius * 2)\n\n        self.setFlag(QGraphicsItem.ItemSendsGeometryChanges)\n        self.setCacheMode(QGraphicsItem.DeviceCoordinateCache)\n\n    def boundingRect(self) -&gt; QRectF:\n        \"\"\"Override from QGraphicsItem\n\n        Returns:\n            QRect: Return node bounding rect\n        \"\"\"\n        return self._rect\n\n    def paint(self, painter: QPainter, option: QStyleOptionGraphicsItem, widget: QWidget = None):\n        \"\"\"Override from QGraphicsItem\n\n        Draw node\n\n        Args:\n            painter (QPainter)\n            option (QStyleOptionGraphicsItem)\n        \"\"\"\n        painter.setRenderHints(QPainter.Antialiasing)\n        painter.setPen(\n            QPen(\n                QColor(self._color).darker(),\n                2,\n                Qt.SolidLine,\n                Qt.RoundCap,\n                Qt.RoundJoin,\n            )\n        )\n        painter.setBrush(QBrush(QColor(self._color)))\n        painter.drawEllipse(self.boundingRect())\n        painter.setPen(QPen(QColor(\"white\")))\n        painter.drawText(self.boundingRect(), Qt.AlignCenter, self._name)\n\n    def add_edge(self, edge):\n        \"\"\"Add an edge to this node\n\n        Args:\n            edge (Edge)\n        \"\"\"\n        self._edges.append(edge)\n\n    def itemChange(self, change: QGraphicsItem.GraphicsItemChange, value):\n        \"\"\"Override from QGraphicsItem\n\n        Args:\n            change (QGraphicsItem.GraphicsItemChange)\n            value (Any)\n\n        Returns:\n            Any\n        \"\"\"\n        if change == QGraphicsItem.ItemPositionHasChanged:\n            for edge in self._edges:\n                edge.adjust()\n\n        return super().itemChange(change, value)\n\n\nclass Edge(QGraphicsItem):\n    def __init__(self, source, dest, edgeArgs, parent=None):\n        \"\"\"Edge constructor\n\n        Args:\n            source (Node): source node\n            dest (Node): destination node\n        \"\"\"\n        super().__init__(parent)\n        self._source = source\n        self._dest = dest\n\n        self._tickness = 2\n\n        if edgeArgs.get(\"color\") is None:\n            self._color = QColor(\"#2BB53C\")\n        else:\n            self._color = edgeArgs.get(\"color\")\n\n        self._arrow_size = 20\n        self.self_arrow_size = 15\n\n        self._source.add_edge(self)\n        self._dest.add_edge(self)\n\n        self._line = QLineF()\n        self.setZValue(-1)\n        self.adjust()\n\n        self.self_loop_top = 0\n        self.self_loop_left = 0\n        self.self_loop_width = 30\n        self.self_loop_height = 40\n\n    def boundingRect(self):\n        \"\"\"Override from QGraphicsItem\n\n        Returns:\n            QRectF: Return node bounding rect\n        \"\"\"\n        return QRectF(self._line.p1(), self._line.p2()).normalized().adjusted(\n            -self._tickness - self._arrow_size,\n            -self._tickness - self._arrow_size,\n            self._tickness + self._arrow_size,\n            self._tickness + self._arrow_size,\n        )\n\n    def adjust(self):\n        \"\"\"\n        Update edge position from source and destination node.\n        This method is called from Node::itemChange\n        \"\"\"\n        self.prepareGeometryChange()\n        self._line = QLineF(\n            self._source.pos() + self._source.boundingRect().center(),\n            self._dest.pos() + self._dest.boundingRect().center(),\n        )\n\n    def _draw_arrow(self, painter, start, end):\n        \"\"\"Draw arrow from start point to end point.\n\n        Args:\n            painter (QPainter)\n            start (QPointF): start position\n            end (QPointF): end position\n        \"\"\"\n        painter.setBrush(QBrush(QColor(self._color)))\n\n        line = QLineF(end, start)\n\n        angle = math.atan2(-line.dy(), line.dx())\n        arrow_p1 = line.p1() + QPointF(\n            math.sin(angle + math.pi / 3) * self._arrow_size,\n            math.cos(angle + math.pi / 3) * self._arrow_size,\n        )\n        arrow_p2 = line.p1() + QPointF(\n            math.sin(angle + math.pi - math.pi / 3) * self._arrow_size,\n            math.cos(angle + math.pi - math.pi / 3) * self._arrow_size,\n        )\n\n        arrow_head = QPolygonF()\n        arrow_head.clear()\n        arrow_head.append(line.p1())\n        arrow_head.append(arrow_p1)\n        arrow_head.append(arrow_p2)\n        painter.drawLine(line)\n        painter.drawPolygon(arrow_head)\n\n    def _arrow_target(self):\n        \"\"\"Calculate the position of the arrow taking into account the size of the destination node\n\n        Returns:\n            QPointF\n        \"\"\"\n        target = self._line.p1()\n        center = self._line.p2()\n        radius = self._dest._radius\n        vector = target - center\n        length = math.sqrt(vector.x() ** 2 + vector.y() ** 2)\n        if length == 0:\n            return target\n        normal = vector / length\n        target = QPointF(center.x() + (normal.x() * radius), center.y() + (normal.y() * radius))\n\n        return target\n\n    def paint_self_loop_edge(self, painter):\n        painter.setRenderHints(QPainter.Antialiasing)\n        # Set the color and pen width of the ellipse\n        startPos = self._source.pos() + QPointF(self._source._radius - 8, self._source._radius * 2 - 8)\n        self.self_loop_left, self.self_loop_top = startPos.x(), startPos.y()\n        # self._tickness is pen width\n        painter.setPen(QPen(Qt.black, self._tickness, Qt.SolidLine, Qt.RoundCap, Qt.RoundJoin))\n         # only draw line of ellipse, not need to set brush. it will fill ellipse, when set brush\n        # set ellipse fill color to white\n        # painter.setBrush(QColor(255, 255, 255, 0))\n        painter.drawEllipse(self.self_loop_left, self.self_loop_top, self.self_loop_width, self.self_loop_height)\n\n        # draw arrow in ellipse bottom point\n        arrow_point = QPointF(self.self_loop_left + self.self_loop_width // 2,\n                              self.self_loop_top + self.self_loop_height)\n\n        # this can be adjusted by your self\n        angle = 6.9\n        arrow_p1 = arrow_point + QPointF(\n            math.sin(angle + math.pi / 3) * self.self_arrow_size,\n            math.cos(angle + math.pi / 3) * self.self_arrow_size,\n        )\n        arrow_p2 = arrow_point + QPointF(\n            math.sin(angle + math.pi - math.pi / 3) * self.self_arrow_size,\n            math.cos(angle + math.pi - math.pi / 3) * self.self_arrow_size,\n        )\n        arrow_head = QPolygonF()\n        arrow_head.clear()\n        arrow_head.append(arrow_point)\n        arrow_head.append(arrow_p1)\n        arrow_head.append(arrow_p2)\n        painter.setPen(QPen(QColor(self._color), self._tickness, Qt.SolidLine, Qt.RoundCap, Qt.RoundJoin))\n        painter.setBrush(QBrush(QColor(self._color)))\n        painter.drawPolygon(arrow_head)\n\n    def paint(self, painter, option, widget=None):\n        \"\"\"Override from QGraphicsItem\n\n        Draw Edge. This method is called from Edge.adjust()\n\n        Args:\n            painter (QPainter)\n            option (QStyleOptionGraphicsItem)\n        \"\"\"\n        # drawn self loop edge of node\n        if self._source.pos() == self._dest.pos():\n            self.paint_self_loop_edge(painter)\n            return\n\n        if self._source and self._dest:\n            painter.setRenderHints(QPainter.Antialiasing)\n\n            painter.setPen(\n                QPen(\n                    QColor(self._color),\n                    self._tickness,\n                    Qt.SolidLine,\n                    Qt.RoundCap,\n                    Qt.RoundJoin,\n                )\n            )\n            painter.drawLine(self._line)\n            self._draw_arrow(painter, self._line.p1(), self._arrow_target())\n            self._arrow_target()\n\n\nclass GraphView(QGraphicsView):\n\n    def __init__(self, graph: nx.DiGraph = None, parent=None):\n        \"\"\"GraphView constructor\n\n        This widget can display a directed graph\n\n        Args:\n            graph (nx.DiGraph): a networkx directed graph\n        \"\"\"\n        super().__init__()\n        self._graph = graph\n        self._scene = QGraphicsScene()\n        self.setScene(self._scene)\n\n        # Used to add space between nodes\n        self._graph_scale = 200\n\n        # Map node name to Node object {str=&gt;Node}\n        self._nodes_map = {}\n\n        if graph is not None:\n            self._load_graph()\n            self.set_nx_layout_circulator()\n\n    def set_nx_layout_circulator(self):\n        \"\"\"Set networkx layout and start animation\n        \"\"\"\n        self._nx_layout_function = nx.circular_layout\n\n        # Compute node position from layout function\n        positions = self._nx_layout_function(self._graph)\n\n        # Change position of all nodes using an animation\n        self.animations = QParallelAnimationGroup()\n        for node, pos in positions.items():\n            x, y = pos\n            x *= self._graph_scale\n            y *= self._graph_scale\n            item = self._nodes_map[node]\n\n            animation = QPropertyAnimation(item, b\"pos\")\n            animation.setDuration(1000)\n            animation.setEndValue(QPointF(x, y))\n            animation.setEasingCurve(QEasingCurve.OutExpo)\n            self.animations.addAnimation(animation)\n\n        self.animations.start()\n\n    def _load_graph(self):\n        \"\"\"Load graph into QGraphicsScene using Node class and Edge class\"\"\"\n        self.scene().clear()\n        self._nodes_map.clear()\n\n        # Add nodes\n        for node in self._graph:\n            nodeAttr = self._graph.nodes.get(node)\n            item = Node(node, nodeAttr)\n            self.scene().addItem(item)\n            self._nodes_map[node] = item\n\n        # Add edges\n        for a, b, attr in self._graph.edges(data=True):\n            source = self._nodes_map[a]\n            dest = self._nodes_map[b]\n            edgeArgs = attr\n            self.scene().addItem(Edge(source, dest, edgeArgs))\n\n    def update_graph(self, graph):\n        \"\"\"Clear scene, load new graph, and set layout\"\"\"\n        self._graph = graph\n        self._load_graph()\n        self.set_nx_layout_circulator()\n\n\nclass MainWindow(QWidget):\n    graph_changed = pyqtSignal(nx.DiGraph)\n\n    def __init__(self, parent=None):\n        super().__init__()\n        self.graph = nx.DiGraph()\n        self.graph.add_node(\"1\", color=\"red\")\n        self.graph.add_edges_from(\n            [\n                (\"1\", \"2\", {\"color\": \"blue\"}),\n                (\"2\", \"1\"),\n                (\"2\", \"3\"),\n                (\"3\", \"4\"),\n                (\"1\", \"5\"),\n                (\"1\", \"6\"),\n                (\"1\", \"7\"),\n            ]\n        )\n        self.view = GraphView(self.graph)\n        v_layout = QVBoxLayout(self)\n        v_layout.addWidget(self.view)\n\n        self.graph_changed.connect(self.view.update_graph)\n\n        # self.graphUpdateThread = GraphUpdateThread(self.graph_changed)\n        # self.graphUpdateThread.start()\n\n\nclass GraphUpdateThread(QThread):\n    def __init__(self, signal):\n        super(GraphUpdateThread, self).__init__()\n        self.graph_changed = signal\n\n    def __del__(self):\n        # self.wait()\n        pass\n\n    def run(self):\n        grhDict = {}\n        index = 1\n        gh = nx.DiGraph()\n        gh.add_edges_from([(\"1\", \"2\"), (\"2\", \"3\")])\n        grhDict[index] = gh\n        index += 1\n\n        gh = nx.DiGraph()\n        gh.add_edges_from([(\"1\", \"2\"), (\"2\", \"3\"), (\"3\", \"4\"), (\"4\", \"1\")])\n        grhDict[index] = gh\n\n        index += 1\n        gh = nx.DiGraph()\n        gh.add_edges_from([(\"Node2\", \"Node3\", {\"color\": \"yellow\"}), (\"Node3\", \"Node4\")])\n        grhDict[index] = gh\n\n        time.sleep(2)\n        for i in range(10):\n            index = i % 3 + 1\n            ph = grhDict[index]\n            self.graph_changed.emit(ph)\n            time.sleep(1)\n\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n\n    # Create a networkx graph\n\n    widget = MainWindow()\n    widget.show()\n    widget.resize(800, 600)\n    sys.exit(app.exec())\n</code></pre>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/PyQt%E6%8A%80%E6%B3%95/QtDev/","title":"QtDev","text":""},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/PyQt%E6%8A%80%E6%B3%95/QtDev/#data-notify","title":"data notify","text":"<ul> <li>\u200b\u6570\u636e\u200b\u901a\u77e5\u200b\u4f7f\u7528\u200bpyqtSignal\uff0cpyQtSignal\u200b\u58f0\u660e\u200b\u7c7b\u200b\u9700\u8981\u200b\u662f\u200bQtCore.QObject\u200b\u7684\u200b\u5b50\u7c7b\u200b\uff0c\u200b\u5426\u5219\u200b\u4f1a\u200b\u62a5\u9519\u200b   pyqtSignal\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u51fd\u6570\u200b\u6784\u9020\u51fd\u6570\u200b\u4f20\u53c2\u200b\u7684\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u5728\u200b\u4e0d\u540c\u200b\u7684\u200bQObject\u200b\u7c7b\u200b\u6216\u8005\u200bQWidget\u200b\u7c7b\u4e2d\u200b\u4f20\u9012\u200b\uff0c\u200b\u4fe1\u53f7\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u5728\u200b\u4e0d\u540c\u200b\u7c7b\u4e2d\u200b\u4f20\u9012\u200b\u901a\u77e5\u200b</li> </ul> Python<pre><code>class xxxClass(QtCore.QObject):\n    xxxSignal: pyqtSignal = pyqtSignal(str)\n\n    def __init__(self):\n        super().__init__()\n        self.xxxSignal.connect(self.xxxSignalCallback)\n\n    def xxx_emit(self):\n        self.xxxSignal.emit(\"xxxx\")\n\n    def xxxSignalCallback(self, info):\n        print(\"recv signal : \" + info)\n</code></pre> <ul> <li>\u200b\u5728\u200bPyQt\u200b\u4e2d\u200b\uff0c\u200b\u521b\u5efa\u200b\u7ebf\u7a0b\u200b\u4f7f\u7528\u200bQThread\uff0c\u200b\u4e0d\u8981\u200b\u4f7f\u7528\u200bThreading\u200b\u5e93\u200b\uff0c \u200b\u5426\u5219\u200b\u4f1a\u200b\u5361\u4f4f\u200bUI\u200b\u7ebf\u7a0b\u200b</li> </ul> Python<pre><code>\n</code></pre>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/PyQt%E6%8A%80%E6%B3%95/QtDev/#parse-bytes-data","title":"parse bytes data","text":"<p>struct.unpack</p> <p>struct.pack</p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/PyQt%E6%8A%80%E6%B3%95/QtDev/#\u6570\u636e\u7684\u5b58\u50a8\u548c\u6570\u636e\u7684\u663e\u793a\u5206\u79bb","title":"\u6570\u636e\u200b\u7684\u200b\u5b58\u50a8\u200b\u548c\u200b\u6570\u636e\u200b\u7684\u200b\u663e\u793a\u200b\u5206\u79bb","text":"<p>https://www.pythonguis.com/tutorials/qtableview-modelviews-numpy-pandas/</p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/PyQt%E6%8A%80%E6%B3%95/QtDev/#data-model","title":"data model","text":"<p>\u200b\u6570\u636e\u200b\u901a\u8fc7\u200b\u7f51\u7edc\u200b\u7b49\u200b\u63a5\u53d7\u200b\u540e\u200b\uff0c\u200b\u4fdd\u6301\u200b\u5230\u200bList\u200b\u6216\u200bDataTable package\u200b\u7b49\u200b\u6570\u636e\u7ed3\u6784\u200b\u4e2d\u200b</p> Python<pre><code>import pandas as pd\nimport datatable as dt\nfrom PyQt5 import QtCore\nfrom PyQt5.QtCore import Qt, pyqtSignal\n\n\nclass TableModel(QtCore.QAbstractTableModel):\n\n    def __init__(self, data):\n        super(TableModel, self).__init__()\n        self._data = data\n\n    def data(self, index, role):\n        if role == Qt.DisplayRole:\n            value = self._data.iloc[index.row(), index.column()]\n            return str(value)\n\n    def rowCount(self, index):\n        return self._data.shape[0]\n\n    def columnCount(self, index):\n        return self._data.shape[1]\n\n    def headerData(self, section, orientation, role):\n        # section is the index of the column/row.\n        if role == Qt.DisplayRole:\n            if orientation == Qt.Horizontal:\n                return str(self._data.columns[section])\n\n            if orientation == Qt.Vertical:\n                return str(self._data.index[section])\n</code></pre>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/PyQt%E6%8A%80%E6%B3%95/QtDev/#datatable\u5e93","title":"dataTable\u200b\u5e93","text":"Python<pre><code>import datatable as dt\n\nxxxData = {\"x\": 1, \"y\": 2, \"z\": 4}\ndt_df = dt.Frame([xxxData])\n# pd_df = dt_df.to_pandas()\n\n\nr = dt.Frame([xxxData for _ in range(5)])\ndt_df.rbind(r)\n\nprint(dt_df[-10:, :].to_pandas())\n\n# print(pd_df)\n</code></pre> <p>store a object</p> Python<pre><code>class B(object):\n    def __init__(self):\n        self.bcc = 1\n        self.bdd = 2\n\n\nclass A(object):\n    def __init__(self):\n        self.curTime: int = 1\n        self.aa: List[str] = []\n        self.bb: Set[str] = set()\n        self.cc: List = [B()]\n\n\nif __name__ == \"__main__\":\n    a = A()\n    dt_a = dt.Frame(A=[a.curTime], B=[a], types=[dt.Type.int32, dt.Type.obj64])\n\n    a_l = dt_a.to_list()\n    print(dt_a)\n\n    print(a_l[1][0].__dict__)\n</code></pre> <p>load from json file</p> Python<pre><code>data_json = json.loads(dataStr)\ndf_class = pd.json_normalize(data_json)\ndf = df_class.drop(columns=['xxx'])\ndf['curTime'] = pd.to_datetime(df['curTime'], unit='s')\n\ndt_class = dt.Frame(df_class)\n\ndt_class = dt.fread(data_json)\n\nprint(df_class)\nprint(dt_class)\n</code></pre>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/PyQt%E6%8A%80%E6%B3%95/QtDev/#data-view","title":"data view","text":"<p>dataTable\u200b\u7684\u200b\u663e\u793a\u200b\u91c7\u7528\u200bQTableView\uff0c\u200b\u56e0\u4e3a\u200bQTableWidget\u200b\u4e0d\u80fd\u200b\u8bbe\u7f6e\u200bModel\uff0cmodel\u200b\u7684\u200b\u6570\u636e\u200b\u53ef\u4ee5\u200b\u662f\u200bList\u3001Numpy\u3001Pandas Frame\u3002 Numpy\u200b\u548c\u200bPandas\u200b\u7c7b\u4f3c\u200bc\u200b\u8bed\u8a00\u200b\u6570\u7ec4\u200b\u9759\u6001\u200b\u5206\u914d\u5185\u5b58\u200b\uff0c\u200b\u6dfb\u52a0\u200b\u884c\u200b\u6570\u636e\u200b\u9700\u8981\u200b\u91cd\u65b0\u200b\u5206\u914d\u5185\u5b58\u200b\uff0c\u200b\u7136\u540e\u200b\u62f7\u8d1d\u200b\uff0c\u200b\u901f\u5ea6\u200b\u5f88\u200b\u6162\u200b\u3002\u200b\u6240\u4ee5\u200b\uff0c\u200b\u91c7\u7528\u200bDataTable\u200b\u5e93\u200b\uff0cDataTable Frame\u200b\u53ef\u4ee5\u200b\u8f6c\u6362\u6210\u200bpandas \u200b\u548c\u200bnumpy\u3002</p> Python<pre><code>class xxxWidget(QWidget, Ui_Form):\n    def init_UI(self):\n        self.tabList = [\"tab1\", \"tab2\", \"tab3\", \"tab4\"]\n        for tabName in self.tabList:\n            self.init_Tab(tabName)\n\n    def init_Tab(self, tabName: str):\n        tab = QtWidgets.QWidget()\n        tab.setObjectName(self.getTabName(tabName))\n        label = QtWidgets.QLabel(tab)\n        label.setGeometry(QtCore.QRect(0, 0, 761, 31))\n        label.setObjectName(self.getLabelName(tabName))\n        label.setText(self.getLabelText(tabName))\n\n        tableWidget = QtWidgets.QTableView(tab)\n        tableWidget.setGeometry(QtCore.QRect(0, 40, 761, 451))\n        tableWidget.setObjectName(self.getTableWidgetName(tabName))\n        self.tabWidget.addTab(tab, self.getTabText(tabName))\n        # self.tabWidget .setTabText(self.tabWidget .indexOf(tab), self.getTabText(tabName))\n\n    def flushTable(self):\n        # find table from tab of tabName\n        curTab = self.tabWidget.currentWidget()\n        if curTab is None:\n            return\n\n        index = self.tabWidget.indexOf(curTab)\n        tabText = self.tabWidget.tabText(index)\n        curTable = curTab.findChild(QtWidgets.QTableView)\n        if curTable is not None:\n            data = self.storage.getTailData(tabText)\n            model = TableModel(data)\n            curTable.setModel(model)\n</code></pre>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/PyQt%E6%8A%80%E6%B3%95/TreeView%20of%20PyQt5/","title":"TreeView of PyQt5","text":"Python<pre><code>import time\n\nfrom PyQt5.QtCore import Qt, QModelIndex, QThread, pyqtSignal\nfrom PyQt5.QtGui import QStandardItem, QStandardItemModel, QIcon\nfrom PyQt5.QtWidgets import QApplication, QMainWindow, QTreeView, QHeaderView\nimport sys\n\nfrom typing import List\n\n\nclass NodeInfo(object):\n    def __init__(self, nodeName=None, nodeState=None):\n        self.nodeName: str = nodeName\n        self.nodeState: str = nodeState\n\n\nclass TaskGroupInfo(object):\n    def __init__(self, taskName=None, taskId=None, leadIdx=None, nodes=None):\n        self.taskName: str = taskName\n        self.taskId: int = taskId\n        self.leadIdx: int = leadIdx\n        self.nodes: List[NodeInfo] = nodes\n\n\nclass TreeData(object):\n    def __init__(self, taskGroupInfoList):\n        self.taskGroupInfoList: List[TaskGroupInfo] = taskGroupInfoList\n\n\nclass GraphUpdateThread(QThread):\n    def __init__(self, signal):\n        super(GraphUpdateThread, self).__init__()\n        self.graph_changed = signal\n\n    def __del__(self):\n        # self.wait()\n        pass\n\n    def run(self):\n        grhDict = {}\n        index = 1\n        tree_data = TreeData([\n            TaskGroupInfo(\"Group 1\", 1, 1, [\n                NodeInfo(\"Node 1\", \"On\"),\n                NodeInfo(\"Node 2\", \"Off\"),\n                NodeInfo(\"Node 3\", \"On\"),\n                NodeInfo(\"Node 3\", \"On\"),\n                NodeInfo(\"Node 3\", \"On\")\n            ]),\n            TaskGroupInfo(\"Group 2\", 2, 2, [\n                NodeInfo(\"Node 4\", \"Off\"),\n                NodeInfo(\"Node 5\", \"On\"),\n                NodeInfo(\"Node 6\", \"Off\")\n            ]),\n            TaskGroupInfo(\"Group 2\", 2, 2, [\n                NodeInfo(\"Node 4\", \"Off\"),\n                NodeInfo(\"Node 5\", \"On\"),\n                NodeInfo(\"Node 6\", \"Off\")\n            ]),\n            TaskGroupInfo(\"Group 2\", 2, 2, [\n                NodeInfo(\"Node 4\", \"Off\"),\n                NodeInfo(\"Node 5\", \"On\"),\n                NodeInfo(\"Node 6\", \"Off\")\n            ])\n        ])\n        grhDict[index] = tree_data\n        index += 1\n\n        tree_data = TreeData([\n            TaskGroupInfo(\"Group 1\", 1, 1, [\n                NodeInfo(\"Node 1\", \"On\"),\n                NodeInfo(\"Node 2\", \"Off\"),\n                NodeInfo(\"Node 3\", \"On\"),\n                NodeInfo(\"Node 3\", \"On\"),\n                NodeInfo(\"Node 3\", \"On\")\n            ])\n        ])\n        grhDict[index] = tree_data\n        index += 1\n\n        tree_data = TreeData([\n            TaskGroupInfo(\"Group 1\", 1, 1, [\n                NodeInfo(\"Node 1\", \"On\"),\n                NodeInfo(\"Node 2\", \"Off\"),\n                NodeInfo(\"Node 3\", \"On\"),\n                NodeInfo(\"Node 3\", \"On\"),\n                NodeInfo(\"Node 3\", \"On\")\n            ]),\n            TaskGroupInfo(\"Group 2\", 2, 2, [\n                NodeInfo(\"Node 4\", \"Off\"),\n                NodeInfo(\"Node 5\", \"On\"),\n                NodeInfo(\"Node 6\", \"Off\")\n            ]),\n            TaskGroupInfo(\"Group 2\", 2, 2, [\n                NodeInfo(\"Node 4\", \"Off\"),\n                NodeInfo(\"Node 5\", \"On\"),\n                NodeInfo(\"Node 6\", \"Off\")\n            ]),\n            TaskGroupInfo(\"Group 2\", 2, 2, [\n                NodeInfo(\"Node 4\", \"Off\"),\n                NodeInfo(\"Node 5\", \"On\"),\n                NodeInfo(\"Node 6\", \"Off\")\n            ])\n            , TaskGroupInfo(\"Group 2\", 2, 2, [\n                NodeInfo(\"Node 4\", \"Off\"),\n                NodeInfo(\"Node 5\", \"On\"),\n                NodeInfo(\"Node 6\", \"Off\")\n            ]),\n            TaskGroupInfo(\"Group 2\", 2, 2, [\n                NodeInfo(\"Node 4\", \"Off\"),\n                NodeInfo(\"Node 5\", \"On\"),\n                NodeInfo(\"Node 6\", \"Off\")\n            ]),\n            TaskGroupInfo(\"Group 2\", 2, 2, [\n                NodeInfo(\"Node 4\", \"Off\"),\n                NodeInfo(\"Node 5\", \"On\"),\n                NodeInfo(\"Node 6\", \"Off\")\n            ])\n        ])\n        grhDict[index] = tree_data\n        index += 1\n\n        time.sleep(2)\n        for i in range(10):\n            index = i % 3 + 1\n            ph = grhDict[index]\n            self.graph_changed.emit(ph)\n            time.sleep(1)\n\n\nclass TaskGroupInfoTree(QTreeView):\n    def __init__(self, tree_data):\n        super().__init__()\n\n        # Create a QTreeView widget and set its model\n        self.setGeometry(100, 100, 800, 600)\n        # self.tree_view.setIconSize(Qt.SizeHint(16, 16))\n        self.setRootIsDecorated(False)\n        self.setAlternatingRowColors(True)\n        self.setAnimated(True)\n        self.setHeaderHidden(True)\n        self.setHeaderHidden(True)\n\n        self.header = QHeaderView(Qt.Horizontal, self)\n        self.setHeader(self.header)\n\n        self.model = QStandardItemModel()\n        self.setModel(self.model)\n\n        # Create a root item for the model\n        self.root_item = self.model.invisibleRootItem()\n\n        # Populate the model with the tree data\n        self.populate_model(tree_data, self.root_item)\n\n        self.expandAll()\n\n    def populate_model(self, tree_data, parent_item):\n        for task_group_info in tree_data.taskGroupInfoList:\n            task_group_item = QStandardItem(QIcon(\"group.png\"), f\"{task_group_info.taskName}\")\n            task_group_item.setEditable(False)\n            parent_item.appendRow(task_group_item)\n            for node_info in task_group_info.nodes:\n                node_item = QStandardItem(QIcon(\"node.png\"), f\"{node_info.nodeName}\")\n                node_item.setEditable(False)\n                task_group_item.appendRow(node_item)\n\n    def update_group_info(self, new_tree_data):\n        # Clear the current model\n        self.model.clear()\n\n        self.root_item = self.model.invisibleRootItem()\n\n        # Repopulate the model with the new tree data\n        self.populate_model(new_tree_data, self.root_item)\n\n        # Expand all items in the tree view\n        self.expandAll()\n\n\nclass MainWindow(QMainWindow):\n    tree_changed = pyqtSignal(TreeData)\n\n    def __init__(self):\n        super().__init__()\n\n        # Set the window title and geometry\n        self.setWindowTitle(\"PyQt5 Tree View\")\n        self.setGeometry(100, 100, 800, 600)\n\n\n        tree_data = TreeData([\n            TaskGroupInfo(\"Group 1\", 1, 1, [\n                NodeInfo(\"Node 1\", \"On\"),\n                NodeInfo(\"Node 2\", \"Off\"),\n                NodeInfo(\"Node 3\", \"On\")\n            ]),\n            TaskGroupInfo(\"Group 2\", 2, 2, [\n                NodeInfo(\"Node 4\", \"Off\"),\n                NodeInfo(\"Node 5\", \"On\"),\n                NodeInfo(\"Node 6\", \"Off\")\n            ])\n        ])\n\n        self.tree_view = TaskGroupInfoTree(tree_data)\n\n\n        # Show the tree view widget\n        self.setCentralWidget(self.tree_view)\n\n        self.tree_changed.connect(self.tree_view.update_group_info)\n\n        self.dataGenThread = GraphUpdateThread(self.tree_changed)\n        self.dataGenThread.start()\n\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    window = MainWindow()\n    window.show()\n    sys.exit(app.exec_())\n</code></pre>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/PyQt%E6%8A%80%E6%B3%95/pyQt%20style%20Pattern/","title":"pyQt style Pattern","text":"CSS<pre><code>QGroupBox {\n    border-radius: 10px;\n    border-width: 5px;\n    border-style: solid;\n    border-color: #023656;\n}\n\nQGroupBox::title {\n    subcontrol-origin: margin;\n    subcontrol-position: top left;\n    left: 10px;\n    top: 5px;\n    padding: 0 5px;\n    background-color: white;\n    border-top-left-radius: 8px;\n    border-top-right-radius: 8px;\n}\n</code></pre> <p>border-style</p> CSS<pre><code>/*\nQLabel {\n    color: red;\n    font-size: 20px;\n}\n*/\n\n/*\nqlabel fit font size:\nset sizePolicy Expanding\nset wordWrap true\n*/\nQLabel#label {\n    color: rgb(160, 210, 255);\n    background-color: transparent;\n}\n\nQLabel#label_2 {\n    color: rgb(77, 202, 210);\n    background-color: transparent;\n}\n\nQLabel#label_3 {\n    color: rgb(160, 210, 255);\n    background-color: transparent;\n}\n\nQPushButton {\n    /*\u200b\u7070\u5e95\u200b\u767d\u5b57\u200b\n    background-color: rgb(29,37,43);\n    color: rgb(255,255,255);*/\n    /*\u200b\u84dd\u5e95\u200b\u767d\u5b57\u200b*/\n    background-color: rgb(0,82,158);\n    color: rgb(255,255,255);\n    font-size: 16px;\n}\n\n/*\nQGroupBox {\n    border: 2px solid gray;\n    border-radius: 10px;\n}\n\nQGroupBox::title {\n    subcontrol-origin: margin;\n    subcontrol-position: top center;\n    padding: 0 5px;\n    border-radius: 5px;\n}\n\nQGroupBox::corner {\n    background-color: white;\n    border: none;\n    border-radius: 5px;\n    width: 5px;\n    height: 5px;\n}\n*/\n\nQGroupBox {\n    border-radius: 10px;\n    border-width: 5px;\n    border-style: solid;\n    border-color: #023656;\n    font-size: 18px;\n}\nQGroupBox::corner {\n    background-color: red;\n}\nQGroupBox::title {\n    subcontrol-origin: margin;\n    subcontrol-position: top left;\n    left: 10px;\n    top: 5px;\n    color: #A0D2FF;\n    background-color: #002D4D;\n    border-top-right-radius: 8px;\n}\n\n/*\n#groupBox2 {\n    background-color: rgb(0, 21, 40);\n    font-size: 16px;\n    font-weight: bold;\n    color: red;\n}\n*/\n\n#centralWidget {\n    background-color: rgb(0, 21, 40);\n}\n</code></pre> Python<pre><code>import sys\nfrom PyQt5.QtWidgets import QApplication\nfrom PyQt5.QtCore import QFile, QTextStream\n\nfile = QFile(\"Style/style.qss\")\nfile.open(QFile.ReadOnly | QFile.Text)\nstream = QTextStream(file)\nstylesheet = stream.readAll()\n\napp = QApplication(sys.argv)\napp.setStyleSheet(stylesheet)\nmain_window = MainWindow()\nmain_window.show()\nsys.exit(app.exec_())\n</code></pre> <p>qtcreator 7.0.2</p> <p>qml application</p> <p>\u200b\u975e\u68a6\u200b\u6559\u7a0b\u200b</p> <p>cross-platform-gui-application-based-on-pyqt</p> <p>qmlintegration</p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/PyQt%E6%8A%80%E6%B3%95/pyqt%20qss%20problem/","title":"Pyqt qss problem","text":"<ol> <li>\u200b\u5728\u200b\u4f7f\u7528\u200bresource\u200b\u52a0\u8f7d\u200bqss\u200b\u6587\u4ef6\u200b\u540e\u200b\uff0c\u200b\u5982\u679c\u200b\u6539\u52a8\u200b\u4e86\u200bqss\u200b\u6587\u4ef6\u200b\u53d1\u73b0\u200b\u6ca1\u6709\u200b\u6548\u679c\u200b\uff0c\u200b\u76f4\u63a5\u200b\u4f7f\u7528\u200bqss\u200b\u6587\u4ef6\u200b\u8def\u5f84\u200b\uff0c\u200b\u4ea7\u751f\u200b\u6548\u679c\u200b\u3002\u200b\u662f\u5426\u200b\u6539\u4e86\u200bqss\u200b\u6587\u4ef6\u200b\u540e\u8981\u200b\u91cd\u65b0\u200b\u751f\u6210\u200bresource.py\u200b\u6587\u4ef6\u200b\u3002</li> </ol> Python<pre><code>import resources\n\n# file = QFile(\":/newPrefix/Style/style.qss\")\nfile = QFile(\"./Style/style.qss\")\nfile.open(QFile.ReadOnly | QFile.Text)\nstream = QTextStream(file)\nstylesheet = stream.readAll()\n\napp = QApplication(sys.argv)\napp.setStyleSheet(stylesheet)\n</code></pre> 2. QFrame\u200b\u9ed8\u8ba4\u200b\u6709\u200b1px\u200b\u7684\u200b\u8fb9\u6846\u200b\uff0c\u200b\u5982\u679c\u200b\u8981\u200b\u53d6\u6d88\u200b\u53ef\u4ee5\u200b\u91c7\u7528\u200b\u4e0b\u9762\u200b\u7684\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u4f46\u662f\u200b\u8fd9\u79cd\u200b\u65b9\u5f0f\u200b\u4f1a\u200b\u5728\u200bFrame\u200b\u7684\u200b\u5b50\u200b\u63a7\u4ef6\u200b\u4e2d\u200b\u5e94\u7528\u200b\uff0c\u200b\u4f7f\u5f97\u200b\u5b50\u200b\u63a7\u4ef6\u200b\u4e5f\u200b\u6ca1\u6709\u200b\u8fb9\u6846\u200b\u3002 Text Only<pre><code> self.frame.setStyleSheet(\"QFrame{ border: none; }\")\n</code></pre> \u200b\u901a\u8fc7\u200b#frame\u200b\u6307\u5b9a\u200b\u53ea\u200b\u53d6\u6d88\u200bQFrame\u200b\u7684\u200b\u8fb9\u6846\u200b\uff0c\u200b\u4e0d\u200b\u5e94\u7528\u200b\u5230\u5b50\u200b\u63a7\u4ef6\u200b\u4e0a\u200b\u3002 Text Only<pre><code> self.frame.setStyleSheet(\"QFrame#frame{ border: none; }\")\n</code></pre> 3. \u200b\u5f53\u200b\u8bbe\u7f6e\u200b\u4e86\u200btableview\u200b\u7684\u200bbackgroud color\u200b\u548c\u200bcolor\u200b\u540e\u200b\u53d1\u73b0\u200b\uff0c\u200b\u5de6\u4e0a\u89d2\u200b\u6709\u200b\u4e00\u4e2a\u200b\u5730\u65b9\u200b\u4e0d\u80fd\u200b\u8bbe\u7f6e\u200b\uff0c\u200b\u663e\u5f97\u200b\u5f88\u200b\u7a81\u5140\u200b\u3002 \u200b\u8fd9\u4e2a\u200b\u5730\u65b9\u200b\u662f\u200bCorner button\uff0c\u200b\u70b9\u51fb\u200b\u53ef\u4ee5\u200b\u9009\u4e2d\u200b\u6240\u6709\u200b\u8868\u683c\u200b\u5185\u5bb9\u200b \u200b\u8981\u200b\u8bbe\u7f6e\u200bQTableCornerButton\u200b\u7684\u200b\u80cc\u666f\u8272\u200b Python<pre><code>tableView.setStyleSheet(\" QTableCornerButton::section { background-color: yellow;}\")\n</code></pre> 4. +  how to change background color for qtabbar empty space pyqt As far as I know you can make it either via: <p><code>tabWidget-&gt;setStyleSheet(\"QTabBar { background-color: red; }\"); tabWidget-&gt;setDocumentMode(true);</code></p> <p>But it doesn\u2019t look good.</p> <p>Or via:</p> <p><code>tabWidget-&gt;setAutoFillBackground(true); QPalette pal = tabWidget-&gt;palette(); pal.setColor(QPalette::Window, Qt::red); tabWidget-&gt;setPalette(pal);</code></p> <p>Or just create QWidget with some background and insert QTabWidget on top of it.</p> <ul> <li>PyQt5 Tabwidget tab bar blank area background color It depends on the\u00a0<code>documentMode</code>.</li> </ul> <p>If it\u2019s\u00a0<code>False</code>\u00a0(the default), you have to set the TabWidget background, and ensure that its\u00a0<code>autoFillBackground()</code>\u00a0is set to True; this is very important, as Qt automatically unselect it when setting a stylesheet. Note that, in this case, the background will be \u201caround\u201d the whole tab widget too, if don\u2019t want it, just disable the border.</p> Python<pre><code>    self.tabWidget.setStyleSheet('''\n        QTabWidget {\n            background: magenta;\n            border: none;\n        }\n        QTabBar::tab {\n            background: green;\n        }\n    ''')\n</code></pre> <p>If the document mode is on, instead, you can just set the background for the tab bar:</p> Python<pre><code>    self.tabWidget.setStyleSheet('''\n        QTabBar {\n            background: magenta;\n        }\n        QTabBar::tab {\n            background: green;\n        }\n    ''')\n</code></pre>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/PyQt%E6%8A%80%E6%B3%95/pyqt5-add-resource-file/","title":"Pyqt5 add resource file","text":""},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/PyQt%E6%8A%80%E6%B3%95/pyqt5-add-resource-file/#pyqt5\u4e2d\u6dfb\u52a0\u8d44\u6e90\u6587\u4ef6","title":"pyqt5\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u8d44\u6e90\u200b\u6587\u4ef6","text":"<p>\u200b\u6700\u200b\u7b80\u5355\u200b\u7684\u200b\u60c5\u51b5\u200b\uff0c\u200b\u5f53\u200b\u9700\u8981\u200b\u5411\u200bpyqt5\u200b\u4e2d\u200b\u7684\u200b\u63a7\u4ef6\u200b\u4e2d\u200b\u52a0\u5165\u200bimage\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u9700\u8981\u200b\u5c06\u200bimage\u200b\u4ee5\u200bresource\u200b\u7684\u200b\u65b9\u5f0f\u200b\u5bfc\u5165\u200bpyqt5\u200b\u9879\u76ee\u200b\u4e2d\u200b\u3002</p> <p>\u200b\u9996\u5148\u200b\u5728\u200b\u9879\u76ee\u200b\u76ee\u5f55\u200b\u4e2d\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200bResources\u200b\u76ee\u5f55\u200b\uff0c\u200b\u4f5c\u4e3a\u200b\u8d44\u6e90\u200b\u6587\u4ef6\u200b\u7684\u200b\u4fdd\u5b58\u200bDir\uff0c\u200b\u5c06\u200b\u8d44\u6e90\u200b\u6587\u4ef6\u200b\u653e\u5165\u200b\u8fd9\u4e00\u200b\u76ee\u5f55\u200b\u3002</p> <p>\u200b\u901a\u8fc7\u200bQt-designer\uff0c\u200b\u6dfb\u52a0\u200b\u8d44\u6e90\u200b\u6587\u4ef6\u200b\u3002</p> <p>\u200b\u4fdd\u5b58\u200b\u540e\u200b\uff0c\u200b\u4f1a\u200b\u751f\u6210\u200b\u4e00\u4e2a\u200bimagesResource.qrc\u200b\u7684\u200b\u6587\u4ef6\u200b\u3002</p> <p>\u200b\u4f7f\u7528\u200b\u5982\u4e0b\u200b\u547d\u4ee4\u200b\uff0c\u200b\u5c06\u200bimagesResource.qrc\u200b\u6587\u4ef6\u200b\u7f16\u8bd1\u6210\u200bpy\u200b\u6587\u4ef6\u200b\uff0c\u200b\u901a\u8fc7\u200beric6\u200b\u7f16\u8bd1\u200b\u9879\u76ee\u200b\uff0c\u200b\u4f1a\u200b\u81ea\u52a8\u200b\u5bfc\u5165\u200bpy\u200b\u6587\u4ef6\u200b\u7684\u200b\u6587\u4ef6\u540d\u200b\u8fdb\u884c\u200b\u4f7f\u7528\u200b\u3002</p> Text Only<pre><code>pyrcc5 -o icon_rc.py icon.qrc\n</code></pre>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/PyQt%E6%8A%80%E6%B3%95/pyqt5-eric6-pycharm/","title":"Pyqt5 eric6 pycharm","text":""},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/PyQt%E6%8A%80%E6%B3%95/pyqt5-eric6-pycharm/#\u5b89\u88c5\u914d\u7f6e\u73af\u5883","title":"\u5b89\u88c5\u200b\u914d\u7f6e\u200b\u73af\u5883","text":""},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/PyQt%E6%8A%80%E6%B3%95/pyqt5-eric6-pycharm/#\u865a\u62df\u73af\u5883\u914d\u7f6e","title":"\u865a\u62df\u73af\u5883\u200b\u914d\u7f6e","text":"<p>\u200b\u4f7f\u7528\u200bpycharm\u200b\u521b\u5efa\u200b\u9879\u76ee\u200b\uff0c\u200b\u9009\u62e9\u200bvenv\u200b\u9009\u9879\u200b\uff0c\u200b\u81ea\u52a8\u200b\u5728\u200b\u9879\u76ee\u200b\u76ee\u5f55\u200b\u4e2d\u200b\u521b\u5efa\u200bpython venv\u200b\u73af\u5883\u200b\uff0c\u200b\u76ee\u524d\u200b\u4f7f\u7528\u200bpython 3.8\u200b\u7248\u672c\u200b\u3002</p> <p>\u200b\u9996\u5148\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200bpyQt5Space\u200b\u7684\u200bpyqt5\u200b\u9879\u76ee\u200b\u5de5\u4f5c\u200b\u7a7a\u95f4\u200b\uff0c\u200b\u865a\u62df\u73af\u5883\u200b\u5728\u200b\u6b64\u200b\u76ee\u5f55\u200b\u4e0b\u200b\u521b\u5efa\u200b\uff0c\u200b\u540e\u9762\u200b\u9879\u76ee\u200b\u90fd\u200b\u5728\u200bpyQt5Space\u200b\u76ee\u5f55\u200b\u4e0b\u200b\u4f7f\u7528\u200beric6\u200b\u8fdb\u884c\u200b\u521b\u5efa\u200b\uff0c\u200b\u751f\u6210\u200b\u4ee3\u7801\u200b\u3002</p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/PyQt%E6%8A%80%E6%B3%95/pyqt5-eric6-pycharm/#\u5b89\u88c5\u5f00\u53d1\u73af\u5883","title":"\u5b89\u88c5\u200b\u5f00\u53d1\u200b\u73af\u5883","text":"<p>requirements.txt </p>Text Only<pre><code>msgpack==1.0.2\npyqt5==5.15.2\npyqt5-tools==5.15.2.3.2\nQScintilla==2.11.6\nPyQtWebEngine==5.15.2\nPyQtChart==5.15.2\npyqt5-plugins==5.15.2.2.2\neric-ide==20.12.1\n</code></pre><p></p> Bash<pre><code>pip install -r requirements.txt -i https://pypi.douban.com/simple\n</code></pre>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/PyQt%E6%8A%80%E6%B3%95/pyqt5-eric6-pycharm/#eric6","title":"eric6","text":"<p>\u200b\u6ce8\u610f\u4e8b\u9879\u200b\uff1a 1. \u200b\u5728\u200b\u521b\u5efa\u200b\u9879\u76ee\u200b\u7684\u200b\u65f6\u5019\u200b\uff0c\u200b\u4e0d\u80fd\u200b\u628a\u200b\u9879\u76ee\u200b\u5730\u5740\u200b\u548c\u200b\u5de5\u4f5c\u200b\u7a7a\u95f4\u200b\u5730\u5740\u200b\u586b\u6210\u200b\u4e00\u6837\u200b\uff0c\u200b\u5426\u5219\u200bOK\u200b\u6309\u94ae\u200b\u6210\u200b\u7070\u8272\u200b\uff0c\u200b\u65e0\u6cd5\u200b\u521b\u5efa\u200b\u9879\u76ee\u200b\u3002 2. \u200b\u5728\u200b\u5173\u95ed\u200beric6\u200b\u540e\u200b\uff0c\u200b\u91cd\u65b0\u200b\u6253\u5f00\u200b\u9879\u76ee\u200b\uff0c\u200b\u53d1\u73b0\u200bui\u200b\u6587\u4ef6\u200b\u4e0d\u518d\u200b\u4e86\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u9f20\u6807\u200b\u53f3\u952e\u200b\uff0cadd forms\u200b\u91cd\u65b0\u200b\u5c06\u200b\u9879\u76ee\u200b\u4e2d\u200b\u7684\u200bui\u200b\u6587\u4ef6\u200b\u6dfb\u52a0\u200b\u8fdb\u6765\u200b\uff0c\u200b\u7136\u540e\u200b\u4f7f\u7528\u200bqtdesigner\u200b\u6253\u5f00\u200b\u3002 3. \u200b\u4f7f\u7528\u200bqtdesigner\u200b\u8bbe\u8ba1\u200b\u597d\u200b\u754c\u9762\u200b\u540e\u200b\uff0c\u200b\u4f7f\u7528\u200beric6\u200b\u6dfb\u52a0\u200b\u4e8b\u4ef6\u200b\u51fd\u6570\u200b\uff0c\u200b\u4f1a\u200b\u81ea\u52a8\u200b\u751f\u6210\u200b\u4ee3\u7801\u200b\u6587\u4ef6\u200b\uff0c\u200b\u524d\u540e\u200b\u7aef\u200b\u5206\u79bb\u200b\u3002</p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/PyQt%E6%8A%80%E6%B3%95/pyqt5-eric6-pycharm/#\u5728\u751f\u6210\u7684\u5165\u53e3py\u6587\u4ef6\u4e2d\u6dfb\u52a0\u5982\u4e0b\u542f\u52a8\u4ee3\u7801","title":"\u5728\u200b\u751f\u6210\u200b\u7684\u200b\u5165\u53e3\u200bpy\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u5982\u4e0b\u200b\u542f\u52a8\u200b\u4ee3\u7801","text":"Python<pre><code>if __name__==\"__main__\":\n    import sys\n    app = QApplication(sys.argv)\n    ui = MainWindow()\n    ui.show()\n    sys.exit(app.exec_())\n</code></pre> <p>\u200b\u53c2\u8003\u200b\u8d44\u6e90\u200b\uff1apyqt5+eric6\u200b\u5b9e\u6218\u200b\u5165\u95e8\u200b\u5230\u200b\u7cbe\u901a\u200b\uff08\u200b\u61d2\u4eba\u200b\u7684\u200b\u6700\u200b\u7231\u200b\uff0c\u200b\u4ee3\u7801\u200b\u81ea\u52a8\u200b\u751f\u6210\u200b\uff0c\u200b\u4f60\u200b\u4fe1\u200b\u5417\u200b\uff1f\uff09</p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/PyQt%E6%8A%80%E6%B3%95/pyqt5-package-to-deb/","title":"Pyqt5 package to deb","text":""},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/PyQt%E6%8A%80%E6%B3%95/pyqt5-package-to-deb/#pyqt5\u7a0b\u5e8f\u6253\u5305\u6210deb","title":"pyqt5\u200b\u7a0b\u5e8f\u200b\u6253\u5305\u200b\u6210\u200bdeb","text":"<p>\u200b\u53c2\u8003\u200b\uff1apackaging-pyqt5-applications-linux-pyinstaller</p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/PyQt%E6%8A%80%E6%B3%95/pyqt5-package-to-deb/#pyinstaller\u6253\u5305\u6210\u53ef\u6267\u884c\u6587\u4ef6","title":"pyinstaller\u200b\u6253\u5305\u200b\u6210\u200b\u53ef\u6267\u884c\u6587\u4ef6","text":"Text Only<pre><code>pyinstaller --name myApp formMain.py\n</code></pre> \u200b\u4f1a\u200b\u751f\u6210\u200b\u4e00\u4e2a\u200bmyApp.spec \u200b\u6587\u4ef6\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5728\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u4fee\u6539\u200b\u6253\u5305\u200b\u914d\u7f6e\u200b <p>\u200b\u4fee\u6539\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u540e\u200b\uff0c\u200b\u4e0b\u6b21\u200b\u6253\u5305\u200b\u53ea\u200b\u9700\u8981\u200b\u6267\u884c\u200b\u5982\u4e0b\u200b\u547d\u4ee4\u200b\uff1a </p>Text Only<pre><code>pyinstaller myApp.spec\n</code></pre><p></p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/PyQt%E6%8A%80%E6%B3%95/pyqt5-package-to-deb/#fpm\u6253\u5305\u6210deb\u5b89\u88c5\u5305","title":"fpm\u200b\u6253\u5305\u200b\u6210\u200bdeb\u200b\u5b89\u88c5\u5305","text":"<p>package.sh </p>Text Only<pre><code>#!/bin/sh\n# Create folders.\n[ -e package ] &amp;&amp; rm -r package\nmkdir -p package/opt\n#mkdir -p package/usr/share/applications\n# mkdir -p package/usr/share/icons/hicolor/scalable/apps\n\n# Copy files (change icon names, add lines for non-scaled icons)\ncp -r dist/myApp package/opt/myApp\n# cp icons/penguin.svg package/usr/share/icons/hicolor/scalable/apps/hello-world.svg\n# cp hello-world.desktop package/usr/share/applications\n\n# Change permissions\nfind package/opt/myApp -type f -exec chmod 755 -- {} +\n# find package/usr/share -type f -exec chmod 644 -- {} +\n</code></pre><p></p> <p>.fpm </p>Text Only<pre><code>-C package\n-s dir\n-t deb\n-n \"myApp\"\n-v 0.1.0\n-p myApp.deb\n</code></pre><p></p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/PyQt%E6%8A%80%E6%B3%95/pyqt5-package-to-deb/#\u811a\u672c\u6267\u884c","title":"\u811a\u672c\u200b\u6267\u884c","text":"Bash<pre><code>pyinstaller knowledgeShareApp.spec\n./package.sh\nfpm\n</code></pre>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/PyQt%E6%8A%80%E6%B3%95/pyqt5-tableWidget/","title":"pyqt5 tableWidget","text":""},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/PyQt%E6%8A%80%E6%B3%95/pyqt5-tableWidget/#tablewidget\u4e2d\u63d2\u5165pushbutton","title":"tableWidget\u200b\u4e2d\u200b\u63d2\u5165\u200bPushButton","text":"<p>\u200b\u5f53\u200b\u5728\u200btableWidget\u200b\u4e2d\u200b\u63d2\u5165\u200bPushButton\u200b\u65f6\u200b\uff0c\u200b\u5982\u679c\u200btable\u200b\u4e2d\u200b\u7684\u200b\u6570\u636e\u200b\u662f\u200b\u52a8\u6001\u53d8\u5316\u200b\u7684\u200b\u76f4\u63a5\u200b\u4f20\u5165\u200brow\uff0ccol\u200b\u4e0d\u4f1a\u200b\u5f97\u5230\u200b\u60f3\u8981\u200b\u7684\u200b\u7ed3\u679c\u200b\uff0c\u200b\u8fd9\u79cd\u200b\u65b9\u5f0f\u200b\u53ea\u80fd\u200b\u5728\u200b\u56de\u8c03\u200b\u51fd\u6570\u200b\u4e2d\u200b\u83b7\u53d6\u200brow\uff0ccol\u200b\u6700\u540e\u200b\u4e00\u6b21\u200b\u7684\u200b\u53d6\u503c\u200b\u3002</p> <p>\u200b\u6240\u4ee5\u200b\u9700\u8981\u200b\u91c7\u7528\u200b\u5982\u4e0b\u200b\u65b9\u5f0f\u200b\uff1a </p>Text Only<pre><code>index = QtCore.QPersistentModelIndex(self.tableWidget.model().index(row_index, col_index))\nremove_knowledge_btn.clicked.connect(\n    lambda *args, index=index: self.remove_knowledge_button_action(index.row(), index.column(),\n                                                                    display_knowledge_data))\n</code></pre> \u200b\u4f8b\u5982\u200b\uff1a<p></p> Python<pre><code>remove_knowledge_btn = QPushButton(item_data)\nremove_knowledge_btn.setDown(True)\nremove_knowledge_btn.setStyleSheet('QPushButton{margin:3px}')\nresourceId = row_data[3]\nremove_knowledge_btn.setAccessibleName(resourceId)\n\nindex = QtCore.QPersistentModelIndex(self.tableWidget.model().index(row_index, col_index))\nremove_knowledge_btn.clicked.connect(\n    lambda *args, index=index: self.remove_knowledge_button_action(index.row(), index.column(),\n                                                                    display_knowledge_data))\nself.tableWidget.setCellWidget(row_index, col_index, remove_knowledge_btn)\n</code></pre> <p>\u200b\u8fd9\u6837\u200b\u5728\u200bbutton\u200b\u7684\u200b\u56de\u8c03\u200b\u51fd\u6570\u200b\u4e2d\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200brow\u200b\u548c\u200bcol\u200b\u503c\u200b\u533a\u5206\u200b\u662f\u200b\u8868\u683c\u200b\u4e2d\u200b\u54ea\u4e2a\u200b\u5355\u5143\u683c\u200b\u4e2d\u200b\u7684\u200bpush_button\u200b\u7684\u200b\u88ab\u200bclicked</p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/PyQt%E6%8A%80%E6%B3%95/qt/","title":"Qt","text":"<p>qt6 qml book</p> <p>https://doc.qt.io/qt-6/examples-widgets.html</p> <p>https://towardsdatascience.com/python-interactive-network-visualization-using-networkx-plotly-and-dash-e44749161ed7</p> <p>pyqt5 conbine plotly by webengine. plotly is dynamic and interactive , matplot is static. </p>Python<pre><code>from PyQt5 import QtCore, QtWidgets, QtWebEngineWidgets\nimport plotly.express as px\n\n\nclass Widget(QtWidgets.QWidget):\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.button = QtWidgets.QPushButton('Plot', self)\n        self.browser = QtWebEngineWidgets.QWebEngineView(self)\n\n        vlayout = QtWidgets.QVBoxLayout(self)\n        vlayout.addWidget(self.button, alignment=QtCore.Qt.AlignHCenter)\n        vlayout.addWidget(self.browser)\n\n        self.button.clicked.connect(self.show_graph)\n        self.resize(1000,800)\n\n    def show_graph(self):\n        df = px.data.tips()\n        fig = px.box(df, x=\"day\", y=\"total_bill\", color=\"smoker\")\n        fig.update_traces(quartilemethod=\"exclusive\") # or \"inclusive\", or \"linear\" by default\n        self.browser.setHtml(fig.to_html(include_plotlyjs='cdn'))\n\nif __name__ == \"__main__\":\n    app = QtWidgets.QApplication([])\n    widget = Widget()\n    widget.show()\n    app.exec()\n</code></pre><p></p> <p>qml book</p> <p>a blog https://muyuuuu.github.io/archives/</p> <ul> <li>how to set tableView columns header resize model Python<pre><code>            model = TableModel(appData)\n\n            curTable.setModel(model)\n\n            # set columns resize model\n            curTable.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)\n            curTable.horizontalHeader().setSectionResizeMode(0, QtWidgets.QHeaderView.Interactive)\n            curTable.setColumnWidth(0, self.parent_widget.width() // 2)\n            curTable.horizontalHeader().setSectionResizeMode(1, QtWidgets.QHeaderView.ResizeToContents)\n            curTable.horizontalHeader().setSectionResizeMode(3, QtWidgets.QHeaderView.ResizeToContents)\n            curTable.horizontalHeader().setSectionResizeMode(4, QtWidgets.QHeaderView.ResizeToContents)\n</code></pre></li> </ul> <p>\u200b\u6ce8\u610f\u200b\uff0c\u200b\u5fc5\u987b\u200b\u8981\u200b\u5728\u200bmodel\u200b\u88ab\u200bset\u200b\u4ee5\u540e\u200b\u8bbe\u7f6e\u200bResizeModel\u200b\u624d\u200b\u6709\u200b\u6548\u679c\u200b</p> <p>TableModel </p>Python<pre><code>from PyQt5.QtCore import Qt\nfrom PyQt5 import QtCore\n\n\nclass TableModel(QtCore.QAbstractTableModel):\n\n    def __init__(self, data):\n        super(TableModel, self).__init__()\n        self._data = data\n\n    def data(self, index, role):\n        if role == Qt.DisplayRole:\n            value = self._data.iloc[index.row(), index.column()]\n            return str(value)\n\n    def rowCount(self, index):\n        return self._data.shape[0]\n\n    def columnCount(self, index):\n        return self._data.shape[1]\n\n    def headerData(self, section, orientation, role):\n        # section is the index of the column/row.\n        if role == Qt.DisplayRole:\n            if orientation == Qt.Horizontal:\n                return str(self._data.columns[section])\n\n            if orientation == Qt.Vertical:\n                return str(self._data.index[section])\n</code></pre><p></p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/PyQt%E6%8A%80%E6%B3%95/qt5-code-snippet/","title":"Qt5 code snippet","text":""},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/PyQt%E6%8A%80%E6%B3%95/qt5-code-snippet/#pyqt5\u5e38\u7528\u4ee3\u7801\u7247\u6bb5","title":"PyQt5\u200b\u5e38\u7528\u200b\u4ee3\u7801\u200b\u7247\u6bb5","text":""},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/PyQt%E6%8A%80%E6%B3%95/qt5-code-snippet/#\u83b7\u53d6\u663e\u793a\u5668\u5206\u8fa8\u7387","title":"\u83b7\u53d6\u200b\u663e\u793a\u5668\u200b\u5206\u8fa8\u7387","text":"Python<pre><code>        # \u200b\u83b7\u53d6\u200b\u663e\u793a\u5668\u200b\u5206\u8fa8\u7387\u200b\n        self.desktop = QApplication.desktop()\n        self.screenRect = self.desktop.screenGeometry()\n        self.screenheight = self.screenRect.height()\n        self.screenwidth = self.screenRect.width()\n\n        self.height = int(self.screenheight * 0.8)\n        self.width = int(self.screenwidth * 0.8)\n\n        self.splitter.setStretchFactor(0, 3)\n        self.splitter.setStretchFactor(1, 3)\n        self.splitter.setSizes([int(self.width * 0.5), int(self.width * 0.5)])\n\n        print(\"Screen height {}\".format(self.screenheight))\n        print(\"Screen width {}\".format(self.screenwidth))\n</code></pre>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/PyQt%E6%8A%80%E6%B3%95/qt5-code-snippet/#tcp\u7f51\u7edc","title":"TCP\u200b\u7f51\u7edc","text":"<p>tcpServer\u200b\u4f8b\u5b50\u200b\uff1a </p>Python<pre><code>    HOST = \"127.0.0.1\"  # Standard loopback interface address (localhost)\n    PORT = 3238  # Port to listen on (non-privileged ports are &gt; 1023)\n\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n        s.bind((HOST, PORT))\n        s.listen()\n        conn, addr = s.accept()\n        index = 0\n        try:\n            with conn:\n                print(f\"Connected by {addr}\")\n                while True:\n                    data = \"\"\n                    if index % 2 == 0:\n                        data = getXxxData()\n                    else:\n                        data = getXxxData()\n                    if not data:\n                        break\n\n                    dataLen = len(data)\n                    print(\"send data len: \", dataLen)\n                    header = dataLen.to_bytes(4, byteorder='little', signed=True)\n                    sendData = header + data.encode()\n                    conn.sendall(sendData)\n                    time.sleep(1)\n                    index += 1\n        except KeyboardInterrupt:\n            s.close()\n            sys.exit()\n</code></pre><p></p> <p>tcpClient\u200b\u4f8b\u5b50\u200b\uff1a </p>Python<pre><code>class TcpClient(object):\n    def __init__(self):\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.host = \"127.0.0.1\"\n        self.port = 3238\n        self.dataQueue = deque()\n\n    def connect(self, host: str = \"127.0.0.1\", port: int = 3238) -&gt; (str, bool):\n        self.host = host\n        self.port = port\n        # Connect to the remote host and port\n        print(\"start sim TcpClient ... \")\n\n        try:\n            self.sock.connect((self.host, self.port))\n        except Exception as e:\n            print(e)\n            return e.args[1], False\n        return \"\", True\n\n    def start(self):\n\n        # send register info\n\n        msg_type = '1'\n        msg_len = 9\n        id = 0\n        reg_data = msg_type.encode() + \\\n                   msg_len.to_bytes(4, byteorder='little', signed=True) + \\\n                   id.to_bytes(4, byteorder='little', signed=True)\n        self.sock.send(reg_data)\n\n        ptl_header_len = 4  # \u200b\u5305\u5934\u200b\u7528\u200b 4 \u200b\u4e2a\u200b\u5b57\u8282\u200b\u957f\u5ea6\u200b\u8868\u793a\u200b\n        alldata = b\"\"\n        while True:\n            while True:\n                if len(alldata) &lt; ptl_header_len:  # \u200b\u4e00\u76f4\u200b\u5230\u200b\u5305\u5934\u200b\u5b57\u8282\u200b\u6d41\u200b\u5168\u90e8\u200b\u63a5\u6536\u200b\u5b8c\u6210\u200b\n                    alldata += self.sock.recv(4)\n                    if not alldata:  # \u200b\u6536\u5230\u200b\u670d\u52a1\u5668\u200b\u7684\u200b\u5957\u200b\u63a5\u5b57\u200b\u7684\u200b close \u200b\u6d88\u606f\u200b\n                        self.sock.close()\n                        return\n                else:\n                    header = int.from_bytes(alldata[:ptl_header_len], byteorder='little')  # \u200b\u53cd\u200b\u5e8f\u5217\u5316\u200b\u5305\u5934\u200b\n                    body_len = header\n                    print(\"recv header \uff1a\", body_len)\n                    break\n\n            while True:\n                recv_all_len = ptl_header_len + body_len\n                if len(alldata) &lt; recv_all_len:  # \u200b\u4e00\u76f4\u200b\u5230\u200b\u5305\u200b\u5185\u5bb9\u200b\u7684\u200b\u5b57\u8282\u200b\u6d41\u200b\u5168\u90e8\u200b\u63a5\u6536\u200b\u5b8c\u6210\u200b\n                    alldata += self.sock.recv(recv_all_len - len(alldata))\n                    continue\n                else:\n                    body_data = alldata[ptl_header_len: recv_all_len]\n                    print(\"recv body len \uff1a\", len(body_data))\n\n                    self.dataQueue.append(body_data)\n\n                    alldata = b\"\"\n                    break\n\n    def close(self):\n        # Terminate\n        self.sock.close()\n</code></pre><p></p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/PyQt%E6%8A%80%E6%B3%95/qt5-code-snippet/#qlistwidget","title":"QListWidget","text":"Python<pre><code>def clearChosenItems(listWidget: QListWidget):\n    for i in range(listWidget.count()):\n        item = listWidget.item(i)\n        item.setSelected(False)\n</code></pre> Python<pre><code>item = QListWidgetItem()\n# if nodeState == \"online\":\n#     item.setForeground(Qt.green)\n# elif nodeState == \"offline\":\n#     item.setForeground(Qt.red)\n# item.setText(\"{} ({})\".format(nodeName, nodeState))\n\nitem.setText(nodeName)\nitem.setData(QtCore.Qt.UserRole, nodeName)\nself.listWidgetOfTaskGroupInfo.addItem(item)\n</code></pre>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/PyQt%E6%8A%80%E6%B3%95/qt5-code-snippet/#json-example","title":"Json example","text":"Python<pre><code>import json\nimport jsonpickle\nfrom json import JSONEncoder\n\nclass Employee(object):\n    def __init__(self, name, salary, address):\n        self.name = name\n        self.salary = salary\n        self.address = address\n\nclass Address(object):\n    def __init__(self, city, street, pin):\n        self.city = city\n        self.street = street\n        self.pin = pin\n\naddress = Address(\"Alpharetta\", \"7258 Spring Street\", \"30004\")\nemployee = Employee(\"John\", 9000, address)\n\nprint(\"Encode Object into JSON formatted Data using jsonpickle\")\nempJSON = jsonpickle.encode(employee, unpicklable=False)\nprint(type(empJSON))\n\nprint(\"Writing JSON Encode data into Python String\")\nemployeeJSONData = json.dumps(empJSON, indent=4)\nprint(employeeJSONData)\nprint(type(employeeJSONData))\n\nprint(\"Decode JSON formatted Data using jsonpickle\")\nEmployeeJSON = jsonpickle.decode(employeeJSONData)\nprint(EmployeeJSON)\nprint(type(EmployeeJSON))\n\n# Let's load it using the load method to check if we can decode it or not.\nprint(\"Load JSON using loads() method\")\nemployeeJSON = json.loads(EmployeeJSON)\nprint(employeeJSON)\nprint(type(employeeJSON))\n</code></pre>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/PyQt%E6%8A%80%E6%B3%95/qt5-code-snippet/#pyqt5\u4e2d\u5f02\u6b65\u5237\u65b0ui","title":"PyQt5\u200b\u4e2d\u200b\u5f02\u6b65\u5237\u65b0\u200bUI","text":"Text Only<pre><code>PyQt5\u200b\u4e2d\u200b\u5f02\u6b65\u5237\u65b0\u200bUI\u200b\u548c\u200bPython\u200b\u4e2d\u200b\u7684\u200b\u591a\u7ebf\u7a0b\u200b\u603b\u7ed3\u200b\nhttps://blog.csdn.net/zcs_xueli/article/details/109209065\nPyQt5\u200b\u754c\u9762\u200b\u5237\u65b0\u200b\u4ee5\u53ca\u200b\u591a\u7ebf\u7a0b\u200b\u66f4\u65b0\u200bUI\u200b\u6570\u636e\u200b\u5b9e\u4f8b\u200b\nhttps://blog.csdn.net/hu694028833/article/details/80977302\n</code></pre> Python<pre><code>class Example(QThread):\n    signal = pyqtSignal()    # \u200b\u62ec\u53f7\u200b\u91cc\u200b\u586b\u5199\u200b\u4fe1\u53f7\u200b\u4f20\u9012\u200b\u7684\u200b\u53c2\u6570\u200b\n    def __init__(self):\n        super().__init__()\n\n    def __del__(self):\n        self.wait()\n\n    def run(self):\n        # \u200b\u8fdb\u884c\u200b\u4efb\u52a1\u200b\u64cd\u4f5c\u200b\n        self.signal.emit()    # \u200b\u53d1\u5c04\u200b\u4fe1\u53f7\u200b\n\n# UI\u200b\u7c7b\u4e2d\u200b\ndef buttonClick(self)\n    self.thread = Example()\n    self.thread.signal.connect(self.callback)\n    self.thread.start()    # \u200b\u542f\u52a8\u200b\u7ebf\u7a0b\u200b\n\ndef callbakc(self):\n    pass\n</code></pre> Text Only<pre><code>Moving From one widget to another PyQt5\nhttps://stackoverflow.com/questions/72461323/moving-from-one-widget-to-another-pyqt5\n</code></pre>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Python/PyQt%E6%8A%80%E6%B3%95/tabWidget%20in%20pyqt5/","title":"tabWidget in pyqt5","text":"<ul> <li>\u200b\u5982\u4f55\u200b\u6839\u636e\u200bclick index \u200b\u83b7\u53d6\u200btab Text Only<pre><code>    @pyqtSlot(int)\n    def on_tabWidgetOfCmd_tabBarClicked(self, index):\n        \"\"\"\n        Slot documentation goes here.\n\n        @param index DESCRIPTION\n        @type int\n        \"\"\"\n        self.curAppName = self.getCurAppNameByTabIndex(index)\n        print(\"on_tabWidgetOfCmd_currentChanged curAppName : \" + self.curAppName)\n\n        tab = self.tabWidgetOfCmd.widget(index)\n</code></pre></li> <li></li> </ul>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Rust/Advent_of_code_2020--%E7%99%BB%E6%9C%BA%E5%BA%A7%E4%BD%8D%E9%97%AE%E9%A2%98/","title":"Advent of code 2020 -- \u200b\u767b\u673a\u200b\u5ea7\u4f4d\u200b\u95ee\u9898","text":"<p>Advent of code 2020 \u2013 Binary Boarding</p> <p>\u200b\u6b64\u200b\u95ee\u9898\u200b\uff0c\u200b\u8bb2\u200b\u7684\u200b\u662f\u200b\u7528\u200b10\u200b\u4e2a\u200b\u5b57\u8282\u200b\u7684\u200b\u5b57\u7b26\u200b\u8868\u793a\u200b\u767b\u673a\u200b\u5ea7\u4f4d\u200b\uff0c\u200b\u98de\u673a\u200b\u5ea7\u4f4d\u200b\u6709\u200b128\u200b\u884c\u200b\u30018\u200b\u5217\u200b\uff0c\u200b\u5982\u200b\u201dFBFBBFFRLR\u201d\u200b\u8868\u793a\u200b\u4f4d\u7f6e\u200b\u5728\u200b\u7b2c\u200b44\u200b\u884c\u200b\u3001\u200b\u7b2c\u200b5\u200b\u5217\u200b\u7684\u200b\u5730\u65b9\u200b\u3002</p> <ul> <li> <p>B\u200b\u548c\u200bF\u200b\u7528\u4e8e\u200b\u8868\u793a\u200b\u884c\u200b\u6570\u200b; F:\u200b\u8868\u793a\u200b\u524d\u200b\u4e00\u534a\u200b\uff0c\u200b\u5982\u200b0-127,\u200b\u90a3\u4e48\u200b\u7b2c\u4e00\u4e2a\u200bF\u200b\u8868\u793a\u200b\u4f4d\u7f6e\u200b\u5728\u200b0-63\u200b\u8303\u56f4\u200b; B:\u200b\u8868\u793a\u200b\u540e\u200b\u4e00\u534a\u200b,\u200b\u5982\u200b0-63\uff0c\u200b\u90a3\u4e48\u200b\u7b2c\u200b2\u200b\u4e2a\u200bB\u200b\u8868\u793a\u200b\u4f4d\u7f6e\u200b\u5728\u200b32-63\u200b\u8303\u56f4\u200b; \u2026 \u200b\u4ee5\u6b64\u200b\u63a8\u51fa\u200b\uff0c\u200b\u884c\u6570\u200b\u4e3a\u200b44</p> </li> <li> <p>R\u200b\u548c\u200bL\u200b\u7528\u4e8e\u200b\u8868\u793a\u200b\u5217\u6570\u200b; R:\u200b\u8868\u793a\u200b\u540e\u200b\u4e00\u534a\u200b; L:\u200b\u8868\u793a\u200b\u524d\u200b\u4e00\u534a\u200b; \u2026 \u200b\u4ee5\u6b64\u200b\u63a8\u51fa\u200b\uff0c\u200b\u5217\u6570\u200b\u4e3a\u200b5</p> </li> </ul>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Rust/Advent_of_code_2020--%E7%99%BB%E6%9C%BA%E5%BA%A7%E4%BD%8D%E9%97%AE%E9%A2%98/#\u5b9a\u4e49\u4f4d\u7f6e\u7684\u7ed3\u6784\u4f53","title":"\u5b9a\u4e49\u200b\u4f4d\u7f6e\u200b\u7684\u200b\u7ed3\u6784\u200b\u4f53","text":"<p>\u200b\u56e0\u4e3a\u200b\u884c\u6570\u200b\u548c\u200b\u5217\u6570\u200b\u90fd\u200b\u4e0d\u200b\u8d85\u8fc7\u200b255,\u200b\u90a3\u4e48\u200b\u884c\u6570\u200b\u548c\u200b\u5217\u6570\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u7528\u200b8bit\u200b\u7684\u200b\u6574\u6570\u200b\u8868\u793a\u200b\uff0c\u200b\u5728\u200bRust\u200b\u4e2d\u4e3a\u200bu8\u3002 </p>Rust<pre><code>#[derive(Default, Debug, PartialEq)]\nstruct Seat {\n    row: u8,\n    col: u8,\n}\n</code></pre><p></p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Rust/Advent_of_code_2020--%E7%99%BB%E6%9C%BA%E5%BA%A7%E4%BD%8D%E9%97%AE%E9%A2%98/#\u89e3\u6790\u4f4d\u7f6e","title":"\u89e3\u6790\u200b\u4f4d\u7f6e","text":"<p>\u200b\u6211\u4eec\u200b\u77e5\u9053\u200b127\u200b\u7684\u200b\u4e8c\u8fdb\u5236\u200b\u8868\u793a\u200b\u4e3a\u200b7\u200b\u4e2a\u200b1;</p> Text Only<pre><code>127\n\n0111 1111\n</code></pre> <p>\u200b\u90a3\u4e48\u200b\u53ef\u4ee5\u200b\u524d\u200b7\u200b\u4e2a\u5b57\u7b26\u200b\u7684\u200bF\u200b\u548c\u200bB\u200b\u53ef\u4ee5\u200b\u6309\u7167\u200b\u987a\u5e8f\u200b\u8868\u793a\u200b7\u200b\u4e2a\u200bbit\u200b\u4f4d\u4e0a\u200b\u7684\u200b0\u200b\u6216\u8005\u200b1, F\u200b\u8868\u793a\u200b0, B\u200b\u8868\u793a\u200b1;</p> Text Only<pre><code>FBFBBFF\n0101100\n\u200b\u4ee3\u8868\u200b44\n</code></pre> <p>\u200b\u540c\u6837\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u7528\u540e\u200b3\u200b\u4e2a\u5b57\u7b26\u200b\u7684\u200bR\u200b\u548c\u200bL\u200b\u53ef\u4ee5\u200b\u6309\u7167\u200b\u987a\u5e8f\u200b\u8868\u793a\u200b3\u200b\u4e2a\u200bbit\u200b\u4f4d\u4e0a\u200b\u7684\u200b0\u200b\u6216\u8005\u200b1, L\u200b\u8868\u793a\u200b0, R\u200b\u8868\u793a\u200b1;</p> Text Only<pre><code>RLR\n101\n\u200b\u4ee3\u8868\u200b5\n</code></pre> <p>\u200b\u5728\u200bRust\u200b\u4e2d\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200bbitvec\u200b\u5e93\u200b\u5f88\u200b\u5bb9\u6613\u200b\u8fdb\u884c\u200bbit\u200b\u64cd\u4f5c\u200b\u3002 \u200b\u53ef\u4ee5\u200b\u7528\u200b\u547d\u4ee4\u200b\u8fdb\u884c\u200b\u5bfc\u5165\u200b</p> Text Only<pre><code>cargo add bitvec\n</code></pre> <p>\u200b\u5b9a\u4e49\u200b\u4f4d\u7f6e\u200b\u89e3\u6790\u200b\u65b9\u6cd5\u200b\uff1a</p> Rust<pre><code>use bitvec::prelude::*;\n\nimpl Seat {\n    const ROW_BITS: usize = 7;\n    const COL_BITS: usize = 3;\n\n    fn parse(input: &amp;str) -&gt; Self {\n        let bytes = input.as_bytes();\n\n        let mut res: Seat = Default::default();\n        {\n            let row = BitSlice::&lt;Msb0, _&gt;::from_element_mut(&amp;mut res.row);\n\n            for (i, &amp;b) in bytes[0..Self::ROW_BITS].iter().enumerate() {\n                row.set(\n                    (8 - Self::ROW_BITS) + i,\n                    match b {\n                        b'F' =&gt; false,\n                        b'B' =&gt; true,\n                        _ =&gt; panic!(\"unexpected row letter : {}\", b as char),\n                    },\n                );\n            }\n        }\n\n        {\n            let col = BitSlice::&lt;Msb0, _&gt;::from_element_mut(&amp;mut res.col);\n            for (i, &amp;b) in bytes[Self::ROW_BITS..][..Self::COL_BITS].iter().enumerate() {\n                col.set(\n                    (8 - Self::COL_BITS) + i,\n                    match b {\n                        b'L' =&gt; false,\n                        b'R' =&gt; true,\n                        _ =&gt; panic!(\"unexpected col letter : {}\", b as char),\n                    },\n                );\n            }\n        }\n\n        res\n    }\n\n}\n</code></pre> <p>\u200b\u6d4b\u8bd5\u200b\u4f4d\u7f6e\u200b\u89e3\u6790\u200b\u65b9\u6cd5\u200b\uff1a </p>Rust<pre><code>#[test]\nfn test_parse() {\n    let input = \"FBFBBFFRLR\";\n    let seat = Seat::parse(input);\n\n    assert_eq!(seat, Seat { row: 44, col: 5 });\n}\n</code></pre><p></p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Rust/Advent_of_code_2020--%E7%99%BB%E6%9C%BA%E5%BA%A7%E4%BD%8D%E9%97%AE%E9%A2%98/#\u901a\u8fc7\u4f4d\u7f6e\u5f97\u51fa\u4f4d\u7f6e\u7f16\u53f7","title":"\u901a\u8fc7\u200b\u4f4d\u7f6e\u200b\u5f97\u51fa\u200b\u4f4d\u7f6e\u200b\u7f16\u53f7","text":"<p>\u200b\u6211\u4eec\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u4f4d\u7f6e\u200b\u7684\u200b\u6570\u636e\u200b\u89e3\u6784\u200bSeat\uff0c\u200b\u4f4d\u7f6e\u200b\u7531\u200brow\u200b\u548c\u200bcol\u200b\u8868\u793a\u200b\u3002</p> <p>\u200b\u4f4d\u7f6e\u200b\u7f16\u53f7\u200b\u53ef\u4ee5\u200b\u8868\u793a\u200b\u4e3a\u200b\uff1a </p>Text Only<pre><code>id = row * 8 + col\n</code></pre><p></p> <p>\u200b\u4f4d\u7f6e\u200b\u7f16\u53f7\u200b\u8ba1\u7b97\u200b\u51fd\u6570\u200b:</p> Rust<pre><code>impl Seat {\n    const ROW_BITS: usize = 7;\n    const COL_BITS: usize = 3;\n\n\n    fn id(&amp;self) -&gt; u64 {\n        // \u200b\u901a\u8fc7\u200b\u79fb\u4f4d\u200b\u64cd\u4f5c\u200b\u4ee3\u66ff\u200b\u884c\u200b\u6570\u200b\u4e58\u4ee5\u200b8\n        ((self.row as u64) &lt;&lt; Self::COL_BITS) + (self.col as u64)\n    }\n}\n</code></pre> <p>\u200b\u6d4b\u8bd5\u200b\uff1a </p>Rust<pre><code>#[test]\nfn test_seat_id() {\n    macro_rules! validate {\n        ($input: expr, $row: expr, $col: expr, $id: expr) =&gt; {\n            let seat = Seat::parse($input);\n\n            assert_eq!(\n                seat,\n                Seat {\n                    row: $row,\n                    col: $col\n                }\n            );\n\n            assert_eq!(seat.id(), $id);\n        };\n    }\n\n    validate!(\"BFFFBBFRRR\", 70, 7, 567);\n    validate!(\"FFFBBBFRRR\", 14, 7, 119);\n    validate!(\"BBFFBBFRLL\", 102, 4, 820);\n}\n</code></pre><p></p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Rust/Advent_of_code_2020--%E7%99%BB%E6%9C%BA%E5%BA%A7%E4%BD%8D%E9%97%AE%E9%A2%98/#\u95ee\u98981--\u8ba1\u7b97\u6d4b\u8bd5\u96c6\u4e2d\u6700\u5927\u4f4d\u7f6e\u7f16\u53f7","title":"\u95ee\u9898\u200b1 \uff1a \u200b\u8ba1\u7b97\u200b\u6d4b\u8bd5\u200b\u96c6\u4e2d\u200b\u6700\u5927\u200b\u4f4d\u7f6e\u200b\u7f16\u53f7","text":"Rust<pre><code>fn main() {\n\n    let max_id = itertools::max(\n        include_str!(\"input.txt\")\n            .lines()\n            .map(Seat::parse)\n            .map(|seat| seat.id()),\n    );\n\n    println!(\"The maximum seat ID is {:?}\", max_id);\n\n}\n</code></pre>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Rust/Advent_of_code_2020--%E7%99%BB%E6%9C%BA%E5%BA%A7%E4%BD%8D%E9%97%AE%E9%A2%98/#\u95ee\u98982--\u627e\u51fa\u4e22\u5931\u7684\u4f4d\u7f6e\u7f16\u53f7","title":"\u95ee\u9898\u200b2 \uff1a \u200b\u627e\u51fa\u200b\u4e22\u5931\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u7f16\u53f7","text":"<p>last_id,\u200b\u5373\u200b\u4e0d\u200b\u8fde\u7eed\u200b\u7684\u200bId\uff0c\u200b\u5982\u200b7\u200b\u548c\u200b9\u200b\u4e4b\u95f4\u200b\u7a7a\u7f3a\u200b\u4e86\u200b\u4e00\u4e2a\u200b8</p> <p>\u200b\u627e\u51fa\u200blast_id\uff0c\u200b\u5219\u200b\u8981\u200b\u8ba1\u7b97\u200b\u51fa\u200b\u6240\u6709\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u7f16\u53f7\u200b\uff0c\u200b\u7136\u540e\u200b\u8fdb\u884c\u200b\u6392\u5e8f\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u6240\u6709\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u7f16\u53f7\u200b\u7528\u200bVec\u200b\u5b58\u50a8\u200b\uff0c\u200b\u90a3\u4e48\u200b\u8981\u200b\u5b9e\u73b0\u200bsort()\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u5219\u200b\u8981\u200b\u4e3a\u200bSeat\u200b\u6570\u636e\u7ed3\u6784\u200b\u5b9e\u73b0\u200bPartialOrd, Ord Trait.</p> <p>\u200b\u66f4\u6539\u200bSeat\u200b\u6570\u636e\u7ed3\u6784\u200b </p>Rust<pre><code>#[derive(Clone, Copy,Default, Debug, PartialEq, PartialOrd, Eq, Ord)]\nstruct Seat {\n    row: u8,\n    col: u8,\n}\n</code></pre><p></p> Rust<pre><code>fn main() {\n    let mut ids: Vec&lt;_&gt; = include_str!(\"input.txt\").lines().map(Seat::parse).collect();\n\n    ids.sort();\n\n    let mut last_id: Option&lt;Seat&gt; = None;\n\n    for id in ids {\n        if let Some(last_id) = last_id {\n            let gap = id.id() - last_id.id();\n            if gap &gt; 1{\n                println!(\"Our seat ID is {}\", last_id.id());\n                return;\n            }\n        }\n        last_id = Some(id);\n    }\n}\n</code></pre> <p>\u200b\u53c2\u8003\u200b\u5b66\u4e60\u200b\uff1ahttps://fasterthanli.me/series/advent-of-code-2020/part-5</p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Rust/Rust%E7%AF%87/","title":"Rust\u200b\u7bc7","text":""},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Rust/Rust%E7%AF%87/#trait","title":"Trait","text":"<p>Trait\u200b\u53ef\u4ee5\u200b\u5b9e\u73b0\u200bRust\u200b\u4e2d\u200b\u7684\u200b\u52a8\u6001\u200b\u5206\u53d1\u200b\u548c\u200b\u9759\u6001\u200b\u5206\u53d1\u200b\u3002</p> <p>\u200b\u52a8\u6001\u200b\u5206\u53d1\u200b\uff1a \u200b\u5728\u200b\u8fd0\u884c\u200b\u671f\u200b\u786e\u5b9a\u200b\u8c03\u7528\u200b\u7c7b\u578b\u200b\u3002\u200b\u901a\u8fc7\u200bTrait\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u6bd4\u5982\u200b\uff1aBox\u200b\u6216\u8005\u200bdyn &amp;SomeTrait\u3002</p> <p>\u200b\u9759\u6001\u200b\u5206\u53d1\u200b\uff1a \u200b\u901a\u8fc7\u200b\u5b9a\u4e49\u200b\u6cdb\u578b\u200b\uff0c\u200b\u5728\u200b\u7f16\u8bd1\u5668\u200b\u786e\u5b9a\u200b\u8c03\u7528\u200b\u7c7b\u578b\u200b\u3002\u200b\u5728\u200bRust\u200b\u4e2d\u200b\uff0c\u200b\u9759\u6001\u200b\u5206\u53d1\u200b\u91c7\u7528\u200b\u5355\u6001\u5316\u200b\uff08monomorphization\uff09\uff0c\u200b\u4f1a\u200b\u9488\u5bf9\u200b\u4e0d\u540c\u200b\u7c7b\u578b\u200b\u7684\u200b\u8c03\u7528\u8005\u200b\uff0c\u200b\u5728\u200b\u7f16\u8bd1\u200b\u65f6\u200b\u751f\u6210\u200b\u4e0d\u540c\u200b\u7248\u672c\u200b\u7684\u200b\u51fd\u6570\u200b\uff0c\u200b\u6240\u4ee5\u200b\u8303\u578b\u200b\u4e5f\u200b\u88ab\u200b\u79f0\u4e3a\u200b\u7c7b\u578b\u200b\u53c2\u6570\u200b\u3002\u200b\u597d\u5904\u200b\u662f\u200b\u6ca1\u6709\u200b\u865a\u200b\u51fd\u6570\u8c03\u7528\u200b\u7684\u200b\u5f00\u9500\u200b\uff0c\u200b\u7f3a\u70b9\u200b\u662f\u200b\u6700\u7ec8\u200b\u7684\u200b\u4e8c\u8fdb\u5236\u200b\u6587\u4ef6\u200b\u81a8\u80c0\u200b\u3002</p> <p>\u200b\u53c2\u8003\u200b\u5b66\u4e60\u200b\uff1a https://rustmagazine.github.io/rust_magazine_2021/chapter_4/ant_trait.html</p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Rust/Rust%E7%AF%87/#cow","title":"Cow","text":"<p>Cow Trait\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u5199\u200b\u65f6\u200b\u590d\u5236\u200b\uff0c\u200b\u5982\u679c\u200b\u5b83\u200b\u6307\u5411\u200b\u7684\u200b\u5185\u5bb9\u200b\u53d1\u751f\u200b\u4e86\u200b\u6539\u53d8\u200b\u65f6\u200b\uff0c\u200b\u4f1a\u200b\u590d\u5236\u51fa\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u800c\u200b\u4e0d\u200b\u6539\u53d8\u200b\u539f\u6765\u200b\u6307\u5411\u200b\u7684\u200b\u5bf9\u8c61\u200b\u3002\u200b\u5185\u5bb9\u200b\u9700\u8981\u200b\u53d1\u751f\u200b\u6539\u53d8\u200b\u65f6\u200b\uff0c\u200b\u4f1a\u200b\u8c03\u7528\u200bto_mut() \u200b\u65b9\u6cd5\u200b\uff0c\u200b\u7136\u540e\u200b\u5bf9\u200b\u590d\u5236\u200b\u7684\u200b\u5bf9\u8c61\u200b\u8fdb\u884c\u200b\u4fee\u6539\u200b\uff0c\u200b\u6bd4\u5982\u200b\u5bf9\u200b\u4e00\u4e2a\u200bvec push\u200b\u5185\u5bb9\u200b\u3002 \u200b\u4f8b\u5982\u200b\uff1a </p>Rust<pre><code>#![allow(unused)]\nfn main() {\n    use std::borrow::Cow;\n\n    let s = \"foo\".to_string();\n\n    let mut cow = Cow::Borrowed(&amp;s);\n    cow.to_mut().make_ascii_uppercase();\n\n    println!(\"s is : {}\",s);\n\n    println!(\"cow is : {}\",cow);\n\n    assert_eq!(\n        cow,\n        Cow::Owned(String::from(\"FOO\")) as Cow&lt;'_, str&gt;\n    );\n}\n</code></pre> \u200b\u8fd0\u884c\u200b\u7ed3\u679c\u200b: Rust<pre><code>s is : foo\ncow is : FOO\n</code></pre> \u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\uff0ccow\u200b\u7684\u200b\u5185\u5bb9\u200b\u4ece\u200bBorrowed\uff0c\u200b\u53d8\u6210\u200b\u4e86\u200bOwned\uff0c\u200b\u53d1\u751f\u200b\u4e86\u200b\u5199\u5b9e\u200b\u590d\u5236\u200b\u3002\u200b\u5982\u679c\u200b\u6ca1\u6709\u200b\u53d8\u5316\u200b\uff0c\u200b\u5c31\u200b\u4e0d\u4f1a\u200b\u53d1\u751f\u200b\u590d\u5236\u200b\u3002 \u200b\u4f8b\u5982\u200b\uff1a Rust<pre><code>#![allow(unused)]\nfn main() {\nuse std::borrow::Cow;\n\nfn abs_all(input: &amp;mut Cow&lt;'_, [i32]&gt;) {\n    for i in 0..input.len() {\n        let v = input[i];\n        if v &lt; 0 {\n            // Clones into a vector if not already owned.\n            input.to_mut()[i] = -v;\n        }\n    }\n    println!(\"input is : {:?}\", input);\n}\n\n// No clone occurs because `input` doesn't need to be mutated.\nlet slice = [0, 1, 2];\nlet mut input = Cow::from(&amp;slice[..]);\nabs_all(&amp;mut input);\n\nprintln!(\"slice 1 is : {:?}\", slice);\n\n// Clone occurs because `input` needs to be mutated.\nlet slice = [-1, 0, 1];\nlet mut input = Cow::from(&amp;slice[..]);\nabs_all(&amp;mut input);\n\nprintln!(\"slice 2 is : {:?}\", slice);\n\n// No clone occurs because `input` is already owned.\nlet mut input = Cow::from(vec![-1, 0, 1]);\nabs_all(&amp;mut input);\n\nprintln!(\"input 3 is : {:?}\", input);\n}\n</code></pre> \u200b\u8fd0\u884c\u200b\u7ed3\u679c\u200b\uff1a Rust<pre><code>input is : [0, 1, 2]\nslice 1 is : [0, 1, 2]\ninput is : [1, 0, 1]\nslice 2 is : [-1, 0, 1]\ninput is : [1, 0, 1]\ninput 3 is : [1, 0, 1]\n</code></pre> \u200b\u4f8b\u5b50\u200b\u6765\u6e90\u4e8e\u200b\uff1a\u200b\u5b98\u65b9\u200b\u5bf9\u200bCow\u200b\u7684\u200b\u4ecb\u7ecd\u200b\uff0chttps://doc.rust-lang.org/std/borrow/enum.Cow.html\u3002 \u200b\u8fd0\u884c\u200b\u4ee3\u7801\u200b\u53ef\u4ee5\u200b\u5728\u200bPlay\u200b\u4e0a\u200b\uff0chttps://play.rust-lang.org\u3002<p></p> <p>Rust\u200b\u4e2d\u200b\u51e0\u79cd\u200b\u6307\u9488\u200b\u7684\u200b\u533a\u522b\u200b\uff1a</p> \u200b\u7c7b\u578b\u200b \u200b\u533a\u522b\u200b Box \u200b\u552f\u4e00\u200b\u6240\u6709\u6743\u200b\u7684\u200b\u667a\u80fd\u200b\u6307\u9488\u200b\uff0c\u200b\u76f8\u5f53\u4e8e\u200bC++\u200b\u91cc\u9762\u200b\u7684\u200bUniquePtr Rc\u200b\u548c\u200bArc \u200b\u5171\u4eab\u200b\u6240\u6709\u6743\u200b\u7684\u200b\u667a\u80fd\u200b\u6307\u9488\u200b\uff0c\u200b\u76f8\u5f53\u4e8e\u200bC++\u200b\u91cc\u9762\u200b\u7684\u200bSharedPtr\uff0cArc\u200b\u53ef\u4ee5\u200bA\u200b\u53ef\u4ee5\u200b\u7406\u89e3\u200b\u6210\u200bAtomic\uff0c\u200b\u53ef\u4ee5\u200b\u5728\u7ebf\u200b\u7a0b\u200b\u4e4b\u95f4\u200b\u5b89\u5168\u200b\u4f20\u9012\u200b\u3002 Cow \u200b\u5b9e\u73b0\u200b\u5199\u5b9e\u200b\u590d\u5236\u200b\u7684\u200b\u667a\u80fd\u200b\u6307\u9488"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Rust/Rust%E7%AF%87/#fromstr-trait","title":"FromStr Trait","text":"<p>\u200b\u4e00\u4e2a\u200b\u7c7b\u578b\u200b\u5982\u679c\u200b\u5b9e\u73b0\u200b\u4e86\u200bFromStr Trait\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u4ece\u200bstring\u200b\u5b57\u7b26\u4e32\u200b\u8f6c\u6362\u6210\u200b\u8be5\u200b\u7c7b\u578b\u200b\uff0c from_str \u200b\u65b9\u6cd5\u200b\u89c4\u5b9a\u200b\u4e86\u200b\u5982\u4f55\u200b\u4ece\u200bstring\u200b\u8f6c\u6362\u6210\u200b\u8be5\u200b\u7c7b\u578b\u200b\u3002FromStr\u200b\u65e2\u200b\u53ef\u4ee5\u200b\u663e\u793a\u200b\u8c03\u7528\u200b\uff08\u200b\u76f4\u63a5\u200b\u8c03\u7528\u200bfrom_str\u200b\u65b9\u6cd5\u200b\uff09\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u9690\u5f0f\u200b\u8c03\u7528\u200b\uff0c\u200b\u5373\u200b\u4f7f\u7528\u200bstr\u200b\u7684\u200bparse\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u4f8b\u5982\u200b\uff1a </p>Rust<pre><code>#![allow(unused)]\nfn main() {\nuse std::str::FromStr;\n\n#[derive(Debug, PartialEq)]\nstruct Point {\n    x: i32,\n    y: i32\n}\n\n#[derive(Debug, PartialEq, Eq)]\nstruct ParsePointError;\n\nimpl FromStr for Point {\n    type Err = ParsePointError;\n\n    fn from_str(s: &amp;str) -&gt; Result&lt;Self, Self::Err&gt; {\n        let (x, y) = s\n            .strip_prefix('(')\n            .and_then(|s| s.strip_suffix(')'))\n            .and_then(|s| s.split_once(|c| {c== ',' || c == ' '} ))\n            .ok_or(ParsePointError)?;\n\n        let x_fromstr = x.parse::&lt;i32&gt;().map_err(|_| ParsePointError)?;\n        let y_fromstr = y.parse::&lt;i32&gt;().map_err(|_| ParsePointError)?;\n\n        Ok(Point { x: x_fromstr, y: y_fromstr })\n    }\n}\n\nlet expected = Ok(Point { x: 1, y: 2 });\n// Explicit call\nassert_eq!(Point::from_str(\"(1,2)\"), expected);\n// Implicit calls, through parse\nassert_eq!(\"(1,2)\".parse(), expected);\nassert_eq!(\"(1,2)\".parse::&lt;Point&gt;(), expected);\n// Invalid input string\n// assert!(Point::from_str(\"(1 2)\").is_err());\n\nassert_eq!(\"(1 2)\".parse::&lt;Point&gt;(), expected);\n}\n</code></pre> \u200b\u4f8b\u5b50\u200b\u6765\u6e90\u4e8e\u200b\u5b98\u65b9\u200b\uff0c\u200b\u4ece\u200b\u8fd9\u4e2a\u200b\u4f8b\u5b50\u200b\u6211\u4eec\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u5b66\u4e60\u200b\u5230\u200bstr\u200b\u6a21\u5757\u200b\u63d0\u4f9b\u200b\u7684\u200bsplit_once\u200b\u65b9\u6cd5\u200b\u4ee5\u53ca\u200bTrait std::str::pattern::Pattern \u200b\u7684\u200b\u4f7f\u7528\u200b\u3002 \u200b\u5b98\u65b9\u200b\u4f8b\u5b50\u200b\u4e2d\u200b\u53ea\u200b\u652f\u6301\u200b\u9017\u53f7\u200b\u5206\u5272\u200b\uff0c\u200b\u5373\u200b Rust<pre><code>.and_then(|s| s.split_once(','))\n</code></pre> \u200b\u5982\u4f55\u200b\u540c\u65f6\u200b\u652f\u6301\u200b\u7a7a\u683c\u200b\u5206\u9694\u200b\uff0c\u200b\u67e5\u770b\u200bsplit_once api\uff0c\u200b\u53d1\u73b0\u200b\u53ef\u4ee5\u200b\u4f20\u5165\u200bPattern\uff0c\u200b\u800c\u200bpattern\u200b\u4e0d\u200b\u53ea\u200b\u5305\u62ec\u200bstr\uff0c\u200b\u4e5f\u200b\u5305\u62ec\u200b\u4f20\u5165\u200bFn\u3002https://doc.rust-lang.org/std/str/pattern/trait.Pattern.html\u3002 \u200b\u56e0\u6b64\u200b\u53ef\u4ee5\u200b\u5b9e\u73b0\u200b\u5982\u4e0b\u200b\uff1a Rust<pre><code>.and_then(|s| s.split_once(|c| {c== ',' || c == ' '} ))\n</code></pre> \u200b\u4f20\u5165\u200b\u4e86\u200b\u4e00\u4e2a\u200blamda\u200b\u8868\u8fbe\u5f0f\u200b\uff0c\u200b\u8fd4\u56de\u200bbool\u200b\u7c7b\u578b\u200b\u3002<p></p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Rust/Rust%E7%AF%87/#the-rust-performance-book","title":"The Rust performance book","text":"<p>https://nnethercote.github.io/perf-book/linting.html#disallowing-types</p> <p>fast\u200b\u9ad8\u65af\u200b\u6a21\u7cca\u200b\u5b9e\u73b0\u200b https://github.com/fschutt/fastblur</p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Rust/Rust%E7%AF%87/#pueue","title":"Pueue","text":"<p>pueue\u200b\u521b\u5efa\u200bTask\uff0c\u200b\u4e00\u4e2a\u200bTask\u200b\u53ef\u4ee5\u200b\u7406\u89e3\u200b\u4e3a\u200b\u4e00\u4e2a\u200bShell\u200b\u547d\u4ee4\u200b\u3002 \u200b\u6bd4\u5982\u200b\uff1a<code>ls -alh</code>. \u200b\u5728\u200b\u7a0b\u5e8f\u200b\u4e2d\u200b\uff0c\u200b\u5982\u679c\u200b\u8981\u200b\u6267\u884c\u200b\u8fd9\u4e2a\u200b\u547d\u4ee4\u200b\uff0c\u200b\u6700\u200b\u7b80\u5355\u200b\u7684\u200b\u662f\u200b\u542f\u52a8\u200b\u4e00\u4e2a\u200b\u8fdb\u7a0b\u200b\u6765\u200b\u6267\u884c\u200b\u3002\u200b\u5982\u679c\u200b\u8981\u200b\u6267\u884c\u200b\u7684\u200b\u662f\u200b\u4e00\u4e2a\u200bshell\u200b\u547d\u4ee4\u200b\uff0c\u200b\u5b8c\u6574\u200b\u7684\u200b\u6267\u884c\u547d\u4ee4\u200b\u5728\u200b\u4e0d\u540c\u200b\u7684\u200b\u5e73\u53f0\u200b\u548c\u200b\u4e0d\u540c\u200b\u7684\u200bshell\u200b\u91cc\u9762\u200b\u90fd\u200b\u4e0d\u200b\u4e00\u6837\u200b\u3002 \u200b\u6bd4\u5982\u200b\u5728\u200bunix\u200b\u5e73\u53f0\u200b\u4e0a\u200b\uff1a</p> <p></p>Text Only<pre><code>sh -c 'ls -alh'\n</code></pre> pueue\u200b\u4e3a\u4e86\u200b\u63d0\u4f9b\u200b\u6269\u5c55\u200b\u517c\u5bb9\u200b\u4e0d\u540c\u200b\u7684\u200bshell\uff0c\u200b\u6bd4\u5982\u200bzsh\u3001bash\u3001fish\uff0c\u200b\u4e0d\u540c\u200b\u5e73\u53f0\u200bunix\u3001windows\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u5982\u4e0b\u200b\u7684\u200b\u6a21\u7248\u200b\u3002\u200b\u6a21\u7248\u200b\u4e2d\u200b\u5b58\u5728\u200b\u53d8\u91cf\u200b{{ pueue_command_string }}\u3002<p></p> <p></p>Text Only<pre><code>/// Unix default:\n    /// `vec![\"sh\", \"-c\", \"{{ pueue_command_string }}\"]`.\n    ///\n    /// Windows default:\n    /// `vec![\"powershell\", \"-c\", \"[Console]::OutputEncoding = [Text.UTF8Encoding]::UTF8; {{ pueue_command_string }}\"]`\n</code></pre> \u200b\u5f53\u200b\u7528\u6237\u200b\u8f93\u5165\u200b\u6267\u884c\u200b\u7684\u200b\u547d\u4ee4\u200b<code>ls -alh</code>\uff0c\u200b\u5e0c\u671b\u200b\u5b9e\u73b0\u200b\u8f93\u5165\u200b\u7684\u200b\u547d\u4ee4\u200b\u53bb\u200b\u66ff\u6362\u200b{{ pueue_command_string }}\u3002 \u200b\u8fd9\u4e2a\u200b\u529f\u80fd\u200b\u7c7b\u4f3c\u200b\u7ed9\u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u4e32\u200b\u6a21\u7248\u200b\uff0c\u200b\u7136\u540e\u200b\u901a\u8fc7\u200b\u66ff\u6362\u200b\u5bf9\u200b\u6a21\u7248\u200b\u5b9e\u4f8b\u200b\u5316\u200b\u3002pueue\u200b\u901a\u8fc7\u200bhandlebars crate\u200b\u6765\u200b\u5b9e\u73b0\u200b\u8fd9\u4e2a\u200b\u529f\u80fd\u200b\uff0chttps://docs.rs/handlebars/latest/handlebars/\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200b\u5b98\u7f51\u200b\u4f8b\u5b50\u200b\u3002 handlebars\u200b\u662f\u200b\u4e00\u4e2a\u200b\u6a21\u7248\u200b\u8bed\u8a00\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u6a21\u7248\u200b\u8f6c\u6362\u6210\u200btext\u200b\u6216\u8005\u200bhtml\u3002 https://handlebarsjs.com/guide/<p></p> <p></p>Text Only<pre><code>/// Take a platform specific shell command and insert the actual task command via templating.\npub fn compile_shell_command(settings: &amp;Settings, command: &amp;str) -&gt; Command {\n    let shell_command = get_shell_command(settings);\n\n    let mut handlebars = handlebars::Handlebars::new();\n    handlebars.set_strict_mode(true);\n    handlebars.register_escape_fn(handlebars::no_escape);\n\n    // Make the command available to the template engine.\n    let mut parameters = HashMap::new();\n    parameters.insert(\"pueue_command_string\", command);\n\n    // We allow users to provide their own shell command.\n    // They should use the `{{ pueue_command_string }}` placeholder.\n    let mut compiled_command = Vec::new();\n    for part in shell_command {\n        let compiled_part = handlebars\n            .render_template(&amp;part, &amp;parameters)\n            .unwrap_or_else(|_| {\n                panic!(\"Failed to render shell command for template: {part} and parameters: {parameters:?}\")\n            });\n\n        compiled_command.push(compiled_part);\n    }\n\n    let executable = compiled_command.remove(0);\n\n    // Chain two `powershell` commands, one that sets the output encoding to utf8 and then the user provided one.\n    let mut command = Command::new(executable);\n    for arg in compiled_command {\n        command.arg(&amp;arg);\n    }\n\n    // Inject custom environment variables.\n    if !settings.daemon.env_vars.is_empty() {\n        log::info!(\n            \"Inject environment variables: {:?}\",\n            &amp;settings.daemon.env_vars\n        );\n        command.envs(&amp;settings.daemon.env_vars);\n    }\n\n    command\n}\n</code></pre> https://github1s.com/Nukesor/pueue/blob/HEAD/pueue_lib/src/process_helper/mod.rs#L71 \u200b\u901a\u8fc7\u200b\u6a21\u7248\u200b\u66ff\u6362\u200b\u540e\u200b\u7684\u200b\u547d\u4ee4\u200b\u5b57\u7b26\u4e32\u200b\uff0c\u200b\u6784\u9020\u200b\u4e86\u200bstd::process::Command\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u8fdb\u7a0b\u200b\u6267\u884c\u547d\u4ee4\u200b\u4e86\u200b\u3002<p></p> <p></p>Text Only<pre><code>// Spawn the actual subprocess\n        let spawned_command = command\n            .current_dir(path)\n            .stdin(Stdio::piped())\n            .env_clear()\n            .envs(envs.clone())\n            .stdout(Stdio::from(stdout_log))\n            .stderr(Stdio::from(stderr_log))\n            .group_spawn();\n</code></pre> https://github1s.com/Nukesor/pueue/blob/HEAD/pueue/src/daemon/task_handler/spawn_task.rs<p></p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Rust/rust%20corse/","title":"Rust corse","text":"<p>cs \u200b\u81ea\u5b66\u200b\u6307\u5357\u200b</p> <p>\u200b\u4e00\u4e2a\u200bRust\u200b\u7684\u200b\u8bfe\u7a0b\u200b\uff0cCS110L: Safety in Systems Programming 2020\u200b\u7248\u672c\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u83b7\u5f97\u200bproj code https://reberhardt.com/cs110l/spring-2020/ binlogo\u200b\u7684\u200b\u535a\u5ba2\u200b\uff0c\u200b\u5bf9\u200b\u8fd9\u4e2a\u200b\u8bfe\u7a0b\u200b\u6709\u200b\u90e8\u5206\u200b\u8bb2\u89e3\u200b\u548c\u200b\u7b14\u8bb0\u200b https://binlogo.github.io/Knowledge-Track/cs/class/cs110l.html</p> <p>\u200b\u8bfe\u7a0b\u200b\u8001\u5e08\u200b\u7684\u200bblog\uff0c\u200b\u65af\u5766\u798f\u200b https://reberhardt.com/</p> <p>binlog\u200b\u7684\u200b\u535a\u5ba2\u200b\uff0c\u200b\u6709\u200b\u5f88\u591a\u200b\u8d44\u6599\u200b\u94fe\u63a5\u200b\u8df3\u8f6c\u200b\uff0c\u200b\u5305\u62ec\u200b\u4e86\u200b\u4ed6\u200b\u5b66\u4e60\u200b\u8bb0\u5f55\u200b\u548c\u200b\u4ed6\u200b\u7684\u200b\u5927\u4f6c\u200b\u63a8\u8350\u200b https://binlogo.github.io/ \u200b\u9047\u89c1\u200b\u5929\u624d\u200b</p> <p>\u200b\u4e00\u4e2a\u200bblog\uff0cemacs\uff0clinux\u200b\u76f8\u5173\u200b https://manateelazycat.github.io/about.html</p> <p>Rust: \u200b\u9648\u5929\u200b\u3001fasterthanli</p> <p>\u200b\u4f7f\u7528\u200bRust\u200b\u5199\u200b\u4e00\u4e2a\u200b\u7f16\u8f91\u5668\u200b\uff0c\u200b\u76ee\u524d\u200b\u770b\u5230\u200b\u7b2c\u4e94\u7ae0\u200b build-your-text-editor-with-rust</p> <p>\u200b\u5b59\u98de\u200b Rust Course</p>"},{"location":"notes/%23%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AF%87/Rust/%E5%9C%A8Linux%E4%B8%8A%E7%BC%96%E8%AF%91Windows%E5%B9%B3%E5%8F%B0%E7%9A%84Rust%E7%A8%8B%E5%BA%8F/","title":"\u5728\u200bLinux\u200b\u4e0a\u200b\u7f16\u8bd1\u200bWindows\u200b\u5e73\u53f0\u200b\u7684\u200bRust\u200b\u7a0b\u5e8f","text":"<p>\u200b\u672c\u6587\u200b\u4ee5\u200b\u5728\u200blinux\u200b\u4e0a\u200b\u7f16\u8bd1\u200bwindows\u200b\u4e0a\u200b\u53ef\u200b\u6267\u884c\u200brust tui example\u200b\u7a0b\u5e8f\u200b\u4e3a\u4f8b\u200b\uff0c\u200b\u8bb0\u5f55\u200brust\u200b\u8de8\u5e73\u53f0\u200b\u7f16\u8bd1\u200b\u8fc7\u7a0b\u200b\u3002 tui-rs\u200b\u662f\u200b\u4e00\u4e2a\u200bRust\u200b\u5e93\u200b\uff0c\u200b\u7528\u4e8e\u200b\u6784\u5efa\u200b\u4e30\u5bcc\u200b\u7684\u200b\u7ec8\u7aef\u200b\u7528\u6237\u754c\u9762\u200b\u548c\u200b\u4eea\u8868\u76d8\u200b\u3002</p> <p>\u200b\u9996\u5148\u200b\uff0cgit clone tui-rs\u200b\u7684\u200b\u6e90\u7801\u200b\uff0c\u200b\u7f16\u8bd1\u200b\u5e76\u200b\u8fd0\u884c\u200blinux\u200b\u53ef\u6267\u884c\u7a0b\u5e8f\u200b\u547d\u4ee4\u200b\u5982\u4e0b\u200b\uff1a</p> Text Only<pre><code>git clone https://github.com/fdehau/tui-rs.git\n</code></pre> Text Only<pre><code>cargo run --example user_input --release\n</code></pre> <p>\u200b\u4f7f\u7528\u200b\u5982\u4e0b\u200b\u547d\u4ee4\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u2013target\u200b\u9009\u9879\u200b\u6307\u5b9a\u200b\u7f16\u8bd1\u200b\u76ee\u6807\u200b\u7684\u200b\u5e73\u53f0\u200b\u3002</p> Text Only<pre><code>cargo build --example user_input --release --target x86_64-pc-windows-gnu\n</code></pre> <p>\u200b\u4f46\u662f\u200b\uff0c\u200b\u521d\u6b21\u200b\u7f16\u8bd1\u200b\uff0c\u200b\u4f1a\u200b\u62a5\u9519\u200b\u2026</p> Text Only<pre><code> cargo build --example user_input --release\n--target x86_64-pc-windows-gnu\n  Downloaded windows_x86_64_gnu v0.32.0\n  Downloaded ntapi v0.3.7\n  Downloaded miow v0.3.7\n  Downloaded crossterm_winapi v0.9.0\n  Downloaded winapi v0.3.9\n  Downloaded windows-sys v0.32.0\n  Downloaded winapi-x86_64-pc-windows-gnu v0.4.0\n  Downloaded 7 crates (8.4 MB) in 16.18s (largest was `windows-sys` at 3.4 MB)\n   Compiling cfg-if v1.0.0\n   Compiling windows_x86_64_gnu v0.32.0\n   Compiling winapi-x86_64-pc-windows-gnu v0.4.0\n   Compiling winapi v0.3.9\n   Compiling scopeguard v1.1.0\n   Compiling smallvec v1.8.0\n   Compiling bitflags v1.3.2\n   Compiling ppv-lite86 v0.2.16\nerror[E0463]: can't find crate for `core`\n  |\n  = note: the `x86_64-pc-windows-gnu` target may not be installed\n  = help: consider downloading the target with `rustup target add x86_64-pc-windows-gnu`\n\nFor more information about this error, try `rustc --explain E0463`.\nerror: could not compile `cfg-if` due to previous error\nwarning: build failed, waiting for other jobs to finish...\nerror: build failed\n</code></pre> <p>\u200b\u63d0\u793a\u200b\u6211\u4eec\u200b\u5b89\u88c5\u200bthe <code>x86_64-pc-windows-gnu</code> target, \u200b\u6267\u884c\u200b\u5982\u4e0b\u200b\u547d\u4ee4\u200b\uff1a</p> Text Only<pre><code>rustup target add x86_64-pc-windows-gnu\nrustup toolchain install stable-x86_64-pc-windows-gnu\n</code></pre> <p>\u200b\u7136\u540e\u200b\u518d\u6b21\u200b\u7f16\u8bd1\u200b\uff0c\u200b\u9047\u5230\u200b\u5982\u4e0b\u200b\u95ee\u9898\u200b:</p> Text Only<pre><code>$ cargo build --example user_input --release --target x86_64-pc-windows-gnu\n   Compiling tui v0.17.0 (/home/xxx/workspace/rust-learn/tui-rs)\nerror: linker `x86_64-w64-mingw32-gcc` not found\n  |\n  = note: No such file or directory (os error 2)\n\nerror: could not compile `tui` due to previous error\n</code></pre> <p>\u200b\u5b89\u88c5\u200bmingw-64:</p> Text Only<pre><code>sudo apt update &amp;&amp; sudo apt install mingw-w64\n</code></pre> <p>\u200b\u518d\u6b21\u200b\u7f16\u8bd1\u200b\uff0c\u200b\u7f16\u8bd1\u200b\u6210\u529f\u200b\uff1a</p> Text Only<pre><code> cargo build --example user_input --release --target x86_64-pc-windows-gnu\n   Compiling tui v0.17.0 (/home/xxx/workspace/rust-learn/tui-rs)\n    Finished release [optimized] target(s) in 1.91s\n</code></pre> <p>\u200b\u53ef\u4ee5\u200b\u770b\u89c1\u200bproject_directionary/target/\u200b\u4e0b\u591a\u200b\u4e86\u200b\u4e00\u4e2a\u200b \u201cx86_64-pc-windows-gnu\u201d\u200b\u76ee\u5f55\u200b\uff0c\u200b\u76ee\u5f55\u200b\u4e2d\u200b\u53ef\u4ee5\u200b\u627e\u5230\u200b\u7f16\u8bd1\u200b\u51fa\u200b\u7684\u200bwindows\u200b\u5e73\u53f0\u200b\u53ef\u6267\u884c\u7a0b\u5e8f\u200b\u3002</p>"},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/Python%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/","title":"Python\u200b\u8c03\u8bd5\u200b\u5de5\u5177","text":"<p>python debug\u200b\u6709\u200b\u4e24\u79cd\u200b\u65b9\u6cd5\u200b\uff0c</p> <ul> <li>pdb</li> <li>debugpy \uff08\u200b\u53ef\u4ee5\u200b\u914d\u5408\u200bvscode\u200b\u4f7f\u7528\u200b\uff09</li> </ul>"},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/Python%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/#pdb\u4f7f\u7528","title":"pdb\u200b\u4f7f\u7528","text":"<p>\u200b\u4f7f\u7528\u200b\u65b9\u6cd5\u200b\u548c\u200bgdb\u200b\u7c7b\u4f3c\u200b\uff0c\u200b\u5e38\u7528\u200b\u7684\u200b\u64cd\u4f5c\u547d\u4ee4\u200b\u4e5f\u200b\u548c\u200bgdb\u200b\u4e5f\u200b\u51e0\u4e4e\u200b\u4e00\u6837\u200b\u3002 \u200b\u65b9\u6cd5\u200b1\uff0c\u200b\u547d\u4ee4\u884c\u200b\u542f\u52a8\u200b\uff1a</p> <p></p>Text Only<pre><code>python3 -m pdb ./test.py\n</code></pre> \u200b\u65b9\u6cd5\u200b2\uff0c\u200b\u7a0b\u5e8f\u200b\u4e2d\u200b\u5d4c\u5165\u200b\u4ee3\u7801\u200b\uff0c\u200b\u5728\u200b\u60f3\u8981\u200b\u65ad\u70b9\u200b\u7684\u200b\u5730\u65b9\u200b\uff0c\u200b\u6dfb\u52a0\u200b\uff1a<p></p> Text Only<pre><code>import pdb\npdb.set_trace()\n</code></pre>"},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/Python%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/#debugpy\u4f7f\u7528","title":"debugpy\u200b\u4f7f\u7528","text":""},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/Python%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/#\u76f4\u63a5\u4f7f\u7528debugpy","title":"\u76f4\u63a5\u200b\u4f7f\u7528\u200bdebugpy","text":"<p>\u200b\u76f4\u63a5\u200b\u4f7f\u7528\u200b\uff0c\u200b\u7a0b\u5e8f\u200b\u4e2d\u200b\u5b58\u5728\u200b\u5faa\u73af\u200b</p> <p></p>Text Only<pre><code>python3 -m debugpy --listen :5678  ./test.py\n</code></pre> \u200b\u5982\u679c\u200b\u7a0b\u5e8f\u200b\u4e2d\u200b\u6ca1\u6709\u200bloop\u200b\u5faa\u73af\u200b\uff0c\u200b\u7a0b\u5e8f\u200b\u4f1a\u200b\u76f4\u63a5\u200b\u6267\u884c\u200b\u7ed3\u675f\u200b\u3002<p></p>"},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/Python%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/#vscode-client\u8fde\u63a5\u4f7f\u7528","title":"vscode client\u200b\u8fde\u63a5\u200b\u4f7f\u7528","text":"<p>vscode launch.json\u200b\u914d\u7f6e\u200b \u200b\u5b89\u88c5\u200bpython\u200b\u63d2\u4ef6\u200b</p> <p></p>Text Only<pre><code>{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Python: Current File\",\n            \"type\": \"python\",\n            // \"request\": \"launch\",\n            // \"program\": \"${file}\",\n            // \"python\": \"/usr/local/python3.9.2/bin/python3\",\n            // \"console\": \"integratedTerminal\",\n            // \"justMyCode\": false,\n            // \"stopOnEntry\": true,\n            \"request\": \"attach\",\n            \"connect\": {\n                \"host\": \"localhost\",\n                \"port\": 5678\n              }\n        }\n    ]\n}\n</code></pre> \u200b\u542f\u52a8\u200b\u8c03\u8bd5\u200bpy\u200b\u6587\u4ef6\u200b\uff0c \u200b\u5b89\u88c5\u200bdebugpy<p></p> Text Only<pre><code>python3 -m pip install debugpy\n</code></pre> Text Only<pre><code>python3 -m debugpy --listen :5678 --wait-for-client ./onnx_infer.py\n</code></pre>"},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/Python%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/#vscode\u4f5c\u4e3aserver\u53cd\u5411\u8c03\u8bd5","title":"vscode\u200b\u4f5c\u4e3a\u200bserver\u200b\u53cd\u5411\u200b\u8c03\u8bd5","text":"<p>launch.json\u200b\u914d\u7f6e\u200b\uff1a</p> <p></p>Text Only<pre><code>{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Python: \u200b\u8fdc\u7a0b\u200b\u8c03\u8bd5\u200b\",\n            \"type\": \"python\",\n            \"request\": \"attach\",\n            \"listen\": {\n                \"host\": \"0.0.0.0\",\n                \"port\": 5678\n            },\n            \"pathMappings\": [\n                {\n                    \"localRoot\": \"${workspaceFolder}\", \n                    \"remoteRoot\": \".\"\n                }\n            ]\n        }\n    ]\n}\n</code></pre> \u200b\u5728\u200b\u8c03\u8bd5\u7a0b\u5e8f\u200bpython\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u6700\u200b\u524d\u9762\u200b\uff0c\u200b\u52a0\u5165\u200b\u5982\u4e0b\u200b\u4ee3\u7801\u200b\uff1a<p></p> <p></p>Text Only<pre><code>import debugpy\ndebugpy.connect(('xxx.xxx.xxx.xxx', 5678)) # \u200b\u66f4\u200b\u6539\u6210\u200bvscode\u200b\u5f00\u53d1\u200b\u673a\u200b\u7684\u200bip\u200b\u5730\u5740\u200b\n</code></pre> \u200b\u53c2\u8003\u200b\uff1a 10\u200b\u5206\u949f\u200b\u6559\u7a0b\u200b\u638c\u63e1\u200bPython\u200b\u8c03\u8bd5\u5668\u200bpdb https://code.visualstudio.com/docs/python/debugging Debugpy\u2014\u2014\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200bVSCode\u200b\u8c03\u8bd5\u200b\u65e0\u6cd5\u200b\u76f4\u63a5\u200b\u6267\u884c\u200b\u7684\u200bPython\u200b\u7a0b\u5e8f\u200b<p></p>"},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/gcc%E7%89%88%E6%9C%AC%E4%BE%9D%E8%B5%96ELF%E4%BF%AE%E6%94%B9/","title":"Linux\u200b\u4fee\u6539\u200bELF\u200b\u89e3\u51b3\u200bglibc\u200b\u517c\u5bb9\u6027\u95ee\u9898","text":""},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/gcc%E7%89%88%E6%9C%AC%E4%BE%9D%E8%B5%96ELF%E4%BF%AE%E6%94%B9/#linux\u4fee\u6539elf\u89e3\u51b3glibc\u517c\u5bb9\u6027\u95ee\u9898","title":"Linux\u200b\u4fee\u6539\u200bELF\u200b\u89e3\u51b3\u200bglibc\u200b\u517c\u5bb9\u6027\u95ee\u9898","text":"<p>https://zohead.com/archives/mod-elf-glibc/</p>"},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/gcc%E7%89%88%E6%9C%AC%E4%BE%9D%E8%B5%96ELF%E4%BF%AE%E6%94%B9/#\u6307\u5b9adynamic-linker\u4ee5\u4f7f\u7528\u9ad8\u7248\u672cgcc","title":"\u6307\u5b9a\u200bdynamic linker\u200b\u4ee5\u200b\u4f7f\u7528\u200b\u9ad8\u200b\u7248\u672c\u200bGCC","text":"<p>https://maskray.me/blog/2015-09-29-specify-dynamic-linker-to-use-higher-version-gcc</p>"},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/","title":"\u6027\u80fd\u200b\u5206\u6790","text":"<p>https://www.brendangregg.com/offcpuanalysis.html https://github.com/eunomia-bpf/bpf-developer-tutorial</p>"},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/#benchmark","title":"Benchmark","text":"<p>https://developer.aliyun.com/article/940173 https://quick-bench.com/q/Sx_qfU0dqS1GFqx16v1j36voouM</p>"},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/#perf-\u706b\u7130\u56fe","title":"Perf \u200b\u706b\u7130\u200b\u56fe","text":"<p>https://www.cnblogs.com/happyliu/p/6142929.html</p> <p></p>Text Only<pre><code>sudo perf record -F 99 -p PID -g -- sleep 60\n-F 99: \u200b\u6bcf\u79d2\u200b\u91c7\u6837\u200b99\u200b\u6b21\u200b\n-p PID: \u200b\u6307\u5b9a\u200b\u8fdb\u7a0b\u200bid\n-g: \u200b\u8bb0\u5f55\u200b\u8c03\u7528\u200b\u6808\u200b\nsleep 60: \u200b\u6301\u7eed\u200b60\u200b\u79d2\u200b, \u200b\u5982\u679c\u200b\u4e0d\u52a0\u200b\u5219\u200b\u4e00\u76f4\u200b\u91c7\u6837\u200b\u5230\u200b\u624b\u52a8\u200b\u4e2d\u65ad\u200b(CRTL+C)\u200b\u4e3a\u6b62\u200b\n</code></pre> \u200b\u67e5\u770b\u200bperf.data\u200b\u6587\u4ef6\u200b\uff1a<p></p> <ul> <li>Hotspot\u200b\u5de5\u5177\u200b</li> </ul> <p>https://github.com/KDAB/hotspot</p> <ul> <li>firefox profiler</li> </ul> <p>https://profiler.firefox.com profile\u200b\u5de5\u5177\u200b\uff1ahttps://nnethercote.github.io/perf-book/profiling.html</p>"},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/","title":"\u8c03\u8bd5\u200b\u5de5\u5177","text":"<p>\u200b\u5728\u200b\u65e5\u5e38\u200b\u5f00\u53d1\u200b\u9700\u8981\u200b\u4f7f\u7528\u200bgdb\u200b\u8c03\u8bd5\u7a0b\u5e8f\u200b\uff0c\u200b\u5982\u200b\u6253\u5370\u200b\u53d8\u91cf\u200b\uff0c\u200b\u67e5\u770b\u200b\u5185\u5b58\u200b\u4ee5\u53ca\u200b\u6c47\u7f16\u200b\uff0c\u200b\u751f\u6210\u200bcore\u200b\u6587\u4ef6\u200b\u7b49\u200b\uff0c\u200b\u672c\u6587\u200b\u5206\u4eab\u200b\u5e73\u65f6\u200b\u8c03\u8bd5\u200b\u4e2d\u200b\u5e38\u89c1\u200b\u7684\u200b\u65b9\u6cd5\u200b\u3002</p>"},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/#gdb\u7684\u4f7f\u7528","title":"gdb\u200b\u7684\u200b\u4f7f\u7528","text":"<ul> <li>gdb-server</li> <li>x\u200b\u547d\u4ee4\u200b \u200b\u5982\u200b\uff1agdb x/150x\uff0cgdb x/i</li> <li>\u200b\u67e5\u770b\u200b\u6e90\u7801\u200b</li> <li>ctrl-x-a \u200b\u6216\u8005\u200bsource layout\uff0c\u200b\u67e5\u770b\u200b\u6e90\u7801\u200b</li> <li>list \u200b\u663e\u793a\u200b\u4ee3\u7801\u200b</li> <li>ulimit -c unlimit\uff0ccat/proc/sys/kernel/core_pattern \u200b\u67e5\u770b\u200bcore\u200b\u6587\u4ef6\u200b\u4fdd\u5b58\u200b\u4f4d\u7f6e\u200b</li> <li>echo \u201c/home/coresave/core.%e.%p.%t\u201d &gt; /proc/sys/kernel/core_pattern \u200b\u8bbe\u7f6e\u200bcore\u200b\u6587\u4ef6\u200b\u4fdd\u5b58\u200b\u5730\u5740\u200b</li> <li>info inferiors\u200b\u662f\u200b\u67e5\u770b\u200b\u5f53\u524d\u200b\u7684\u200b\u5b50\u200b\u8fdb\u7a0b\u200b</li> <li>pstree -p </li> </ul>"},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/#gdb\u8c03\u8bd5\u7a0b\u5e8f\u65b9\u6cd5\u8bba","title":"gdb\u200b\u8c03\u8bd5\u7a0b\u5e8f\u200b\u65b9\u6cd5\u8bba","text":"<ul> <li>\u200b\u9996\u5148\u200b\u7f16\u8bd1\u7a0b\u5e8f\u200b\uff0c\u200b\u9700\u8981\u200b\u5728\u200b\u53ef\u6267\u884c\u7a0b\u5e8f\u200b\u6587\u4ef6\u200b\u4ee5\u53ca\u200b\u52a8\u6001\u200b\u5e93\u4e2d\u200b\u7f16\u5165\u200b\u8c03\u8bd5\u4fe1\u606f\u200b\uff0c\u200b\u8bbe\u7f6e\u200b\u7f16\u8bd1\u200b\u9009\u9879\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200bcmakelist\u200b\u6587\u4ef6\u200b\u8bbe\u7f6e\u200b\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u76f4\u63a5\u200b\u8bbe\u7f6e\u200bgcc\u200b\u7b49\u200b\u53c2\u6570\u200b\uff0c\u200b\u6bd4\u5982\u200b-g\uff0c-Wall\u200b\u7b49\u200b\uff0c\u200b\u8bbe\u7f6e\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u4f18\u5316\u200b\u7b49\u7ea7\u200b\u4e3a\u200b-O0</li> </ul> Text Only<pre><code>set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -g\")\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -g\")\nadd_definitions(-std=c++11 -Wall -g -O0)\n</code></pre> \u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u7f16\u8bd1\u200b\u7684\u200b\u65f6\u5019\u200b\uff0ccmake\u200b\u6307\u5b9a\u200bDEBUG\uff0ccmake .. -DCMAKE_BUILD_TYPE=Debug\u3002 <ul> <li>\u200b\u6ce8\u91ca\u200b\u4e00\u4e9b\u200bCmake\u200b\u53ef\u89c1\u200b\u6027\u200b\u9009\u9879\u200b</li> </ul> Text Only<pre><code># set(CMAKE_CXX_VISIBILITY_PRESET default)\n# set(CMAKE_VISIBILITY_INLINES_HIDDEN 0)\n</code></pre> <ul> <li>\u200b\u8c03\u8bd5\u7a0b\u5e8f\u200b\uff0c\u200b\u8fdc\u7a0b\u200b\u8c03\u8bd5\u200b\u4f7f\u7528\u200bgdbserver\uff08\u200b\u5982\u679c\u200b\u662f\u200b\u677f\u5b50\u200b\u4e0a\u200bcpu\u200b\u67b6\u6784\u200b\u4e0d\u540c\u200b\uff0c\u200b\u4f7f\u7528\u200b\u5f00\u53d1\u200b\u673a\u4e0a\u200b\u4ea4\u53c9\u200b\u7f16\u8bd1\u200b\u73af\u5883\u200b\u7684\u200bgdb\u200b\u548c\u200bgdbserver\uff09\uff0c\u200b\u5f00\u53d1\u200b\u673a\u4e0a\u200b\u8fd0\u884c\u200b\u7684\u200b\u7a0b\u5e8f\u200b\u76f4\u63a5\u200b\u4f7f\u7528\u200bgdb</li> </ul> Text Only<pre><code># \u200b\u4e0d\u5e26\u200b\u53c2\u6570\u200b\ngdb main\n# \u200b\u5e26\u200b\u53c2\u6570\u200b\ngdb --args main arg1 arg2\n# attach \u200b\u7a0b\u5e8f\u200b\ngdb -p ${port}\n</code></pre> <ul> <li>\u200b\u65ad\u70b9\u200b\uff0c\u200b\u65ad\u70b9\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u6587\u4ef6\u540d\u200b\u52a0\u200b\u884c\u53f7\u200b\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u51fd\u6570\u200b\uff0c\u200b\u7528\u200bb\u200b\u65ad\u70b9\u200b\uff08breakpoints\u200b\u7684\u200b\u7f29\u5199\u200b\uff09\uff0c\u200b\u7528\u200bdisable\u200b\u7981\u7528\u200b\u65ad\u70b9\u200b\uff0cdelete\u200b\u5220\u9664\u200b\u65ad\u70b9\u200b</li> </ul> Text Only<pre><code>(gdb) b hello.cpp:12 # hello.cpp\u200b\u6587\u4ef6\u200b\u7684\u200b12\u200b\u884c\u200b\n(gdb) b func1 # \u200b\u5728\u200bfunc1\u200b\u5f00\u59cb\u200b\u4f4d\u7f6e\u200b\u65ad\u70b9\u200b\n</code></pre> <ul> <li>\u200b\u6267\u884c\u7a0b\u5e8f\u200b\uff0c\u200b\u5305\u62ec\u200b\u5f00\u59cb\u8fd0\u884c\u200b\u3001\u200b\u7ee7\u7eed\u200b\u5230\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u65ad\u70b9\u200b\u3001\u200b\u5355\u6b65\u200b\u8fd0\u884c\u200b\u3001\u200b\u8fdb\u5165\u200b\u51fd\u6570\u200b</li> </ul> Text Only<pre><code>(gdb) r # \u200b\u5f00\u59cb\u8fd0\u884c\u200b\n(gdb) c # \u200b\u7ee7\u7eed\u200b\u5230\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u65ad\u70b9\u200b\n(gdb) n # \u200b\u5355\u6b65\u200b\u8fd0\u884c\u200b\n(gdb) n 5 # \u200b\u5355\u6b65\u200b\u8fd0\u884c\u200b5\u200b\u6b65\u200b\n(gdb) step # \u200b\u8fdb\u5165\u200b\u51fd\u6570\u200b\n</code></pre> <ul> <li>\u200b\u6253\u5370\u200b\u53d8\u91cf\u200b\uff0c\u200b\u67e5\u770b\u200b\u5185\u5bb9\u200b\uff0cinfo\u3001list\u3001p\u200b\u547d\u4ee4\u200b\u3001x\u200b\u547d\u4ee4\u200b</li> </ul> Text Only<pre><code>(gdb) p str1.size()\n(gdb) p str1\n(gdb) x/32bc str1.c_str() # \u200b\u6253\u5370\u200b32\u200b\u4e2a\u200bbyte\u200b\u5927\u5c0f\u200b\u7684\u200bchar\u200b\u5b57\u7b26\u200b\uff0c\u200b\u4ece\u200bstr1.c_sr()\u200b\u6307\u9488\u200b\u4f4d\u7f6e\u200b\u5f00\u59cb\u200b\n(gdb) x/32bt str1.c_str() # \u200b\u6253\u5370\u200b32\u200b\u4e2a\u200bbyte\u200b\u5927\u5c0f\u200b\u7684\u200b\u4e8c\u8fdb\u5236\u200b\uff0c\u200b\u4ece\u200bstr1.c_sr()\u200b\u6307\u9488\u200b\u4f4d\u7f6e\u200b\u5f00\u59cb\u200b\n# x\u200b\u547d\u4ee4\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200bi\u200b\u6253\u5370\u200b\u5bc4\u5b58\u5668\u200b\u5185\u5bb9\u200b\u3001address\u200b\u6253\u5370\u200b\u5730\u5740\u200b\u3001f\u200b\u6253\u5370\u200bfloat\u200b\u7b49\u200b\u3002\n</code></pre> <ul> <li>\u200b\u67e5\u770b\u200b\u6808\u5e27\u200b</li> </ul> Text Only<pre><code>(gdb) bt # \u200b\u67e5\u770b\u200b\u6808\u5e27\u200b\n(gdb) frame 1 # \u200b\u67e5\u770b\u200b1\u200b\u7684\u200b\u51fd\u6570\u200b\u6808\u200b\n</code></pre> <ul> <li>\u200b\u53cd\u6c47\u7f16\u200b disassemb</li> <li>\u200b\u8bbe\u7f6e\u200bulimit -c unlimit \u200b\u751f\u6210\u200bcore\u200b\u6587\u4ef6\u200b\uff0cgdb\u200b\u8c03\u8bd5\u200bcore\u200b\u6587\u4ef6\u200b</li> </ul> Text Only<pre><code>gdb main core_file\n</code></pre>"},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/#\u5176\u5b83\u8c03\u8bd5","title":"\u5176\u5b83\u200b\u8c03\u8bd5","text":"<p>\u200b\u8fd8\u6709\u200b\u5176\u4ed6\u200b\u4e00\u4e9b\u200b\u5e38\u89c1\u200b\u7684\u200b\u8c03\u8bd5\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u5728\u200b\u65e5\u5e38\u200b\u5f00\u53d1\u200b\u4e2d\u200b\u53ef\u4ee5\u200b\u5e2e\u52a9\u200b\u66f4\u52a0\u200b\u5feb\u901f\u200b\u7684\u200b\u53d1\u73b0\u200b\u95ee\u9898\u200b\u3002\u200b\u6bd4\u5982\u200b</p> <ul> <li>c++\u200b\u7a0b\u5e8f\u200b\u4f7f\u7528\u200b\u4e86\u200b\u52a8\u6001\u94fe\u63a5\u5e93\u200b.so\u200b\u505a\u200b\u529f\u80fd\u200b\u6269\u5c55\u200b\uff0c\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b\u52a8\u6001\u94fe\u63a5\u5e93\u200b\uff0c\u200b\u65ad\u70b9\u200b\u8fdb\u5165\u200bso\u200b\u6e90\u6587\u4ef6\u200b\uff1f</li> <li>Python\u200b\u8c03\u7528\u200bc\u200b\u8bed\u8a00\u200b\u52a8\u6001\u94fe\u63a5\u5e93\u200b\u5982\u4f55\u200b\u8c03\u8bd5\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u5728\u200b\u505a\u200bffi\u200b\u8de8\u200b\u8bed\u8a00\u200b\u8c03\u7528\u200b\u65f6\u200b\u5f88\u200b\u5e38\u89c1\u200b\uff0c\u200b\u6bd4\u5982\u200bctypes load so\u200b\u6587\u4ef6\u200b\uff1f</li> <li>python\u200b\u8c03\u8bd5\u200b\u9664\u4e86\u200b\u4f7f\u7528\u200bgdb\uff0c\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200bpdb</li> <li>python -m pdb main.py</li> <li>\u200b\u5728\u200bclion\u200b\u4e2d\u200b\u8c03\u8bd5\u200b\u73af\u5883\u200b\u5f88\u200b\u5f3a\u5927\u200b\uff0c\u200b\u5f88\u200b\u65b9\u4fbf\u200b\u8c03\u8bd5\u200b\uff0c\u200b\u4f46\u662f\u200b\u5728\u200bvscode\u200b\u4e2d\u200b\u5982\u4f55\u200b\u914d\u7f6e\u200b\u8c03\u8bd5\u200b\u73af\u5883\u200b\u5462\u200b\uff1f</li> </ul>"},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/#bin-\u6587\u4ef6\u67e5\u770b\u65b9\u6cd5","title":"bin \u200b\u6587\u4ef6\u200b\u67e5\u770b\u200b\u65b9\u6cd5","text":"<ul> <li>\u200b\u6bd4\u8f83\u200bbin\u200b\u6587\u4ef6\u200b</li> </ul> <p>python3 compare_bin.py 1.bin 2.bin</p> Text Only<pre><code>import numpy as np\nimport argparse\nparser = argparse.ArgumentParser(description=\"your script description\")\n#parser.add_argument('--verbose', '-v', action='store_true', help='verbose mode')\nparser.add_argument(\"file1\")\nparser.add_argument(\"file2\")\nargs = parser.parse_args()\nprint(args)\nprint(args.file1)\nprint(args.file2)\n\narr_file1 = np.fromfile(args.file1, dtype=\"float16\")\narr_file2 = np.fromfile(args.file1, dtype=\"float16\")\nprint(np.allclose(arr_file1, arr_file2))\n</code></pre> <ul> <li>\u200b\u67e5\u770b\u200bbin\u200b\u6587\u4ef6\u200b\u7684\u200bsize bytes</li> </ul> Text Only<pre><code>ls -ll xxx.bin\n</code></pre> <ul> <li>od\u200b\u5de5\u5177\u200b</li> </ul> Text Only<pre><code>od -t fF -N 32 xxx.bin\n-t fF : \u200b\u6309\u7167\u200bfloat32\u200b\u6253\u5370\u200b\n-N 32 : \u200b\u8bfb\u53d6\u200b32\u200b\u4e2a\u200b\u5b57\u8282\u200b\n-t fD : \u200b\u6309\u7167\u200bfloat64\u200b\u6253\u5370\u200b\n</code></pre> <ul> <li>\u200b\u4fdd\u5b58\u200bndarray to img</li> </ul> Text Only<pre><code>from PIL import Image\nimport numpy as np\n\nheight = 500\nweight = 500\nchannel = 3\nimg_numpy = np.zeros((height, weight, channel), dtype=np.uint8)\nimg = Image.fromarray(img_numpy, \"RGB\")\n# Display the Numpy array as Image\nimg.show()\n\n# Save the Numpy array as Image\nimage_filename = \"opengenus_image.jpeg\"\nimg.save(image_filename)\n</code></pre> <ul> <li>\u200b\u4fdd\u5b58\u200bndarray to bin file</li> </ul> Text Only<pre><code>arr.tofile(\"out.bin\")\n</code></pre>"},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/#\u8bbe\u7f6egdb\u6e90\u7801\u76ee\u5f55","title":"\u8bbe\u7f6e\u200bgdb\u200b\u6e90\u7801\u200b\u76ee\u5f55","text":"<p>GDB\u200b\u6280\u5de7\u200b \u200b\u5f53\u200b\u518d\u200b\u5f00\u53d1\u200b\u673a\u4e0a\u200b\u7f16\u8bd1\u200b\u597d\u200b\u8c03\u8bd5\u7a0b\u5e8f\u200b\u540e\u200b\uff0cscp\u200b\u5230\u200b\u76ee\u6807\u200b\u673a\u4e0a\u200b\uff0c\u200b\u4f7f\u7528\u200bgdb\u200b\u8c03\u8bd5\u200b\uff0c\u200b\u4f46\u662f\u200b\u56e0\u4e3a\u200b\u53ef\u6267\u884c\u6587\u4ef6\u200b\u66f4\u6539\u200b\u4e86\u200b\u76ee\u5f55\u200b\u3002\u200b\u5bfc\u81f4\u200bgdb\u200b\u627e\u200b\u4e0d\u5230\u200b\u6e90\u4ee3\u7801\u200b\u8def\u5f84\u200b\u3002 \u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\uff1a</p> Text Only<pre><code>\uff08gdb\uff09pwd # \u200b\u67e5\u770b\u200b\u5f53\u524d\u200b\u8def\u5f84\u200b\n\uff08gdb\uff09show directories # \u200b\u67e5\u770b\u200b\u6e90\u7801\u200b\u641c\u7d22\u200b\u8def\u5f84\u200b \n\uff08gdb\uff09dir /new_path/src # /new_path/src \u200b\u662f\u200b\u76ee\u6807\u200b\u673a\u4e0a\u200b\u7684\u200b\u6e90\u7801\u200b\u8def\u5f84\u200b\uff0cgdb\u200b\u5c31\u200b\u4f1a\u200b\u53bb\u200b\u8fd9\u4e2a\u200b\u76ee\u5f55\u200b\u641c\u7d22\u200b\u6e90\u7801\u200b\n\uff08gdb\uff09info source # \u200b\u53ef\u4ee5\u200b\u67e5\u770b\u200b\u5f53\u524d\u200b\u6e90\u7801\u200b\u4fe1\u606f\u200b\uff0c\u200b\u5176\u4e2d\u200b\u4e5f\u200b\u5305\u542b\u200b\u7f16\u8bd1\u200b\u4fe1\u606f\u200b\n\uff08gdb\uff09set substitute-path from_path to_path # \u200b\u53ef\u4ee5\u200b\u8ba9\u200b\u4f60\u200b\u4fee\u6539\u200b\u6e90\u7801\u200b\u641c\u7d22\u200b\u8def\u5f84\u200b\uff0c\u200b\u628a\u200b\u6e90\u7801\u200b\u7edd\u5bf9\u8def\u5f84\u200b\u91cc\u9762\u200b\u7684\u200b\u4e00\u4e2a\u200bpath\u200b\u6620\u5c04\u200b\u5230\u200b\u53e6\u200b\u4e00\u4e2a\u200bpath\u200b\u4e0a\u53bb\u200b\n</code></pre>"},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/#\u4ea4\u53c9\u7f16\u8bd1gdb\u548cgdbserver","title":"\u4ea4\u53c9\u200b\u7f16\u8bd1\u200bgdb\u200b\u548c\u200bgdbserver","text":"<p>\u200b\u4e3a\u4e86\u200b\u8fdc\u7a0b\u200b\u8c03\u8bd5\u200b\uff0c\u200b\u5f00\u53d1\u200b\u673a\u200b\uff08x86\uff09\u200b\u548c\u200b\u76ee\u6807\u200b\u673a\u200b\uff08arm64\uff09\uff0c\u200b\u9700\u8981\u200b\u7f16\u8bd1\u200b\u5f00\u53d1\u200b\u673a\u4e0a\u200b\u8fd0\u884c\u200b\u7684\u200bgdb\uff0c\u200b\u548c\u200b\u76ee\u6807\u200b\u673a\u4e0a\u200b\u8fd0\u884c\u200b\u7684\u200bgdbserver\uff0c\u200b\u5e76\u4e14\u200b\u5b83\u4eec\u200b\u7684\u200b\u7248\u672c\u200b\u9700\u8981\u200b\u4e00\u81f4\u200b\u3002 \u200b\u9996\u5148\u200b\u4e3a\u4e86\u200b\uff0c\u200b\u7f16\u8bd1\u200bgdbserver\uff0c\u200b\u56e0\u4e3a\u200b\u662f\u200b\u5728\u200b\u76ee\u6807\u200b\u673a\u4e0a\u200b\u8fd0\u884c\u200b\u7684\u200b\uff0c\u200b\u6240\u4ee5\u200b\u9700\u8981\u200b\u6709\u200b\u4ea4\u53c9\u200b\u7f16\u8bd1\u200b\u73af\u5883\u200b\uff0c\u200b\u6bd4\u5982\u200b:/proc/arm-linux/\u2026/bin\u200b\u76ee\u5f55\u200b\u4e0b\u200b\uff0c\u200b\u5b58\u5728\u200b\u4ea4\u53c9\u200b\u7f16\u8bd1\u200b\u4f7f\u7528\u200b\u7684\u200bgcc\u200b\u7b49\u200b\u5de5\u5177\u200b\u3002 https://developer.aliyun.com/article/243857</p> <ul> <li>\u200b\u4e0b\u8f7d\u200bgdb8.1.1\uff08\u200b\u7248\u672c\u200b\u4e0d\u662f\u200b\u8d8a\u65b0\u8d8a\u200b\u597d\u200b\uff09</li> </ul> <p>\u200b\u4e0b\u8f7d\u200b\u5730\u5740\u200b\uff1ahttp://ftp.gnu.org/gnu/gdb/</p> Text Only<pre><code>wget http://ftp.gnu.org/gnu/gdb/gdb-8.1.1.tar.gz\n</code></pre> <ul> <li>\u200b\u7f16\u8bd1\u200bgdb\uff08\u200b\u4f7f\u7528\u200bx86\u200b\u7684\u200bgcc\u200b\u7f16\u8bd1\u200b\uff09</li> </ul> Text Only<pre><code>#!/bin/bash\n\ncd gdb-8.1.1/\n\n# aarch64-mix210-linux \u200b\u53c2\u8003\u200b\u4ea4\u53c9\u200b\u7f16\u8bd1\u200b\u5de5\u5177\u200b\u547d\u540d\u200b\n./configure --program-prefix=`aarch64-mix210-linux-` \\\n    --target=aarch64-mix210-linux \\\n    --prefix=`pwd`/out\n\nmake -j2\nmake install\n</code></pre> <ul> <li>\u200b\u7f16\u8bd1\u200bgdbserver \uff08\u200b\u4f7f\u7528\u200b\u4ea4\u53c9\u200b\u7f16\u8bd1\u200b\u5de5\u5177\u200b\u4e2d\u200b\u7684\u200baarch64-mix210-linux-gcc\u200b\u7f16\u8bd1\u200b\uff09</li> </ul> Text Only<pre><code>#!/bin/bash\n\ncd gdb-8.1.1/gdb/gdbserver\nexport CC=/opt/linux/x86-arm/aarch64-mix210-linux/bin/aarch64-mix210-linux-gcc\n\n./configure \\\n    --host=aarch64-mix210-linux \\\n    --target=aarch64-mix210-linux \\\n    --prefix=`pwd`/out\n\nmake -j2\nmake install\n</code></pre> <ul> <li>\u200b\u5982\u679c\u200bgdb\u200b\u548c\u200bgdbserver\u200b\u6587\u4ef6\u200bsize\u200b\u592a\u200b\u5927\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200bstrip\u200b\u5de5\u5177\u200b\uff0c\u200b\u4f46\u200b\u6ce8\u610f\u200bstrip gdbserver\u200b\u65f6\u8981\u200b\u4f7f\u7528\u200b\u4ea4\u53c9\u200b\u7f16\u8bd1\u200b\u5de5\u5177\u200b\u4e2d\u200b\u7684\u200baarch64-mix210-linux-strip</li> <li>scp\u200b\u6216\u8005\u200bnfs\u200b\u5c06\u200bgdbserver\u200b\u4f20\u9001\u200b\u5230\u200b\u76ee\u6807\u200b\u673a\u4e0a\u200b</li> </ul>"},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/#addr2line","title":"addr2line","text":"<p>http://lazybing.github.io/blog/2016/12/22/addr2line-use/ \u200b\u62d2\u7edd\u200b\u8d85\u5927\u200bcoredump - \u200b\u7528\u200bbacktrace\u200b\u548c\u200baddr2line\u200b\u641e\u5b9a\u200b\u5f02\u5e38\u200b\u51fd\u6570\u200b\u6808\u200b https://linux.die.net/man/3/backtrace_symbols</p> Text Only<pre><code>#include &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stddef.h&gt;\n#include &lt;signal.h&gt;\n#include &lt;execinfo.h&gt;\n\n// 0: GENERATE COREDUMP FILE \n// 1: PRINT STACK BY SELF\nint g_iTestFlag = 1;\n#define ADDR_MAX_NUM 100\n\nvoid CallbackSignal (int iSignalNo) {\n    printf (\"CALLBACK: SIGNAL:\\n\", iSignalNo);\n    void *pBuf[ADDR_MAX_NUM] = {0};\n    int iAddrNum = backtrace(pBuf, ADDR_MAX_NUM);\n    printf(\"BACKTRACE: NUMBER OF ADDRESSES IS:%d\\n\\n\", iAddrNum);\n    char ** strSymbols = backtrace_symbols(pBuf, iAddrNum);\n    if (strSymbols == NULL) {\n        printf(\"BACKTRACE: CANNOT GET BACKTRACE SYMBOLS\\n\");\n        return;\n    }\n    int ii = 0;\n    for (ii = 0; ii &lt; iAddrNum; ii++) {\n        printf(\"%03d %s\\n\", iAddrNum-ii, strSymbols[ii]);\n    }\n    printf(\"\\n\");\n    free(strSymbols);\n    strSymbols = NULL;\n    exit(1); // QUIT PROCESS. IF NOT, MAYBE ENDLESS LOOP.\n}\n\nvoid FuncBadBoy() {\n    void* pBadThing = malloc(1024*1024*256);\n    free (pBadThing);\n    free (pBadThing);\n}\n\nvoid FuncBadFather() {\n    FuncBadBoy();\n}\n\nint main(int argc, char **argv){\n    if (g_iTestFlag) {\n        signal(SIGSEGV, CallbackSignal);\n    }\n    FuncBadFather();   \n    return 0;\n}\n</code></pre> Text Only<pre><code>#include &lt;stdio.h&gt;\n\nint div(int numerator, int denominator)\n{\n    return numerator / denominator;\n}\n\nint main(int argc, char **argv)\n{\n    int numerator   = 10;\n    int denominator = 0;\n\n    return div(numerator, denominator);\n}\n</code></pre> <p></p>Text Only<pre><code>gcc -o div -g div.c\n</code></pre> \u200b\u4f7f\u7528\u200baddr2line \u200b\u67e5\u770b\u200b\u4e00\u4e2a\u200bdmsg\u200b\u6253\u5370\u200b\u7684\u200b\u5730\u5740\u200b\u770b\u4e0d\u5230\u200b\u51fd\u6570\u200b\u548c\u200b\u884c\u53f7\u200b\uff0c\u200b\u663e\u793a\u200b\uff1f\uff1f\uff0c\u200b\u90a3\u4e48\u200b\u56e0\u4e3a\u200b\u5730\u5740\u200b\u88ab\u200b\u91cd\u200b\u5b9a\u4f4d\u200b\u4e86\u200b\uff0c\u200b\u6bd4\u5982\u200b dmesg\u200b\u6253\u5370\u200b\uff1a<p></p> <p></p>Text Only<pre><code>[201297.280078] traps: div[41537] trap divide error ip:55e1e0c947f8 sp:7ffc8f750470 error:0 in div[55e1e0c94000+1000]\n</code></pre> http://tangxinfa.github.io/article/linux-4e0b8c038bd5526553bb8c038bd54fe1606f76847a0b5e8f5d296e83.html<p></p> <p></p>Text Only<pre><code>addr2line -e ./div -f 55e1e0c947f8\n??\n??:0\n</code></pre> \u200b\u4f7f\u7528\u200b7f8\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u67e5\u770b\u200b\u4e86\u200b\uff1a<p></p> <p></p>Text Only<pre><code>addr2line -e ./div -f 7f8\n_Z3divii\n/home/xxx/div.c:5\n</code></pre> \u200b\u8fd9\u6837\u200b\u6211\u4eec\u200b\u901a\u8fc7\u200b\u5728\u200b\u751f\u4ea7\u200b\u73af\u5883\u200b\u4f7f\u7528\u200bgdb\u200b\u63d0\u53d6\u200b\u5d29\u6e83\u200b\u8c03\u7528\u200b\u6808\u200b\u4ee5\u53ca\u200b\u5730\u5740\u6620\u5c04\u200b\u7a7a\u95f4\u200b\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u5728\u200b\u8c03\u8bd5\u200b\u73af\u5883\u200b\u8fdb\u884c\u200b\u6e90\u4ee3\u7801\u200b\u7ea7\u200b\u7684\u200b\u95ee\u9898\u200b\u5b9a\u4f4d\u200b\uff0c\u200b\u800c\u200b\u4e0d\u200b\u9700\u8981\u200b\u4ece\u200b\u751f\u4ea7\u200b\u73af\u5883\u200b\u53d6\u5f97\u200b core \u200b\u6587\u4ef6\u200b\u3002<p></p>"},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/#objdump","title":"objdump","text":"Text Only<pre><code>commond to output all the functions in a lib\nobjdump -Tt ./pavaro/baidu/vp-lab/pavaro/dependency/linux-arm/pavaro/lib/libpavaro.so | ag boost |  awk '{print $7}' | c++filt\n\nobjdump -CTt ./pavaro/baidu/vp-lab/pavaro/dependency/linux-arm/pavaro/lib/libpavaro.so | ag boost |  awk '{print $7}'\n</code></pre>"},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/#gprof","title":"gprof","text":"<p>\u200b\u6027\u80fd\u200b\u5206\u6790\u200b\u5de5\u5177\u200b\uff0c\u200b\u901a\u8fc7\u200bgcc\u200b\u7f16\u8bd1\u7a0b\u5e8f\u200b\u65f6\u200b\uff0c\u200b\u52a0\u5165\u200b-pg\u200b\u9009\u9879\u200b \u200b\u7136\u540e\u200b\u4f7f\u7528\u200bgprof\u200b\u5de5\u5177\u200b\u5206\u6790\u200b \u200b\u8d85\u7ea7\u200b\u65b9\u4fbf\u200b\u7684\u200bLinux\u200b\u81ea\u5e26\u200b\u6027\u80fd\u200b\u5206\u6790\u200b\u5de5\u5177\u200b\uff01gprof\u200b\u4ecb\u7ecd\u200b\u3001\u200b\u5b89\u88c5\u200b\u3001\u200b\u4f7f\u7528\u200b\u53ca\u200b\u5b9e\u8df5\u200b</p>"},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/#uftrace","title":"uftrace","text":"<p>\u200b\u8ddf\u8e2a\u200b\u51fd\u6570\u8c03\u7528\u200b\u56fe\u200b https://github.com/namhyung/uftrace/blob/master/doc/uftrace-live-demo.gif</p>"},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/#symbols","title":"Symbols","text":"<p>http://arthurchiao.art/blog/linux-tracing-basis-zh/</p>"},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/#perf\u706b\u7130\u56fe\u7684\u4f7f\u7528","title":"Perf\u200b\u706b\u7130\u200b\u56fe\u200b\u7684\u200b\u4f7f\u7528","text":"<p>https://www.cnblogs.com/happyliu/p/6142929.html</p> Text Only<pre><code>sudo perf record -F 99 -p PID -g -- sleep 60\n-F 99: \u200b\u6bcf\u79d2\u200b\u91c7\u6837\u200b99\u200b\u6b21\u200b\n-p PID: \u200b\u6307\u5b9a\u200b\u8fdb\u7a0b\u200bid\n-g: \u200b\u8bb0\u5f55\u200b\u8c03\u7528\u200b\u6808\u200b\nsleep 60: \u200b\u6301\u7eed\u200b60\u200b\u79d2\u200b, \u200b\u5982\u679c\u200b\u4e0d\u52a0\u200b\u5219\u200b\u4e00\u76f4\u200b\u91c7\u6837\u200b\u5230\u200b\u624b\u52a8\u200b\u4e2d\u65ad\u200b(CRTL+C)\u200b\u4e3a\u6b62\u200b\n</code></pre>"},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/#\u5d4c\u5165\u5f0f\u5f00\u53d1\u5de5\u5177","title":"\u5d4c\u5165\u5f0f\u200b\u5f00\u53d1\u5de5\u5177","text":"<p>\u200b\u5d4c\u5165\u5f0f\u200b\u5f00\u53d1\u200b\u6742\u8c08\u200b_Stoneshen1211\u200b\u7684\u200b\u535a\u5ba2\u200b-CSDN\u200b\u535a\u5ba2\u200b results.size() \u200b\u662f\u200bunsigned\u200b\u7c7b\u578b\u200b\uff0c\u200b\u8fd9\u200b\u6bb5\u200b\u4ee3\u7801\u200b\uff0ccompare\u200b\u7684\u200b\u65f6\u5019\u200b\u4f1a\u200b\u53d1\u751f\u200bint\u200b\u5230\u200bunsigned\u200b\u7684\u200b\u8f6c\u6362\u200b\uff0c\u200b\u5bfc\u81f4\u200b\u8fdb\u5165\u200b\u5faa\u73af\u200b\u3002</p> Text Only<pre><code>std::vector&lt;int&gt; results;\nfor (int index = 0; index &lt; results.size() - 1; index++) {\n    std::cout &lt;&lt;\"enter index is : \" &lt;&lt; index &lt;&lt; \"\\n\";\n}\n</code></pre>"},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/#gdb\u4ea4\u53c9\u7f16\u8bd1\u73af\u5883\u8c03\u8bd5core\u6587\u4ef6","title":"gdb\u200b\u4ea4\u53c9\u200b\u7f16\u8bd1\u200b\u73af\u5883\u200b\u8c03\u8bd5\u200bcore\u200b\u6587\u4ef6","text":"<p> bt\u200b\u627e\u200b\u4e0d\u5230\u200b\u51fd\u6570\u200b\u548c\u200b\u6587\u4ef6\u540d\u200b\uff0c\u200b\u8bbe\u7f6e\u200bsolib-search-path core-file # \u200b\u6e05\u7a7a\u200bcore\u200b\u6587\u4ef6\u200b core-file ./corexxxx # \u200b\u91cd\u65b0\u200b\u8bbe\u7f6e\u200bcore\u200b\u6587\u4ef6\u200b</p>"},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/ebpf/ebpf%20udst%E5%88%9D%E6%8E%A2--libstapsdt%E7%9A%84%E4%BD%BF%E7%94%A8/","title":"Ebpf udst\u200b\u521d\u63a2\u200b  libstapsdt\u200b\u7684\u200b\u4f7f\u7528","text":""},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/ebpf/ebpf%20udst%E5%88%9D%E6%8E%A2--libstapsdt%E7%9A%84%E4%BD%BF%E7%94%A8/#ebpf-udst\u521d\u63a2","title":"ebpf udst\u200b\u521d\u63a2","text":"<p>ebpf udst, \u200b\u9759\u6001\u200b\u8ddf\u8e2a\u200b\u70b9\u200b(tracepoint)\uff0c\u200b\u5728\u200b\u7528\u6237\u200b\u7a7a\u95f4\u200b\u4e5f\u200b\u88ab\u200b\u79f0\u4e3a\u200bUSDT(\u200b\u7528\u6237\u200b\u9759\u6001\u200b\u5b9a\u4e49\u200b\u8ddf\u8e2a\u200b)\u200b\u63a2\u9488\u200b\uff0c\u200b\u662f\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u611f\u5174\u8da3\u200b\u7684\u200b\u7279\u5b9a\u200b\u4f4d\u7f6e\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5728\u200b\u5176\u4e2d\u200b\u6302\u8f7d\u200b\u8ddf\u8e2a\u5668\u200b\u6765\u200b\u68c0\u67e5\u6570\u636e\u200b\u548c\u200b\u4ee3\u7801\u6267\u884c\u200b\u60c5\u51b5\u200b\u3002</p> <p>\u200b\u7528\u6237\u7a0b\u5e8f\u200b\u6dfb\u52a0\u200budst\uff0c\u200b\u91c7\u7528\u200blibstapsdt\u3002 </p>Text Only<pre><code>https://github.com/sthima/libstapsdt\n</code></pre><p></p>"},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/ebpf/ebpf%20udst%E5%88%9D%E6%8E%A2--libstapsdt%E7%9A%84%E4%BD%BF%E7%94%A8/#\u5b89\u88c5libstapsdt","title":"\u5b89\u88c5\u200blibstapsdt","text":"<p>\u200b\u53c2\u8003\u200bgit\u200b\u5730\u5740\u200b\uff0c\u200b\u6e90\u7801\u200b\u7f16\u8bd1\u200b\u5b89\u88c5\u200b</p>"},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/ebpf/ebpf%20udst%E5%88%9D%E6%8E%A2--libstapsdt%E7%9A%84%E4%BD%BF%E7%94%A8/#\u5b89\u88c5bcc","title":"\u5b89\u88c5\u200bbcc","text":"Text Only<pre><code>sudo apt-get install bpfcc-tools linux-headers-$(uname -r) \n</code></pre>"},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/ebpf/ebpf%20udst%E5%88%9D%E6%8E%A2--libstapsdt%E7%9A%84%E4%BD%BF%E7%94%A8/#demo\u8bb2\u89e3","title":"demo\u200b\u8bb2\u89e3","text":"<p>demo\u200b\u7a0b\u5e8f\u200b\u542f\u52a8\u200b\u547d\u4ee4\u200b\uff1a </p>Text Only<pre><code>./demo PROVIDER_NAME PROBE_NAME\n</code></pre><p></p> <p>\u200b\u542f\u52a8\u200blibstapsdt\u200b\u7684\u200bdemo\u200b\u7a0b\u5e8f\u200b\uff0c\u200b\u8be5\u200b\u7a0b\u5e8f\u200b\u5c06\u200bargv[1]\uff08\u200b\u4e5f\u200b\u5c31\u662f\u200b\u547d\u4ee4\u884c\u200b\u53c2\u6570\u200b1\uff09\u200b\u4f20\u9012\u200b\u7ed9\u200b\u4e86\u200bproviderInit()\u200b\u51fd\u6570\u200b\uff0c\u200b\u5c06\u200bargv[2]\u200b\u4f20\u9012\u200b\u7ed9\u200bproviderAddProbe()\u200b\u51fd\u6570\u200b\u3002</p> <p></p>Text Only<pre><code>  provider = providerInit(argv[1]);\n  for (int idx = 0; idx &lt; (probesCount); idx++) {\n    probes[idx] = providerAddProbe(provider, argv[idx + 2], 2, uint64, int64);\n  }\n</code></pre> \u200b\u5982\u200b\u4e0a\u200b\u4ee3\u7801\u200b\u6240\u793a\u200b\uff0cprobe\u200b\u7684\u200bname\u200b\u4e3a\u200bPROBE_NAME\uff0c\u200b\u6355\u83b7\u200b\u4e24\u4e2a\u200b\u53c2\u6570\u200b\uff0c\u200b\u5747\u200b\u4e3a\u200buint64\u200b\u7c7b\u578b\u200b\u3002<p></p> <p>\u200b\u4f7f\u7528\u200bfire\u200b\u51fd\u6570\u200b\u89e6\u53d1\u200bprobe\uff0c\u200b\u4f20\u9012\u200bi\u200b\u548c\u200bj\u200b\u4e24\u4e2a\u200buint64\u200b\u503c\u200b\uff0c\u200b\u8fd9\u200b\u4e24\u4e2a\u200b\u503c\u200b\u53ef\u4ee5\u200b\u5728\u200b\u89c2\u6d4b\u200bprobe\u200b\u65f6\u200b\u83b7\u53d6\u200b\u5230\u200b\u3002</p> Text Only<pre><code>probeFire(probes[idx], i++, j--);\n</code></pre> <p>demo\u200b\u7a0b\u5e8f\u200b\u7ec8\u7aef\u200b\u6253\u5370\u200b\u5982\u4e0b\u200b\uff1a </p>Text Only<pre><code>Firing probes...\nFiring probe [0]...\nProbe fired!\nFiring probes...\nFiring probe [0]...\nProbe fired!\nFiring probes...\nFiring probe [0]...\nProbe fired!\nFiring probes...\nFiring probe [0]...\n</code></pre><p></p> <p>\u200b\u542f\u52a8\u200bbcc\u200b\u7684\u200btrace\u200b\u7a0b\u5e8f\u200b\u8fdb\u884c\u200b\u8ddf\u8e2a\u200b\u63a2\u6d4b\u200b\u70b9\u200b\uff0c\u200b\u6253\u5370\u200b\u6355\u83b7\u200b\u5230\u200b\u7684\u200bprobe\u200b\u89e6\u53d1\u200b\u65f6\u200b\u4f20\u5165\u200b\u7684\u200b\u53c2\u6570\u200b\u3002 </p>Text Only<pre><code>sudo /sbin/trace-bpfcc -p (pgrep demo) 'u::PROBE_NAME \"i=%d j=%d\", arg1, arg2'\n</code></pre><p></p> <p>bcc trace\u200b\u7ec8\u7aef\u200b\u6253\u5370\u200b\u5982\u4e0b\u200b\uff1a </p>Text Only<pre><code>PID     TID     COMM            FUNC             -\n10958   10958   demo            PROBE_NAME       i=3 j=-3\n10958   10958   demo            PROBE_NAME       i=4 j=-4\n10958   10958   demo            PROBE_NAME       i=5 j=-5\n10958   10958   demo            PROBE_NAME       i=6 j=-6\n10958   10958   demo            PROBE_NAME       i=7 j=-7\n10958   10958   demo            PROBE_NAME       i=8 j=-8\n10958   10958   demo            PROBE_NAME       i=9 j=-9\n10958   10958   demo            PROBE_NAME       i=10 j=-10\n</code></pre><p></p>"},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/gdb/gdb%E6%9B%B4%E5%A5%BD%E7%9A%84%E6%98%BE%E7%A4%BAc%2B%2B%20STL%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E5%80%BC/","title":"gdb\u200b\u66f4\u597d\u200b\u7684\u200b\u663e\u793a\u200bc++ STL\u200b\u6570\u636e\u7ed3\u6784\u200b\u7684\u200b\u503c","text":""},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/gdb/gdb%E6%9B%B4%E5%A5%BD%E7%9A%84%E6%98%BE%E7%A4%BAc%2B%2B%20STL%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E5%80%BC/#gdb\u66f4\u597d\u7684\u663e\u793ac-stl\u6570\u636e\u7ed3\u6784\u7684\u503c","title":"gdb\u200b\u66f4\u597d\u200b\u7684\u200b\u663e\u793a\u200bc++ STL\u200b\u6570\u636e\u7ed3\u6784\u200b\u7684\u200b\u503c","text":""},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/gdb/gdb%E6%9B%B4%E5%A5%BD%E7%9A%84%E6%98%BE%E7%A4%BAc%2B%2B%20STL%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E5%80%BC/#\u5f00\u542fpretty-print\u529f\u80fd","title":"\u5f00\u542f\u200bpretty-print\u200b\u529f\u80fd","text":"<p>\u200b\u5728\u200b\u4f7f\u7528\u200bvscode\u200b\u8c03\u8bd5\u200b\u65f6\u200b\uff0c\u200b\u4e0d\u80fd\u200b\u50cf\u200bclion\u200b\u4e00\u6837\u200b\u76f4\u63a5\u200b\u67e5\u770b\u200bSTL\u200b\u5bb9\u5668\u200b\u4e2d\u200b\u7684\u200b\u5185\u5bb9\u200b\uff0c\u200b\u6bd4\u5982\u200bString\uff0c\u200b\u53ea\u80fd\u200b\u770b\u5230\u200b\u6307\u9488\u200b\u548c\u200b\u957f\u5ea6\u200b\u7b49\u200b\u4fe1\u606f\u200b\uff0c\u200b\u4e0d\u80fd\u200b\u76f4\u63a5\u200b\u770b\u5230\u200b\u5b57\u7b26\u4e32\u200b\u3002 \u3010\u200b\u5de5\u5177\u200b\u3011\u2014\u2014VSCODE\u200b\u8c03\u8bd5\u200bC++\u200b\u65f6\u200b\u65e0\u6cd5\u200b\u663e\u793a\u200bVector\uff0cmap\u200b\u7b49\u200b\u5bb9\u5668\u200b\u7684\u200b\u503c\u200b_\u200b\u519c\u592b\u5c71\u6cc9\u200b2\u200b\u53f7\u200b\u7684\u200b\u535a\u5ba2\u200b-CSDN\u200b\u535a\u5ba2\u200b</p> <p></p>Text Only<pre><code>\"setupCommands\": [\n    {\n        \"description\": \"Test\",\n        \"text\": \"python import sys;sys.path.insert(0, '/usr/share/gcc-8/python');from libstdcxx.v6.printers import register_libstdcxx_printers;register_libstdcxx_printers(None)\",\n        \"ignoreFailures\": false\n    },\n    {\n        \"description\": \"Enable pretty-printing for gdb\",\n        \"text\": \"-enable-pretty-printing\",\n        \"ignoreFailures\": true\n    }\n]\n</code></pre> \u200b\u4f46\u662f\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u51fa\u73b0\u200b\u95ee\u9898\u200b\uff1aPython scripting is not supported in this copy of GDB \u200b\u89e3\u51b3\u200b\uff1a 1.\u200b\u67e5\u770b\u200b\u5f53\u524d\u200bgdb\u200b\u662f\u5426\u200b\u652f\u6301\u200bpretty-print\u200b\u529f\u80fd\u200b\uff0c\u200b\u4e24\u79cd\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u65b9\u6cd5\u200b\u4e00\u200b\uff0c\u200b\u5728\u200bgdb\u200b\u7ec8\u7aef\u200b\uff1a<p></p> <p></p>Text Only<pre><code>\uff08gdb\uff09info pretty-print\n</code></pre> \u200b\u5982\u679c\u200b\u652f\u6301\u200b\uff0c\u200b\u4f1a\u200b\u770b\u5230\u200b\u4ee5\u4e0b\u200b\u7c7b\u4f3c\u200b\u7684\u200b\u8f93\u51fa\u200b\uff1a<p></p> <p></p>Text Only<pre><code>global pretty-printers:\n  builtin\n    mpx_bound128\n</code></pre> \u200b\u65b9\u6cd5\u200b\u4e8c\u200b\uff1a \u200b\u5982\u679c\u200b\u662f\u200b\u4ea4\u53c9\u200b\u7f16\u8bd1\u200b\u7684\u200bgdb\uff0c\u200b\u8bf7\u200b\u5c06\u200b$(which gdb)\u200b\u6362\u6210\u200b\u5b9e\u9645\u200b\u7684\u200bgdb\u200b\u8def\u5f84\u200b\u3002<p></p> <p></p>Text Only<pre><code>readelf -d $(which gdb) | grep python\n</code></pre> \u200b\u5982\u679c\u200b\u6ca1\u6709\u200b\u6253\u5370\u200b\u7c7b\u4f3c\u200bpythonxxx\u200b\u7684\u200b\u5185\u5bb9\u200b\uff0c\u200b\u8bf4\u660e\u200b\u4e0d\u200b\u652f\u6301\u200b\uff0c\u200b\u9700\u8981\u200b\u91cd\u65b0\u200b\u7f16\u8bd1\u200b\u3002<p></p> <ol> <li>\u200b\u91cd\u65b0\u200b\u7f16\u8bd1\u200b</li> </ol> <p></p>Text Only<pre><code>sudo apt install python3 python3-dev\n</code></pre> \u200b\u7f16\u8bd1\u200b\u811a\u672c\u200b\u5982\u4e0b\u200b\uff1a<p></p> Text Only<pre><code>#!/bin/bash\n\ncd gdb-8.1.1/\n\n./configure --program-prefix=`aarch64-mix210-linux-` \\\n    --target=aarch64-mix210-linux \\\n    --prefix=`pwd`/out \\ \n    --with-python=\"/usr/bin/python3\"\n\n# \u200b\u589e\u52a0\u200b\u4e86\u200b--with-python\uff0c\u200b\u6dfb\u52a0\u200bpython\u200b\u652f\u6301\u200b\nmake -j2 \nmake install\n</code></pre>"},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/gdb/gdb%E6%9B%B4%E5%A5%BD%E7%9A%84%E6%98%BE%E7%A4%BAc%2B%2B%20STL%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E5%80%BC/#\u4f7f\u7528gdb\u811a\u672c\u8c03\u8bd5\u81ea\u5b9a\u4e49print-stl\u547d\u4ee4","title":"\u4f7f\u7528\u200bgdb\u200b\u811a\u672c\u200b\u8c03\u8bd5\u200b\u81ea\u5b9a\u4e49\u200bprint STL\u200b\u547d\u4ee4","text":"<p>\u200b\u5982\u679c\u200b\u4e0d\u200b\u5728\u200bvscode\u200b\u4e2d\u200b\u8c03\u8bd5\u200b\u5462\u200b\uff0c\u200b\u5982\u4f55\u200b\u66f4\u597d\u200b\u7684\u200b\u6253\u5370\u200bstl\u200b\u5bb9\u5668\u200b\u4e2d\u200b\u7684\u200b\u5185\u5bb9\u200b\u5462\u200b\uff1f \u200b\u9996\u5148\u200b\uff0c\u200b\u5f15\u5165\u200bgdbinit\u200b\u811a\u672c\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5b9a\u4e49\u200b.gdbinit\u200b\u6587\u4ef6\u200b\uff0c\u200b\u9ed8\u8ba4\u200b\u542f\u52a8\u200b\u65f6\u4f1a\u200b\u53bb\u200b$home\u200b\u76ee\u5f55\u200b\u4e2d\u200b\u627e\u200b\uff0c\u200b\u5982\u679c\u200b\u5b58\u5728\u200b\u8fd9\u4e2a\u200b\u6587\u4ef6\u200b\u5c31\u200b\u52a0\u8f7d\u200b\u4f7f\u7528\u200b\u3002\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200bgdb -x .gdbinit\u200b\u6587\u4ef6\u200b\u6307\u5b9a\u200b\u3002 \u200b\u4e00\u4e9b\u200b\u91cd\u590d\u6027\u200b\u7684\u200b\u8c03\u8bd5\u200b\u5185\u5bb9\u200b\u6216\u8005\u200b\u663e\u793a\u200b\u7684\u200b\u8bbe\u5b9a\u200b\uff0c\u200b\u4ee5\u53ca\u200bcommand\u200b\u7684\u200b\u6269\u5c55\u200b\uff0c\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b.gdbinit\u200b\u6587\u4ef6\u200b\u6765\u200b\u8bbe\u7f6e\u200b\u3002command\u200b\u547d\u4ee4\u200b\u652f\u6301\u200b\u5b9a\u4e49\u200b\u51fd\u6570\u200b\u548c\u200b\u51fd\u6570\u200b\u8bf4\u660e\u200b\uff08description\uff09\u3002 \u200b\u6253\u5370\u200bstl\u200b\u5bb9\u5668\u200b\u4e2d\u200b\u7684\u200b\u5185\u5bb9\u200b\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200bgdbinit\u200b\u811a\u672c\u200b\u5b9e\u73b0\u200b\u3002\u200b\u6bd4\u5982\u200b\u6253\u5370\u200bstl\u200b\u5bb9\u5668\u200b\u7684\u200bgdb\u200b\u811a\u672c\u200b\uff0chttp://www.yolinux.com/TUTORIALS/src/dbinit_stl_views-1.03.txt\u3002</p> <p></p>Text Only<pre><code>wget http://www.yolinux.com/TUTORIALS/src/dbinit_stl_views-1.03.txt -o .gdbinit\n</code></pre> \u200b\u7136\u540e\u200b\u5c06\u200b\u5176\u200b\u653e\u5165\u200b$home\u200b\u76ee\u5f55\u200b\u4e0b\u200b\uff0c\u200b\u5728\u200b\u8fd9\u4e2a\u200b\u811a\u672c\u200b\u4e2d\u200b\u6269\u5145\u200b\u4e86\u200bpvector\u3001pstring\u3001pqueue\u3001pmap\u200b\u7b49\u200b\u547d\u4ee4\u200b\uff0c\u200b\u6bd4\u5982\u200b\u5b58\u5728\u200b\u4e00\u4e2a\u200bvector\u200b\u53d8\u91cf\u200bfile_name_list\u3002<p></p> <p></p>Text Only<pre><code>(gdb) ptype file_name_list\ntype = std::vector&lt;std::string&gt;\n(gdb) pvector file_name_list # \u200b\u5c31\u200b\u4f1a\u200b\u6253\u5370\u200bvector\u200b\u5185\u5bb9\u200b\n</code></pre> \u200b\u5728\u200bvscode\u200b\u4e2d\u200b\u6267\u884c\u200b\u9700\u8981\u200b\u52a0\u200b-exec\u200b\u547d\u4ee4\u200b\u3002<p></p> Text Only<pre><code>(gdb) -exec ptype file_name_list\ntype = std::vector&lt;std::string&gt;\n(gdb) -exec pvector file_name_list # \u200b\u5c31\u200b\u4f1a\u200b\u6253\u5370\u200bvector\u200b\u5185\u5bb9\u200b\n</code></pre>"},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/gdb/gdb%E8%B0%83%E8%AF%95core%E6%96%87%E4%BB%B6/","title":"Gdb\u200b\u8c03\u8bd5\u200bcore\u200b\u6587\u4ef6","text":"<p>\u200b\u6211\u200b\u5728\u200b\u8c03\u8bd5\u7a0b\u5e8f\u200b\u65f6\u200b\uff0c\u200b\u9047\u5230\u200b\u4e86\u200b\u4e00\u79cd\u200b\u60c5\u51b5\u200b\uff1a\u200b\u5728\u200bdebug\u200b\u65b9\u5f0f\u200b\u4e0b\u200b\u6267\u884c\u7a0b\u5e8f\u200b\u6ca1\u6709\u200b\u95ee\u9898\u200b\uff0c\u200b\u4f46\u662f\u200b\u5728\u200b\u8fd0\u884c\u200b\u6a21\u5f0f\u200b\u4e0b\u200b\u51fa\u73b0\u200b\u4e86\u200b\u6bb5\u200b\u9519\u8bef\u200b\u3002\u200b\u4f7f\u7528\u200b\u4e0b\u9762\u200b\u7684\u200b\u8c03\u8bd5\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u4f7f\u7528\u200bgdb\u200b\u8c03\u8bd5\u7a0b\u5e8f\u200b\u5d29\u6e83\u200b\u540e\u200b\u751f\u6210\u200bcore\u200b\u6587\u4ef6\u200b\uff0c\u200b\u6210\u529f\u200b\u627e\u5230\u200b\u62a5\u9519\u200b\u4f4d\u7f6e\u200b\u3002</p>"},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/gdb/gdb%E8%B0%83%E8%AF%95core%E6%96%87%E4%BB%B6/#\u7a0b\u5e8f\u751f\u6210core\u6587\u4ef6","title":"\u7a0b\u5e8f\u200b\u751f\u6210\u200bcore\u200b\u6587\u4ef6","text":"Text Only<pre><code># \u200b\u8bbe\u7f6e\u200b\uff08\u200b\u4e34\u65f6\u200b\u5728\u200b\u5f53\u524d\u200bterminal\u200b\u4e2d\u200b\u8bbe\u7f6e\u200b\uff09\nulimit -c unlimited\n\n# \u200b\u67e5\u770b\u200b\nulimit -a\n</code></pre> <p>\u200b\u8bbe\u7f6e\u200bcore\u200b\u6587\u4ef6\u200b\u751f\u6210\u200b\u76ee\u5f55\u200b</p> <p></p>Text Only<pre><code>sysctl -w kernel.core_pattern=/var/crash/core.%u.%e.%p\n</code></pre> \u200b\u6b64\u200b\u547d\u4ee4\u200b\u5c06\u200bcoredump\u200b\u6587\u4ef6\u200b\u7f3a\u200b\u7701\u4f1a\u200b\u4fdd\u5b58\u200b\u81f3\u200b/var/crash\u200b\u76ee\u5f55\u200b\u4e0b\u200b\uff0c\u200b\u6587\u4ef6\u540d\u79f0\u200b\u683c\u5f0f\u200b\u4e3a\u200bcore.%u.%e.%p<p></p>"},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/gdb/gdb%E8%B0%83%E8%AF%95core%E6%96%87%E4%BB%B6/#gdb\u8c03\u8bd5","title":"gdb\u200b\u8c03\u8bd5","text":"<p>\u200b\u5c06\u200bcore\u200b\u6587\u4ef6\u200b\u62f7\u8d1d\u5230\u200b\u7a0b\u5e8f\u6267\u884c\u200b\u76ee\u5f55\u200b</p> Text Only<pre><code>gdb ./exec_file_name core_file_name\n</code></pre> Text Only<pre><code>bt\n</code></pre> Text Only<pre><code>frame number\n</code></pre>"},{"location":"notes/%23%E8%B0%83%E8%AF%95%E6%8A%80%E8%83%BD%E7%AF%87/gdb/use%20gdb/","title":"Use gdb","text":"<p>redhat develop doc</p>"},{"location":"readme/","title":"\u5173\u4e8e\u200b\u6211","text":""},{"location":"readme/%E4%BA%BA%E7%94%9F%E6%B5%B7%E6%B5%B7%E6%88%91%E5%9C%A8%E8%BF%99%E9%87%8C/","title":"\u4eba\u751f\u200b\u6d77\u6d77\u200b\u6211\u200b\u5728\u200b\u8fd9\u91cc","text":"<p>\u200b\u4eba\u751f\u200b\u6d77\u6d77\u200b\uff0c\u200b\u6f6e\u843d\u200b\u4e4b\u540e\u200b\u662f\u200b\u6f6e\u8d77\u200b\u3002 \u200b\u4f60\u200b\u8bf4\u200b\u90a3\u200b\u662f\u200b\u6d88\u78e8\u200b\u3001\u200b\u7b11\u67c4\u200b\u3001\u200b\u7f6a\u8fc7\u200b\uff0c\u200b\u4f46\u200b\u90a3\u200b\u5c31\u662f\u200b\u6211\u200b\u7684\u200b\u82f1\u96c4\u4e3b\u4e49\u200b\u3002 \u2014\u2014 \u300a\u200b\u4eba\u751f\u200b\u6d77\u6d77\u200b\u300b\u200b\u9ea6\u5bb6\u200b</p> <p>\u200b\u5728\u200b\u8fd9\u91cc\u200b\uff0c\u200b\u6216\u8005\u200b\u90a3\u91cc\u200b\uff0c\u200b\u4f60\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u627e\u5230\u200b\u6211\u200b\u7684\u200b\u8db3\u8ff9\u200b\u2026</p>"},{"location":"readme/%E4%BA%BA%E7%94%9F%E6%B5%B7%E6%B5%B7%E6%88%91%E5%9C%A8%E8%BF%99%E9%87%8C/#\u8fd9\u4e9b\u540d\u5b57\u7684\u7531\u6765","title":"\u8fd9\u4e9b\u200b\u540d\u5b57\u200b\u7684\u200b\u7531\u200b\u6765","text":"<p>\u200b\u60a8\u200b\u53ef\u80fd\u200b\u5bf9\u200b\u6211\u200b\u4f7f\u7528\u200b\u7684\u200b\u540d\u5b57\u200b\uff08KenForever1\u3001SteveForever\uff09\u200b\u6709\u200b\u4e00\u4e9b\u200b\u7591\u60d1\u200b\uff0c\u200b\u540d\u5b57\u200b\u7684\u200b\u7531\u200b\u6765\u200b\u548c\u200b\u6545\u4e8b\u200b\u7684\u200b\u4e3b\u4eba\u516c\u200b\u4eec\u200b\u6709\u5173\u200b\u2026</p> <p>Steve\u200b\u6765\u6e90\u4e8e\u200b\uff0c</p> <p></p> <p>Ken\u200b\u6765\u6e90\u4e8e\u200b\uff0c</p> <p></p> <p>\u200b\u53f2\u8482\u592b\u200b\u00b7\u200b\u4e54\u5e03\u65af\u200b\uff08Steve Jobs\uff09\u3001\u200b\u80af\u5c3c\u65af\u200b\u00b7\u200b\u6c64\u666e\u900a\u200b\uff08 Kenneth Lane Thompson\uff09\u3001\u200b\u4e39\u5c3c\u65af\u200b\u00b7\u200b\u91cc\u5947\u200b\uff08 Dennis MacAlistair Ritchie\uff09\u200b\u7b49\u200b\uff0c\u200b\u4ed6\u4eec\u200b\u662f\u200b\u65e0\u6570\u200b\u6781\u5ba2\u200b\u548c\u200b\u7a0b\u5e8f\u5458\u200b\u7684\u200b\u4fe1\u4ef0\u200b\uff0c\u200b\u5bf9\u200b\u8ba1\u7b97\u673a\u200b\u53d1\u5c55\u200b\u505a\u51fa\u200b\u4e86\u200b\u5de8\u5927\u200b\u7684\u200b\u8d21\u732e\u200b\uff0c\u200b\u5411\u200b\u4ed6\u4eec\u200b\u81f4\u4ee5\u200b\u656c\u610f\u200b\u3002</p>"},{"location":"readme/%E4%BA%BA%E7%94%9F%E6%B5%B7%E6%B5%B7%E6%88%91%E5%9C%A8%E8%BF%99%E9%87%8C/#kenforever1\u7684blog","title":"KenForever1\u200b\u7684\u200bblog","text":"<p>\u200b\u6211\u200b\u662f\u200bKenForever1\uff0c\u200b\u70ed\u7231\u200b\u9605\u8bfb\u200b\u3001\u200b\u559c\u6b22\u200b\u63a2\u7a76\u200b\u6e90\u7801\u200b\u548c\u200b\u65b0\u200b\u7684\u200b\u7f16\u7a0b\u6280\u672f\u200b\u3002\u200b\u770b\u5230\u200b\u6709\u8da3\u200b\u7684\u200b\u4e1c\u897f\u200b\u4f1a\u200b\u8bb0\u5f55\u4e0b\u6765\u200b\uff0c\u200b\u5206\u4eab\u200b\u7684\u200b\u597d\u5904\u200b\u591a\u591a\u76ca\u5584\u200b\uff1b\u200b\u7f16\u7a0b\u200b\u9664\u4e86\u200b\u521b\u9020\u529b\u200b\uff0c\u200b\u4e5f\u200b\u9700\u8981\u200b\u8d81\u624b\u200b\u9ad8\u6548\u200b\u7684\u200b\u5de5\u5177\u200b\u3002\u200b\u56e0\u6b64\u200b\u4e5f\u200b\u4f1a\u200b\u5c1d\u8bd5\u200b\u4e00\u4e9b\u200b\u9ad8\u6548\u200b\u7684\u200b\u5de5\u5177\u200b\uff0c\u200b\u6253\u9020\u200b\u81ea\u5df1\u200b\u7684\u200b\u5de5\u4f5c\u200b\u6d41\u200b\u3002</p> Text Only<pre><code>\u200b\u5730\u5740\u200b\uff1ahttps://kenforever1.github.io/\n</code></pre> <p></p> <p></p> <p>\u200b\u5bf9\u200b\u7f16\u7a0b\u8bed\u8a00\u200b\u4e0d\u200b\u8bb2\u7a76\u200b\uff0c\u200b\u5e38\u7528\u200bC++\u3001Rust\u3001Python, \u200b\u4e0d\u540c\u200b\u7684\u200b\u8bed\u8a00\u200b\u6709\u200b\u4e0d\u540c\u200b\u7684\u200b\u8bed\u6cd5\u200b\u7cd6\u200b\uff0c\u200b\u5728\u200b\u4e0d\u540c\u200b\u7684\u200b\u573a\u666f\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u4e00\u5b9a\u200b\u7a0b\u5ea6\u200b\u63d0\u9ad8\u6548\u7387\u200b\uff0cGolang\u3001C#\u3001Typescript\u3001lua\u200b\u7b49\u200b\u4e5f\u200b\u4f7f\u7528\u200b\u8fc7\u200b\u4e00\u4e9b\u200b\u3002\u200b\u6709\u4e9b\u200b\u95ee\u9898\u200b\u8bed\u8a00\u200b\u4e0d\u662f\u200b\u5173\u952e\u6027\u200b\u95ee\u9898\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u826f\u597d\u200b\u7684\u200b\u6570\u636e\u7ed3\u6784\u200b\u548c\u200b\u9ad8\u6548\u200b\u7684\u200b\u7cfb\u7edf\u200b\u8c03\u7528\u200b\uff0c\u200b\u9002\u5408\u200b\u67d0\u4e2a\u200b\u9886\u57df\u200b\u7684\u200b\u7cfb\u7edf\u200b\u8bbe\u8ba1\u200b\u7b49\u7b49\u200b\u89e3\u51b3\u200b\u3002</p> <p>\u200b\u5927\u200b\u6a21\u578b\u200b\u7684\u200b\u53d1\u5c55\u200b\u5982\u706b\u5982\u837c\u200b\uff0c\u200b\u4f5c\u4e3a\u200b\u7a0b\u5e8f\u5458\u200b\uff0c\u200b\u4e5f\u200b\u5f97\u200b\u8981\u200b\u719f\u6089\u200b\u5b83\u200b\uff0c\u200b\u5982\u4f55\u200b\u8bad\u7ec3\u200b\u3001\u200b\u63a8\u7406\u200b\u3001\u200b\u90e8\u7f72\u200b\u3002\u200b\u5404\u4e2a\u200b\u6846\u67b6\u200b\u9ad8\u6548\u200b\u7684\u200b\u539f\u7406\u200b\uff0c\u200b\u6bd4\u5982\u200bvllm\u3001LMDeploy\u3001TensorRTLLM\u200b\u7b49\u200b\uff0c\u200b\u91c7\u7528\u200b\u4e86\u200b\u4ec0\u4e48\u200b\u7b97\u6cd5\u200b\u548c\u200b\u7b56\u7565\u200b\u3002</p> <p>\u200b\u642d\u5efa\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u6587\u6863\u200bLLM\u200b\u5927\u200b\u6a21\u578b\u200b\u63a8\u7406\u200b Good Docs\uff0c\u200b\u8bb0\u5f55\u200b\u5de5\u4f5c\u200b\u548c\u200b\u5b66\u4e60\u200b\u5230\u200b\u7684\u200b\u77e5\u8bc6\u200b\u2026</p> <p></p> Text Only<pre><code>\u200b\u5730\u5740\u200b\uff1ahttps://kenforever1.github.io/llm_cool_docs\n</code></pre>"},{"location":"readme/%E4%BA%BA%E7%94%9F%E6%B5%B7%E6%B5%B7%E6%88%91%E5%9C%A8%E8%BF%99%E9%87%8C/#steveforever\u7684\u77e5\u4e4e\u5c0f\u7ad9","title":"SteveForever\u200b\u7684\u200b\u77e5\u4e4e\u200b\u5c0f\u7ad9","text":"<p>\u200b\u77e5\u4e4e\u200b\u662f\u200b\u4e2a\u200b\u4e0d\u9519\u200b\u7684\u200b\u5b66\u4e60\u200b\u5e73\u53f0\u200b\uff0c\u200b\u4e0a\u9762\u200b\u6709\u200b\u5f88\u591a\u200b\u5389\u5bb3\u200b\u7684\u200b\u670b\u53cb\u200b\u548c\u200b\u9ad8\u8d28\u91cf\u200b\u6587\u7ae0\u200b\u3002</p> Text Only<pre><code>\u200b\u5730\u5740\u200b\uff1ahttps://www.zhihu.com/people/steveforever\n</code></pre> <p></p>"},{"location":"readme/%E4%BA%BA%E7%94%9F%E6%B5%B7%E6%B5%B7%E6%88%91%E5%9C%A8%E8%BF%99%E9%87%8C/#github","title":"Github","text":"Text Only<pre><code>\u200b\u5730\u5740\u200b\uff1ahttps://github.com/KenForever1\n</code></pre> <p>\u200b\u611f\u8c22\u60a8\u200b\u7684\u200b\u5173\u6ce8\u200b\u548c\u200b\u9605\u8bfb\u200b\uff01</p>"},{"location":"weeks/20241117-llama-cpp%E6%8F%90%E7%82%B9PR/","title":"\u7ed9\u200bllama-cpp\u200b\u63d0\u4ea4\u200b\u4e00\u4e9b\u200bPR","text":""},{"location":"weeks/20241117-llama-cpp%E6%8F%90%E7%82%B9PR/#llama-cpp\u4e2d\u8ba1\u7b97\u7528\u4e8e\u7ebf\u6027\u4ee3\u6570\u8ba1\u7b97\u7684\u7ebf\u7a0b\u6570","title":"llama-cpp\u200b\u4e2d\u200b\u8ba1\u7b97\u200b\u7528\u4e8e\u200b\u7ebf\u6027\u4ee3\u6570\u200b\u8ba1\u7b97\u200b\u7684\u200b\u7ebf\u7a0b\u200b\u6570","text":""},{"location":"weeks/20241117-llama-cpp%E6%8F%90%E7%82%B9PR/#\u770b\u770bllama-cpp\u4e2d\u7684\u5b9e\u73b0","title":"\u770b\u770b\u200bllama-cpp\u200b\u4e2d\u200b\u7684\u200b\u5b9e\u73b0","text":"<p>\u200b\u4e00\u822c\u200b\u6211\u4eec\u200b\u662f\u4e0d\u662f\u200b\u60f3\u7740\u200b\u5c06\u200bthreads\u200b\u8bbe\u7f6e\u200b\u8d8a\u5927\u8d8a\u200b\u597d\u200b\uff0c\u200b\u6700\u5927\u200b\u8bbe\u7f6e\u200b\u4e3a\u200bcpu cores\u200b\u7684\u200b\u4e2a\u6570\u200b\u3002\u200b\u8fd9\u91cc\u200b\u7684\u200b\u7528\u6cd5\u200b\u544a\u8bc9\u200b\u4e86\u200b\u6211\u4eec\u200b\u5e76\u200b\u4e0d\u662f\u200b\u8fd9\u6837\u200b\u7684\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u8d85\u7ebf\u7a0b\u200b\uff08hyper-threads\uff09\u200b\u5bf9\u200b\u7ebf\u6027\u4ee3\u6570\u200b\uff08linear algebra\uff09\u200b\u8ba1\u7b97\u200b\u6ca1\u6709\u200b\u7528\u200b\u3002\u200b\u7ebf\u6027\u4ee3\u6570\u200b\u8ba1\u7b97\u200b\uff0c\u200b\u6bd4\u5982\u200b\u6df1\u5ea6\u200b\u5b66\u4e60\u200b\u4e2d\u200b\u7684\u200b\u77e9\u9635\u200b\u4e58\u6cd5\u200b\u7b49\u200b\uff0c\u200b\u6709\u200b\u4e00\u4e9b\u200b\u8457\u540d\u200b\u7684\u200bBLAS\u200b\u5e93\u200b\uff0c\u200b\u7528\u4e8e\u200b\u52a0\u901f\u200b\u8ba1\u7b97\u200b\u3002</p> C++<pre><code>/**\n * Returns number of CPUs on system that are useful for math.\n */\nint32_t cpu_get_num_math() {\n#if defined(__x86_64__) &amp;&amp; defined(__linux__) &amp;&amp; !defined(__ANDROID__)\n    //_SC_NPROCESSORS_ONLN \u200b\u8fd4\u56de\u200b\u7cfb\u7edf\u200b\u4e2d\u200b\u5b9e\u9645\u200b\u53ef\u7528\u200b\u7684\u200b\u6838\u5fc3\u200b\u6570\u200b\n    int n_cpu = sysconf(_SC_NPROCESSORS_ONLN);\n    if (n_cpu &lt; 1) {\n        return cpu_get_num_physical_cores();\n    }\n    if (is_hybrid_cpu()) {\n        cpu_set_t affinity;\n        if (!pthread_getaffinity_np(pthread_self(), sizeof(affinity), &amp;affinity)) {\n            int result = cpu_count_math_cpus(n_cpu);\n            pthread_setaffinity_np(pthread_self(), sizeof(affinity), &amp;affinity);\n            if (result &gt; 0) {\n                return result;\n            }\n        }\n    }\n#endif\n    return cpu_get_num_physical_cores();\n}\n\nstatic int cpu_count_math_cpus(int n_cpu) {\n    int result = 0;\n    for (int cpu = 0; cpu &lt; n_cpu; ++cpu) {\n        if (pin_cpu(cpu)) {\n            return -1;\n        }\n        if (is_running_on_efficiency_core()) {\n            continue; // efficiency cores harm lockstep threading\n        }\n        ++cpu; // hyperthreading isn't useful for linear algebra // \u200b\u8d85\u7ebf\u7a0b\u200b\u5bf9\u200b\u7ebf\u6027\u4ee3\u6570\u200b\u6ca1\u6709\u200b\u7528\u200b\uff0c\u200b\u7b97\u200b\u51fa\u200b\u5c31\u662f\u200bphysic cores / 2\n        ++result;\n    }\n    return result;\n}\n</code></pre> C++<pre><code>int32_t cpu_get_num_physical_cores() {\n    std::cout &lt;&lt; \"call cpu_get_num_physical_cores\" &lt;&lt; std::endl;\n#ifdef __linux__\n    // enumerate the set of thread siblings, num entries is num cores\n    std::unordered_set&lt;std::string&gt; siblings;\n    for (uint32_t cpu=0; cpu &lt; UINT32_MAX; ++cpu) {\n        std::ifstream thread_siblings(\"/sys/devices/system/cpu/cpu\"\n            + std::to_string(cpu) + \"/topology/thread_siblings\");\n        if (!thread_siblings.is_open()) {\n            break; // no more cpus\n        }\n        std::string line;\n        if (std::getline(thread_siblings, line)) {\n            std::cout &lt;&lt; \"line :\"  &lt;&lt; line &lt;&lt; std::endl; \n            siblings.insert(line);\n        }\n    }\n    if (!siblings.empty()) {\n        return static_cast&lt;int32_t&gt;(siblings.size());\n    }\n#endif\n    unsigned int n_threads = std::thread::hardware_concurrency();\n    return n_threads &gt; 0 ? (n_threads &lt;= 4 ? n_threads : n_threads / 2) : 4;\n}\n</code></pre>"},{"location":"weeks/20241117-llama-cpp%E6%8F%90%E7%82%B9PR/#\u4ec0\u4e48\u662fhybrid_cpu","title":"\u4ec0\u4e48\u200b\u662f\u200bhybrid_cpu\uff1f","text":"<p>Interesting Question</p> Text Only<pre><code>A hybrid CPU refers to a processor that combines two different types of processing units in a single Chip:\n\na conventional CPU (Central Processing Unit) and a specialized accelerator, such as a GPU(Graphics Processing Unit) or an FPGA (Field Programmable Gate Array)\n\nExamples Intel\u2019s Lakefield and Alder Lake Processor.\n\nAnother Example of Hybrid CPU AMD\u2019s Ryzen APUs.\n</code></pre> <p>https://www.quora.com/What-is-a-hybrid-CPU</p>"},{"location":"weeks/20241117-llama-cpp%E6%8F%90%E7%82%B9PR/#\u5173\u4e8ethread_siblings-\u548c-cpu_cores","title":"\u5173\u4e8e\u200bthread_siblings \u200b\u548c\u200b cpu_cores?","text":"<p>\u200b\u901a\u8fc7\u200bcat /proc/cpuinfo, flags\u200b\u4e2d\u200b\u53ef\u4ee5\u200b\u67e5\u770b\u200b\u662f\u5426\u200b\u652f\u6301\u200bHT\uff08\u200b\u8d85\u7ebf\u7a0b\u200b\uff09\u3002\u200b\u5982\u679c\u200bthread_siblings\u200b\u4e2a\u6570\u200b\u7b49\u4e8e\u200bcpu_cores\u200b\u5c31\u200b\u4e0d\u662f\u200b\u8d85\u7ebf\u7a0b\u200b\u3002</p> <p>On Linux I think you can read /proc/cpuinfo, but after that you have to do a bit of     thinking to see whether we have multicore cpu, or HT enabled cpu etc. First, flags will give you supported features, and ht there will indicate hyperthreading support. Then you have to check whether sibling count matches core count on each CPU, so look for cpu id, and deduct from there. (So if sibling count matches core count -&gt; no HT) </p> <p>\u200b\u53c2\u8003\u200b\uff1ahyper-threading-by-which-test-can-i-check-if-it-is-enabled-or-disabled</p>"},{"location":"weeks/20241117-llama-cpp%E6%8F%90%E7%82%B9PR/#\u5173\u4e8ehyperthreading\u5982\u4f55\u5728compute\u4e2d\u51b3\u5b9athread-num","title":"\u5173\u4e8e\u200bhyperthreading\uff0c\u200b\u5982\u4f55\u200b\u5728\u200bcompute\u200b\u4e2d\u200b\u51b3\u5b9a\u200bthread num\uff1f","text":"<p>https://www.juliabloggers.com/tag/hyperthreading/</p> <p>Because BLAS (and LINPACK, Linear Algebra Package, for other linear algebra routines) is so optimized, people say you should always make sure that it knows exactly how many \u201creal\u201d processors it has to work with. So in my case, with a Core i7 with 4 physical cores and 4 from hyperthreading, forget the hyperthreading and thus there are 4. With the FX8350, there are only 4 processors for doing math, so 4 threads. Check to make sure this is best.</p>"},{"location":"weeks/20241117-llama-cpp%E6%8F%90%E7%82%B9PR/#llama-cpp-\u7f16\u8bd1","title":"llama-cpp \u200b\u7f16\u8bd1","text":"<p>\u200b\u89e3\u51b3\u200b\u7f16\u8bd1\u200b\u4e2d\u200b\u7684\u200bopenmp undefined\u200b\u95ee\u9898\u200b\uff1a </p>Bash<pre><code>CMAKE_ARGS=\"-DCMAKE_CXX_FLAGS=-fopenmp\" pip install llama-cpp-python\nhttps://github.com/abetlen/llama-cpp-python/issues/1573\n</code></pre><p></p> <p>\u200b\u5982\u4f55\u200b\u7f16\u8bd1\u200b\u52a8\u6001\u94fe\u63a5\u5e93\u200b\uff0cbuild shared lib: </p>Bash<pre><code>cmake -DLLAMA_STATIC=Off -DBUILD_SHARED_LIBS=On -B build -S .\ncmake --build build\n</code></pre><p></p>"},{"location":"weeks/20241117-llama-cpp%E6%8F%90%E7%82%B9PR/#\u914d\u7f6e\u672c\u5730python\u5305\u641c\u7d22\u8def\u5f84","title":"\u914d\u7f6e\u200b\u672c\u5730\u200bpython\u200b\u5305\u200b\u641c\u7d22\u200b\u8def\u5f84","text":"<p>\u200b\u5728\u200b\u672c\u5730\u200b\u8c03\u8bd5\u200bpython\u200b\u9879\u76ee\u200b\u65f6\u200b\u5f88\u200b\u5b9e\u7528\u200b, clone\u200b\u9879\u76ee\u200b\u4e0d\u7528\u200b\u5b89\u88c5\u200b\uff0c\u200b\u76f4\u63a5\u200b\u8bbe\u7f6e\u200b\u4e00\u4e2a\u200b\u672c\u5730\u200b\u5305\u200b\u641c\u7d22\u200b\u8def\u5f84\u200b\u3002\u200b\u6216\u8005\u200b\u91c7\u7528\u200bpip install -e . \u200b\u5b89\u88c5\u200b\uff0c\u200b\u8fd9\u6837\u200b\u4e4b\u540e\u200b\u5b89\u88c5\u200b\u4e00\u4e2a\u200b\u94fe\u63a5\u200b,\u200b\u800c\u200b\u4e0d\u4f1a\u200b\u5c06\u200b\u9879\u76ee\u200b\u5b89\u88c5\u200b\u5230\u200bpython site-packages\u200b\u4e0b\u200b\u3002\u200b\u8fd9\u91cc\u200b\u6709\u4e2a\u200b\u9700\u8981\u200b\u6ce8\u610f\u200b\u7684\u200b\uff0c\u200b\u5982\u679c\u200b\u91c7\u7528\u200bpip install -e .\u200b\u5b89\u88c5\u200b\u4ee5\u540e\u200b, \u200b\u5982\u679c\u200b\u9879\u76ee\u200b\u6587\u4ef6\u200b\u5728\u200b\u4f60\u200b\u6620\u5c04\u200b\u7684\u200b\u76ee\u5f55\u200b\u4e2d\u200b\uff0c\u200b\u4f60\u200b\u6253\u5305\u200b\u4e00\u4e2a\u200bdocker\u200b\u5206\u4eab\u200b\u7ed9\u200b\u4eba\u5bb6\u200b\u4e0d\u4f1a\u200b\u5305\u62ec\u200b\u6574\u4e2a\u200b\u5305\u200b\u3002\u200b\u9700\u8981\u200bpip install ., \u200b\u4e0d\u8981\u200b-e\u3002</p> <p>\u200b\u5982\u4f55\u200b\u67e5\u770b\u200bsite-packages\u200b\u76ee\u5f55\u200b\uff1a</p> Bash<pre><code>$ python\n&gt;&gt; import toml # \u200b\u4efb\u610f\u200b\u5b89\u88c5\u200b\u4e86\u200b\u7684\u200b\u5305\u200b\n&gt;&gt; print(toml.__file__)\n</code></pre> <p>\u200b\u5199\u5165\u200b\u672c\u5730\u200b\u5305\u200b\u7684\u200b\u8def\u5f84\u200b\uff0c\u200b\u81ea\u52a8\u200b\u641c\u7d22\u200b\u672c\u5730\u200b\u5305\u4e86\u200b\u3002</p> Bash<pre><code>touch /home/ken/miniconda3/lib/python3.10/site-packages/mypkpath.pth\n</code></pre> <p>\u200b\u53c2\u8003\u200b\uff1apython-package-development</p>"},{"location":"weeks/20241117-llama-cpp%E6%8F%90%E7%82%B9PR/#c-cmake-add_library\u8bbe\u7f6e\u4e0d\u540c\u9009\u9879","title":"c++ cmake add_library\u200b\u8bbe\u7f6e\u200b\u4e0d\u540c\u200b\u9009\u9879","text":"<p>cmake add_library\u200b\u5982\u4f55\u200b\u4e0d\u200b\u8bbe\u7f6e\u200bshared\u3001static\u200b\u7b49\u200b\uff0c\u200b\u5c31\u200b\u4f1a\u200b\u6839\u636e\u200bBUILD_SHARED_LIBS\u200b\u8bbe\u7f6e\u200bshared\u200b\u6216\u8005\u200bstatic\u3002</p> Text Only<pre><code>add_library(${TARGET} \n    xxx.cpp)\n\nif (BUILD_SHARED_LIBS)\n    set_target_properties(${TARGET} PROPERTIES POSITION_INDEPENDENT_CODE ON)\n    target_compile_definitions(${TARGET} PRIVATE LLAMA_BUILD)\n    target_compile_definitions(${TARGET} PUBLIC  LLAMA_SHARED)\nendif()\n</code></pre>"},{"location":"weeks/20241117-llama-cpp%E6%8F%90%E7%82%B9PR/#other","title":"other","text":"<ul> <li> <p>spawning-processes-on-linux</p> </li> <li> <p>OpenBMB\u200b\u5f00\u6e90\u200b\u7684\u200bMiniCPM-V\u200b\u7cfb\u5217\u200b\u6a21\u578b\u200b\uff0c\u200b\u5c1d\u8bd5\u200b\u4e86\u200b\u7528\u200bllama-cpu\u200b\u63a8\u7406\u200bgguf\u200b\u91cf\u5316\u200b\u6a21\u578b\u200b\uff0c\u200b\u4f7f\u7528\u200bllama-cpp-python\u200b\u5e93\u200b\u90e8\u7f72\u200b\u670d\u52a1\u200b\uff0c\u200b\u652f\u6301\u200bopenai chat api\u200b\u683c\u5f0f\u200b\u8c03\u7528\u200b\u3002 OpenBMB/MiniCPM-V</p> </li> <li> <p>libcurl\u200b\u4f7f\u7528\u200bexample</p> </li> <li> <p>swift\u200b\u5927\u200b\u6a21\u578b\u200b\u8bad\u63a8\u200b\u4e00\u4f53\u200b\u6846\u67b6\u200b</p> </li> </ul> <p>......</p>"},{"location":"weeks/C%2B%2B%E5%8D%95%E6%B5%8BMock%E6%96%B9%E5%BC%8F/","title":"C++\u200b\u5355\u6d4b\u200bMock\u200b\u65b9\u5f0f","text":""},{"location":"weeks/C%2B%2B%E5%8D%95%E6%B5%8BMock%E6%96%B9%E5%BC%8F/#1-gtest-gmock","title":"1 GTest GMock","text":"<p>GMock\u200b\u53ef\u4ee5\u200b\u6ee1\u8db3\u200b\u5982\u4e0b\u200b\u6d4b\u8bd5\u200b\u9700\u6c42\u200b\uff1a</p> <ul> <li> <p>mock\u200b\u4e00\u4e2a\u200b\u7c7b\u200b\u7684\u200b\u865a\u200b\u51fd\u6570\u200b\u548c\u200b\u975e\u865a\u200b\u51fd\u6570\u200b</p> </li> <li> <p>mock std::function</p> </li> </ul> <p>\u200b\u4f46\u662f\u200b\u5982\u679c\u200b\u8981\u200b\u6d4b\u8bd5\u200b\u975e\u200b\u7c7b\u200b\u6210\u5458\u200b\u51fd\u6570\u200b\u548c\u200b\u865a\u200b\u51fd\u6570\u200b\uff0c\u200b\u5373\u200bc-style\u200b\u51fd\u6570\u200b\u3002</p> <p>Gmock\u200b\u662f\u200b\u5904\u7406\u200bc++\u200b\u7c7b\u200b\u7684\u200b\uff0c\u200b\u5982\u679c\u200b\u8981\u200bmock\u200b\u4e00\u4e2a\u200bc-style\u200b\u51fd\u6570\u200b\uff0c\u200b\u9700\u8981\u200b\u5b9a\u4e49\u200bInterface\u200b\u7684\u200b\u62bd\u8c61\u7c7b\u200b\uff0c\u200b\u7136\u540e\u200b\u901a\u8fc7\u200bmock\u200b\u7c7b\u200b\u7684\u200b\u65b9\u5f0f\u200b\u53bb\u200bmock c-stryle\u200b\u51fd\u6570\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u8981\u200bmock\u200b\u4e00\u4e2a\u200bc\u200b\u8bed\u8a00\u200b\u51fd\u6570\u200b\uff0c\u200b\u9700\u8981\u200b\u4f7f\u7528\u200b\u57fa\u4e8e\u200b\u94fe\u63a5\u200b\u65b9\u5f0f\u200b\u7684\u200b\uff0c\u200b\u5728\u200b\u6d4b\u8bd5\u200b\u7684\u200b\u65f6\u5019\u200b\u94fe\u63a5\u200b\u4e0d\u540c\u200b\u7684\u200bcpp\u200b\u5b9e\u73b0\u200b\u5e93\u200b\u3002\u200b\u5982\u679c\u200b\u4f60\u200b\u7684\u200b\u7a0b\u5e8f\u200b\u65f6\u200bc\u200b\u8bed\u8a00\u200b\u5b9e\u73b0\u200b\u7684\u200b\uff0c\u200b\u66f4\u597d\u200b\u7684\u200b\u662f\u200b\u91c7\u7528\u200bc mock\u200b\u7684\u200b\u6846\u67b6\u200b\u3002\u200b\u6bd4\u5982\u200bhttps://github.com/meekrosoft/fff\u3002</p> <p>\u200b\u53c2\u8003\u200b\uff1a</p> <ul> <li> <p>https://imageslr.com/2023/gtest.html</p> </li> <li> <p>https://google.github.io/googletest/gmock_cook_book.html</p> </li> <li> <p>https://stackoverflow.com/questions/31989040/can-gmock-be-used-for-stubbing-c-functions</p> </li> </ul>"},{"location":"weeks/C%2B%2B%E5%8D%95%E6%B5%8BMock%E6%96%B9%E5%BC%8F/#2-c-style-function-mock","title":"2 c-style function mock","text":"<p>\u200b\u8fd9\u91cc\u200b\u4ecb\u7ecd\u200b\u4e24\u79cd\u200bmock\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u53ef\u4ee5\u200bmock c-style function.</p>"},{"location":"weeks/C%2B%2B%E5%8D%95%E6%B5%8BMock%E6%96%B9%E5%BC%8F/#21-fff-mock\u6846\u67b6","title":"2.1 fff mock\u200b\u6846\u67b6","text":"<p>\u200b\u4f7f\u7528\u200bfff mock\u200b\u6846\u67b6\u200b\uff0c\u200b\u53ea\u200b\u9700\u8981\u200b\u5f15\u5165\u200bfff.h\u200b\u5934\u6587\u4ef6\u200b\uff0c</p> C++<pre><code>#include\u00a0\"fff.h\"\n\n#include\u00a0&lt;gtest/gtest.h&gt;\n\nDEFINE_FFF_GLOBALS;\n\n//\u00a0\u200b\u51fd\u6570\u200b\u539f\u578b\u200b\n\n//\u00a0xxxError\u00a0xxxInit(const\u00a0char\u00a0*arg1);\n\n//\u00a0\u200b\u901a\u8fc7\u200bmock\u200b\u5b8f\u200bFAKE_VALUE_FUNC\uff0c\u200b\u4f1a\u200b\u751f\u6210\u200b\u4e00\u4e2a\u200bxxxInit_fake\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u8bb0\u5f55\u200b\u4e86\u200b\u53c2\u6570\u503c\u200b\u548c\u200b\u8fd4\u56de\u503c\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u66f4\u6539\u200b\u51fd\u6570\u200b\u8fd4\u56de\u503c\u200b\u7b49\u200b\n\nFAKE_VALUE_FUNC(xxxError,\u00a0xxxInit,\u00a0const\u00a0char\u00a0*);\n\nclass\u00a0XClassTests\u00a0:\u00a0public\u00a0testing::Test\n\n{\n\npublic:\n\n\u00a0\u00a0\u00a0\u00a0//\u00a0\u200b\u53c2\u8003\u200bGtest\u200b\u6846\u67b6\u200b\uff0c\u200b\u4f1a\u200b\u5728\u200bXClassTests\u00a0test\u200b\u4e00\u200b\u5f00\u59cb\u200b\u8c03\u7528\u200bSetUp\u200b\u51fd\u6570\u200b\n\n\u00a0void\u00a0SetUp()\n\n\u00a0{\n\n\u00a0\u00a0//\u00a0Register\u00a0resets\n\n\u00a0\u00a0\u00a0\u00a0\u00a0RESET_FAKE(xxxInit);\n\n\u00a0\u00a0FFF_RESET_HISTORY();\n\n\u00a0\u00a0//\u00a0non\u00a0default\u00a0init\n\n\u00a0\u00a0xxxInit_fake.return_val\u00a0=\u00a0520;\n\n\u00a0}\n\n};\n\nTEST(XClassTests,\u00a0test_xxx_init_mock){\n\n\u00a0\u00a0\u00a0\u00a0int\u00a0err\u00a0=\u00a00;\n\n\u00a0\u00a0\u00a0\u00a0aclInit_fake.return_val\u00a0=\u00a0520;\n\n\u00a0\u00a0\u00a0\u00a0//\u00a0call_xxxInit_func\u200b\u4e2d\u4f1a\u200b\u53bb\u200b\u8c03\u7528\u200bxxxInit\u200b\u51fd\u6570\u200b\uff0c\u200b\u8fd9\u6837\u200b\u4f1a\u200b\u8c03\u7528\u200b\u5230\u200bmock\u200b\u7684\u200bxxxInit\u200b\u51fd\u6570\u200b\n\n\u00a0\u00a0\u00a0\u00a0err\u00a0=\u00a0call_xxxInit_func(0,\u00a0\"hello\");\n\n\u00a0\u00a0\u00a0\u00a0ASSERT_EQ(xxxInit_fake.call_count,\u00a01);\n\n\u00a0\u00a0\u00a0\u00a0RESET_FAKE(xxxInit);\n\n}\n</code></pre> <p>\u200b\u66f4\u200b\u591a\u200b\u4f8b\u5b50\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200b\uff1ahttps://github.com/meekrosoft/fff/tree/master/examples</p>"},{"location":"weeks/C%2B%2B%E5%8D%95%E6%B5%8BMock%E6%96%B9%E5%BC%8F/#22-\u501f\u52a9\u81ea\u5b9a\u4e49\u7684\u540c\u540d\u540c\u53c2\u51fd\u6570","title":"2.2 \u200b\u501f\u52a9\u200b\u81ea\u5b9a\u4e49\u200b\u7684\u200b\u540c\u540d\u200b\u540c\u53c2\u200b\u51fd\u6570","text":"C++<pre><code>// xxx_test.cpp\n\nextern \"C\"{\n\n    int xxxInit(const char* configPath){\n\n        return 520;\n\n    }\n\n}\n</code></pre> <p>\u200b\u7c7b\u4f3c\u200b\u53ef\u4ee5\u200b\u5b9e\u73b0\u200b\u7528\u200b\u81ea\u5b9a\u4e49\u200b\u7684\u200bmalloc\u200b\u51fd\u6570\u200b\u548c\u200bfree\u200b\u51fd\u6570\u200b\uff0cwrap \u200b\u7cfb\u7edf\u200b\u7684\u200bmalloc\u200b\u548c\u200bfree\u200b\u51fd\u6570\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u7edf\u8ba1\u200b\u5185\u5b58\u200b\u60c5\u51b5\u200b\u7b49\u200b\u529f\u80fd\u200b\u3002\u200b\u4f8b\u5982\u200b\uff1a</p> <p>https://github.com/Toddz1/MemLeak\u3002</p>"},{"location":"weeks/C%2B%2B%E5%8D%95%E6%B5%8BMock%E6%96%B9%E5%BC%8F/#3-lmock","title":"3 lmock","text":"<p>\u200b\u901a\u8fc7\u200b\u4fee\u6539\u200b\u63d2\u5165\u200b\u6c47\u7f16\u200b\u4ee3\u7801\u200b\uff0c\u200b\u5c06\u200bmock\u200b\u51fd\u6570\u200b\u5730\u5740\u200b\u8bbe\u7f6e\u200b\u5230\u200brax\u200b\u5bc4\u5b58\u5668\u200b\uff0c\u200b\u7136\u540e\u200bjump\u200b\u5230\u200brax\u200b\u6267\u884c\u200bmock\u200b\u51fd\u6570\u200b\uff0c\u200b\u53ef\u4ee5\u200bmock \u200b\u666e\u901a\u200b\u7684\u200b\u51fd\u6570\u200b\u548c\u200bstatic\u200b\u51fd\u6570\u200b\uff0c\u200b\u76ee\u524d\u200b\u53ea\u200b\u5b9e\u73b0\u200b\u4e86\u200bx86-64\u200b\u5e73\u53f0\u200b\u3002</p> <p>\u200b\u6bd4\u5982\u200b\u4ee3\u7801\u200b\u4e2d\u200b\u7684\u200b\u5982\u4e0b\u200b\u4e8c\u8fdb\u5236\u200b\uff0c\u200b\u5bf9\u5e94\u200b\u4e86\u200bjump rax\u3002</p> Bash<pre><code>\"\\xff\\xe0\"  =&gt;  jmp rax\n</code></pre> <p>\u200b\u6ce8\u200b: \u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200bgdb\u200b\u67e5\u770b\u200b\u6c47\u7f16\u200b\u548c\u200b\u4e8c\u8fdb\u5236\u200b\u4ee5\u53ca\u200b\u6e90\u7801\u200b</p> Bash<pre><code>disassemble /r add(int)\n</code></pre> Text Only<pre><code>/m \u200b\u6e90\u7801\u200b\u548c\u200b\u6c47\u7f16\u200b\u4e00\u8d77\u200b\u6392\u5217\u200b\n\n/r \u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b16\u200b\u8fdb\u5236\u200b\u4ee3\u7801\u200b\n</code></pre>"},{"location":"weeks/C%2B%2B%E5%8D%95%E6%B5%8BMock%E6%96%B9%E5%BC%8F/#31-c-\u5de5\u7a0b\u5b9e\u8df56\u5355\u5143\u6d4b\u8bd5\u5982\u4f55-mock-\u7cfb\u7edf\u8c03\u7528","title":"3.1 C++ \u200b\u5de5\u7a0b\u200b\u5b9e\u8df5\u200b(6)\uff1a\u200b\u5355\u5143\u6d4b\u8bd5\u200b\u5982\u4f55\u200b mock \u200b\u7cfb\u7edf\u200b\u8c03\u7528","text":"<p>https://www.cnblogs.com/Solstice/archive/2011/05/16/2047255.html</p> <p>\u200b\u53c2\u8003\u8d44\u6599\u200b\uff1a</p> <ul> <li> <p>https://github.com/wangyongfeng5/lmock/tree/main</p> </li> <li> <p>https://mp.weixin.qq.com/s?__biz=MjM5ODYwMjI2MA==&amp;mid=2649760560&amp;idx=2&amp;sn=5b403d105557e2adc0535c4e619eefe2&amp;chksm=beccb04b89bb395d8ee2565f8d838c54e2a203d5828faf74a62e7a3a9f7fb48da94ca581dbb6#rd%20%E5%A6%82%E6%9C%89%E4%BE%B5%E6%9D%83%E8%AF%B7%E8%81%94%E7%B3%BB:admin#unsafe.sh</p> </li> <li> <p>https://shell-storm.org/online/Online-Assembler-and-Disassembler/?inst=jmp+rax&amp;arch=x86-64&amp;as_format=inline#assembly</p> </li> <li> <p>https://www.cnblogs.com/Solstice/archive/2011/05/16/2047255.html</p> </li> </ul>"},{"location":"weeks/C%2B%2B%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%91/","title":"C++\u200b\u6761\u4ef6\u200b\u7f16\u8bd1","text":"<p>C++ \u200b\u6761\u4ef6\u200b\u7f16\u8bd1\u200b</p> <ol> <li>\u200b\u9996\u5148\u200b\uff0c\u200b\u5728\u200bCMakeLists.txt\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u4ee5\u4e0b\u200b\u4ee3\u7801\u200b\uff0c\u200b\u4ee5\u200b\u5b9a\u4e49\u65b0\u200b\u7684\u200bCFLAG\uff1a</li> </ol> Bash<pre><code>option(NEW_CFLAG_ENABLE \"Enable new CFLAG\" OFF)  \nif(NEW_CFLAG_ENABLE)  \n  add_compile_options(-DNEW_CFLAG)  \nendif()  \n</code></pre> <ol> <li>\u200b\u63a5\u7740\u200b\uff0c\u200b\u5728\u200b\u4ee3\u7801\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u6761\u4ef6\u200b\u7f16\u8bd1\u200b\uff08#ifdef\uff09\u200b\u6765\u200b\u68c0\u67e5\u200b\u662f\u5426\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u8be5\u200bCFLAG\uff1a</li> </ol> <p></p>Bash<pre><code>#ifdef NEW_CFLAG  \n  // \u200b\u4f60\u200b\u7684\u200b\u4ee3\u7801\u200b  \n#endif  \n</code></pre> 3. \u200b\u5728\u200b\u4f7f\u7528\u200bCMake\u200b\u7f16\u8bd1\u200b\u4ee3\u7801\u200b\u65f6\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u9009\u62e9\u200b\u542f\u7528\u200b\u6216\u200b\u7981\u7528\u200b\u65b0\u200b\u7684\u200bCFLAG\uff0c\u200b\u53ea\u200b\u9700\u200b\u8bbe\u7f6e\u200bNEW_CFLAG_ENABLE\u200b\u7684\u200b\u503c\u200b\u5373\u53ef\u200b\uff1a<p></p> Bash<pre><code>cmake -B build -S . -DNEW_CFLAG_ENABLE=ON\n\ncmake --build build\n</code></pre> <p>\u200b\u8fd9\u6837\u200b\uff0c\u200b\u5f53\u200b\u542f\u7528\u200b\u4e86\u200b\u65b0\u200b\u7684\u200bCFLAG\u200b\u65f6\u200b\uff0c\u200b\u7f16\u8bd1\u5668\u200b\u5c06\u4f1a\u200b\u5b9a\u4e49\u200bNEW_CFLAG\u200b\u5b8f\u200b\uff0c\u200b\u4f60\u200b\u7684\u200b\u4ee3\u7801\u200b\u4e2d\u200b\u7684\u200b\u6761\u4ef6\u200b\u7f16\u8bd1\u200b\u5c31\u200b\u4f1a\u200b\u6210\u7acb\u200b\u3002</p>"},{"location":"weeks/SRAM%E5%92%8CDRAM/","title":"SRAM\u200b\u548c\u200bDRAM","text":"<p>\u200b\u5408\u7406\u200b\u8fd0\u7528\u200b L2 \u200b\u7f13\u5b58\u200b\u80fd\u591f\u200b\u63d0\u901f\u200b\u8fd0\u7b97\u200b\u3002A100 \u200b\u7684\u200b L2 \u200b\u7f13\u5b58\u200b\u80fd\u591f\u200b\u8bbe\u7f6e\u200b\u81f3\u591a\u200b 40MB \u200b\u7684\u200b\u6301\u7eed\u200b\u5316\u200b\u6570\u636e\u200b (persistent data)\uff0c\u200b\u80fd\u591f\u200b\u62c9\u5347\u200b\u7b97\u5b50\u200b kernel \u200b\u7684\u200b\u5e26\u5bbd\u200b\u548c\u200b\u6027\u80fd\u200b\u3002Flash attention \u200b\u7684\u200b\u601d\u8def\u200b\u5c31\u662f\u200b\u5c3d\u53ef\u80fd\u200b\u5730\u200b\u5229\u7528\u200b L2 \u200b\u7f13\u5b58\u200b\uff0c\u200b\u51cf\u5c11\u200b HBM \u200b\u7684\u200b\u6570\u636e\u200b\u8bfb\u5199\u200b\u65f6\u95f4\u200b\u3002</p> <p>\u200b\u5728\u200b\u56fe\u5f62\u200b\u5904\u7406\u5668\u200b\uff08GPU\uff09\u200b\u4e2d\u200b\uff0c\u200b\u5185\u5b58\u200b\u6280\u672f\u200b\u626e\u6f14\u7740\u200b\u81f3\u5173\u91cd\u8981\u200b\u7684\u200b\u89d2\u8272\u200b\uff0c\u200b\u4e0d\u540c\u200b\u7c7b\u578b\u200b\u7684\u200b\u5185\u5b58\u200b\uff08DRAM\u3001HBM\u3001SRAM\uff09\u200b\u5404\u6709\u200b\u5176\u200b\u7279\u5b9a\u200b\u7684\u200b\u7528\u9014\u200b\u548c\u200b\u4f18\u52bf\u200b\u3002\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u5bf9\u200b\u8fd9\u4e9b\u200b\u5185\u200b\u5b58\u5728\u200bGPU\u200b\u4e2d\u200b\u7684\u200b\u4ecb\u7ecd\u200b\uff1a</p>"},{"location":"weeks/SRAM%E5%92%8CDRAM/#01-dram\u52a8\u6001\u968f\u673a\u5b58\u53d6\u5b58\u50a8\u5668","title":"0.1 DRAM\uff08\u200b\u52a8\u6001\u200b\u968f\u673a\u5b58\u53d6\u200b\u5b58\u50a8\u5668\u200b\uff09","text":"<p>\u200b\u6982\u8ff0\u200b\uff1a DRAM\u200b\u662f\u200b\u4e00\u79cd\u200b\u5e38\u89c1\u200b\u7684\u200b\u534a\u5bfc\u4f53\u5b58\u50a8\u5668\u200b\uff0c\u200b\u5e7f\u6cdb\u200b\u7528\u4e8e\u200b\u7535\u8111\u200b\u3001\u200b\u670d\u52a1\u5668\u200b\u4ee5\u53ca\u200bGPU\u200b\u7b49\u200b\u8bbe\u5907\u200b\u4e2d\u200b\u3002\u200b\u5b83\u200b\u901a\u8fc7\u200b\u5b58\u50a8\u200b\u7535\u8377\u200b\u5728\u200b\u7535\u5bb9\u5668\u200b\u4e2d\u200b\u8868\u793a\u200b\u6570\u636e\u200b\u7684\u200b\u201c0\u201d\u200b\u6216\u200b\u201c1\u201d\u3002</p> <p>\u200b\u5728\u200bGPU\u200b\u4e2d\u200b\u7684\u200b\u5e94\u7528\u200b\uff1a</p> <ul> <li>\u200b\u663e\u5b58\u200b\uff08VRAM\uff09\uff1a\u00a0GPU\u200b\u4f7f\u7528\u200bDRAM\u200b\u4f5c\u4e3a\u200b\u663e\u5b58\u200b\uff0c\u200b\u7528\u4e8e\u200b\u5b58\u50a8\u200b\u56fe\u5f62\u200b\u6570\u636e\u200b\u3001\u200b\u7eb9\u7406\u200b\u3001\u200b\u5e27\u200b\u7f13\u51b2\u533a\u200b\u7b49\u200b\u3002</li> <li>\u200b\u5bb9\u91cf\u200b\u4f18\u52bf\u200b\uff1a\u00a0DRAM\u200b\u5177\u6709\u200b\u8f83\u200b\u9ad8\u200b\u7684\u200b\u5b58\u50a8\u5bc6\u5ea6\u200b\uff0c\u200b\u80fd\u591f\u200b\u63d0\u4f9b\u200b\u5927\u91cf\u200b\u7684\u200b\u5185\u5b58\u5bb9\u91cf\u200b\uff0c\u200b\u9002\u5408\u200b\u9700\u8981\u200b\u5904\u7406\u200b\u590d\u6742\u200b\u56fe\u5f62\u200b\u548c\u200b\u9ad8\u5206\u8fa8\u7387\u200b\u7684\u200b\u5e94\u7528\u200b\u573a\u666f\u200b\u3002</li> </ul> <p>\u200b\u7279\u70b9\u200b\uff1a</p> <ul> <li>\u200b\u9ad8\u5bb9\u91cf\u200b\uff1a\u00a0DRAM\u200b\u53ef\u4ee5\u200b\u5728\u200b\u8f83\u200b\u5c0f\u200b\u7684\u200b\u7269\u7406\u200b\u7a7a\u95f4\u200b\u5185\u200b\u5b58\u50a8\u200b\u5927\u91cf\u200b\u6570\u636e\u200b\u3002</li> <li>\u200b\u76f8\u5bf9\u200b\u8f83\u200b\u4f4e\u200b\u7684\u200b\u6210\u672c\u200b\uff1a\u00a0\u200b\u4e0e\u200b\u5176\u4ed6\u200b\u7c7b\u578b\u200b\u7684\u200b\u5185\u5b58\u200b\uff08\u200b\u5982\u200bSRAM\u3001HBM\uff09\u200b\u76f8\u6bd4\u200b\uff0cDRAM\u200b\u7684\u200b\u5355\u4f4d\u200b\u5b58\u50a8\u200b\u6210\u672c\u200b\u8f83\u200b\u4f4e\u200b\u3002</li> <li>\u200b\u8f83\u200b\u9ad8\u200b\u7684\u200b\u5ef6\u8fdf\u200b\u548c\u200b\u8f83\u200b\u4f4e\u200b\u7684\u200b\u5e26\u5bbd\u200b\uff1a\u00a0\u200b\u867d\u7136\u200b\u5bb9\u91cf\u200b\u5927\u200b\uff0c\u200b\u4f46\u200bDRAM\u200b\u7684\u200b\u8bbf\u95ee\u901f\u5ea6\u200b\u8f83\u6162\u200b\uff0c\u200b\u5e26\u5bbd\u200b\u4e5f\u200b\u4e0d\u53ca\u200bHBM\uff0c\u200b\u53ef\u80fd\u200b\u6210\u4e3a\u200b\u9ad8\u6027\u80fd\u200bGPU\u200b\u7684\u200b\u74f6\u9888\u200b\u3002</li> </ul>"},{"location":"weeks/SRAM%E5%92%8CDRAM/#02-hbm\u9ad8\u5e26\u5bbd\u5185\u5b58","title":"0.2 HBM\uff08\u200b\u9ad8\u5e26\u5bbd\u200b\u5185\u5b58\u200b\uff09","text":"<p>\u200b\u6982\u8ff0\u200b\uff1a HBM\u200b\u662f\u200b\u4e00\u79cd\u200b3D\u200b\u5c01\u88c5\u200b\u7684\u200b\u5185\u5b58\u200b\u6280\u672f\u200b\uff0c\u200b\u65e8\u5728\u200b\u63d0\u4f9b\u200b\u6bd4\u200b\u4f20\u7edf\u200bGDDR\uff08\u200b\u56fe\u5f62\u200b\u53cc\u500d\u200b\u6570\u636e\u200b\u901f\u7387\u200b\uff09\u200b\u5185\u5b58\u200b\u66f4\u200b\u9ad8\u200b\u7684\u200b\u5e26\u5bbd\u200b\u548c\u200b\u66f4\u200b\u4f4e\u200b\u7684\u200b\u529f\u8017\u200b\u3002\u200b\u5b83\u200b\u901a\u8fc7\u200b\u5c06\u200b\u591a\u5c42\u200b\u5185\u5b58\u200b\u5806\u53e0\u200b\u5e76\u200b\u4e0e\u200bGPU\u200b\u901a\u8fc7\u200b\u5bbd\u200b\u63a5\u53e3\u200b\uff08\u200b\u901a\u5e38\u200b\u4e3a\u200b\u5806\u53e0\u200b\u7684\u200b\u7845\u200b\u901a\u5b54\u200b\uff0cTSV\uff09\u200b\u8fde\u63a5\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u9ad8\u6548\u200b\u7684\u200b\u6570\u636e\u4f20\u8f93\u200b\u3002</p> <p>\u200b\u5728\u200bGPU\u200b\u4e2d\u200b\u7684\u200b\u5e94\u7528\u200b\uff1a</p> <ul> <li>\u200b\u9ad8\u6027\u80fd\u200b\u663e\u5361\u200b\uff1a\u00a0HBM\u200b\u4e3b\u8981\u200b\u7528\u4e8e\u200b\u9ad8\u7aef\u200b\u663e\u5361\u200b\u548c\u200b\u4e13\u4e1a\u200bGPU\uff0c\u200b\u5982\u200b\u7528\u4e8e\u200b\u6df1\u5ea6\u200b\u5b66\u4e60\u200b\u3001\u200b\u79d1\u5b66\u8ba1\u7b97\u200b\u7b49\u200b\u9700\u8981\u200b\u5de8\u5927\u200b\u5185\u5b58\u200b\u5e26\u5bbd\u200b\u7684\u200b\u5e94\u7528\u200b\u3002</li> <li>\u200b\u96c6\u6210\u200b\u65b9\u6848\u200b\uff1a\u00a0\u200b\u7531\u4e8e\u200b\u5176\u200b\u7d27\u51d1\u200b\u7684\u200b\u5c01\u88c5\u200b\uff0cHBM\u200b\u9002\u5408\u200b\u7528\u4e8e\u200b\u9700\u8981\u200b\u8282\u7701\u200b\u7a7a\u95f4\u200b\u7684\u200b\u96c6\u6210\u200b\u8bbe\u8ba1\u200b\uff0c\u200b\u5982\u200b\u4e00\u4e9b\u200b\u79fb\u52a8\u200b\u8bbe\u5907\u200b\u548c\u200b\u9ad8\u6027\u80fd\u200b\u8ba1\u7b97\u200b\u52a0\u901f\u5668\u200b\u3002</li> </ul> <p>\u200b\u7279\u70b9\u200b\uff1a</p> <ul> <li>\u200b\u9ad8\u5e26\u5bbd\u200b\uff1a\u00a0HBM\u200b\u80fd\u591f\u200b\u63d0\u4f9b\u200b\u6781\u9ad8\u200b\u7684\u200b\u6570\u636e\u200b\u4f20\u8f93\u901f\u7387\u200b\uff0c\u200b\u901a\u5e38\u200b\u6bd4\u200b\u4f20\u7edf\u200bGDDR\u200b\u5185\u5b58\u200b\u9ad8\u51fa\u200b\u6570\u500d\u200b\uff0c\u200b\u6781\u5927\u200b\u5730\u200b\u63d0\u5347\u200b\u4e86\u200bGPU\u200b\u7684\u200b\u5e76\u884c\u5904\u7406\u200b\u80fd\u529b\u200b\u3002</li> <li>\u200b\u4f4e\u529f\u8017\u200b\uff1a\u00a0HBM\u200b\u901a\u8fc7\u200b\u77ed\u8ddd\u79bb\u200b\u9ad8\u5bc6\u5ea6\u200b\u7684\u200b\u8fde\u63a5\u200b\uff0c\u200b\u51cf\u5c11\u200b\u4e86\u200b\u5ef6\u8fdf\u200b\u548c\u200b\u80fd\u8017\u200b\uff0c\u200b\u63d0\u9ad8\u200b\u80fd\u6548\u200b\u6bd4\u200b\u3002</li> <li>\u200b\u7d27\u51d1\u200b\u5c01\u88c5\u200b\uff1a\u00a03D\u200b\u5806\u53e0\u200b\u8bbe\u8ba1\u200b\u4f7f\u5f97\u200b\u5185\u5b58\u200b\u5360\u7528\u200b\u7a7a\u95f4\u200b\u66f4\u200b\u5c0f\u200b\uff0c\u200b\u6709\u52a9\u4e8e\u200b\u8bbe\u8ba1\u200b\u66f4\u52a0\u200b\u7d27\u51d1\u200b\u548c\u200b\u9ad8\u6548\u200b\u7684\u200bGPU\u3002</li> </ul>"},{"location":"weeks/SRAM%E5%92%8CDRAM/#03-sram\u9759\u6001\u968f\u673a\u5b58\u53d6\u5b58\u50a8\u5668","title":"0.3 SRAM\uff08\u200b\u9759\u6001\u200b\u968f\u673a\u5b58\u53d6\u200b\u5b58\u50a8\u5668\u200b\uff09","text":"<p>\u200b\u6982\u8ff0\u200b\uff1a SRAM\u200b\u662f\u200b\u4e00\u79cd\u200b\u5feb\u901f\u200b\u4e14\u200b\u7a33\u5b9a\u200b\u7684\u200b\u5b58\u50a8\u5668\u200b\uff0c\u200b\u901a\u8fc7\u200b\u4f7f\u7528\u200b\u591a\u4e2a\u200b\u6676\u4f53\u7ba1\u200b\u4fdd\u6301\u200b\u4e00\u4e2a\u200b\u4f4d\u200b\u7684\u200b\u72b6\u6001\u200b\uff0c\u200b\u4e0d\u200b\u9700\u8981\u200b\u5468\u671f\u6027\u200b\u5237\u65b0\u200b\u7535\u8377\u200b\uff0c\u200b\u56e0\u6b64\u200b\u79f0\u4e3a\u200b\u201c\u200b\u9759\u6001\u200b\u201d\u3002\u200b\u5b83\u200b\u76f8\u6bd4\u200bDRAM\u200b\u5177\u6709\u200b\u66f4\u5feb\u200b\u7684\u200b\u8bbf\u95ee\u901f\u5ea6\u200b\uff0c\u200b\u4f46\u200b\u5b58\u50a8\u5bc6\u5ea6\u200b\u8f83\u200b\u4f4e\u4e14\u200b\u6210\u672c\u200b\u8f83\u200b\u9ad8\u200b\u3002</p> <p>\u200b\u5728\u200bGPU\u200b\u4e2d\u200b\u7684\u200b\u5e94\u7528\u200b\uff1a</p> <ul> <li>\u200b\u7f13\u5b58\u200b\u5c42\u7ea7\u200b\uff1a\u00a0SRAM\u200b\u4e3b\u8981\u200b\u7528\u4e8e\u200bGPU\u200b\u5185\u90e8\u200b\u7684\u200b\u7f13\u5b58\u200b\u7cfb\u7edf\u200b\uff0c\u200b\u5982\u200bL1\u200b\u7f13\u5b58\u200b\u3001L2\u200b\u7f13\u5b58\u200b\u7b49\u200b\uff0c\u200b\u7528\u4e8e\u200b\u52a0\u901f\u200b\u6570\u636e\u200b\u8bbf\u95ee\u200b\uff0c\u200b\u63d0\u9ad8\u200b\u6574\u4f53\u200b\u6027\u80fd\u200b\u3002</li> <li>\u200b\u5bc4\u5b58\u5668\u200b\u6587\u4ef6\u200b\uff1a\u00a0GPU\u200b\u7684\u200b\u8ba1\u7b97\u200b\u5355\u5143\u200b\u4e2d\u200b\u4f7f\u7528\u200bSRAM\u200b\u4f5c\u4e3a\u200b\u5bc4\u5b58\u5668\u200b\u6587\u4ef6\u200b\uff0c\u200b\u4ee5\u200b\u5b9e\u73b0\u200b\u5feb\u901f\u200b\u7684\u200b\u6570\u636e\u200b\u8bfb\u5199\u64cd\u4f5c\u200b\u3002</li> <li>\u200b\u7247\u4e0a\u200b\u8d44\u6e90\u200b\uff1a\u00a0\u200b\u7531\u4e8e\u200bSRAM\u200b\u901f\u5ea6\u200b\u5feb\u200b\uff0c\u200b\u9002\u5408\u200b\u4f5c\u4e3a\u200b\u7247\u4e0a\u200b\u9ad8\u901f\u7f13\u5b58\u200b\uff0c\u200b\u51cf\u5c11\u200b\u4e0e\u200b\u4e3b\u200b\u663e\u5b58\u200b\uff08DRAM/HBM\uff09\u200b\u7684\u200b\u6570\u636e\u4ea4\u6362\u200b\u5ef6\u8fdf\u200b\u3002</li> </ul> <p>\u200b\u7279\u70b9\u200b\uff1a</p> <ul> <li>\u200b\u9ad8\u901f\u200b\u8bbf\u95ee\u200b\uff1a\u00a0SRAM\u200b\u5177\u6709\u200b\u6781\u4f4e\u200b\u7684\u200b\u5ef6\u8fdf\u200b\u548c\u200b\u9ad8\u200b\u6570\u636e\u200b\u4f20\u8f93\u901f\u7387\u200b\uff0c\u200b\u662f\u200b\u7f13\u5b58\u200b\u8bbe\u8ba1\u200b\u7684\u200b\u7406\u60f3\u200b\u9009\u62e9\u200b\u3002</li> <li>\u200b\u8f83\u200b\u4f4e\u200b\u7684\u200b\u5bc6\u5ea6\u200b\u548c\u200b\u8f83\u200b\u9ad8\u200b\u7684\u200b\u6210\u672c\u200b\uff1a\u00a0\u200b\u76f8\u6bd4\u200bDRAM\uff0cSRAM\u200b\u9700\u8981\u200b\u66f4\u200b\u591a\u200b\u7684\u200b\u6676\u4f53\u7ba1\u200b\u6765\u200b\u5b58\u50a8\u200b\u6bcf\u200b\u4e00\u4f4d\u200b\u6570\u636e\u200b\uff0c\u200b\u56e0\u6b64\u200b\u5b58\u50a8\u5bc6\u5ea6\u200b\u8f83\u200b\u4f4e\u200b\uff0c\u200b\u6210\u672c\u200b\u8f83\u200b\u9ad8\u200b\u3002</li> <li>\u200b\u7a33\u5b9a\u6027\u200b\uff1a\u00a0\u200b\u4e0d\u200b\u9700\u8981\u200b\u5237\u65b0\u5468\u671f\u200b\uff0c\u200b\u6570\u636e\u200b\u4fdd\u6301\u200b\u66f4\u52a0\u200b\u7a33\u5b9a\u200b\uff0c\u200b\u9002\u5408\u200b\u7528\u4e8e\u200b\u9ad8\u901f\u7f13\u5b58\u200b\u548c\u200b\u5b9e\u65f6\u200b\u8ba1\u7b97\u200b\u9700\u6c42\u200b\u3002</li> </ul>"},{"location":"weeks/SRAM%E5%92%8CDRAM/#04-\u603b\u7ed3","title":"0.4 \u200b\u603b\u7ed3","text":"<p>\u200b\u5728\u200bGPU\u200b\u8bbe\u8ba1\u200b\u4e2d\u200b\uff0cDRAM\u3001HBM\u200b\u548c\u200bSRAM\u200b\u5404\u81ea\u200b\u53d1\u6325\u200b\u7740\u200b\u4e0d\u540c\u200b\u7684\u200b\u4f5c\u7528\u200b\uff1a</p> <ul> <li>DRAM\u00a0\u200b\u63d0\u4f9b\u200b\u5927\u91cf\u200b\u7684\u200b\u663e\u5b58\u200b\u5bb9\u91cf\u200b\uff0c\u200b\u9002\u7528\u200b\u4e8e\u200b\u5b58\u50a8\u200b\u590d\u6742\u200b\u56fe\u5f62\u200b\u548c\u200b\u5927\u89c4\u6a21\u200b\u6570\u636e\u200b\uff0c\u200b\u4f46\u200b\u5e26\u5bbd\u200b\u548c\u200b\u5ef6\u8fdf\u200b\u65b9\u9762\u200b\u5b58\u5728\u200b\u9650\u5236\u200b\u3002</li> <li>HBM\u00a0\u200b\u901a\u8fc7\u200b\u9ad8\u5e26\u5bbd\u200b\u548c\u200b\u4f4e\u529f\u8017\u200b\u7684\u200b\u7279\u6027\u200b\uff0c\u200b\u63d0\u5347\u200b\u4e86\u200bGPU\u200b\u7684\u200b\u6574\u4f53\u200b\u6027\u80fd\u200b\uff0c\u200b\u7279\u522b\u200b\u9002\u7528\u200b\u4e8e\u9ad8\u7aef\u200b\u548c\u200b\u4e13\u4e1a\u200b\u5e94\u7528\u200b\u573a\u666f\u200b\u3002</li> <li>SRAM\u00a0\u200b\u5219\u200b\u4f5c\u4e3a\u200b\u7f13\u5b58\u200b\u548c\u200b\u5bc4\u5b58\u5668\u200b\u6587\u4ef6\u200b\uff0c\u200b\u63d0\u4f9b\u200b\u9ad8\u901f\u200b\u7684\u200b\u6570\u636e\u200b\u8bbf\u95ee\u200b\uff0c\u200b\u51cf\u5c11\u200b\u5ef6\u8fdf\u200b\uff0c\u200b\u63d0\u5347\u200b\u8ba1\u7b97\u200b\u6548\u7387\u200b\u3002</li> </ul> <p>\u200b\u901a\u8fc7\u200b\u5408\u7406\u200b\u7ed3\u5408\u200b\u8fd9\u200b\u4e09\u79cd\u200b\u5185\u5b58\u200b\u6280\u672f\u200b\uff0c\u200b\u73b0\u4ee3\u200bGPU\u200b\u80fd\u591f\u200b\u5728\u200b\u6027\u80fd\u200b\u3001\u200b\u5bb9\u91cf\u200b\u548c\u200b\u529f\u8017\u200b\u4e4b\u95f4\u200b\u5b9e\u73b0\u200b\u5e73\u8861\u200b\uff0c\u200b\u6ee1\u8db3\u200b\u5404\u79cd\u200b\u56fe\u5f62\u5904\u7406\u200b\u548c\u200b\u8ba1\u7b97\u200b\u9700\u6c42\u200b\u3002</p> <p>\u200b\u4e86\u89e3\u200bGPU\u200b\u7684\u200b\u786c\u4ef6\u200b\u77e5\u8bc6\u200b\u662f\u200b\u76f8\u5f53\u200b\u91cd\u8981\u200b\u7684\u200b\uff0c\u200b\u6bd4\u5982\u200b\u5728\u200b\u8fdb\u884c\u200bTP\u200b\u5e76\u884c\u200b\u65f6\u200b\uff0c\u200b\u9700\u8981\u200b\u5c06\u200b\u6570\u636e\u200b\u5206\u6563\u200b\u5230\u200b\u591a\u4e2a\u200b\u8bbe\u5907\u200b\u8fdb\u884c\u200b\u8ba1\u7b97\u200b\uff0c\u200b\u56e0\u6b64\u200b\u8981\u6c42\u200bGPU\u200b\u4e4b\u95f4\u200b\u662f\u200b\u4e92\u8054\u200b\u7684\u200b\u3002 https://zhuanlan.zhihu.com/p/603908668</p> <p>GPU\u200b\u7684\u200b\u8fde\u63a5\u200b\u65b9\u5f0f\u200b\u53ef\u80fd\u200b\u662f\u200b\u5168\u200b\u8fde\u63a5\u200b\uff08\u200b\u901a\u8fc7\u200bNVLINK\u200b\u8fde\u63a5\u200b\uff0c\u200b\u76f8\u6bd4\u200bPCIE\u200b\u66f4\u200b\u9ad8\u901f\u200b\uff09\uff0c\u200b\u53ef\u80fd\u200b\u662f\u200b\u90e8\u5206\u200b\u8fde\u63a5\u200b\uff08\u200b\u90e8\u5206\u200bNVLINK\uff0c\u200b\u90e8\u5206\u200bPCIE\uff09\u3002</p> <p>\u200b\u77e9\u9635\u200b\u4e58\u6cd5\u200b\uff0c\u200b\u6bd4\u5982\u200bA@B\uff0c\u200b\u53ef\u4ee5\u200b\u5c06\u200bA\u200b\u6309\u7167\u200b\u884c\u200b\u5206\u6210\u200b\u591a\u4e2a\u200b\u77e9\u9635\u200b\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u5c06\u200bB\u200b\u6309\u7167\u200b\u5217\u200b\u5206\u6210\u200b\u591a\u4e2a\u200b\u77e9\u9635\u200b\u3002\u200b\u7136\u540e\u200b\u5206\u522b\u200b\u8ba1\u7b97\u200b\uff0c\u200b\u518d\u200bGather\u200b\u6570\u636e\u200b\u5408\u5e76\u200b\u6210\u200b\u6700\u7ec8\u200b\u7ed3\u679c\u200b\u3002</p> <p>\u200b\u4f7f\u7528\u200b PyTorch \u200b\u5728\u200b\u591a\u4e2a\u200b\u8bbe\u5907\u200b\uff08\u200b\u5982\u200b GPU\uff09\u200b\u4e0a\u200b\u8fdb\u884c\u200b\u77e9\u9635\u200b\u8ba1\u7b97\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u6a21\u578b\u200b\u5e76\u884c\u200b\uff08\u200b\u800c\u200b\u4e0d\u662f\u200b\u6570\u636e\u200b\u5e76\u884c\u200b\uff09\u200b\u7684\u200b\u65b9\u5f0f\u200b\u5b9e\u73b0\u200b\u3002\u200b\u8fd9\u200b\u6d89\u53ca\u200b\u5c06\u200b\u77e9\u9635\u200b\u62c6\u5206\u200b\u5230\u200b\u591a\u4e2a\u200b\u8bbe\u5907\u200b\u4e0a\u200b\u8fdb\u884c\u200b\u90e8\u5206\u200b\u8ba1\u7b97\u200b\uff0c\u200b\u7136\u540e\u200b\u6c47\u603b\u200b\u7ed3\u679c\u200b\u3002\u200b\u672c\u200b\u793a\u4f8b\u200b\u5c06\u200b\u5c55\u793a\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b PyTorch \u200b\u5728\u200b\u591a\u200b GPU \u200b\u4e0a\u200b\u62c6\u5206\u200b\u77e9\u9635\u200b\u4e58\u6cd5\u200b\u5e76\u200b\u8fdb\u884c\u200b\u5408\u5e76\u200b\u64cd\u4f5c\u200b\u3002</p> <p>\u200b\u5047\u8bbe\u200b\u6211\u4eec\u200b\u6709\u200b\u4e24\u5927\u200b\u77e9\u9635\u200b A \u200b\u548c\u200b B\uff0c\u200b\u5e0c\u671b\u200b\u5c06\u200b\u5b83\u4eec\u200b\u7684\u200b\u4e58\u6cd5\u200b\u7ed3\u679c\u200b\u62c6\u5206\u200b\u5230\u200b\u4e24\u4e2a\u200b GPU \u200b\u4e0a\u200b\u8fdb\u884c\u200b\u8ba1\u7b97\u200b\uff1a </p>Python<pre><code>import torch\n\nimport time\n\n# \u200b\u68c0\u67e5\u200b\u662f\u5426\u200b\u6709\u200b\u591a\u4e2a\u200b GPU \u200b\u53ef\u7528\u200b\nif torch.cuda.device_count() &lt; 2:\nraise RuntimeError(\"This script requires at least 2 GPUs.\")\n\n# \u200b\u8bbe\u7f6e\u200b\u8bbe\u5907\u200b\ndevice0 = torch.device('cuda:0')\ndevice1 = torch.device('cuda:1')\n\n# \u200b\u521b\u5efa\u200b\u4e24\u4e2a\u200b\u5927\u200b\u7684\u200b\u77e9\u9635\u200b\n\nn = 2000 # \u200b\u4e3a\u4e86\u200b\u66f4\u597d\u200b\u7684\u200b\u5c55\u793a\u200b\u6548\u679c\u200b\uff0c\u200b\u9009\u62e9\u200b\u8f83\u5927\u200b\u7684\u200b\u5c3a\u5bf8\u200b\n\nA = torch.rand((n, n), device=device0)\n\nB = torch.rand((n, n), device=device1)\n\n\n# \u200b\u5c06\u200b B \u200b\u5206\u5757\u200b\u5230\u200b\u4e0d\u540c\u200b\u7684\u200b\u8bbe\u5907\u200b\u4e0a\u200b\n\nB1 = B[:, :n//2].to(device0)\n\nB2 = B[:, n//2:].to(device1)\n\n# \u200b\u4e3a\u200b\u7ed3\u679c\u200b\u77e9\u9635\u200b\u4fdd\u7559\u7a7a\u95f4\u200b\n\nC1 = torch.zeros((n, n//2), device=device0)\n\nC2 = torch.zeros((n, n//2), device=device1)\n\n# \u200b\u8bb0\u5f55\u200b\u5f00\u59cb\u200b\u65f6\u95f4\u200b\n\nstart_time = time.time()\n\n# \u200b\u5206\u5757\u200b\u77e9\u9635\u200b\u4e58\u6cd5\u200b\uff0c\u200b\u8ba1\u7b97\u200b A * B1 \u200b\u548c\u200b A * B2 \u200b\u5206\u522b\u200b\u5728\u200b\u4e24\u5757\u200b GPU \u200b\u4e0a\u200b\n\nC1 = torch.matmul(A, B1)\n\nC2 = torch.matmul(A.to(device1), B2)\n\n# \u200b\u6c47\u603b\u200b\u7ed3\u679c\u200b\u5230\u200b\u5355\u4e00\u200b\u8bbe\u5907\u200b\u4e0a\u200b\n\nC_full = torch.cat((C1, C2.to(device0)), dim=1)\n\n# \u200b\u8bb0\u5f55\u200b\u7ed3\u675f\u200b\u65f6\u95f4\u200b\n\ntorch.cuda.synchronize() # \u200b\u786e\u4fdd\u200b\u6240\u6709\u200bGPU\u200b\u8ba1\u7b97\u200b\u4efb\u52a1\u200b\u5b8c\u6210\u200b\n\nend_time = time.time()\n\nprint(f\"Multi-GPU computation time: {end_time - start_time:.6f} seconds\")\n</code></pre><p></p> <p>\u200b\u5206\u5e03\u5f0f\u200b\u5e76\u884c\u8ba1\u7b97\u200b\u4e2d\u200b\uff0call-gather\u200b\u548c\u200ball-reduce\u200b\u7684\u200b\u533a\u522b\u200b\uff1f \u200b\u56fe\u200b\uff1a Guide_Laboratory_NCCL_MPI_Collective_Operations_english-2021@muriloboratto.pdf</p> Bash<pre><code>\u200b\u5047\u8bbe\u200b\u6709\u200b\u4e09\u4e2a\u200b\u8282\u70b9\u200b A, B, C\uff1a - \u200b\u521d\u59cb\u72b6\u6001\u200b\uff1aA=[1], B=[2], C=[3] - All-Gather \u200b\u540e\u200b\uff1aA=[1,2,3], B=[1,2,3], C=[1,2,3]\n</code></pre> Bash<pre><code>\u200b\u5047\u8bbe\u200b\u6709\u200b\u4e09\u4e2a\u200b\u8282\u70b9\u200b A, B, C\uff1a\n- \u200b\u521d\u59cb\u72b6\u6001\u200b\uff1aA=[1], B=[2], C=[3]\n- All-Reduce\uff08\u200b\u52a0\u6cd5\u200b\uff09\u200b\u540e\u200b\uff1aA=[6], B=[6], C=[6] (\u200b\u56e0\u4e3a\u200b 1 + 2 + 3 = 6)\n</code></pre> <p>\u200b\u53c2\u8003\u200b\uff1a https://medium.com/@sachinkalsi/flashattention-understanding-gpu-architecture-part-1-0a8a9a0bb725</p> <p>https://zhuanlan.zhihu.com/p/462191421</p> <p>https://www.cnblogs.com/ArsenalfanInECNU/p/18021724</p> <p>https://zhuanlan.zhihu.com/p/638468472</p> <p>https://docs.nvidia.com/deeplearning/nccl/user-guide/docs/usage/collectives.html</p> <p>https://docs.nvidia.com/deeplearning/performance/dl-performance-gpu-background/index.html</p>"},{"location":"weeks/babylon%E5%B7%B4%E6%AF%94%E4%BC%A6%E7%9A%84%E5%B7%A5%E7%A8%8B%E5%B8%88/","title":"c++\u200b\u5f00\u6e90\u200b\u5e93\u200b\u548c\u200b\u6587\u7ae0\u200b\u5206\u4eab","text":""},{"location":"weeks/babylon%E5%B7%B4%E6%AF%94%E4%BC%A6%E7%9A%84%E5%B7%A5%E7%A8%8B%E5%B8%88/#c\u5f00\u6e90\u5e93\u548c\u6587\u7ae0\u5206\u4eab","title":"c++\u200b\u5f00\u6e90\u200b\u5e93\u200b\u548c\u200b\u6587\u7ae0\u200b\u5206\u4eab","text":"<p>\u200b\u5206\u4eab\u200b\u4e00\u4e9b\u200b\u9047\u5230\u200b\u7684\u200b\u5f00\u6e90\u200b\u8d44\u6599\u200b\uff0c\u200b\u6709\u200b\u5174\u8da3\u200b\u53ef\u4ee5\u200b\u5b66\u4e60\u200b\u54c8\u200b\uff01\uff01\uff01</p> <p>\u200b\u5df4\u6bd4\u4f26\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5bcc\u9976\u200b\u7684\u200b\u738b\u56fd\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u6709\u200b\u53d6\u4e4b\u4e0d\u5c3d\u200b\u7684\u200b\u8d22\u5bcc\u200b\u2026</p> <ul> <li> <p>taskflow/taskflow, \u200b\u6709\u200b\u5411\u200b\u65e0\u200b\u73af\u56fe\u200b\u5e76\u884c\u4efb\u52a1\u200b\u6d41\u200b\u6846\u67b6\u200b\uff0c\u200b\u652f\u6301\u200b\u5206\u652f\u200b\u5224\u65ad\u200b\u7b49\u200b\u3002</p> </li> <li> <p>kungfu-origin/kungfu, \u200b\u91cf\u5316\u200b\u9886\u57df\u200b\u9ad8\u6027\u80fd\u200b\u8ba1\u7b97\u200b\u6846\u67b6\u200b</p> </li> <li> <p>baidu/babylon, \u200b\u767e\u5ea6\u200bbabylon\u200b\u9ad8\u6027\u80fd\u200bc++\u200b\u5e93\u200b\u3002 \u200b\u63a8\u8350\u200b\u4e24\u7bc7\u200b\u9ad8\u8d28\u91cf\u200b\u6587\u7ae0\u200b\uff0c \u200b\u767e\u5ea6\u200bC++\u200b\u5de5\u7a0b\u5e08\u200b\u7684\u200b\u90a3\u4e9b\u200b\u6781\u9650\u200b\u4f18\u5316\u200b\uff08\u200b\u5185\u5b58\u200b\u7bc7\u200b\uff09\u3001\u200b\u767e\u5ea6\u200bC++\u200b\u5de5\u7a0b\u5e08\u200b\u7684\u200b\u90a3\u4e9b\u200b\u6781\u9650\u200b\u4f18\u5316\u200b\uff08\u200b\u5e76\u53d1\u200b\u7bc7\u200b\uff09</p> </li> </ul> <p>\u200b\u5df4\u6bd4\u4f26\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5bcc\u9976\u200b\u7684\u200b\u738b\u56fd\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u6709\u200b\u53d6\u4e4b\u4e0d\u5c3d\u200b\u7684\u200b\u8d22\u5bcc\u200b  \u200b\u5df4\u6bd4\u4f26\u200b\u7684\u200b\u4eba\u4eec\u200b\u7528\u200b\u7740\u200b\u540c\u6837\u200b\u7684\u200b\u8bed\u8a00\u200b\u6c9f\u901a\u200b\uff0c\u200b\u4fee\u5efa\u200b\u53ef\u4ee5\u200b\u901a\u5929\u200b\u7684\u200b\u5df4\u6bd4\u4f26\u200b\u5854\u200b \u200b\u5df4\u6bd4\u4f26\u200b\u662f\u200b\u6587\u660e\u200b\u7684\u200b\u53d1\u6e90\u5730\u200b\uff0c\u200b\u5f02\u5f69\u7eb7\u5448\u200b\u7684\u200b\u4e16\u754c\u200b\u90fd\u200b\u662f\u4ece\u200b\u8fd9\u91cc\u200b\u8fc8\u51fa\u200b\u4e86\u200b\u7b2c\u4e00\u6b65\u200b \u200b\u5df4\u6bd4\u4f26\u200b\u7684\u200b\u5de5\u7a0b\u5e08\u200b\uff0c\u200b\u63a2\u5bfb\u200b\u7740\u200b\u552f\u4e00\u200b\u7684\u200b\u6700\u4f18\u200b\u7f16\u7801\u200b\u6280\u5de7\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u4e30\u5bcc\u200b\u7684\u200b\u4ee3\u7801\u200b\u7ec4\u4ef6\u200b\uff0c\u200b\u6210\u4e3a\u200b\u5960\u5b9a\u200b\u4f18\u96c5\u200b\u9ad8\u6548\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u57fa\u77f3\u200b</p> <ul> <li>bthread\u200b\u548c\u200bbrpc\u200b\u5e93\u200b\u4e5f\u200b\u503c\u5f97\u200b\u5b66\u4e60\u200b</li> </ul>"},{"location":"weeks/base64%E5%8E%9F%E7%90%86/","title":"Base64\u200b\u539f\u7406","text":"<p>\u200b\u5728\u200b\u4f7f\u7528\u200bbase64\u200b\u5e93\u200b\u89e3\u7801\u200b\u65f6\u200b\uff0c\u200b\u7f51\u7edc\u200b\u4f20\u8f93\u200b\u7b49\u200b\u6536\u5230\u200b\u7684\u200bencode_str\u200b\u53ef\u80fd\u200b\u6709\u200b\u95ee\u9898\u200b\uff0c\u200b\u6240\u4ee5\u200b\u9700\u8981\u200b\u6355\u83b7\u200b\u5f02\u5e38\u200b\uff0ctry catch decode\u200b\u51fd\u6570\u200b\u3002</p> <p>Base64\u200b\u662f\u200b\u4e00\u79cd\u200b\u7528\u200b64\u200b\u4e2a\u5b57\u7b26\u200b\u8868\u793a\u200b\u4efb\u610f\u200b\u4e8c\u8fdb\u5236\u200b\u6570\u636e\u200b\u7684\u200b\u7f16\u7801\u65b9\u6cd5\u200b\u3002\u200b\u5176\u200b\u8bbe\u8ba1\u200b\u76ee\u7684\u200b\u662f\u200b\u5728\u200b\u6587\u672c\u200b\u6570\u636e\u200b\u4e2d\u200b\u5b58\u50a8\u200b\u3001\u200b\u5904\u7406\u200b\u548c\u200b\u4f20\u8f93\u200b\u4e8c\u8fdb\u5236\u200b\u6570\u636e\u200b\u3002\u200b\u5b83\u200b\u7ecf\u5e38\u200b\u7528\u4e8e\u200b\u5728\u200b\u4e0d\u200b\u652f\u6301\u200b\u4e8c\u8fdb\u5236\u200b\u6570\u636e\u200b\u7684\u200b\u73af\u5883\u200b\u4e2d\u200b\u8f6c\u6362\u200b\u4e8c\u8fdb\u5236\u200b\u6570\u636e\u200b\uff08\u200b\u4f8b\u5982\u200b\uff0c\u200b\u53d1\u9001\u200b\u7535\u5b50\u90ae\u4ef6\u200b\uff09\uff0c\u200b\u56e0\u4e3a\u200b\u4f20\u7edf\u200b\u7684\u200b\u6587\u672c\u200b\u534f\u8bae\u200b\uff08\u200b\u5982\u200bSMTP\uff09\u200b\u901a\u5e38\u200b\u4e0d\u200b\u652f\u6301\u200b\u539f\u59cb\u200b\u7684\u200b\u4e8c\u8fdb\u5236\u200b\u6570\u636e\u200b\u3002</p> <p>Base64\u200b\u7f16\u7801\u65b9\u6cd5\u200b\u4f7f\u7528\u200b\u4ee5\u4e0b\u200b64\u200b\u4e2a\u5b57\u7b26\u200b\uff1a</p> <p></p>Text Only<pre><code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\n</code></pre> \u200b\u8fd9\u4e9b\u200b\u5b57\u7b26\u200b\u4ee3\u8868\u200b\u4e86\u200b64\u200b\u4e2a\u200b\u53ef\u80fd\u200b\u7684\u200b6\u200b\u4f4d\u200b\u6570\u503c\u200b\uff08\u200b\u4ece\u200b0\u200b\u5230\u200b63\uff09\u3002Base64\u200b\u8fd8\u200b\u4f7f\u7528\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u7279\u6b8a\u200b\u7684\u200b\u586b\u5145\u200b\u5b57\u7b26\u200b\uff08\u200b\u901a\u5e38\u200b\u662f\u200b\u7b49\u200b\u53f7\u200b<code>=</code>\uff09\uff0c\u200b\u7528\u4e8e\u200b\u5728\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u7f16\u7801\u200b\u5757\u200b\u4e0d\u8db3\u200b4\u200b\u4e2a\u5b57\u7b26\u200b\u65f6\u200b\u586b\u5145\u200b\u3002<p></p>"},{"location":"weeks/base64%E5%8E%9F%E7%90%86/#01-base64\u7f16\u7801\u7684\u6b65\u9aa4\u5982\u4e0b","title":"0.1 Base64\u200b\u7f16\u7801\u200b\u7684\u200b\u6b65\u9aa4\u200b\u5982\u4e0b\u200b\uff1a","text":"<ol> <li> <p>\u200b\u5c06\u200b\u4e8c\u8fdb\u5236\u200b\u6570\u636e\u200b\u5206\u6210\u200b3\u200b\u4e2a\u200b\u5b57\u8282\u200b\uff0824\u200b\u4f4d\u200b\uff09\u200b\u7684\u200b\u5757\u200b\u3002\u200b\u5982\u679c\u200b\u6570\u636e\u200b\u7684\u200b\u603b\u957f\u5ea6\u200b\u4e0d\u662f\u200b3\u200b\u7684\u200b\u500d\u6570\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5728\u200b\u672b\u5c3e\u200b\u6dfb\u52a0\u200b\u8db3\u591f\u200b\u7684\u200b\u96f6\u4f4d\u200b\uff08padding\uff09\u200b\u4f7f\u200b\u5176\u200b\u957f\u5ea6\u200b\u6210\u4e3a\u200b3\u200b\u7684\u200b\u500d\u6570\u200b\u3002</p> </li> <li> <p>\u200b\u5c06\u200b\u8fd9\u200b24\u200b\u4f4d\u200b\u6570\u636e\u200b\u5206\u6210\u200b4\u200b\u4e2a\u200b6\u200b\u4f4d\u200b\u7684\u200b\u7ec4\u200b\u3002\u200b\u6bcf\u4e2a\u200b6\u200b\u4f4d\u7ec4\u200b\u73b0\u5728\u200b\u53ef\u4ee5\u200b\u770b\u4f5c\u200b\u662f\u200b\u4e00\u4e2a\u200b0\u200b\u5230\u200b63\u200b\u4e4b\u95f4\u200b\u7684\u200b\u6570\u503c\u200b\u3002</p> </li> <li> <p>\u200b\u5bf9\u5e94\u200b\u6bcf\u4e2a\u200b6\u200b\u4f4d\u200b\u7684\u200b\u6570\u503c\u200b\uff0c\u200b\u4f7f\u7528\u200bBase64\u200b\u5b57\u7b26\u96c6\u200b\u627e\u5230\u200b\u5bf9\u5e94\u200b\u7684\u200b\u5b57\u7b26\u200b\u3002</p> </li> <li> <p>\u200b\u5982\u679c\u200b\u539f\u59cb\u200b\u4e8c\u8fdb\u5236\u200b\u6570\u636e\u200b\u7684\u200b\u957f\u5ea6\u200b\u4e0d\u662f\u200b3\u200b\u7684\u200b\u500d\u6570\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5728\u200b\u7f16\u7801\u200b\u7684\u200b\u7ed3\u679c\u200b\u4e2d\u200b\u76f8\u5e94\u200b\u4f4d\u7f6e\u200b\u4f7f\u7528\u200b<code>=</code>\u200b\u5b57\u7b26\u200b\u8fdb\u884c\u200b\u586b\u5145\u200b\uff0c\u200b\u4ee5\u200b\u4fdd\u8bc1\u200bBase64\u200b\u7f16\u7801\u200b\u7684\u200b\u603b\u957f\u5ea6\u200b\u662f\u200b4\u200b\u7684\u200b\u500d\u6570\u200b\u3002</p> </li> </ol>"},{"location":"weeks/base64%E5%8E%9F%E7%90%86/#02-\u4f8b\u5b50","title":"0.2 \u200b\u4f8b\u5b50\u200b\uff1a","text":"<p>\u200b\u5047\u8bbe\u200b\u6211\u4eec\u200b\u6709\u200b\u4ee5\u4e0b\u200bASCII\u200b\u5b57\u7b26\u4e32\u200b\uff1a\u201cMan\u201d\uff0c\u200b\u5176\u200b\u4e8c\u8fdb\u5236\u200b\u8868\u793a\u200b\u4e3a\u200b\uff1a</p> Text Only<pre><code>'M'        'a'        'n'  \n01001101  01100001  01101110  \n</code></pre> <p>\u200b\u6309\u200b3\u200b\u4e2a\u200b\u5b57\u8282\u200b\u4e00\u7ec4\u200b\uff0c\u200b\u6211\u4eec\u200b\u6709\u200b24\u200b\u4f4d\u200b\u4e8c\u8fdb\u5236\u200b\u6570\u636e\u200b\uff1a </p>Text Only<pre><code>`010011010110000101101110`\n</code></pre><p></p> <p>\u200b\u5c06\u200b\u8fd9\u200b24\u200b\u4f4d\u200b\u5206\u6210\u200b4\u200b\u7ec4\u200b6\u200b\u4f4d\u200b\u7684\u200b\u4e8c\u8fdb\u5236\u200b\u6570\u200b\uff1a</p> Text Only<pre><code>010011  010110  000101  101110\n</code></pre> <p>\u200b\u5c06\u200b\u8fd9\u4e9b\u200b6\u200b\u4f4d\u200b\u4e8c\u8fdb\u5236\u200b\u6570\u200b\u8f6c\u6362\u6210\u200b\u5341\u8fdb\u5236\u200b\uff1a</p> Text Only<pre><code>19    22    5     46\n</code></pre> <p>\u200b\u627e\u5230\u200b\u8fd9\u4e9b\u200b\u6570\u503c\u200b\u5728\u200bBase64\u200b\u5b57\u7b26\u96c6\u200b\u4e2d\u200b\u5bf9\u5e94\u200b\u7684\u200b\u5b57\u7b26\u200b\uff1a</p> Text Only<pre><code>T     W     F     u\n</code></pre> <p>\u200b\u56e0\u6b64\u200b\uff0c\u201dMan\u201d\u200b\u7ecf\u8fc7\u200bBase64\u200b\u7f16\u7801\u200b\u540e\u200b\u53d8\u4e3a\u200b\uff1a\u201cTWFu\u201d\u3002</p> <p>Base64\u200b\u7f16\u7801\u200b\u662f\u200b\u53ef\u9006\u200b\u7684\u200b\uff0c\u200b\u4e5f\u5c31\u662f\u8bf4\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u4ece\u200bBase64\u200b\u7f16\u7801\u200b\u7684\u200b\u5b57\u7b26\u4e32\u200b\u4e2d\u200b\u6062\u590d\u200b\u539f\u59cb\u200b\u7684\u200b\u4e8c\u8fdb\u5236\u200b\u6570\u636e\u200b\u3002\u200b\u89e3\u7801\u200b\u8fc7\u7a0b\u200b\u5b9e\u9645\u4e0a\u200b\u662f\u200b\u7f16\u7801\u200b\u8fc7\u7a0b\u200b\u7684\u200b\u9006\u200b\u8fc7\u7a0b\u200b\uff1a\u200b\u5c06\u200bBase64\u200b\u5b57\u7b26\u4e32\u200b\u8f6c\u6362\u200b\u56de\u200b\u4e8c\u8fdb\u5236\u200b\u6570\u636e\u200b\uff0c\u200b\u7136\u540e\u200b\u518d\u200b\u5c06\u200b\u4e8c\u8fdb\u5236\u200b\u6570\u636e\u200b\u8f6c\u6362\u200b\u56de\u200b\u539f\u59cb\u200b\u683c\u5f0f\u200b\u3002</p> <p>Base64\u200b\u7f16\u7801\u200b\u7684\u200b\u8f93\u51fa\u200b\u6bd4\u200b\u539f\u59cb\u200b\u4e8c\u8fdb\u5236\u200b\u6570\u636e\u200b\u5927\u7ea6\u200b\u589e\u52a0\u200b\u4e86\u200b33%\uff0c\u200b\u56e0\u4e3a\u200b\u6bcf\u200b3\u200b\u4e2a\u200b\u5b57\u8282\u200b\u7684\u200b\u6570\u636e\u200b\u88ab\u200b\u8f6c\u6362\u6210\u200b\u4e86\u200b4\u200b\u4e2a\u200b\u5b57\u8282\u200b\u7684\u200bBase64\u200b\u5b57\u7b26\u200b\u3002\u200b\u8fd9\u79cd\u200b\u7a7a\u95f4\u200b\u5f00\u9500\u200b\u662f\u200b\u53ef\u200b\u63a5\u53d7\u200b\u7684\u200b\u4ee3\u4ef7\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u80fd\u200b\u5728\u200b\u53ea\u200b\u652f\u6301\u200b\u6587\u672c\u200b\u6570\u636e\u200b\u7684\u200b\u7cfb\u7edf\u200b\u4e2d\u200b\u4f20\u8f93\u200b\u4e8c\u8fdb\u5236\u200b\u6570\u636e\u200b\u3002</p>"},{"location":"weeks/c%2B%2B%E5%8D%95%E6%B5%8B%E8%A6%86%E7%9B%96%E7%8E%87%E8%BF%87%E4%BD%8E/","title":"C++\u200b\u5355\u6d4b\u200b\u8986\u76d6\u7387\u200b\u8fc7\u4f4e","text":"<p>\u200b\u5728\u200b\u4f7f\u7528\u200bgcov + lcov\u200b\u6d4b\u8bd5\u200b\u5206\u652f\u200b\u8986\u76d6\u7387\u200b\u65f6\u200b\uff0c\u200b\u53d1\u73b0\u200b\u58f0\u660e\u200b\u4e00\u4e2a\u200b\u5bf9\u8c61\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u8c03\u7528\u200bvector push_back\u200b\u51fd\u6570\u200b\uff0c\u200b\u90fd\u200b\u4f1a\u200b\u51fa\u73b0\u200b50%\u200b\u7684\u200b\u5206\u652f\u200b\u8986\u76d6\u7387\u200b\uff0c\u200b\u6bd4\u5982\u200b\uff1a</p> C++<pre><code>+ -    Json::Value root;\n\n+ -    Json::Reader reader;\n\n+ -    xxx.push_back(yyy);\n</code></pre> <p>\u200b\u51fa\u73b0\u200b\u8fd9\u79cd\u200b\u95ee\u9898\u200b\uff0c\u200b\u662f\u56e0\u4e3a\u200bexception\u200b\u7684\u200b\u7f18\u6545\u200b\uff0c\u200b\u90a3\u4e48\u200b\u6211\u200b\u4e0d\u200b\u5e0c\u671b\u200b\u901a\u8fc7\u200bexception\u200b\u60c5\u51b5\u200b\u7684\u200b\u5206\u652f\u200b\u8986\u76d6\u7387\u200b\u6709\u200b\u4ee5\u4e0b\u200b\u51e0\u79cd\u200b\u65b9\u5f0f\u200b\uff1a</p> <ul> <li> <ol> <li>\u200b\u7f16\u8bd1\u200b\u9009\u9879\u200b\u4e2d\u200b\u52a0\u5165\u200b\u2013no-exceptions\uff0c\u200b\u4f46\u662f\u200b\u8fd9\u79cd\u200b\u65b9\u6cd5\u200b\u5927\u200b\u6982\u7387\u200b\u4ee3\u7801\u200b\u7f16\u8bd1\u200b\u4e0d\u200b\u901a\u8fc7\u200b\uff0c\u200b\u6bd4\u5982\u200bc\u200b\u5e93\u200b\u91cc\u9762\u200b\u6709\u200b\u5f88\u591a\u200bthrow exception\u3002</li> </ol> </li> </ul> Bash<pre><code>set(CMAKE_CXX_FLAGS \"-fprofile-arcs -ftest-coverage --coverage --no-exceptions --no-inline\")\n</code></pre> <ul> <li>\u200b\u60f3\u200b\u529e\u6cd5\u200b\u5728\u200b\u751f\u6210\u200b\u4ee3\u7801\u200b\u8986\u76d6\u7387\u200b\u7684\u200b\u5de5\u5177\u200b\u5c42\u200b\u8fc7\u6ee4\u200b\uff0clcov\u200b\u6ca1\u6709\u200b\u63d0\u4f9b\u200b\u76f4\u63a5\u200b\u7684\u200b\u547d\u4ee4\u200b\u9009\u9879\u200b\uff0c\u200b\u800c\u200bgcovr\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u2013exclude-throw-branches\u3002\u200b\u901a\u8fc7\u200b\u67e5\u770b\u200bgcovr\u200b\u751f\u6210\u200b\u7684\u200bhtml\u200b\u62a5\u544a\u200b\u53ef\u4ee5\u200b\u660e\u663e\u200b\u770b\u51fa\u200b\u4ee5\u4e0a\u200b\u884c\u200b\u4e0d\u4f1a\u200b\u51fa\u73b0\u200b\u5206\u652f\u200b\u672a\u200b\u8986\u76d6\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e86\u200b\u3002</li> </ul> Bash<pre><code>gcovr -r ${current_dir}  --html --html-details -o gc_coverage.html -v --filter . --exclude \"/3rdparty/*\" --exclude \"/usr/*\" --exclude-throw-branches\n</code></pre> <p><code>--exclude-throw-branches</code>ignores branches that GCC marks as exception only. This is mostly relevant in C++. Use of this feature is a double-edged sword. Often you\u2019re not interested in covering the branch from a function that throws, except when you have an explicit<code>catch</code>block.</p> <p>\u200b\u8fd8\u6709\u200b\u503c\u5f97\u6ce8\u610f\u200b\u7684\u200b\u662f\u200b\uff0c\u200b\u5355\u200b\u6761\u4ef6\u200b\u5206\u652f\u200b\uff0c\u200b\u5b9e\u9645\u4e0a\u200b\u6709\u200b\u4e24\u4e2a\u200b\u5206\u652f\u200b\uff0c\u200b\u5982\u679c\u200b\u53ea\u200b\u7f16\u5199\u200b\u8986\u76d6\u200bif\u200b\u7684\u200b\u6d4b\u8bd5\u4ee3\u7801\u200b\uff0c\u200b\u53ea\u4f1a\u200b\u8986\u76d6\u200b50%\u200b\u7684\u200b\u5206\u652f\u200b\u8986\u76d6\u7387\u200b\u3002</p> C++<pre><code>if(xxx == 0){\n\n}\n</code></pre> <p>\u200b\u53c2\u8003\u200b\uff1a</p> <p>https://github.com/gcovr/gcovr/issues/324</p> <p>https://stackoverflow.com/questions/42003783/lcov-gcov-branch-coverage-with-c-producing-branches-all-over-the-place</p>"},{"location":"weeks/docker%E6%8B%89%E9%95%9C%E5%83%8F%E5%A4%AA%E6%85%A2%E4%BA%86/","title":"docker\u200b\u955c\u50cf\u200b\u52a0\u901f\u200b\u65b9\u6cd5","text":""},{"location":"weeks/docker%E6%8B%89%E9%95%9C%E5%83%8F%E5%A4%AA%E6%85%A2%E4%BA%86/#docker\u955c\u50cf\u52a0\u901f\u65b9\u6cd5","title":"docker\u200b\u955c\u50cf\u200b\u52a0\u901f\u200b\u65b9\u6cd5","text":"<p>\u200b\u5728\u200b\u4f7f\u7528\u200bdocker\u200b\u65f6\u200b\uff0c\u200b\u627e\u5230\u200b\u7684\u200b\u6709\u6548\u200b\u52a0\u901f\u200b\u65b9\u6cd5\u200b\uff1a</p> <p>docker pull dockerpull.org/openmmlab/lmdeploy:latest-cu12</p> <p>\u200b\u539f\u6587\u200b\uff1a https://blog.csdn.net/x1131230123/article/details/143502374</p>"},{"location":"weeks/docker%E6%8B%89%E9%95%9C%E5%83%8F%E5%A4%AA%E6%85%A2%E4%BA%86/#docker-cap-addsys_ptrace","title":"docker \u2013cap-add=SYS_PTRACE","text":"Text Only<pre><code>docker run --cap-add=SYS_PTRACE &lt;flags&gt; &lt;stub image&gt;\n\ndocker run --cap-add=SYS_PTRACE -p9999:80 --name=nginx-rf-test   \n\ndocker.io/library/nginx:latest-rfstub\n</code></pre> <p>To enable runtime observation, SYS_PTRACE Linux kernel capability must be added.</p> <p>https://man7.org/linux/man-pages/man7/capabilities.7.html</p> <p>CAP_SYS_PTRACE   \u2022  Trace arbitrary processes using ptrace(2);   \u2022  apply get_robust_list(2) to arbitrary processes;   \u2022  transfer data to or from the memory of arbitrary      processes using process_vm_readv(2) and      process_vm_writev(2);   \u2022  inspect processes using kcmp(2).</p> <p>\u200b\u5728\u200bDocker\u200b\u4e2d\u200b\uff0c<code>--cap-add=SYS_PTRACE</code>\u00a0\u200b\u662f\u200b\u4e00\u4e2a\u200b\u7528\u4e8e\u200b\u589e\u52a0\u200b\u5bb9\u5668\u200b\u7684\u200b\u80fd\u529b\u200b\uff08capability\uff09\u200b\u9009\u9879\u200b\u3002<code>SYS_PTRACE</code>\u00a0\u200b\u662f\u200bLinux\u200b\u7cfb\u7edf\u200b\u4e2d\u200b\u7684\u200b\u4e00\u79cd\u200b\u80fd\u529b\u200b\uff0c\u200b\u5b83\u200b\u5141\u8bb8\u200b\u8fdb\u7a0b\u200b\u4f7f\u7528\u200b<code>ptrace</code>\u200b\u7cfb\u7edf\u200b\u8c03\u7528\u200b\u6765\u200b\u8ddf\u8e2a\u200b\u548c\u200b\u63a7\u5236\u200b\u5176\u4ed6\u200b\u8fdb\u7a0b\u200b\u3002</p>"},{"location":"weeks/docker%E6%8B%89%E9%95%9C%E5%83%8F%E5%A4%AA%E6%85%A2%E4%BA%86/#git-\u5982\u4f55\u4fee\u6539commit\u7684author","title":"git \u200b\u5982\u4f55\u200b\u4fee\u6539\u200bcommit\u200b\u7684\u200bauthor","text":"Text Only<pre><code>git config --global  --list\ngit config --global user.name \"Your Name\"\ngit config --global user.email you@example.com\n</code></pre> <p>After doing this, you may fix the identity used for this commit with:</p> Text Only<pre><code>git commit --amend --reset-author\n</code></pre>"},{"location":"weeks/float%E8%BD%ACstring%E7%B2%BE%E5%BA%A6%E6%8D%9F%E5%A4%B1%E9%97%AE%E9%A2%98/","title":"Float\u200b\u8f6c\u200bstring\u200b\u7cbe\u5ea6\u200b\u635f\u5931\u200b\u95ee\u9898","text":"<p>std::vector f_data;</p> <p>\u200b\u5982\u679c\u200b\u6211\u4eec\u200b\u5728\u200b\u4f7f\u7528\u200bjson\u200b\u5e93\u200b\u5e8f\u5217\u5316\u200bfloat\u200b\u6570\u7ec4\u200b\u65f6\u200b\uff0c\u200b\u8981\u200b\u6ce8\u610f\u200b\u8f6c\u6362\u6210\u200bstring\u200b\u540e\u200b\uff0c\u200b\u9ed8\u8ba4\u200b\u7cbe\u5ea6\u200b\u53ea\u6709\u200b\u5c0f\u6570\u70b9\u200b\u540e\u200b6\u200b\u4f4d\u200b\u3002\u200b\u5982\u679c\u200b\u8981\u200b\u7f51\u7edc\u200b\u4f20\u8f93\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200bbase64\u200b\u7f16\u7801\u200b\uff0c\u200b\u7136\u540e\u200b\u6536\u5230\u200b\u540e\u200b\u518d\u200b\u89e3\u7801\u200b\uff0c\u200b\u8fd9\u6837\u200b\u5c31\u200b\u4e0d\u4f1a\u200b\u56e0\u4e3a\u200b\u8f6c\u6362\u200bstd::string\u200b\u5bfc\u81f4\u200b\u7cbe\u5ea6\u200b\u635f\u5931\u200b\u3002</p> <p>\u200b\u4f7f\u7528\u200bstd::cout \u200b\u6253\u5370\u200b\u662f\u200b\u4e5f\u200b\u662f\u200b\uff0c\u200b\u9700\u8981\u200b\u8bbe\u7f6e\u200bstd::cout &lt;&lt; std::fixed &lt;&lt; std::setprecision(8)\u3002</p> <p><code>float</code>\u200b\u7c7b\u578b\u200b\u6709\u200b\u5176\u200b\u56fa\u6709\u200b\u7684\u200b\u9650\u5236\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5b83\u200b\u662f\u200b\u4e00\u79cd\u200b32\u200b\u4f4d\u200b\u6d6e\u70b9\u6570\u200b\uff0c\u200b\u5b83\u200b\u53ea\u80fd\u200b\u63d0\u4f9b\u200b\u5927\u7ea6\u200b6\u200b\u5230\u200b7\u200b\u4f4d\u200b\u7684\u200b\u5341\u8fdb\u5236\u200b\u7cbe\u5ea6\u200b\u3002\u200b\u5982\u679c\u200b\u4f60\u200b\u9700\u8981\u200b\u66f4\u200b\u9ad8\u200b\u7684\u200b\u7cbe\u5ea6\u200b\uff0c\u200b\u8bf7\u200b\u8003\u8651\u200b\u4f7f\u7528\u200b<code>double</code>\u200b\u7c7b\u578b\u200b\uff0c\u200b\u5b83\u200b\u662f\u200b\u4e00\u79cd\u200b64\u200b\u4f4d\u200b\u6d6e\u70b9\u6570\u200b\uff0c\u200b\u80fd\u591f\u200b\u63d0\u4f9b\u200b\u5927\u7ea6\u200b15\u200b\u5230\u200b17\u200b\u4f4d\u200b\u7684\u200b\u5341\u8fdb\u5236\u200b\u7cbe\u5ea6\u200b\u3002</p> <p>32\u200b\u4f4d\u200b\u6d6e\u70b9\u6570\u200b\uff0c\u200b\u5b83\u200b\u53ea\u80fd\u200b\u63d0\u4f9b\u200b\u5927\u7ea6\u200b6\u200b\u5230\u200b7\u200b\u4f4d\u200b\u7684\u200b\u5341\u8fdb\u5236\u200b\u7cbe\u5ea6\u200b\u662f\u200b\u7531\u200bIEEE\u200b\u5b58\u50a8\u200b\u6807\u51c6\u200b\u51b3\u5b9a\u200b\u7684\u200b\u300232\u200b\u4f4d\u200b\u6d6e\u70b9\u6570\u200b\uff0c\u200b\u901a\u5e38\u200b\u6307\u200b\u7684\u200b\u662f\u200b\u7b26\u5408\u200bIEEE 754\u200b\u6807\u51c6\u200b\u7684\u200b\u5355\u7cbe\u5ea6\u200b\u6d6e\u70b9\u6570\u200b\u683c\u5f0f\u200b\uff08float\uff09\u3002\u200b\u5728\u200b\u8fd9\u79cd\u200b\u683c\u5f0f\u200b\u4e2d\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u6d6e\u70b9\u6570\u200b\u7531\u200b\u4e09\u4e2a\u200b\u90e8\u5206\u200b\u7ec4\u6210\u200b\uff1a</p> <ol> <li> <p>\u200b\u7b26\u53f7\u200b\u4f4d\u200b\uff08Sign bit\uff09\uff1a1\u200b\u4f4d\u200b\uff0c\u200b\u7528\u4e8e\u200b\u8868\u793a\u200b\u6b63\u6570\u200b\u6216\u200b\u8d1f\u6570\u200b\u3002</p> </li> <li> <p>\u200b\u6307\u6570\u200b\u90e8\u5206\u200b\uff08Exponent\uff09\uff1a8\u200b\u4f4d\u200b\uff0c\u200b\u7528\u4e8e\u200b\u8868\u793a\u200b\u6570\u503c\u200b\u7684\u200b\u8303\u56f4\u200b\uff08\u200b\u5927\u5c0f\u200b\uff09\u3002</p> </li> <li> <p>\u200b\u5c3e\u6570\u200b\u6216\u200b\u5c0f\u6570\u200b\u90e8\u5206\u200b\uff08Mantissa/Fraction\uff09\uff1a23\u200b\u4f4d\u200b\uff0c\u200b\u7528\u4e8e\u200b\u8868\u793a\u200b\u6570\u503c\u200b\u7684\u200b\u7cbe\u5ea6\u200b\uff08\u200b\u6709\u6548\u6570\u5b57\u200b\uff09\u3002</p> </li> </ol> <p>\u200b\u6b64\u5916\u200b\uff0c\u200b\u5373\u4f7f\u200b\u4f60\u200b\u8bbe\u7f6e\u200b\u4e86\u200b\u66f4\u200b\u9ad8\u200b\u7684\u200b\u7cbe\u5ea6\u200b\uff0c\u200b\u4e5f\u200b\u4e0d\u80fd\u200b\u4fdd\u8bc1\u200b\u8d85\u51fa\u200b<code>float</code>\u200b\u6216\u200b<code>double</code>\u200b\u672c\u8eab\u200b\u80fd\u200b\u8868\u8fbe\u200b\u7684\u200b\u7cbe\u5ea6\u200b\u8303\u56f4\u200b\u7684\u200b\u4f4d\u6570\u200b\u662f\u200b\u51c6\u786e\u200b\u7684\u200b\u3002\u200b\u8fd9\u662f\u200b\u6d6e\u70b9\u6570\u200b\u8868\u793a\u6cd5\u200b\u7684\u200b\u56fa\u6709\u200b\u9650\u5236\u200b\uff0c\u200b\u800c\u200b\u4e0d\u662f\u200b\u683c\u5f0f\u5316\u200b\u8f93\u51fa\u200b\u7684\u200b\u95ee\u9898\u200b\u3002</p> <p><code>std::to_string</code>\u200b\u5bf9\u4e8e\u200b\u6d6e\u70b9\u6570\u200b\u8f6c\u6362\u200b\u4f7f\u7528\u200b\u9ed8\u8ba4\u200b\u7684\u200b\u683c\u5f0f\u200b\u548c\u200b\u7cbe\u5ea6\u200b\uff0c\u200b\u8fd9\u200b\u901a\u5e38\u200b\u662f\u200b6\u200b\u4f4d\u200b\u6709\u6548\u6570\u5b57\u200b\u3002</p> <p>\u200b\u793a\u4f8b\u200b\uff1a</p> C++<pre><code>#include&lt;string&gt;\n\n#include&lt;iostream&gt;\n\nint main(){  \n    float value = 3.14159265f;  \n    std::string strValue = std::to_string(value);  \n\n    std::cout &lt;&lt; \"The float value is: \" &lt;&lt; strValue &lt;&lt; std::endl;  \n    return0;  \n}  \n</code></pre> <p>\u200b\u5728\u200b\u4e0a\u9762\u200b\u7684\u200b\u4f8b\u5b50\u200b\u4e2d\u200b\uff0c<code>std::to_string</code>\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u4ea7\u751f\u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u4e32\u200b\uff0c\u200b\u5982\u200b<code>\"3.14159\"</code>\uff0c\u200b\u56e0\u4e3a\u200b\u9ed8\u8ba4\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u5b83\u200b\u53ea\u200b\u4fdd\u7559\u200b6\u200b\u4f4d\u200b\u6709\u6548\u6570\u5b57\u200b\uff0c\u200b\u8fd9\u200b\u53ef\u80fd\u200b\u5bfc\u81f4\u200b\u7cbe\u5ea6\u200b\u635f\u5931\u200b\u3002</p> C++<pre><code>#include&lt;iomanip&gt;\n\n#include&lt;sstream&gt;\n\n#include&lt;string&gt;\n\n#include&lt;iostream&gt;\n\nstd::string floatToStringWithPrecision(float value, int precision){  \n    std::ostringstream oss;  \n    oss &lt;&lt; std::fixed &lt;&lt; std::setprecision(precision);  \n    oss &lt;&lt; value;  \n    return oss.str();  \n}  \n</code></pre> C++<pre><code>int main(){  \n    float value = 3.14159265f;  \n    std::string strValue = floatToStringWithPrecision(value, 8);  \n\n    std::cout &lt;&lt; \"The float value with more precision is: \" &lt;&lt; strValue &lt;&lt; std::endl;  \n    return0;  \n}  \n</code></pre> <p>\u200b\u5728\u200b\u8fd9\u4e2a\u200b\u4fee\u6539\u200b\u540e\u200b\u7684\u200b\u4f8b\u5b50\u200b\u4e2d\u200b\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u6307\u5b9a\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u7cbe\u5ea6\u200b\uff0c\u200b\u4f7f\u200b<code>float</code>\u200b\u8f6c\u6362\u200b\u4e3a\u200b<code>string</code>\u200b\u65f6\u200b\u4e0d\u4f1a\u200b\u4e22\u5931\u200b\u91cd\u8981\u200b\u7684\u200b\u7cbe\u5ea6\u200b\u3002\u200b\u8bf7\u200b\u8bb0\u4f4f\u200b\uff0c\u200b\u5373\u4f7f\u200b\u4f60\u200b\u6307\u5b9a\u200b\u4e86\u200b\u66f4\u200b\u9ad8\u200b\u7684\u200b\u7cbe\u5ea6\u200b\uff0c\u200b\u4e5f\u200b\u4e0d\u80fd\u200b\u4fdd\u8bc1\u200b\u8d85\u51fa\u200b<code>float</code>\u200b\u539f\u672c\u200b\u7cbe\u5ea6\u200b\u7684\u200b\u4f4d\u6570\u200b\u662f\u200b\u51c6\u786e\u200b\u7684\u200b\u3002</p>"},{"location":"weeks/python%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E8%B0%83%E7%94%A8%E5%9B%BEcall_graph/","title":"python\u200b\u8c03\u7528\u200b\u56fe","text":""},{"location":"weeks/python%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E8%B0%83%E7%94%A8%E5%9B%BEcall_graph/#python\u8c03\u7528\u56fe","title":"python\u200b\u8c03\u7528\u200b\u56fe","text":"<p>\u200b\u5bf9\u4e8e\u200b\u5305\u542b\u200b\u591a\u4e2a\u200b <code>.py</code> \u200b\u6587\u4ef6\u200b\u7684\u200b Python \u200b\u9879\u76ee\u200b\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u4ee5\u4e0b\u200b\u5de5\u5177\u200b\u751f\u6210\u200b\u6574\u4e2a\u200b\u9879\u76ee\u200b\u7684\u200b\u8c03\u7528\u200b\u5173\u7cfb\u200b\u56fe\u200b\u3002\u200b\u8fd9\u4e9b\u200b\u5de5\u5177\u200b\u80fd\u591f\u200b\u5904\u7406\u200b\u591a\u4e2a\u200b\u6587\u4ef6\u200b\uff0c\u200b\u5e76\u200b\u751f\u6210\u200b\u66f4\u200b\u5168\u9762\u200b\u7684\u200b\u8c03\u7528\u200b\u5173\u7cfb\u200b\u56fe\u200b\u3002</p>"},{"location":"weeks/python%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E8%B0%83%E7%94%A8%E5%9B%BEcall_graph/#01-\u4f7f\u7528-pyan","title":"0.1 \u200b\u4f7f\u7528\u200b pyan","text":"<p><code>pyan</code> \u200b\u662f\u200b\u4e00\u4e2a\u200b\u53ef\u4ee5\u200b\u4ece\u200b\u591a\u4e2a\u200b Python \u200b\u6e90\u6587\u4ef6\u200b\u751f\u6210\u200b\u8c03\u7528\u200b\u56fe\u200b\u7684\u200b\u5de5\u5177\u200b\u3002\u200b\u5b83\u200b\u53ef\u4ee5\u200b\u5904\u7406\u200b\u6574\u4e2a\u200b\u9879\u76ee\u200b\u7684\u200b\u6240\u6709\u200b <code>.py</code> \u200b\u6587\u4ef6\u200b\u3002</p> <ol> <li> <p>\u200b\u5b89\u88c5\u200b pyan:    </p>Bash<pre><code>pip install pyan3\n</code></pre><p></p> </li> <li> <p>\u200b\u751f\u6210\u200b\u8c03\u7528\u200b\u5173\u7cfb\u200b\u56fe\u200b:    \u200b\u5047\u8bbe\u200b\u4f60\u200b\u7684\u200b\u9879\u76ee\u200b\u76ee\u5f55\u200b\u7ed3\u6784\u200b\u5982\u4e0b\u200b\uff1a    </p>Text Only<pre><code>my_project/\n\u251c\u2500\u2500 module1.py\n\u251c\u2500\u2500 module2.py\n\u2514\u2500\u2500 module3.py\n</code></pre><p></p> </li> </ol> <p>\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u8fd0\u884c\u200b\u4ee5\u4e0b\u200b\u547d\u4ee4\u200b\u6765\u200b\u751f\u6210\u200b\u8c03\u7528\u200b\u56fe\u200b\uff1a    </p>Bash<pre><code>pyan my_project/*.py --dot --colored --grouped &gt; output.dot\n</code></pre><p></p> <ol> <li>\u200b\u53ef\u89c6\u5316\u200b\u8c03\u7528\u200b\u5173\u7cfb\u200b\u56fe\u200b:    \u200b\u4f7f\u7528\u200b Graphviz \u200b\u5c06\u200b <code>.dot</code> \u200b\u6587\u4ef6\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u56fe\u50cf\u200b\uff1a    Bash<pre><code>dot -Tpng output.dot -o output.png\n</code></pre></li> </ol>"},{"location":"weeks/python%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E8%B0%83%E7%94%A8%E5%9B%BEcall_graph/#02-\u4f7f\u7528-doxygen","title":"0.2 \u200b\u4f7f\u7528\u200b Doxygen","text":"<p><code>Doxygen</code> \u200b\u53ef\u4ee5\u200b\u4e3a\u200b\u6574\u4e2a\u200b Python \u200b\u9879\u76ee\u200b\u751f\u6210\u200b\u6587\u6863\u200b\u548c\u200b\u8c03\u7528\u200b\u56fe\u200b\u3002</p> <ol> <li>\u200b\u5b89\u88c5\u200b Doxygen:</li> <li>\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u7cfb\u7edf\u200b\u7684\u200b\u5305\u200b\u7ba1\u7406\u5668\u200b\u5b89\u88c5\u200b\uff0c\u200b\u6216\u8005\u200b\u4ece\u200b\u5b98\u65b9\u7f51\u7ad9\u200b\u4e0b\u8f7d\u200b\u3002</li> <li> <p>\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5728\u200b Ubuntu \u200b\u4e0a\u200b\uff1a      </p>Bash<pre><code>sudo apt-get install doxygen\n</code></pre><p></p> </li> <li> <p>\u200b\u751f\u6210\u200b\u914d\u7f6e\u6587\u4ef6\u200b:    \u200b\u5728\u200b\u9879\u76ee\u200b\u6839\u76ee\u5f55\u200b\u8fd0\u884c\u200b\u4ee5\u4e0b\u200b\u547d\u4ee4\u200b\u751f\u6210\u200b <code>Doxyfile</code> \u200b\u914d\u7f6e\u6587\u4ef6\u200b\uff1a    </p>Bash<pre><code>doxygen -g\n</code></pre><p></p> </li> <li> <p>\u200b\u7f16\u8f91\u200b Doxyfile:    \u200b\u6253\u5f00\u200b <code>Doxyfile</code>\uff0c\u200b\u8bbe\u7f6e\u200b\u4ee5\u4e0b\u200b\u9009\u9879\u200b\u4ee5\u200b\u542f\u7528\u200b Python \u200b\u652f\u6301\u200b\u548c\u200b\u8c03\u7528\u200b\u56fe\u200b\u751f\u6210\u200b\uff1a    </p>Text Only<pre><code>FILE_PATTERNS = *.py\nEXTRACT_ALL = YES\nHAVE_DOT = YES\nCALL_GRAPH = YES\nCALLER_GRAPH = YES\n</code></pre><p></p> </li> <li> <p>\u200b\u751f\u6210\u200b\u6587\u6863\u200b\u548c\u200b\u56fe\u8868\u200b:    \u200b\u5728\u200b\u9879\u76ee\u200b\u6839\u76ee\u5f55\u200b\u8fd0\u884c\u200b\uff1a    </p>Bash<pre><code>doxygen Doxyfile\n</code></pre><p></p> </li> </ol> <p>\u200b\u8fd9\u200b\u5c06\u200b\u5728\u200b <code>html</code> \u200b\u76ee\u5f55\u200b\u4e2d\u200b\u751f\u6210\u200b\u6587\u6863\u200b\uff0c\u200b\u5176\u4e2d\u200b\u5305\u542b\u200b\u8c03\u7528\u200b\u56fe\u200b\u3002</p>"},{"location":"weeks/python%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E8%B0%83%E7%94%A8%E5%9B%BEcall_graph/#03-\u4f7f\u7528-graphviz-\u7ed3\u5408\u5176\u4ed6\u5de5\u5177","title":"0.3 \u200b\u4f7f\u7528\u200b Graphviz \u200b\u7ed3\u5408\u200b\u5176\u4ed6\u200b\u5de5\u5177","text":"<p>\u200b\u5bf9\u4e8e\u200b\u66f4\u200b\u590d\u6742\u200b\u7684\u200b\u9879\u76ee\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u7f16\u5199\u200b\u81ea\u5b9a\u4e49\u200b\u811a\u672c\u200b\uff0c\u200b\u7ed3\u5408\u200b <code>ast</code> \u200b\u6a21\u5757\u200b\u89e3\u6790\u200b Python \u200b\u6e90\u7801\u200b\uff0c\u200b\u7136\u540e\u200b\u751f\u6210\u200b <code>.dot</code> \u200b\u6587\u4ef6\u200b\u5e76\u200b\u4f7f\u7528\u200b Graphviz \u200b\u53ef\u89c6\u5316\u200b\u3002</p> <p>https://github.com/chanhx/crabviz</p>"},{"location":"weeks/python%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E8%B0%83%E7%94%A8%E5%9B%BEcall_graph/#python-import","title":"python import","text":""},{"location":"weeks/python%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E8%B0%83%E7%94%A8%E5%9B%BEcall_graph/#1-1","title":"1 1","text":"<p>\u200b\u5728\u200bpython\u200b\u7684\u200b\u540c\u4e00\u4e2a\u200b\u7a0b\u5e8f\u200b\u4e2d\u200b\uff0c\u200b\u4f7f\u7528\u200b\u591a\u4e2a\u200b\u7248\u672c\u200b\u7684\u200bpackage\uff0c\u200b\u5982\u4f55\u200b\u907f\u514d\u200b\u51b2\u7a81\u200b\uff1f</p> <p>\u200b\u6bd4\u5982\u200b\u5bfc\u5165\u200b\u7684\u200b\u5305\u53eb\u200btimm\uff0c\u200b\u4f46\u662f\u200b\u5b58\u5728\u200b\u4e24\u4e2a\u200b\u7248\u672c\u200b\uff0c\u200b\u6587\u4ef6\u5939\u200b\u547d\u540d\u200b\u90fd\u200b\u662f\u200btimm\uff0c\u200b\u5982\u679c\u200b\u4ec5\u4ec5\u200b\u4f9d\u9760\u200b\u4fee\u6539\u200bsys.path\uff0c\u200b\u5bfc\u5165\u200b\u5305\u200b\uff0c\u200b\u7136\u540e\u200b\u518d\u200bpop\uff0c\u200b\u4e0d\u80fd\u200b\u4fdd\u8bc1\u200b\u641c\u7d22\u200b\u5230\u200b\u6b63\u786e\u200b\u7684\u200b\u7248\u672c\u200b\u3002\u200b\u56e0\u4e3a\u200bpython\u200b\u5305\u200b\u5bfc\u5165\u200b\u4f1a\u200b\u4f7f\u7528\u200b\u7b2c\u4e00\u6b21\u200b\u5bfc\u5165\u200b\u7f13\u5b58\u200b\u7684\u200b\u7248\u672c\u200b\u3002</p> Python<pre><code>import sys\n\n\n\nsys.path.insert(0, 'py_crate_example/v2/')\n\nprint(__file__,sys.path)\n\nfrom timm_v2 import infer\n\nsys.path.pop(0)\n\n\n\nimport t1\n\n\n\nimport t2\n\n\n\ninfer.infer()\n\n\n\nt1.hello()\n\n\n\nt2.hello()\n</code></pre> <p>\u200b\u6b63\u786e\u200b\u7684\u200b\u505a\u6cd5\u200b\uff1a\u200b\u91c7\u7528\u200b\u4e0d\u540c\u200b\u7684\u200b\u540d\u5b57\u200b\uff0c\u200b\u6bd4\u5982\u200btimm_v1\u200b\u548c\u200btimm_v2\u3002</p> Text Only<pre><code>\u251c\u2500\u2500 main.py\n\n\u251c\u2500\u2500 readme.md\n\n\u251c\u2500\u2500 t1.py\n\n\u251c\u2500\u2500 t2.py\n\n\u251c\u2500\u2500 v1\n\n\u2502 \u2514\u2500\u2500 timm\n\n\u2502 \u251c\u2500\u2500 __init__.py\n\n\u2502 \u2514\u2500\u2500 infer.py\n\n\u2514\u2500\u2500 v2\n\n\u2514\u2500\u2500 timm_v2\n\n\u251c\u2500\u2500 __init__.py\n\n\u2514\u2500\u2500 infer.py\n</code></pre> <p>\u200b\u8fd9\u200b\u53ea\u662f\u200b\u7b80\u5355\u200b\u7684\u200b\u60c5\u51b5\u200b\uff0c\u200b\u5982\u679c\u200binfer.py\u200b\u4e2d\u7528\u200b\u4e86\u200bimport timm.xxx\uff0c\u200b\u90a3\u4e48\u200b\u5728\u200bv2\u200b\u4e2d\u200b\u5c31\u200b\u4e0d\u80fd\u200b\u4f7f\u7528\u200bimport timm\uff0c\u200b\u56e0\u4e3a\u200b\u6539\u6210\u200b\u4e86\u200btimm_v2\u3002</p> <p>\u200b\u8fd9\u4e2a\u200b\u65f6\u5019\u200b\u5c31\u200b\u53ea\u80fd\u200b\u7528\u200b\u4e0d\u540c\u200b\u7684\u200bpython\u200b\u5b50\u200b\u8fdb\u7a0b\u200b\uff0c\u200b\u5355\u72ec\u200b\u8dd1\u200b\u4e86\u200b\u3002</p> <p>\u200b\u52a8\u6001\u200b\u52a0\u8f7d\u200b\u4e5f\u200b\u4e0d\u884c\u200b\u7684\u200b\u3002</p> Text Only<pre><code>\u200b\u52a8\u6001\u200b\u52a0\u8f7d\u200b\u5e93\u200b\uff1a\u200b\u5982\u679c\u200b\u4f60\u200b\u975e\u8981\u200b\u5728\u200b\u540c\u4e00\u200b\u8fdb\u7a0b\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u4e0d\u540c\u200b\u7248\u672c\u200b\u7684\u200b\u5e93\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5c1d\u8bd5\u200b\u52a8\u6001\u200b\u52a0\u8f7d\u200b\u5e93\u200b\u3002\u200b\u867d\u7136\u200b\u8fd9\u200b\u4e0d\u200b\u4fdd\u8bc1\u200b\u6240\u6709\u200b\u5e93\u200b\u90fd\u200b\u80fd\u200b\u6b63\u5e38\u200b\u5de5\u4f5c\u200b\uff0c\u200b\u4f46\u200b\u5bf9\u4e8e\u200b\u67d0\u4e9b\u200b\u5e93\u200b\u53ef\u80fd\u200b\u6709\u6548\u200b\u3002\n\n\n\n\u200b\u5c06\u200b\u4e0d\u540c\u200b\u7248\u672c\u200b\u7684\u200b\u5e93\u200b\u5b89\u88c5\u200b\u5230\u200b\u4e0d\u540c\u200b\u7684\u200b\u8def\u5f84\u200b\uff0c\u200b\u7136\u540e\u200b\u4f7f\u7528\u200bimportlib\u200b\u52a8\u6001\u200b\u52a0\u8f7d\u200b\u3002\n\nimport sys\n\nimport importlib.util\n\n\n\n# \u200b\u52a0\u8f7d\u200b\u7b2c\u4e00\u4e2a\u200b\u7248\u672c\u200b\n\nspec = importlib.util.spec_from_file_location(\n\n\"timm_v1\", \"/path/to/timm_v1/timm/__init__.py\")\n\ntimm_v1 = importlib.util.module_from_spec(spec)\n\nsys.modules[\"timm_v1\"] = timm_v1\n\nspec.loader.exec_module(timm_v1)\n\n\n\n# \u200b\u52a0\u8f7d\u200b\u7b2c\u4e8c\u4e2a\u200b\u7248\u672c\u200b\n\nspec = importlib.util.spec_from_file_location(\n\n\"timm_v2\", \"/path/to/timm_v2/timm/__init__.py\")\n\ntimm_v2 = importlib.util.module_from_spec(spec)\n\nsys.modules[\"timm_v2\"] = timm_v2\n\nspec.loader.exec_module(timm_v2)\n\n\n\n# \u200b\u4f7f\u7528\u200b\u4e0d\u540c\u200b\u7248\u672c\u200b\u7684\u200b\u5e93\u200b\n\ntimm_v1.some_function()\n\ntimm_v2.some_function()\n</code></pre>"},{"location":"weeks/python%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E8%B0%83%E7%94%A8%E5%9B%BEcall_graph/#2-2","title":"2 2","text":"<p>python\u200b\u4e2d\u200b\uff0c\u200b\u811a\u672c\u200b\u6267\u884c\u200bsys.path.append(\u2018./\u2019)\u200b\u548c\u200bsys.path.insert(0, \u2018./\u2019)\u200b\u540e\u200b\uff0c\u200b\u4e0d\u4f1a\u200b\u6539\u53d8\u200b\u7cfb\u7edf\u200b\u7684\u200b\u73af\u5883\u53d8\u91cf\u200bpath\u3002</p> <p>\u200b\u53ef\u4ee5\u200b\u5728\u200b\u6267\u884c\u200b\u811a\u672c\u200b\u540e\u200b\uff0c\u200b\u901a\u8fc7\u200bpython -c \u201cimport sys;print(sys.path)\u201d\u200b\u67e5\u770b\u200b\u3002</p> <p><code>sys.path</code> \u200b\u662f\u200b Python \u200b\u5728\u200b\u8fd0\u884c\u200b\u65f6\u200b\u7528\u4e8e\u200b\u786e\u5b9a\u200b\u6a21\u5757\u200b\u641c\u7d22\u200b\u8def\u5f84\u200b\u7684\u200b\u5217\u8868\u200b\u3002\u200b\u8fd9\u4e9b\u200b\u8def\u5f84\u200b\u5728\u200b Python \u200b\u542f\u52a8\u200b\u65f6\u200b\u521d\u59cb\u5316\u200b\uff0c\u200b\u901a\u5e38\u200b\u5305\u62ec\u200b\u811a\u672c\u200b\u6240\u5728\u200b\u7684\u200b\u76ee\u5f55\u200b\u3001Python \u200b\u6807\u51c6\u200b\u5e93\u200b\u76ee\u5f55\u200b\u4ee5\u53ca\u200b\u5176\u4ed6\u200b\u4f9d\u8d56\u200b\u9879\u200b\u7684\u200b\u76ee\u5f55\u200b\u3002\u200b\u9700\u8981\u200b\u6ce8\u610f\u200b\u7684\u200b\u662f\u200b\uff0c<code>sys.path</code> \u200b\u7684\u200b\u4fee\u6539\u200b\u5728\u200b Python \u200b\u8fdb\u7a0b\u200b\u7ed3\u675f\u200b\u540e\u200b\u4e0d\u4f1a\u200b\u6301\u4e45\u200b\u5316\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u5982\u679c\u200b\u4f60\u200b\u60f3\u8981\u200b\u6c38\u4e45\u6027\u200b\u5730\u200b\u66f4\u6539\u200b <code>sys.path</code>\uff0c\u200b\u9700\u8981\u200b\u4ece\u200b\u4ee5\u4e0b\u200b\u51e0\u4e2a\u200b\u65b9\u6cd5\u200b\u4e2d\u200b\u9009\u62e9\u200b\u5408\u9002\u200b\u7684\u200b\u65b9\u6cd5\u200b\uff1a</p>"},{"location":"weeks/python%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E8%B0%83%E7%94%A8%E5%9B%BEcall_graph/#21-\u65b9\u6cd5-1\u4fee\u6539\u73af\u5883\u53d8\u91cf-pythonpath","title":"2.1 \u200b\u65b9\u6cd5\u200b 1\uff1a\u200b\u4fee\u6539\u200b\u73af\u5883\u53d8\u91cf\u200b <code>PYTHONPATH</code>","text":"<p><code>PYTHONPATH</code> \u200b\u662f\u200b\u4e00\u4e2a\u200b\u73af\u5883\u53d8\u91cf\u200b\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u5176\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b\u5305\u542b\u200b\u591a\u4e2a\u200b\u8def\u5f84\u200b\u7684\u200b\u5217\u8868\u200b\uff08\u200b\u8def\u5f84\u200b\u7528\u200b\u64cd\u4f5c\u7cfb\u7edf\u200b\u7279\u5b9a\u200b\u7684\u200b\u5206\u9694\u7b26\u200b\u5206\u9694\u200b\uff0c\u200b\u5982\u200b Unix/Linux \u200b\u4e0a\u200b\u7684\u200b\u5192\u53f7\u200b <code>:</code> \u200b\u6216\u200b Windows \u200b\u4e0a\u200b\u7684\u200b\u5206\u53f7\u200b <code>;</code>\uff09\u3002\u200b\u8fd9\u4e9b\u200b\u8def\u5f84\u200b\u5728\u200b Python \u200b\u542f\u52a8\u200b\u65f6\u4f1a\u200b\u88ab\u200b\u6dfb\u52a0\u200b\u5230\u200b <code>sys.path</code>\u3002</p> <p>\u200b\u7f16\u8f91\u200b\u4f60\u200b\u7684\u200b shell \u200b\u914d\u7f6e\u6587\u4ef6\u200b\uff08\u200b\u5982\u200b <code>~/.bashrc</code>\u3001<code>~/.bash_profile</code>\u3001<code>~/.zshrc</code> \u200b\u7b49\u200b\uff09\uff0c\u200b\u5e76\u200b\u6dfb\u52a0\u200b\uff1a</p> Bash<pre><code>export PYTHONPATH=\"/your/custom/path1:/your/custom/path2:$PYTHONPATH\"\n</code></pre> <p>\u200b\u7136\u540e\u200b\u8fd0\u884c\u200b <code>source ~/.bashrc</code> \u200b\u6216\u200b\u91cd\u542f\u200b\u7ec8\u7aef\u200b\u4ee5\u200b\u5e94\u7528\u200b\u66f4\u6539\u200b\u3002</p> <p>\u200b\u5168\u5c40\u200b\u66f4\u6539\u200b <code>PYTHONPATH</code> \u200b\u4f1a\u200b\u5f71\u54cd\u200b\u6240\u6709\u200b\u4f7f\u7528\u200b\u76f8\u540c\u200b Python \u200b\u89e3\u91ca\u5668\u200b\u7684\u200b\u9879\u76ee\u200b\uff0c\u200b\u5c0f\u5fc3\u200b\u53ef\u80fd\u200b\u5bfc\u81f4\u200b\u7684\u200b\u7248\u672c\u200b\u51b2\u7a81\u200b\u6216\u200b\u5bfc\u5165\u200b\u95ee\u9898\u200b\u3002</p>"},{"location":"weeks/python%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E8%B0%83%E7%94%A8%E5%9B%BEcall_graph/#22-\u65b9\u6cd5-2\u4f7f\u7528-pth-\u6587\u4ef6","title":"2.2 \u200b\u65b9\u6cd5\u200b 2\uff1a\u200b\u4f7f\u7528\u200b <code>.pth</code> \u200b\u6587\u4ef6","text":"<p>\u200b\u5c06\u200b\u8def\u5f84\u200b\u6dfb\u52a0\u200b\u5230\u200b Python \u200b\u7684\u200b <code>site-packages</code> \u200b\u76ee\u5f55\u200b\u5185\u200b\u7684\u200b <code>.pth</code> \u200b\u6587\u4ef6\u200b\u4e2d\u200b\u3002Python \u200b\u4f1a\u200b\u5728\u200b\u542f\u52a8\u200b\u65f6\u200b\u8bfb\u53d6\u200b\u8fd9\u4e9b\u200b\u6587\u4ef6\u200b\u5e76\u200b\u5c06\u200b\u5217\u51fa\u200b\u7684\u200b\u8def\u5f84\u200b\u6dfb\u52a0\u200b\u5230\u200b <code>sys.path</code>\u3002</p> <ol> <li>\u200b\u627e\u5230\u200b\u4f60\u200b\u7684\u200b Python \u200b\u73af\u5883\u200b\u4e2d\u200b\u7684\u200b <code>site-packages</code> \u200b\u76ee\u5f55\u200b\u3002\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u4ee5\u4e0b\u200b\u547d\u4ee4\u200b\u627e\u5230\u200b\u5b83\u200b\uff1a</li> </ol> Python<pre><code>import site\n\nprint(site.getsitepackages())\n</code></pre> <ol> <li> <p>\u200b\u5728\u200b\u8be5\u200b\u76ee\u5f55\u200b\u4e2d\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u6587\u672c\u6587\u4ef6\u200b\uff0c\u200b\u6587\u4ef6\u200b\u6269\u5c55\u200b\u540d\u4e3a\u200b <code>.pth</code>\uff08\u200b\u4f8b\u5982\u200b\uff0c<code>my_paths.pth</code>\uff09\u3002</p> </li> <li> <p>\u200b\u5728\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u5217\u51fa\u200b\u4f60\u200b\u5e0c\u671b\u200b\u6dfb\u52a0\u200b\u5230\u200b <code>sys.path</code> \u200b\u7684\u200b\u6bcf\u4e2a\u200b\u8def\u5f84\u200b\uff0c\u200b\u6bcf\u884c\u200b\u4e00\u4e2a\u200b\u8def\u5f84\u200b\u3002</p> </li> </ol> <p>\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5b9e\u73b0\u200b\u5bf9\u200b <code>sys.path</code> \u200b\u7684\u200b\u6301\u4e45\u200b\u5316\u200b\u66f4\u6539\u200b\u3002\u200b\u4e0d\u8fc7\u200b\uff0c\u200b\u6700\u597d\u200b\u8fd8\u662f\u200b\u5728\u200b\u9879\u76ee\u200b\u7ea7\u522b\u200b\u7ba1\u7406\u200b\u4f9d\u8d56\u200b\u548c\u200b\u8def\u5f84\u200b\uff0c\u200b\u4f7f\u7528\u200b\u865a\u62df\u73af\u5883\u200b(virtualenv, virtualenv wrapper\u3001 pipenv\u200b\u7b49\u200b\u5de5\u5177\u200b\u7ba1\u7406\u200b)\u200b\u53ef\u4ee5\u200b\u66f4\u597d\u200b\u5730\u200b\u63a7\u5236\u200b\u548c\u200b\u9694\u79bb\u200b\u9879\u76ee\u200b\u7684\u200b\u4f9d\u8d56\u200b\u3002</p>"},{"location":"weeks/python%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E8%B0%83%E7%94%A8%E5%9B%BEcall_graph/#ubuntu23\u5b89\u88c5python38","title":"ubuntu23\u200b\u5b89\u88c5\u200bpython3.8","text":"<p>\u200b\u5728\u200b Ubuntu 23.04 \u200b\u4e0a\u200b\uff0c\u200b\u5982\u679c\u200b\u4f60\u200b\u5df2\u7ecf\u200b\u6709\u200b\u4e86\u200b Python 3.10\uff0c\u200b\u5e76\u4e14\u200b\u5e0c\u671b\u200b\u5b89\u88c5\u200b Python 3.8\uff0c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u4ee5\u4e0b\u200b\u6b65\u9aa4\u200b\u8fdb\u884c\u200b\u5b89\u88c5\u200b\u548c\u200b\u7ba1\u7406\u200b\u591a\u4e2a\u200b Python \u200b\u7248\u672c\u200b\uff1a</p> <ol> <li>\u200b\u66f4\u65b0\u5305\u200b\u7ba1\u7406\u5668\u200b\uff1a    \u200b\u9996\u5148\u200b\uff0c\u200b\u786e\u4fdd\u200b\u4f60\u200b\u7684\u200b\u5305\u200b\u7ba1\u7406\u5668\u200b\u662f\u200b\u6700\u65b0\u200b\u7684\u200b\u3002</li> </ol> Bash<pre><code>sudo apt update\nsudo apt upgrade\n</code></pre> <ol> <li>\u200b\u5b89\u88c5\u200b Python 3.8\uff1a    Ubuntu \u200b\u7684\u200b\u5b98\u65b9\u200b\u5b58\u50a8\u200b\u5e93\u200b\u53ef\u80fd\u200b\u4e0d\u200b\u5305\u542b\u200b\u8f83\u200b\u65e7\u7248\u672c\u200b\u7684\u200b Python\uff0c\u200b\u56e0\u6b64\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>deadsnakes</code> PPA \u200b\u6765\u200b\u5b89\u88c5\u200b Python 3.8\u3002</li> </ol> Bash<pre><code>sudo add-apt-repository ppa:deadsnakes/ppa\nsudo apt update\nsudo apt install python3.8\n</code></pre> <ol> <li>\u200b\u9a8c\u8bc1\u200b\u5b89\u88c5\u200b\uff1a    \u200b\u5b89\u88c5\u200b\u5b8c\u6210\u200b\u540e\u200b\uff0c\u200b\u9a8c\u8bc1\u200b Python 3.8 \u200b\u662f\u5426\u200b\u6b63\u786e\u200b\u5b89\u88c5\u200b\u3002</li> </ol> Bash<pre><code>python3.8 --version\n</code></pre> <ol> <li>\u200b\u7ba1\u7406\u200b\u591a\u4e2a\u200b Python \u200b\u7248\u672c\u200b\uff1a    \u200b\u4f7f\u7528\u200b <code>update-alternatives</code> \u200b\u547d\u4ee4\u200b\u6765\u200b\u7ba1\u7406\u200b\u591a\u4e2a\u200b Python \u200b\u7248\u672c\u200b\u3002</li> </ol> <p>\u200b\u9996\u5148\u200b\uff0c\u200b\u4e3a\u200b\u65b0\u200b\u7684\u200b Python \u200b\u7248\u672c\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u66ff\u4ee3\u200b\u9879\u200b\u3002</p> Bash<pre><code>sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 1\nsudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 2\n</code></pre> <p>\u200b\u7136\u540e\u200b\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u4ee5\u4e0b\u200b\u547d\u4ee4\u200b\u6765\u200b\u9009\u62e9\u200b\u9ed8\u8ba4\u200b\u7684\u200b Python \u200b\u7248\u672c\u200b\uff1a</p> Bash<pre><code>sudo update-alternatives --config python3\n</code></pre> <p>\u200b\u8fd9\u200b\u5c06\u200b\u663e\u793a\u200b\u4e00\u4e2a\u200b\u9009\u62e9\u200b\u5217\u8868\u200b\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5728\u200b\u5176\u4e2d\u200b\u9009\u62e9\u200b\u8981\u200b\u4f7f\u7528\u200b\u7684\u200b\u9ed8\u8ba4\u200b Python \u200b\u7248\u672c\u200b\u3002</p> <ol> <li>\u200b\u5b89\u88c5\u200b pip\uff1a    \u200b\u5982\u679c\u200b\u9700\u8981\u200b\u4e3a\u200b Python 3.8 \u200b\u5b89\u88c5\u200b <code>pip</code>\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u4ee5\u4e0b\u200b\u547d\u4ee4\u200b\uff1a</li> </ol> Bash<pre><code>sudo apt install python3.8-venv python3.8-distutils\ncurl https://bootstrap.pypa.io/get-pip.py | sudo python3.8\n</code></pre> <p>\u200b\u8fd9\u6837\u200b\uff0c\u200b\u4f60\u200b\u5c31\u200b\u6210\u529f\u200b\u5730\u200b\u5728\u200b Ubuntu 23.04 \u200b\u4e0a\u200b\u5b89\u88c5\u200b\u4e86\u200b Python 3.8\uff0c\u200b\u5e76\u200b\u80fd\u591f\u200b\u5728\u200b Python 3.10 \u200b\u548c\u200b Python 3.8 \u200b\u4e4b\u95f4\u200b\u8fdb\u884c\u200b\u5207\u6362\u200b\u3002\u200b\u4f7f\u7528\u200b\u865a\u62df\u73af\u5883\u200b\uff08<code>venv</code>\uff09\u200b\u4e5f\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5f88\u200b\u597d\u200b\u7684\u200b\u65b9\u5f0f\u200b\u6765\u200b\u9694\u79bb\u200b\u4e0d\u540c\u200b\u9879\u76ee\u200b\u7684\u200b Python \u200b\u4f9d\u8d56\u200b\u3002</p>"},{"location":"weeks/%E4%BB%8B%E7%BB%8D%E8%A1%A5%E7%A0%81%E7%9A%84%E4%B8%80%E7%AF%87%E5%BE%88%E5%A5%BD%E7%9A%84%E6%96%87%E7%AB%A0/","title":"\u4ecb\u7ecd\u200b\u8865\u7801\u200b\u7684\u200b\u4e00\u7bc7\u200b\u5f88\u200b\u597d\u200b\u7684\u200b\u6587\u7ae0","text":""},{"location":"weeks/%E4%BB%8B%E7%BB%8D%E8%A1%A5%E7%A0%81%E7%9A%84%E4%B8%80%E7%AF%87%E5%BE%88%E5%A5%BD%E7%9A%84%E6%96%87%E7%AB%A0/#\u4ecb\u7ecd\u8865\u7801\u7684\u4e00\u7bc7\u5f88\u597d\u7684\u6587\u7ae0","title":"\u4ecb\u7ecd\u200b\u8865\u7801\u200b\u7684\u200b\u4e00\u7bc7\u200b\u5f88\u200b\u597d\u200b\u7684\u200b\u6587\u7ae0","text":"<p>https://edgeai-lab.github.io/notebook/Embedded%20System/c%26c%2B%2B/complement/</p>"},{"location":"weeks/%E4%BB%8B%E7%BB%8D%E8%A1%A5%E7%A0%81%E7%9A%84%E4%B8%80%E7%AF%87%E5%BE%88%E5%A5%BD%E7%9A%84%E6%96%87%E7%AB%A0/#\u68c0\u6d4babi\u517c\u5bb9\u6027","title":"\u68c0\u6d4b\u200bABI\u200b\u517c\u5bb9\u6027","text":"<p><code>libabigail</code>\u200b\u548c\u200b<code>abi-compliance-checker</code>\u200b\u662f\u200b\u4e24\u4e2a\u200b\u7528\u4e8e\u200b\u68c0\u6d4b\u200b\u548c\u200b\u5206\u6790\u200bC/C++\u200b\u5e93\u200bAPI/ABI\uff08\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e8c\u8fdb\u5236\u200b\u63a5\u53e3\u200b\uff09\u200b\u517c\u5bb9\u6027\u200b\u53d8\u5316\u200b\u7684\u200b\u5de5\u5177\u200b\u3002\u200b\u5b83\u4eec\u200b\u53ef\u4ee5\u200b\u5e2e\u52a9\u200b\u5e93\u200b\u7684\u200b\u7ef4\u62a4\u8005\u200b\u786e\u4fdd\u200b\u5728\u200b\u7248\u672c\u200b\u66f4\u65b0\u200b\u65f6\u200b\u4e0d\u4f1a\u200b\u5f15\u5165\u200b\u4e0e\u200b\u65e7\u7248\u672c\u200b\u4e0d\u200b\u517c\u5bb9\u200b\u7684\u200b\u6539\u53d8\u200b\uff0c\u200b\u4ece\u800c\u200b\u7834\u574f\u200b\u4f9d\u8d56\u200b\u8be5\u5e93\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u3002</p>"},{"location":"weeks/%E4%BB%8B%E7%BB%8D%E8%A1%A5%E7%A0%81%E7%9A%84%E4%B8%80%E7%AF%87%E5%BE%88%E5%A5%BD%E7%9A%84%E6%96%87%E7%AB%A0/#git\u521b\u5efa\u65b0\u5206\u652f\u7ed1\u5b9a\u8fdc\u7a0b\u5206\u652f","title":"git\u200b\u521b\u5efa\u200b\u65b0\u200b\u5206\u652f\u200b\u7ed1\u5b9a\u200b\u8fdc\u7a0b\u200b\u5206\u652f","text":"<p>\u200b\u5148\u200b\u5728\u200b\u672c\u5730\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u5206\u652f\u200bxxx\uff0c\u200b\u4fee\u6539\u200b\u540e\u200b\u63d0\u4ea4\u200bcommit\u3002 \u200b\u7136\u540e\u200bgit pull \u2013rebase\u200b\u4f1a\u200b\u63d0\u793a\u200b\u4f60\u200b\u7ed1\u5b9a\u200b\u8fdc\u7a0b\u200b\u5206\u652f\u200b\u3002 \u200b\u53bb\u200b\u521b\u5efa\u200b\u8fdc\u7a0b\u200b\u5206\u652f\u200b\uff0c\u200b\u7136\u540e\u200b\u6267\u884c\u200b\u4e0b\u9762\u200b\u7684\u200b\u547d\u4ee4\u200b\u3002</p> Bash<pre><code>git branch --set-upstream-to=origin/xxx xxx\n</code></pre> <p>\u200b\u7136\u540e\u200bgit pull \u2013rebase\u200b\u5c31\u200b\u4f1a\u200b\u53d1\u73b0\u200b\u672c\u5730\u200b\u9886\u5148\u200b\u8fdc\u7a0b\u200b\u4e00\u4e2a\u200bcommit\u3002 \u200b\u7136\u540e\u200b\u5c31\u200b\u53ef\u4ee5\u200bgit push origin xxx\u200b\u4e86\u200b\u3002</p>"},{"location":"weeks/%E4%BB%8B%E7%BB%8D%E8%A1%A5%E7%A0%81%E7%9A%84%E4%B8%80%E7%AF%87%E5%BE%88%E5%A5%BD%E7%9A%84%E6%96%87%E7%AB%A0/#gcc-\u7248\u672c\u4f9d\u8d56elf\u4fee\u6539","title":"gcc \u200b\u7248\u672c\u200b\u4f9d\u8d56\u200bELF\u200b\u4fee\u6539","text":""},{"location":"weeks/%E4%BB%8B%E7%BB%8D%E8%A1%A5%E7%A0%81%E7%9A%84%E4%B8%80%E7%AF%87%E5%BE%88%E5%A5%BD%E7%9A%84%E6%96%87%E7%AB%A0/#linux\u4fee\u6539elf\u89e3\u51b3glibc\u517c\u5bb9\u6027\u95ee\u9898","title":"Linux\u200b\u4fee\u6539\u200bELF\u200b\u89e3\u51b3\u200bglibc\u200b\u517c\u5bb9\u6027\u95ee\u9898","text":"<p>https://zohead.com/archives/mod-elf-glibc/</p>"},{"location":"weeks/%E4%BB%8B%E7%BB%8D%E8%A1%A5%E7%A0%81%E7%9A%84%E4%B8%80%E7%AF%87%E5%BE%88%E5%A5%BD%E7%9A%84%E6%96%87%E7%AB%A0/#\u6307\u5b9adynamic-linker\u4ee5\u4f7f\u7528\u9ad8\u7248\u672cgcc","title":"\u6307\u5b9a\u200bdynamic linker\u200b\u4ee5\u200b\u4f7f\u7528\u200b\u9ad8\u200b\u7248\u672c\u200bGCC","text":"<p>https://maskray.me/blog/2015-09-29-specify-dynamic-linker-to-use-higher-version-gcc</p>"},{"location":"weeks/%E5%9F%BA%E4%BA%8EDocusaurus%E6%90%AD%E5%BB%BAgithub_pages%E5%B1%95%E7%A4%BA%E9%A1%B9%E7%9B%AE/","title":"\u57fa\u4e8e\u200bDocusaurus\u200b\u642d\u5efa\u200bgithub pages\u200b\u5c55\u793a\u200b\u9879\u76ee","text":"<p>\u200b\u57fa\u4e8e\u200bDocusaurus\u200b\u642d\u5efa\u200bgithub_pages\u200b\u6548\u679c\u200b\u5982\u56fe\u6240\u793a\u200b\uff1a</p> <p></p> <p>\u200b\u6bd4\u5982\u200b\u4f60\u200b\u6709\u200b\u4e00\u4e9b\u200b\u9879\u76ee\u200b\u4ecb\u7ecd\u200b\u6587\u6863\u200b\uff0c\u200b\u6216\u8005\u200b\u4f60\u200b\u4e0d\u60f3\u200b\u628a\u200b\u6587\u6863\u200b\u653e\u5728\u200b\u535a\u5ba2\u200b\u91cc\u9762\u200b\uff0c\u200b\u6216\u8005\u200b\u4f60\u200b\u60f3\u200b\u5199\u672c\u200b\u7535\u5b50\u4e66\u200b\u3002\u200b\u4f60\u200b\u6709\u200b\u5f88\u591a\u200b\u6280\u672f\u200b\u9009\u62e9\u200b\uff0c\u200b\u5305\u62ec\u200b\u9759\u6001\u200b\u7684\u200b\u52a8\u6001\u200b\u7684\u200b\u7f51\u9875\u200b\uff0c\u200b\u7ecf\u8fc7\u200b\u8c03\u7814\u200b\uff0c\u200b\u770b\u200b\u4e86\u200b\u51e0\u4e2a\u200b\u7f51\u9875\u200b\u4ecb\u7ecd\u200b\uff0c\u200b\u90fd\u200b\u8bf4\u200bDocusaurus\u200b\u597d\u200b\uff0c\u200b\u90a3\u200b\u76f4\u63a5\u200b\u5f00\u5e72\u200b\u3002</p> <p>\u200b\u56e0\u4e3a\u200b\u6211\u200b\u7684\u200b\u535a\u5ba2\u200bkenforever1\u2019s Blog\u200b\u662f\u200b\u57fa\u4e8e\u200bMkDocs\u200b\u642d\u5efa\u200b\u7684\u200b\uff0c\u200b\u56e0\u6b64\u200b\u6362\u4e2a\u200b\u6280\u672f\u200b\u8bd5\u4e00\u4e0b\u200b\u3002</p> <p>\u200b\u4f60\u200b\u6216\u8bb8\u200b\u6709\u4e2a\u200b\u7591\u95ee\u200b\uff0c\u200b\u6211\u200b\u5df2\u7ecf\u200b\u6709\u4e2a\u200bgithub\u200b\u90e8\u7f72\u200b\u7684\u200bmarkdown\u200b\u9759\u6001\u200b\u535a\u5ba2\u200b\uff0c\u200b\u6bd4\u5982\u200bxxx.github.io\u200b\u8bbf\u95ee\u200b\u3002\u200b\u6211\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200bgood_proj\u200b\u7684\u200b\u9879\u76ee\u200b\uff0c\u200b\u7136\u540e\u200b\u4e3a\u200b\u8fd9\u4e2a\u200b\u9879\u76ee\u200b\u642d\u5efa\u200b\u4e00\u4e2a\u200b\u9759\u6001\u200b\u9879\u76ee\u200b\u6587\u6863\u200b\u7f51\u9875\u200b\u5417\u200b\uff1f</p> <p>\u200b\u5f53\u7136\u200b\uff0c\u200b\u8fd9\u200b\u5e76\u200b\u4e0d\u200b\u51b2\u7a81\u200b\uff0c\u200b\u642d\u5efa\u200b\u597d\u200b\u4e86\u200b\u4ee5\u540e\u200b\u901a\u8fc7\u200bxxx.github.io/good_proj\u200b\u8bbf\u95ee\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u4e86\u200b\u3002</p>"},{"location":"weeks/%E5%9F%BA%E4%BA%8EDocusaurus%E6%90%AD%E5%BB%BAgithub_pages%E5%B1%95%E7%A4%BA%E9%A1%B9%E7%9B%AE/#\u521d\u59cb\u5316\u6a21\u677f","title":"\u521d\u59cb\u5316\u200b\u6a21\u677f","text":"<p>\u200b\u76f4\u63a5\u200b\u4e0a\u200b\u6700\u200b\u7b80\u5355\u200b\u7684\u200b\u6b65\u9aa4\u200b\uff1a </p>Bash<pre><code>npx create-docusaurus@latest my-website classic\n</code></pre><p></p> <p>\u200b\u5b89\u88c5\u200b\u7684\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\uff0c\u200b\u4f1a\u200b\u8ba9\u200b\u4f60\u200b\u9009\u62e9\u200b\u8bed\u8a00\u200b\uff0c\u200b\u9009\u62e9\u200b\u4e2a\u200bjavascript\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u4e86\u200b\u3002</p> <p>\u200b\u5728\u200b\u672c\u5730\u200b\u542f\u52a8\u200b\u4f8b\u5b50\u200b\u7a0b\u5e8f\u200b\u3002 </p>Bash<pre><code>npm start\n</code></pre><p></p> <p>\u200b\u7136\u540e\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u53bb\u200bdocs\u200b\u76ee\u5f55\u200b\u4e0b\u200b\u628a\u200b\u9ed8\u8ba4\u200b\u7684\u200b\u6587\u7ae0\u200b\u535a\u5ba2\u200b\u5185\u5bb9\u200b\u90fd\u200b\u5220\u9664\u200b\u4e86\u200b\uff0c\u200b\u6362\u6210\u200b\u4f60\u200b\u7684\u200b\u3002\u200b\u7136\u540e\u200b\u53bb\u200bdocusaurus.config.js\u200b\u4e2d\u200b\u628a\u200b\u4e00\u4e9b\u200b\u540d\u5b57\u200b\u6539\u6539\u200b\uff0c\u200b\u628a\u200b\u8d85\u94fe\u63a5\u200b\u6ce8\u91ca\u200b\u4e00\u4e0b\u200b\u3002\u200b\u4e00\u4e2a\u200b\u5e72\u51c0\u200b\u7684\u200b\u7f51\u7ad9\u200b\u5c31\u200b\u6709\u200b\u4e86\u200b\u3002</p> <p>\u200b\u6ce8\u91ca\u200b\u7684\u200b\u5185\u5bb9\u200b\u6bd4\u5982\u200b\uff1a + src/components/HomepageFeatures/index.js \u200b\u4e2d\u200b + src/pages/index.js\u200b\u4e2d\u200b</p>"},{"location":"weeks/%E5%9F%BA%E4%BA%8EDocusaurus%E6%90%AD%E5%BB%BAgithub_pages%E5%B1%95%E7%A4%BA%E9%A1%B9%E7%9B%AE/#\u4fee\u6539\u4f60\u7684\u5185\u5bb9\u548c\u914d\u7f6e","title":"\u4fee\u6539\u200b\u4f60\u200b\u7684\u200b\u5185\u5bb9\u200b\u548c\u200b\u914d\u7f6e","text":"<p>\u200b\u7f16\u8f91\u200bdocusaurus.config.js\u200b\u6587\u4ef6\u200b, + \u200b\u9879\u76ee\u540d\u79f0\u200bprojectName\u200b\u6539\u4e3a\u200b\u4f60\u200b\u521b\u5efa\u200b\u7684\u200bgithub\u200b\u9879\u76ee\u200b + url\u200b\u6539\u6210\u200b\u4f60\u200b\u7684\u200b + baseUrl\u200b\u6539\u6210\u200b\u4f60\u200b\u7684\u200b\u9879\u76ee\u540d\u79f0\u200b</p> JavaScript<pre><code>const config = {\n  title: 'LLM cool Docs',\n  tagline: 'Dinosaurs are cool',\n  favicon: 'img/favicon.ico',\n\n  // Set the production url of your site here\n  url: 'https://KenForever1.github.io/',\n  // Set the /&lt;baseUrl&gt;/ pathname under which your site is served\n  // For GitHub pages deployment, it is often '/&lt;projectName&gt;/'\n  baseUrl: '/llm_cool_docs/',\n\n  // GitHub pages deployment config.\n  // If you aren't using GitHub pages, you don't need these.\n  organizationName: 'KenForever1', // Usually your GitHub org/user name.\n  projectName: 'llm_cool_docs', // Usually your repo name.\n\n}\n</code></pre>"},{"location":"weeks/%E5%9F%BA%E4%BA%8EDocusaurus%E6%90%AD%E5%BB%BAgithub_pages%E5%B1%95%E7%A4%BA%E9%A1%B9%E7%9B%AE/#\u8bed\u6cd5\u9ad8\u4eae","title":"\u8bed\u6cd5\u200b\u9ad8\u4eae","text":"<p>\u200b\u9ed8\u8ba4\u200bpython\u200b\u662f\u200b\u8bed\u6cd5\u200b\u9ad8\u4eae\u200b\u7684\u200b\uff0c\u200b\u4f46\u662f\u200bcpp\u200b\u8fd9\u4e9b\u200b\u6ca1\u6709\u200b\uff0c\u200b\u4fee\u6539\u200b\u914d\u7f6e\u6587\u4ef6\u200bdocusaurus.config.js\uff0c\u200b\u6dfb\u52a0\u200b\uff1a </p>JavaScript<pre><code>      prism: {\n        theme: prismThemes.github,\n        darkTheme: prismThemes.dracula,\n        additionalLanguages: ['cpp','rust'],\n      },\n</code></pre> \u200b\u914d\u7f6e\u200b\u4e2d\u200b\u7684\u200b\u540d\u5b57\u200b,\u200b\u6bd4\u5982\u200bcpp\u200b\u4e0d\u80fd\u200b\u662f\u200bc++\uff0c\u200b\u53bb\u200b\u7f51\u7ad9\u200b\u4e0a\u200bhttps://prismjs.com/#supported-languages\u200b\u627e\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u8fd9\u4e2a\u200b\u5b9e\u73b0\u200b\u662f\u200b\u57fa\u4e8e\u200bprismjs\u200b\u9ad8\u4eae\u200b\u7684\u200b\u3002<p></p>"},{"location":"weeks/%E5%9F%BA%E4%BA%8EDocusaurus%E6%90%AD%E5%BB%BAgithub_pages%E5%B1%95%E7%A4%BA%E9%A1%B9%E7%9B%AE/#\u5982\u4f55\u90e8\u7f72\u5230github-pages","title":"\u5982\u4f55\u200b\u90e8\u7f72\u200b\u5230\u200bgithub pages","text":"<p>\u200b\u5728\u200bgithub\u200b\u4e0a\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200bmy-website\u200b\u7684\u200bpublic\u200b\u9879\u76ee\u200b\u3002</p> <p>\u200b\u5728\u200b\u4f60\u200b\u7684\u200b\u5f00\u53d1\u200b\u673a\u5668\u200b\u4e0a\u200b\uff0c\u200b\u5b89\u88c5\u200byarn </p>Text Only<pre><code>$ sudo npm install yarn\n</code></pre><p></p> <p>\u200b\u5728\u200b\u4f60\u200b\u7684\u200b\u5f00\u53d1\u200b\u673a\u4e0a\u200b\u5e94\u8be5\u200b\u90fd\u200b\u914d\u7f6e\u200b\u4e86\u200bssh\u200b\u9a8c\u8bc1\u200b\u8fde\u63a5\u200bgithub\u200b\u5427\u200b\uff0c\u200b\u7136\u540e\u200b\u63a8\u9001\u200b\u90e8\u7f72\u200b\uff1a </p>Bash<pre><code>$ USE_SSH=true yarn deploy\n</code></pre><p></p> <p>\u200b\u6211\u200b\u90e8\u7f72\u200b\u597d\u200b\u4e86\u200b\u4ee5\u540e\u200b\u7684\u200b\u7f51\u7ad9\u200b\uff0ckenforever1.github.io/llm_cool_docs\u3002</p>"},{"location":"weeks/%E5%9F%BA%E4%BA%8EDocusaurus%E6%90%AD%E5%BB%BAgithub_pages%E5%B1%95%E7%A4%BA%E9%A1%B9%E7%9B%AE/#\u6539\u4e3agithub-workflow\u81ea\u52a8\u90e8\u7f72","title":"\u6539\u4e3a\u200bgithub workflow\u200b\u81ea\u52a8\u200b\u90e8\u7f72","text":"<p>\u200b\u4e0a\u9762\u200b\u7684\u200b\u624b\u52a8\u200b\u90e8\u7f72\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u662f\u200b\u6ca1\u6709\u200b\u628a\u200bmarkdown\u200b\u6587\u4ef6\u200b\u63d0\u4ea4\u200b\u5230\u200bgit\u200b\u4e0a\u200b\u7684\u200b\u3002\u200b\u6211\u4eec\u200b\u5e0c\u671b\u200b\u628a\u200bmarkdown\u200b\u5185\u5bb9\u200b\u63d0\u4ea4\u200b\u5230\u200b\u4e3b\u200b\u5206\u652f\u200b\uff0c\u200b\u7136\u540e\u200b\u81ea\u52a8\u200b\u89e6\u53d1\u200bworkflow\u200b\u90e8\u7f72\u200b\u7f16\u8bd1\u200b\u597d\u200b\u7684\u200bhtml\u200b\u5230\u200bgh-pages\u200b\u5206\u652f\u200b\u3002</p> <p>\u200b\u5206\u4e3a\u200b\u5982\u4e0b\u200b\u6b65\u9aa4\u200b\uff1a + \u200b\u8fdb\u5165\u200bgithub setting\uff0c\u200b\u521b\u5efa\u200bDeveloper Setting-&gt;Personal access token -&gt; Fine grained tokens -&gt; Generate new token\u3002\u200b\u5e76\u4e14\u200b\u52fe\u9009\u200b\u76f8\u5173\u200b\u7684\u200b\u6743\u9650\u200b\u3002 + \u200b\u5c06\u200bKenForever1/llm_cool_docs\u200b\u9879\u76ee\u200b\u7684\u200bSetting\u200b\u4e2d\u200b\uff0cPages-&gt;Build and deployment,\u200b\u6539\u4e3a\u200bGithub Actions\u3002 + \u200b\u672c\u5730\u200b\u521b\u5efa\u200bmain\u200b\u5206\u652f\u200b\uff0c\u200b\u521b\u5efa\u200b.github/workflows/deploy.yml\u200b\u6587\u4ef6\u200b</p> Text Only<pre><code>git checkout -b main\n</code></pre> <p>deploy.yml\u200b\u6587\u4ef6\u200b\u5185\u5bb9\u200b\uff1a </p>YAML<pre><code>name: Deploy to GitHub Pages\n\non:\n  push:\n    branches:\n      - main\n    # Review gh actions docs if you want to further define triggers, paths, etc\n    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#on\n\njobs:\n  build:\n    name: Build Docusaurus\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n      - uses: actions/setup-node@v4\n        with:\n          node-version: 18\n          cache: yarn\n\n      - name: Install dependencies\n        run: yarn install --frozen-lockfile\n      - name: Build website\n        run: yarn build\n\n      - name: Upload Build Artifact\n        uses: actions/upload-pages-artifact@v3\n        with:\n          path: build\n\n  deploy:\n    name: Deploy to GitHub Pages\n    needs: build\n\n    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment\n    permissions:\n      pages: write # to deploy to Pages\n      id-token: write # to verify the deployment originates from an appropriate source\n\n    # Deploy to the github-pages environment\n    environment:\n      name: github-pages\n      url: ${{ steps.deployment.outputs.page_url }}\n\n    runs-on: ubuntu-latest\n    steps:\n      - name: Deploy to GitHub Pages\n        id: deployment\n        uses: actions/deploy-pages@v4\n</code></pre><p></p> <p>\u200b\u4fdd\u5b58\u200b\u63d0\u4ea4\u200bgithub\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u89e6\u53d1\u200bworkflow\u200b\u4e86\u200b\u3002</p> <p>\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u53ef\u4ee5\u200b\u5728\u200btriggering-deployment-with-github-actions\u200b\u8fd9\u91cc\u200b\u627e\u5230\u200b\u3002</p> <p>\u200b\u53c2\u8003\u200b\uff1a + \u200b\u57fa\u4e8e\u200b Docusaurus \u200b\u642d\u5efa\u200b\u81ea\u200b\u5efa\u200b\u535a\u5ba2\u200b</p> <ul> <li>docusaurus deployment</li> </ul>"},{"location":"weeks/%E7%BC%96%E8%AF%91Opencv%E5%92%8CFFmpeg/","title":"\u7f16\u8bd1\u200bOpencv\u200b\u548c\u200bFFmpeg","text":""},{"location":"weeks/%E7%BC%96%E8%AF%91Opencv%E5%92%8CFFmpeg/#1-\u5b89\u88c5ffmpeg","title":"1 \u200b\u5b89\u88c5\u200bffmpeg","text":""},{"location":"weeks/%E7%BC%96%E8%AF%91Opencv%E5%92%8CFFmpeg/#11-\u4e0b\u8f7dffmpeg","title":"1.1 \u200b\u4e0b\u8f7d\u200bffmpeg","text":"<p>\u200b\u4e0b\u73ed\u200bffmpeg\u200b\u5c0f\u4e8e\u200b4.4\u200b\u7248\u672c\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u4e0b\u8f7d\u200bffmpeg 4.1\u200b\u7248\u672c\u200b\u3002</p>"},{"location":"weeks/%E7%BC%96%E8%AF%91Opencv%E5%92%8CFFmpeg/#12-\u7f16\u8bd1ffmpeg","title":"1.2 \u200b\u7f16\u8bd1\u200bffmpeg","text":"<p>\u200b\u7f16\u8bd1\u200b\u7684\u200bbin\u3001so\u200b\u7b49\u200b\u6587\u4ef6\u200b\uff0c\u200b\u5c31\u200b\u653e\u5728\u200bffmpeg\u200b\u6e90\u7801\u200b\u6839\u76ee\u5f55\u200b\u3002 </p>Bash<pre><code>cd\u00a0ffmpeg\n\n./configure\u00a0--enable-shared\u00a0--disable-x86asm\u00a0--libdir=.\u00a0--prefix=.\u00a0--disable-static\n\nmake\u00a0-j8\n\nmake\u00a0install\n\nmkdir\u00a0ffmpeg-4.1\n\ncd\u00a0ffmpeg-4.1\u00a0&amp;&amp;\u00a0mkdir\u00a0lib\u00a0&amp;&amp;\u00a0cd\u00a0..\n\nmv\u00a0lib*.so*\u00a0ffmpeg-4.1/lib\n\nmv\u00a0bin\u00a0ffmpeg-4.1/\n\nmv\u00a0include\u00a0ffmpeg-4.1/\n\nmv\u00a0share\u00a0ffmpeg-4.1/\n\nmv\u00a0pkgconfig\u00a0ffmpeg-4.1/lib/\n</code></pre><p></p> Bash<pre><code>$\u00a0ls\u00a0ffmpeg-4.1\n\nbin\u00a0\u00a0ffmpeg-config.cmake\u00a0\u00a0FfmpegConfig.cmake\u00a0\u00a0include\u00a0\u00a0lib\u00a0\u00a0share\n</code></pre>"},{"location":"weeks/%E7%BC%96%E8%AF%91Opencv%E5%92%8CFFmpeg/#13-\u7f16\u5199ffmpeg-configcmake\u6587\u4ef6","title":"1.3 \u200b\u7f16\u5199\u200bffmpeg-config.cmake\u200b\u6587\u4ef6","text":"<p>\u200b\u7f16\u5199\u200bffmpeg-config.cmake\u200b\u6587\u4ef6\u200b\u662f\u200b\u4e3a\u4e86\u200b\u8ba9\u200bopencv\u200b\u7f16\u8bd1\u200b\u65f6\u200b\uff0c\u200b\u6b63\u786e\u200b\u7684\u200b\u627e\u5230\u200b\u8fd9\u4e2a\u200bffmpeg\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u3002FfmpegConfig.cmake\u200b\u6587\u4ef6\u200b\u7684\u200b\u5185\u5bb9\u200b\u548c\u200bffmpeg-config.cmake\u200b\u6587\u4ef6\u200b\u76f8\u540c\u200b\u3002\u200b\u547d\u540d\u200b\u89c4\u5219\u200b\u5b89\u88c5\u200bcmake find_package\u200b\u7684\u200b\u547d\u4ee4\u200b\u65b9\u5f0f\u200b\u3002</p> Bash<pre><code>set(ffmpeg_path\u00a0\"${CMAKE_CURRENT_LIST_DIR}\")\n\nmessage(\"ffmpeg_path:\u00a0${ffmpeg_path}\")\n\nset(FFMPEG_EXEC_DIR\u00a0\"${ffmpeg_path}/bin\")\n\nset(FFMPEG_LIBDIR\u00a0\"${ffmpeg_path}/lib\")\n\nset(FFMPEG_INCLUDE_DIRS\u00a0\"${ffmpeg_path}/include\")\n\n#\u00a0library\u00a0names\n\nset(FFMPEG_LIBRARIES\n\n\u00a0\u00a0\u00a0\u00a0${FFMPEG_LIBDIR}/libavformat.so\n\n\u00a0\u00a0\u00a0\u00a0${FFMPEG_LIBDIR}/libavdevice.so\n\n\u00a0\u00a0\u00a0\u00a0${FFMPEG_LIBDIR}/libavcodec.so\n\n\u00a0\u00a0\u00a0\u00a0${FFMPEG_LIBDIR}/libavutil.so\n\n\u00a0\u00a0\u00a0\u00a0${FFMPEG_LIBDIR}/libswscale.so\n\n\u00a0\u00a0\u00a0\u00a0${FFMPEG_LIBDIR}/libswresample.so\n\n\u00a0\u00a0\u00a0\u00a0${FFMPEG_LIBDIR}/libavfilter.so\n\n)\n\n#\u00a0found\u00a0status\n\nset(FFMPEG_libavformat_FOUND\u00a0TRUE)\n\nset(FFMPEG_libavdevice_FOUND\u00a0TRUE)\n\nset(FFMPEG_libavcodec_FOUND\u00a0TRUE)\n\nset(FFMPEG_libavutil_FOUND\u00a0TRUE)\n\nset(FFMPEG_libswscale_FOUND\u00a0TRUE)\n\nset(FFMPEG_libswresample_FOUND\u00a0TRUE)\n\nset(FFMPEG_libavfilter_FOUND\u00a0TRUE)\n\n#\u00a0library\u00a0versions,\u00a0\u200b\u6ce8\u610f\u200b\u8fd9\u200b\u51e0\u4e2a\u200b\u53d8\u91cf\u200b\uff0c\u200b\u4e00\u5b9a\u200b\u8981\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b\u5168\u5c40\u200bCACHE\u200b\u53d8\u91cf\u200b\n\nset(FFMPEG_libavutil_VERSION\u00a056.31.100\u00a0CACHE\u00a0INTERNAL\u00a0\"FFMPEG_libavutil_VERSION\")\u00a0#\u00a0info\n\nset(FFMPEG_libavcodec_VERSION\u00a058.54.100\u00a0CACHE\u00a0INTERNAL\u00a0\"FFMPEG_libavcodec_VERSION\")\u00a0#\u00a0info\n\nset(FFMPEG_libavformat_VERSION\u00a058.29.100\u00a0CACHE\u00a0INTERNAL\u00a0\"FFMPEG_libavformat_VERSION\")\u00a0#\u00a0info\n\nset(FFMPEG_libavdevice_VERSION\u00a058.8.100\u00a0CACHE\u00a0INTERNAL\u00a0\"FFMPEG_libavdevice_VERSION\")\u00a0#\u00a0info\n\nset(FFMPEG_libavfilter_VERSION\u00a07.57.100\u00a0CACHE\u00a0INTERNAL\u00a0\"FFMPEG_libavfilter_VERSION\")\u00a0#\u00a0info\n\nset(FFMPEG_libswscale_VERSION\u00a05.5.100\u00a0CACHE\u00a0INTERNAL\u00a0\"FFMPEG_libswscale_VERSION\")\u00a0#\u00a0info\n\nset(FFMPEG_libswresample_VERSION\u00a03.5.100\u00a0CACHE\u00a0INTERNAL\u00a0\"FFMPEG_libswresample_VERSION\")\u00a0#\u00a0info\n\nset(FFMPEG_FOUND\u00a0TRUE)\n\nset(FFMPEG_LIBS\u00a0${FFMPEG_LIBRARIES})\n\nstatus(\"\u00a0\u00a0\u00a0\u00a0####################################\u00a0FFMPEG:\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FFMPEG_FOUND\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0THEN\u00a0\"YES\u00a0(find_package)\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ELSE\u00a0\"NO\u00a0(find_package)\")\n\nstatus(\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0avcodec:\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FFMPEG_libavcodec_VERSION\u00a0\u00a0\u00a0\u00a0THEN\u00a0\"YES\u00a0(${FFMPEG_libavcodec_VERSION})\"\u00a0\u00a0\u00a0\u00a0ELSE\u00a0NO)\n\nstatus(\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0avformat:\"\u00a0\u00a0\u00a0\u00a0\u00a0FFMPEG_libavformat_VERSION\u00a0\u00a0\u00a0THEN\u00a0\"YES\u00a0(${FFMPEG_libavformat_VERSION})\"\u00a0\u00a0\u00a0ELSE\u00a0NO)\n\nstatus(\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0avutil:\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FFMPEG_libavutil_VERSION\u00a0\u00a0\u00a0\u00a0\u00a0THEN\u00a0\"YES\u00a0(${FFMPEG_libavutil_VERSION})\"\u00a0\u00a0\u00a0\u00a0\u00a0ELSE\u00a0NO)\n\nstatus(\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0swscale:\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FFMPEG_libswscale_VERSION\u00a0\u00a0\u00a0\u00a0THEN\u00a0\"YES\u00a0(${FFMPEG_libswscale_VERSION})\"\u00a0\u00a0\u00a0\u00a0ELSE\u00a0NO)\n\nstatus(\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0avresample:\"\u00a0\u00a0\u00a0FFMPEG_libavresample_VERSION\u00a0THEN\u00a0\"YES\u00a0(${FFMPEG_libavresample_VERSION})\"\u00a0ELSE\u00a0NO)\n</code></pre>"},{"location":"weeks/%E7%BC%96%E8%AF%91Opencv%E5%92%8CFFmpeg/#2-\u5b89\u88c5opencv","title":"2 \u200b\u5b89\u88c5\u200bOpencv","text":""},{"location":"weeks/%E7%BC%96%E8%AF%91Opencv%E5%92%8CFFmpeg/#21-\u7f16\u8bd1opencv","title":"2.1 \u200b\u7f16\u8bd1\u200bopencv","text":"<p>\u200b\u7f16\u5199\u200bbuild_with_ffmpeg4-1.sh\u200b\u6587\u4ef6\u200b\uff0c\u200b\u7f16\u8bd1\u200bopencv</p> Bash<pre><code>#!/bin/bash\n\nOPENCV_INSTALL_DIR=`pwd`/opencv_install\n\nmkdir\u00a0-p\u00a0${OPENCV_INSTALL_DIR}\n\nFFMPEG_FIND_DIR=`pwd`/compile_opencv/ffmpeg-4.1/ffmpeg-4.1/\n\nBUILD_DIR=build_ffmpeg4.1\n\nmkdir\u00a0${BUILD_DIR}\n\ncd\u00a0${BUILD_DIR}\u00a0||\u00a0return\n\npwd\n\ncmake\u00a0..\u00a0\\\n\n\u00a0\u00a0-D\u00a0CMAKE_BUILD_TYPE=Release\u00a0\\\n\n\u00a0\u00a0-D\u00a0CMAKE_INSTALL_PREFIX=${OPENCV_INSTALL_DIR}\u00a0\\\n\n\u00a0\u00a0-D\u00a0BUILD_TESTS=OFF\u00a0\\\n\n\u00a0\u00a0-D\u00a0BUILD_PERF_TESTS=OFF\u00a0\\\n\n\u00a0\u00a0-D\u00a0WITH_CUDA=OFF\u00a0\\\n\n\u00a0\u00a0-D\u00a0WITH_VTK=OFF\u00a0\\\n\n\u00a0\u00a0-D\u00a0WITH_MATLAB=OFF\u00a0\\\n\n\u00a0\u00a0-D\u00a0BUILD_DOCS=OFF\u00a0\\\n\n\u00a0\u00a0-D\u00a0BUILD_opencv_python3=OFF\u00a0\\\n\n\u00a0\u00a0-D\u00a0BUILD_opencv_python2=OFF\u00a0\\\n\n\u00a0\u00a0-D\u00a0WITH_IPP=OFF\u00a0\\\n\n\u00a0\u00a0-D\u00a0BUILD_SHARED_LIBS=ON\u00a0\\\n\n\u00a0\u00a0-D\u00a0BUILD_opencv_apps=OFF\u00a0\\\n\n\u00a0\u00a0-D\u00a0WITH_CUDA=OFF\u00a0\\\n\n\u00a0\u00a0-D\u00a0WITH_OPENCL=OFF\u00a0\\\n\n\u00a0\u00a0-D\u00a0WITH_VTK=OFF\u00a0\\\n\n\u00a0\u00a0-D\u00a0WITH_MATLAB=OFF\u00a0\\\n\n\u00a0\u00a0-D\u00a0BUILD_DOCS=OFF\u00a0\\\n\n\u00a0\u00a0-D\u00a0BUILD_opencv_python3=OFF\u00a0\\\n\n\u00a0\u00a0-D\u00a0BUILD_opencv_python2=OFF\u00a0\\\n\n\u00a0\u00a0-D\u00a0BUILD_JAVA=OFF\u00a0\\\n\n\u00a0\u00a0-D\u00a0BUILD_FAT_JAVA_LIB=OFF\u00a0\\\n\n\u00a0\u00a0-D\u00a0WITH_PROTOBUF=OFF\u00a0\\\n\n\u00a0\u00a0-D\u00a0WITH_QUIRC=OFF\u00a0\\\n\n\u00a0\u00a0-D\u00a0WITH_FFMPEG=ON\u00a0\\\n\n\u00a0\u00a0-D\u00a0OPENCV_GENERATE_PKGCONFIG=ON\u00a0\\\n\n\u00a0\u00a0-D\u00a0OPENCV_FFMPEG_USE_FIND_PACKAGE=ON\u00a0\\\n\n\u00a0\u00a0-D\u00a0OPENCV_FFMPEG_SKIP_BUILD_CHECK=ON\u00a0\\\n\n\u00a0\u00a0-D\u00a0FFMPEG_DIR=${FFMPEG_FIND_DIR}\n\nmake\u00a0-j8\n\nmake\u00a0install\n</code></pre> <p>\u200b\u7f16\u8bd1\u200bopencv\uff0c\u200b\u7f16\u8bd1\u200b\u597d\u200b\u7684\u200b\u6587\u4ef6\u200b\u4f1a\u200b\u5b89\u88c5\u200b\u5230\u200b\u5f53\u524d\u76ee\u5f55\u200b\u4e0b\u200b\u7684\u200bopencv_install\u3002</p> Bash<pre><code>bash ./build_with_ffmpeg4.2.2_osx.sh\n</code></pre> <p>\u200b\u5728\u200b\u7f16\u8bd1\u200b\u65f6\u200b\u53ef\u4ee5\u200b\u5148\u200b\u628a\u200bmake\u200b\u548c\u200bmake install\u200b\u6ce8\u91ca\u200b\u4e86\u200b\uff0c\u200b\u67e5\u770b\u200bopencv\u200b\u7f16\u8bd1\u200b\u65f6\u200b\uff0cFFmpeg\u200b\u662f\u5426\u662f\u200bYES\u200b\u72b6\u6001\u200b\u3002\u200b\u5728\u200b\u8fd0\u884c\u200b\u65f6\u200b\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u4ee3\u7801\u200b\u68c0\u6d4b\u200bFFmpeg\u200b\u72b6\u6001\u200b\u3002</p> C++<pre><code>std::cout &lt;&lt; cv::getBuildInformation();\n</code></pre>"},{"location":"weeks/%E7%BC%96%E8%AF%91Opencv%E5%92%8CFFmpeg/#3-\u6253\u5305ffmpeg\u548copencv\u4f5c\u4e3a\u7b2c\u4e09\u65b9\u5e93","title":"3 \u200b\u6253\u5305\u200bffmpeg\u200b\u548c\u200bopencv\u200b\u4f5c\u4e3a\u200b\u7b2c\u4e09\u65b9\u200b\u5e93","text":"<p>\u200b\u73b0\u5728\u200b\u5c06\u200b\u7f16\u8bd1\u200b\u597d\u200b\u7684\u200bffmpeg\u200b\u548c\u200bopencv\u200b\u653e\u5728\u200b\u540c\u4e00\u4e2a\u200b\u76ee\u5f55\u200b\u4e0b\u200b\uff0c\u200b\u4f5c\u4e3a\u200b\u7b2c\u4e09\u65b9\u200b\u5e93\u200b\u7ed9\u200b\u5176\u4ed6\u200b\u4e3b\u673a\u200b\u4f7f\u7528\u200b\u3002</p>"},{"location":"weeks/%E7%BC%96%E8%AF%91Opencv%E5%92%8CFFmpeg/#31-\u521b\u5efa3rd_party","title":"3.1 \u200b\u521b\u5efa\u200b3rd_party","text":"Bash<pre><code>$\u00a0mkdir\u00a03rd_party\n\n$\u00a0mv\u00a0ffmpeg-4.1\u00a03rd_party\n\n$\u00a0mv\u00a0opencv_install/\u00a03rd_party/opencv4.5.5\n\n$\u00a0ls\n\nffmpeg-4.1\u00a0\u00a0opencv-4.5.5\n</code></pre>"},{"location":"weeks/%E7%BC%96%E8%AF%91Opencv%E5%92%8CFFmpeg/#32-\u4f7f\u7528ffmpeg\u548copencv","title":"3.2 \u200b\u4f7f\u7528\u200bffmpeg\u200b\u548c\u200bopencv","text":"<p>\u200b\u73b0\u5728\u200b\u5047\u8bbe\u200b\u4e00\u4e2a\u200b\u9879\u76ee\u200b\u540d\u53eb\u200bProjA\uff0c\u200b\u90a3\u4e48\u200b\u5c06\u200b3rd_party\u200b\u590d\u5236\u5230\u200bProjA\u200b\u6839\u76ee\u5f55\u200b\uff0c\u200b\u7136\u540e\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200bbuild.sh\u3002\u200b\u4e3a\u4e86\u200b\u907f\u514d\u200b\u627e\u5230\u200b\u4e3b\u673a\u200b\u4e0a\u200b\u7684\u200b\u5176\u4ed6\u200bffmpeg\uff0c\u200b\u9700\u8981\u200b\u8bbe\u7f6e\u200bLD_LIBRARY_PATH\uff0c\u200b\u5c06\u200b${FFMPEG_LIB_DIR}\u200b\u52a0\u5165\u200b\u8fdb\u53bb\u200b\u3002</p> Bash<pre><code>#!/bin/bash\n\ncurrent_dir=$(cd\u00a0`dirname\u00a0$0`;\u00a0pwd)\n\nexport\u00a0OPENCV_LIB_DIR=`pwd`/3rd_party/opencv-4.5.5/lib64/cmake/opencv4;\n\nFFMPEG_LIB_DIR=`pwd`/3rd_party/ffmpeg-4.1/lib;\n\nGCC_VERSION=\"8.2\"\n\nexport\u00a0CC=/opt/compiler/gcc-${GCC_VERSION}/bin/gcc\n\nexport\u00a0CXX=/opt/compiler/gcc-${GCC_VERSION}/bin/g++\n\nexport\u00a0PATH=/opt/compiler/gcc-${GCC_VERSION}/bin${PATH:+:${PATH}}\n\nexport\u00a0LD_LIBRARY_PATH=/opt/compiler/gcc-${GCC_VERSION}/lib:${FFMPEG_LIB_DIR}${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\n\nexport\u00a0PKG_CONFIG_PATH=/opt/compiler/gcc-${GCC_VERSION}/lib/pkgconfig${PKG_CONFIG_PATH:+:${PKG_CONFIG_PATH}}\n\nbuild_folder=${current_dir}/build\n\nclean=$1\n\nif\u00a0[\u00a0-d\u00a0${build_folder}\u00a0];\u00a0then\n\n\u00a0\u00a0\u00a0\u00a0if\u00a0[\u00a0\"${clean}\"\u00a0==\u00a0\"clean\"\u00a0];\u00a0then\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0rm\u00a0-rf\u00a0${build_folder}/*\n\n\u00a0\u00a0\u00a0\u00a0fi\n\nelse\n\n\u00a0\u00a0\u00a0\u00a0mkdir\u00a0${build_folder}\n\nfi\n\ncd\u00a0${build_folder}\u00a0&amp;&amp;\u00a0cmake\u00a0..\n\nmake\u00a0-j4\n\nmake\u00a0install\n\nexit\u00a0$?\n</code></pre> <p>\u200b\u53c2\u8003\u200b\uff1a</p> <p>[\u200b\u63a8\u7406\u200b\u90e8\u7f72\u200b]\ud83e\udd13opencv+ffmpeg\u200b\u7f16\u8bd1\u200b\u6253\u5305\u200b\u5168\u89e3\u200b\u6307\u5357\u200b</p>"},{"location":"weeks/%E8%A7%A3%E5%86%B3linux%E4%B8%8D%E8%83%BD%E8%BE%93%E5%85%A5%E6%B1%89%E5%AD%97%E4%BB%A5%E5%8F%8A%E6%B1%89%E5%AD%97%E6%98%BE%E7%A4%BA%E4%B9%B1%E7%A0%81/","title":"\u89e3\u51b3\u200blinux\u200b\u4e0d\u80fd\u200b\u8f93\u5165\u200b\u6c49\u5b57\u200b\u4ee5\u53ca\u200b\u6c49\u5b57\u200b\u663e\u793a\u200b\u4e71\u7801","text":""},{"location":"weeks/%E8%A7%A3%E5%86%B3linux%E4%B8%8D%E8%83%BD%E8%BE%93%E5%85%A5%E6%B1%89%E5%AD%97%E4%BB%A5%E5%8F%8A%E6%B1%89%E5%AD%97%E6%98%BE%E7%A4%BA%E4%B9%B1%E7%A0%81/#\u89e3\u51b3linux\u4e0d\u80fd\u8f93\u5165\u6c49\u5b57\u4ee5\u53ca\u6c49\u5b57\u663e\u793a\u4e71\u7801","title":"\u89e3\u51b3\u200blinux\u200b\u4e0d\u80fd\u200b\u8f93\u5165\u200b\u6c49\u5b57\u200b\u4ee5\u53ca\u200b\u6c49\u5b57\u200b\u663e\u793a\u200b\u4e71\u7801","text":"Bash<pre><code>locale-gen zh_CN.UTF-8\nlocale\nexport LC_ALL=\"zh_CN.UTF-8\"\n\nexport LANG=\"zh_CN.UTF-8\"\n\nexport LANGUAGE=zh_CN:zh\n</code></pre> Bash<pre><code>apt-get install -y locales locales-all\n</code></pre>"},{"location":"weeks/%E8%A7%A3%E5%86%B3linux%E4%B8%8D%E8%83%BD%E8%BE%93%E5%85%A5%E6%B1%89%E5%AD%97%E4%BB%A5%E5%8F%8A%E6%B1%89%E5%AD%97%E6%98%BE%E7%A4%BA%E4%B9%B1%E7%A0%81/#exec-env\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u548cexport\u7684\u533a\u522b\u662f\u5565","title":"exec env\u200b\u8bbe\u7f6e\u200b\u73af\u5883\u53d8\u91cf\u200b\u548c\u200bexport\u200b\u7684\u200b\u533a\u522b\u200b\u662f\u200b\u5565\u200b\uff1f","text":"<p><code>exec env LD_LIBRARY_PATH=</code> \u200b\u548c\u200b <code>export LD_LIBRARY_PATH=</code> \u200b\u662f\u200b\u4e24\u79cd\u200b\u5728\u200b Unix/Linux \u200b\u7cfb\u7edf\u200b\u4e2d\u200b\u8bbe\u7f6e\u200b\u73af\u5883\u53d8\u91cf\u200b\u7684\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u4f46\u200b\u5b83\u4eec\u200b\u7684\u200b\u4f5c\u7528\u200b\u548c\u200b\u4f7f\u7528\u200b\u573a\u666f\u200b\u6709\u6240\u4e0d\u540c\u200b\u3002\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u4e24\u8005\u200b\u7684\u200b\u533a\u522b\u200b\uff1a</p> <ol> <li>\u200b\u4f5c\u7528\u200b\u8303\u56f4\u200b\uff1a</li> <li><code>exec env LD_LIBRARY_PATH=value command</code>\uff1a\u200b\u8fd9\u200b\u662f\u200b\u5728\u200b\u6267\u884c\u200b\u4e00\u4e2a\u200b\u7279\u5b9a\u200b\u547d\u4ee4\u200b\u65f6\u200b\u4e34\u65f6\u200b\u8bbe\u7f6e\u200b\u73af\u5883\u53d8\u91cf\u200b <code>LD_LIBRARY_PATH</code>\u3002\u200b\u6b64\u200b\u73af\u5883\u53d8\u91cf\u200b\u7684\u200b\u8bbe\u7f6e\u200b\u4ec5\u200b\u5bf9\u200b\u8be5\u200b\u547d\u4ee4\u200b\u53ca\u5176\u200b\u5b50\u200b\u8fdb\u7a0b\u200b\u6709\u6548\u200b\uff0c\u200b\u800c\u200b\u4e0d\u4f1a\u200b\u5f71\u54cd\u200b\u5f53\u524d\u200b shell \u200b\u6216\u200b\u5176\u4ed6\u200b\u8fdb\u7a0b\u200b\u3002<code>env</code> \u200b\u547d\u4ee4\u200b\u7528\u4e8e\u200b\u5728\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u73af\u5883\u4e2d\u8fd0\u884c\u200b\u6307\u5b9a\u200b\u7684\u200b\u547d\u4ee4\u200b\u3002</li> <li> <p><code>export LD_LIBRARY_PATH=value</code>\uff1a\u200b\u8fd9\u200b\u662f\u200b\u5728\u200b\u5f53\u524d\u200b shell \u200b\u4f1a\u8bdd\u200b\u4e2d\u200b\u8bbe\u7f6e\u200b\u73af\u5883\u53d8\u91cf\u200b <code>LD_LIBRARY_PATH</code>\u3002\u200b\u8fd9\u6837\u200b\u8bbe\u7f6e\u200b\u7684\u200b\u73af\u5883\u53d8\u91cf\u200b\u5bf9\u200b\u5f53\u524d\u200b shell \u200b\u53ca\u5176\u200b\u6240\u6709\u200b\u5b50\u200b\u8fdb\u7a0b\u200b\u6709\u6548\u200b\uff0c\u200b\u76f4\u5230\u200b\u8be5\u200b shell \u200b\u4f1a\u8bdd\u200b\u7ed3\u675f\u200b\u6216\u8005\u200b\u624b\u52a8\u200b\u66f4\u6539\u200b/\u200b\u5220\u9664\u200b\u8be5\u200b\u53d8\u91cf\u200b\u3002</p> </li> <li> <p>\u200b\u4f7f\u7528\u200b\u573a\u666f\u200b\uff1a</p> </li> <li>\u200b\u4f7f\u7528\u200b <code>exec env LD_LIBRARY_PATH=value command</code> \u200b\u7684\u200b\u573a\u666f\u200b\u662f\u200b\u5f53\u200b\u4f60\u200b\u5e0c\u671b\u200b\u53ea\u200b\u5728\u200b\u6267\u884c\u200b\u67d0\u4e2a\u200b\u7279\u5b9a\u200b\u547d\u4ee4\u200b\u65f6\u200b\u4fee\u6539\u200b\u73af\u5883\u53d8\u91cf\u200b\uff0c\u200b\u800c\u200b\u4e0d\u200b\u5bf9\u200b\u6574\u4e2a\u200b shell \u200b\u4f1a\u8bdd\u200b\u6216\u200b\u5176\u4ed6\u200b\u547d\u4ee4\u200b\u4ea7\u751f\u200b\u5f71\u54cd\u200b\u3002\u200b\u8fd9\u79cd\u200b\u65b9\u6cd5\u200b\u9002\u7528\u200b\u4e8e\u200b\u4e34\u65f6\u200b\u7684\u200b\u3001\u200b\u4e00\u6b21\u6027\u200b\u7684\u200b\u914d\u7f6e\u200b\u3002</li> <li> <p>\u200b\u4f7f\u7528\u200b <code>export LD_LIBRARY_PATH=value</code> \u200b\u9002\u7528\u200b\u4e8e\u200b\u4f60\u200b\u5e0c\u671b\u200b\u5728\u200b\u6574\u4e2a\u200b shell \u200b\u4f1a\u8bdd\u200b\u671f\u95f4\u200b\u3001\u200b\u591a\u6b21\u200b\u6267\u884c\u547d\u4ee4\u200b\u65f6\u200b\u90fd\u200b\u4f7f\u7528\u200b\u76f8\u540c\u200b\u7684\u200b\u73af\u5883\u53d8\u91cf\u200b\u914d\u7f6e\u200b\u3002\u200b\u8fd9\u79cd\u200b\u65b9\u6cd5\u200b\u9002\u7528\u200b\u4e8e\u200b\u6301\u4e45\u200b\u7684\u200b\u3001\u200b\u4f1a\u8bdd\u200b\u8303\u56f4\u200b\u7684\u200b\u914d\u7f6e\u200b\u3002</p> </li> <li> <p>\u200b\u5f71\u54cd\u200b\u8303\u56f4\u200b\uff1a</p> </li> <li><code>exec env</code> \u200b\u4ec5\u200b\u5f71\u54cd\u200b\u6240\u200b\u6267\u884c\u200b\u7684\u200b\u547d\u4ee4\u200b\u672c\u8eab\u200b\uff0c\u200b\u800c\u200b <code>export</code> \u200b\u4f1a\u200b\u5f71\u54cd\u200b\u5230\u200b\u5f53\u524d\u200b shell \u200b\u4f1a\u8bdd\u200b\u7684\u200b\u6240\u6709\u200b\u540e\u7eed\u200b\u547d\u4ee4\u200b\u3002</li> </ol> <p>\u200b\u603b\u4e4b\u200b\uff0c\u200b\u9009\u62e9\u200b\u4f7f\u7528\u200b\u54ea\u200b\u79cd\u200b\u65b9\u5f0f\u200b\u53d6\u51b3\u4e8e\u200b\u4f60\u200b\u5e0c\u671b\u200b\u73af\u5883\u53d8\u91cf\u200b\u7684\u200b\u4f5c\u7528\u200b\u8303\u56f4\u200b\u548c\u200b\u6301\u7eed\u65f6\u95f4\u200b\u3002\u200b\u5982\u679c\u200b\u4f60\u200b\u53ea\u200b\u9700\u8981\u200b\u4e3a\u200b\u5355\u4e2a\u200b\u547d\u4ee4\u200b\u8bbe\u7f6e\u200b\u73af\u5883\u53d8\u91cf\u200b\uff0c\u200b\u8bf7\u200b\u4f7f\u7528\u200b <code>exec env</code>\uff1b\u200b\u5982\u679c\u200b\u4f60\u200b\u9700\u8981\u200b\u5728\u200b\u6574\u4e2a\u200b shell \u200b\u4f1a\u8bdd\u200b\u4e2d\u200b\u90fd\u200b\u4f7f\u7528\u200b\u540c\u4e00\u200b\u8bbe\u7f6e\u200b\uff0c\u200b\u8bf7\u200b\u4f7f\u7528\u200b <code>export</code>\u3002</p>"},{"location":"weeks/%E8%A7%A3%E5%86%B3linux%E4%B8%8D%E8%83%BD%E8%BE%93%E5%85%A5%E6%B1%89%E5%AD%97%E4%BB%A5%E5%8F%8A%E6%B1%89%E5%AD%97%E6%98%BE%E7%A4%BA%E4%B9%B1%E7%A0%81/#pip-env\u5de5\u5177\u7684\u4f7f\u7528","title":"pip-env\u200b\u5de5\u5177\u200b\u7684\u200b\u4f7f\u7528","text":"<p>https://www.cnblogs.com/c2soft/articles/17802918.html</p> <p>install Pytorch </p>Python<pre><code>[[source]]\nname = \"pytorch\"\nurl = \"https://download.pytorch.org/whl/\"\nverify_ssl = true\n\n\n[packages]\ntorch = {index = \"pytorch\",version = \"==1.9.0\"}\ntorchvision = {index =\"pytorch\", version= \"==0.10.0\"}\ntorchaudio = {index =\"pytorch\", version= \"==0.9.0\"}\n\n[requires]\npython_version = \"3.7\"\n</code></pre><p></p> <p>pip-env install</p> <p>https://stackoverflow.com/questions/63974588/how-to-install-pytorch-with-pipenv-and-save-it-to-pipfile-and-pipfile-lock/68336073#68336073</p> <p>virtual-env</p> <p>https://linux.cn/article-13174-1.html</p>"},{"location":"weeks/%E8%A7%A3%E9%94%81%E9%AB%98%E6%95%88%E5%A4%A7%E8%A7%84%E6%A8%A1%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83%EF%BC%9A%E5%BC%A0%E9%87%8F%E5%B9%B6%E8%A1%8C%28TP%29%E6%8A%80%E6%9C%AF/","title":"\u89e3\u9501\u200b\u9ad8\u6548\u200b\u5927\u89c4\u6a21\u200b\u6a21\u578b\u200b\u8bad\u7ec3\u200b\uff1a\u200b\u5f20\u91cf\u200b\u5e76\u884c\u200b(TP)\u200b\u6280\u672f","text":"<p>\u200b\u89e3\u9501\u200b\u9ad8\u6548\u200b\u5927\u89c4\u6a21\u200b\u6a21\u578b\u200b\u8bad\u7ec3\u200b(\u200b\u6216\u200b\u63a8\u7406\u200b)\uff1a\u200b\u5f20\u91cf\u200b\u5e76\u884c\u200b(TP)\u200b\u6280\u672f\u200b</p> <p>\u200b\u5982\u4eca\u200b\uff0c\u200b\u5177\u6709\u200b\u6570\u5341\u4ebf\u200b\u53c2\u6570\u200b\u7684\u200b\u5927\u578b\u200b\u6a21\u578b\u200b\u901a\u8fc7\u200b\u591a\u53f0\u200b\u673a\u5668\u200b\u4e0a\u200b\u7684\u200b\u8bb8\u591a\u200b GPU \u200b\u5e76\u884c\u200b\u8bad\u7ec3\u200b\u3002\u200b\u5373\u4f7f\u200b\u662f\u200b\u5177\u6709\u200b 80GB \u200b\u663e\u5b58\u200b\uff08\u200b\u76ee\u524d\u200b\u6700\u5927\u200b\u7684\u200b\u4e4b\u4e00\u200b\uff09\u200b\u7684\u200b\u5355\u4e2a\u200b H100 GPU \u200b\u4e5f\u200b\u4e0d\u8db3\u4ee5\u200b\u8bad\u7ec3\u200b\u4ec5\u200b\u6709\u200b 300 \u200b\u4ebf\u200b\u53c2\u6570\u200b\u7684\u200b\u6a21\u578b\u200b\uff08\u200b\u5373\u4f7f\u200b\u6279\u91cf\u200b\u5927\u5c0f\u200b\u4e3a\u200b 1 \u200b\u4e14\u200b\u7cbe\u5ea6\u200b\u4e3a\u200b 16 \u200b\u4f4d\u200b\uff09\u3002</p> <p>\u200b\u8bad\u7ec3\u200b\u7684\u200b\u5185\u5b58\u200b\u6d88\u8017\u200b\u901a\u5e38\u200b\u7531\u200b</p> <ul> <li>\u200b\u6a21\u578b\u200b\u53c2\u6570\u200b</li> <li>\u200b\u5c42\u200b\u6fc0\u6d3b\u200b\uff08\u200b\u524d\u5411\u200b\u4f20\u64ad\u200b\uff09</li> <li>\u200b\u68af\u5ea6\u200b\uff08\u200b\u53cd\u5411\u200b\u4f20\u64ad\u200b\uff09</li> <li>\u200b\u4f18\u5316\u200b\u5668\u200b\u72b6\u6001\u200b\uff08\u200b\u4f8b\u5982\u200b\uff0cAdam \u200b\u6bcf\u4e2a\u200b\u53c2\u6570\u200b\u6709\u200b\u4e24\u4e2a\u200b\u989d\u5916\u200b\u7684\u200b\u6307\u6570\u200b\u5e73\u5747\u6570\u200b\uff09</li> <li>\u200b\u6a21\u578b\u200b\u8f93\u51fa\u200b\u548c\u200b\u635f\u5931\u200b</li> </ul> <p>\u200b\u7ec4\u6210\u200b\u3002</p> <p>\u200b\u5f53\u200b\u8fd9\u4e9b\u200b\u5185\u5b58\u200b\u7ec4\u4ef6\u200b\u7684\u200b\u603b\u548c\u200b\u8d85\u8fc7\u200b\u5355\u4e2a\u200b GPU \u200b\u7684\u200b\u663e\u5b58\u200b\u65f6\u200b\uff0c\u200b\u5e38\u89c4\u200b\u7684\u200b\u6570\u636e\u200b\u5e76\u884c\u200b\u8bad\u7ec3\u200b\uff08DDP\uff09\u200b\u5c31\u200b\u4e0d\u80fd\u200b\u518d\u200b\u4f7f\u7528\u200b\u4e86\u200b\u3002\u200b\u4e3a\u4e86\u200b\u7f13\u89e3\u200b\u8fd9\u4e00\u200b\u9650\u5236\u200b\uff0c\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u5f15\u5165\u200b\u6a21\u578b\u200b\u5e76\u884c\u6027\u200b\u3002\u200b\u4e00\u79cd\u200b\u6709\u6548\u200b\u7684\u200b\u6a21\u578b\u200b\u5e76\u884c\u200b\u5f62\u5f0f\u200b\u79f0\u4e3a\u200b\u5f20\u91cf\u200b\u5e76\u884c\u6027\u200b\uff08TP\uff09\u3002\u200b\u5b83\u200b\u5c06\u200b\u5355\u4e2a\u200b\u5f20\u91cf\u200b\u8de8\u200b GPU \u200b\u5206\u5272\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u8ba1\u7b97\u200b\u548c\u200b\u5185\u5b58\u200b\u7684\u200b\u7ec6\u7c92\u5ea6\u200b\u5206\u5e03\u200b\u3002\u200b\u5b83\u200b\u53ef\u4ee5\u200b\u5f88\u200b\u597d\u200b\u5730\u200b\u6269\u5c55\u200b\u5230\u200b\u5927\u91cf\u200b GPU\uff0c\u200b\u4f46\u200b\u6bcf\u6b21\u200b\u64cd\u4f5c\u200b\u540e\u200b\u9700\u8981\u200b\u540c\u6b65\u200b\u5f20\u91cf\u200b\u5207\u7247\u200b\uff0c\u200b\u8fd9\u200b\u589e\u52a0\u200b\u4e86\u200b\u901a\u4fe1\u200b\u5f00\u9500\u200b\u3002TP \u200b\u5bf9\u4e8e\u200b\u5177\u6709\u200b\u8bb8\u591a\u200b\u7ebf\u6027\u200b\u5c42\u200b\u7684\u200b\u6a21\u578b\u200b\uff08\u200b\u4f8b\u5982\u200b\u5927\u200b\u8bed\u8a00\u200b\u6a21\u578b\u200b\uff09\u200b\u6700\u4e3a\u200b\u6709\u6548\u200b\uff0c\u200b\u5728\u200b\u5185\u5b58\u200b\u5206\u5e03\u200b\u548c\u200b\u8ba1\u7b97\u200b\u6548\u7387\u200b\u4e4b\u95f4\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u5e73\u8861\u200b\u3002</p>"},{"location":"weeks/%E8%A7%A3%E9%94%81%E9%AB%98%E6%95%88%E5%A4%A7%E8%A7%84%E6%A8%A1%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83%EF%BC%9A%E5%BC%A0%E9%87%8F%E5%B9%B6%E8%A1%8C%28TP%29%E6%8A%80%E6%9C%AF/#\u5728\u7ebf\u6027\u5c42\u4e2d\u5229\u7528\u5e76\u884c\u6027","title":"\u5728\u200b\u7ebf\u6027\u200b\u5c42\u4e2d\u200b\u5229\u7528\u200b\u5e76\u884c\u6027","text":"<p>\u200b\u5728\u200b\u5f20\u91cf\u200b\u5e76\u884c\u6027\u200b\u4e2d\u200b\uff0c\u200b\u7ebf\u6027\u200b\u5c42\u200b\u7684\u200b\u8ba1\u7b97\u200b\u53ef\u4ee5\u200b\u8de8\u200b GPU \u200b\u5206\u5272\u200b\u3002\u200b\u8fd9\u200b\u53ef\u4ee5\u200b\u8282\u7701\u200b\u5185\u5b58\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u6bcf\u4e2a\u200b GPU \u200b\u53ea\u200b\u9700\u8981\u200b\u4fdd\u5b58\u200b\u4e00\u90e8\u5206\u200b\u6743\u91cd\u200b\u77e9\u9635\u200b\u3002\u200b\u7ebf\u6027\u200b\u5c42\u200b\u53ef\u4ee5\u200b\u6709\u200b\u4e24\u79cd\u200b\u5206\u5272\u200b\u65b9\u5f0f\u200b\uff1a\u200b\u6309\u884c\u200b\u5206\u5272\u200b\u6216\u200b\u6309\u5217\u200b\u5206\u5272\u200b\u3002</p>"},{"location":"weeks/%E8%A7%A3%E9%94%81%E9%AB%98%E6%95%88%E5%A4%A7%E8%A7%84%E6%A8%A1%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83%EF%BC%9A%E5%BC%A0%E9%87%8F%E5%B9%B6%E8%A1%8C%28TP%29%E6%8A%80%E6%9C%AF/#\u5f20\u91cf\u5e76\u884c\u7684\u6838\u5fc3\u6982\u5ff5","title":"\u5f20\u91cf\u200b\u5e76\u884c\u200b\u7684\u200b\u6838\u5fc3\u200b\u6982\u5ff5","text":"<p>\u200b\u5f20\u91cf\u200b\u5e76\u884c\u200b\u7684\u200b\u57fa\u672c\u200b\u601d\u60f3\u200b\u662f\u200b\u5c06\u200b\u6a21\u578b\u200b\u4e2d\u200b\u7684\u200b\u5f20\u91cf\u200b\u5728\u200b\u591a\u4e2a\u200b GPU \u200b\u4e4b\u95f4\u200b\u8fdb\u884c\u200b\u5206\u5272\u200b\uff0c\u200b\u4ece\u800c\u200b\u5b9e\u73b0\u200b\u8ba1\u7b97\u200b\u548c\u200b\u5185\u5b58\u200b\u7684\u200b\u5206\u5e03\u5f0f\u200b\u5904\u7406\u200b\u3002\u200b\u60f3\u8c61\u200b\u4e00\u4e0b\u200b\uff0c\u200b\u4e00\u4e2a\u200b\u5de8\u5927\u200b\u7684\u200b\u6743\u91cd\u200b\u77e9\u9635\u200b\uff0c\u200b\u5728\u200b\u5f20\u91cf\u200b\u5e76\u884c\u200b\u7684\u200b\u6846\u67b6\u200b\u4e0b\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u6309\u7167\u200b\u4e0d\u540c\u200b\u7684\u200b\u7ef4\u5ea6\u200b\u88ab\u200b\u62c6\u5206\u200b\u5230\u200b\u591a\u4e2a\u200b GPU \u200b\u4e0a\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5e38\u89c1\u200b\u7684\u200b\u6709\u200b\u6309\u5217\u200b\u5e76\u884c\u200b\u548c\u200b\u6309\u884c\u200b\u5e76\u884c\u200b\u4e24\u79cd\u200b\u65b9\u5f0f\u200b\u3002</p>"},{"location":"weeks/%E8%A7%A3%E9%94%81%E9%AB%98%E6%95%88%E5%A4%A7%E8%A7%84%E6%A8%A1%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83%EF%BC%9A%E5%BC%A0%E9%87%8F%E5%B9%B6%E8%A1%8C%28TP%29%E6%8A%80%E6%9C%AF/#\u6309\u5217\u5e76\u884c","title":"\u6309\u5217\u200b\u5e76\u884c","text":"<p>\u200b\u5728\u200b\u6309\u5217\u200b\u5e76\u884c\u200b\u4e2d\u200b\uff0c\u200b\u6743\u91cd\u200b\u77e9\u9635\u200b\u6cbf\u7740\u200b\u5217\u200b\u7ef4\u5ea6\u200b\u88ab\u200b\u5206\u5272\u200b\uff0c\u200b\u6bcf\u4e2a\u200b GPU \u200b\u63a5\u6536\u200b\u76f8\u540c\u200b\u7684\u200b\u8f93\u5165\u200b\u6570\u636e\u200b\uff0c\u200b\u5e76\u200b\u5bf9\u200b\u5206\u914d\u200b\u5230\u200b\u7684\u200b\u5217\u200b\u8fdb\u884c\u200b\u77e9\u9635\u200b\u4e58\u6cd5\u200b\u8fd0\u7b97\u200b\uff0c\u200b\u6700\u540e\u200b\u5c06\u200b\u5404\u4e2a\u200b GPU \u200b\u7684\u200b\u8f93\u51fa\u200b\u7ed3\u679c\u200b\u62fc\u63a5\u200b\u8d77\u6765\u200b\uff0c\u200b\u5f97\u5230\u200b\u5b8c\u6574\u200b\u7684\u200b\u8f93\u51fa\u200b\u3002</p> <p></p>"},{"location":"weeks/%E8%A7%A3%E9%94%81%E9%AB%98%E6%95%88%E5%A4%A7%E8%A7%84%E6%A8%A1%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83%EF%BC%9A%E5%BC%A0%E9%87%8F%E5%B9%B6%E8%A1%8C%28TP%29%E6%8A%80%E6%9C%AF/#\u6309\u884c\u5e76\u884c","title":"\u6309\u884c\u200b\u5e76\u884c","text":"<p>\u200b\u800c\u200b\u6309\u884c\u200b\u5e76\u884c\u200b\u5219\u200b\u662f\u200b\u5c06\u200b\u6743\u91cd\u200b\u77e9\u9635\u200b\u7684\u200b\u884c\u200b\u5747\u5300\u200b\u5206\u914d\u200b\u5230\u200b\u4e0d\u540c\u200b\u7684\u200b GPU \u200b\u4e0a\u200b\uff0c\u200b\u540c\u65f6\u200b\u8f93\u5165\u200b\u6570\u636e\u200b\u4e5f\u200b\u6309\u7167\u200b\u76f8\u540c\u200b\u7684\u200b\u65b9\u5f0f\u200b\u8fdb\u884c\u200b\u5206\u5272\u200b\uff0c\u200b\u6bcf\u4e2a\u200b GPU \u200b\u8fdb\u884c\u200b\u8ba1\u7b97\u200b\u540e\u200b\uff0c\u200b\u518d\u200b\u5c06\u200b\u8f93\u51fa\u200b\u8fdb\u884c\u200b\u5143\u7d20\u200b\u6c42\u548c\u200b\uff0c\u200b\u4ee5\u200b\u83b7\u5f97\u200b\u6700\u7ec8\u200b\u7ed3\u679c\u200b\u3002\u200b\u901a\u8fc7\u200b\u8fd9\u79cd\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u6a21\u578b\u200b\u7684\u200b\u8ba1\u7b97\u200b\u8d1f\u8f7d\u200b\u5f97\u4ee5\u200b\u5206\u6563\u200b\uff0c\u200b\u5185\u5b58\u200b\u538b\u529b\u200b\u4e5f\u200b\u5f97\u5230\u200b\u6709\u6548\u200b\u7f13\u89e3\u200b\u3002</p> <p></p>"},{"location":"weeks/%E8%A7%A3%E9%94%81%E9%AB%98%E6%95%88%E5%A4%A7%E8%A7%84%E6%A8%A1%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83%EF%BC%9A%E5%BC%A0%E9%87%8F%E5%B9%B6%E8%A1%8C%28TP%29%E6%8A%80%E6%9C%AF/#\u7ec4\u5408\u5e76\u884c\u5c42","title":"\u7ec4\u5408\u200b\u5e76\u884c\u200b\u5c42","text":"<p>\u200b\u5f53\u6709\u200b\u591a\u4e2a\u200b\u7ebf\u6027\u200b\u5c42\u200b\u4f9d\u6b21\u200b\u6392\u5217\u200b\u65f6\u200b\uff0c\u200b\u4f8b\u5982\u200b\u5728\u200b\u591a\u5c42\u200b\u611f\u77e5\u673a\u200b\uff08MLP\uff09\u200b\u6216\u200bTransformer\u200b\u4e2d\u200b\uff0c\u200b\u5217\u5411\u200b\u548c\u200b\u884c\u5411\u200b\u5e76\u884c\u200b\u98ce\u683c\u200b\u53ef\u4ee5\u200b\u7ed3\u5408\u200b\u8d77\u6765\u200b\u4ee5\u200b\u8fbe\u5230\u200b\u6700\u5927\u200b\u6548\u679c\u200b\u3002\u200b\u6211\u4eec\u200b\u4e0d\u200b\u5c06\u200b\u5217\u200b\u5411\u200b\u5e76\u884c\u200b\u5c42\u200b\u7684\u200b\u8f93\u51fa\u200b\u8fdb\u884c\u200b\u62fc\u63a5\u200b\uff0c\u200b\u800c\u662f\u200b\u5c06\u200b\u8f93\u51fa\u200b\u5206\u5f00\u200b\uff0c\u200b\u5e76\u200b\u76f4\u63a5\u200b\u5c06\u200b\u5b83\u4eec\u200b\u8f93\u5165\u200b\u5230\u884c\u200b\u5411\u200b\u5e76\u884c\u200b\u5c42\u200b\u3002\u200b\u8fd9\u6837\u200b\uff0c\u200b\u6211\u4eec\u200b\u907f\u514d\u200b\u4e86\u200b\u5728\u200b GPU \u200b\u4e4b\u95f4\u200b\u8fdb\u884c\u200b\u6602\u8d35\u200b\u7684\u200b\u6570\u636e\u4f20\u8f93\u200b\u3002</p> <p></p> <p>\u200b\u7ffb\u8bd1\u200b\u81ea\u200b\uff1atensor-parallelism-supercharging-large-model-training-with-pytorch-lightning</p>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/archive/2025/#2025","title":"2025","text":""},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/archive/2024/#2024","title":"2024","text":""},{"location":"blog/category/rust/","title":"rust","text":""},{"location":"blog/category/rust/#rust","title":"rust","text":""},{"location":"blog/category/python/","title":"python","text":""},{"location":"blog/category/python/#python","title":"python","text":""},{"location":"blog/category/cpp/","title":"cpp","text":""},{"location":"blog/category/cpp/#cpp","title":"cpp","text":""},{"location":"blog/category/c/","title":"C++","text":""},{"location":"blog/category/c/#c","title":"C++","text":""},{"location":"blog/category/llm/","title":"llm","text":""},{"location":"blog/category/llm/#llm","title":"llm","text":""},{"location":"blog/category/llm%E6%8E%A8%E7%90%86/","title":"LLM\u200b\u63a8\u7406","text":""},{"location":"blog/category/llm%E6%8E%A8%E7%90%86/#llm\u63a8\u7406","title":"LLM\u200b\u63a8\u7406","text":""},{"location":"blog/category/linux/","title":"linux","text":""},{"location":"blog/category/linux/#linux","title":"linux","text":""},{"location":"blog/category/%E7%BC%96%E7%A8%8B/","title":"\u7f16\u7a0b","text":""},{"location":"blog/category/%E7%BC%96%E7%A8%8B/#\u7f16\u7a0b","title":"\u7f16\u7a0b","text":""},{"location":"blog/category/llvm/","title":"llvm","text":""},{"location":"blog/category/llvm/#llvm","title":"llvm","text":""},{"location":"blog/category/gnu/","title":"GNU","text":""},{"location":"blog/category/gnu/#gnu","title":"GNU","text":""},{"location":"blog/category/vim/","title":"vim","text":""},{"location":"blog/category/vim/#vim","title":"vim","text":""},{"location":"blog/category/%E9%AB%98%E6%80%A7%E8%83%BD%E5%A4%9A%E7%BA%BF%E7%A8%8B/","title":"\u9ad8\u6027\u80fd\u200b\u591a\u7ebf\u7a0b","text":""},{"location":"blog/category/%E9%AB%98%E6%80%A7%E8%83%BD%E5%A4%9A%E7%BA%BF%E7%A8%8B/#\u9ad8\u6027\u80fd\u591a\u7ebf\u7a0b","title":"\u9ad8\u6027\u80fd\u200b\u591a\u7ebf\u7a0b","text":""},{"location":"blog/category/libcurl/","title":"libcurl","text":""},{"location":"blog/category/libcurl/#libcurl","title":"libcurl","text":""},{"location":"blog/category/proxychains/","title":"proxychains","text":""},{"location":"blog/category/proxychains/#proxychains","title":"proxychains","text":""},{"location":"blog/category/%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0/","title":"\u6e90\u7801\u200b\u5b9e\u73b0","text":""},{"location":"blog/category/%E6%BA%90%E7%A0%81%E5%AE%9E%E7%8E%B0/#\u6e90\u7801\u5b9e\u73b0","title":"\u6e90\u7801\u200b\u5b9e\u73b0","text":""},{"location":"blog/category/%E7%AE%97%E6%B3%95/","title":"\u7b97\u6cd5","text":""},{"location":"blog/category/%E7%AE%97%E6%B3%95/#\u7b97\u6cd5","title":"\u7b97\u6cd5","text":""},{"location":"blog/category/http-proxy/","title":"http proxy","text":""},{"location":"blog/category/http-proxy/#http-proxy","title":"http proxy","text":""},{"location":"blog/category/squid/","title":"squid","text":""},{"location":"blog/category/squid/#squid","title":"squid","text":""},{"location":"blog/category/openai/","title":"openai","text":""},{"location":"blog/category/openai/#openai","title":"openai","text":""},{"location":"blog/category/git/","title":"git","text":""},{"location":"blog/category/git/#git","title":"git","text":""},{"location":"blog/category/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/","title":"\u5f00\u53d1\u5de5\u5177","text":""},{"location":"blog/category/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/#\u5f00\u53d1\u5de5\u5177","title":"\u5f00\u53d1\u5de5\u5177","text":""},{"location":"blog/category/%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD/","title":"\u5f00\u53d1\u200b\u6280\u80fd","text":""},{"location":"blog/category/%E5%BC%80%E5%8F%91%E6%8A%80%E8%83%BD/#\u5f00\u53d1\u6280\u80fd","title":"\u5f00\u53d1\u200b\u6280\u80fd","text":""},{"location":"blog/category/ai/","title":"ai","text":""},{"location":"blog/category/ai/#ai","title":"ai","text":""},{"location":"blog/category/%E9%98%9F%E5%88%97/","title":"\u961f\u5217","text":""},{"location":"blog/category/%E9%98%9F%E5%88%97/#\u961f\u5217","title":"\u961f\u5217","text":""},{"location":"blog/category/ebpf/","title":"ebpf","text":""},{"location":"blog/category/ebpf/#ebpf","title":"ebpf","text":""},{"location":"blog/category/netcap/","title":"netcap","text":""},{"location":"blog/category/netcap/#netcap","title":"netcap","text":""},{"location":"blog/page/2/","title":"\u535a\u5ba2\u200b\u6587\u7ae0","text":""},{"location":"blog/page/2/#\u535a\u5ba2\u6587\u7ae0","title":"\u535a\u5ba2\u200b\u6587\u7ae0","text":""},{"location":"blog/page/3/","title":"\u535a\u5ba2\u200b\u6587\u7ae0","text":""},{"location":"blog/page/3/#\u535a\u5ba2\u6587\u7ae0","title":"\u535a\u5ba2\u200b\u6587\u7ae0","text":""},{"location":"blog/page/4/","title":"\u535a\u5ba2\u200b\u6587\u7ae0","text":""},{"location":"blog/page/4/#\u535a\u5ba2\u6587\u7ae0","title":"\u535a\u5ba2\u200b\u6587\u7ae0","text":""},{"location":"blog/page/5/","title":"\u535a\u5ba2\u200b\u6587\u7ae0","text":""},{"location":"blog/page/5/#\u535a\u5ba2\u6587\u7ae0","title":"\u535a\u5ba2\u200b\u6587\u7ae0","text":""},{"location":"blog/page/6/","title":"\u535a\u5ba2\u200b\u6587\u7ae0","text":""},{"location":"blog/page/6/#\u535a\u5ba2\u6587\u7ae0","title":"\u535a\u5ba2\u200b\u6587\u7ae0","text":""},{"location":"blog/page/7/","title":"\u535a\u5ba2\u200b\u6587\u7ae0","text":""},{"location":"blog/page/7/#\u535a\u5ba2\u6587\u7ae0","title":"\u535a\u5ba2\u200b\u6587\u7ae0","text":""},{"location":"blog/page/8/","title":"\u535a\u5ba2\u200b\u6587\u7ae0","text":""},{"location":"blog/page/8/#\u535a\u5ba2\u6587\u7ae0","title":"\u535a\u5ba2\u200b\u6587\u7ae0","text":""},{"location":"blog/page/9/","title":"\u535a\u5ba2\u200b\u6587\u7ae0","text":""},{"location":"blog/page/9/#\u535a\u5ba2\u6587\u7ae0","title":"\u535a\u5ba2\u200b\u6587\u7ae0","text":""},{"location":"blog/archive/2025/page/2/","title":"2025","text":""},{"location":"blog/archive/2025/page/2/#2025","title":"2025","text":""},{"location":"blog/archive/2025/page/3/","title":"2025","text":""},{"location":"blog/archive/2025/page/3/#2025","title":"2025","text":""},{"location":"blog/archive/2025/page/4/","title":"2025","text":""},{"location":"blog/archive/2025/page/4/#2025","title":"2025","text":""},{"location":"blog/archive/2025/page/5/","title":"2025","text":""},{"location":"blog/archive/2025/page/5/#2025","title":"2025","text":""},{"location":"blog/archive/2025/page/6/","title":"2025","text":""},{"location":"blog/archive/2025/page/6/#2025","title":"2025","text":""},{"location":"blog/archive/2024/page/2/","title":"2024","text":""},{"location":"blog/archive/2024/page/2/#2024","title":"2024","text":""},{"location":"blog/archive/2024/page/3/","title":"2024","text":""},{"location":"blog/archive/2024/page/3/#2024","title":"2024","text":""},{"location":"blog/archive/2024/page/4/","title":"2024","text":""},{"location":"blog/archive/2024/page/4/#2024","title":"2024","text":""},{"location":"blog/category/c/page/2/","title":"C++","text":""},{"location":"blog/category/c/page/2/#c","title":"C++","text":""},{"location":"blog/category/llm%E6%8E%A8%E7%90%86/page/2/","title":"LLM\u200b\u63a8\u7406","text":""},{"location":"blog/category/llm%E6%8E%A8%E7%90%86/page/2/#llm\u63a8\u7406","title":"LLM\u200b\u63a8\u7406","text":""},{"location":"blog/category/llm%E6%8E%A8%E7%90%86/page/3/","title":"LLM\u200b\u63a8\u7406","text":""},{"location":"blog/category/llm%E6%8E%A8%E7%90%86/page/3/#llm\u63a8\u7406","title":"LLM\u200b\u63a8\u7406","text":""},{"location":"blog/category/cpp/page/2/","title":"cpp","text":""},{"location":"blog/category/cpp/page/2/#cpp","title":"cpp","text":""}]}